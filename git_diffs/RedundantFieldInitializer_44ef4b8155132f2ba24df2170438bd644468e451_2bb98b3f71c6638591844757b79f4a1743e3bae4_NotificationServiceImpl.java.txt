diff --git a/app/src/androidTest/java/ch/threema/app/DangerousTest.java b/app/src/androidTest/java/ch/threema/app/DangerousTest.java
index 1875da05..77033004 100644
--- a/app/src/androidTest/java/ch/threema/app/DangerousTest.java
+++ b/app/src/androidTest/java/ch/threema/app/DangerousTest.java
@@ -4,7 +4,7 @@
  *   |_| |_||_|_| \___\___|_|_|_\__,_(_)
  *
  * Threema for Android
- * Copyright (c) 2018-2023 Threema GmbH
+ * Copyright (c) 2018-2024 Threema GmbH
  *
  * This program is free software: you can redistribute it and/or modify
  * it under the terms of the GNU Affero General Public License, version 3,
diff --git a/app/src/androidTest/java/ch/threema/app/ScreenshotTakingRule.java b/app/src/androidTest/java/ch/threema/app/ScreenshotTakingRule.java
index 84f6bda3..42f3f30b 100644
--- a/app/src/androidTest/java/ch/threema/app/ScreenshotTakingRule.java
+++ b/app/src/androidTest/java/ch/threema/app/ScreenshotTakingRule.java
@@ -4,7 +4,7 @@
  *   |_| |_||_|_| \___\___|_|_|_\__,_(_)
  *
  * Threema for Android
- * Copyright (c) 2020-2023 Threema GmbH
+ * Copyright (c) 2020-2024 Threema GmbH
  *
  * This program is free software: you can redistribute it and/or modify
  * it under the terms of the GNU Affero General Public License, version 3,
@@ -23,7 +23,6 @@ package ch.threema.app;
 
 import android.util.Log;
 
-import org.junit.Rule;
 import org.junit.rules.RuleChain;
 import org.junit.rules.TestWatcher;
 import org.junit.runner.Description;
@@ -35,9 +34,10 @@ import java.io.IOException;
 import java.io.OutputStream;
 
 import androidx.test.platform.app.InstrumentationRegistry;
-import androidx.test.rule.GrantPermissionRule;
 import androidx.test.uiautomator.UiDevice;
 
+import static ch.threema.app.PermissionRuleUtilsKt.getReadWriteExternalStoragePermissionRule;
+
 /**
  * When a test fails, take a screenshot.
  *
@@ -50,14 +50,10 @@ public class ScreenshotTakingRule extends TestWatcher {
 
 	public static RuleChain getRuleChain() {
 		return RuleChain
-			.outerRule(GrantPermissionRule.grant(
-				"android.permission.READ_EXTERNAL_STORAGE",
-				"android.permission.WRITE_EXTERNAL_STORAGE"
-			))
+			.outerRule(getReadWriteExternalStoragePermissionRule())
 			.around(new ScreenshotTakingRule());
 	}
 
-	@SuppressWarnings("ResultOfMethodCallIgnored")
 	@Override
 	protected void failed(Throwable e, Description description) {
 		final UiDevice device = UiDevice.getInstance(InstrumentationRegistry.getInstrumentation());
@@ -76,7 +72,7 @@ public class ScreenshotTakingRule extends TestWatcher {
 
 		// Dump UI state
 		try {
-			try (OutputStream stream = new BufferedOutputStream(new FileOutputStream(new File(basePath + ".uix")))) {
+			try (OutputStream stream = new BufferedOutputStream(new FileOutputStream(basePath + ".uix"))) {
 				// Note: Explicitly opening and closing stream since the UiAutomator dumpWindowHierarchy(File)
 				// method leaks a file descriptor.
 				device.dumpWindowHierarchy(stream);
diff --git a/app/src/androidTest/java/ch/threema/app/TestApplication.java b/app/src/androidTest/java/ch/threema/app/TestApplication.java
index 43cd6686..82fa9d28 100644
--- a/app/src/androidTest/java/ch/threema/app/TestApplication.java
+++ b/app/src/androidTest/java/ch/threema/app/TestApplication.java
@@ -4,7 +4,7 @@
  *   |_| |_||_|_| \___\___|_|_|_\__,_(_)
  *
  * Threema for Android
- * Copyright (c) 2017-2023 Threema GmbH
+ * Copyright (c) 2017-2024 Threema GmbH
  *
  * This program is free software: you can redistribute it and/or modify
  * it under the terms of the GNU Affero General Public License, version 3,
diff --git a/app/src/androidTest/java/ch/threema/app/TestFastlaneOnly.java b/app/src/androidTest/java/ch/threema/app/TestFastlaneOnly.java
index b1c2c1f8..da7ac215 100644
--- a/app/src/androidTest/java/ch/threema/app/TestFastlaneOnly.java
+++ b/app/src/androidTest/java/ch/threema/app/TestFastlaneOnly.java
@@ -4,7 +4,7 @@
  *   |_| |_||_|_| \___\___|_|_|_\__,_(_)
  *
  * Threema for Android
- * Copyright (c) 2018-2023 Threema GmbH
+ * Copyright (c) 2018-2024 Threema GmbH
  *
  * This program is free software: you can redistribute it and/or modify
  * it under the terms of the GNU Affero General Public License, version 3,
diff --git a/app/src/androidTest/java/ch/threema/app/ThreemaTestRunner.java b/app/src/androidTest/java/ch/threema/app/ThreemaTestRunner.java
index daf0594a..7865b1a6 100644
--- a/app/src/androidTest/java/ch/threema/app/ThreemaTestRunner.java
+++ b/app/src/androidTest/java/ch/threema/app/ThreemaTestRunner.java
@@ -4,7 +4,7 @@
  *   |_| |_||_|_| \___\___|_|_|_\__,_(_)
  *
  * Threema for Android
- * Copyright (c) 2017-2023 Threema GmbH
+ * Copyright (c) 2017-2024 Threema GmbH
  *
  * This program is free software: you can redistribute it and/or modify
  * it under the terms of the GNU Affero General Public License, version 3,
diff --git a/app/src/androidTest/java/ch/threema/app/backuprestore/csv/BackupServiceTest.java b/app/src/androidTest/java/ch/threema/app/backuprestore/csv/BackupServiceTest.java
index 56df24fb..0dc64c7f 100644
--- a/app/src/androidTest/java/ch/threema/app/backuprestore/csv/BackupServiceTest.java
+++ b/app/src/androidTest/java/ch/threema/app/backuprestore/csv/BackupServiceTest.java
@@ -4,7 +4,7 @@
  *   |_| |_||_|_| \___\___|_|_|_\__,_(_)
  *
  * Threema for Android
- * Copyright (c) 2020-2023 Threema GmbH
+ * Copyright (c) 2020-2024 Threema GmbH
  *
  * This program is free software: you can redistribute it and/or modify
  * it under the terms of the GNU Affero General Public License, version 3,
@@ -21,7 +21,6 @@
 
 package ch.threema.app.backuprestore.csv;
 
-import android.Manifest;
 import android.content.Context;
 import android.content.Intent;
 import android.os.Build;
@@ -73,6 +72,8 @@ import ch.threema.storage.models.ContactModel;
 import ch.threema.storage.models.data.status.VoipStatusDataModel;
 import java8.util.stream.StreamSupport;
 
+import static ch.threema.app.PermissionRuleUtilsKt.getReadWriteExternalStoragePermissionRule;
+
 @RunWith(AndroidJUnit4.class)
 @LargeTest
 @DangerousTest // Deletes data and possibly identity
@@ -94,7 +95,7 @@ public class BackupServiceTest {
     private @NonNull BallotService ballotService;
 
 	@Rule
-	public GrantPermissionRule permissionRule = GrantPermissionRule.grant(Manifest.permission.WRITE_EXTERNAL_STORAGE);
+	public GrantPermissionRule permissionRule = getReadWriteExternalStoragePermissionRule();
 
 	/**
 	 * Ensure that an identity is set up, initialize static {@link #TEST_IDENTITY} variable.
@@ -221,7 +222,8 @@ public class BackupServiceTest {
 			.setBackupAvatars(false)
 			.setBackupMedia(false)
 			.setBackupThumbnails(false)
-			.setBackupVideoAndFiles(false));
+			.setBackupVideoAndFiles(false)
+			.setBackupNonces(false));
 
 		try {
 			final ZipFile zipFile = this.openBackupFile(backupFile, new String[]{ "settings", "identity" });
@@ -274,7 +276,8 @@ public class BackupServiceTest {
             .setBackupAvatars(false)
             .setBackupMedia(false)
             .setBackupThumbnails(false)
-            .setBackupVideoAndFiles(false));
+            .setBackupVideoAndFiles(false)
+	        .setBackupNonces(false));
 
         try {
             final ZipFile zipFile = this.openBackupFile(backupFile, new String[]{
diff --git a/app/src/androidTest/java/ch/threema/app/emojis/MarkupParserTest.java b/app/src/androidTest/java/ch/threema/app/emojis/MarkupParserTest.java
index ca2b976b..8141b7f3 100644
--- a/app/src/androidTest/java/ch/threema/app/emojis/MarkupParserTest.java
+++ b/app/src/androidTest/java/ch/threema/app/emojis/MarkupParserTest.java
@@ -4,7 +4,7 @@
  *   |_| |_||_|_| \___\___|_|_|_\__,_(_)
  *
  * Threema for Android
- * Copyright (c) 2018-2023 Threema GmbH
+ * Copyright (c) 2018-2024 Threema GmbH
  *
  * This program is free software: you can redistribute it and/or modify
  * it under the terms of the GNU Affero General Public License, version 3,
diff --git a/app/src/androidTest/java/ch/threema/app/processors/MessageAckProcessorTest.java b/app/src/androidTest/java/ch/threema/app/processors/MessageAckProcessorTest.java
index 1d031469..2ff4cf33 100644
--- a/app/src/androidTest/java/ch/threema/app/processors/MessageAckProcessorTest.java
+++ b/app/src/androidTest/java/ch/threema/app/processors/MessageAckProcessorTest.java
@@ -4,7 +4,7 @@
  *   |_| |_||_|_| \___\___|_|_|_\__,_(_)
  *
  * Threema for Android
- * Copyright (c) 2021-2023 Threema GmbH
+ * Copyright (c) 2021-2024 Threema GmbH
  *
  * This program is free software: you can redistribute it and/or modify
  * it under the terms of the GNU Affero General Public License, version 3,
diff --git a/app/src/androidTest/java/ch/threema/app/processors/MessageProcessorTest.java b/app/src/androidTest/java/ch/threema/app/processors/MessageProcessorTest.java
index e85df2c8..c02f7e52 100644
--- a/app/src/androidTest/java/ch/threema/app/processors/MessageProcessorTest.java
+++ b/app/src/androidTest/java/ch/threema/app/processors/MessageProcessorTest.java
@@ -4,7 +4,7 @@
  *   |_| |_||_|_| \___\___|_|_|_\__,_(_)
  *
  * Threema for Android
- * Copyright (c) 2021-2023 Threema GmbH
+ * Copyright (c) 2021-2024 Threema GmbH
  *
  * This program is free software: you can redistribute it and/or modify
  * it under the terms of the GNU Affero General Public License, version 3,
@@ -43,7 +43,6 @@ import ch.threema.app.services.MessageService;
 import ch.threema.app.services.NotificationService;
 import ch.threema.app.services.PreferenceService;
 import ch.threema.app.services.ballot.BallotService;
-import ch.threema.app.services.group.GroupInviteService;
 import ch.threema.app.services.group.GroupJoinResponseService;
 import ch.threema.app.services.group.IncomingGroupJoinRequestService;
 import ch.threema.app.testutils.CaptureLogcatOnTestFailureRule;
@@ -59,6 +58,7 @@ import ch.threema.domain.helpers.InMemoryIdentityStore;
 import ch.threema.domain.helpers.InMemoryNonceStore;
 import ch.threema.domain.models.Contact;
 import ch.threema.domain.models.MessageId;
+import ch.threema.domain.protocol.ServerAddressProvider;
 import ch.threema.domain.protocol.csp.ProtocolDefines;
 import ch.threema.domain.protocol.csp.coders.MessageBox;
 import ch.threema.domain.protocol.csp.coders.MessageCoder;
@@ -78,21 +78,7 @@ public class MessageProcessorTest {
 	private final static Contact TEST_CONTACT_1 = new Contact("09BNNVR2", Utils.hexStringToByteArray("e4613bbe5408d342fdabc3edf4509d1a3aecd7cb0598773987eef8400e74c81a"));
 	private final static Contact TEST_CONTACT_2 = new Contact("0BSXZ4P8", Utils.hexStringToByteArray("dee1cd341de88f783a768941eac702951c8bbb21e836da4a43ab8f3776fc0a65"));
 
-	// Services
-	private MessageService messageService;
-	private ContactService contactService;
-	private PreferenceService preferenceService;
-	private GroupService groupService;
-	private GroupInviteService groupInviteService;
-	private GroupJoinResponseService groupJoinResponseService;
-	private IncomingGroupJoinRequestService incomingGroupJoinRequestService;
-	private IdListService blackListService;
-	private BallotService ballotService;
-	private FileService fileService;
-	private NotificationService notificationService;
-	private VoipStateService voipStateService;
 	private NonceFactory nonceFactory;
-	private GroupCallManager groupCallManager;
 
 	// Stores
 	private IdentityStoreInterface identityStore;
@@ -101,27 +87,27 @@ public class MessageProcessorTest {
 
 	// Message processor
 	private MessageProcessor messageProcessor;
-	private ForwardSecurityMessageProcessor forwardSecurityMessageProcessor;
 
 	@Before
 	public void setUp() throws Exception {
 		// Load services
+		// Services
 		final ServiceManager serviceManager = Objects.requireNonNull(ThreemaApplication.getServiceManager());
-		this.messageService = serviceManager.getMessageService();
-		this.contactService = serviceManager.getContactService();
-		this.preferenceService = serviceManager.getPreferenceService();
-		this.groupService = serviceManager.getGroupService();
-		this.groupInviteService = serviceManager.getGroupInviteService();
-		this.groupJoinResponseService = serviceManager.getGroupJoinResponseService();
-		this.incomingGroupJoinRequestService = serviceManager.getIncomingGroupJoinRequestService();
-		this.blackListService = serviceManager.getBlackListService();
-		this.ballotService = serviceManager.getBallotService();
-		this.fileService = serviceManager.getFileService();
-		this.notificationService = serviceManager.getNotificationService();
-		this.voipStateService = serviceManager.getVoipStateService();
+		MessageService messageService = serviceManager.getMessageService();
+		ContactService contactService = serviceManager.getContactService();
+		PreferenceService preferenceService = serviceManager.getPreferenceService();
+		GroupService groupService = serviceManager.getGroupService();
+		GroupJoinResponseService groupJoinResponseService = serviceManager.getGroupJoinResponseService();
+		IncomingGroupJoinRequestService incomingGroupJoinRequestService = serviceManager.getIncomingGroupJoinRequestService();
+		IdListService blackListService = serviceManager.getBlackListService();
+		BallotService ballotService = serviceManager.getBallotService();
+		FileService fileService = serviceManager.getFileService();
+		NotificationService notificationService = serviceManager.getNotificationService();
+		VoipStateService voipStateService = serviceManager.getVoipStateService();
 		this.nonceFactory = new NonceFactory(new InMemoryNonceStore());
-		this.forwardSecurityMessageProcessor = serviceManager.getForwardSecurityMessageProcessor();
-		this.groupCallManager = serviceManager.getGroupCallManager();
+		ForwardSecurityMessageProcessor forwardSecurityMessageProcessor = serviceManager.getForwardSecurityMessageProcessor();
+		GroupCallManager groupCallManager = serviceManager.getGroupCallManager();
+		ServerAddressProvider serverAddressProvider = serviceManager.getServerAddressProviderService().getServerAddressProvider();
 
 		// Create in-memory stores
 		this.contactStore = new InMemoryContactStore();
@@ -147,21 +133,23 @@ public class MessageProcessorTest {
 
 		// Create message processor
 		this.messageProcessor = new MessageProcessor(
-			this.messageService,
-			this.contactService,
+			serviceManager,
+			messageService,
+			contactService,
 			this.identityStore,
 			this.contactStore,
-			this.preferenceService,
-			this.groupService,
-			this.groupJoinResponseService,
-			this.incomingGroupJoinRequestService,
-			this.blackListService,
-			this.ballotService,
-			this.fileService,
-			this.notificationService,
-			this.voipStateService,
-			this.forwardSecurityMessageProcessor,
-			this.groupCallManager
+			preferenceService,
+			groupService,
+			groupJoinResponseService,
+			incomingGroupJoinRequestService,
+			blackListService,
+			ballotService,
+			fileService,
+			notificationService,
+			voipStateService,
+			forwardSecurityMessageProcessor,
+			groupCallManager,
+			serverAddressProvider
 		);
 	}
 
@@ -185,7 +173,7 @@ public class MessageProcessorTest {
 		boxmsg.setBox(new byte[] { 0, 1, 2, 3 });
 		boxmsg.setNonce(this.nonceFactory.next());
 		final ProcessIncomingResult result = this.messageProcessor.processIncomingMessage(boxmsg);
-		Assert.assertFalse(result.processed);
+		Assert.assertFalse(result.wasProcessed());
 		final String logs = this.getLogs();
 		ThreemaAssert.assertContains(logs, "BadMessageException: Message is not for own identity, cannot decode");
 	}
@@ -202,7 +190,7 @@ public class MessageProcessorTest {
 		boxmsg.setBox(new byte[] { 0, 1, 2, 3 });
 		boxmsg.setNonce(this.nonceFactory.next());
 		final ProcessIncomingResult result = this.messageProcessor.processIncomingMessage(boxmsg);
-		Assert.assertFalse(result.processed);
+		Assert.assertFalse(result.wasProcessed());
 		final String logs = this.getLogs();
 		ThreemaAssert.assertContains(logs, "ch.threema.domain.protocol.csp.messages.BadMessageException: Decryption of message from");
 	}
@@ -233,7 +221,7 @@ public class MessageProcessorTest {
 
 		// Process message
 		final ProcessIncomingResult result = this.messageProcessor.processIncomingMessage(boxmsg);
-		Assert.assertTrue(result.processed);
+		Assert.assertTrue(result.wasProcessed());
 
 		// Assert log messages
 		final String logs = this.getLogs();
diff --git a/app/src/androidTest/java/ch/threema/app/service/GroupInviteServiceTest.java b/app/src/androidTest/java/ch/threema/app/service/GroupInviteServiceTest.java
index 30500434..0b4d9bdd 100644
--- a/app/src/androidTest/java/ch/threema/app/service/GroupInviteServiceTest.java
+++ b/app/src/androidTest/java/ch/threema/app/service/GroupInviteServiceTest.java
@@ -4,7 +4,7 @@
  *   |_| |_||_|_| \___\___|_|_|_\__,_(_)
  *
  * Threema for Android
- * Copyright (c) 2021-2023 Threema GmbH
+ * Copyright (c) 2021-2024 Threema GmbH
  *
  * This program is free software: you can redistribute it and/or modify
  * it under the terms of the GNU Affero General Public License, version 3,
@@ -232,11 +232,6 @@ public class GroupInviteServiceTest {
 				return null;
 			}
 
-			@Override
-			public boolean isTyping(String toIdentity, boolean isTyping) {
-				return false;
-			}
-
 			@Override
 			public boolean restoreIdentity(String backupString, String password) throws Exception {
 				return false;
diff --git a/app/src/androidTest/java/ch/threema/app/testutils/CaptureLogcatOnTestFailureRule.java b/app/src/androidTest/java/ch/threema/app/testutils/CaptureLogcatOnTestFailureRule.java
index 6ba3825e..45289df0 100644
--- a/app/src/androidTest/java/ch/threema/app/testutils/CaptureLogcatOnTestFailureRule.java
+++ b/app/src/androidTest/java/ch/threema/app/testutils/CaptureLogcatOnTestFailureRule.java
@@ -4,7 +4,7 @@
  *   |_| |_||_|_| \___\___|_|_|_\__,_(_)
  *
  * Threema for Android
- * Copyright (c) 2021-2023 Threema GmbH
+ * Copyright (c) 2021-2024 Threema GmbH
  *
  * This program is free software: you can redistribute it and/or modify
  * it under the terms of the GNU Affero General Public License, version 3,
diff --git a/app/src/androidTest/java/ch/threema/app/testutils/InstructionUtil.java b/app/src/androidTest/java/ch/threema/app/testutils/InstructionUtil.java
index 13d0afeb..2653e26c 100644
--- a/app/src/androidTest/java/ch/threema/app/testutils/InstructionUtil.java
+++ b/app/src/androidTest/java/ch/threema/app/testutils/InstructionUtil.java
@@ -4,7 +4,7 @@
  *   |_| |_||_|_| \___\___|_|_|_\__,_(_)
  *
  * Threema for Android
- * Copyright (c) 2017-2023 Threema GmbH
+ * Copyright (c) 2017-2024 Threema GmbH
  *
  * This program is free software: you can redistribute it and/or modify
  * it under the terms of the GNU Affero General Public License, version 3,
diff --git a/app/src/androidTest/java/ch/threema/app/testutils/RecyclerViewMatcher.java b/app/src/androidTest/java/ch/threema/app/testutils/RecyclerViewMatcher.java
index a4874bfd..2efeb264 100644
--- a/app/src/androidTest/java/ch/threema/app/testutils/RecyclerViewMatcher.java
+++ b/app/src/androidTest/java/ch/threema/app/testutils/RecyclerViewMatcher.java
@@ -4,7 +4,7 @@
  *   |_| |_||_|_| \___\___|_|_|_\__,_(_)
  *
  * Threema for Android
- * Copyright (c) 2017-2023 Threema GmbH
+ * Copyright (c) 2017-2024 Threema GmbH
  *
  * This program is free software: you can redistribute it and/or modify
  * it under the terms of the GNU Affero General Public License, version 3,
diff --git a/app/src/androidTest/java/ch/threema/app/testutils/TestHelpers.java b/app/src/androidTest/java/ch/threema/app/testutils/TestHelpers.java
index 27eaaf26..ac582e57 100644
--- a/app/src/androidTest/java/ch/threema/app/testutils/TestHelpers.java
+++ b/app/src/androidTest/java/ch/threema/app/testutils/TestHelpers.java
@@ -4,7 +4,7 @@
  *   |_| |_||_|_| \___\___|_|_|_\__,_(_)
  *
  * Threema for Android
- * Copyright (c) 2020-2023 Threema GmbH
+ * Copyright (c) 2020-2024 Threema GmbH
  *
  * This program is free software: you can redistribute it and/or modify
  * it under the terms of the GNU Affero General Public License, version 3,
@@ -26,11 +26,16 @@ import android.app.ActivityManager.RunningServiceInfo;
 import android.content.Context;
 import android.util.Log;
 
+import com.neilalexander.jnacl.NaCl;
+
 import java.io.BufferedReader;
 import java.io.IOException;
 import java.io.InputStreamReader;
+import java.util.Date;
+import java.util.List;
 
 import androidx.annotation.NonNull;
+import androidx.annotation.Nullable;
 import androidx.test.uiautomator.By;
 import androidx.test.uiautomator.BySelector;
 import androidx.test.uiautomator.UiDevice;
@@ -38,12 +43,123 @@ import androidx.test.uiautomator.Until;
 import ch.threema.app.managers.ServiceManager;
 import ch.threema.app.services.UserService;
 import ch.threema.base.utils.Utils;
+import ch.threema.domain.helpers.InMemoryIdentityStore;
+import ch.threema.domain.models.Contact;
+import ch.threema.domain.models.GroupId;
+import ch.threema.domain.stores.IdentityStoreInterface;
+import ch.threema.storage.models.ContactModel;
+import ch.threema.storage.models.GroupModel;
 
 import static org.junit.Assert.assertNotNull;
 
 public class TestHelpers {
 	private static final String TAG = "TestHelpers";
 
+	public static final TestContact TEST_CONTACT = new TestContact(
+		"XERCUKNS",
+		Utils.hexStringToByteArray("2bbc16092ff45ffcd0045c00f2f5e1e9597621f89360bbca23a2a2956b3c3b36"),
+		Utils.hexStringToByteArray("977aba4ab367041f6137afef69ab9676d445011ca7aca0455a5c64805b80b77a")
+	);
+
+	public static final class TestContact {
+		@NonNull
+		public final String identity;
+		@NonNull
+		public final byte[] publicKey;
+		@NonNull
+		public final byte[] privateKey;
+
+		public TestContact(@NonNull String identity) {
+			this.identity = identity;
+			publicKey = new byte[NaCl.PUBLICKEYBYTES];
+			privateKey = new byte[NaCl.SECRETKEYBYTES];
+
+			NaCl.genkeypair(publicKey, privateKey);
+		}
+
+		public TestContact(@NonNull String identity, @NonNull byte[] publicKey, @NonNull byte[] privateKey) {
+			this.identity = identity;
+			this.publicKey = publicKey;
+			this.privateKey = privateKey;
+		}
+
+		@NonNull
+		public Contact getContact() {
+			return new Contact(this.identity, this.publicKey);
+		}
+
+		@NonNull
+		public ContactModel getContactModel() {
+			return new ContactModel(this.identity, this.publicKey);
+		}
+
+		@NonNull
+		public IdentityStoreInterface getIdentityStore() {
+			return new InMemoryIdentityStore(
+				this.identity,
+				"",
+				this.privateKey,
+				null
+			);
+		}
+	}
+
+	public static final class TestGroup {
+		private int localGroupId = -1;
+
+		@NonNull
+		public final GroupId apiGroupId;
+
+		@NonNull
+		public final TestContact groupCreator;
+
+		@NonNull
+		public final List<TestContact> members;
+
+		@NonNull
+		public final String groupName;
+
+		@Nullable
+		public final byte[] profilePicture;
+
+		public TestGroup(
+			@NonNull GroupId apiGroupId,
+			@NonNull TestContact groupCreator,
+			@NonNull List<TestContact> members,
+			@NonNull String groupName
+		) {
+			this(apiGroupId, groupCreator, members, groupName, null);
+		}
+
+		public TestGroup(
+			@NonNull GroupId apiGroupId,
+			@NonNull TestContact groupCreator,
+			@NonNull List<TestContact> members,
+			@NonNull String groupName,
+			@Nullable byte[] profilePicture
+		) {
+			this.apiGroupId = apiGroupId;
+			this.groupCreator = groupCreator;
+			this.members = members;
+			this.groupName = groupName;
+			this.profilePicture = profilePicture;
+		}
+
+		@NonNull
+		public GroupModel getGroupModel() {
+			return new GroupModel()
+				.setApiGroupId(apiGroupId)
+				.setCreatedAt(new Date())
+				.setName(this.groupName)
+				.setCreatorIdentity(this.groupCreator.identity)
+				.setId(localGroupId);
+		}
+
+		public void setLocalGroupId(int localGroupId) {
+			this.localGroupId = localGroupId;
+		}
+	}
+
 	/**
 	 * Open the notification area and wait for the notifications to become visible.
 	 *
@@ -87,12 +203,13 @@ public class TestHelpers {
 		}
 
 		// Otherwise, create identity
-		final String identity = "XERCUKNS";
-		final byte[] publicKey = Utils.hexStringToByteArray("2bbc16092ff45ffcd0045c00f2f5e1e9597621f89360bbca23a2a2956b3c3b36");
-		final byte[] privateKey = Utils.hexStringToByteArray("977aba4ab367041f6137afef69ab9676d445011ca7aca0455a5c64805b80b77a");
-		userService.restoreIdentity(identity, privateKey, publicKey);
-		Log.i(TAG, "Test identity restored: " + identity);
-		return identity;
+		userService.restoreIdentity(
+			TEST_CONTACT.identity,
+			TEST_CONTACT.privateKey,
+			TEST_CONTACT.publicKey
+		);
+		Log.i(TAG, "Test identity restored: " + TEST_CONTACT.identity);
+		return TEST_CONTACT.identity;
 	}
 
 	public static void clearLogcat() {
diff --git a/app/src/androidTest/java/ch/threema/app/testutils/ThreemaAssert.java b/app/src/androidTest/java/ch/threema/app/testutils/ThreemaAssert.java
index df326023..253eb41b 100644
--- a/app/src/androidTest/java/ch/threema/app/testutils/ThreemaAssert.java
+++ b/app/src/androidTest/java/ch/threema/app/testutils/ThreemaAssert.java
@@ -4,7 +4,7 @@
  *   |_| |_||_|_| \___\___|_|_|_\__,_(_)
  *
  * Threema for Android
- * Copyright (c) 2021-2023 Threema GmbH
+ * Copyright (c) 2021-2024 Threema GmbH
  *
  * This program is free software: you can redistribute it and/or modify
  * it under the terms of the GNU Affero General Public License, version 3,
diff --git a/app/src/androidTest/java/ch/threema/app/utils/BackgroundErrorNotificationTest.java b/app/src/androidTest/java/ch/threema/app/utils/BackgroundErrorNotificationTest.java
index 5751332e..b2e3c143 100644
--- a/app/src/androidTest/java/ch/threema/app/utils/BackgroundErrorNotificationTest.java
+++ b/app/src/androidTest/java/ch/threema/app/utils/BackgroundErrorNotificationTest.java
@@ -4,7 +4,7 @@
  *   |_| |_||_|_| \___\___|_|_|_\__,_(_)
  *
  * Threema for Android
- * Copyright (c) 2020-2023 Threema GmbH
+ * Copyright (c) 2020-2024 Threema GmbH
  *
  * This program is free software: you can redistribute it and/or modify
  * it under the terms of the GNU Affero General Public License, version 3,
@@ -48,9 +48,10 @@ import androidx.test.uiautomator.UiObject2;
 import androidx.test.uiautomator.Until;
 import ch.threema.app.R;
 import ch.threema.app.ScreenshotTakingRule;
-import ch.threema.app.testutils.TestHelpers;
 import ch.threema.app.notifications.BackgroundErrorNotification;
+import ch.threema.app.testutils.TestHelpers;
 
+import static ch.threema.app.PermissionRuleUtilsKt.getNotificationPermissionRule;
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertNotNull;
 import static org.junit.Assert.assertNull;
@@ -62,7 +63,9 @@ public class BackgroundErrorNotificationTest {
 	private UiDevice mDevice;
 
 	@Rule
-	public final RuleChain activityRule = ScreenshotTakingRule.getRuleChain();
+	public final RuleChain activityRule = ScreenshotTakingRule.getRuleChain().around(
+		getNotificationPermissionRule()
+	);
 
 	@Before
 	public void getDevice() {
@@ -76,7 +79,7 @@ public class BackgroundErrorNotificationTest {
 	@SuppressWarnings("unused") // Used for manual debugging
 	private static void dumpState(@NonNull UiDevice device) throws IOException {
 		device.takeScreenshot(new File("/sdcard/screenshot.png"));
-		try (OutputStream stream = new BufferedOutputStream(new FileOutputStream(new File("/sdcard/screenshot.uix")))) {
+		try (OutputStream stream = new BufferedOutputStream(new FileOutputStream("/sdcard/screenshot.uix"))) {
 			// Note: Explicitly opening and closing stream since the UiAutomator dumpWindowHierarchy(File)
 			// method leaks a file descriptor.
 			device.dumpWindowHierarchy(stream);
diff --git a/app/src/androidTest/java/ch/threema/app/utils/GeoLocationUtilTest.kt b/app/src/androidTest/java/ch/threema/app/utils/GeoLocationUtilTest.kt
index d6ff73b1..f68afde5 100644
--- a/app/src/androidTest/java/ch/threema/app/utils/GeoLocationUtilTest.kt
+++ b/app/src/androidTest/java/ch/threema/app/utils/GeoLocationUtilTest.kt
@@ -4,7 +4,7 @@
  *   |_| |_||_|_| \___\___|_|_|_\__,_(_)
  *
  * Threema for Android
- * Copyright (c) 2022-2023 Threema GmbH
+ * Copyright (c) 2022-2024 Threema GmbH
  *
  * This program is free software: you can redistribute it and/or modify
  * it under the terms of the GNU Affero General Public License, version 3,
diff --git a/app/src/androidTest/java/ch/threema/app/utils/LinkifyUtilTest.kt b/app/src/androidTest/java/ch/threema/app/utils/LinkifyUtilTest.kt
index ef143285..f3adaa6f 100644
--- a/app/src/androidTest/java/ch/threema/app/utils/LinkifyUtilTest.kt
+++ b/app/src/androidTest/java/ch/threema/app/utils/LinkifyUtilTest.kt
@@ -4,7 +4,7 @@
  *   |_| |_||_|_| \___\___|_|_|_\__,_(_)
  *
  * Threema for Android
- * Copyright (c) 2022-2023 Threema GmbH
+ * Copyright (c) 2022-2024 Threema GmbH
  *
  * This program is free software: you can redistribute it and/or modify
  * it under the terms of the GNU Affero General Public License, version 3,
diff --git a/app/src/androidTest/java/ch/threema/app/utils/TextUtilTest.java b/app/src/androidTest/java/ch/threema/app/utils/TextUtilTest.java
index 057e9fa5..0f1e4f28 100644
--- a/app/src/androidTest/java/ch/threema/app/utils/TextUtilTest.java
+++ b/app/src/androidTest/java/ch/threema/app/utils/TextUtilTest.java
@@ -4,7 +4,7 @@
  *   |_| |_||_|_| \___\___|_|_|_\__,_(_)
  *
  * Threema for Android
- * Copyright (c) 2019-2023 Threema GmbH
+ * Copyright (c) 2019-2024 Threema GmbH
  *
  * This program is free software: you can redistribute it and/or modify
  * it under the terms of the GNU Affero General Public License, version 3,
diff --git a/app/src/androidTest/java/ch/threema/app/voip/SdpTest.java b/app/src/androidTest/java/ch/threema/app/voip/SdpTest.java
index a3112c90..3a69cf7d 100644
--- a/app/src/androidTest/java/ch/threema/app/voip/SdpTest.java
+++ b/app/src/androidTest/java/ch/threema/app/voip/SdpTest.java
@@ -4,7 +4,7 @@
  *   |_| |_||_|_| \___\___|_|_|_\__,_(_)
  *
  * Threema for Android
- * Copyright (c) 2018-2023 Threema GmbH
+ * Copyright (c) 2018-2024 Threema GmbH
  *
  * This program is free software: you can redistribute it and/or modify
  * it under the terms of the GNU Affero General Public License, version 3,
@@ -64,7 +64,7 @@ public class SdpTest {
 		// Return sane default parameters used for calls
 		return new PeerConnectionClient.PeerConnectionParameters(
 			false,
-			false, false, false, false, false,
+			true, true,
 			videoEnabled, videoEnabled, true, true,
 			videoEnabled
 				? SdpPatcher.RtpHeaderExtensionConfig.ENABLE_WITH_ONE_AND_TWO_BYTE_HEADER
diff --git a/app/src/androidTest/java/ch/threema/app/voip/VoipStatusMessageTest.java b/app/src/androidTest/java/ch/threema/app/voip/VoipStatusMessageTest.java
index 32f305f9..d1602f20 100644
--- a/app/src/androidTest/java/ch/threema/app/voip/VoipStatusMessageTest.java
+++ b/app/src/androidTest/java/ch/threema/app/voip/VoipStatusMessageTest.java
@@ -4,7 +4,7 @@
  *   |_| |_||_|_| \___\___|_|_|_\__,_(_)
  *
  * Threema for Android
- * Copyright (c) 2019-2023 Threema GmbH
+ * Copyright (c) 2019-2024 Threema GmbH
  *
  * This program is free software: you can redistribute it and/or modify
  * it under the terms of the GNU Affero General Public License, version 3,
diff --git a/app/src/androidTest/java/ch/threema/app/webclient/activities/SessionsActivityTest.java b/app/src/androidTest/java/ch/threema/app/webclient/activities/SessionsActivityTest.java
index 9139aa5a..d94b5c6e 100644
--- a/app/src/androidTest/java/ch/threema/app/webclient/activities/SessionsActivityTest.java
+++ b/app/src/androidTest/java/ch/threema/app/webclient/activities/SessionsActivityTest.java
@@ -4,7 +4,7 @@
  *   |_| |_||_|_| \___\___|_|_|_\__,_(_)
  *
  * Threema for Android
- * Copyright (c) 2018-2023 Threema GmbH
+ * Copyright (c) 2018-2024 Threema GmbH
  *
  * This program is free software: you can redistribute it and/or modify
  * it under the terms of the GNU Affero General Public License, version 3,
diff --git a/app/src/androidTest/java/ch/threema/app/webclient/converter/MessageTest.java b/app/src/androidTest/java/ch/threema/app/webclient/converter/MessageTest.java
index 1bff8e26..4a6baa67 100644
--- a/app/src/androidTest/java/ch/threema/app/webclient/converter/MessageTest.java
+++ b/app/src/androidTest/java/ch/threema/app/webclient/converter/MessageTest.java
@@ -4,7 +4,7 @@
  *   |_| |_||_|_| \___\___|_|_|_\__,_(_)
  *
  * Threema for Android
- * Copyright (c) 2020-2023 Threema GmbH
+ * Copyright (c) 2020-2024 Threema GmbH
  *
  * This program is free software: you can redistribute it and/or modify
  * it under the terms of the GNU Affero General Public License, version 3,
diff --git a/app/src/androidTest/java/ch/threema/app/webclient/converter/MsgpackTest.java b/app/src/androidTest/java/ch/threema/app/webclient/converter/MsgpackTest.java
index 4a56f2c5..f7dac4d9 100644
--- a/app/src/androidTest/java/ch/threema/app/webclient/converter/MsgpackTest.java
+++ b/app/src/androidTest/java/ch/threema/app/webclient/converter/MsgpackTest.java
@@ -4,7 +4,7 @@
  *   |_| |_||_|_| \___\___|_|_|_\__,_(_)
  *
  * Threema for Android
- * Copyright (c) 2017-2023 Threema GmbH
+ * Copyright (c) 2017-2024 Threema GmbH
  *
  * This program is free software: you can redistribute it and/or modify
  * it under the terms of the GNU Affero General Public License, version 3,
diff --git a/app/src/androidTest/java/ch/threema/logging/backend/DebugLogFileBackendTest.java b/app/src/androidTest/java/ch/threema/logging/backend/DebugLogFileBackendTest.java
index e0a8dffb..fafd59d8 100644
--- a/app/src/androidTest/java/ch/threema/logging/backend/DebugLogFileBackendTest.java
+++ b/app/src/androidTest/java/ch/threema/logging/backend/DebugLogFileBackendTest.java
@@ -4,7 +4,7 @@
  *   |_| |_||_|_| \___\___|_|_|_\__,_(_)
  *
  * Threema for Android
- * Copyright (c) 2018-2023 Threema GmbH
+ * Copyright (c) 2018-2024 Threema GmbH
  *
  * This program is free software: you can redistribute it and/or modify
  * it under the terms of the GNU Affero General Public License, version 3,
@@ -21,7 +21,6 @@
 
 package ch.threema.logging.backend;
 
-import android.Manifest;
 import android.util.Log;
 
 import org.junit.Assert;
@@ -39,6 +38,8 @@ import androidx.test.rule.GrantPermissionRule;
 import ch.threema.app.BuildConfig;
 import ch.threema.app.DangerousTest;
 
+import static ch.threema.app.PermissionRuleUtilsKt.getReadWriteExternalStoragePermissionRule;
+
 /**
  * Debug log file test
  */
@@ -47,7 +48,7 @@ import ch.threema.app.DangerousTest;
 public class DebugLogFileBackendTest {
 
 	@Rule
-	public GrantPermissionRule permissionRule = GrantPermissionRule.grant(Manifest.permission.WRITE_EXTERNAL_STORAGE);
+	public GrantPermissionRule permissionRule = getReadWriteExternalStoragePermissionRule();
 
 	@Before
 	public void disableLogfile() {
diff --git a/app/src/androidTest/java/ch/threema/storage/SQLDHSessionStoreTest.java b/app/src/androidTest/java/ch/threema/storage/SQLDHSessionStoreTest.java
index 48c1abd5..c0d78aa6 100644
--- a/app/src/androidTest/java/ch/threema/storage/SQLDHSessionStoreTest.java
+++ b/app/src/androidTest/java/ch/threema/storage/SQLDHSessionStoreTest.java
@@ -4,7 +4,7 @@
  *   |_| |_||_|_| \___\___|_|_|_\__,_(_)
  *
  * Threema for Android
- * Copyright (c) 2022-2023 Threema GmbH
+ * Copyright (c) 2022-2024 Threema GmbH
  *
  * This program is free software: you can redistribute it and/or modify
  * it under the terms of the GNU Affero General Public License, version 3,
@@ -29,9 +29,11 @@ import org.junit.Test;
 import java.nio.charset.StandardCharsets;
 
 import androidx.test.core.app.ApplicationProvider;
+import ch.threema.app.ThreemaApplication;
 import ch.threema.domain.fs.DHSession;
 import ch.threema.domain.fs.DHSessionId;
 import ch.threema.domain.helpers.DummyUsers;
+import ch.threema.domain.protocol.csp.messages.BadMessageException;
 import ch.threema.domain.stores.DHSessionStoreException;
 
 public class SQLDHSessionStoreTest {
@@ -47,7 +49,12 @@ public class SQLDHSessionStoreTest {
 	@Before
 	public void setup() {
 		tempDbFileName = "threema-fs-test-" + System.currentTimeMillis() + ".db";
-		store = new SQLDHSessionStore(ApplicationProvider.getApplicationContext(), DATABASE_KEY, tempDbFileName);
+		store = new SQLDHSessionStore(
+			ApplicationProvider.getApplicationContext(),
+			DATABASE_KEY,
+			tempDbFileName,
+			ThreemaApplication.requireServiceManager().getUpdateSystemService()
+		);
 	}
 
 	@After
@@ -57,7 +64,7 @@ public class SQLDHSessionStoreTest {
 		ApplicationProvider.getApplicationContext().deleteDatabase(tempDbFileName);
 	}
 
-	public void createSessions() {
+	public void createSessions() throws BadMessageException {
 		// Alice is the initiator (= us)
 		this.initiatorDHSession = new DHSession(
 			DummyUsers.getContactForUser(DummyUsers.BOB),
@@ -67,6 +74,7 @@ public class SQLDHSessionStoreTest {
 		// Bob gets an init message from Alice with her ephemeral public key
 		this.responderDHSession = new DHSession(
 			this.initiatorDHSession.getId(),
+			DHSession.SUPPORTED_VERSION_RANGE,
 			this.initiatorDHSession.getMyEphemeralPublicKey(),
 			DummyUsers.getContactForUser(DummyUsers.ALICE),
 			DummyUsers.getIdentityStoreForUser(DummyUsers.BOB)
@@ -74,7 +82,7 @@ public class SQLDHSessionStoreTest {
 	}
 
 	@Test
-	public void testStoreInitiatorSession() throws DHSessionStoreException, DHSession.MissingEphemeralPrivateKeyException {
+	public void testStoreInitiatorSession() throws DHSessionStoreException, DHSession.MissingEphemeralPrivateKeyException, BadMessageException {
 		// Assume that we are Alice = the initiator, and Bob is the responder
 		createSessions();
 
@@ -97,6 +105,7 @@ public class SQLDHSessionStoreTest {
 
 		// Now Bob sends his ephemeral public key back to Alice
 		this.initiatorDHSession.processAccept(
+			DHSession.SUPPORTED_VERSION_RANGE,
 			this.responderDHSession.getMyEphemeralPublicKey(),
 			DummyUsers.getContactForUser(DummyUsers.BOB),
 			DummyUsers.getIdentityStoreForUser(DummyUsers.ALICE)
@@ -118,7 +127,7 @@ public class SQLDHSessionStoreTest {
 	}
 
 	@Test
-	public void testStoreResponderSession() throws DHSessionStoreException {
+	public void testStoreResponderSession() throws DHSessionStoreException, BadMessageException {
 		// Assume that we are Bob = the responder
 		createSessions();
 
@@ -143,7 +152,7 @@ public class SQLDHSessionStoreTest {
 	}
 
 	@Test
-	public void testDiscardRatchet() throws DHSessionStoreException {
+	public void testDiscardRatchet() throws DHSessionStoreException, BadMessageException {
 		// Assume that we are Bob = the responder
 		createSessions();
 
@@ -172,7 +181,7 @@ public class SQLDHSessionStoreTest {
 	}
 
 	@Test
-	public void testRaceCondition() throws DHSession.MissingEphemeralPrivateKeyException, DHSessionStoreException {
+	public void testRaceCondition() throws DHSession.MissingEphemeralPrivateKeyException, DHSessionStoreException, BadMessageException {
 		// Repeat the test several times, as random session IDs are involved
 		for (int i = 0; i < NUM_RANDOM_RUNS; i++) {
 			if (i > 0) {
@@ -183,7 +192,7 @@ public class SQLDHSessionStoreTest {
 		}
 	}
 
-	private void testRaceConditionOnce() throws DHSession.MissingEphemeralPrivateKeyException, DHSessionStoreException {
+	private void testRaceConditionOnce() throws DHSession.MissingEphemeralPrivateKeyException, DHSessionStoreException, BadMessageException {
 		createSessions();
 
 		// Alice stores the session that she initiated (still in 2DH mode)
@@ -198,6 +207,7 @@ public class SQLDHSessionStoreTest {
 		// Alice gets the Init for Bob's new session first and processes it
 		DHSession raceResponderDHSession = new DHSession(
 			raceInitiatorDHSession.getId(),
+			DHSession.SUPPORTED_VERSION_RANGE,
 			raceInitiatorDHSession.getMyEphemeralPublicKey(),
 			DummyUsers.getContactForUser(DummyUsers.BOB),
 			DummyUsers.getIdentityStoreForUser(DummyUsers.ALICE)
@@ -207,6 +217,7 @@ public class SQLDHSessionStoreTest {
 
 		// Alice then processes the Accept from Bob and stores the session
 		this.initiatorDHSession.processAccept(
+			DHSession.SUPPORTED_VERSION_RANGE,
 			this.responderDHSession.getMyEphemeralPublicKey(),
 			DummyUsers.getContactForUser(DummyUsers.BOB),
 			DummyUsers.getIdentityStoreForUser(DummyUsers.ALICE)
diff --git a/app/src/foss_based/java/ch/threema/app/activities/VoiceActionActivity.java b/app/src/foss_based/java/ch/threema/app/activities/VoiceActionActivity.java
index d4b94caf..9951f466 100644
--- a/app/src/foss_based/java/ch/threema/app/activities/VoiceActionActivity.java
+++ b/app/src/foss_based/java/ch/threema/app/activities/VoiceActionActivity.java
@@ -4,7 +4,7 @@
  *   |_| |_||_|_| \___\___|_|_|_\__,_(_)
  *
  * Threema for Android
- * Copyright (c) 2021-2023 Threema GmbH
+ * Copyright (c) 2021-2024 Threema GmbH
  *
  * This program is free software: you can redistribute it and/or modify
  * it under the terms of the GNU Affero General Public License, version 3,
diff --git a/app/src/foss_based/java/ch/threema/app/licensing/StoreLicenseCheck.java b/app/src/foss_based/java/ch/threema/app/licensing/StoreLicenseCheck.java
index 195f6046..76a93252 100644
--- a/app/src/foss_based/java/ch/threema/app/licensing/StoreLicenseCheck.java
+++ b/app/src/foss_based/java/ch/threema/app/licensing/StoreLicenseCheck.java
@@ -4,7 +4,7 @@
  *   |_| |_||_|_| \___\___|_|_|_\__,_(_)
  *
  * Threema for Android
- * Copyright (c) 2021-2023 Threema GmbH
+ * Copyright (c) 2021-2024 Threema GmbH
  *
  * This program is free software: you can redistribute it and/or modify
  * it under the terms of the GNU Affero General Public License, version 3,
diff --git a/app/src/foss_based/java/ch/threema/app/push/PushRegistrationWorker.java b/app/src/foss_based/java/ch/threema/app/push/PushRegistrationWorker.java
index 7cb52850..3a64cc7e 100644
--- a/app/src/foss_based/java/ch/threema/app/push/PushRegistrationWorker.java
+++ b/app/src/foss_based/java/ch/threema/app/push/PushRegistrationWorker.java
@@ -4,7 +4,7 @@
  *   |_| |_||_|_| \___\___|_|_|_\__,_(_)
  *
  * Threema for Android
- * Copyright (c) 2021-2023 Threema GmbH
+ * Copyright (c) 2021-2024 Threema GmbH
  *
  * This program is free software: you can redistribute it and/or modify
  * it under the terms of the GNU Affero General Public License, version 3,
diff --git a/app/src/foss_based/java/ch/threema/app/push/PushService.java b/app/src/foss_based/java/ch/threema/app/push/PushService.java
index 2489966e..95d2028e 100644
--- a/app/src/foss_based/java/ch/threema/app/push/PushService.java
+++ b/app/src/foss_based/java/ch/threema/app/push/PushService.java
@@ -4,7 +4,7 @@
  *   |_| |_||_|_| \___\___|_|_|_\__,_(_)
  *
  * Threema for Android
- * Copyright (c) 2021-2023 Threema GmbH
+ * Copyright (c) 2021-2024 Threema GmbH
  *
  * This program is free software: you can redistribute it and/or modify
  * it under the terms of the GNU Affero General Public License, version 3,
diff --git a/app/src/foss_based/java/ch/threema/app/services/VoiceActionService.java b/app/src/foss_based/java/ch/threema/app/services/VoiceActionService.java
index b4506ecd..2165447a 100644
--- a/app/src/foss_based/java/ch/threema/app/services/VoiceActionService.java
+++ b/app/src/foss_based/java/ch/threema/app/services/VoiceActionService.java
@@ -4,7 +4,7 @@
  *   |_| |_||_|_| \___\___|_|_|_\__,_(_)
  *
  * Threema for Android
- * Copyright (c) 2021-2023 Threema GmbH
+ * Copyright (c) 2021-2024 Threema GmbH
  *
  * This program is free software: you can redistribute it and/or modify
  * it under the terms of the GNU Affero General Public License, version 3,
diff --git a/app/src/google_services_based/java/ch/threema/app/activities/VoiceActionActivity.java b/app/src/google_services_based/java/ch/threema/app/activities/VoiceActionActivity.java
index 4768c328..406e1176 100644
--- a/app/src/google_services_based/java/ch/threema/app/activities/VoiceActionActivity.java
+++ b/app/src/google_services_based/java/ch/threema/app/activities/VoiceActionActivity.java
@@ -4,7 +4,7 @@
  *   |_| |_||_|_| \___\___|_|_|_\__,_(_)
  *
  * Threema for Android
- * Copyright (c) 2016-2023 Threema GmbH
+ * Copyright (c) 2016-2024 Threema GmbH
  *
  * This program is free software: you can redistribute it and/or modify
  * it under the terms of the GNU Affero General Public License, version 3,
diff --git a/app/src/google_services_based/java/ch/threema/app/licensing/StoreLicenseCheck.java b/app/src/google_services_based/java/ch/threema/app/licensing/StoreLicenseCheck.java
index 91f39131..75660025 100644
--- a/app/src/google_services_based/java/ch/threema/app/licensing/StoreLicenseCheck.java
+++ b/app/src/google_services_based/java/ch/threema/app/licensing/StoreLicenseCheck.java
@@ -4,7 +4,7 @@
  *   |_| |_||_|_| \___\___|_|_|_\__,_(_)
  *
  * Threema for Android
- * Copyright (c) 2021-2023 Threema GmbH
+ * Copyright (c) 2021-2024 Threema GmbH
  *
  * This program is free software: you can redistribute it and/or modify
  * it under the terms of the GNU Affero General Public License, version 3,
diff --git a/app/src/google_services_based/java/ch/threema/app/licensing/ThreemaLicensePolicy.java b/app/src/google_services_based/java/ch/threema/app/licensing/ThreemaLicensePolicy.java
index 6542130d..03bc2100 100644
--- a/app/src/google_services_based/java/ch/threema/app/licensing/ThreemaLicensePolicy.java
+++ b/app/src/google_services_based/java/ch/threema/app/licensing/ThreemaLicensePolicy.java
@@ -4,7 +4,7 @@
  *   |_| |_||_|_| \___\___|_|_|_\__,_(_)
  *
  * Threema for Android
- * Copyright (c) 2013-2023 Threema GmbH
+ * Copyright (c) 2013-2024 Threema GmbH
  *
  * This program is free software: you can redistribute it and/or modify
  * it under the terms of the GNU Affero General Public License, version 3,
diff --git a/app/src/google_services_based/java/ch/threema/app/push/PushRegistrationWorker.java b/app/src/google_services_based/java/ch/threema/app/push/PushRegistrationWorker.java
index 32376951..59268d7c 100644
--- a/app/src/google_services_based/java/ch/threema/app/push/PushRegistrationWorker.java
+++ b/app/src/google_services_based/java/ch/threema/app/push/PushRegistrationWorker.java
@@ -4,7 +4,7 @@
  *   |_| |_||_|_| \___\___|_|_|_\__,_(_)
  *
  * Threema for Android
- * Copyright (c) 2021-2023 Threema GmbH
+ * Copyright (c) 2021-2024 Threema GmbH
  *
  * This program is free software: you can redistribute it and/or modify
  * it under the terms of the GNU Affero General Public License, version 3,
@@ -23,16 +23,16 @@ package ch.threema.app.push;
 
 import android.content.Context;
 
-import com.google.firebase.iid.FirebaseInstanceId;
-
-import org.slf4j.Logger;
-
-import java.io.IOException;
-
 import androidx.annotation.NonNull;
 import androidx.work.Data;
 import androidx.work.Worker;
 import androidx.work.WorkerParameters;
+
+import com.google.firebase.FirebaseApp;
+import com.google.firebase.messaging.FirebaseMessaging;
+
+import org.slf4j.Logger;
+
 import ch.threema.app.utils.PushUtil;
 import ch.threema.base.ThreemaException;
 import ch.threema.base.utils.LoggingUtil;
@@ -61,23 +61,25 @@ public class PushRegistrationWorker extends Worker {
 		final boolean withCallback = workerFlags.getBoolean(PushService.EXTRA_WITH_CALLBACK, false);
 		logger.debug("doWork FCM registration clear {} withCallback {}", clearToken, withCallback);
 
-		if (clearToken) {
-			String error = null;
-			try {
-				FirebaseInstanceId.getInstance().deleteInstanceId();
-				PushUtil.sendTokenToServer(appContext, "", ProtocolDefines.PUSHTOKEN_TYPE_NONE);
-			} catch (IOException | ThreemaException e) {
-				logger.error("Exception", e);
-				error = e.getMessage();
-			}
+		FirebaseApp.initializeApp(appContext);
 
+		if (clearToken) {
+			String error = PushService.deleteToken(appContext);
 			if (withCallback) {
 				PushUtil.signalRegistrationFinished(error, true);
 			}
 		} else {
-			FirebaseInstanceId.getInstance().getInstanceId()
-				.addOnSuccessListener(instanceIdResult -> {
-					String token = instanceIdResult.getToken();
+			FirebaseMessaging.getInstance().getToken()
+				.addOnCompleteListener(task -> {
+					if (!task.isSuccessful()) {
+						logger.error("Unable to get token", task.getException());
+						if (withCallback) {
+							PushUtil.signalRegistrationFinished(task.getException() != null ? task.getException().getMessage() : "unknown", clearToken);
+						}
+						return;
+					}
+
+					String token = task.getResult();
 					logger.info("Received FCM registration token");
 					String error = null;
 					try {
@@ -89,11 +91,7 @@ public class PushRegistrationWorker extends Worker {
 					if (withCallback) {
 						PushUtil.signalRegistrationFinished(error, clearToken);
 					}
-				}).addOnFailureListener(e -> {
-				if (withCallback) {
-					PushUtil.signalRegistrationFinished(e.getMessage(), clearToken);
-				}
-			});
+				});
 		}
 		// required by the Worker interface but is not used for any error handling in the push registration process
 		return Result.success();
diff --git a/app/src/google_services_based/java/ch/threema/app/push/PushService.java b/app/src/google_services_based/java/ch/threema/app/push/PushService.java
index f20a4be2..b416b765 100644
--- a/app/src/google_services_based/java/ch/threema/app/push/PushService.java
+++ b/app/src/google_services_based/java/ch/threema/app/push/PushService.java
@@ -4,7 +4,7 @@
  *   |_| |_||_|_| \___\___|_|_|_\__,_(_)
  *
  * Threema for Android
- * Copyright (c) 2015-2023 Threema GmbH
+ * Copyright (c) 2015-2024 Threema GmbH
  *
  * This program is free software: you can redistribute it and/or modify
  * it under the terms of the GNU Affero General Public License, version 3,
@@ -24,19 +24,22 @@ package ch.threema.app.push;
 import android.content.Context;
 import android.text.format.DateUtils;
 
+import androidx.annotation.NonNull;
+
 import com.google.android.gms.common.ConnectionResult;
 import com.google.android.gms.common.GoogleApiAvailability;
-import com.google.firebase.iid.FirebaseInstanceId;
+import com.google.android.gms.tasks.Tasks;
+import com.google.firebase.installations.FirebaseInstallations;
+import com.google.firebase.messaging.FirebaseMessaging;
 import com.google.firebase.messaging.FirebaseMessagingService;
 import com.google.firebase.messaging.RemoteMessage;
 
 import org.slf4j.Logger;
 
-import java.io.IOException;
 import java.util.Date;
 import java.util.Map;
+import java.util.concurrent.ExecutionException;
 
-import androidx.annotation.NonNull;
 import ch.threema.app.utils.PushUtil;
 import ch.threema.app.utils.RuntimeUtil;
 import ch.threema.base.ThreemaException;
@@ -59,13 +62,31 @@ public class PushService extends FirebaseMessagingService {
 		}
 	}
 
-	public static void deleteToken(Context context) {
+	public static String deleteToken(Context context) {
 		try {
-			FirebaseInstanceId.getInstance().deleteInstanceId();
+			FirebaseMessaging.getInstance().deleteToken();
+			Tasks.await(FirebaseInstallations.getInstance().delete());
 			PushUtil.sendTokenToServer(context,"", ProtocolDefines.PUSHTOKEN_TYPE_NONE);
-		} catch (IOException | ThreemaException e) {
+		} catch (ThreemaException | ExecutionException | InterruptedException e) {
 			logger.warn("Could not delete FCM token", e);
+			return e.getMessage();
 		}
+		return null;
+	}
+
+	@Override
+	public void onDeletedMessages() {
+		logger.info("Too many messages stored on the Firebase server. Messages have been dropped.");
+	}
+
+	@Override
+	public void onMessageSent(@NonNull String msgId) {
+		logger.info("onMessageSent called for message id: {}", msgId);
+	}
+
+	@Override
+	public void onSendError(@NonNull String msgId, @NonNull Exception exception) {
+		logger.info("onSendError called for message id: {} exception: {}", msgId, exception);
 	}
 
 	@Override
diff --git a/app/src/google_services_based/java/ch/threema/app/services/VoiceActionService.java b/app/src/google_services_based/java/ch/threema/app/services/VoiceActionService.java
index 7733d9f6..661d9d9d 100644
--- a/app/src/google_services_based/java/ch/threema/app/services/VoiceActionService.java
+++ b/app/src/google_services_based/java/ch/threema/app/services/VoiceActionService.java
@@ -4,7 +4,7 @@
  *   |_| |_||_|_| \___\___|_|_|_\__,_(_)
  *
  * Threema for Android
- * Copyright (c) 2016-2023 Threema GmbH
+ * Copyright (c) 2016-2024 Threema GmbH
  *
  * This program is free software: you can redistribute it and/or modify
  * it under the terms of the GNU Affero General Public License, version 3,
diff --git a/app/src/google_services_based/java/com/google/android/vending/licensing/AESObfuscator.java b/app/src/google_services_based/java/com/google/android/vending/licensing/AESObfuscator.java
index 0186ff3a..9e2a3418 100644
--- a/app/src/google_services_based/java/com/google/android/vending/licensing/AESObfuscator.java
+++ b/app/src/google_services_based/java/com/google/android/vending/licensing/AESObfuscator.java
@@ -4,7 +4,7 @@
  *   |_| |_||_|_| \___\___|_|_|_\__,_(_)
  *
  * Threema for Android
- * Copyright (c) 2013-2023 Threema GmbH
+ * Copyright (c) 2013-2024 Threema GmbH
  *
  * This program is free software: you can redistribute it and/or modify
  * it under the terms of the GNU Affero General Public License, version 3,
diff --git a/app/src/google_services_based/java/com/google/android/vending/licensing/DeviceLimiter.java b/app/src/google_services_based/java/com/google/android/vending/licensing/DeviceLimiter.java
index e19a838e..8e040da8 100644
--- a/app/src/google_services_based/java/com/google/android/vending/licensing/DeviceLimiter.java
+++ b/app/src/google_services_based/java/com/google/android/vending/licensing/DeviceLimiter.java
@@ -4,7 +4,7 @@
  *   |_| |_||_|_| \___\___|_|_|_\__,_(_)
  *
  * Threema for Android
- * Copyright (c) 2013-2023 Threema GmbH
+ * Copyright (c) 2013-2024 Threema GmbH
  *
  * This program is free software: you can redistribute it and/or modify
  * it under the terms of the GNU Affero General Public License, version 3,
diff --git a/app/src/google_services_based/java/com/google/android/vending/licensing/ILicenseResultListener.java b/app/src/google_services_based/java/com/google/android/vending/licensing/ILicenseResultListener.java
index db9822a3..b0e72420 100644
--- a/app/src/google_services_based/java/com/google/android/vending/licensing/ILicenseResultListener.java
+++ b/app/src/google_services_based/java/com/google/android/vending/licensing/ILicenseResultListener.java
@@ -4,7 +4,7 @@
  *   |_| |_||_|_| \___\___|_|_|_\__,_(_)
  *
  * Threema for Android
- * Copyright (c) 2013-2023 Threema GmbH
+ * Copyright (c) 2013-2024 Threema GmbH
  *
  * This program is free software: you can redistribute it and/or modify
  * it under the terms of the GNU Affero General Public License, version 3,
diff --git a/app/src/google_services_based/java/com/google/android/vending/licensing/ILicensingService.java b/app/src/google_services_based/java/com/google/android/vending/licensing/ILicensingService.java
index 4fbe6874..2ffa6d0a 100644
--- a/app/src/google_services_based/java/com/google/android/vending/licensing/ILicensingService.java
+++ b/app/src/google_services_based/java/com/google/android/vending/licensing/ILicensingService.java
@@ -4,7 +4,7 @@
  *   |_| |_||_|_| \___\___|_|_|_\__,_(_)
  *
  * Threema for Android
- * Copyright (c) 2013-2023 Threema GmbH
+ * Copyright (c) 2013-2024 Threema GmbH
  *
  * This program is free software: you can redistribute it and/or modify
  * it under the terms of the GNU Affero General Public License, version 3,
diff --git a/app/src/google_services_based/java/com/google/android/vending/licensing/LicenseChecker.java b/app/src/google_services_based/java/com/google/android/vending/licensing/LicenseChecker.java
index 0c7e704c..cbeb65b9 100644
--- a/app/src/google_services_based/java/com/google/android/vending/licensing/LicenseChecker.java
+++ b/app/src/google_services_based/java/com/google/android/vending/licensing/LicenseChecker.java
@@ -4,7 +4,7 @@
  *   |_| |_||_|_| \___\___|_|_|_\__,_(_)
  *
  * Threema for Android
- * Copyright (c) 2013-2023 Threema GmbH
+ * Copyright (c) 2013-2024 Threema GmbH
  *
  * This program is free software: you can redistribute it and/or modify
  * it under the terms of the GNU Affero General Public License, version 3,
diff --git a/app/src/google_services_based/java/com/google/android/vending/licensing/LicenseCheckerCallback.java b/app/src/google_services_based/java/com/google/android/vending/licensing/LicenseCheckerCallback.java
index 2e6eec6b..6394b430 100644
--- a/app/src/google_services_based/java/com/google/android/vending/licensing/LicenseCheckerCallback.java
+++ b/app/src/google_services_based/java/com/google/android/vending/licensing/LicenseCheckerCallback.java
@@ -4,7 +4,7 @@
  *   |_| |_||_|_| \___\___|_|_|_\__,_(_)
  *
  * Threema for Android
- * Copyright (c) 2013-2023 Threema GmbH
+ * Copyright (c) 2013-2024 Threema GmbH
  *
  * This program is free software: you can redistribute it and/or modify
  * it under the terms of the GNU Affero General Public License, version 3,
diff --git a/app/src/google_services_based/java/com/google/android/vending/licensing/LicenseValidator.java b/app/src/google_services_based/java/com/google/android/vending/licensing/LicenseValidator.java
index 9e272597..738aafe3 100644
--- a/app/src/google_services_based/java/com/google/android/vending/licensing/LicenseValidator.java
+++ b/app/src/google_services_based/java/com/google/android/vending/licensing/LicenseValidator.java
@@ -4,7 +4,7 @@
  *   |_| |_||_|_| \___\___|_|_|_\__,_(_)
  *
  * Threema for Android
- * Copyright (c) 2013-2023 Threema GmbH
+ * Copyright (c) 2013-2024 Threema GmbH
  *
  * This program is free software: you can redistribute it and/or modify
  * it under the terms of the GNU Affero General Public License, version 3,
diff --git a/app/src/google_services_based/java/com/google/android/vending/licensing/NullDeviceLimiter.java b/app/src/google_services_based/java/com/google/android/vending/licensing/NullDeviceLimiter.java
index 9f7f49cb..000015d5 100644
--- a/app/src/google_services_based/java/com/google/android/vending/licensing/NullDeviceLimiter.java
+++ b/app/src/google_services_based/java/com/google/android/vending/licensing/NullDeviceLimiter.java
@@ -4,7 +4,7 @@
  *   |_| |_||_|_| \___\___|_|_|_\__,_(_)
  *
  * Threema for Android
- * Copyright (c) 2013-2023 Threema GmbH
+ * Copyright (c) 2013-2024 Threema GmbH
  *
  * This program is free software: you can redistribute it and/or modify
  * it under the terms of the GNU Affero General Public License, version 3,
diff --git a/app/src/google_services_based/java/com/google/android/vending/licensing/Obfuscator.java b/app/src/google_services_based/java/com/google/android/vending/licensing/Obfuscator.java
index 44fc6fb0..52bef018 100644
--- a/app/src/google_services_based/java/com/google/android/vending/licensing/Obfuscator.java
+++ b/app/src/google_services_based/java/com/google/android/vending/licensing/Obfuscator.java
@@ -4,7 +4,7 @@
  *   |_| |_||_|_| \___\___|_|_|_\__,_(_)
  *
  * Threema for Android
- * Copyright (c) 2013-2023 Threema GmbH
+ * Copyright (c) 2013-2024 Threema GmbH
  *
  * This program is free software: you can redistribute it and/or modify
  * it under the terms of the GNU Affero General Public License, version 3,
diff --git a/app/src/google_services_based/java/com/google/android/vending/licensing/Policy.java b/app/src/google_services_based/java/com/google/android/vending/licensing/Policy.java
index 0660e1f5..0d1c1648 100644
--- a/app/src/google_services_based/java/com/google/android/vending/licensing/Policy.java
+++ b/app/src/google_services_based/java/com/google/android/vending/licensing/Policy.java
@@ -4,7 +4,7 @@
  *   |_| |_||_|_| \___\___|_|_|_\__,_(_)
  *
  * Threema for Android
- * Copyright (c) 2013-2023 Threema GmbH
+ * Copyright (c) 2013-2024 Threema GmbH
  *
  * This program is free software: you can redistribute it and/or modify
  * it under the terms of the GNU Affero General Public License, version 3,
diff --git a/app/src/google_services_based/java/com/google/android/vending/licensing/PreferenceObfuscator.java b/app/src/google_services_based/java/com/google/android/vending/licensing/PreferenceObfuscator.java
index daddf165..11fce668 100644
--- a/app/src/google_services_based/java/com/google/android/vending/licensing/PreferenceObfuscator.java
+++ b/app/src/google_services_based/java/com/google/android/vending/licensing/PreferenceObfuscator.java
@@ -4,7 +4,7 @@
  *   |_| |_||_|_| \___\___|_|_|_\__,_(_)
  *
  * Threema for Android
- * Copyright (c) 2013-2023 Threema GmbH
+ * Copyright (c) 2013-2024 Threema GmbH
  *
  * This program is free software: you can redistribute it and/or modify
  * it under the terms of the GNU Affero General Public License, version 3,
diff --git a/app/src/google_services_based/java/com/google/android/vending/licensing/ResponseData.java b/app/src/google_services_based/java/com/google/android/vending/licensing/ResponseData.java
index e11bc7bb..144044a9 100644
--- a/app/src/google_services_based/java/com/google/android/vending/licensing/ResponseData.java
+++ b/app/src/google_services_based/java/com/google/android/vending/licensing/ResponseData.java
@@ -4,7 +4,7 @@
  *   |_| |_||_|_| \___\___|_|_|_\__,_(_)
  *
  * Threema for Android
- * Copyright (c) 2013-2023 Threema GmbH
+ * Copyright (c) 2013-2024 Threema GmbH
  *
  * This program is free software: you can redistribute it and/or modify
  * it under the terms of the GNU Affero General Public License, version 3,
diff --git a/app/src/google_services_based/java/com/google/android/vending/licensing/StrictPolicy.java b/app/src/google_services_based/java/com/google/android/vending/licensing/StrictPolicy.java
index 9e46059b..355159db 100644
--- a/app/src/google_services_based/java/com/google/android/vending/licensing/StrictPolicy.java
+++ b/app/src/google_services_based/java/com/google/android/vending/licensing/StrictPolicy.java
@@ -4,7 +4,7 @@
  *   |_| |_||_|_| \___\___|_|_|_\__,_(_)
  *
  * Threema for Android
- * Copyright (c) 2013-2023 Threema GmbH
+ * Copyright (c) 2013-2024 Threema GmbH
  *
  * This program is free software: you can redistribute it and/or modify
  * it under the terms of the GNU Affero General Public License, version 3,
diff --git a/app/src/google_services_based/java/com/google/android/vending/licensing/ValidationException.java b/app/src/google_services_based/java/com/google/android/vending/licensing/ValidationException.java
index 9d47d338..6c1666b0 100644
--- a/app/src/google_services_based/java/com/google/android/vending/licensing/ValidationException.java
+++ b/app/src/google_services_based/java/com/google/android/vending/licensing/ValidationException.java
@@ -4,7 +4,7 @@
  *   |_| |_||_|_| \___\___|_|_|_\__,_(_)
  *
  * Threema for Android
- * Copyright (c) 2013-2023 Threema GmbH
+ * Copyright (c) 2013-2024 Threema GmbH
  *
  * This program is free software: you can redistribute it and/or modify
  * it under the terms of the GNU Affero General Public License, version 3,
diff --git a/app/src/google_services_based/java/com/google/android/vending/licensing/util/Base64.java b/app/src/google_services_based/java/com/google/android/vending/licensing/util/Base64.java
index 029ffde1..7018c7db 100644
--- a/app/src/google_services_based/java/com/google/android/vending/licensing/util/Base64.java
+++ b/app/src/google_services_based/java/com/google/android/vending/licensing/util/Base64.java
@@ -4,7 +4,7 @@
  *   |_| |_||_|_| \___\___|_|_|_\__,_(_)
  *
  * Threema for Android
- * Copyright (c) 2013-2023 Threema GmbH
+ * Copyright (c) 2013-2024 Threema GmbH
  *
  * This program is free software: you can redistribute it and/or modify
  * it under the terms of the GNU Affero General Public License, version 3,
diff --git a/app/src/google_services_based/java/com/google/android/vending/licensing/util/Base64DecoderException.java b/app/src/google_services_based/java/com/google/android/vending/licensing/util/Base64DecoderException.java
index 49c09e48..edf5a76c 100644
--- a/app/src/google_services_based/java/com/google/android/vending/licensing/util/Base64DecoderException.java
+++ b/app/src/google_services_based/java/com/google/android/vending/licensing/util/Base64DecoderException.java
@@ -4,7 +4,7 @@
  *   |_| |_||_|_| \___\___|_|_|_\__,_(_)
  *
  * Threema for Android
- * Copyright (c) 2013-2023 Threema GmbH
+ * Copyright (c) 2013-2024 Threema GmbH
  *
  * This program is free software: you can redistribute it and/or modify
  * it under the terms of the GNU Affero General Public License, version 3,
diff --git a/app/src/google_services_based/java/com/google/android/vending/licensing/util/URIQueryDecoder.java b/app/src/google_services_based/java/com/google/android/vending/licensing/util/URIQueryDecoder.java
index bf78f81f..519a8458 100644
--- a/app/src/google_services_based/java/com/google/android/vending/licensing/util/URIQueryDecoder.java
+++ b/app/src/google_services_based/java/com/google/android/vending/licensing/util/URIQueryDecoder.java
@@ -4,7 +4,7 @@
  *   |_| |_||_|_| \___\___|_|_|_\__,_(_)
  *
  * Threema for Android
- * Copyright (c) 2019-2023 Threema GmbH
+ * Copyright (c) 2019-2024 Threema GmbH
  *
  * This program is free software: you can redistribute it and/or modify
  * it under the terms of the GNU Affero General Public License, version 3,
diff --git a/app/src/hms/java/ch/threema/app/activities/DownloadApkActivity.java b/app/src/hms/java/ch/threema/app/activities/DownloadApkActivity.java
index e36815a5..e0d5a143 100644
--- a/app/src/hms/java/ch/threema/app/activities/DownloadApkActivity.java
+++ b/app/src/hms/java/ch/threema/app/activities/DownloadApkActivity.java
@@ -4,7 +4,7 @@
  *   |_| |_||_|_| \___\___|_|_|_\__,_(_)
  *
  * Threema for Android
- * Copyright (c) 2019-2023 Threema GmbH
+ * Copyright (c) 2019-2024 Threema GmbH
  *
  * This program is free software: you can redistribute it and/or modify
  * it under the terms of the GNU Affero General Public License, version 3,
diff --git a/app/src/hms/java/ch/threema/app/utils/DownloadUtil.java b/app/src/hms/java/ch/threema/app/utils/DownloadUtil.java
index c164857d..26fb9755 100644
--- a/app/src/hms/java/ch/threema/app/utils/DownloadUtil.java
+++ b/app/src/hms/java/ch/threema/app/utils/DownloadUtil.java
@@ -4,7 +4,7 @@
  *   |_| |_||_|_| \___\___|_|_|_\__,_(_)
  *
  * Threema for Android
- * Copyright (c) 2020-2023 Threema GmbH
+ * Copyright (c) 2020-2024 Threema GmbH
  *
  * This program is free software: you can redistribute it and/or modify
  * it under the terms of the GNU Affero General Public License, version 3,
diff --git a/app/src/hms_services_based/java/ch/threema/app/activities/VoiceActionActivity.java b/app/src/hms_services_based/java/ch/threema/app/activities/VoiceActionActivity.java
index d4b94caf..9951f466 100644
--- a/app/src/hms_services_based/java/ch/threema/app/activities/VoiceActionActivity.java
+++ b/app/src/hms_services_based/java/ch/threema/app/activities/VoiceActionActivity.java
@@ -4,7 +4,7 @@
  *   |_| |_||_|_| \___\___|_|_|_\__,_(_)
  *
  * Threema for Android
- * Copyright (c) 2021-2023 Threema GmbH
+ * Copyright (c) 2021-2024 Threema GmbH
  *
  * This program is free software: you can redistribute it and/or modify
  * it under the terms of the GNU Affero General Public License, version 3,
diff --git a/app/src/hms_services_based/java/ch/threema/app/licensing/StoreLicenseCheck.java b/app/src/hms_services_based/java/ch/threema/app/licensing/StoreLicenseCheck.java
index c2013702..d3dac000 100644
--- a/app/src/hms_services_based/java/ch/threema/app/licensing/StoreLicenseCheck.java
+++ b/app/src/hms_services_based/java/ch/threema/app/licensing/StoreLicenseCheck.java
@@ -4,7 +4,7 @@
  *   |_| |_||_|_| \___\___|_|_|_\__,_(_)
  *
  * Threema for Android
- * Copyright (c) 2021-2023 Threema GmbH
+ * Copyright (c) 2021-2024 Threema GmbH
  *
  * This program is free software: you can redistribute it and/or modify
  * it under the terms of the GNU Affero General Public License, version 3,
diff --git a/app/src/hms_services_based/java/ch/threema/app/push/PushRegistrationWorker.java b/app/src/hms_services_based/java/ch/threema/app/push/PushRegistrationWorker.java
index c6da0850..1a9b5e9d 100644
--- a/app/src/hms_services_based/java/ch/threema/app/push/PushRegistrationWorker.java
+++ b/app/src/hms_services_based/java/ch/threema/app/push/PushRegistrationWorker.java
@@ -4,7 +4,7 @@
  *   |_| |_||_|_| \___\___|_|_|_\__,_(_)
  *
  * Threema for Android
- * Copyright (c) 2021-2023 Threema GmbH
+ * Copyright (c) 2021-2024 Threema GmbH
  *
  * This program is free software: you can redistribute it and/or modify
  * it under the terms of the GNU Affero General Public License, version 3,
@@ -23,7 +23,7 @@ package ch.threema.app.push;
 
 import android.content.Context;
 
-import com.huawei.agconnect.config.AGConnectServicesConfig;
+import com.huawei.agconnect.AGConnectOptionsBuilder;
 import com.huawei.hms.aaid.HmsInstanceId;
 
 import org.slf4j.Logger;
@@ -65,8 +65,8 @@ public class PushRegistrationWorker extends Worker {
 		String error = null;
 		if (clearToken) {
 			try {
-				// Obtain the app ID from the agconnect-service.json file.
-				String appId = AGConnectServicesConfig.fromContext(appContext).getString(APP_ID_CONFIG_FIELD);
+
+				String appId = getAppId(appContext);
 
 				// Delete the token.
 				HmsInstanceId.getInstance(appContext).deleteToken(appId, TOKEN_SCOPE);
@@ -79,8 +79,9 @@ public class PushRegistrationWorker extends Worker {
 		}
         else {
 			try {
-				String appId = AGConnectServicesConfig.fromContext(appContext).getString(APP_ID_CONFIG_FIELD);
+				String appId = getAppId(appContext);
 
+				// Note that this will only work in release builds as the app signature is tested by huawei
 				String token = HmsInstanceId.getInstance(appContext).getToken(appId, TOKEN_SCOPE);
 				logger.info("Received HMS registration token");
 				PushUtil.sendTokenToServer(appContext, appId + '|' +token, ProtocolDefines.PUSHTOKEN_TYPE_HMS);
@@ -99,4 +100,11 @@ public class PushRegistrationWorker extends Worker {
 		return Result.success();
 	}
 
+	/**
+	 * Obtain the app ID from the agconnect-service.json file.
+	 */
+	private String getAppId(Context context) {
+		return new AGConnectOptionsBuilder().build(context).getString(APP_ID_CONFIG_FIELD);
+	}
+
 }
diff --git a/app/src/hms_services_based/java/ch/threema/app/push/PushService.java b/app/src/hms_services_based/java/ch/threema/app/push/PushService.java
index 1baf42bd..d05c43e5 100644
--- a/app/src/hms_services_based/java/ch/threema/app/push/PushService.java
+++ b/app/src/hms_services_based/java/ch/threema/app/push/PushService.java
@@ -4,7 +4,7 @@
  *   |_| |_||_|_| \___\___|_|_|_\__,_(_)
  *
  * Threema for Android
- * Copyright (c) 2015-2023 Threema GmbH
+ * Copyright (c) 2015-2024 Threema GmbH
  *
  * This program is free software: you can redistribute it and/or modify
  * it under the terms of the GNU Affero General Public License, version 3,
@@ -24,7 +24,7 @@ package ch.threema.app.push;
 import android.content.Context;
 import android.text.format.DateUtils;
 
-import com.huawei.agconnect.config.AGConnectServicesConfig;
+import com.huawei.agconnect.AGConnectOptionsBuilder;
 import com.huawei.hms.aaid.HmsInstanceId;
 import com.huawei.hms.api.ConnectionResult;
 import com.huawei.hms.api.HuaweiMobileServicesUtil;
@@ -62,7 +62,7 @@ public class PushService extends HmsMessageService {
 	}
 
 	public static void deleteToken(Context context) {
-		String appId = AGConnectServicesConfig.fromContext(context).getString(APP_ID_CONFIG_FIELD);
+		String appId = new AGConnectOptionsBuilder().build(context).getString(APP_ID_CONFIG_FIELD);
 		try {
 			HmsInstanceId.getInstance(ThreemaApplication.getAppContext()).deleteToken(appId, TOKEN_SCOPE);
 			PushUtil.sendTokenToServer(context,"", ProtocolDefines.PUSHTOKEN_TYPE_NONE);
diff --git a/app/src/hms_services_based/java/ch/threema/app/services/VoiceActionService.java b/app/src/hms_services_based/java/ch/threema/app/services/VoiceActionService.java
index b4506ecd..2165447a 100644
--- a/app/src/hms_services_based/java/ch/threema/app/services/VoiceActionService.java
+++ b/app/src/hms_services_based/java/ch/threema/app/services/VoiceActionService.java
@@ -4,7 +4,7 @@
  *   |_| |_||_|_| \___\___|_|_|_\__,_(_)
  *
  * Threema for Android
- * Copyright (c) 2021-2023 Threema GmbH
+ * Copyright (c) 2021-2024 Threema GmbH
  *
  * This program is free software: you can redistribute it and/or modify
  * it under the terms of the GNU Affero General Public License, version 3,
diff --git a/app/src/hms_work/java/ch/threema/app/activities/DownloadApkActivity.java b/app/src/hms_work/java/ch/threema/app/activities/DownloadApkActivity.java
index e36815a5..e0d5a143 100644
--- a/app/src/hms_work/java/ch/threema/app/activities/DownloadApkActivity.java
+++ b/app/src/hms_work/java/ch/threema/app/activities/DownloadApkActivity.java
@@ -4,7 +4,7 @@
  *   |_| |_||_|_| \___\___|_|_|_\__,_(_)
  *
  * Threema for Android
- * Copyright (c) 2019-2023 Threema GmbH
+ * Copyright (c) 2019-2024 Threema GmbH
  *
  * This program is free software: you can redistribute it and/or modify
  * it under the terms of the GNU Affero General Public License, version 3,
diff --git a/app/src/hms_work/java/ch/threema/app/utils/DownloadUtil.java b/app/src/hms_work/java/ch/threema/app/utils/DownloadUtil.java
index c164857d..26fb9755 100644
--- a/app/src/hms_work/java/ch/threema/app/utils/DownloadUtil.java
+++ b/app/src/hms_work/java/ch/threema/app/utils/DownloadUtil.java
@@ -4,7 +4,7 @@
  *   |_| |_||_|_| \___\___|_|_|_\__,_(_)
  *
  * Threema for Android
- * Copyright (c) 2020-2023 Threema GmbH
+ * Copyright (c) 2020-2024 Threema GmbH
  *
  * This program is free software: you can redistribute it and/or modify
  * it under the terms of the GNU Affero General Public License, version 3,
diff --git a/app/src/libre/java/ch/threema/app/activities/DownloadApkActivity.java b/app/src/libre/java/ch/threema/app/activities/DownloadApkActivity.java
index f4a14edd..88c25898 100644
--- a/app/src/libre/java/ch/threema/app/activities/DownloadApkActivity.java
+++ b/app/src/libre/java/ch/threema/app/activities/DownloadApkActivity.java
@@ -4,7 +4,7 @@
  *   |_| |_||_|_| \___\___|_|_|_\__,_(_)
  *
  * Threema for Android
- * Copyright (c) 2019-2023 Threema GmbH
+ * Copyright (c) 2019-2024 Threema GmbH
  *
  * This program is free software: you can redistribute it and/or modify
  * it under the terms of the GNU Affero General Public License, version 3,
diff --git a/app/src/libre/java/ch/threema/app/utils/DownloadUtil.java b/app/src/libre/java/ch/threema/app/utils/DownloadUtil.java
index e2969b8d..431b8c77 100644
--- a/app/src/libre/java/ch/threema/app/utils/DownloadUtil.java
+++ b/app/src/libre/java/ch/threema/app/utils/DownloadUtil.java
@@ -4,7 +4,7 @@
  *   |_| |_||_|_| \___\___|_|_|_\__,_(_)
  *
  * Threema for Android
- * Copyright (c) 2020-2023 Threema GmbH
+ * Copyright (c) 2020-2024 Threema GmbH
  *
  * This program is free software: you can redistribute it and/or modify
  * it under the terms of the GNU Affero General Public License, version 3,
diff --git a/app/src/main/java/ch/threema/app/AutostartService.java b/app/src/main/java/ch/threema/app/AutostartService.java
deleted file mode 100644
index 47494efe..00000000
--- a/app/src/main/java/ch/threema/app/AutostartService.java
+++ /dev/null
@@ -1,123 +0,0 @@
-/*  _____ _
- * |_   _| |_  _ _ ___ ___ _ __  __ _
- *   | | | ' \| '_/ -_) -_) '  \/ _` |_
- *   |_| |_||_|_| \___\___|_|_|_\__,_(_)
- *
- * Threema for Android
- * Copyright (c) 2013-2023 Threema GmbH
- *
- * This program is free software: you can redistribute it and/or modify
- * it under the terms of the GNU Affero General Public License, version 3,
- * as published by the Free Software Foundation.
- *
- * This program is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
- * GNU Affero General Public License for more details.
- *
- * You should have received a copy of the GNU Affero General Public License
- * along with this program. If not, see <https://www.gnu.org/licenses/>.
- */
-
-package ch.threema.app;
-
-import android.app.NotificationManager;
-import android.app.PendingIntent;
-import android.content.Context;
-import android.content.Intent;
-import android.net.ConnectivityManager;
-import android.os.Build;
-
-import org.slf4j.Logger;
-
-import androidx.annotation.NonNull;
-import androidx.core.app.FixedJobIntentService;
-import androidx.core.app.NotificationCompat;
-import ch.threema.app.activities.HomeActivity;
-import ch.threema.app.managers.ServiceManager;
-import ch.threema.app.notifications.NotificationBuilderWrapper;
-import ch.threema.app.services.NotificationService;
-import ch.threema.app.services.PreferenceService;
-import ch.threema.app.services.UserService;
-import ch.threema.app.utils.IntentDataUtil;
-import ch.threema.base.utils.LoggingUtil;
-import ch.threema.localcrypto.MasterKey;
-
-import static ch.threema.app.services.NotificationService.NOTIFICATION_CHANNEL_NOTICE;
-import static ch.threema.app.utils.IntentDataUtil.PENDING_INTENT_FLAG_IMMUTABLE;
-
-public class AutostartService extends FixedJobIntentService {
-	private static final Logger logger = LoggingUtil.getThreemaLogger("AutostartService");
-	private static final int JOB_ID = 2000;
-
-	public static void enqueueWork(Context context, Intent work) {
-		enqueueWork(context, AutostartService.class, JOB_ID, work);
-	}
-
-	@Override
-	protected void onHandleWork(@NonNull Intent intent) {
-		logger.info("Processing AutoStart - start");
-
-		MasterKey masterKey = ThreemaApplication.getMasterKey();
-		if (masterKey == null) {
-			logger.error("Unable to launch app");
-			stopSelf();
-			return;
-		}
-
-		// check if masterkey needs a password and issue a notification if necessary
-		if (masterKey.isLocked()) {
-			NotificationCompat.Builder notificationCompat =
-				new NotificationBuilderWrapper(this, NOTIFICATION_CHANNEL_NOTICE, null)
-					.setSmallIcon(R.drawable.ic_notification_small)
-					.setContentTitle(getString(R.string.master_key_locked))
-					.setContentText(getString(R.string.master_key_locked_notify_description))
-					.setTicker(getString(R.string.master_key_locked))
-					.setCategory(NotificationCompat.CATEGORY_SERVICE);
-
-			Intent notificationIntent = IntentDataUtil.createActionIntentHideAfterUnlock(new Intent(this, HomeActivity.class));
-			notificationIntent.setFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP | Intent.FLAG_ACTIVITY_SINGLE_TOP | Intent.FLAG_ACTIVITY_NEW_TASK);
-			PendingIntent pendingIntent = PendingIntent.getActivity(this, 0, notificationIntent, PENDING_INTENT_FLAG_IMMUTABLE);
-			notificationCompat.setContentIntent(pendingIntent);
-			NotificationManager notificationManager = (NotificationManager) getSystemService(Context.NOTIFICATION_SERVICE);
-			notificationManager.notify(ThreemaApplication.MASTER_KEY_LOCKED_NOTIFICATION_ID, notificationCompat.build());
-		}
-
-		ServiceManager serviceManager = ThreemaApplication.getServiceManager();
-		if (serviceManager == null) {
-			logger.error("Service manager not available");
-			stopSelf();
-			return;
-		}
-
-		// check if background data is disabled and issue a warning
-		if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.N) {
-			ConnectivityManager connMgr = (ConnectivityManager) getSystemService(Context.CONNECTIVITY_SERVICE);
-			if (connMgr != null && connMgr.getRestrictBackgroundStatus() == ConnectivityManager.RESTRICT_BACKGROUND_STATUS_ENABLED) {
-				NotificationService notificationService = serviceManager.getNotificationService();
-				if (notificationService != null) {
-					notificationService.showNetworkBlockedNotification(false);
-				}
-			}
-		}
-
-		// fixes https://issuetracker.google.com/issues/36951052
-		PreferenceService preferenceService = serviceManager.getPreferenceService();
-		if (preferenceService != null) {
-			// reset feature level
-			preferenceService.setTransmittedFeatureLevel(0);
-
-			//auto fix failed sync account
-			if (preferenceService.isSyncContacts()) {
-				UserService userService = serviceManager.getUserService();
-				if (userService != null && !userService.checkAccount()) {
-					//create account
-					userService.getAccount(true);
-					userService.enableAccountAutoSync(true);
-				}
-			}
-		}
-
-		logger.info("Processing AutoStart - end");
-	}
-}
diff --git a/app/src/main/java/ch/threema/app/NamedFileProvider.java b/app/src/main/java/ch/threema/app/NamedFileProvider.java
index dd2961c3..668b6998 100644
--- a/app/src/main/java/ch/threema/app/NamedFileProvider.java
+++ b/app/src/main/java/ch/threema/app/NamedFileProvider.java
@@ -89,6 +89,7 @@ public class NamedFileProvider extends FileProvider {
 		mStrategy = getPathStrategy(context, info.authority);
 	}
 
+	@NonNull
 	@Override
 	public Cursor query(@NonNull final Uri uri, String[] projection, final String selection,
 	                    final String[] selectionArgs, final String sortOrder) {
@@ -141,7 +142,7 @@ public class NamedFileProvider extends FileProvider {
 	 *            {@code <provider>} element in your app's manifest.
 	 * @param file A {@link File} pointing to the filename for which you want a
 	 * <code>content</code> {@link Uri}.
-	 * @param filename File name to be used for this file. Will be provided to consumers in the DISPLAY_NAME xolumn
+	 * @param filename File name to be used for this file. Will be provided to consumers in the DISPLAY_NAME column
 	 * @return A content URI for the file.
 	 * @throws IllegalArgumentException When the given {@link File} is outside
 	 * the paths supported by the provider.
diff --git a/app/src/main/java/ch/threema/app/ThreemaApplication.java b/app/src/main/java/ch/threema/app/ThreemaApplication.java
index 81b29bd8..327d137a 100644
--- a/app/src/main/java/ch/threema/app/ThreemaApplication.java
+++ b/app/src/main/java/ch/threema/app/ThreemaApplication.java
@@ -21,6 +21,11 @@
 
 package ch.threema.app;
 
+import static android.app.NotificationManager.ACTION_NOTIFICATION_CHANNEL_GROUP_BLOCK_STATE_CHANGED;
+import static android.app.NotificationManager.ACTION_NOTIFICATION_POLICY_CHANGED;
+import static android.app.NotificationManager.EXTRA_BLOCKED_STATE;
+import static android.app.NotificationManager.EXTRA_NOTIFICATION_CHANNEL_GROUP_ID;
+
 import android.annotation.SuppressLint;
 import android.annotation.TargetApi;
 import android.app.Activity;
@@ -36,6 +41,7 @@ import android.content.SharedPreferences;
 import android.content.pm.PackageManager;
 import android.content.res.Configuration;
 import android.database.ContentObserver;
+import android.database.sqlite.SQLiteException;
 import android.net.ConnectivityManager;
 import android.os.Build;
 import android.os.Environment;
@@ -66,10 +72,10 @@ import androidx.work.WorkManager;
 
 import com.datatheorem.android.trustkit.TrustKit;
 import com.datatheorem.android.trustkit.reporting.BackgroundReporter;
+import com.google.android.material.color.DynamicColors;
+import com.google.android.material.color.DynamicColorsOptions;
 import com.mapbox.mapboxsdk.Mapbox;
 
-import net.sqlcipher.database.SQLiteException;
-
 import org.slf4j.Logger;
 
 import java.io.BufferedReader;
@@ -79,6 +85,7 @@ import java.io.InputStream;
 import java.io.InputStreamReader;
 import java.net.Inet6Address;
 import java.net.InetSocketAddress;
+import java.text.SimpleDateFormat;
 import java.util.Date;
 import java.util.HashMap;
 import java.util.List;
@@ -91,7 +98,6 @@ import java.util.concurrent.locks.Lock;
 import java.util.concurrent.locks.ReentrantLock;
 
 import ch.threema.app.backuprestore.csv.BackupService;
-import ch.threema.app.exceptions.DatabaseMigrationFailedException;
 import ch.threema.app.exceptions.FileSystemNotPresentException;
 import ch.threema.app.grouplinks.IncomingGroupJoinRequestListener;
 import ch.threema.app.listeners.BallotVoteListener;
@@ -113,6 +119,7 @@ import ch.threema.app.push.PushService;
 import ch.threema.app.receivers.ConnectivityChangeReceiver;
 import ch.threema.app.receivers.PinningFailureReportBroadcastReceiver;
 import ch.threema.app.receivers.RestrictBackgroundChangedReceiver;
+import ch.threema.app.receivers.ShortcutAddedReceiver;
 import ch.threema.app.routines.OnFirstConnectRoutine;
 import ch.threema.app.routines.SynchronizeContactsRoutine;
 import ch.threema.app.services.AppRestrictionService;
@@ -170,11 +177,13 @@ import ch.threema.domain.models.AppVersion;
 import ch.threema.domain.protocol.csp.connection.ConnectionState;
 import ch.threema.domain.protocol.csp.connection.ConnectionStateListener;
 import ch.threema.domain.protocol.csp.connection.ThreemaConnection;
+import ch.threema.domain.stores.DHSessionStoreInterface;
 import ch.threema.localcrypto.MasterKey;
 import ch.threema.localcrypto.MasterKeyLockedException;
 import ch.threema.logging.backend.DebugLogFileBackend;
+import ch.threema.storage.DatabaseNonceStore;
 import ch.threema.storage.DatabaseServiceNew;
-import ch.threema.storage.NonceDatabaseBlobService;
+import ch.threema.storage.SQLDHSessionStore;
 import ch.threema.storage.models.AbstractMessageModel;
 import ch.threema.storage.models.ContactModel;
 import ch.threema.storage.models.ConversationModel;
@@ -190,13 +199,6 @@ import ch.threema.storage.models.ballot.LinkBallotModel;
 import ch.threema.storage.models.data.status.VoipStatusDataModel;
 import ch.threema.storage.models.group.IncomingGroupJoinRequestModel;
 
-import static android.app.NotificationManager.ACTION_NOTIFICATION_CHANNEL_GROUP_BLOCK_STATE_CHANGED;
-import static android.app.NotificationManager.ACTION_NOTIFICATION_POLICY_CHANGED;
-import static android.app.NotificationManager.EXTRA_BLOCKED_STATE;
-import static android.app.NotificationManager.EXTRA_NOTIFICATION_CHANNEL_GROUP_ID;
-import static ch.threema.app.services.PreferenceService.Theme_DARK;
-import static ch.threema.app.services.PreferenceService.Theme_LIGHT;
-
 public class ThreemaApplication extends MultiDexApplication implements DefaultLifecycleObserver {
 	private static final Logger logger = LoggingUtil.getThreemaLogger("ThreemaApplication");
 
@@ -230,6 +232,7 @@ public class ThreemaApplication extends MultiDexApplication implements DefaultLi
 	public static final String INTENT_DATA_PIN = "ppin";
 	public static final String INTENT_DATA_HIDE_RECENTS = "hiderec";
 	public static final String INTENT_ACTION_FORWARD = "ch.threema.app.intent.FORWARD";
+	public static final String INTENT_ACTION_SHORTCUT_ADDED = "ch.threema.app.intent.SHORTCUT_ADDED";
 
 	public static final String CONFIRM_TAG_CLOSE_BALLOT = "cb";
 
@@ -259,7 +262,7 @@ public class ThreemaApplication extends MultiDexApplication implements DefaultLi
 	public static final String PHONE_LINKED_PLACEHOLDER = "***";
 	public static final String EMAIL_LINKED_PLACEHOLDER = "***@***";
 
-	private static final String ACTIVITY_CONNECTION_TAG = "threemaApplication";
+	public static final String ACTIVITY_CONNECTION_TAG = "threemaApplication";
 	private static final long ACTIVITY_CONNECTION_LIFETIME = 60000;
 
 	public static final int MAX_BLOB_SIZE_MB = 100;
@@ -292,6 +295,8 @@ public class ThreemaApplication extends MultiDexApplication implements DefaultLi
 	private static Date lastLoggedIn;
 	private static boolean isDeviceIdle;
 	private static boolean ipv6 = false;
+	public static boolean isResumed = false;
+
 	private static HashMap<String, String> messageDrafts = new HashMap<>();
 	private static HashMap<String, String> quoteDrafts = new HashMap<>();
 
@@ -366,6 +371,8 @@ public class ThreemaApplication extends MultiDexApplication implements DefaultLi
 
 		super.onCreate();
 
+		applyDynamicColorsIfEnabled();
+
 		// always log database migration
 		setupLogging(null);
 
@@ -444,15 +451,7 @@ public class ThreemaApplication extends MultiDexApplication implements DefaultLi
 
 						logger.info("master key is missing or does not match. rename database files.");
 
-						File databaseFile = getAppContext().getDatabasePath(DatabaseServiceNew.DATABASE_NAME);
-						if (databaseFile.exists()) {
-							File databaseBackup = new File(databaseFile.getPath() + ".backup");
-							if (!databaseFile.renameTo(databaseBackup)) {
-								FileUtil.deleteFileOrWarn(databaseFile, "threema database", logger);
-							}
-						}
-
-						databaseFile = getAppContext().getDatabasePath(DatabaseServiceNew.DATABASE_NAME_V4);
+						File databaseFile = getAppContext().getDatabasePath(DatabaseServiceNew.DATABASE_NAME_V4);
 						if (databaseFile.exists()) {
 							File databaseBackup = new File(databaseFile.getPath() + ".backup");
 							if (!databaseFile.renameTo(databaseBackup)) {
@@ -460,14 +459,14 @@ public class ThreemaApplication extends MultiDexApplication implements DefaultLi
 							}
 						}
 
-						databaseFile = getAppContext().getDatabasePath(NonceDatabaseBlobService.DATABASE_NAME);
+						databaseFile = getAppContext().getDatabasePath(DatabaseNonceStore.DATABASE_NAME_V4);
 						if (databaseFile.exists()) {
-							FileUtil.deleteFileOrWarn(databaseFile, "nonce database", logger);
+							FileUtil.deleteFileOrWarn(databaseFile, "nonce4 database", logger);
 						}
 
-						databaseFile = getAppContext().getDatabasePath(NonceDatabaseBlobService.DATABASE_NAME_V4);
+						databaseFile = getAppContext().getDatabasePath(SQLDHSessionStore.DATABASE_NAME);
 						if (databaseFile.exists()) {
-							FileUtil.deleteFileOrWarn(databaseFile, "nonce4 database", logger);
+							FileUtil.deleteFileOrWarn(databaseFile, "sql dh session database", logger);
 						}
 
 						//remove all settings!
@@ -490,6 +489,8 @@ public class ThreemaApplication extends MultiDexApplication implements DefaultLi
 
 					if (!masterKey.isLocked()) {
 						reset();
+					} else {
+						setupDayNightMode();
 					}
 				} catch (IOException e) {
 					logger.error("IOException", e);
@@ -615,12 +616,32 @@ public class ThreemaApplication extends MultiDexApplication implements DefaultLi
 					}, new IntentFilter(Intent.ACTION_APPLICATION_RESTRICTIONS_CHANGED));
 				}
 
+				// register a receiver for shortcuts that have been added to the launcher
+				registerReceiver(new ShortcutAddedReceiver(), new IntentFilter(INTENT_ACTION_SHORTCUT_ADDED));
+
 				// Start the Threema Push Service (if enabled in config)
 				ThreemaPushService.tryStart(logger, getAppContext());
 			}
 		}
 	}
 
+	private void applyDynamicColorsIfEnabled() {
+		if (DynamicColors.isDynamicColorAvailable()) {
+			SharedPreferences sharedPreferences = PreferenceManager.getDefaultSharedPreferences(this);
+			if (sharedPreferences != null && sharedPreferences.getBoolean("pref_dynamic_color", false)) {
+				DynamicColorsOptions dynamicColorsOptions = new DynamicColorsOptions.Builder().setPrecondition(new DynamicColors.Precondition() {
+					@Override
+					public boolean shouldApplyDynamicColors(@NonNull Activity activity, int theme) {
+						SharedPreferences sharedPreferences = PreferenceManager.getDefaultSharedPreferences(ThreemaApplication.getAppContext());
+						return sharedPreferences != null && sharedPreferences.getBoolean("pref_dynamic_color", false);
+					}
+				}).build();
+
+				DynamicColors.applyToActivitiesIfAvailable(this, dynamicColorsOptions);
+			}
+		}
+	}
+
 	@Override
 	public void onStart(@NonNull LifecycleOwner owner) {
 		logger.info("*** Lifecycle: App now visible");
@@ -648,6 +669,8 @@ public class ThreemaApplication extends MultiDexApplication implements DefaultLi
 	@Override
 	public void onResume(@NonNull LifecycleOwner owner) {
 		logger.info("*** Lifecycle: App now resumed");
+		isResumed = true;
+
 		if (serviceManager != null && serviceManager.getLifetimeService() != null) {
 			serviceManager.getLifetimeService().acquireConnection(ACTIVITY_CONNECTION_TAG);
 		}
@@ -656,6 +679,8 @@ public class ThreemaApplication extends MultiDexApplication implements DefaultLi
 	@Override
 	public void onPause(@NonNull LifecycleOwner owner) {
 		logger.info("*** Lifecycle: App now paused");
+		isResumed = false;
+
 		if (serviceManager != null && serviceManager.getLifetimeService() != null) {
 			serviceManager.getLifetimeService().releaseConnectionLinger(ACTIVITY_CONNECTION_TAG, ACTIVITY_CONNECTION_LIFETIME);
 		}
@@ -831,16 +856,14 @@ public class ThreemaApplication extends MultiDexApplication implements DefaultLi
 			logger.error("Exception", e);
 		}
 
-		// set default theme depending on app type
-		if (prefs != null) {
-			if (TestUtil.empty(prefs.getString(getAppContext().getString(R.string.preferences__theme), null))) {
-				prefs.edit().putString(getAppContext().getString(R.string.preferences__theme), String.valueOf(
-					ConfigUtils.isWorkBuild() ?
-						Theme_DARK:
-						Theme_LIGHT)
-				).apply();
-			}
-		}
+		setupDayNightMode();
+	}
+
+	/**
+	 * Setup day / night theme for application depending on preferences
+	 */
+	private static void setupDayNightMode() {
+		AppCompatDelegate.setDefaultNightMode(ConfigUtils.getAppThemePrefs());
 	}
 
 	private static void setupLogging(PreferenceStore preferenceStore) {
@@ -888,35 +911,25 @@ public class ThreemaApplication extends MultiDexApplication implements DefaultLi
 			// Make database key from master key
 			String databaseKey = "x\"" + Utils.byteArrayToHexString(masterKey.getKey()) + "\"";
 
-			// Migrate database to v4 format if necessary
-			int sqlcipherVersion = 4;
-			try {
-				DatabaseServiceNew.tryMigrateToV4(getAppContext(), databaseKey);
-			} catch (DatabaseMigrationFailedException m) {
-				logger.error("Exception", m);
-				Toast.makeText(getAppContext(), "Database migration failed. Please free some space on your internal memory.", Toast.LENGTH_LONG).show();
-				sqlcipherVersion = 3;
-			}
-
 			UpdateSystemService updateSystemService = new UpdateSystemServiceImpl();
 
-			DatabaseServiceNew databaseServiceNew = new DatabaseServiceNew(getAppContext(), databaseKey, updateSystemService, sqlcipherVersion);
+			System.loadLibrary("sqlcipher");
+			DatabaseServiceNew databaseServiceNew = new DatabaseServiceNew(getAppContext(), databaseKey, updateSystemService);
 			databaseServiceNew.executeNull();
 
-			// Migrate nonce database to unencrypted DB
-			int nonceSqlcipherVersion = 4;
-
-			// do not attempt a nonce DB migration if the main DB is still on version 3
-			if (sqlcipherVersion == 4) {
-				try {
-					NonceDatabaseBlobService.tryMigrateToV4(getAppContext(), databaseKey);
-				} catch (DatabaseMigrationFailedException m) {
-					logger.error("Exception", m);
-					Toast.makeText(getAppContext(), "Nonce database migration failed. Please free some space on your internal memory.", Toast.LENGTH_LONG).show();
-					nonceSqlcipherVersion = 3;
+			// We create the DH session store here and execute a null operation on it to prevent
+			// the app from being launched when the database is downgraded.
+			DHSessionStoreInterface dhSessionStore = new SQLDHSessionStore(context, masterKey.getKey(), updateSystemService);
+			try {
+				dhSessionStore.executeNull();
+			} catch (Exception e) {
+				logger.error("Could not execute a statement on the database", e);
+				// The database file seems to be corrupt, therefore we delete the file
+				File databaseFile = getAppContext().getDatabasePath(SQLDHSessionStore.DATABASE_NAME);
+				if (databaseFile.exists()) {
+					FileUtil.deleteFileOrWarn(databaseFile, "sql dh session database", logger);
 				}
-			} else {
-				nonceSqlcipherVersion = 3;
+				dhSessionStore = new SQLDHSessionStore(context, masterKey.getKey(), updateSystemService);
 			}
 
 			logger.info("*** App launched");
@@ -935,7 +948,9 @@ public class ThreemaApplication extends MultiDexApplication implements DefaultLi
 							}
 
 							if (exitInfo.getTimestamp() > timestampOfLastLog) {
-								logger.info(String.format(Locale.US, "*** App last exited at %s with reason: %d, description: %s", DateUtils.formatDateTime(getAppContext(), exitInfo.getTimestamp(), DateUtils.FORMAT_SHOW_DATE | DateUtils.FORMAT_SHOW_TIME), exitInfo.getReason(), exitInfo.getDescription()));
+								SimpleDateFormat simpleDateFormat = new SimpleDateFormat("MM-dd HH:mm:ss.SSS", Locale.US);
+								logger.info(String.format(Locale.US, "*** App last exited at %s with reason: %d, description: %s", simpleDateFormat.format(exitInfo.getTimestamp()),
+									exitInfo.getReason(), exitInfo.getDescription()));
 								if (exitInfo.getReason() == ApplicationExitInfo.REASON_ANR) {
 									try {
 										InputStream traceInputStream = exitInfo.getTraceInputStream();
@@ -968,12 +983,13 @@ public class ThreemaApplication extends MultiDexApplication implements DefaultLi
 
 			IdentityStore identityStore = new IdentityStore(preferenceStore);
 
-			NonceDatabaseBlobService nonceDatabaseBlobService = new NonceDatabaseBlobService(getAppContext(), masterKey, nonceSqlcipherVersion, identityStore);
-			logger.info("Nonce count: " + nonceDatabaseBlobService.getCount());
+			DatabaseNonceStore databaseNonceStore = new DatabaseNonceStore(getAppContext(), identityStore);
+			databaseNonceStore.executeNull();
+			logger.info("Nonce count: {}", databaseNonceStore.getCount());
 
 			final ThreemaConnection connection = new ThreemaConnection(
 					identityStore,
-					new NonceFactory(nonceDatabaseBlobService),
+					new NonceFactory(databaseNonceStore),
 					null,
 					getIPv6());
 
@@ -1000,6 +1016,7 @@ public class ThreemaApplication extends MultiDexApplication implements DefaultLi
 			serviceManager = new ServiceManager(
 					connection,
 					databaseServiceNew,
+					dhSessionStore,
 					identityStore,
 					preferenceStore,
 					masterKey,
@@ -1007,7 +1024,6 @@ public class ThreemaApplication extends MultiDexApplication implements DefaultLi
 			);
 
 			connection.setServerAddressProvider(serviceManager.getServerAddressProviderService().getServerAddressProvider());
-
 			connection.setDeviceCookieManager(new DeviceCookieManagerImpl(serviceManager));
 
 			// get application restrictions
@@ -1070,7 +1086,7 @@ public class ThreemaApplication extends MultiDexApplication implements DefaultLi
 			SessionWakeUpServiceImpl.getInstance().processPendingWakeupsAsync();
 
 			// start threema safe scheduler
-			serviceManager.getThreemaSafeService().scheduleUpload();
+			serviceManager.getThreemaSafeService().schedulePeriodicUpload();
 
 			new Thread(() -> {
 				// schedule work synchronization
@@ -1088,10 +1104,8 @@ public class ThreemaApplication extends MultiDexApplication implements DefaultLi
 
 			// setup locale override
 			ConfigUtils.setLocaleOverride(getAppContext(), serviceManager.getPreferenceService());
-		} catch (MasterKeyLockedException e) {
-			logger.error("Exception", e);
-		} catch (SQLiteException e) {
-			logger.error("Exception", e);
+		} catch (MasterKeyLockedException | SQLiteException e) {
+			logger.error("Exception opening database", e);
 		} catch (ThreemaException e) {
 			// no identity
 			logger.info("No valid identity.");
@@ -1157,7 +1171,7 @@ public class ThreemaApplication extends MultiDexApplication implements DefaultLi
 					.setInitialDelay(1000, TimeUnit.MILLISECONDS)
 					.build();
 
-				workManager.enqueueUniquePeriodicWork(WORKER_IDENTITY_STATES_PERIODIC_NAME, ExistingPeriodicWorkPolicy.REPLACE, workRequest);
+				workManager.enqueueUniquePeriodicWork(WORKER_IDENTITY_STATES_PERIODIC_NAME, ExistingPeriodicWorkPolicy.CANCEL_AND_REENQUEUE, workRequest);
 				return true;
 			}
 		} catch (IllegalStateException e) {
@@ -1177,7 +1191,7 @@ public class ThreemaApplication extends MultiDexApplication implements DefaultLi
 		try {
 			WorkManager workManager = WorkManager.getInstance(context);
 			ExistingPeriodicWorkPolicy policy = WorkManagerUtil.shouldScheduleNewWorkManagerInstance(workManager, WORKER_PERIODIC_WORK_SYNC, schedulePeriodMs) ?
-				ExistingPeriodicWorkPolicy.REPLACE :
+				ExistingPeriodicWorkPolicy.CANCEL_AND_REENQUEUE :
 				ExistingPeriodicWorkPolicy.KEEP;
 			logger.info("{}: {} existing periodic work", WORKER_PERIODIC_WORK_SYNC, policy);
 			PeriodicWorkRequest workRequest = WorkSyncWorker.Companion.buildPeriodicWorkRequest(schedulePeriodMs);
@@ -1217,7 +1231,7 @@ public class ThreemaApplication extends MultiDexApplication implements DefaultLi
 					.setInitialDelay(3, TimeUnit.MINUTES)
 					.build();
 
-				workManager.enqueueUniquePeriodicWork(WORKER_SHARE_TARGET_UPDATE, ExistingPeriodicWorkPolicy.REPLACE, workRequest);
+				workManager.enqueueUniquePeriodicWork(WORKER_SHARE_TARGET_UPDATE, ExistingPeriodicWorkPolicy.CANCEL_AND_REENQUEUE, workRequest);
 			} else {
 				logger.debug("Reusing existing worker");
 			}
@@ -1539,7 +1553,12 @@ public class ThreemaApplication extends MultiDexApplication implements DefaultLi
 
 			@Override
 			public void onProgressChanged(AbstractMessageModel messageModel, int newProgress) {
-				//ingore
+				// Ignore
+			}
+
+			@Override
+			public void onResendDismissed(@NonNull AbstractMessageModel messageModel) {
+				// Ignore
 			}
 
 			private void showConversationNotification(AbstractMessageModel newMessage, boolean updateExisting) {
@@ -2149,10 +2168,6 @@ public class ThreemaApplication extends MultiDexApplication implements DefaultLi
 		return appVersion;
 	}
 
-	public static int getFeatureLevel() {
-		return 3;
-	}
-
 	public static Context getAppContext() {
 		return ThreemaApplication.context;
 	}
diff --git a/app/src/main/java/ch/threema/app/actions/LocationMessageSendAction.java b/app/src/main/java/ch/threema/app/actions/LocationMessageSendAction.java
index b2358138..eee4a71c 100644
--- a/app/src/main/java/ch/threema/app/actions/LocationMessageSendAction.java
+++ b/app/src/main/java/ch/threema/app/actions/LocationMessageSendAction.java
@@ -114,7 +114,6 @@ public class LocationMessageSendAction extends SendAction {
 					sendSingleMessage(resolvedReceivers[receiverIndex], location, poiName, this);
 				} else {
 					actionHandler.onCompleted();
-					messageService.sendProfilePicture(resolvedReceivers);
 				}
 			}
 		});
diff --git a/app/src/main/java/ch/threema/app/actions/TextMessageSendAction.java b/app/src/main/java/ch/threema/app/actions/TextMessageSendAction.java
index 636ca1a6..9541b416 100644
--- a/app/src/main/java/ch/threema/app/actions/TextMessageSendAction.java
+++ b/app/src/main/java/ch/threema/app/actions/TextMessageSendAction.java
@@ -105,7 +105,6 @@ public class TextMessageSendAction extends SendAction {
 				}
 			}
 			actionHandler.onCompleted();
-			messageService.sendProfilePicture(resolvedReceivers);
 			return true;
 		}
 		return false;
diff --git a/app/src/main/java/ch/threema/app/activities/AboutActivity.java b/app/src/main/java/ch/threema/app/activities/AboutActivity.java
index ba0bed4b..bb77ba26 100644
--- a/app/src/main/java/ch/threema/app/activities/AboutActivity.java
+++ b/app/src/main/java/ch/threema/app/activities/AboutActivity.java
@@ -29,11 +29,11 @@ import android.widget.Toast;
 
 import ch.threema.app.BuildConfig;
 import ch.threema.app.R;
-import ch.threema.app.preference.SettingsActivity;
 import ch.threema.app.utils.AnimationUtil;
 
 public class AboutActivity extends ThreemaToolbarActivity {
 
+	@Override
 	public void onCreate(Bundle savedInstanceState) {
 		super.onCreate(savedInstanceState);
 
@@ -55,6 +55,7 @@ public class AboutActivity extends ThreemaToolbarActivity {
 		}
 	}
 
+	@Override
 	public int getLayoutResource() {
 		return R.layout.activity_about;
 	}
@@ -62,10 +63,8 @@ public class AboutActivity extends ThreemaToolbarActivity {
 
 	@Override
 	public boolean onOptionsItemSelected(MenuItem item) {
-		switch (item.getItemId()) {
-			case android.R.id.home:
-				finish();
-				break;
+		if (item.getItemId() == android.R.id.home) {
+			finish();
 		}
 		return false;
 	}
diff --git a/app/src/main/java/ch/threema/app/activities/AddContactActivity.java b/app/src/main/java/ch/threema/app/activities/AddContactActivity.java
index 9a85e9f2..b914f7bb 100644
--- a/app/src/main/java/ch/threema/app/activities/AddContactActivity.java
+++ b/app/src/main/java/ch/threema/app/activities/AddContactActivity.java
@@ -106,10 +106,6 @@ public class AddContactActivity extends ThreemaActivity implements GenericAlertD
 			return;
 		}
 
-		if (ConfigUtils.getAppTheme(this) == ConfigUtils.THEME_DARK) {
-			setTheme(R.style.Theme_Threema_Translucent_Dark);
-		}
-
 		super.onCreate(savedInstanceState);
 
 		supportRequestWindowFeature(Window.FEATURE_NO_TITLE);
diff --git a/app/src/main/java/ch/threema/app/activities/BackupAdminActivity.java b/app/src/main/java/ch/threema/app/activities/BackupAdminActivity.java
index ec7ec14b..2ebe5023 100644
--- a/app/src/main/java/ch/threema/app/activities/BackupAdminActivity.java
+++ b/app/src/main/java/ch/threema/app/activities/BackupAdminActivity.java
@@ -24,6 +24,8 @@ package ch.threema.app.activities;
 import android.content.Intent;
 import android.os.Bundle;
 import android.view.MenuItem;
+import android.view.View;
+import android.widget.TextView;
 
 import com.google.android.material.tabs.TabLayout;
 
@@ -35,10 +37,13 @@ import androidx.fragment.app.FragmentManager;
 import androidx.fragment.app.FragmentPagerAdapter;
 import androidx.viewpager.widget.ViewPager;
 import ch.threema.app.R;
+import ch.threema.app.exceptions.FileSystemNotPresentException;
 import ch.threema.app.fragments.BackupDataFragment;
 import ch.threema.app.services.DeadlineListService;
+import ch.threema.app.services.license.LicenseService;
 import ch.threema.app.threemasafe.BackupThreemaSafeFragment;
 import ch.threema.app.threemasafe.ThreemaSafeMDMConfig;
+import ch.threema.app.utils.AnimationUtil;
 import ch.threema.app.utils.AppRestrictionUtil;
 import ch.threema.app.utils.ConfigUtils;
 import ch.threema.app.utils.HiddenChatUtil;
@@ -73,6 +78,13 @@ public class BackupAdminActivity extends ThreemaToolbarActivity {
 			return;
 		}
 
+		if (ConfigUtils.isSerialLicensed() && !ConfigUtils.isSerialLicenseValid()) {
+			logger.debug("Not licensed.");
+			this.finish();
+			System.exit(0);
+			return;
+		}
+
 		ActionBar actionBar = getSupportActionBar();
 		if (actionBar != null) {
 			actionBar.setDisplayHomeAsUpEnabled(true);
@@ -84,6 +96,18 @@ public class BackupAdminActivity extends ThreemaToolbarActivity {
 		viewPager.setAdapter(new BackupAdminPagerAdapter(getSupportFragmentManager()));
 		tabLayout.setupWithViewPager(viewPager);
 
+		if (preferenceService.getBackupWarningDismissedTime() == 0L) {
+			((TextView) findViewById(R.id.notice_text)).setText(R.string.backup_explain_text);
+			final View noticeLayout = findViewById(R.id.notice_layout);
+			noticeLayout.setVisibility(View.VISIBLE);
+			findViewById(R.id.close_button).setOnClickListener(v -> {
+				preferenceService.setBackupWarningDismissedTime(System.currentTimeMillis());
+				AnimationUtil.collapse(noticeLayout);
+			});
+		} else {
+			findViewById(R.id.notice_layout).setVisibility(View.GONE);
+		}
+
 		// recover lock state after rotation
 		if (savedInstanceState != null) {
 			isUnlocked = savedInstanceState.getBoolean(BUNDLE_IS_UNLOCKED, false);
diff --git a/app/src/main/java/ch/threema/app/activities/BiometricLockActivity.java b/app/src/main/java/ch/threema/app/activities/BiometricLockActivity.java
index bf96ca3c..a6c3cff9 100644
--- a/app/src/main/java/ch/threema/app/activities/BiometricLockActivity.java
+++ b/app/src/main/java/ch/threema/app/activities/BiometricLockActivity.java
@@ -43,7 +43,6 @@ import ch.threema.app.services.LockAppService;
 import ch.threema.app.services.PreferenceService;
 import ch.threema.app.services.SystemScreenLockService;
 import ch.threema.app.utils.BiometricUtil;
-import ch.threema.app.utils.ConfigUtils;
 import ch.threema.app.utils.NavigationUtil;
 import ch.threema.app.utils.RuntimeUtil;
 import ch.threema.base.utils.LoggingUtil;
@@ -64,10 +63,6 @@ public class BiometricLockActivity extends ThreemaAppCompatActivity {
 	public void onCreate(Bundle savedInstanceState) {
 		logger.debug("onCreate");
 
-		if (ConfigUtils.getAppTheme(this) == ConfigUtils.THEME_DARK) {
-			setTheme(R.style.Theme_Threema_BiometricUnlock_Dark);
-		}
-
 		super.onCreate(savedInstanceState);
 
 		ServiceManager serviceManager = ThreemaApplication.getServiceManager();
diff --git a/app/src/main/java/ch/threema/app/activities/ComposeMessageActivity.java b/app/src/main/java/ch/threema/app/activities/ComposeMessageActivity.java
index 5dd90cd9..247fff6a 100644
--- a/app/src/main/java/ch/threema/app/activities/ComposeMessageActivity.java
+++ b/app/src/main/java/ch/threema/app/activities/ComposeMessageActivity.java
@@ -23,22 +23,20 @@ package ch.threema.app.activities;
 
 import android.content.Intent;
 import android.content.res.Configuration;
-import android.media.AudioManager;
 import android.os.Bundle;
 import android.view.WindowManager;
 import android.widget.FrameLayout;
 
-import org.slf4j.Logger;
-
 import androidx.annotation.NonNull;
 import androidx.fragment.app.FragmentManager;
+
+import org.slf4j.Logger;
+
 import ch.threema.app.R;
 import ch.threema.app.ThreemaApplication;
 import ch.threema.app.dialogs.GenericAlertDialog;
 import ch.threema.app.fragments.ComposeMessageFragment;
 import ch.threema.app.fragments.MessageSectionFragment;
-import ch.threema.app.listeners.MessagePlayerListener;
-import ch.threema.app.managers.ListenerManager;
 import ch.threema.app.messagereceiver.MessageReceiver;
 import ch.threema.app.preference.SettingsActivity;
 import ch.threema.app.services.DeadlineListService;
@@ -47,7 +45,6 @@ import ch.threema.app.utils.HiddenChatUtil;
 import ch.threema.app.utils.IntentDataUtil;
 import ch.threema.base.utils.LoggingUtil;
 import ch.threema.localcrypto.MasterKey;
-import ch.threema.storage.models.AbstractMessageModel;
 
 public class ComposeMessageActivity extends ThreemaToolbarActivity implements GenericAlertDialog.DialogClickListener {
 	private static final Logger logger = LoggingUtil.getThreemaLogger("ComposeMessageActivity");
@@ -64,16 +61,6 @@ public class ComposeMessageActivity extends ThreemaToolbarActivity implements Ge
 	private final String COMPOSE_FRAGMENT_TAG = "compose_message_fragment";
 	private final String MESSAGES_FRAGMENT_TAG = "message_section_fragment";
 
-	private final MessagePlayerListener messagePlayerListener = new MessagePlayerListener() {
-		@Override
-		public void onAudioStreamChanged(int newStreamType) {
-			setVolumeControlStream(newStreamType == AudioManager.STREAM_VOICE_CALL ? AudioManager.STREAM_VOICE_CALL : AudioManager.USE_DEFAULT_STREAM_TYPE);
-		}
-
-		@Override
-		public void onAudioPlayEnded(AbstractMessageModel messageModel) { }
-	};
-
 	@Override
 	public void onCreate(Bundle savedInstanceState) {
 		logger.debug("onCreate");
@@ -82,8 +69,6 @@ public class ComposeMessageActivity extends ThreemaToolbarActivity implements Ge
 
 		this.currentIntent = getIntent();
 
-		ListenerManager.messagePlayerListener.add(this.messagePlayerListener);
-
 		//check master key
 		MasterKey masterKey = ThreemaApplication.getMasterKey();
 
@@ -164,7 +149,9 @@ public class ComposeMessageActivity extends ThreemaToolbarActivity implements Ge
 		if (composeMessageFragment != null) {
 			if (!composeMessageFragment.onBackPressed()) {
 				finish();
-				overridePendingTransition(0, 0);
+				if (ConfigUtils.isTabletLayout()) {
+					overridePendingTransition(0, 0);
+				}
 			}
 			return;
 		}
@@ -174,9 +161,6 @@ public class ComposeMessageActivity extends ThreemaToolbarActivity implements Ge
 	@Override
 	public void onDestroy() {
 		logger.debug("onDestroy");
-
-		ListenerManager.messagePlayerListener.remove(this.messagePlayerListener);
-
 		super.onDestroy();
 	}
 
@@ -255,7 +239,7 @@ public class ComposeMessageActivity extends ThreemaToolbarActivity implements Ge
 	}
 
 	private boolean checkHiddenChatLock(Intent intent, int requestCode) {
-		MessageReceiver messageReceiver = IntentDataUtil.getMessageReceiverFromIntent(getApplicationContext(), intent);
+		MessageReceiver<?> messageReceiver = IntentDataUtil.getMessageReceiverFromIntent(getApplicationContext(), intent);
 
 		if (messageReceiver != null) {
 			if (serviceManager != null) {
diff --git a/app/src/main/java/ch/threema/app/activities/ContactDetailActivity.java b/app/src/main/java/ch/threema/app/activities/ContactDetailActivity.java
index 4a41a2e2..7614a5f9 100644
--- a/app/src/main/java/ch/threema/app/activities/ContactDetailActivity.java
+++ b/app/src/main/java/ch/threema/app/activities/ContactDetailActivity.java
@@ -74,7 +74,6 @@ import ch.threema.app.listeners.ContactListener;
 import ch.threema.app.listeners.ContactSettingsListener;
 import ch.threema.app.listeners.GroupListener;
 import ch.threema.app.managers.ListenerManager;
-import ch.threema.app.messagereceiver.MessageReceiver;
 import ch.threema.app.services.ContactService;
 import ch.threema.app.services.ConversationService;
 import ch.threema.app.services.DeadlineListService;
@@ -84,7 +83,6 @@ import ch.threema.app.services.MessageService;
 import ch.threema.app.services.PreferenceService;
 import ch.threema.app.services.QRCodeService;
 import ch.threema.app.services.QRCodeServiceImpl;
-import ch.threema.app.services.license.LicenseService;
 import ch.threema.app.ui.AvatarEditView;
 import ch.threema.app.ui.ResumePauseHandler;
 import ch.threema.app.ui.TooltipPopup;
@@ -147,13 +145,6 @@ public class ContactDetailActivity extends ThreemaToolbarActivity
 	private List<GroupModel> groupList;
 	private boolean isDisabledProfilePicReleaseSettings = false;
 	private View workIcon;
-	private final ActivityResultLauncher<String> readPhoneStatePermissionLauncher = registerForActivityResult(new ActivityResultContracts.RequestPermission(), isGranted -> {
-		if (!isGranted && !ActivityCompat.shouldShowRequestPermissionRationale(this, Manifest.permission.READ_PHONE_STATE)) {
-			ConfigUtils.showPermissionRationale(this, findViewById(R.id.main_content), R.string.read_phone_state_short_message);
-		} else {
-			VoipUtil.initiateCall(this, contact, false, null, null);
-		}
-	});
 
 	private final ResumePauseHandler.RunIfActive runIfActiveUpdate = new ResumePauseHandler.RunIfActive() {
 		@Override
@@ -380,6 +371,12 @@ public class ContactDetailActivity extends ThreemaToolbarActivity
 				}
 			}
 		}
+
+		logger.info(
+			"DH session state with contact {}: {}",
+			contact.getIdentity(),
+			contactService.getForwardSecurityState(contact)
+		);
 	}
 
 	private void onCreateLocal() {
@@ -412,7 +409,7 @@ public class ContactDetailActivity extends ThreemaToolbarActivity
 			location[0] += workIcon.getWidth() / 2;
 			location[1] += workIcon.getHeight();
 
-			final TooltipPopup workTooltipPopup = new TooltipPopup(this, R.string.preferences__tooltip_work_hint_shown, R.layout.popup_tooltip_top_left_work, this, new Intent(this, WorkExplainActivity.class));
+			final TooltipPopup workTooltipPopup = new TooltipPopup(this, R.string.preferences__tooltip_work_hint_shown, this, new Intent(this, WorkExplainActivity.class), R.drawable.ic_badge_work_24dp);
 			workTooltipPopup.show(this, workIcon, getString(R.string.tooltip_work_hint), TooltipPopup.ALIGN_BELOW_ANCHOR_ARROW_LEFT, location, 0);
 
 			final AppBarLayout appBarLayout = findViewById(R.id.appbar);
@@ -627,71 +624,58 @@ public class ContactDetailActivity extends ThreemaToolbarActivity
 
 	@Override
 	public boolean onOptionsItemSelected(MenuItem item) {
-		switch (item.getItemId()) {
-			case R.id.action_send_message:
-				if (identity != null) {
-					Intent intent = new Intent(this, ComposeMessageActivity.class);
-					intent.setFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP);
-					intent.putExtra(ThreemaApplication.INTENT_DATA_CONTACT, identity);
-					intent.putExtra(ThreemaApplication.INTENT_DATA_EDITFOCUS, Boolean.TRUE);
-					startActivity(intent);
-					finish();
-				}
-				break;
-			case R.id.action_remove_contact:
-				removeContact();
-				break;
-			case R.id.action_scan_id:
-				if (ConfigUtils.requestCameraPermissions(this, null, PERMISSION_REQUEST_CAMERA)) {
-					scanQR();
-				}
-				break;
-			case R.id.menu_threema_call:
-				VoipUtil.initiateCall(this, contact, false, null, readPhoneStatePermissionLauncher);
-				break;
-			case R.id.action_block_contact:
-				if (this.blackListIdentityService != null && this.blackListIdentityService.has(this.contact.getIdentity())) {
-					blockContact();
-				} else {
-					GenericAlertDialog.newInstance(R.string.block_contact, R.string.really_block_contact, R.string.yes, R.string.no).show(getSupportFragmentManager(), DIALOG_TAG_CONFIRM_BLOCK);
-				}
-				break;
-			case R.id.action_share_contact:
-				ShareUtil.shareContact(this, contact);
-				break;
-			case R.id.menu_gallery:
-				if (!hiddenChatsListService.has(contactService.getUniqueIdString(contact))) {
-					Intent mediaGalleryIntent = new Intent(this, MediaGalleryActivity.class);
-					mediaGalleryIntent.putExtra(ThreemaApplication.INTENT_DATA_CONTACT, identity);
-					startActivity(mediaGalleryIntent);
-				}
-				break;
-			case R.id.action_add_profilepic_recipient:
-				if (!profilePicRecipientsService.has(contact.getIdentity())) {
-					profilePicRecipientsService.add(contact.getIdentity());
-				} else {
-					profilePicRecipientsService.remove(contact.getIdentity());
-				}
-				updateProfilepicMenu();
-				break;
-			case R.id.action_send_profilepic:
-				sendProfilePic();
-				break;
-			default:
-				finishUp();
+		final int id = item.getItemId();
+		if (id == R.id.action_send_message){
+			if (identity != null) {
+				Intent intent = new Intent(this, ComposeMessageActivity.class);
+				intent.setFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP);
+				intent.putExtra(ThreemaApplication.INTENT_DATA_CONTACT, identity);
+				intent.putExtra(ThreemaApplication.INTENT_DATA_EDITFOCUS, Boolean.TRUE);
+				startActivity(intent);
+				finish();
+			}
+		} else if (id == R.id.action_remove_contact) {
+			removeContact();
+		} else if (id == R.id.action_scan_id) {
+			if (ConfigUtils.requestCameraPermissions(this, null, PERMISSION_REQUEST_CAMERA)) {
+				scanQR();
+			}
+		} else if (id == R.id.menu_threema_call) {
+			VoipUtil.initiateCall(this, contact, false, null);
+		} else if (id == R.id.action_block_contact) {
+			if (this.blackListIdentityService != null && this.blackListIdentityService.has(this.contact.getIdentity())) {
+				blockContact();
+			} else {
+				GenericAlertDialog.newInstance(R.string.block_contact, R.string.really_block_contact, R.string.yes, R.string.no).show(getSupportFragmentManager(), DIALOG_TAG_CONFIRM_BLOCK);
+			}
+		} else if (id == R.id.action_share_contact) {
+			ShareUtil.shareContact(this, contact);
+		} else if (id == R.id.menu_gallery) {
+			if (!hiddenChatsListService.has(contactService.getUniqueIdString(contact))) {
+				Intent mediaGalleryIntent = new Intent(this, MediaGalleryActivity.class);
+				mediaGalleryIntent.putExtra(ThreemaApplication.INTENT_DATA_CONTACT, identity);
+				startActivity(mediaGalleryIntent);
+			}
+		} else if (id == R.id.action_add_profilepic_recipient) {
+			if (!profilePicRecipientsService.has(contact.getIdentity())) {
+				profilePicRecipientsService.add(contact.getIdentity());
+			} else {
+				profilePicRecipientsService.remove(contact.getIdentity());
+			}
+			updateProfilepicMenu();
+		} else if (id == R.id.action_send_profilepic) {
+			sendProfilePic();
+		} else {
+			finishUp();
 		}
 		return super.onOptionsItemSelected(item);
 	}
 
 	private void sendProfilePic() {
-		contact.setProfilePicSentDate(new Date(0));
-		contactService.save(contact);
-
 		new AsyncTask<Void, Void, Boolean>() {
 			@Override
 			protected Boolean doInBackground(Void... params) {
-				MessageReceiver messageReceiver = contactService.createReceiver(contact);
-				return messageService.sendProfilePicture(new MessageReceiver[]{messageReceiver});
+				return messageService.sendProfilePicture(contact);
 			}
 
 			@Override
@@ -731,10 +715,10 @@ public class ContactDetailActivity extends ThreemaToolbarActivity
 			switch (preferenceService.getProfilePicRelease()) {
 				case PreferenceService.PROFILEPIC_RELEASE_EVERYONE:
 					this.profilePicItem.setVisible(false);
-					this.profilePicSendItem.setVisible(ContactUtil.canReceiveProfilePics(contact));
+					this.profilePicSendItem.setVisible(!ContactUtil.isEchoEchoOrChannelContact(contact));
 					break;
 				case PreferenceService.PROFILEPIC_RELEASE_SOME:
-					if (ContactUtil.canReceiveProfilePics(contact)) {
+					if (!ContactUtil.isEchoEchoOrChannelContact(contact)) {
 						if (profilePicRecipientsService != null && profilePicRecipientsService.has(contact.getIdentity())) {
 							profilePicItem.setTitle(R.string.menu_send_profilpic_off);
 							profilePicItem.setIcon(R.drawable.ic_person_remove_outline);
@@ -962,6 +946,5 @@ public class ContactDetailActivity extends ThreemaToolbarActivity
 			return;
 		}
 		navigateUpTo(new Intent(this, HomeActivity.class));
-		overridePendingTransition(R.anim.fast_fade_in, R.anim.fast_fade_out);
 	}
 }
diff --git a/app/src/main/java/ch/threema/app/activities/CropImageActivity.java b/app/src/main/java/ch/threema/app/activities/CropImageActivity.java
index df0b50d1..8d9a5649 100644
--- a/app/src/main/java/ch/threema/app/activities/CropImageActivity.java
+++ b/app/src/main/java/ch/threema/app/activities/CropImageActivity.java
@@ -22,15 +22,28 @@
 package ch.threema.app.activities;
 
 import android.content.Intent;
+import android.content.SharedPreferences;
 import android.graphics.Bitmap;
+import android.graphics.Rect;
 import android.net.Uri;
+import android.os.Build;
 import android.os.Bundle;
 import android.provider.MediaStore;
+import android.view.MenuItem;
 import android.view.View;
+import android.view.ViewTreeObserver;
+
+import androidx.appcompat.app.ActionBar;
+import androidx.core.view.ViewCompat;
+import androidx.preference.PreferenceManager;
 
 import com.canhub.cropper.CropImageView;
+import com.google.android.material.appbar.MaterialToolbar;
+import com.google.android.material.color.DynamicColors;
+import com.google.android.material.floatingactionbutton.ExtendedFloatingActionButton;
+
+import java.util.Collections;
 
-import androidx.appcompat.widget.Toolbar;
 import ch.threema.app.R;
 import ch.threema.app.ThreemaApplication;
 import ch.threema.app.utils.BitmapUtil;
@@ -44,106 +57,104 @@ public class CropImageActivity extends ThreemaToolbarActivity {
 	public static final String EXTRA_MAX_Y = "my";
 	public static final String EXTRA_OVAL = "oval";
 	public static final String FORCE_DARK_THEME = "darkTheme";
-
+	public static final String EXTRA_ADDITIONAL_ORIENTATION = "additional_rotation";
+	public static final String EXTRA_ADDITIONAL_FLIP = "additional_flip";
 	public static final int REQUEST_CROP = 7732;
 
-	private int aspectX;
-	private int aspectY;
-	private int orientation, flip;
-
-	// Output image size
-	private int maxX;
-	private int maxY;
-
-	private boolean oval = false;
-
-	private Uri sourceUri;
-	private Uri saveUri;
-
-	private boolean isSaving;
-
+	private int aspectX, aspectY, orientation, flip, additionalOrientation, additionalFlip, maxX, maxY;
+	private boolean oval = false, isSaving;
+	private Uri sourceUri, saveUri;
 	private CropImageView imageView;
+	private View contentView;
 
 	@Override
-	public void onCreate(Bundle icicle) {
+	public void onCreate(Bundle savedInstanceState) {
 		Intent intent = getIntent();
 		Bundle extras = intent.getExtras();
 
 		if (extras != null && extras.getBoolean(FORCE_DARK_THEME, false)) {
-			ConfigUtils.configureActivityTheme(this, ConfigUtils.THEME_DARK);
+			setTheme(R.style.Theme_Threema_MediaViewer);
+			SharedPreferences sharedPreferences = PreferenceManager.getDefaultSharedPreferences(this);
+			if (sharedPreferences != null && sharedPreferences.getBoolean("pref_dynamic_color", false)) {
+				DynamicColors.applyToActivityIfAvailable(this);
+			}
 		} else {
-			ConfigUtils.configureActivityTheme(this);
+			ConfigUtils.configureSystemBars(this);
 		}
 
-		super.onCreate(icicle);
+		super.onCreate(savedInstanceState);
 
-		Toolbar toolbar = findViewById(R.id.crop_toolbar);
+		MaterialToolbar toolbar = findViewById(R.id.crop_toolbar);
 		setSupportActionBar(toolbar);
+		ActionBar actionBar = getSupportActionBar();
+		actionBar.setDisplayHomeAsUpEnabled(true);
 
-		View cancelActionView = findViewById(R.id.action_cancel);
-		cancelActionView.setOnClickListener(new View.OnClickListener() {
-			@Override
-			public void onClick(View v) {
-				setResult(RESULT_CANCELED);
-				finish();
-			}
-		});
-		View doneActionView = findViewById(R.id.action_done);
-		doneActionView.setOnClickListener(new View.OnClickListener() {
-			@Override
-			public void onClick(View v) {
-				onSaveClicked();
-			}
-		});
+		ExtendedFloatingActionButton doneActionView = findViewById(R.id.floating);
+		doneActionView.setOnClickListener(v -> onSaveClicked());
 
 		setupFromIntent();
 
 		imageView = findViewById(R.id.crop_image);
-		imageView.setOnSetImageUriCompleteListener(new CropImageView.OnSetImageUriCompleteListener() {
-			@Override
-			public void onSetImageUriComplete(CropImageView view, Uri uri, Exception error) {
-				if (error == null && uri != null) {
-					BitmapUtil.ExifOrientation exifOrientation = BitmapUtil.getExifOrientation(CropImageActivity.this, uri);
-					int exifFlip = exifOrientation.getFlip();
-					int exifRotation = 0;
-
-					// Bug Workaround: CropImageView accounts for exif rotation but NOT if there's also a flip
-					if ((exifFlip & BitmapUtil.FLIP_HORIZONTAL) == BitmapUtil.FLIP_HORIZONTAL) {
-						view.flipImageHorizontally();
-						exifRotation = (int) exifOrientation.getRotation();
-					}
-					if ((exifFlip & BitmapUtil.FLIP_VERTICAL) == BitmapUtil.FLIP_VERTICAL) {
-						view.flipImageVertically();
-						exifRotation = (int) exifOrientation.getRotation();
-					}
-					if (exifRotation != 0) {
-						view.rotateImage(exifRotation);
-					}
-
-					// non-exif
-					if ((flip & BitmapUtil.FLIP_HORIZONTAL) == BitmapUtil.FLIP_HORIZONTAL) {
-						view.flipImageHorizontally();
-					}
-					if ((flip & BitmapUtil.FLIP_VERTICAL) == BitmapUtil.FLIP_VERTICAL) {
-						view.flipImageVertically();
-					}
-					if (orientation != 0) {
-						view.rotateImage(orientation);
-					}
-
-					if (aspectX != 0 && aspectY != 0) {
-						view.setAspectRatio(aspectX, aspectY);
-						view.setFixedAspectRatio(true);
-					}
+		imageView.setOnSetImageUriCompleteListener((view, uri, error) -> {
+			if (error == null && uri != null) {
+				BitmapUtil.ExifOrientation exifOrientation = BitmapUtil.getExifOrientation(CropImageActivity.this, uri);
+				int exifFlip = exifOrientation.getFlip();
+				int exifRotation = 0;
+
+				// Bug Workaround: CropImageView accounts for exif rotation but NOT if there's also a flip
+				if ((exifFlip & BitmapUtil.FLIP_HORIZONTAL) == BitmapUtil.FLIP_HORIZONTAL) {
+					view.flipImageHorizontally();
+					exifRotation = (int) exifOrientation.getRotation();
+				}
+				if ((exifFlip & BitmapUtil.FLIP_VERTICAL) == BitmapUtil.FLIP_VERTICAL) {
+					view.flipImageVertically();
+					exifRotation = (int) exifOrientation.getRotation();
+				}
+				if (exifRotation != 0) {
+					view.rotateImage(exifRotation);
+				}
+
+				// non-exif
+				if ((flip & BitmapUtil.FLIP_HORIZONTAL) == BitmapUtil.FLIP_HORIZONTAL) {
+					view.flipImageHorizontally();
+				}
+				if ((flip & BitmapUtil.FLIP_VERTICAL) == BitmapUtil.FLIP_VERTICAL) {
+					view.flipImageVertically();
+				}
+				if (orientation != 0) {
+					view.rotateImage(orientation);
+				}
+
+				// Additional flip and rotation
+				if ((additionalFlip & BitmapUtil.FLIP_HORIZONTAL) == BitmapUtil.FLIP_HORIZONTAL) {
+					view.flipImageHorizontally();
+				}
+				if ((additionalFlip & BitmapUtil.FLIP_VERTICAL) == BitmapUtil.FLIP_VERTICAL) {
+					view.flipImageVertically();
+				}
+				if (additionalOrientation != 0) {
+					view.rotateImage(additionalOrientation);
+				}
+
+				if (aspectX != 0 && aspectY != 0) {
+					view.setAspectRatio(aspectX, aspectY);
+					view.setFixedAspectRatio(true);
 				}
 			}
 		});
-		imageView.setImageUriAsync(sourceUri);
-		imageView.setCropShape(oval ? CropImageView.CropShape.OVAL : CropImageView.CropShape.RECTANGLE);
-		imageView.setOnCropImageCompleteListener(new CropImageView.OnCropImageCompleteListener() {
+		if (savedInstanceState == null) {
+			imageView.setCropShape(oval ? CropImageView.CropShape.OVAL : CropImageView.CropShape.RECTANGLE);
+			imageView.setImageUriAsync(sourceUri);
+		}
+		imageView.setOnCropImageCompleteListener((view, result) -> cropCompleted());
+
+		contentView = findViewById(android.R.id.content);
+		ViewTreeObserver treeObserver = contentView.getViewTreeObserver();
+		treeObserver.addOnGlobalLayoutListener(new ViewTreeObserver.OnGlobalLayoutListener() {
 			@Override
-			public void onCropImageComplete(CropImageView view, CropImageView.CropResult result) {
-				cropCompleted();
+			public void onGlobalLayout() {
+				contentView.getViewTreeObserver().removeOnGlobalLayoutListener(this);
+				excludeGestures();
 			}
 		});
 	}
@@ -153,6 +164,15 @@ public class CropImageActivity extends ThreemaToolbarActivity {
 		return R.layout.activity_crop;
 	}
 
+	@Override
+	public boolean onOptionsItemSelected(MenuItem item) {
+		if (item.getItemId() == android.R.id.home) {
+			setResult(RESULT_CANCELED);
+			finish();
+			return true;
+		}
+		return super.onOptionsItemSelected(item);
+	}
 	private void cropCompleted() {
 		setResult(RESULT_OK, new Intent().putExtra(MediaStore.EXTRA_OUTPUT, saveUri));
 		finish();
@@ -171,6 +191,8 @@ public class CropImageActivity extends ThreemaToolbarActivity {
 			saveUri = extras.getParcelable(MediaStore.EXTRA_OUTPUT);
 			orientation = extras.getInt(ThreemaApplication.EXTRA_ORIENTATION, 0);
 			flip = extras.getInt(ThreemaApplication.EXTRA_FLIP, BitmapUtil.FLIP_NONE);
+			additionalOrientation = extras.getInt(EXTRA_ADDITIONAL_ORIENTATION, 0);
+			additionalFlip = extras.getInt(EXTRA_ADDITIONAL_FLIP, BitmapUtil.FLIP_NONE);
 		}
 
 		sourceUri = intent.getData();
@@ -188,6 +210,26 @@ public class CropImageActivity extends ThreemaToolbarActivity {
 			imageView.croppedImageAsync(Bitmap.CompressFormat.PNG, 100, 0, 0, CropImageView.RequestSizeOptions.NONE, saveUri);
 		}
 	}
+
+	private void excludeGestures() {
+		if (Build.VERSION.SDK_INT < Build.VERSION_CODES.Q) {
+			return;
+		}
+
+		int maxHeight = getResources().getDimensionPixelSize(R.dimen.gesture_exclusion_max_height);
+		Rect drawingRect = new Rect();
+		imageView.getDrawingRect(drawingRect);
+
+		int y = 0;
+		int realHeight = drawingRect.height();
+		if (realHeight > maxHeight) {
+			y = (realHeight - maxHeight) / 2;
+			realHeight = maxHeight;
+		}
+
+		Rect exclusionRect = new Rect(0, y, getResources().getDimensionPixelSize(R.dimen.gesture_exclusion_border_width), y + realHeight);
+		ViewCompat.setSystemGestureExclusionRects(imageView, Collections.singletonList(exclusionRect));
+	}
 }
 
 
diff --git a/app/src/main/java/ch/threema/app/activities/DirectoryActivity.java b/app/src/main/java/ch/threema/app/activities/DirectoryActivity.java
index 20d90bae..0d6e51ac 100644
--- a/app/src/main/java/ch/threema/app/activities/DirectoryActivity.java
+++ b/app/src/main/java/ch/threema/app/activities/DirectoryActivity.java
@@ -21,12 +21,13 @@
 
 package ch.threema.app.activities;
 
+import static ch.threema.app.ui.DirectoryDataSource.MIN_SEARCH_STRING_LENGTH;
+
+import android.animation.LayoutTransition;
 import android.annotation.SuppressLint;
 import android.content.Intent;
-import android.content.res.ColorStateList;
 import android.content.res.Configuration;
 import android.net.Uri;
-import android.os.Build;
 import android.os.Bundle;
 import android.os.Handler;
 import android.os.SystemClock;
@@ -37,30 +38,31 @@ import android.view.View;
 import android.widget.TextView;
 import android.widget.Toast;
 
-import com.google.android.material.chip.Chip;
-import com.google.android.material.chip.ChipGroup;
-import com.google.android.material.progressindicator.LinearProgressIndicator;
-
-import org.slf4j.Logger;
-
-import java.lang.annotation.Retention;
-import java.lang.annotation.RetentionPolicy;
-import java.util.ArrayList;
-import java.util.List;
-
 import androidx.annotation.ColorInt;
 import androidx.annotation.IntDef;
+import androidx.annotation.MainThread;
 import androidx.annotation.NonNull;
 import androidx.annotation.UiThread;
 import androidx.appcompat.app.ActionBar;
-import androidx.appcompat.widget.SearchView;
-import androidx.appcompat.widget.Toolbar;
 import androidx.lifecycle.LiveData;
 import androidx.lifecycle.Observer;
 import androidx.paging.LivePagedListBuilder;
 import androidx.paging.PagedList;
 import androidx.recyclerview.widget.DefaultItemAnimator;
 import androidx.recyclerview.widget.LinearLayoutManager;
+
+import com.google.android.material.chip.Chip;
+import com.google.android.material.chip.ChipGroup;
+import com.google.android.material.progressindicator.LinearProgressIndicator;
+import com.google.android.material.search.SearchBar;
+
+import org.slf4j.Logger;
+
+import java.lang.annotation.Retention;
+import java.lang.annotation.RetentionPolicy;
+import java.util.ArrayList;
+import java.util.List;
+
 import ch.threema.app.R;
 import ch.threema.app.adapters.DirectoryAdapter;
 import ch.threema.app.asynctasks.AddContactAsyncTask;
@@ -79,8 +81,6 @@ import ch.threema.domain.protocol.api.work.WorkDirectoryCategory;
 import ch.threema.domain.protocol.api.work.WorkDirectoryContact;
 import ch.threema.domain.protocol.api.work.WorkOrganization;
 
-import static ch.threema.app.ui.DirectoryDataSource.MIN_SEARCH_STRING_LENGTH;
-
 public class DirectoryActivity extends ThreemaToolbarActivity implements ThreemaSearchView.OnQueryTextListener, MultiChoiceSelectorDialog.SelectorDialogClickListener {
 	private static final Logger logger = LoggingUtil.getThreemaLogger("DirectoryActivity");
 
@@ -107,6 +107,8 @@ public class DirectoryActivity extends ThreemaToolbarActivity implements Threema
 	private Menu menu;
 	private MenuItem searchMenuItem;
 	private LinearProgressIndicator progressIndicator;
+	private SearchBar searchBar;
+	private ThreemaSearchView searchView;
 
 	private List<WorkDirectoryCategory> categoryList = new ArrayList<>();
 	private final List<WorkDirectoryCategory> checkedCategories = new ArrayList<>();
@@ -126,34 +128,18 @@ public class DirectoryActivity extends ThreemaToolbarActivity implements Threema
 		}
 	};
 
-	final SearchView.OnQueryTextListener queryTextListener = new SearchView.OnQueryTextListener() {
-		@Override
-		public boolean onQueryTextChange(String newText) {
-			queryText = newText;
-			queryHandler.removeCallbacks(queryTask);
-			queryHandler.postDelayed(queryTask, QUERY_TIMEOUT);
-			return true;
-		}
-
-		@Override
-		public boolean onQueryTextSubmit(String query) {
-			return true;
-		}
-	};
-
 	@Override
 	public boolean onQueryTextSubmit(String query) {
-		// Do something
+		// Do nothing
 		return true;
 	}
 
-	@SuppressLint("StaticFieldLeak")
 	@Override
 	public boolean onQueryTextChange(String newText) {
+		showResultsLayout();
 		queryText = newText;
 		queryHandler.removeCallbacks(queryTask);
 		queryHandler.postDelayed(queryTask, QUERY_TIMEOUT);
-
 		return true;
 	}
 
@@ -166,16 +152,28 @@ public class DirectoryActivity extends ThreemaToolbarActivity implements Threema
 	protected boolean initActivity(Bundle savedInstanceState) {
 		if (!super.initActivity(savedInstanceState)) {
 			return false;
-		};
+		}
 
 		ActionBar actionBar = getSupportActionBar();
 		if (actionBar != null) {
-			actionBar.setDisplayHomeAsUpEnabled(true);
-			Toolbar toolbar = getToolbar();
-			if (toolbar != null) {
-				actionBar.setTitle(null);
-				toolbar.setTitle(R.string.directory_title);
-			}
+			searchBar = (SearchBar) getToolbar();
+			searchBar.setNavigationOnClickListener(v -> {
+				if (searchView != null) {
+					if (searchView.isIconified()) {
+						finish();
+					} else {
+						searchView.setIconified(true);
+					}
+				}
+			});
+			searchBar.setOnClickListener(v -> {
+				if (searchView != null) {
+					searchView.setIconified(false);
+				}
+			});
+			ConfigUtils.adjustSearchBarTextViewMargin(this, searchBar);
+
+			updateToolbarTitle(getString(R.string.directory_title));
 		}
 
 		try {
@@ -198,18 +196,20 @@ public class DirectoryActivity extends ThreemaToolbarActivity implements Threema
 		WorkOrganization workOrganization = preferenceService.getWorkOrganization();
 		if (workOrganization != null && !TestUtil.empty(workOrganization.getName())) {
 			logger.info("Organization: " + workOrganization.getName());
-			getToolbar().setTitle(workOrganization.getName());
+			updateToolbarTitle(workOrganization.getName());
 		}
 
 		sortByFirstName = preferenceService.isContactListSortingFirstName();
 
 		chipGroup = findViewById(R.id.chip_group);
+		chipGroup.getLayoutTransition().enableTransitionType(LayoutTransition.CHANGE_DISAPPEARING|LayoutTransition.CHANGE_APPEARING);
+
 		emptyTextView = findViewById(R.id.empty_text);
 		progressIndicator = findViewById(R.id.progress_bar);
 		progressIndicator.setVisibility(View.GONE);
 
-		categorySpanColor = ConfigUtils.getColorFromAttribute(this, R.attr.mention_background);
-		categorySpanTextColor = ConfigUtils.getColorFromAttribute(this, R.attr.mention_text_color);
+		categorySpanColor = getResources().getColor(R.color.mention_background);
+		categorySpanTextColor = ConfigUtils.getColorFromAttribute(this, R.attr.colorOnBackground);
 
 		recyclerView = this.findViewById(R.id.recycler);
 		recyclerView.setHasFixedSize(true);
@@ -257,8 +257,6 @@ public class DirectoryActivity extends ThreemaToolbarActivity implements Threema
 		});
 
 		recyclerView.setAdapter(directoryAdapter);
-
-		findViewById(R.id.search_container).setOnClickListener(v ->	showResultsLayout());
 		return true;
 	}
 
@@ -306,13 +304,29 @@ public class DirectoryActivity extends ThreemaToolbarActivity implements Threema
 
 		getMenuInflater().inflate(R.menu.activity_directory, menu);
 
-		searchMenuItem = menu.findItem(R.id.menu_search_directory);
+		searchMenuItem = menu.findItem(R.id.menu_action_search);
 		if (searchMenuItem != null) {
-			SearchView searchView = (SearchView) searchMenuItem.getActionView();
-			if (searchView != null) {
-				searchView.setQueryHint(getString(R.string.directory_search));
-				searchView.setOnQueryTextListener(queryTextListener);
-
+			this.searchView = (ThreemaSearchView) this.searchMenuItem.getActionView();
+			if (this.searchView != null) {
+				ConfigUtils.adjustSearchViewPadding(searchView);
+				this.searchView.setQueryHint(getString(R.string.directory_search));
+				this.searchView.setOnQueryTextListener(this);
+				if (this.searchBar != null) {
+					this.searchBar.post(() -> {
+						try {
+							int[] locationCategoryIcon = new int[2];
+							int[] locationTextView = new int[2];
+							searchBar.findViewById(R.id.menu_category).getLocationInWindow(locationCategoryIcon);
+							searchBar.getTextView().getLocationInWindow(locationTextView);
+							searchView.setMaxWidth(locationCategoryIcon[0] - locationTextView[0]);
+						} catch (Exception e) {
+							logger.debug("Unable to patch searchview");
+						}
+					});
+				}
+				this.searchMenuItem.expandActionView();
+			} else {
+				this.searchMenuItem.setVisible(false);
 			}
 		}
 
@@ -324,14 +338,11 @@ public class DirectoryActivity extends ThreemaToolbarActivity implements Threema
 
 	@Override
 	public boolean onOptionsItemSelected(MenuItem item) {
-		switch (item.getItemId()) {
-			case android.R.id.home:
-				this.finish();
-				return true;
-			case R.id.menu_category:
-				selectCategories();
-				break;
-
+		if (item.getItemId() == android.R.id.home) {
+			this.finish();
+			return true;
+		} else if (item.getItemId() == R.id.menu_category) {
+			selectCategories();
 		}
 		return super.onOptionsItemSelected(item);
 	}
@@ -342,7 +353,6 @@ public class DirectoryActivity extends ThreemaToolbarActivity implements Threema
 		intent.setData((Uri.parse("foobar://" + SystemClock.elapsedRealtime())));
 		IntentDataUtil.append(identity, intent);
 		startActivity(intent);
-		overridePendingTransition(R.anim.slide_in_right_short, R.anim.slide_out_left_short);
 	}
 
 	private void launchContact(final WorkDirectoryContact workDirectoryContact, final int position) {
@@ -411,7 +421,16 @@ public class DirectoryActivity extends ThreemaToolbarActivity implements Threema
 		int i = 0;
 		for (WorkDirectoryCategory category : categoryList) {
 			categoryNames[i] = category.getName();
-			categoryChecked[i] = checkedCategories.contains(category);
+
+			categoryChecked[i] = false;
+			if (category.id != null) {
+				for (WorkDirectoryCategory checkedCategory : checkedCategories) {
+					if (category.id.equals(checkedCategory.id)) {
+						categoryChecked[i] = true;
+						break;
+					}
+				}
+			}
 			i++;
 		}
 
@@ -428,28 +447,11 @@ public class DirectoryActivity extends ThreemaToolbarActivity implements Threema
 			if (!TextUtils.isEmpty(checkedCategory.name)) {
 				activeCategories++;
 
-				Chip chip = new Chip(this);
-				if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {
-					chip.setTextAppearance(R.style.TextAppearance_Chip_ChatNotice);
-				} else {
-					chip.setTextSize(14);
-				}
-
-				ColorStateList foregroundColor, backgroundColor;
-				if (ConfigUtils.getAppTheme(this) == ConfigUtils.THEME_DARK) {
-					foregroundColor = ColorStateList.valueOf(ConfigUtils.getColorFromAttribute(this, R.attr.textColorPrimary));
-					backgroundColor = ColorStateList.valueOf(ConfigUtils.getColorFromAttribute(this, R.attr.colorAccent));
-				} else {
-					foregroundColor = ColorStateList.valueOf(ConfigUtils.getColorFromAttribute(this, R.attr.colorAccent));
-					backgroundColor = foregroundColor.withAlpha(getResources().getInteger(R.integer.chip_alpha));
-				}
-
-				chip.setTextColor(foregroundColor);
-				chip.setChipBackgroundColor(backgroundColor);
+				Chip chip = (Chip) getLayoutInflater().inflate(
+					R.layout.chip_directory, null, false
+				);
 				chip.setText(checkedCategory.name);
-				chip.setCloseIconVisible(true);
 				chip.setTag(checkedCategory.id);
-				chip.setCloseIconTint(foregroundColor);
 				chip.setOnCloseIconClickListener(new View.OnClickListener() {
 					@Override
 					public void onClick(View v) {
@@ -465,6 +467,11 @@ public class DirectoryActivity extends ThreemaToolbarActivity implements Threema
 								}
 							}
 						}
+
+						if (checkedCategories.size() == 0) {
+							chipGroup.setVisibility(View.GONE);
+							showIntroLayout();
+						}
 					}
 				});
 
@@ -504,6 +511,13 @@ public class DirectoryActivity extends ThreemaToolbarActivity implements Threema
 		}
 	}
 
+	@MainThread
+	protected void updateToolbarTitle(String title) {
+		if (searchBar != null) {
+			searchBar.setHint(title);
+		}
+	}
+
 	@Override
 	public void onYes(String tag, boolean[] checkedItems) {
 		checkedCategories.clear();
diff --git a/app/src/main/java/ch/threema/app/activities/DisableBatteryOptimizationsActivity.java b/app/src/main/java/ch/threema/app/activities/DisableBatteryOptimizationsActivity.java
index d25cb183..95252373 100644
--- a/app/src/main/java/ch/threema/app/activities/DisableBatteryOptimizationsActivity.java
+++ b/app/src/main/java/ch/threema/app/activities/DisableBatteryOptimizationsActivity.java
@@ -35,19 +35,20 @@ import android.text.format.DateUtils;
 import android.view.Gravity;
 import android.widget.Toast;
 
-import org.slf4j.Logger;
-
 import androidx.annotation.NonNull;
 import androidx.annotation.Nullable;
 import androidx.annotation.StringRes;
+
+import org.slf4j.Logger;
+
 import ch.threema.app.BuildConfig;
 import ch.threema.app.R;
 import ch.threema.app.dialogs.GenericAlertDialog;
 import ch.threema.app.utils.ConfigUtils;
-import ch.threema.app.utils.RuntimeUtil;
 import ch.threema.base.utils.LoggingUtil;
 
 import static ch.threema.app.fragments.BackupDataFragment.REQUEST_ID_DISABLE_BATTERY_OPTIMIZATIONS;
+import static ch.threema.app.utils.PowermanagerUtil.isIgnoringBatteryOptimizations;
 
 /**
  * Guides user through the process of disabling battery optimization energy saving option.
@@ -92,7 +93,7 @@ public class DisableBatteryOptimizationsActivity extends ThreemaActivity impleme
 	protected void onCreate(@Nullable Bundle savedInstanceState) {
 		super.onCreate(savedInstanceState);
 
-		if (Build.VERSION.SDK_INT < Build.VERSION_CODES.M || isIgnoringBatteryOptimizations(this)) {
+		if (isIgnoringBatteryOptimizations(this)) {
 			setResult(RESULT_OK);
 			finish();
 			return;
@@ -100,7 +101,7 @@ public class DisableBatteryOptimizationsActivity extends ThreemaActivity impleme
 
 		Intent intent = getIntent();
 
-		if (ConfigUtils.getAppTheme(this) == ConfigUtils.THEME_DARK || intent.getBooleanExtra(EXTRA_WIZARD, false)) {
+		if (ConfigUtils.isTheDarkSide(this) || intent.getBooleanExtra(EXTRA_WIZARD, false)) {
 			setTheme(R.style.Theme_Threema_Translucent_Dark);
 		}
 
@@ -136,28 +137,6 @@ public class DisableBatteryOptimizationsActivity extends ThreemaActivity impleme
 		dialog.show(getSupportFragmentManager(), DIALOG_TAG_DISABLE_BATTERY_OPTIMIZATIONS);
 	}
 
-	/**
-	 * Try to find out whether battery optimizations are already disabled for our app.
-	 * If this fails (e.g. on devices older than Android M), `true` will be returned.
-	 */
-	public static boolean isIgnoringBatteryOptimizations(@NonNull Context context) {
-		// App is always whitelisted in unit tests
-		if (RuntimeUtil.isInTest()) {
-			return true;
-		}
-		if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {
-			final PowerManager powerManager = (PowerManager) context.getApplicationContext().getSystemService(POWER_SERVICE);
-			try {
-				return powerManager.isIgnoringBatteryOptimizations(context.getPackageName());
-			} catch (Exception e) {
-				logger.error("Exception while checking if battery optimization is disabled", e);
-				// don't care about buggy phones not implementing this API
-				return true;
-			}
-		}
-		return true;
-	}
-
 	@TargetApi(Build.VERSION_CODES.M)
 	@Override
 	public void onYes(String tag, Object data) {
diff --git a/app/src/main/java/ch/threema/app/activities/DistributionListAddActivity.java b/app/src/main/java/ch/threema/app/activities/DistributionListAddActivity.java
index 24feeea2..4b13345c 100644
--- a/app/src/main/java/ch/threema/app/activities/DistributionListAddActivity.java
+++ b/app/src/main/java/ch/threema/app/activities/DistributionListAddActivity.java
@@ -25,9 +25,10 @@ import android.content.Intent;
 import android.os.Bundle;
 import android.widget.Toast;
 
+import androidx.annotation.MainThread;
+
 import java.util.List;
 
-import androidx.annotation.MainThread;
 import ch.threema.app.R;
 import ch.threema.app.ThreemaApplication;
 import ch.threema.app.dialogs.TextEntryDialog;
@@ -95,8 +96,8 @@ public class DistributionListAddActivity extends MemberChooseActivity implements
 	}
 
 	@Override
-	protected boolean getAddNextButton() {
-		return true;
+	protected int getMode() {
+		return MODE_NEW_DISTRIBUTION_LIST;
 	}
 
 	@Override
diff --git a/app/src/main/java/ch/threema/app/activities/EditSendContactActivity.kt b/app/src/main/java/ch/threema/app/activities/EditSendContactActivity.kt
index 9e898cc7..e5d9a138 100644
--- a/app/src/main/java/ch/threema/app/activities/EditSendContactActivity.kt
+++ b/app/src/main/java/ch/threema/app/activities/EditSendContactActivity.kt
@@ -27,6 +27,7 @@ import android.content.Intent
 import android.content.res.Configuration.ORIENTATION_LANDSCAPE
 import android.content.res.Configuration.ORIENTATION_PORTRAIT
 import android.graphics.Rect
+import android.graphics.drawable.Drawable
 import android.net.Uri
 import android.os.Bundle
 import android.os.Handler
@@ -37,7 +38,6 @@ import android.view.ViewGroup
 import android.view.ViewTreeObserver
 import android.widget.EditText
 import android.widget.LinearLayout
-import android.widget.ProgressBar
 import androidx.annotation.IdRes
 import androidx.coordinatorlayout.widget.CoordinatorLayout
 import androidx.core.widget.NestedScrollView
@@ -46,13 +46,15 @@ import androidx.lifecycle.ViewModelProvider
 import ch.threema.app.R
 import ch.threema.app.mediaattacher.ContactEditViewModel
 import ch.threema.app.ui.VCardPropertyView
-import ch.threema.app.utils.ConfigUtils
 import ch.threema.app.utils.VCardExtractor
 import ch.threema.base.utils.LoggingUtil
+import com.google.android.material.appbar.AppBarLayout
 import com.google.android.material.appbar.MaterialToolbar
 import com.google.android.material.bottomsheet.BottomSheetBehavior
 import com.google.android.material.bottomsheet.BottomSheetBehavior.BottomSheetCallback
 import com.google.android.material.floatingactionbutton.FloatingActionButton
+import com.google.android.material.progressindicator.CircularProgressIndicator
+import com.google.android.material.shape.MaterialShapeDrawable
 import ezvcard.property.StructuredName
 
 private val logger = LoggingUtil.getThreemaLogger("EditSendContactActivity")
@@ -65,16 +67,18 @@ class EditSendContactActivity : ThreemaToolbarActivity() {
 
     private lateinit var viewModel: ContactEditViewModel
     private lateinit var toolbar: MaterialToolbar
+    private lateinit var appBarLayout: AppBarLayout
+    private lateinit var bottomSheet: View
     private lateinit var bottomSheetBehavior: BottomSheetBehavior<View>
 
     override fun onCreate(savedInstanceState: Bundle?) {
         super.onCreate(savedInstanceState)
 
         // set status bar color
-        window.statusBarColor = ConfigUtils.getColorFromAttribute(this, R.attr.attach_status_bar_color_collapsed)
+        window.statusBarColor = resources.getColor(R.color.attach_status_bar_color_collapsed)
 
         toolbar = findViewById(R.id.toolbar_contact)
-
+        appBarLayout = findViewById(R.id.appbar_layout_contact)
         viewModel = ViewModelProvider(this)[ContactEditViewModel::class.java]
 
         // Finish activity when chat activity (in "background") is clicked
@@ -82,7 +86,7 @@ class EditSendContactActivity : ThreemaToolbarActivity() {
                 .parent as ViewGroup).setOnClickListener { cancelAndFinish() }
 
         // Finish activity when bottom sheet gets hidden and adapt status bar color on expand/drag
-        val bottomSheet = findViewById<View>(R.id.bottom_sheet)
+        bottomSheet = findViewById<View>(R.id.bottom_sheet)
         bottomSheetBehavior = BottomSheetBehavior.from(bottomSheet).apply {
             addBottomSheetCallback(object : BottomSheetCallback() {
 
@@ -117,8 +121,7 @@ class EditSendContactActivity : ThreemaToolbarActivity() {
             override fun onGlobalLayout() {
                 rootCoordinator.viewTreeObserver.removeOnGlobalLayoutListener(this)
 
-                val topMargin = toolbar.height - resources.getDimensionPixelSize(R.dimen.drag_handle_height) -
-                        resources.getDimensionPixelSize(R.dimen.drag_handle_topbottom_margin)
+                val topMargin = toolbar.height - resources.getDimensionPixelSize(R.dimen.drag_handle_height)
 
                 val bottomSheetContainer = findViewById<CoordinatorLayout>(R.id.bottom_sheet_coordinator)
                 val bottomSheetContainerLayoutParams = bottomSheetContainer.layoutParams as CoordinatorLayout.LayoutParams
@@ -190,7 +193,7 @@ class EditSendContactActivity : ThreemaToolbarActivity() {
             }
 
             // Hide progress bar
-            findViewById<ProgressBar>(R.id.progress_bar_parsing).visibility = View.GONE
+            findViewById<CircularProgressIndicator>(R.id.progress_bar_parsing).visibility = View.GONE
 
             // Send the possibly modified VCard as file
             findViewById<FloatingActionButton>(R.id.send_contact).apply {
@@ -219,16 +222,21 @@ class EditSendContactActivity : ThreemaToolbarActivity() {
      * Shows the toolbar and adapts the status bar color.
      */
     private fun onBottomSheetExpand() {
-        toolbar.animation?.cancel()
-        toolbar.alpha = 0f
-        toolbar.visibility = View.VISIBLE
-        toolbar.animate().alpha(1f).setDuration(100).setListener(object : AnimatorListenerAdapter() {
+        appBarLayout.animation?.cancel()
+        appBarLayout.alpha = 0f
+        appBarLayout.visibility = View.VISIBLE
+        appBarLayout.animate().alpha(1f).setDuration(100).setListener(object : AnimatorListenerAdapter() {
             override fun onAnimationEnd(animation: Animator) {
-                toolbar.visibility = View.VISIBLE
+                appBarLayout.visibility = View.VISIBLE
             }
         })
-        toolbar.postDelayed({
-            window.statusBarColor = ConfigUtils.getColorFromAttribute(this@EditSendContactActivity, R.attr.attach_status_bar_color_expanded)
+        appBarLayout.postDelayed({
+            val background: Drawable = bottomSheet.getBackground()
+            if (background is MaterialShapeDrawable) {
+                window.statusBarColor = background.resolvedTintColor
+            } else {
+                window.statusBarColor = resources.getColor(R.color.attach_status_bar_color_expanded)
+            }
         }, 100)
     }
 
@@ -236,17 +244,17 @@ class EditSendContactActivity : ThreemaToolbarActivity() {
      * Hides the toolbar and adapts the status bar color.
      */
     private fun onBottomSheetCollapse() {
-        toolbar.animation?.cancel()
-        toolbar.alpha = 1f
-        toolbar.animate().alpha(0f).setDuration(100).setListener(object : AnimatorListenerAdapter() {
+        appBarLayout.animation?.cancel()
+        appBarLayout.alpha = 1f
+        appBarLayout.animate().alpha(0f).setDuration(100).setListener(object : AnimatorListenerAdapter() {
             override fun onAnimationStart(animation: Animator) {}
             override fun onAnimationEnd(animation: Animator) {
-                toolbar.visibility = View.INVISIBLE
-                window.statusBarColor = ConfigUtils.getColorFromAttribute(this@EditSendContactActivity, R.attr.attach_status_bar_color_collapsed)
+                appBarLayout.visibility = View.INVISIBLE
+                window.statusBarColor = resources.getColor(R.color.attach_status_bar_color_collapsed)
             }
 
             override fun onAnimationCancel(animation: Animator) {
-                window.statusBarColor = ConfigUtils.getColorFromAttribute(this@EditSendContactActivity, R.attr.attach_status_bar_color_collapsed)
+                window.statusBarColor = resources.getColor(R.color.attach_status_bar_color_collapsed)
             }
 
             override fun onAnimationRepeat(animation: Animator) {}
diff --git a/app/src/main/java/ch/threema/app/activities/EnterSerialActivity.java b/app/src/main/java/ch/threema/app/activities/EnterSerialActivity.java
index 6b62826f..9724d695 100644
--- a/app/src/main/java/ch/threema/app/activities/EnterSerialActivity.java
+++ b/app/src/main/java/ch/threema/app/activities/EnterSerialActivity.java
@@ -37,13 +37,14 @@ import android.view.KeyEvent;
 import android.view.View;
 import android.widget.Button;
 import android.widget.EditText;
-import android.widget.ImageView;
 import android.widget.TextView;
 import android.widget.Toast;
 
 import androidx.annotation.NonNull;
 import androidx.core.text.HtmlCompat;
 
+import com.google.android.material.button.MaterialButton;
+
 import org.slf4j.Logger;
 
 import ch.threema.app.BuildConfig;
@@ -76,7 +77,7 @@ public class EnterSerialActivity extends ThreemaActivity {
 	private static final String DIALOG_TAG_CHECKING = "check";
 	private TextView stateTextView, privateExplainText = null;
 	private EditText licenseKeyOrUsernameText, passwordText, serverText;
-	private ImageView unlockButton;
+	private MaterialButton unlockButton;
 	private Button loginButton;
 	private LicenseService licenseService;
 	private PreferenceService preferenceService;
diff --git a/app/src/main/java/ch/threema/app/activities/ExportIDActivity.java b/app/src/main/java/ch/threema/app/activities/ExportIDActivity.java
index 4bc9df8b..2f8016b8 100644
--- a/app/src/main/java/ch/threema/app/activities/ExportIDActivity.java
+++ b/app/src/main/java/ch/threema/app/activities/ExportIDActivity.java
@@ -37,7 +37,6 @@ import ch.threema.app.dialogs.PasswordEntryDialog;
 import ch.threema.app.managers.ServiceManager;
 import ch.threema.app.services.PreferenceService;
 import ch.threema.app.services.UserService;
-import ch.threema.app.utils.ConfigUtils;
 import ch.threema.app.utils.DialogUtil;
 import ch.threema.app.utils.RuntimeUtil;
 import ch.threema.base.ThreemaException;
@@ -56,10 +55,6 @@ public class ExportIDActivity extends AppCompatActivity implements PasswordEntry
 	public void onCreate(Bundle savedInstanceState) {
 		super.onCreate(savedInstanceState);
 
-		if (ConfigUtils.getAppTheme(this) == ConfigUtils.THEME_DARK) {
-			setTheme(R.style.Theme_Threema_Translucent_Dark);
-		}
-
 		final ServiceManager serviceManager = ThreemaApplication.getServiceManager();
 		preferenceService = serviceManager.getPreferenceService();
 		userService = serviceManager.getUserService();
diff --git a/app/src/main/java/ch/threema/app/activities/ExportIDResultActivity.java b/app/src/main/java/ch/threema/app/activities/ExportIDResultActivity.java
index f460afd9..a12c649a 100644
--- a/app/src/main/java/ch/threema/app/activities/ExportIDResultActivity.java
+++ b/app/src/main/java/ch/threema/app/activities/ExportIDResultActivity.java
@@ -40,13 +40,15 @@ import android.widget.ImageView;
 import android.widget.ScrollView;
 import android.widget.TextView;
 
-import java.io.ByteArrayOutputStream;
-
 import androidx.annotation.NonNull;
 import androidx.appcompat.app.ActionBar;
-import androidx.appcompat.widget.Toolbar;
 import androidx.core.app.NavUtils;
 import androidx.lifecycle.LifecycleOwner;
+
+import com.google.android.material.appbar.MaterialToolbar;
+
+import java.io.ByteArrayOutputStream;
+
 import ch.threema.app.R;
 import ch.threema.app.ThreemaApplication;
 import ch.threema.app.dialogs.GenericAlertDialog;
@@ -62,7 +64,7 @@ public class ExportIDResultActivity extends ThreemaToolbarActivity implements Ge
 
 	private Bitmap qrcodeBitmap;
 	private WebView printWebView;
-	private Toolbar toolbar;
+	private MaterialToolbar toolbar;
 	private TooltipPopup tooltipPopup;
 
 	private String identity, backupData;
@@ -81,9 +83,7 @@ public class ExportIDResultActivity extends ThreemaToolbarActivity implements Ge
 
 		actionBar.setDisplayHomeAsUpEnabled(true);
 		actionBar.setTitle("");
-		if (ConfigUtils.getAppTheme(this) != ConfigUtils.THEME_DARK) {
-			actionBar.setHomeAsUpIndicator(R.drawable.ic_check);
-		}
+		actionBar.setHomeAsUpIndicator(R.drawable.ic_check);
 
 		this.backupData = this.getIntent().getStringExtra(ThreemaApplication.INTENT_DATA_ID_BACKUP);
 		this.identity = this.getIntent().getStringExtra(ThreemaApplication.INTENT_DATA_CONTACT);
@@ -114,14 +114,25 @@ public class ExportIDResultActivity extends ThreemaToolbarActivity implements Ge
 		Bitmap bmpScaled = Bitmap.createScaledBitmap(qrcodeBitmap, px, px, false);
 		bmpScaled.setDensity(Bitmap.DENSITY_NONE);
 		imageView.setImageBitmap(bmpScaled);
+		if (ConfigUtils.isTheDarkSide(this)) {
+			ConfigUtils.invertColors(imageView);
+		}
+
 		imageView.setOnClickListener(v -> new QRCodePopup(ExportIDResultActivity.this, getWindow().getDecorView(), ExportIDResultActivity.this).show(v, backupData, QRCodeServiceImpl.QR_TYPE_ID_EXPORT));
 	}
 
 	private void showTooltip() {
 		if (!preferenceService.getIsExportIdTooltipShown()) {
 			getToolbar().postDelayed(() -> {
-				tooltipPopup = new TooltipPopup(this, R.string.preferences__tooltip_export_id_shown, R.layout.popup_tooltip_top_right, this);
-				tooltipPopup.show(this, getToolbar(), getString(R.string.tooltip_export_id), TooltipPopup.ALIGN_BELOW_ANCHOR_ARROW_RIGHT, 5000);
+
+				View menuItemView = findViewById(R.id.menu_backup_share);
+				int[] location = new int[2];
+				menuItemView.getLocationOnScreen(location);
+				location[0] += menuItemView.getWidth() / 2;
+				location[1] += menuItemView.getHeight();
+
+				tooltipPopup = new TooltipPopup(this, R.string.preferences__tooltip_export_id_shown, this);
+				tooltipPopup.show(this, menuItemView, getString(R.string.tooltip_export_id), TooltipPopup.ALIGN_BELOW_ANCHOR_ARROW_RIGHT, location, 5000);
 			}, 1000);
 		}
 	}
@@ -207,16 +218,12 @@ public class ExportIDResultActivity extends ThreemaToolbarActivity implements Ge
 
 	@Override
 	public boolean onOptionsItemSelected(MenuItem item) {
-		switch (item.getItemId()) {
-			case android.R.id.home:
-				done();
-				return true;
-			case R.id.menu_print:
-				printBitmap(qrcodeBitmap);
-				break;
-			case R.id.menu_backup_share:
-				shareId();
-				break;
+		if (item.getItemId() == android.R.id.home) {
+			done();
+		} else if (item.getItemId() == R.id.menu_print) {
+			printBitmap(qrcodeBitmap);
+		} else if (item.getItemId() == R.id.menu_backup_share) {
+			shareId();
 		}
 		return super.onOptionsItemSelected(item);
 	}
diff --git a/app/src/main/java/ch/threema/app/activities/GroupAddActivity.java b/app/src/main/java/ch/threema/app/activities/GroupAddActivity.java
index ac2ef193..7d0b6423 100644
--- a/app/src/main/java/ch/threema/app/activities/GroupAddActivity.java
+++ b/app/src/main/java/ch/threema/app/activities/GroupAddActivity.java
@@ -25,12 +25,13 @@ import android.content.Intent;
 import android.os.Bundle;
 import android.widget.Toast;
 
+import androidx.annotation.NonNull;
+
 import java.util.ArrayList;
 import java.util.Arrays;
 import java.util.Collections;
 import java.util.List;
 
-import androidx.annotation.NonNull;
 import ch.threema.app.BuildConfig;
 import ch.threema.app.R;
 import ch.threema.app.ThreemaApplication;
@@ -81,8 +82,8 @@ public class GroupAddActivity extends MemberChooseActivity implements GenericAle
 	}
 
 	@Override
-	protected boolean getAddNextButton() {
-		return true;
+	protected int getMode() {
+		return appendMembers ? MODE_ADD_TO_GROUP : MODE_NEW_GROUP;
 	}
 
 	@Override
@@ -113,7 +114,7 @@ public class GroupAddActivity extends MemberChooseActivity implements GenericAle
 		initList();
 
 		if (!appendMembers) {
-			ShowOnceDialog.newInstance(R.string.title_select_contacts, R.string.note_group_howto ).show(getSupportFragmentManager(), DIALOG_TAG_NOTE_GROUP_HOWTO);
+			ShowOnceDialog.newInstance(R.string.title_addgroup, R.string.note_group_howto, 0).show(getSupportFragmentManager(), DIALOG_TAG_NOTE_GROUP_HOWTO);
 		}
 	}
 
@@ -132,7 +133,7 @@ public class GroupAddActivity extends MemberChooseActivity implements GenericAle
 			createOrUpdateGroup(Collections.emptyList());
 		} else {
 			// Adding group members to new group (none selected)
-			GenericAlertDialog.newInstance(R.string.title_addgroup, R.string.group_create_no_members, R.string.yes, R.string.no).show(getSupportFragmentManager(), DIALOG_TAG_NO_MEMBERS);
+			GenericAlertDialog.newInstance(R.string.title_addgroup, R.string.group_create_no_members, R.string.yes, R.string.no, 0).show(getSupportFragmentManager(), DIALOG_TAG_NO_MEMBERS);
 		}
 	}
 
@@ -155,19 +156,15 @@ public class GroupAddActivity extends MemberChooseActivity implements GenericAle
 	@Override
 	public void onActivityResult(int requestCode, int resultCode, Intent data) {
 		super.onActivityResult(requestCode, resultCode, data);
-		switch (requestCode) {
-			case ThreemaActivity.ACTIVITY_ID_GROUP_ADD:
-				if (resultCode != RESULT_CANCELED) {
-					finish();
-				}
-				break;
-			default:
-				break;
+		if (requestCode == ThreemaActivity.ACTIVITY_ID_GROUP_ADD) {
+			if (resultCode != RESULT_CANCELED) {
+				finish();
+			}
 		}
 	}
 
 	@Override
-	protected void onSaveInstanceState(Bundle outState) {
+	public void onSaveInstanceState(@NonNull Bundle outState) {
 		super.onSaveInstanceState(outState);
 		outState.putStringArrayList(BUNDLE_EXISTING_MEMBERS, this.excludedIdentities);
 	}
diff --git a/app/src/main/java/ch/threema/app/activities/GroupDetailActivity.java b/app/src/main/java/ch/threema/app/activities/GroupDetailActivity.java
index 02f1900a..753d64f9 100644
--- a/app/src/main/java/ch/threema/app/activities/GroupDetailActivity.java
+++ b/app/src/main/java/ch/threema/app/activities/GroupDetailActivity.java
@@ -21,7 +21,9 @@
 
 package ch.threema.app.activities;
 
-import android.Manifest;
+import static ch.threema.app.adapters.GroupDetailAdapter.GroupDescState.COLLAPSED;
+import static ch.threema.app.adapters.GroupDetailAdapter.GroupDescState.NONE;
+
 import android.annotation.SuppressLint;
 import android.app.Activity;
 import android.content.Intent;
@@ -33,20 +35,17 @@ import android.os.AsyncTask;
 import android.os.Bundle;
 import android.text.Editable;
 import android.text.Html;
+import android.text.TextWatcher;
 import android.view.Menu;
 import android.view.MenuItem;
 import android.view.View;
 import android.view.WindowManager;
-import android.widget.LinearLayout;
 import android.widget.Toast;
 
-import androidx.activity.result.ActivityResultLauncher;
-import androidx.activity.result.contract.ActivityResultContracts;
 import androidx.annotation.ColorInt;
 import androidx.annotation.NonNull;
 import androidx.appcompat.app.ActionBar;
 import androidx.appcompat.view.menu.MenuBuilder;
-import androidx.appcompat.widget.Toolbar;
 import androidx.core.app.ActivityCompat;
 import androidx.core.app.ActivityOptionsCompat;
 import androidx.fragment.app.Fragment;
@@ -57,6 +56,7 @@ import androidx.recyclerview.widget.RecyclerView;
 
 import com.google.android.material.appbar.AppBarLayout;
 import com.google.android.material.appbar.CollapsingToolbarLayout;
+import com.google.android.material.appbar.MaterialToolbar;
 import com.google.android.material.floatingactionbutton.ExtendedFloatingActionButton;
 
 import org.slf4j.Logger;
@@ -64,10 +64,10 @@ import org.slf4j.Logger;
 import java.io.File;
 import java.util.ArrayList;
 import java.util.Collections;
+import java.util.Comparator;
 import java.util.Date;
 import java.util.List;
 
-import ch.threema.app.BuildConfig;
 import ch.threema.app.R;
 import ch.threema.app.ThreemaApplication;
 import ch.threema.app.adapters.GroupDetailAdapter;
@@ -113,9 +113,6 @@ import ch.threema.base.utils.LoggingUtil;
 import ch.threema.storage.models.ContactModel;
 import ch.threema.storage.models.GroupModel;
 
-import static ch.threema.app.adapters.GroupDetailAdapter.GroupDescState.COLLAPSED;
-import static ch.threema.app.adapters.GroupDetailAdapter.GroupDescState.NONE;
-
 public class GroupDetailActivity extends GroupEditActivity implements SelectorDialog.SelectorDialogClickListener,
 	GenericAlertDialog.DialogClickListener,
 	TextEntryDialog.TextEntryDialogClickListener,
@@ -143,8 +140,6 @@ public class GroupDetailActivity extends GroupEditActivity implements SelectorDi
 	private static final int SELECTOR_OPTION_CALL = 2;
 	private static final int SELECTOR_OPTION_REMOVE = 3;
 
-	// services
-	private LicenseService licenseService;
 	private GroupInviteService groupInviteService;
 	private DeviceService deviceService;
 	private IdListService blackListIdentityService;
@@ -155,22 +150,14 @@ public class GroupDetailActivity extends GroupEditActivity implements SelectorDi
 	private GroupDetailAdapter groupDetailAdapter;
 
 	private EmojiEditText groupNameEditText;
-	private CollapsingToolbarLayout collapsingToolbar;
 	private ResumePauseHandler resumePauseHandler;
 	private AvatarEditView avatarEditView;
 	private ExtendedFloatingActionButton floatingActionButton;
 
-	private final ActivityResultLauncher<String> readPhoneStatePermissionLauncher = registerForActivityResult(new ActivityResultContracts.RequestPermission(), isGranted -> {
-		if (!isGranted && !ActivityCompat.shouldShowRequestPermissionRationale(this, Manifest.permission.READ_PHONE_STATE)) {
-			ConfigUtils.showPermissionRationale(this, findViewById(R.id.main_content), R.string.read_phone_state_short_message);
-		}
-		// Note that the call cannot be started from here if the permission has just been granted.
-	});
-
 	private String myIdentity;
 	private int operationMode;
 	private int groupId;
-	private boolean hasMemberChanges = false;
+	private boolean hasMemberChanges = false, hasAvatarChanges = false;
 
 	private final ResumePauseHandler.RunIfActive runIfActiveUpdate = new ResumePauseHandler.RunIfActive() {
 		@Override
@@ -188,6 +175,8 @@ public class GroupDetailActivity extends GroupEditActivity implements SelectorDi
 		public void onAvatarSet(File avatarFile1) {
 			groupDetailViewModel.setAvatarFile(avatarFile1);
 			groupDetailViewModel.setIsAvatarRemoved(false);
+			hasAvatarChanges = true;
+			updateFloatingActionButton();
 		}
 
 		@Override
@@ -195,6 +184,8 @@ public class GroupDetailActivity extends GroupEditActivity implements SelectorDi
 			groupDetailViewModel.setAvatarFile(null);
 			groupDetailViewModel.setIsAvatarRemoved(true);
 			avatarEditView.setDefaultAvatar(null, groupModel);
+			hasAvatarChanges = true;
+			updateFloatingActionButton();
 		}
 	};
 
@@ -269,7 +260,7 @@ public class GroupDetailActivity extends GroupEditActivity implements SelectorDi
 		@Override
 		public void onMemberLeave(GroupModel group, String identity, int previousMemberCount) {
 			if (identity.equals(myIdentity)) {
-				finishUp();
+				finish();
 			} else {
 				resumePauseHandler.runOnActive(RUN_ON_ACTIVE_RELOAD, runIfActiveUpdate);
 			}
@@ -278,7 +269,7 @@ public class GroupDetailActivity extends GroupEditActivity implements SelectorDi
 		@Override
 		public void onMemberKicked(GroupModel group, String identity, int previousMemberCount) {
 			if (identity.equals(myIdentity)) {
-				finishUp();
+				finish();
 			} else {
 				resumePauseHandler.runOnActive(RUN_ON_ACTIVE_RELOAD, runIfActiveUpdate);
 			}
@@ -303,7 +294,7 @@ public class GroupDetailActivity extends GroupEditActivity implements SelectorDi
 
 		final ActionBar actionBar = getSupportActionBar();
 		if (actionBar == null) {
-			finishUp();
+			finish();
 			return;
 		}
 
@@ -312,35 +303,36 @@ public class GroupDetailActivity extends GroupEditActivity implements SelectorDi
 		this.resumePauseHandler = ResumePauseHandler.getByActivity(this, this);
 		this.groupDetailViewModel = new ViewModelProvider(this).get(GroupDetailViewModel.class);
 
-		final Toolbar toolbar = findViewById(R.id.toolbar);
-		LinearLayout doneButton = toolbar.findViewById(R.id.action_done);
+		final MaterialToolbar toolbar = findViewById(R.id.toolbar);
 		this.avatarEditView = findViewById(R.id.avatar_edit_view);
-		this.collapsingToolbar = findViewById(R.id.collapsing_toolbar);
+		CollapsingToolbarLayout collapsingToolbar = findViewById(R.id.collapsing_toolbar);
 		this.floatingActionButton = findViewById(R.id.floating);
 		RecyclerView groupDetailRecyclerView = findViewById(R.id.group_members_list);
-		this.collapsingToolbar.setTitle(" ");
+		collapsingToolbar.setTitle(" ");
 		this.groupNameEditText = findViewById(R.id.group_title);
 
+		// services
+		LicenseService<?> licenseService;
 		try {
 			this.deviceService = serviceManager.getDeviceService();
 			this.blackListIdentityService = serviceManager.getBlackListService();
-			this.licenseService = serviceManager.getLicenseService();
+			licenseService = serviceManager.getLicenseService();
 			this.groupInviteService = serviceManager.getGroupInviteService();
 			this.groupCallManager = serviceManager.getGroupCallManager();
 		} catch (ThreemaException e) {
 			logger.error("Exception, could not get required services", e);
-			finishUp();
+			finish();
 			return;
 		}
 
-		if (this.deviceService == null || this.blackListIdentityService == null || this.licenseService == null) {
-			finishUp();
+		if (this.deviceService == null || this.blackListIdentityService == null || licenseService == null) {
+			finish();
 			return;
 		}
 
 		groupId = getIntent().getIntExtra(ThreemaApplication.INTENT_DATA_GROUP, 0);
 		if (this.groupId == 0) {
-			finishUp();
+			finish();
 		}
 		this.groupModel = groupService.getById(this.groupId);
 
@@ -387,28 +379,41 @@ public class GroupDetailActivity extends GroupEditActivity implements SelectorDi
 
 		this.sortGroupMembers();
 		setTitle();
+		setHasMemberChanges(false);
 
 		if (this.groupService.isGroupOwner(this.groupModel)) {
 			operationMode = MODE_EDIT;
-			doneButton.setOnClickListener(v -> saveGroupSettings());
+			actionBar.setHomeButtonEnabled(false);
+			actionBar.setDisplayHomeAsUpEnabled(true);
+
 			floatingActionButton.setOnClickListener(v -> {
-				Intent intent = new Intent(GroupDetailActivity.this, GroupAddActivity.class);
-				IntentDataUtil.append(groupModel, intent);
-				IntentDataUtil.append(groupDetailViewModel.getGroupContacts(), intent);
-				startActivityForResult(intent, ThreemaActivity.ACTIVITY_ID_GROUP_ADD);
+				saveGroupSettings();
 			});
 			groupNameEditText.setMaxByteSize(GroupModel.GROUP_NAME_MAX_LENGTH_BYTES);
+			groupNameEditText.addTextChangedListener(new TextWatcher() {
+				@Override
+				public void beforeTextChanged(CharSequence s, int start, int count, int after) {}
+
+				@Override
+				public void onTextChanged(CharSequence s, int start, int before, int count) {}
+
+				@Override
+				public void afterTextChanged(Editable s) {
+					updateFloatingActionButton();
+				}
+			});
 		} else {
 			operationMode = MODE_READONLY;
-			doneButton.setVisibility(View.GONE);
+			actionBar.setHomeButtonEnabled(false);
+			actionBar.setDisplayHomeAsUpEnabled(true);
 
 			groupNameEditText.setFocusable(false);
 			groupNameEditText.setClickable(false);
 			groupNameEditText.setFocusableInTouchMode(false);
 			groupNameEditText.setBackground(null);
+			groupNameEditText.setPadding(0, 0, 0, 0);
 
-			floatingActionButton.hide();
-			actionBar.setDisplayHomeAsUpEnabled(true);
+			floatingActionButton.setVisibility(View.GONE);
 		}
 
 		groupDetailRecyclerView.setLayoutManager(new LinearLayoutManager(this));
@@ -426,12 +431,9 @@ public class GroupDetailActivity extends GroupEditActivity implements SelectorDi
 
 		groupDetailRecyclerView.setAdapter(this.groupDetailAdapter);
 
-		final Observer<List<ContactModel>> groupMemberObserver = new Observer<List<ContactModel>>() {
-			@Override
-			public void onChanged(List<ContactModel> groupMembers) {
-				// Update the UI
-				groupDetailAdapter.setContactModels(groupMembers);
-			}
+		final Observer<List<ContactModel>> groupMemberObserver = groupMembers -> {
+			// Update the UI
+			groupDetailAdapter.setContactModels(groupMembers);
 		};
 
 		// Observe the LiveData, passing in this activity as the LifecycleOwner and the observer.
@@ -487,19 +489,40 @@ public class GroupDetailActivity extends GroupEditActivity implements SelectorDi
 	private void sortGroupMembers() {
 		final boolean isSortingFirstName = preferenceService.isContactListSortingFirstName();
 		List<ContactModel> contactModels = groupDetailViewModel.getGroupContacts();
-		Collections.sort(contactModels, (model1, model2) -> ContactUtil.getSafeNameString(model1, isSortingFirstName).compareTo(
-			ContactUtil.getSafeNameString(model2, isSortingFirstName)
-		));
+		Collections.sort(contactModels, new Comparator<ContactModel>() {
+			@Override
+			public int compare(ContactModel model1, ContactModel model2) {
+				return ContactUtil.getSafeNameString(model1, isSortingFirstName).compareTo(
+					ContactUtil.getSafeNameString(model2, isSortingFirstName)
+				);
+			}
+		});
+
+		if (contactModels.size() > 1 && groupModel.getCreatorIdentity() != null) {
+			for (ContactModel currentMember : contactModels) {
+				if (groupModel.getCreatorIdentity().equals(currentMember.getIdentity())) {
+					contactModels.remove(currentMember);
+					contactModels.add(0, currentMember);
+					break;
+				}
+			}
+		}
+
 		groupDetailViewModel.setGroupContacts(contactModels);
 	}
 
 	private void removeMemberFromGroup(final ContactModel contactModel) {
 		if (contactModel != null) {
 			this.groupDetailViewModel.removeGroupContact(contactModel);
-			this.hasMemberChanges = true;
+			setHasMemberChanges(true);
 		}
 	}
 
+	private void setHasMemberChanges(boolean hasChanges) {
+		this.hasMemberChanges = hasChanges;
+		updateFloatingActionButton();
+	}
+
 	@Override
 	public void onPause() {
 		super.onPause();
@@ -571,14 +594,13 @@ public class GroupDetailActivity extends GroupEditActivity implements SelectorDi
 	public boolean onOptionsItemSelected(MenuItem item) {
 		int itemId = item.getItemId();
 		if (itemId == android.R.id.home) {
-			finishUp();
+			onBackPressed();
 			return true;
 		}
 		else if (itemId == R.id.menu_group_links_manage) {
 			Intent groupLinkOverviewIntent = new Intent(this, GroupLinkOverviewActivity.class);
 			groupLinkOverviewIntent.putExtra(ThreemaApplication.INTENT_DATA_GROUP, groupId);
 			startActivityForResult(groupLinkOverviewIntent, ThreemaActivity.ACTIVITY_ID_MANAGE_GROUP_LINKS);
-
 		}
 		else if (itemId == R.id.action_send_message) {
 			if (groupModel != null) {
@@ -632,7 +654,7 @@ public class GroupDetailActivity extends GroupEditActivity implements SelectorDi
 	}
 
 	private void leaveGroupAndQuit() {
-		new LeaveGroupAsyncTask(groupModel, groupService, this, null, this::finishUp).execute();
+		new LeaveGroupAsyncTask(groupModel, groupService, this, null, this::finish).execute();
 	}
 
 	private void deleteGroupAndQuit() {
@@ -681,7 +703,7 @@ public class GroupDetailActivity extends GroupEditActivity implements SelectorDi
 					intent.setFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP);
 					intent.putExtra(ThreemaApplication.INTENT_DATA_GROUP, newModel.getId());
 					startActivity(intent);
-					finishUp();
+					finish();
 				} else {
 					Toast.makeText(GroupDetailActivity.this, getString(R.string.error_creating_group) + ": " + getString(R.string.internet_connection_required), Toast.LENGTH_LONG).show();
 				}
@@ -696,6 +718,13 @@ public class GroupDetailActivity extends GroupEditActivity implements SelectorDi
 		startActivity(intent);
 	}
 
+	private void addNewMembers() {
+		Intent intent = new Intent(GroupDetailActivity.this, GroupAddActivity.class);
+		IntentDataUtil.append(groupModel, intent);
+		IntentDataUtil.append(groupDetailViewModel.getGroupContacts(), intent);
+		startActivityForResult(intent, ThreemaActivity.ACTIVITY_ID_GROUP_ADD);
+	}
+
 	private void syncGroup() {
 		if(this.groupService != null) {
 			GenericProgressDialog.newInstance(R.string.resync_group, R.string.please_wait).show(getSupportFragmentManager(), DIALOG_TAG_RESYNC_GROUP);
@@ -747,7 +776,7 @@ public class GroupDetailActivity extends GroupEditActivity implements SelectorDi
 				}
 
 				@NonNull String newGroupName = groupDetailViewModel.getGroupName() != null ?
-					groupDetailViewModel.getGroupName() : "";
+					groupDetailViewModel.getGroupName().trim() : "";
 				@NonNull String oldGroupName = groupModel.getName() != null ?
 					groupModel.getName() : "";
 
@@ -775,7 +804,7 @@ public class GroupDetailActivity extends GroupEditActivity implements SelectorDi
 				DialogUtil.dismissDialog(getSupportFragmentManager(), DIALOG_TAG_UPDATE_GROUP, true);
 
 				if (newModel != null) {
-					finishUp();
+					finish();
 				} else {
 					SimpleStringAlertDialog.newInstance(R.string.updating_group, getString(R.string.error_creating_group) + ": " + getString(R.string.internet_connection_required)).show(getSupportFragmentManager(), "er");
 				}
@@ -790,7 +819,7 @@ public class GroupDetailActivity extends GroupEditActivity implements SelectorDi
 				// some users were added
 				groupDetailViewModel.addGroupContacts(IntentDataUtil.getContactIdentities(data));
 				sortGroupMembers();
-				this.hasMemberChanges = true;
+				setHasMemberChanges(true);
 			}
 			else if (this.groupService.isGroupOwner(this.groupModel) && requestCode == ThreemaActivity.ACTIVITY_ID_MANAGE_GROUP_LINKS) {
 				// make sure we reset the default link switch if the default link was deleted
@@ -835,13 +864,13 @@ public class GroupDetailActivity extends GroupEditActivity implements SelectorDi
 					break;
 				case SELECTOR_OPTION_CHAT:
 					showConversation(selectorInfo.contactModel.getIdentity());
-					finishUp();
+					finish();
 					break;
 				case SELECTOR_OPTION_REMOVE:
 					removeMemberFromGroup(selectorInfo.contactModel);
 					break;
 				case SELECTOR_OPTION_CALL:
-					VoipUtil.initiateCall(this, selectorInfo.contactModel, false, null, readPhoneStatePermissionLauncher);
+					VoipUtil.initiateCall(this, selectorInfo.contactModel, false, null);
 					break;
 				default:
 					break;
@@ -891,10 +920,6 @@ public class GroupDetailActivity extends GroupEditActivity implements SelectorDi
 		// do nothing
 	}
 
-
-	@Override
-	public void onNeutral(String tag) {}
-
 	@Override
 	public void onYes(String tag, Object data) {
 		switch(tag) {
@@ -927,14 +952,15 @@ public class GroupDetailActivity extends GroupEditActivity implements SelectorDi
 	public void onBackPressed() {
 		if (this.operationMode == MODE_EDIT && hasChanges()) {
 			GenericAlertDialog.newInstance(
-					R.string.save_changes,
+					R.string.leave,
 					R.string.save_group_changes,
 					R.string.yes,
 					R.string.no,
-				false)
+					R.string.cancel,
+				0)
 					.show(getSupportFragmentManager(), DIALOG_TAG_QUIT);
 		} else {
-			finishUp();
+			finish();
 		}
 	}
 
@@ -942,7 +968,7 @@ public class GroupDetailActivity extends GroupEditActivity implements SelectorDi
 	public void onNo(String tag, Object data) {
 		switch(tag) {
 			case DIALOG_TAG_QUIT:
-				finishUp();
+				finish();
 				break;
 			default:
 				break;
@@ -950,7 +976,7 @@ public class GroupDetailActivity extends GroupEditActivity implements SelectorDi
 	}
 
 	private boolean hasChanges() {
-		return hasMemberChanges || hasGroupNameChanges();
+		return hasMemberChanges || hasGroupNameChanges() || hasAvatarChanges;
 	}
 
 	private boolean hasGroupNameChanges() {
@@ -963,24 +989,21 @@ public class GroupDetailActivity extends GroupEditActivity implements SelectorDi
 	}
 
 	private void updateFloatingActionButton() {
-		if (this.floatingActionButton == null ||
-			this.groupService == null ||
+		if (this.groupService == null ||
 			this.groupDetailAdapter == null) {
-			logger.error("Exception, could not update floating actions button, required instances not available");
+			logger.error("Required instances not available");
 			return;
 		}
 
-		if (this.groupService.isGroupOwner(this.groupModel)) {
-			if (this.groupDetailAdapter.getItemCount() > BuildConfig.MAX_GROUP_SIZE) {
-				this.floatingActionButton.hide();
-			} else {
-				this.floatingActionButton.show();
-			}
+		if (this.floatingActionButton == null) {
+			return;
 		}
-	}
 
-	private void finishUp() {
-		finish();
+		if (this.groupService.isGroupOwner(this.groupModel) && hasChanges()) {
+			this.floatingActionButton.show();
+		} else {
+			this.floatingActionButton.hide();
+		}
 	}
 
 	private void navigateHome() {
@@ -1067,6 +1090,11 @@ public class GroupDetailActivity extends GroupEditActivity implements SelectorDi
 		showGroupDescEditDialog();
 	}
 
+	@Override
+	public void onAddMembersClick(View v) {
+		addNewMembers();
+	}
+
 	// hide keyboard on older devices after ok clicked when group description changed
 	public void hideKeyboard() {
 		getWindow().setSoftInputMode(WindowManager.LayoutParams.SOFT_INPUT_STATE_ALWAYS_HIDDEN);
diff --git a/app/src/main/java/ch/threema/app/activities/GroupEditActivity.java b/app/src/main/java/ch/threema/app/activities/GroupEditActivity.java
index 11aa4882..19314fe8 100644
--- a/app/src/main/java/ch/threema/app/activities/GroupEditActivity.java
+++ b/app/src/main/java/ch/threema/app/activities/GroupEditActivity.java
@@ -69,7 +69,7 @@ public abstract class GroupEditActivity extends ThreemaToolbarActivity {
 		final int inputType = InputType.TYPE_CLASS_TEXT | InputType.TYPE_TEXT_VARIATION_PERSON_NAME;
 		ContactEditDialog.newInstance(
 					R.string.edit_name,
-					R.string.name,
+					R.string.group_name,
 					-1,
 					inputType,
 					avatarFile,
diff --git a/app/src/main/java/ch/threema/app/activities/HomeActivity.java b/app/src/main/java/ch/threema/app/activities/HomeActivity.java
index e8a5c30d..9b6e213f 100644
--- a/app/src/main/java/ch/threema/app/activities/HomeActivity.java
+++ b/app/src/main/java/ch/threema/app/activities/HomeActivity.java
@@ -21,6 +21,9 @@
 
 package ch.threema.app.activities;
 
+import static ch.threema.app.services.ConversationTagServiceImpl.FIXED_TAG_UNREAD;
+import static ch.threema.app.utils.PowermanagerUtil.isIgnoringBatteryOptimizations;
+
 import android.annotation.SuppressLint;
 import android.app.Activity;
 import android.content.BroadcastReceiver;
@@ -35,6 +38,7 @@ import android.graphics.drawable.Drawable;
 import android.net.ConnectivityManager;
 import android.net.Uri;
 import android.os.AsyncTask;
+import android.os.Build;
 import android.os.Bundle;
 import android.os.Handler;
 import android.text.format.DateUtils;
@@ -42,8 +46,8 @@ import android.view.Menu;
 import android.view.MenuItem;
 import android.view.View;
 import android.view.ViewGroup;
+import android.view.Window;
 import android.widget.ImageView;
-import android.widget.LinearLayout;
 import android.widget.Toast;
 
 import androidx.annotation.AnyThread;
@@ -52,22 +56,22 @@ import androidx.annotation.Nullable;
 import androidx.annotation.UiThread;
 import androidx.appcompat.app.ActionBar;
 import androidx.appcompat.widget.AppCompatImageView;
-import androidx.appcompat.widget.Toolbar;
 import androidx.fragment.app.Fragment;
 import androidx.fragment.app.FragmentTransaction;
 import androidx.lifecycle.LifecycleOwner;
 import androidx.localbroadcastmanager.content.LocalBroadcastManager;
 
+import com.google.android.material.appbar.MaterialToolbar;
 import com.google.android.material.badge.BadgeDrawable;
 import com.google.android.material.bottomnavigation.BottomNavigationView;
+import com.google.android.material.shape.MaterialShapeDrawable;
 
 import org.slf4j.Logger;
 
 import java.io.File;
 import java.lang.ref.WeakReference;
-import java.util.ArrayList;
 import java.util.Date;
-import java.util.Iterator;
+import java.util.LinkedList;
 import java.util.List;
 import java.util.Objects;
 import java.util.concurrent.RejectedExecutionException;
@@ -132,7 +136,6 @@ import ch.threema.app.utils.ConnectionIndicatorUtil;
 import ch.threema.app.utils.DialogUtil;
 import ch.threema.app.utils.IntentDataUtil;
 import ch.threema.app.utils.RuntimeUtil;
-import ch.threema.app.utils.StateBitmapUtil;
 import ch.threema.app.utils.TestUtil;
 import ch.threema.app.voip.groupcall.GroupCallDescription;
 import ch.threema.app.voip.groupcall.GroupCallManager;
@@ -151,8 +154,6 @@ import ch.threema.storage.models.AbstractMessageModel;
 import ch.threema.storage.models.ContactModel;
 import ch.threema.storage.models.ConversationModel;
 
-import static ch.threema.app.services.ConversationTagServiceImpl.FIXED_TAG_UNREAD;
-
 public class HomeActivity extends ThreemaAppCompatActivity implements
 	SMSVerificationDialog.SMSVerificationDialogCallback,
 	GenericAlertDialog.DialogClickListener,
@@ -188,9 +189,9 @@ public class HomeActivity extends ThreemaAppCompatActivity implements
 
 	private ActionBar actionBar;
 	private boolean isLicenseCheckStarted = false, isInitialized = false, isWhatsNewShown = false, isUpdating = false;
-	private Toolbar toolbar;
+	private MaterialToolbar toolbar;
 	private View connectionIndicator;
-	private LinearLayout noticeLayout;
+	private View noticeSMSLayout;
 	OngoingCallNoticeView ongoingCallNotice;
 
 	private ServiceManager serviceManager;
@@ -202,7 +203,12 @@ public class HomeActivity extends ThreemaAppCompatActivity implements
 	private ConversationService conversationService;
 	private GroupCallManager groupCallManager;
 
-	private final ArrayList<AbstractMessageModel> unsentMessages = new ArrayList<>();
+	private enum UnsentMessageAction {
+		ADD,
+		REMOVE,
+	}
+
+	private final List<AbstractMessageModel> unsentMessages = new LinkedList<>();
 
 	private BroadcastReceiver checkLicenseBroadcastReceiver = null;
 	private final BroadcastReceiver currentCheckAppReceiver = new BroadcastReceiver() {
@@ -314,51 +320,51 @@ public class HomeActivity extends ThreemaAppCompatActivity implements
 
 	private final ConnectionStateListener connectionStateListener = (connectionState, address) -> updateConnectionIndicator(connectionState);
 
-	private void updateUnsentMessagesList(AbstractMessageModel modifiedMessageModel, boolean add) {
+	private void updateUnsentMessagesList(AbstractMessageModel modifiedMessageModel, UnsentMessageAction action) {
 		int numCurrentUnsent = unsentMessages.size();
 
 		synchronized (unsentMessages) {
 			String uid = modifiedMessageModel.getUid();
 
-			Iterator<AbstractMessageModel> iterator = unsentMessages.iterator();
-			while (iterator.hasNext()) {
-				AbstractMessageModel unsentMessage = iterator.next();
+			// Check whether the message model with the same uid is already in the list or not
+			AbstractMessageModel containedMessageModel = null;
+			for (AbstractMessageModel unsentMessage : unsentMessages) {
 				if (TestUtil.compare(unsentMessage.getUid(), uid)) {
-					iterator.remove();
+					containedMessageModel = unsentMessage;
+					break;
 				}
 			}
 
-			if (add) {
-				unsentMessages.add(modifiedMessageModel);
+			switch (action) {
+				case ADD:
+					// Only add the message model if it is not yet in the list
+					if (containedMessageModel == null) {
+						unsentMessages.add(modifiedMessageModel);
+					}
+					break;
+				case REMOVE:
+					// Remove message model if it is in the list
+					if (containedMessageModel != null) {
+						unsentMessages.remove(containedMessageModel);
+					}
+					break;
 			}
 
 			int numNewUnsent = unsentMessages.size();
 
-			if (notificationService != null && !(numCurrentUnsent == 0 && numNewUnsent == 0)) {
+			// Update the notification if there was a change
+			if (notificationService != null && numCurrentUnsent != numNewUnsent) {
 				notificationService.showUnsentMessageNotification(unsentMessages);
 			}
 		}
 	}
 
-	/**
-	 * Notify the user about the unsent message that are kept in {@link #unsentMessages} and also
-	 * the message passed as argument. The passed message is not kept in the unsent messages and
-	 * therefore is shown only once in a notification.
-	 *
-	 * @param msg the unsent message that should be shown in the notification
-	 */
-	private void notifyUnsentMessages(@NonNull AbstractMessageModel msg) {
-		List<AbstractMessageModel> allUnsentMessages = new ArrayList<>(unsentMessages);
-		allUnsentMessages.add(msg);
-		notificationService.showUnsentMessageNotification(allUnsentMessages);
-	}
-
 	private final SMSVerificationListener smsVerificationListener = new SMSVerificationListener() {
 		@Override
 		public void onVerified() {
 			RuntimeUtil.runOnUiThread(() -> {
-				if (noticeLayout != null) {
-					AnimationUtil.collapse(noticeLayout);
+				if (noticeSMSLayout != null) {
+					AnimationUtil.collapse(noticeSMSLayout);
 				}
 			});
 		}
@@ -366,8 +372,8 @@ public class HomeActivity extends ThreemaAppCompatActivity implements
 		@Override
 		public void onVerificationStarted() {
 			RuntimeUtil.runOnUiThread(() -> {
-				if (noticeLayout != null) {
-					AnimationUtil.expand(noticeLayout);
+				if (noticeSMSLayout != null) {
+					AnimationUtil.expand(noticeSMSLayout);
 				}
 			});
 		}
@@ -425,15 +431,11 @@ public class HomeActivity extends ThreemaAppCompatActivity implements
 
 					switch (modifiedMessageModel.getState()) {
 						case SENDFAILED:
-							updateUnsentMessagesList(modifiedMessageModel, true);
-							break;
 						case FS_KEY_MISMATCH:
-							// Only notify and don't keep in unsentMessages to prevent that the
-							// notification is shown every time a message is sent
-							notifyUnsentMessages(modifiedMessageModel);
+							updateUnsentMessagesList(modifiedMessageModel, UnsentMessageAction.ADD);
 							break;
 						default:
-							updateUnsentMessagesList(modifiedMessageModel, false);
+							updateUnsentMessagesList(modifiedMessageModel, UnsentMessageAction.REMOVE);
 							break;
 					}
 				}
@@ -442,13 +444,13 @@ public class HomeActivity extends ThreemaAppCompatActivity implements
 
 		@Override
 		public void onRemoved(AbstractMessageModel removedMessageModel) {
-			updateUnsentMessagesList(removedMessageModel, false);
+			updateUnsentMessagesList(removedMessageModel, UnsentMessageAction.REMOVE);
 		}
 
 		@Override
 		public void onRemoved(List<AbstractMessageModel> removedMessageModels) {
 			for (AbstractMessageModel removedMessageModel: removedMessageModels) {
-				updateUnsentMessagesList(removedMessageModel, false);
+				updateUnsentMessagesList(removedMessageModel, UnsentMessageAction.REMOVE);
 			}
 		}
 
@@ -456,6 +458,11 @@ public class HomeActivity extends ThreemaAppCompatActivity implements
 		public void onProgressChanged(AbstractMessageModel messageModel, int newProgress) {
 			//do nothing
 		}
+
+		@Override
+		public void onResendDismissed(@NonNull AbstractMessageModel messageModel) {
+			updateUnsentMessagesList(messageModel, UnsentMessageAction.REMOVE);
+		}
 	};
 
 	private final AppIconListener appIconListener = () -> RuntimeUtil.runOnUiThread(this::updateAppLogo);
@@ -518,7 +525,7 @@ public class HomeActivity extends ThreemaAppCompatActivity implements
 
 		AnimationUtil.setupTransitions(this.getApplicationContext(), getWindow());
 
-		ConfigUtils.configureActivityTheme(this);
+		ConfigUtils.configureSystemBars(this);
 
 		super.onCreate(savedInstanceState);
 
@@ -646,7 +653,7 @@ public class HomeActivity extends ThreemaAppCompatActivity implements
 						// To not show the same dialog twice, it is only shown if the previous version
 						// is prior to the first version that used this dialog.
 						// Use the version code of the first version where this dialog should be shown.
-						if (previous < 776) { // 776 => Threema v5.0
+						if (previous < 903) { // do not show to users of previous release candidate
 							Intent intent = new Intent(this, WhatsNewActivity.class);
 							startActivityForResult(intent, REQUEST_CODE_WHATSNEW);
 							overridePendingTransition(R.anim.abc_fade_in, R.anim.abc_fade_out);
@@ -675,7 +682,7 @@ public class HomeActivity extends ThreemaAppCompatActivity implements
 					threemaSafeService.storeMasterKey(masterkey);
 					preferenceService.setThreemaSafeServerInfo(mdmConfig.getServerInfo());
 					threemaSafeService.setEnabled(true);
-					threemaSafeService.uploadNow(HomeActivity.this, true);
+					threemaSafeService.uploadNow(true);
 				} else {
 					Toast.makeText(HomeActivity.this, R.string.safe_error_preparing, Toast.LENGTH_LONG).show();
 				}
@@ -934,9 +941,6 @@ public class HomeActivity extends ThreemaAppCompatActivity implements
 	private void initMainActivity(@Nullable Bundle savedInstanceState) {
 		final boolean isAppStart = savedInstanceState == null;
 
-		//refresh StateBitmapUtil
-		StateBitmapUtil.getInstance().refresh();
-
 		// licensing
 		checkApp();
 
@@ -976,9 +980,6 @@ public class HomeActivity extends ThreemaAppCompatActivity implements
 		//init custom icon
 		updateAppLogo();
 
-		// reset accent color
-		ConfigUtils.resetAccentColor(this);
-
 		actionBar.setDisplayShowTitleEnabled(false);
 		actionBar.setDisplayUseLogoEnabled(false);
 
@@ -1003,7 +1004,7 @@ public class HomeActivity extends ThreemaAppCompatActivity implements
 			// If a non-libre build of Threema cannot find push services, fall back to Threema Push
 			if (!BuildFlavor.forceThreemaPush() && !PushService.servicesInstalled(this)) {
 				this.enableThreemaPush();
-				if (!ConfigUtils.isBlackBerry() && !ConfigUtils.isAmazonDevice() && !ConfigUtils.isWorkBuild()) {
+				if (!ConfigUtils.isAmazonDevice() && !ConfigUtils.isWorkBuild()) {
 					RuntimeUtil.runOnUiThread(() -> {
 						// Show "push not available" dialog
 						int title = R.string.push_not_available_title;
@@ -1017,7 +1018,7 @@ public class HomeActivity extends ThreemaAppCompatActivity implements
 			if (BuildFlavor.forceThreemaPush()) {
 				preferenceService.setUseThreemaPush(true);
 
-				if (!DisableBatteryOptimizationsActivity.isIgnoringBatteryOptimizations(this)) {
+				if (!isIgnoringBatteryOptimizations(this)) {
 					final Intent intent = new Intent(this, DisableBatteryOptimizationsActivity.class);
 					intent.putExtra(DisableBatteryOptimizationsActivity.EXTRA_NAME, getString(R.string.threema_push));
 					intent.putExtra(DisableBatteryOptimizationsActivity.EXTRA_CONFIRM, true);
@@ -1027,11 +1028,11 @@ public class HomeActivity extends ThreemaAppCompatActivity implements
 		}
 
 		this.mainContent = findViewById(R.id.main_content);
-		this.noticeLayout = findViewById(R.id.notice_layout);
-		findViewById(R.id.notice_button_enter_code).setOnClickListener(v -> SMSVerificationDialog.newInstance(userService.getLinkedMobile(true)).show(getSupportFragmentManager(), DIALOG_TAG_VERIFY_CODE));
-		findViewById(R.id.notice_button_cancel).setOnClickListener(v -> GenericAlertDialog.newInstance(R.string.verify_title, R.string.really_cancel_verify, R.string.yes, R.string.no)
+		this.noticeSMSLayout = findViewById(R.id.notice_sms_layout);
+		findViewById(R.id.notice_sms_button_enter_code).setOnClickListener(v -> SMSVerificationDialog.newInstance(userService.getLinkedMobile(true)).show(getSupportFragmentManager(), DIALOG_TAG_VERIFY_CODE));
+		findViewById(R.id.notice_sms_button_cancel).setOnClickListener(v -> GenericAlertDialog.newInstance(R.string.verify_title, R.string.really_cancel_verify, R.string.yes, R.string.no)
 			.show(getSupportFragmentManager(), DIALOG_TAG_CANCEL_VERIFY));
-		this.noticeLayout.setVisibility(
+		this.noticeSMSLayout.setVisibility(
 			userService.getMobileLinkingState() == UserService.LinkingState_PENDING ?
 				View.VISIBLE : View.GONE);
 
@@ -1128,30 +1129,44 @@ public class HomeActivity extends ThreemaAppCompatActivity implements
 
 			Fragment currentFragment = getSupportFragmentManager().findFragmentByTag(currentFragmentTag);
 			if (currentFragment != null) {
-				switch (item.getItemId()) {
-					case R.id.contacts:
-						if (!FRAGMENT_TAG_CONTACTS.equals(currentFragmentTag)) {
-							getSupportFragmentManager().beginTransaction().setCustomAnimations(R.anim.fast_fade_in, R.anim.fast_fade_out, R.anim.fast_fade_in, R.anim.fast_fade_out).hide(currentFragment).show(contactsFragment).commit();
-							currentFragmentTag = FRAGMENT_TAG_CONTACTS;
-						}
-						return true;
-					case R.id.messages:
-						if (!FRAGMENT_TAG_MESSAGES.equals(currentFragmentTag)) {
-							getSupportFragmentManager().beginTransaction().setCustomAnimations(R.anim.fast_fade_in, R.anim.fast_fade_out, R.anim.fast_fade_in, R.anim.fast_fade_out).hide(currentFragment).show(messagesFragment).commit();
-							currentFragmentTag = FRAGMENT_TAG_MESSAGES;
-						}
-						return true;
-					case R.id.my_profile:
-						if (!FRAGMENT_TAG_PROFILE.equals(currentFragmentTag)) {
-							getSupportFragmentManager().beginTransaction().setCustomAnimations(R.anim.fast_fade_in, R.anim.fast_fade_out, R.anim.fast_fade_in, R.anim.fast_fade_out).hide(currentFragment).show(profileFragment).commit();
-							currentFragmentTag = FRAGMENT_TAG_PROFILE;
-						}
-						return true;
+				if (item.getItemId() == R.id.contacts) {
+					if (!FRAGMENT_TAG_CONTACTS.equals(currentFragmentTag)) {
+						getSupportFragmentManager().beginTransaction().setCustomAnimations(R.anim.fast_fade_in, R.anim.fast_fade_out, R.anim.fast_fade_in, R.anim.fast_fade_out).hide(currentFragment).show(contactsFragment).commit();
+						currentFragmentTag = FRAGMENT_TAG_CONTACTS;
+					}
+					return true;
+				} else if (item.getItemId() == R.id.messages) {
+					if (!FRAGMENT_TAG_MESSAGES.equals(currentFragmentTag)) {
+						getSupportFragmentManager().beginTransaction().setCustomAnimations(R.anim.fast_fade_in, R.anim.fast_fade_out, R.anim.fast_fade_in, R.anim.fast_fade_out).hide(currentFragment).show(messagesFragment).commit();
+						currentFragmentTag = FRAGMENT_TAG_MESSAGES;
+					}
+					return true;
+				} else if (item.getItemId() == R.id.my_profile) {
+					if (!FRAGMENT_TAG_PROFILE.equals(currentFragmentTag)) {
+						getSupportFragmentManager().beginTransaction().setCustomAnimations(R.anim.fast_fade_in, R.anim.fast_fade_out, R.anim.fast_fade_in, R.anim.fast_fade_out).hide(currentFragment).show(profileFragment).commit();
+						currentFragmentTag = FRAGMENT_TAG_PROFILE;
+					}
+					return true;
 				}
 			}
 			return false;
 		});
-		this.bottomNavigationView.post(() -> bottomNavigationView.setSelectedItemId(initialItemId));
+		this.bottomNavigationView.post(() -> {
+			bottomNavigationView.setSelectedItemId(initialItemId);
+		});
+		if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {
+			Drawable background = bottomNavigationView.getBackground();
+			if (background instanceof MaterialShapeDrawable) {
+				int color = ((MaterialShapeDrawable) background).getResolvedTintColor();
+				Window window = getWindow();
+				if (window != null) {
+					window.setNavigationBarColor(color);
+					if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.Q) {
+						window.setNavigationBarContrastEnforced(false);
+					}
+				}
+			}
+		}
 
 		updateBottomNavigation();
 
@@ -1273,7 +1288,7 @@ public class HomeActivity extends ThreemaAppCompatActivity implements
 
 	@SuppressLint("StaticFieldLeak")
 	private void reallyCancelVerify() {
-		AnimationUtil.collapse(noticeLayout);
+		AnimationUtil.collapse(noticeSMSLayout);
 		new AsyncTask<Void, Void, Void>() {
 			@Override
 			protected Void doInBackground(Void... params) {
@@ -1302,55 +1317,41 @@ public class HomeActivity extends ThreemaAppCompatActivity implements
 	@Override
 	public boolean onOptionsItemSelected(MenuItem item) {
 		Intent intent = null;
-
-		switch (item.getItemId()) {
-			case android.R.id.home:
-				showQRPopup();
-				return true;
-			case R.id.menu_lock:
-				lockAppService.lock();
-				return true;
-			case R.id.menu_new_group:
-				intent = new Intent(this, GroupAddActivity.class);
-				break;
-			case R.id.menu_new_distribution_list:
-				intent = new Intent(this, DistributionListAddActivity.class);
-				break;
-			case R.id.group_requests:
-				intent = new Intent(this, OutgoingGroupRequestActivity.class);
-				break;
-			case R.id.my_backups:
-				intent = new Intent(this, BackupAdminActivity.class);
-				break;
-			case R.id.webclient:
-				intent = new Intent(this, SessionsActivity.class);
-				break;
-			case R.id.scanner:
-				intent = new Intent(this, BaseQrScannerActivity.class);
-				break;
-			case R.id.help:
-				intent = new Intent(this, SupportActivity.class);
-				break;
-			case R.id.settings:
-				AnimationUtil.startActivityForResult(this, null, new Intent(this, SettingsActivity.class), ThreemaActivity.ACTIVITY_ID_SETTINGS);
-				break;
-			case R.id.directory:
-				intent = new Intent(this, DirectoryActivity.class);
-				break;
-			case R.id.threema_channel:
-				confirmThreemaChannel();
-				break;
-			case R.id.archived:
-				intent = new Intent(this, ArchiveActivity.class);
-				break;
-			case R.id.globalsearch:
-				intent = new Intent(this, GlobalSearchActivity.class);
-			default:
-				break;
+		final int id = item.getItemId();
+		if (id == android.R.id.home) {
+			showQRPopup();
+			return true;
+		} else if (id == R.id.menu_lock) {
+			lockAppService.lock();
+			return true;
+		} else if (id == R.id.menu_new_group) {
+			intent = new Intent(this, GroupAddActivity.class);
+		} else if (id == R.id.menu_new_distribution_list) {
+			intent = new Intent(this, DistributionListAddActivity.class);
+		} else if (id == R.id.group_requests) {
+			intent = new Intent(this, OutgoingGroupRequestActivity.class);
+		} else if (id == R.id.my_backups) {
+			intent = new Intent(this, BackupAdminActivity.class);
+		} else if (id == R.id.webclient) {
+			intent = new Intent(this, SessionsActivity.class);
+		} else if (id == R.id.scanner) {
+			intent = new Intent(this, BaseQrScannerActivity.class);
+		} else if (id == R.id.help) {
+			intent = new Intent(this, SupportActivity.class);
+		} else if (id == R.id.settings) {
+			startActivityForResult(new Intent(this, SettingsActivity.class), ThreemaActivity.ACTIVITY_ID_SETTINGS);
+		} else if (id == R.id.directory) {
+			intent = new Intent(this, DirectoryActivity.class);
+		} else if (id == R.id.threema_channel) {
+			confirmThreemaChannel();
+		} else if (id == R.id.archived) {
+			intent = new Intent(this, ArchiveActivity.class);
+		} else if (id == R.id.globalsearch) {
+			intent = new Intent(this, GlobalSearchActivity.class);
 		}
 
 		if (intent != null) {
-			AnimationUtil.startActivity(this, null, intent);
+			startActivity(intent);
 		}
 
 		return super.onOptionsItemSelected(item);
@@ -1366,7 +1367,7 @@ public class HomeActivity extends ThreemaAppCompatActivity implements
 		layoutParams.height = ConfigUtils.getActionBarSize(this) / 3;
 		toolbarLogoMain.setLayoutParams(layoutParams);
 		toolbarLogoMain.setImageResource(R.drawable.logo_main);
-		toolbarLogoMain.setColorFilter(ConfigUtils.getColorFromAttribute(this, android.R.attr.textColorSecondary),
+		toolbarLogoMain.setColorFilter(ConfigUtils.getColorFromAttribute(this, R.attr.colorOnSurface),
 			PorterDuff.Mode.SRC_IN);
 		toolbarLogoMain.setContentDescription(getString(R.string.logo));
 		toolbarLogoMain.setOnClickListener(v -> {
@@ -1409,7 +1410,7 @@ public class HomeActivity extends ThreemaAppCompatActivity implements
 					privateChatToggleMenuItem.setIcon(R.drawable.ic_outline_visibility_off);
 					privateChatToggleMenuItem.setTitle(R.string.title_hide_private_chats);
 				}
-				ConfigUtils.themeMenuItem(privateChatToggleMenuItem, ConfigUtils.getColorFromAttribute(this, R.attr.textColorSecondary));
+				ConfigUtils.tintMenuItem(this, privateChatToggleMenuItem, R.attr.colorOnSurface);
 			}
 
 			Boolean addDisabled;
@@ -1461,7 +1462,7 @@ public class HomeActivity extends ThreemaAppCompatActivity implements
 
 			MenuItem webclientMenuItem = menu.findItem(R.id.webclient);
 			if (webclientMenuItem != null) {
-				webclientMenuItem.setVisible(!(webDisabled || ConfigUtils.isBlackBerry()));
+				webclientMenuItem.setVisible(!(webDisabled));
 			}
 
 			return true;
@@ -1718,8 +1719,7 @@ public class HomeActivity extends ThreemaAppCompatActivity implements
 		}
 		File customAppIcon = null;
 		try {
-			customAppIcon = serviceManager.getFileService()
-				.getAppLogo(ConfigUtils.getAppTheme(this));
+			customAppIcon = serviceManager.getFileService().getAppLogo(ConfigUtils.getAppThemeSettingFromDayNightMode(ConfigUtils.getCurrentDayNightMode(this)));
 		} catch (FileSystemNotPresentException e) {
 			logger.error("Exception", e);
 		}
@@ -1816,7 +1816,7 @@ public class HomeActivity extends ThreemaAppCompatActivity implements
 
 	private void confirmThreemaChannel() {
 		if (contactService.getByIdentity(THREEMA_CHANNEL_IDENTITY) == null) {
-			GenericAlertDialog.newInstance(R.string.threema_channel, R.string.threema_channel_intro, R.string.ok, R.string.cancel).show(getSupportFragmentManager(), DIALOG_TAG_THREEMA_CHANNEL_VERIFY);
+			GenericAlertDialog.newInstance(R.string.threema_channel, R.string.threema_channel_intro, R.string.ok, R.string.cancel, 0).show(getSupportFragmentManager(), DIALOG_TAG_THREEMA_CHANNEL_VERIFY);
 		} else {
 			launchThreemaChannelChat();
 		}
diff --git a/app/src/main/java/ch/threema/app/activities/IdentityListActivity.java b/app/src/main/java/ch/threema/app/activities/IdentityListActivity.java
index 78473cb7..58b533d7 100644
--- a/app/src/main/java/ch/threema/app/activities/IdentityListActivity.java
+++ b/app/src/main/java/ch/threema/app/activities/IdentityListActivity.java
@@ -29,12 +29,6 @@ import android.view.MenuItem;
 import android.view.View;
 import android.view.ViewGroup;
 
-import com.google.android.material.floatingactionbutton.ExtendedFloatingActionButton;
-
-import java.util.ArrayList;
-import java.util.Iterator;
-import java.util.List;
-
 import androidx.appcompat.app.ActionBar;
 import androidx.appcompat.view.ActionMode;
 import androidx.fragment.app.DialogFragment;
@@ -42,6 +36,13 @@ import androidx.recyclerview.widget.DefaultItemAnimator;
 import androidx.recyclerview.widget.DividerItemDecoration;
 import androidx.recyclerview.widget.LinearLayoutManager;
 import androidx.recyclerview.widget.RecyclerView;
+
+import com.google.android.material.floatingactionbutton.ExtendedFloatingActionButton;
+
+import java.util.ArrayList;
+import java.util.Iterator;
+import java.util.List;
+
 import ch.threema.app.R;
 import ch.threema.app.ThreemaApplication;
 import ch.threema.app.adapters.IdentityListAdapter;
@@ -53,7 +54,6 @@ import ch.threema.app.services.ContactService;
 import ch.threema.app.services.IdListService;
 import ch.threema.app.ui.EmptyRecyclerView;
 import ch.threema.app.ui.EmptyView;
-import ch.threema.app.utils.ConfigUtils;
 import ch.threema.domain.protocol.csp.ProtocolDefines;
 import ch.threema.localcrypto.MasterKeyLockedException;
 import ch.threema.storage.models.ContactModel;
@@ -266,8 +266,6 @@ abstract public class IdentityListActivity extends ThreemaToolbarActivity implem
 		@Override
 		public boolean onCreateActionMode(ActionMode mode, Menu menu) {
 			mode.getMenuInflater().inflate(R.menu.action_identity_list, menu);
-			ConfigUtils.themeMenu(menu, ConfigUtils.getColorFromAttribute(IdentityListActivity.this, R.attr.colorAccent));
-
 			return true;
 		}
 
@@ -279,17 +277,15 @@ abstract public class IdentityListActivity extends ThreemaToolbarActivity implem
 
 		@Override
 		public boolean onActionItemClicked(ActionMode mode, MenuItem item) {
-			switch (item.getItemId()) {
-				case R.id.menu_identity_remove:
-					IdentityListAdapter.Entity selectedEntity = adapter.getSelected();
-					if (selectedEntity != null) {
-						removeIdentity(selectedEntity.getText());
-					}
-					mode.finish();
-					return true;
-				default:
-					return false;
+			if (item.getItemId() == R.id.menu_identity_remove) {
+				IdentityListAdapter.Entity selectedEntity = adapter.getSelected();
+				if (selectedEntity != null) {
+					removeIdentity(selectedEntity.getText());
+				}
+				mode.finish();
+				return true;
 			}
+			return false;
 		}
 
 		@Override
diff --git a/app/src/main/java/ch/threema/app/activities/ImagePaintActivity.java b/app/src/main/java/ch/threema/app/activities/ImagePaintActivity.java
index 5998930d..5f869b7e 100644
--- a/app/src/main/java/ch/threema/app/activities/ImagePaintActivity.java
+++ b/app/src/main/java/ch/threema/app/activities/ImagePaintActivity.java
@@ -21,7 +21,12 @@
 
 package ch.threema.app.activities;
 
+import static ch.threema.app.utils.BitmapUtil.FLIP_HORIZONTAL;
+import static ch.threema.app.utils.BitmapUtil.FLIP_NONE;
+import static ch.threema.app.utils.BitmapUtil.FLIP_VERTICAL;
+
 import android.annotation.SuppressLint;
+import android.app.Activity;
 import android.content.Context;
 import android.content.Intent;
 import android.content.res.Configuration;
@@ -36,7 +41,9 @@ import android.graphics.drawable.Drawable;
 import android.media.FaceDetector;
 import android.net.Uri;
 import android.os.AsyncTask;
+import android.os.Build;
 import android.os.Bundle;
+import android.provider.MediaStore;
 import android.view.KeyEvent;
 import android.view.Menu;
 import android.view.MenuItem;
@@ -45,13 +52,24 @@ import android.view.ViewGroup;
 import android.view.ViewStub;
 import android.widget.FrameLayout;
 import android.widget.ImageView;
-import android.widget.ProgressBar;
 import android.widget.Toast;
 
+import androidx.activity.result.ActivityResultLauncher;
+import androidx.activity.result.contract.ActivityResultContracts;
+import androidx.annotation.ColorInt;
+import androidx.annotation.NonNull;
+import androidx.annotation.Nullable;
+import androidx.annotation.UiThread;
+import androidx.appcompat.app.ActionBar;
+import androidx.appcompat.content.res.AppCompatResources;
+import androidx.core.content.ContextCompat;
+import androidx.core.view.ViewCompat;
+
 import com.android.colorpicker.ColorPickerDialog;
 import com.android.colorpicker.ColorPickerSwatch;
 import com.getkeepsafe.taptargetview.TapTarget;
 import com.getkeepsafe.taptargetview.TapTargetView;
+import com.google.android.material.progressindicator.CircularProgressIndicator;
 import com.google.common.util.concurrent.FutureCallback;
 import com.google.common.util.concurrent.Futures;
 import com.google.common.util.concurrent.ListenableFuture;
@@ -66,18 +84,14 @@ import java.io.FileOutputStream;
 import java.io.IOException;
 import java.io.InputStream;
 import java.util.ArrayList;
+import java.util.Deque;
+import java.util.HashSet;
+import java.util.LinkedList;
 import java.util.List;
+import java.util.Set;
 import java.util.concurrent.ExecutorService;
 import java.util.concurrent.Executors;
 
-import androidx.annotation.ColorInt;
-import androidx.annotation.NonNull;
-import androidx.annotation.Nullable;
-import androidx.annotation.UiThread;
-import androidx.appcompat.app.ActionBar;
-import androidx.appcompat.content.res.AppCompatResources;
-import androidx.core.content.ContextCompat;
-import androidx.core.view.ViewCompat;
 import ch.threema.app.R;
 import ch.threema.app.ThreemaApplication;
 import ch.threema.app.dialogs.GenericAlertDialog;
@@ -91,15 +105,20 @@ import ch.threema.app.motionviews.FaceItem;
 import ch.threema.app.motionviews.viewmodel.Font;
 import ch.threema.app.motionviews.viewmodel.Layer;
 import ch.threema.app.motionviews.viewmodel.TextLayer;
+import ch.threema.app.motionviews.widget.ActionEntity;
+import ch.threema.app.motionviews.widget.CropEntity;
 import ch.threema.app.motionviews.widget.FaceBlurEntity;
 import ch.threema.app.motionviews.widget.FaceEmojiEntity;
 import ch.threema.app.motionviews.widget.FaceEntity;
+import ch.threema.app.motionviews.widget.FlipEntity;
 import ch.threema.app.motionviews.widget.ImageEntity;
 import ch.threema.app.motionviews.widget.MotionEntity;
 import ch.threema.app.motionviews.widget.MotionView;
 import ch.threema.app.motionviews.widget.PathEntity;
+import ch.threema.app.motionviews.widget.RotationEntity;
 import ch.threema.app.motionviews.widget.TextEntity;
 import ch.threema.app.services.ContactService;
+import ch.threema.app.services.FileService;
 import ch.threema.app.services.GroupService;
 import ch.threema.app.services.PreferenceService;
 import ch.threema.app.services.UserService;
@@ -122,8 +141,6 @@ import ch.threema.base.utils.LoggingUtil;
 import ch.threema.localcrypto.MasterKeyLockedException;
 import ch.threema.storage.models.GroupModel;
 
-import static ch.threema.app.utils.BitmapUtil.FLIP_NONE;
-
 public class ImagePaintActivity extends ThreemaToolbarActivity implements GenericAlertDialog.DialogClickListener {
 	private static final Logger logger = LoggingUtil.getThreemaLogger("ImagePaintActivity");
 
@@ -163,31 +180,79 @@ public class ImagePaintActivity extends ThreemaToolbarActivity implements Generi
 	private static final int STROKE_MODE_PENCIL = 1;
 	private static final int MAX_FACES = 16;
 
+	private static final int ANIMATION_DURATION_MS = 200;
+
+	private static final Set<Class<? extends ActionEntity>> allowedActionsEntitiesToCrop = new HashSet<>();
+	static {
+		allowedActionsEntitiesToCrop.add(RotationEntity.class);
+		allowedActionsEntitiesToCrop.add(FlipEntity.class);
+		allowedActionsEntitiesToCrop.add(CropEntity.class);
+	}
+
 	private ImageView imageView;
 	private PaintView paintView;
 	private MotionView motionView;
 	private FrameLayout imageFrame;
 	private LockableScrollView scrollView;
 	private ComposeEditText captionEditText;
-	private ProgressBar progressBar;
+	private CircularProgressIndicator progressBar;
 	private EmojiPicker emojiPicker;
 
-	private int orientation, exifOrientation, flip, exifFlip, clipWidth, clipHeight;
+	private int clipWidth, clipHeight;
 
 	private File inputFile;
 	private Uri imageUri, outputUri;
+	private MediaItem mediaItem;
 
 	@ColorInt private int penColor, backgroundColor;
 
-	private MenuItem undoItem, drawParentItem, paintItem, pencilItem, blurFacesItem;
+	private MenuItem undoItem, drawParentItem, paintItem, pencilItem, blurFacesItem, cropItem;
 	private Drawable brushIcon, pencilIcon;
 	private PaintSelectionPopup paintSelectionPopup;
-	private final ArrayList<MotionEntity> undoHistory = new ArrayList<>();
+	private final Deque<ActionEntity> undoHistory = new LinkedList<>();
+	private long lastAnimationStart = 0;
+	private final MediaItem.Orientation currentOrientation = new MediaItem.Orientation();
 	private boolean saveSemaphore = false;
 	private int strokeMode = STROKE_MODE_BRUSH;
 	private ActivityMode activityMode = ActivityMode.EDIT_IMAGE;
 	private int groupId = -1;
 	private final ExecutorService threadPoolExecutor = Executors.newSingleThreadExecutor();
+	private File cropFile;
+
+	private final ActivityResultLauncher<Intent> cropResultLauncher = registerForActivityResult(new ActivityResultContracts.StartActivityForResult(),
+		result -> {
+			if (result.getResultCode() == Activity.RESULT_OK
+				&& activityMode == ActivityMode.IMAGE_REPLY
+				&& cropFile != null
+				&& mediaItem != null
+			) {
+				// Add crop entity to undo history
+				undoHistory.push(new CropEntity(
+					mediaItem.getUri(),
+					new MediaItem.Orientation(mediaItem.getRotation(), mediaItem.getFlip()))
+				);
+
+				imageUri = Uri.fromFile(cropFile);
+				mediaItem.setUri(imageUri);
+				// As the image is saved with the current orientation applied, we need to apply the
+				// inverse orientation to get it in the original orientation.
+				MediaItem.Orientation inverseOrientation = currentOrientation.getInverse();
+				// As the flip is applied before the rotation, we may need to swap the flips,
+				// because a horizontal flip on a 90 or 270 rotated image is a vertical flip.
+				if (inverseOrientation.getRotation() == 90 || inverseOrientation.getRotation() == 270) {
+					inverseOrientation = getSwappedFlips(inverseOrientation);
+				}
+				mediaItem.setRotation(inverseOrientation.getRotation());
+				mediaItem.setFlip(inverseOrientation.getFlip());
+
+				resetViewOrientation(imageView);
+				resetViewOrientation(motionView);
+				resetViewOrientation(paintView);
+
+				loadImage(this::applyCurrentOrientation);
+				invalidateOptionsMenu();
+			}
+		});
 
 	/**
 	 * Returns an intent to start the activity for editing a picture. The edited picture is stored
@@ -280,7 +345,7 @@ public class ImagePaintActivity extends ThreemaToolbarActivity implements Generi
 	}
 
 	private boolean hasChanges() {
-		return undoHistory.size() > 0;
+		return !undoHistory.isEmpty();
 	}
 
 	@Override
@@ -311,7 +376,17 @@ public class ImagePaintActivity extends ThreemaToolbarActivity implements Generi
 			@Override
 			protected Bitmap doInBackground(Void... params) {
 				try {
-					return BitmapFactory.decodeStream(getAssets().open(stickerPath));
+					Bitmap bitmap = BitmapFactory.decodeStream(getAssets().open(stickerPath));
+					boolean isFlippedHorizontally = isFlippedHorizontally();
+					boolean isFlippedVertically = isFlippedVertically();
+					float rotation = imageView.getRotation();
+					if (isFlippedHorizontally || isFlippedVertically || rotation != 0) {
+						Matrix matrix = new Matrix();
+						matrix.postRotate(-rotation);
+						matrix.postScale(isFlippedHorizontally ? -1 : 1, isFlippedVertically ? -1 : 1);
+						bitmap = Bitmap.createBitmap(bitmap, 0, 0, bitmap.getWidth(), bitmap.getHeight(), matrix, true);
+					}
+					return bitmap;
 				} catch (IOException e) {
 					logger.error("Exception", e);
 					return null;
@@ -345,6 +420,16 @@ public class ImagePaintActivity extends ThreemaToolbarActivity implements Generi
 
 		textLayer.setFont(font);
 		textLayer.setText(text);
+		textLayer.setRotationInDegrees(-imageView.getRotation());
+		int rotation = (int) imageView.getRotation() % 360;
+		if (rotation < 0) {
+			rotation += 360;
+		}
+		if (rotation == 90 || rotation == 270) {
+			textLayer.setFlipped(imageView.getScaleY() < 0);
+		} else {
+			textLayer.setFlipped(imageView.getScaleX() < 0);
+		}
 
 		TextEntity textEntity = new TextEntity(textLayer, motionView.getWidth(),
 				motionView.getHeight());
@@ -362,7 +447,11 @@ public class ImagePaintActivity extends ThreemaToolbarActivity implements Generi
 
 		groupId = intent.getIntExtra(EXTRA_GROUP_ID, -1);
 
-		MediaItem mediaItem = intent.getParcelableExtra(Intent.EXTRA_STREAM);
+		if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.TIRAMISU) {
+			mediaItem = intent.getParcelableExtra(Intent.EXTRA_STREAM, MediaItem.class);
+		} else {
+			mediaItem = intent.getParcelableExtra(Intent.EXTRA_STREAM);
+		}
 
 		try {
 			String activityModeOrdinal = intent.getStringExtra(EXTRA_ACTIVITY_MODE);
@@ -373,13 +462,6 @@ public class ImagePaintActivity extends ThreemaToolbarActivity implements Generi
 			return;
 		}
 
-		if (mediaItem != null) {
-			this.orientation = mediaItem.getRotation();
-			this.flip = mediaItem.getFlip();
-			this.exifOrientation = mediaItem.getExifRotation();
-			this.exifFlip = mediaItem.getExifFlip();
-		}
-
 		this.outputUri = intent.getParcelableExtra(ThreemaApplication.EXTRA_OUTPUT_FILE);
 
 		setSupportActionBar(getToolbar());
@@ -391,6 +473,7 @@ public class ImagePaintActivity extends ThreemaToolbarActivity implements Generi
 		}
 
 		actionBar.setDisplayHomeAsUpEnabled(activityMode == ActivityMode.EDIT_IMAGE);
+		actionBar.setHomeAsUpIndicator(R.drawable.ic_check);
 		actionBar.setTitle("");
 
 		this.paintView = findViewById(R.id.paint_view);
@@ -431,14 +514,11 @@ public class ImagePaintActivity extends ThreemaToolbarActivity implements Generi
 
 			@Override
 			public void onAdded() {
-				undoHistory.add(new PathEntity());
+				undoHistory.push(new PathEntity());
 			}
 
 			@Override
 			public void onDeleted() {
-				if (undoHistory.size() > 0) {
-					undoHistory.remove(undoHistory.size() - 1);
-				}
 			}
 		});
 
@@ -455,7 +535,7 @@ public class ImagePaintActivity extends ThreemaToolbarActivity implements Generi
 
 			@Override
 			public void onAdded(MotionEntity entity) {
-				undoHistory.add(entity);
+				undoHistory.push(entity);
 			}
 
 			@SuppressLint("UseValueOf")
@@ -615,16 +695,18 @@ public class ImagePaintActivity extends ThreemaToolbarActivity implements Generi
 		});
 	}
 
-	private void loadImage() {
+	private void loadImage(@Nullable Runnable onLoaded) {
 		BitmapWorkerTaskParams bitmapParams = new BitmapWorkerTaskParams();
 		bitmapParams.imageUri = this.imageUri;
 		bitmapParams.width = this.imageFrame.getWidth();
 		bitmapParams.height = this.scrollView.getHeight();
 		bitmapParams.contentResolver = getContentResolver();
-		bitmapParams.orientation = this.orientation;
-		bitmapParams.flip = this.flip;
-		bitmapParams.exifOrientation = this.exifOrientation;
-		bitmapParams.exifFlip = this.exifFlip;
+		if (mediaItem != null) {
+			bitmapParams.orientation = mediaItem.getRotation();
+			bitmapParams.flip = mediaItem.getFlip();
+			bitmapParams.exifOrientation = mediaItem.getExifRotation();
+			bitmapParams.exifFlip = mediaItem.getExifFlip();
+		}
 
 		logger.debug("screen height: {}", bitmapParams.height);
 
@@ -650,6 +732,10 @@ public class ImagePaintActivity extends ThreemaToolbarActivity implements Generi
 					resizeView(paintView, clipWidth, clipHeight);
 					resizeView(motionView, clipWidth, clipHeight);
 				}
+
+				if (onLoaded != null) {
+					onLoaded.run();
+				}
 			}
 		}.execute(bitmapParams);
 	}
@@ -707,6 +793,14 @@ public class ImagePaintActivity extends ThreemaToolbarActivity implements Generi
 				options.inPreferredConfig = Bitmap.Config.ARGB_8888;
 				options.inJustDecodeBounds = false;
 
+				int orientation = 0, flip = FLIP_NONE, exifOrientation = 0, exifFlip = FLIP_NONE;
+				if (mediaItem != null) {
+					orientation = mediaItem.getRotation();
+					flip = mediaItem.getFlip();
+					exifOrientation = mediaItem.getExifRotation();
+					exifFlip = mediaItem.getExifFlip();
+				}
+
 				try (InputStream data = getContentResolver().openInputStream(imageUri)) {
 					if (data != null) {
 						orgBitmap = BitmapFactory.decodeStream(new BufferedInputStream(data), null, options);
@@ -828,26 +922,38 @@ public class ImagePaintActivity extends ThreemaToolbarActivity implements Generi
 			drawParentItem.setIcon(brushIcon);
 		}
 
-		ConfigUtils.themeMenuItem(drawParentItem, Color.WHITE);
-		ConfigUtils.themeMenuItem(paintItem, Color.WHITE);
-		ConfigUtils.themeMenuItem(pencilItem, Color.WHITE);
+		ConfigUtils.tintMenuItem(this, drawParentItem, R.attr.colorOnSurface);
+		ConfigUtils.tintMenuItem(this, paintItem, R.attr.colorOnSurface);
+		ConfigUtils.tintMenuItem(this, pencilItem, R.attr.colorOnSurface);
 
 		if (motionView.getSelectedEntity() == null) {
 			// no selected entities => draw mode or neutral mode
 			if (paintView.getActive()) {
 				if (this.strokeMode == STROKE_MODE_PENCIL) {
-					ConfigUtils.themeMenuItem(pencilItem, this.penColor);
+					ConfigUtils.tintMenuItem(pencilItem, this.penColor);
 					drawParentItem.setIcon(pencilIcon);
-					ConfigUtils.themeMenuItem(drawParentItem, this.penColor);
+					ConfigUtils.tintMenuItem(drawParentItem, this.penColor);
 				} else {
-					ConfigUtils.themeMenuItem(paintItem, this.penColor);
+					ConfigUtils.tintMenuItem(paintItem, this.penColor);
 					drawParentItem.setIcon(brushIcon);
-					ConfigUtils.themeMenuItem(drawParentItem, this.penColor);
+					ConfigUtils.tintMenuItem(drawParentItem, this.penColor);
 				}
 			}
 		}
-		undoItem.setVisible(undoHistory.size() > 0);
+		undoItem.setVisible(hasChanges());
 		blurFacesItem.setVisible(activityMode != ActivityMode.DRAWING && motionView.getEntitiesCount() == 0);
+
+		if (activityMode == ActivityMode.IMAGE_REPLY) {
+			// Cropping is currently not possible when the image already has been edited. However,
+			// if the image has only been rotated or flipped, it is still possible to crop it.
+			cropItem.setVisible(true);
+			for (ActionEntity action : undoHistory) {
+				if (!allowedActionsEntitiesToCrop.contains(action.getClass())) {
+					cropItem.setVisible(false);
+					break;
+				}
+			}
+		}
 		return true;
 	}
 
@@ -865,8 +971,15 @@ public class ImagePaintActivity extends ThreemaToolbarActivity implements Generi
 
 		if (activityMode == ActivityMode.DRAWING) {
 			menu.findItem(R.id.item_background).setVisible(true);
+		} else if (activityMode == ActivityMode.IMAGE_REPLY) {
+			menu.findItem(R.id.item_flip).setVisible(true);
+			menu.findItem(R.id.item_rotate).setVisible(true);
+			cropItem = menu.findItem(R.id.item_crop);
+			cropItem.setVisible(true);
 		}
 
+		ConfigUtils.addIconsToOverflowMenu(this, menu);
+
 		return true;
 	}
 
@@ -876,7 +989,7 @@ public class ImagePaintActivity extends ThreemaToolbarActivity implements Generi
 
 		int id = item.getItemId();
 		if (id == android.R.id.home) {
-			if (undoHistory.size() > 0) {
+			if (hasChanges()) {
 				item.setEnabled(false);
 				renderImage();
 			} else {
@@ -913,6 +1026,18 @@ public class ImagePaintActivity extends ThreemaToolbarActivity implements Generi
 			blurFaces(true);
 		} else if (id == R.id.item_background) {
 			chooseBackgroundColor();
+		} else if (id == R.id.item_flip) {
+			if (lastAnimationStart + ANIMATION_DURATION_MS < System.currentTimeMillis()) {
+				flip();
+				lastAnimationStart = System.currentTimeMillis();
+			}
+		} else if (id == R.id.item_rotate) {
+			if (lastAnimationStart + ANIMATION_DURATION_MS < System.currentTimeMillis()) {
+				rotate();
+				lastAnimationStart = System.currentTimeMillis();
+			}
+		} else if (id == R.id.item_crop) {
+			crop();
 		}
 		return false;
 	}
@@ -923,17 +1048,18 @@ public class ImagePaintActivity extends ThreemaToolbarActivity implements Generi
 			if (getToolbar() != null) {
 				getToolbar().postDelayed(() -> {
 					final View v = findViewById(R.id.item_face);
+					final @ColorInt int textColor = ConfigUtils.getColorFromAttribute(this, R.attr.colorOnPrimary);
 					try {
 						TapTargetView.showFor(this,
 							TapTarget.forView(v, getString(R.string.face_blur_tooltip_title), getString(R.string.face_blur_tooltip_text))
-								.outerCircleColor(R.color.dark_accent)      // Specify a color for the outer circle
+								.outerCircleColorInt(ConfigUtils.getColorFromAttribute(this, R.attr.colorPrimary)) // Specify a color for the outer circle
 								.outerCircleAlpha(0.96f)            // Specify the alpha amount for the outer circle
 								.targetCircleColor(android.R.color.white)   // Specify a color for the target circle
 								.titleTextSize(24)                  // Specify the size (in sp) of the title text
-								.titleTextColor(android.R.color.white)      // Specify the color of the title text
+								.titleTextColorInt(textColor)      // Specify the color of the title text
 								.descriptionTextSize(18)            // Specify the size (in sp) of the description text
-								.descriptionTextColor(android.R.color.white)  // Specify the color of the description text
-								.textColor(android.R.color.white)            // Specify a color for both the title and description text
+								.descriptionTextColorInt(textColor)  // Specify the color of the description text
+								.textColorInt(textColor)            // Specify a color for both the title and description text
 								.textTypeface(Typeface.SANS_SERIF)  // Specify a typeface for the text
 								.dimColor(android.R.color.black)            // If set, will dim behind the view with 30% opacity of the given color
 								.drawShadow(true)                   // Whether to draw a drop shadow or not
@@ -984,16 +1110,23 @@ public class ImagePaintActivity extends ThreemaToolbarActivity implements Generi
 	}
 
 	private void undo() {
-		if (undoHistory.size() > 0) {
-			MotionEntity entity = undoHistory.get(undoHistory.size() - 1);
+		if (hasChanges() && lastAnimationStart + ANIMATION_DURATION_MS + 100 < System.currentTimeMillis()) {
+			ActionEntity entity = undoHistory.pop();
 
 			motionView.unselectEntity();
 			if (entity instanceof PathEntity) {
 				paintView.undo();
-			} else {
-				motionView.deleteEntity(entity);
+			} else if (entity instanceof RotationEntity) {
+				undoRotate();
+			} else if (entity instanceof FlipEntity) {
+				undoFlip();
+			} else if (entity instanceof CropEntity) {
+				undoCrop((CropEntity) entity);
+			} else if (entity instanceof MotionEntity) {
+				motionView.deleteEntity((MotionEntity) entity);
 			}
 			invalidateOptionsMenu();
+			lastAnimationStart = System.currentTimeMillis();
 		}
 	}
 
@@ -1040,7 +1173,7 @@ public class ImagePaintActivity extends ThreemaToolbarActivity implements Generi
 				// Otherwise we can remove this listener and load the image
 				if (imageFrame.getMinimumHeight() <= scrollView.getHeight()) {
 					scrollView.removeOnLayoutChangeListener(this);
-					loadImage();
+					loadImage(null);
 				}
 			}
 		});
@@ -1109,10 +1242,12 @@ public class ImagePaintActivity extends ThreemaToolbarActivity implements Generi
 		BitmapWorkerTaskParams bitmapParams = new BitmapWorkerTaskParams();
 		bitmapParams.imageUri = this.imageUri;
 		bitmapParams.contentResolver = getContentResolver();
-		bitmapParams.orientation = this.orientation;
-		bitmapParams.flip = this.flip;
-		bitmapParams.exifOrientation = this.exifOrientation;
-		bitmapParams.exifFlip = this.exifFlip;
+		if (mediaItem != null) {
+			bitmapParams.orientation = mediaItem.getRotation();
+			bitmapParams.flip = mediaItem.getFlip();
+			bitmapParams.exifOrientation = mediaItem.getExifRotation();
+			bitmapParams.exifFlip = mediaItem.getExifFlip();
+		}
 		bitmapParams.mutable = true;
 
 		new BitmapWorkerTask(null) {
@@ -1137,7 +1272,9 @@ public class ImagePaintActivity extends ThreemaToolbarActivity implements Generi
 							File output = new File(outputUri.getPath());
 
 							FileOutputStream outputStream = new FileOutputStream(output);
-							params[0].compress(Bitmap.CompressFormat.PNG, 100, outputStream);
+							Matrix matrix = currentOrientation.getTransformationMatrix();
+							Bitmap transformed = Bitmap.createBitmap(params[0], 0, 0, params[0].getWidth(), params[0].getHeight(), matrix, true);
+							transformed.compress(Bitmap.CompressFormat.PNG, 100, outputStream);
 							outputStream.flush();
 							outputStream.close();
 						} catch (Exception e) {
@@ -1307,6 +1444,195 @@ public class ImagePaintActivity extends ThreemaToolbarActivity implements Generi
 		return emojiPicker != null && emojiPicker.isShown();
 	}
 
+	private void flip() {
+		flipViewsAnimated();
+		if (hasChanges() && undoHistory.peek() instanceof FlipEntity) {
+			// Remove the previous flip action instead of creating two consecutive flip actions
+			undoHistory.pop();
+		} else {
+			undoHistory.push(new FlipEntity());
+		}
+		invalidateOptionsMenu();
+	}
+
+	private void undoFlip() {
+		flipViewsAnimated();
+	}
+
+	private void flipViewsAnimated() {
+		int previousFlip = currentOrientation.getFlip();
+		currentOrientation.flip();
+		int currentFlip = currentOrientation.getFlip();
+
+		flipViewAnimated(imageView, previousFlip, currentFlip);
+		flipViewAnimated(motionView, previousFlip, currentFlip);
+		flipViewAnimated(paintView, previousFlip, currentFlip);
+	}
+
+	private void flipViewAnimated(@NonNull View view, int previousFlip, int newFlip) {
+		if ((previousFlip & FLIP_HORIZONTAL) != (newFlip & FLIP_HORIZONTAL)) {
+			flipViewHorizontalAnimated(view);
+		}
+		if ((previousFlip & FLIP_VERTICAL) != (newFlip & FLIP_VERTICAL)) {
+			flipViewVerticalAnimated(view);
+		}
+	}
+
+	private void flipViewHorizontalAnimated(@NonNull View view) {
+		view.animate().scaleX(view.getScaleX() * -1f).setDuration(ANIMATION_DURATION_MS).start();
+	}
+
+	private void flipViewVerticalAnimated(@NonNull View view) {
+		view.animate().scaleY(view.getScaleY() * -1f).setDuration(ANIMATION_DURATION_MS).start();
+	}
+
+	private void resetViewOrientation(@NonNull View view) {
+		view.setScaleX(1f);
+		view.setScaleY(1f);
+		view.setRotation(0f);
+	}
+
+	private boolean isFlippedHorizontally() {
+		return imageView.getScaleX() < 0f;
+	}
+
+	private boolean isFlippedVertically() {
+		return imageView.getScaleY() < 0f;
+	}
+
+	private void rotate() {
+		rotateBy(-90);
+		undoHistory.push(new RotationEntity());
+		invalidateOptionsMenu();
+	}
+
+	private void undoRotate() {
+		rotateBy(90);
+	}
+
+	private void rotateBy(int degrees) {
+		// Rotate views
+		currentOrientation.rotateBy(degrees);
+
+		rotateViewAnimated(imageView, degrees);
+		rotateViewAnimated(motionView, degrees);
+		rotateViewAnimated(paintView, degrees);
+	}
+
+	private void rotateViewAnimated(@NonNull View view, int degrees) {
+		int rotation = ((int) view.getRotation()) % 360;
+		if (rotation < 0) {
+			rotation += 360;
+		}
+		boolean invertedDimensions = rotation == 90 || rotation == 270;
+		float newWidth = invertedDimensions ? view.getWidth() : view.getHeight();
+		float newHeight = invertedDimensions ? view.getHeight() : view.getWidth();
+		float scale = getTargetScale(newWidth, newHeight);
+		float xScaleNormalized = view.getScaleX() < 0 ? -1 : 1;
+		float yScaleNormalized = view.getScaleY() < 0 ? -1 : 1;
+
+		view.animate()
+			.rotationBy(degrees)
+			.scaleX(xScaleNormalized * scale)
+			.scaleY(yScaleNormalized * scale)
+			.setDuration(ANIMATION_DURATION_MS)
+			.start();
+	}
+
+	private float getTargetScale(float width, float height) {
+		float parentWidth = scrollView.getWidth();
+		float parentHeight = scrollView.getHeight();
+		return Math.min(parentWidth / width, parentHeight / height);
+	}
+
+	private void crop() {
+		try {
+			ServiceManager serviceManager = ThreemaApplication.getServiceManager();
+			if (serviceManager == null) {
+				logger.error("Service manager is null");
+				return;
+			}
+			FileService fileService = serviceManager.getFileService();
+			cropFile = fileService.createTempFile(".crop", ".png");
+
+			Intent intent = new Intent(this, CropImageActivity.class);
+			intent.setData(imageUri);
+			intent.putExtra(MediaStore.EXTRA_OUTPUT, Uri.fromFile(cropFile));
+			// The rotation and flip to load the image 'correctly'
+			intent.putExtra(ThreemaApplication.EXTRA_ORIENTATION, mediaItem.getRotation());
+			intent.putExtra(ThreemaApplication.EXTRA_FLIP, mediaItem.getFlip());
+			// The rotation and flip that has been applied in the image paint activity
+			intent.putExtra(CropImageActivity.EXTRA_ADDITIONAL_ORIENTATION, currentOrientation.getRotation());
+			intent.putExtra(CropImageActivity.EXTRA_ADDITIONAL_FLIP, currentOrientation.getFlip());
+			intent.putExtra(CropImageActivity.FORCE_DARK_THEME, true);
+
+			cropResultLauncher.launch(intent);
+		} catch (FileSystemNotPresentException | IOException e) {
+			logger.debug("Unable to create temp file for crop");
+		}
+	}
+
+	private void undoCrop(@NonNull CropEntity cropEntity) {
+		imageView.setAlpha(0f);
+		motionView.setAlpha(0f);
+		paintView.setAlpha(0f);
+
+		resetViewOrientation(imageView);
+		resetViewOrientation(motionView);
+		resetViewOrientation(paintView);
+
+		imageUri = cropEntity.getLastUri();
+		mediaItem.setUri(imageUri);
+		mediaItem.setRotation(cropEntity.getOrientation().getRotation());
+		mediaItem.setFlip(cropEntity.getOrientation().getFlip());
+		loadImage(() -> {
+			applyCurrentOrientation();
+			animateFadeIn(imageView);
+			animateFadeIn(motionView);
+			animateFadeIn(paintView);
+		});
+	}
+
+	private void animateFadeIn(@NonNull View view) {
+		view.animate()
+			.alpha(1f)
+			.setDuration(ANIMATION_DURATION_MS)
+			.start();
+	}
+
+	private MediaItem.Orientation getSwappedFlips(@NonNull MediaItem.Orientation orientation) {
+		MediaItem.Orientation swappedOrientation = new MediaItem.Orientation(orientation.getRotation(), FLIP_NONE);
+		boolean isHorizontalFlip = orientation.isHorizontalFlip();
+		boolean isVerticalFlip = orientation.isVerticalFlip();
+		swappedOrientation.setFlip(
+			(isHorizontalFlip ? FLIP_VERTICAL : FLIP_NONE)
+				| (isVerticalFlip ? FLIP_HORIZONTAL : FLIP_NONE)
+		);
+		return swappedOrientation;
+	}
+
+	private void applyCurrentOrientation() {
+		imageView.setRotation(currentOrientation.getRotation());
+		motionView.setRotation(currentOrientation.getRotation());
+		paintView.setRotation(currentOrientation.getRotation());
+
+		float scaleX = currentOrientation.isHorizontalFlip() ? -1 : 1;
+		float scaleY = currentOrientation.isVerticalFlip() ? -1 : 1;
+
+		boolean inverted = currentOrientation.getRotation() == 90 || currentOrientation.getRotation() == 270;
+		float width = inverted ? imageView.getHeight() : imageView.getWidth();
+		float height = inverted ? imageView.getWidth() : imageView.getHeight();
+		float scale = getTargetScale(width, height);
+
+		imageView.setScaleX(scaleX * scale);
+		imageView.setScaleY(scaleY * scale);
+		motionView.setScaleX(scaleX * scale);
+		motionView.setScaleY(scaleY * scale);
+		paintView.setScaleX(scaleX * scale);
+		paintView.setScaleY(scaleY * scale);
+	}
+
+
 	@Override
 	public void onSaveInstanceState(@NonNull Bundle outState) {
 		super.onSaveInstanceState(outState);
diff --git a/app/src/main/java/ch/threema/app/activities/ImagePaintKeyboardActivity.java b/app/src/main/java/ch/threema/app/activities/ImagePaintKeyboardActivity.java
index d78fd6f3..be5cd7a4 100644
--- a/app/src/main/java/ch/threema/app/activities/ImagePaintKeyboardActivity.java
+++ b/app/src/main/java/ch/threema/app/activities/ImagePaintKeyboardActivity.java
@@ -36,12 +36,13 @@ import android.view.ViewTreeObserver;
 import android.view.inputmethod.EditorInfo;
 import android.widget.TextView;
 
-import java.util.Objects;
-
 import androidx.annotation.ColorInt;
 import androidx.appcompat.app.ActionBar;
 import androidx.appcompat.content.res.AppCompatResources;
 import androidx.appcompat.widget.AppCompatEditText;
+
+import java.util.Objects;
+
 import ch.threema.app.R;
 import ch.threema.app.motionviews.widget.TextEntity;
 import ch.threema.app.utils.ConfigUtils;
@@ -69,7 +70,7 @@ public class ImagePaintKeyboardActivity extends ThreemaToolbarActivity {
 		}
 
 		Drawable checkDrawable = AppCompatResources.getDrawable(this, R.drawable.ic_check);
-		Objects.requireNonNull(checkDrawable).setColorFilter(ConfigUtils.getColorFromAttribute(this, R.attr.textColorPrimary), PorterDuff.Mode.SRC_IN);
+		Objects.requireNonNull(checkDrawable).setColorFilter(ConfigUtils.getColorFromAttribute(this, R.attr.colorOnBackground), PorterDuff.Mode.SRC_IN);
 		actionBar.setDisplayHomeAsUpEnabled(true);
 		actionBar.setHomeAsUpIndicator(checkDrawable);
 		actionBar.setTitle("");
diff --git a/app/src/main/java/ch/threema/app/activities/LicenseActivity.java b/app/src/main/java/ch/threema/app/activities/LicenseActivity.java
index 7a9a31fe..b4170a31 100644
--- a/app/src/main/java/ch/threema/app/activities/LicenseActivity.java
+++ b/app/src/main/java/ch/threema/app/activities/LicenseActivity.java
@@ -28,32 +28,19 @@ import android.webkit.WebView;
 
 import ch.threema.app.R;
 
-public class LicenseActivity extends ThreemaToolbarActivity {
-	public void onCreate(Bundle savedInstanceState) {
-		super.onCreate(savedInstanceState);
-
-		ActionBar actionBar = getSupportActionBar();
-		if (actionBar != null) {
-			actionBar.setDisplayHomeAsUpEnabled(true);
-			actionBar.setTitle(R.string.os_licenses);
-		}
-
-		final WebView webView = findViewById(R.id.license_webview);
-		webView.loadUrl("file:///android_asset/license.html");
+public class LicenseActivity extends SimpleWebViewActivity {
+	@Override
+	protected int getWebViewTitle() {
+		return R.string.os_licenses;
 	}
 
 	@Override
-	public int getLayoutResource() {
-		return R.layout.activity_license;
+	protected String getWebViewUrl() {
+		return "file:///android_asset/license.html";
 	}
 
 	@Override
-	public boolean onOptionsItemSelected(MenuItem item) {
-		switch (item.getItemId()) {
-			case android.R.id.home:
-				finish();
-				break;
-		}
+	protected boolean requiresConnection() {
 		return false;
 	}
 }
diff --git a/app/src/main/java/ch/threema/app/activities/MapActivity.java b/app/src/main/java/ch/threema/app/activities/MapActivity.java
index 833eee2e..533bf691 100644
--- a/app/src/main/java/ch/threema/app/activities/MapActivity.java
+++ b/app/src/main/java/ch/threema/app/activities/MapActivity.java
@@ -21,11 +21,6 @@
 
 package ch.threema.app.activities;
 
-import static ch.threema.app.utils.IntentDataUtil.INTENT_DATA_LOCATION_LAT;
-import static ch.threema.app.utils.IntentDataUtil.INTENT_DATA_LOCATION_LNG;
-import static ch.threema.app.utils.IntentDataUtil.INTENT_DATA_LOCATION_NAME;
-import static ch.threema.app.utils.IntentDataUtil.INTENT_DATA_LOCATION_PROVIDER;
-
 import android.Manifest;
 import android.annotation.SuppressLint;
 import android.content.ActivityNotFoundException;
@@ -40,7 +35,6 @@ import android.location.LocationManager;
 import android.os.AsyncTask;
 import android.os.Build;
 import android.os.Bundle;
-import android.os.StrictMode;
 import android.provider.Settings;
 import android.view.View;
 import android.view.WindowManager;
@@ -55,7 +49,7 @@ import androidx.core.view.OnApplyWindowInsetsListener;
 import androidx.core.view.ViewCompat;
 import androidx.core.view.WindowInsetsCompat;
 
-import com.google.android.material.chip.Chip;
+import com.google.android.material.button.MaterialButton;
 import com.mapbox.mapboxsdk.annotations.IconFactory;
 import com.mapbox.mapboxsdk.annotations.MarkerOptions;
 import com.mapbox.mapboxsdk.camera.CameraUpdate;
@@ -92,6 +86,11 @@ import ch.threema.app.utils.RuntimeUtil;
 import ch.threema.base.utils.LoggingUtil;
 import ch.threema.storage.models.data.LocationDataModel;
 
+import static ch.threema.app.utils.IntentDataUtil.INTENT_DATA_LOCATION_LAT;
+import static ch.threema.app.utils.IntentDataUtil.INTENT_DATA_LOCATION_LNG;
+import static ch.threema.app.utils.IntentDataUtil.INTENT_DATA_LOCATION_NAME;
+import static ch.threema.app.utils.IntentDataUtil.INTENT_DATA_LOCATION_PROVIDER;
+
 public class MapActivity extends ThreemaActivity implements GenericAlertDialog.DialogClickListener {
 	private static final Logger logger = LoggingUtil.getThreemaLogger("MapActivity");
 
@@ -126,17 +125,12 @@ public class MapActivity extends ThreemaActivity implements GenericAlertDialog.D
 	public void onCreate(Bundle savedInstanceState) {
 		super.onCreate(savedInstanceState);
 
-		if (BuildConfig.DEBUG) {
-			StrictMode.setVmPolicy(new StrictMode.VmPolicy.Builder()
-					.detectAll()
-					.penaltyLog()
-					.build());
-		}
-
-		ConfigUtils.configureActivityTheme(this);
+		ConfigUtils.configureSystemBars(this);
 
 		setContentView(R.layout.activity_map);
 
+		ConfigUtils.configureTransparentStatusBar(this);
+
 		getWindow().addFlags(WindowManager.LayoutParams.FLAG_DRAWS_SYSTEM_BAR_BACKGROUNDS);
 		getWindow().clearFlags(WindowManager.LayoutParams.FLAG_TRANSLUCENT_STATUS);
 		getWindow().addFlags(WindowManager.LayoutParams.FLAG_TRANSLUCENT_NAVIGATION);
@@ -209,14 +203,14 @@ public class MapActivity extends ThreemaActivity implements GenericAlertDialog.D
 	private void initUi() {
 		findViewById(R.id.coordinator).setVisibility(View.VISIBLE);
 		findViewById(R.id.center_map).setOnClickListener((it -> zoomToCenter()));
-		Chip openChip = findViewById(R.id.open_chip);
-		Chip shareChip = findViewById(R.id.share_chip);
+		MaterialButton openButton = findViewById(R.id.open_button);
+		MaterialButton shareButton = findViewById(R.id.share_location_button);
 		if (isShowingExternalLocation) {
-			shareChip.setOnClickListener((it -> shareLocation()));
-			openChip.setVisibility(View.GONE);
+			shareButton.setOnClickListener((it -> shareLocation()));
+			openButton.setVisibility(View.GONE);
 		} else {
-			openChip.setOnClickListener((it -> openExternal()));
-			shareChip.setVisibility(View.GONE);
+			openButton.setOnClickListener((it -> openExternal()));
+			shareButton.setVisibility(View.GONE);
 		}
 		TextView locationName = findViewById(R.id.location_name);
 		TextView locationCoordinates = findViewById(R.id.location_coordinates);
diff --git a/app/src/main/java/ch/threema/app/activities/MediaGalleryActivity.java b/app/src/main/java/ch/threema/app/activities/MediaGalleryActivity.java
index 7739b4b1..e3a6d84a 100644
--- a/app/src/main/java/ch/threema/app/activities/MediaGalleryActivity.java
+++ b/app/src/main/java/ch/threema/app/activities/MediaGalleryActivity.java
@@ -21,52 +21,62 @@
 
 package ch.threema.app.activities;
 
-import static ch.threema.app.fragments.ComposeMessageFragment.SCROLLBUTTON_VIEW_TIMEOUT;
+import static ch.threema.app.utils.RecyclerViewUtil.thumbScrollerPopupStyle;
 
 import android.Manifest;
+import android.animation.LayoutTransition;
 import android.annotation.SuppressLint;
 import android.annotation.TargetApi;
-import android.content.DialogInterface;
 import android.content.Intent;
 import android.content.pm.PackageManager;
 import android.content.res.Configuration;
-import android.content.res.TypedArray;
+import android.graphics.Outline;
+import android.graphics.drawable.Drawable;
+import android.net.Uri;
 import android.os.AsyncTask;
 import android.os.Bundle;
-import android.os.Handler;
-import android.util.SparseBooleanArray;
-import android.view.ActionMode;
 import android.view.Menu;
 import android.view.MenuItem;
 import android.view.View;
-import android.widget.AbsListView;
-import android.widget.AdapterView;
-import android.widget.FrameLayout;
-import android.widget.ProgressBar;
-import android.widget.TextView;
+import android.view.ViewGroup;
+import android.view.ViewOutlineProvider;
+import android.widget.Toast;
 
 import androidx.annotation.NonNull;
+import androidx.annotation.Nullable;
 import androidx.appcompat.app.ActionBar;
-
+import androidx.appcompat.content.res.AppCompatResources;
+import androidx.appcompat.view.ActionMode;
+import androidx.core.content.res.ResourcesCompat;
+import androidx.lifecycle.Observer;
+import androidx.lifecycle.ViewModelProvider;
+import androidx.recyclerview.widget.GridLayoutManager;
+
+import com.google.android.material.chip.Chip;
+import com.google.android.material.chip.ChipGroup;
+import com.google.android.material.progressindicator.CircularProgressIndicator;
 import com.google.android.material.snackbar.Snackbar;
 
 import org.slf4j.Logger;
 
 import java.io.File;
-import java.sql.SQLException;
 import java.util.ArrayList;
-import java.util.Date;
+import java.util.Arrays;
 import java.util.Iterator;
 import java.util.List;
+import java.util.Objects;
 import java.util.concurrent.CopyOnWriteArrayList;
 
 import ch.threema.app.R;
 import ch.threema.app.ThreemaApplication;
 import ch.threema.app.adapters.MediaGalleryAdapter;
-import ch.threema.app.adapters.MediaGallerySpinnerAdapter;
-import ch.threema.app.cache.ThumbnailCache;
+import ch.threema.app.adapters.MediaGalleryViewModel;
 import ch.threema.app.dialogs.CancelableHorizontalProgressDialog;
+import ch.threema.app.dialogs.ExpandableTextEntryDialog;
 import ch.threema.app.dialogs.GenericAlertDialog;
+import ch.threema.app.dialogs.GenericProgressDialog;
+import ch.threema.app.dialogs.MultiChoiceSelectorDialog;
+import ch.threema.app.fragments.ComposeMessageFragment;
 import ch.threema.app.managers.ServiceManager;
 import ch.threema.app.messagereceiver.MessageReceiver;
 import ch.threema.app.services.ContactService;
@@ -74,9 +84,9 @@ import ch.threema.app.services.DistributionListService;
 import ch.threema.app.services.FileService;
 import ch.threema.app.services.GroupService;
 import ch.threema.app.services.MessageService;
+import ch.threema.app.ui.EmptyRecyclerView;
 import ch.threema.app.ui.EmptyView;
-import ch.threema.app.ui.FastScrollGridView;
-import ch.threema.app.utils.AnimationUtil;
+import ch.threema.app.ui.MediaGridItemDecoration;
 import ch.threema.app.utils.AppRestrictionUtil;
 import ch.threema.app.utils.ConfigUtils;
 import ch.threema.app.utils.DialogUtil;
@@ -92,27 +102,28 @@ import ch.threema.storage.models.AbstractMessageModel;
 import ch.threema.storage.models.ContactModel;
 import ch.threema.storage.models.DistributionListModel;
 import ch.threema.storage.models.GroupModel;
-import ch.threema.storage.models.MessageType;
 import ch.threema.storage.models.data.MessageContentsType;
-
-public class MediaGalleryActivity extends ThreemaToolbarActivity implements AdapterView.OnItemClickListener, ActionBar.OnNavigationListener, GenericAlertDialog.DialogClickListener, FastScrollGridView.ScrollListener {
+import me.zhanghai.android.fastscroll.FastScroller;
+import me.zhanghai.android.fastscroll.FastScrollerBuilder;
+
+public class MediaGalleryActivity extends ThreemaToolbarActivity implements
+	MediaGalleryAdapter.OnClickItemListener,
+	GenericAlertDialog.DialogClickListener,
+	MultiChoiceSelectorDialog.SelectorDialogClickListener,
+	ExpandableTextEntryDialog.ExpandableTextEntryDialogClickListener {
 	private static final Logger logger = LoggingUtil.getThreemaLogger("MediaGalleryActivity");
 
-	private ThumbnailCache<?> thumbnailCache = null;
+	private static final String DIALOG_TAG_DECRYPTING_MESSAGES = "dialog_decrypting_messages";
+
+	private MessageReceiver<?> messageReceiver;
 	private MediaGalleryAdapter mediaGalleryAdapter;
-	private MessageReceiver messageReceiver;
-	private String actionBarTitle;
-	private SpinnerMessageFilter spinnerMessageFilter;
-	private MediaGallerySpinnerAdapter spinnerAdapter;
-	private List<AbstractMessageModel> values;
-	private FastScrollGridView gridView;
-	private EmptyView emptyView;
-	private TypedArray mediaTypeArray;
-	private int currentType;
+	protected MediaGalleryViewModel mediaGalleryViewModel;
+	protected GridLayoutManager gridLayoutManager;
+	private EmptyRecyclerView recyclerView;
+	protected FastScroller fastScroller;
+	private ChipGroup chipGroup;
 	private ActionMode actionMode = null;
 	private AbstractMessageModel initialMessageModel = null;
-	private TextView dateTextView;
-	private FrameLayout dateView;
 
 	public FileService fileService;
 	public MessageService messageService;
@@ -120,86 +131,121 @@ public class MediaGalleryActivity extends ThreemaToolbarActivity implements Adap
 	public GroupService groupService;
 	public DistributionListService distributionListService;
 
-	private final Handler dateViewHandler = new Handler();
-	private final Runnable dateViewTask = () -> RuntimeUtil.runOnUiThread(() -> {
-		if (dateView != null && dateView.getVisibility() == View.VISIBLE) {
-			AnimationUtil.slideOutAnimation(dateView, false, 1f, null);
-		}
-	});
-
-	private static final int TYPE_ALL = 0;
-	private static final int TYPE_IMAGE = 1;
-	private static final int TYPE_VIDEO = 2;
-	private static final int TYPE_AUDIO = 3;
-	private static final int TYPE_FILE = 4;
+	public final static int[] contentTypes = {
+		MessageContentsType.IMAGE,
+		MessageContentsType.GIF,
+		MessageContentsType.VIDEO,
+		MessageContentsType.VOICE_MESSAGE,
+		MessageContentsType.AUDIO,
+		MessageContentsType.FILE
+	};
+	private boolean[] checkedContentTypes = new boolean[contentTypes.length];
+	private String[] contentTypeNames;
 
 	private static final String DELETE_MESSAGES_CONFIRM_TAG = "reallydelete";
 	private static final String DIALOG_TAG_DELETING_MEDIA = "dmm";
-
+	private static final String DIALOG_TAG_TYPE_SELECTOR = "contentType";
 	private static final int PERMISSION_REQUEST_SAVE_MESSAGE = 88;
 
-	private static class SpinnerMessageFilter implements MessageService.MessageFilter {
-		private @MessageContentsType int[] filter = null;
-
-		public void setFilterByType(int spinnerMessageType) {
-			switch (spinnerMessageType) {
-				case TYPE_ALL:
-					this.filter = new int[]{MessageContentsType.IMAGE, MessageContentsType.VIDEO, MessageContentsType.AUDIO, MessageContentsType.FILE, MessageContentsType.GIF, MessageContentsType.VOICE_MESSAGE};
-					break;
-				case TYPE_IMAGE:
-					this.filter = new int[]{MessageContentsType.IMAGE};
-					break;
-				case TYPE_VIDEO:
-					this.filter = new int[]{MessageContentsType.VIDEO, MessageContentsType.GIF};
-					break;
-				case TYPE_AUDIO:
-					this.filter = new int[]{MessageContentsType.AUDIO, MessageContentsType.VOICE_MESSAGE};
-					break;
-				case TYPE_FILE:
-					this.filter = new int[]{MessageContentsType.FILE};
-					break;
-				default:
-					break;
-			}
-		}
-
+	public class MediaGalleryAction implements ActionMode.Callback {
 		@Override
-		public long getPageSize() {
-			return 0;
+		public boolean onCreateActionMode(ActionMode mode, Menu menu) {
+			mode.getMenuInflater().inflate(R.menu.action_media_gallery, menu);
+			if (AppRestrictionUtil.isShareMediaDisabled(MediaGalleryActivity.this)) {
+				menu.findItem(R.id.menu_message_save).setVisible(false);
+			}
+			return true;
 		}
 
 		@Override
-		public Integer getPageReferenceId() {
-			return null;
-		}
+		public boolean onPrepareActionMode(ActionMode mode, Menu menu) {
+			final int checked = mediaGalleryAdapter.getCheckedItemsCount();
+			menu.findItem(R.id.menu_show_in_chat).setVisible(checked == 1);
+			menu.findItem(R.id.menu_share).setVisible(selectedItemsCanBeShared());
 
-		@Override
-		public boolean withStatusMessages() {
+			if (checked > 0) {
+				mode.setTitle(Integer.toString(checked));
+				return true;
+			}
 			return false;
 		}
 
 		@Override
-		public boolean withUnsaved() {
+		public boolean onActionItemClicked(ActionMode mode, MenuItem item) {
+			int itemId = item.getItemId();
+			if (itemId == R.id.menu_message_discard) {
+				discardMessages();
+				return true;
+			} else if (itemId == R.id.menu_message_save) {
+				saveMessages();
+				return true;
+			} else if (itemId == R.id.menu_share) {
+				shareMessages();
+				return true;
+			} else if (itemId == R.id.menu_show_in_chat) {
+				showInChat();
+				return true;
+			} else if (itemId == R.id.menu_select_all) {
+				selectAllMessages();
+				return true;
+			}
 			return false;
 		}
 
 		@Override
-		public boolean onlyUnread() {
-			return false;
+		public void onDestroyActionMode(ActionMode mode) {
+			mediaGalleryAdapter.clearCheckedItems();
+			actionMode = null;
 		}
 
-		@Override
-		public boolean onlyDownloaded() {
-			return true;
-		}
+		@SuppressLint("StaticFieldLeak")
+		private void shareMessages() {
+			//noinspection deprecation
+			new AsyncTask<Void, Void, Void>() {
+				@Override
+				@Deprecated
+				protected void onPreExecute() {
+					GenericProgressDialog.newInstance(R.string.decoding_message, R.string.please_wait).show(getSupportFragmentManager(), DIALOG_TAG_DECRYPTING_MESSAGES);
+				}
 
-		@Override
-		public MessageType[] types() { return null; }
+				@Override
+				protected Void doInBackground(Void... voids) {
+					fileService.loadDecryptedMessageFiles(mediaGalleryAdapter.getCheckedItems(), new FileService.OnDecryptedFilesComplete() {
+						@Override
+						public void complete(ArrayList<Uri> uris) {
+							shareMediaMessages(uris);
+						}
 
-		@Override
-		@MessageContentsType
-		public int[] contentTypes() {
-			return this.filter;
+						@Override
+						public void error(String message) {
+							RuntimeUtil.runOnUiThread(() -> Toast.makeText(MediaGalleryActivity.this, message, Toast.LENGTH_LONG).show());
+						}
+					});
+					return null;
+				}
+
+				@Override
+				@Deprecated
+				protected void onPostExecute(Void aVoid) {
+					DialogUtil.dismissDialog(getSupportFragmentManager(), DIALOG_TAG_DECRYPTING_MESSAGES, true);
+				}
+			}.execute();
+		}
+
+		private void shareMediaMessages(List<Uri> uris) {
+			List<AbstractMessageModel> selectedMessages = mediaGalleryAdapter.getCheckedItems();
+			if (uris.size() == 1) {
+				ExpandableTextEntryDialog alertDialog = ExpandableTextEntryDialog.newInstance(
+					getString(R.string.share_media),
+					R.string.add_caption_hint, selectedMessages.get(0).getCaption(),
+					R.string.label_continue, R.string.cancel, true);
+				alertDialog.setData(uris);
+				alertDialog.show(getSupportFragmentManager(), null);
+			} else {
+				messageService.shareMediaMessages(MediaGalleryActivity.this,
+					new ArrayList<>(selectedMessages),
+					new ArrayList<>(uris), null);
+			}
 		}
 	}
 
@@ -217,82 +263,15 @@ public class MediaGalleryActivity extends ThreemaToolbarActivity implements Adap
 	protected boolean initActivity(Bundle savedInstanceState) {
 		logger.debug("initActivity");
 
-		// set font size according to user preferences
-		getTheme().applyStyle(preferenceService.getFontStyle(), true);
-
 		if (!super.initActivity(savedInstanceState)) {
 			return false;
 		}
 
-		if (!this.requiredInstances()) {
-			this.finish();
+		if (!requiredInstances()) {
+			finish();
 			return false;
 		}
 
-		currentType = TYPE_ALL;
-
-		this.gridView = findViewById(R.id.item_list);
-		this.gridView.setChoiceMode(AbsListView.CHOICE_MODE_MULTIPLE_MODAL);
-		this.gridView.setMultiChoiceModeListener(new AbsListView.MultiChoiceModeListener() {
-			@Override
-			public void onItemCheckedStateChanged(android.view.ActionMode mode, int position, long id, boolean checked) {
-				final int count = gridView.getCheckedItemCount();
-				if (count > 0) {
-					mode.setTitle(Integer.toString(count));
-				}
-				if (actionMode != null) {
-					actionMode.getMenu().findItem(R.id.menu_show_in_chat).setVisible(count == 1);
-				}
-			}
-
-			@Override
-			public boolean onCreateActionMode(android.view.ActionMode mode, Menu menu) {
-				mode.getMenuInflater().inflate(R.menu.action_media_gallery, menu);
-				actionMode = mode;
-
-				ConfigUtils.themeMenu(menu, ConfigUtils.getColorFromAttribute(MediaGalleryActivity.this, R.attr.colorAccent));
-
-				if (AppRestrictionUtil.isShareMediaDisabled(MediaGalleryActivity.this)) {
-					menu.findItem(R.id.menu_message_save).setVisible(false);
-				}
-
-				return true;
-			}
-
-			@Override
-			public boolean onPrepareActionMode(android.view.ActionMode mode, Menu menu) {
-				mode.setTitle(Integer.toString(gridView.getCheckedItemCount()));
-				return false;
-			}
-
-			@Override
-			public boolean onActionItemClicked(android.view.ActionMode mode, MenuItem item) {
-				switch (item.getItemId()) {
-					case R.id.menu_message_discard:
-						discardMessages();
-						return true;
-					case R.id.menu_message_save:
-						saveMessages();
-						return true;
-					case R.id.menu_show_in_chat:
-						showInChat();
-						return true;
-					default:
-						return false;
-				}
-			}
-
-			@Override
-			public void onDestroyActionMode(android.view.ActionMode mode) {
-				actionMode = null;
-			}
-		});
-		this.gridView.setOnItemClickListener(this);
-		this.gridView.setNumColumns(ConfigUtils.isLandscape(this) ? 5 : 3);
-		this.gridView.setScrollListener(this);
-
-		processIntent(getIntent());
-
 		ActionBar actionBar = getSupportActionBar();
 		if (actionBar == null) {
 			logger.debug("no action bar");
@@ -300,54 +279,97 @@ public class MediaGalleryActivity extends ThreemaToolbarActivity implements Adap
 			return false;
 		}
 		actionBar.setDisplayHomeAsUpEnabled(true);
-		actionBar.setDisplayShowTitleEnabled(false);
+		actionBar.setTitle(processIntent(getIntent()));
 
-		// add text view if contact list is empty
-		this.mediaTypeArray = getResources().obtainTypedArray(R.array.media_gallery_spinner);
-		this.spinnerAdapter = new MediaGallerySpinnerAdapter(
-				actionBar.getThemedContext(), getResources().getStringArray(R.array.media_gallery_spinner),
-				this.actionBarTitle);
+		chipGroup = findViewById(R.id.chip_group);
+		chipGroup.getLayoutTransition().enableTransitionType(LayoutTransition.CHANGE_DISAPPEARING|LayoutTransition.CHANGE_APPEARING|LayoutTransition.APPEARING|LayoutTransition.DISAPPEARING);
 
-		actionBar.setNavigationMode(ActionBar.NAVIGATION_MODE_LIST);
-		actionBar.setListNavigationCallbacks(spinnerAdapter, this);
-		actionBar.setSelectedNavigationItem(this.currentType);
+		contentTypeNames = getResources().getStringArray(R.array.media_gallery_spinner);
+		Arrays.fill(checkedContentTypes, true);
 
-		this.spinnerMessageFilter = new SpinnerMessageFilter();
-		this.spinnerMessageFilter.setFilterByType(this.currentType);
-		this.thumbnailCache = new ThumbnailCache<Integer>(null);
+		gridLayoutManager = new GridLayoutManager(this, ConfigUtils.isLandscape(this) ? 5 : 3);
+		recyclerView = findViewById(R.id.item_list);
 
-		FrameLayout frameLayout = findViewById(R.id.frame_parent);
-
-		this.emptyView = new EmptyView(this);
-		this.emptyView.setColorsInt(ConfigUtils.getColorFromAttribute(this, android.R.attr.windowBackground), ConfigUtils.getColorFromAttribute(this, R.attr.textColorPrimary));
-		this.emptyView.setup(getString(R.string.no_media_found_generic));
+		final int borderSize = (int) ((float) getResources().getDimensionPixelSize(R.dimen.grid_spacing) * 1.5F);
+		final int cornerRadius = getResources().getDimensionPixelSize(R.dimen.cardview_border_radius);
+		final ViewOutlineProvider viewOutlineProvider = new ViewOutlineProvider() {
+			@Override
+			public void getOutline(View view, Outline outline) {
+				outline.setRoundRect(borderSize, 0, view.getWidth() - borderSize, view.getHeight() + cornerRadius , cornerRadius);;
+			}
+		};
+
+		recyclerView.setOutlineProvider(viewOutlineProvider);
+		recyclerView.setClipToOutline(true);
+		recyclerView.setLayoutManager(gridLayoutManager);
+		recyclerView.addItemDecoration(new MediaGridItemDecoration(getResources().getDimensionPixelSize(R.dimen.grid_spacing)));
+
+		EmptyView emptyView = new EmptyView(this);
+		emptyView.setColorsInt(ConfigUtils.getColorFromAttribute(this, android.R.attr.colorBackground), ConfigUtils.getColorFromAttribute(this, R.attr.colorOnBackground));
+		emptyView.setup(getString(R.string.no_media_found_generic));
+		((ViewGroup) recyclerView.getParent()).addView(emptyView);
+		recyclerView.setEmptyView(emptyView);
+		mediaGalleryAdapter = new MediaGalleryAdapter(this, this, messageReceiver, gridLayoutManager.getSpanCount());
+		recyclerView.setAdapter(mediaGalleryAdapter);
+
+		final Observer<List<AbstractMessageModel>> messageObserver = abstractMessageModels -> {
+			mediaGalleryAdapter.setItems(abstractMessageModels);
+			if (actionMode != null) {
+				actionMode.invalidate();
+			}
+		};
+
+		if (fastScroller == null) {
+			Drawable thumbDrawable = ResourcesCompat.getDrawable(getResources(), R.drawable.ic_thumbscroller, getTheme());
+			fastScroller = new FastScrollerBuilder(recyclerView)
+				.setThumbDrawable(Objects.requireNonNull(thumbDrawable))
+				.setTrackDrawable(Objects.requireNonNull(AppCompatResources.getDrawable(this, R.drawable.fastscroll_track_media)))
+				.setPopupStyle(thumbScrollerPopupStyle)
+				.setPopupTextProvider(position -> {
+						int firstVisible = gridLayoutManager.findFirstCompletelyVisibleItemPosition();
+						if (firstVisible >= 0) {
+							AbstractMessageModel item = mediaGalleryAdapter.getItemAtPosition(firstVisible);
+							if (item != null) {
+								return LocaleUtil.formatDateRelative(item.getCreatedAt().getTime());
+							}
+						}
+						return getString(R.string.unknown);
+					})
+				.build();
+		}
 
-		frameLayout.addView(this.emptyView);
-		this.gridView.setEmptyView(this.emptyView);
+		MediaGalleryViewModel.MediaGalleryViewModelFactory viewModelFactory = new MediaGalleryViewModel.MediaGalleryViewModelFactory(messageReceiver);
+		mediaGalleryViewModel = new ViewModelProvider(this, viewModelFactory).get(MediaGalleryViewModel.class);
+		mediaGalleryViewModel.getAbstractMessageModels().observe(this, messageObserver);
+		mediaGalleryViewModel.setFilter(null);
 
-		this.dateView = findViewById(R.id.date_separator_container);
-		this.dateTextView = findViewById(R.id.text_view);
+		refreshChipGroup();
 
-		if (savedInstanceState == null || mediaGalleryAdapter == null) {
-			setupAdapters(this.currentType, true);
+		if (initialMessageModel != null) {
+			recyclerView.post(() -> {
+				for (int position = 0; position < mediaGalleryAdapter.getItemCount(); position++) {
+					AbstractMessageModel messageModel = mediaGalleryAdapter.getItemAtPosition(position);
+					if (messageModel != null && messageModel.getId() == initialMessageModel.getId()) {
+						gridLayoutManager.scrollToPosition(position);
+						break;
+					}
+				}
+				initialMessageModel = null;
+			});
 		}
-
 		return true;
 	}
 
 	private void showInChat() {
-		if (getSelectedMessages().size() != 1) {
+		if (mediaGalleryAdapter.getCheckedItemsCount() != 1) {
 			return;
 		}
-		AnimationUtil.startActivityForResult(this, null, IntentDataUtil.getJumpToMessageIntent(this, getSelectedMessages().get(0)), ThreemaActivity.ACTIVITY_ID_COMPOSE_MESSAGE);
+		startActivityForResult(IntentDataUtil.getJumpToMessageIntent(this, mediaGalleryAdapter.getCheckedItemAt(0)), ThreemaActivity.ACTIVITY_ID_COMPOSE_MESSAGE);
 		finish();
 	}
 
 	@Override
 	protected void onDestroy() {
-		if (this.thumbnailCache != null) {
-			this.thumbnailCache.flush();
-		}
 		super.onDestroy();
 	}
 
@@ -355,29 +377,28 @@ public class MediaGalleryActivity extends ThreemaToolbarActivity implements Adap
 	public boolean onCreateOptionsMenu(Menu menu) {
 		super.onCreateOptionsMenu(menu);
 
-		// Inflate the menu; this adds items to the action bar if it is present.
 		getMenuInflater().inflate(R.menu.activity_media_gallery, menu);
 		return true;
 	}
 
 	@Override
 	public boolean onOptionsItemSelected(MenuItem item) {
-		switch (item.getItemId()) {
-			case android.R.id.home:
-				finish();
-				break;
-			case R.id.menu_message_select_all:
-				selectAllMessages();
-				break;
+		int itemId = item.getItemId();
+		if (itemId == android.R.id.home) {
+			finish();
+		} else if (itemId == R.id.menu_message_filter) {
+			MultiChoiceSelectorDialog.newInstance(getString(R.string.select), contentTypeNames, checkedContentTypes).show(getSupportFragmentManager(), DIALOG_TAG_TYPE_SELECTOR);
 		}
 		return true;
 	}
 
-	private void processIntent(Intent intent) {
+	private @Nullable String processIntent(Intent intent) {
+		String actionBarTitle;
+
 		if (intent.hasExtra(ThreemaApplication.INTENT_DATA_GROUP)) {
 			int groupId = intent.getIntExtra(ThreemaApplication.INTENT_DATA_GROUP, 0);
-			GroupModel groupModel = this.groupService.getById(groupId);
-			messageReceiver = this.groupService.createReceiver(groupModel);
+			GroupModel groupModel = groupService.getById(groupId);
+			messageReceiver = groupService.createReceiver(groupModel);
 			actionBarTitle = groupModel.getName();
 		} else if (intent.hasExtra(ThreemaApplication.INTENT_DATA_DISTRIBUTION_LIST)) {
 			DistributionListModel distributionListModel = distributionListService.getById(intent.getLongExtra(ThreemaApplication.INTENT_DATA_DISTRIBUTION_LIST, 0));
@@ -392,8 +413,8 @@ public class MediaGalleryActivity extends ThreemaToolbarActivity implements Adap
 			if (identity == null) {
 				finish();
 			}
-			ContactModel contactModel = this.contactService.getByIdentity(identity);
-			messageReceiver = this.contactService.createReceiver(contactModel);
+			ContactModel contactModel = contactService.getByIdentity(identity);
+			messageReceiver = contactService.createReceiver(contactModel);
 			actionBarTitle = NameUtil.getDisplayNameOrNickname(contactModel, true);
 		}
 
@@ -404,136 +425,17 @@ public class MediaGalleryActivity extends ThreemaToolbarActivity implements Adap
 		if (type != null && id != 0) {
 			initialMessageModel = messageService.getMessageModelFromId(id, type);
 		}
-	}
-
-	private void setupAdapters(int newType, boolean force) {
-		if (this.currentType != newType || force) {
-			this.values = this.getMessages(this.messageReceiver);
-			if (this.values == null || this.values.isEmpty()) {
-				if (this.emptyView != null) {
-					if (newType == TYPE_ALL) {
-						this.emptyView.setup(getString(R.string.no_media_found_generic));
-					} else {
-						this.emptyView.setup(String.format(getString(R.string.no_media_found), getString(this.mediaTypeArray.getResourceId(newType, -1))));
-					}
-				}
-			}
-
-			this.mediaGalleryAdapter = new MediaGalleryAdapter(
-					this,
-					values,
-					this.fileService,
-					this.thumbnailCache
-			);
-
-			this.gridView.setAdapter(this.mediaGalleryAdapter);
-			if (initialMessageModel != null) {
-				this.gridView.post(new Runnable() {
-					@Override
-					public void run() {
-						for(int position = 0; position < values.size(); position++) {
-							if (values.get(position).getId() == initialMessageModel.getId()) {
-								gridView.setSelection(position);
-								break;
-							}
-						}
-						initialMessageModel = null;
-					}
-				});
-			}
-		}
-		this.currentType = newType;
-		resetSpinnerAdapter(newType);
-	}
-
-	private void resetSpinnerAdapter(int type) {
-		if (this.spinnerAdapter != null && this.mediaTypeArray != null && this.values != null) {
-			this.spinnerAdapter.setSubtitle(getString(this.mediaTypeArray.getResourceId(type, -1)) + " (" + this.values.size() + ")");
-			this.spinnerAdapter.notifyDataSetChanged();
-		}
-	}
-
-	private List<AbstractMessageModel> getMessages(MessageReceiver<AbstractMessageModel> receiver) {
-		List<AbstractMessageModel> values = null;
-		try {
-			values = receiver.loadMessages(this.spinnerMessageFilter);
-		} catch (SQLException e) {
-			logger.error("Exception", e);
-		}
-		return values;
-	}
-
-	@Override
-	public void onItemClick(AdapterView<?> parent, final View view, int position, long id) {
-			final AbstractMessageModel m = this.mediaGalleryAdapter.getItem(position);
-			ProgressBar progressBar = view.findViewById(R.id.progress_decoding);
-
-			switch (mediaGalleryAdapter.getItemViewType(position)) {
-				case MediaGalleryAdapter.TYPE_IMAGE:
-					// internal viewer
-					showInMediaFragment(m, view);
-					break;
-				case MediaGalleryAdapter.TYPE_VIDEO:
-					showInMediaFragment(m, view);
-					break;
-				case MediaGalleryAdapter.TYPE_AUDIO:
-					showInMediaFragment(m, view);
-					break;
-				case MediaGalleryAdapter.TYPE_FILE:
-					if (m!= null && (FileUtil.isImageFile(m.getFileData()) || FileUtil.isVideoFile(m.getFileData()) || FileUtil.isAudioFile(m.getFileData()))) {
-						showInMediaFragment(m, view);
-					} else {
-						decodeAndShowFile(m, view, progressBar);
-					}
-					break;
-			}
-	}
-
-	@Override
-	public boolean onNavigationItemSelected(int itemPosition, long itemId) {
-		this.spinnerMessageFilter.setFilterByType(itemPosition);
-		setupAdapters(itemPosition, false);
-
-		return true;
-	}
-
-	@Override
-	public void onScroll(int firstVisibleItem) {
-		if (this.mediaGalleryAdapter != null) {
-			if (dateView.getVisibility() != View.VISIBLE && mediaGalleryAdapter != null && mediaGalleryAdapter.getCount() > 0) {
-				AnimationUtil.slideInAnimation(dateView, false, 200);
-			}
-
-			dateViewHandler.removeCallbacks(dateViewTask);
-			dateViewHandler.postDelayed(dateViewTask, SCROLLBUTTON_VIEW_TIMEOUT);
 
-			try {
-				final AbstractMessageModel messageModel = this.mediaGalleryAdapter.getItem(firstVisibleItem);
-				if (messageModel != null) {
-					final Date createdAt = messageModel.getCreatedAt();
-					if (createdAt != null) {
-						dateView.post(() -> {
-							dateTextView.setText(LocaleUtil.formatDateRelative(createdAt.getTime()));
-						});
-					}
-				}
-			} catch (IndexOutOfBoundsException ignore) {}
-		}
+		return actionBarTitle;
 	}
 
 	private void selectAllMessages() {
-		if (gridView != null) {
-			if (gridView.getCount() == gridView.getCheckedItemCount()) {
-				if (actionMode != null) {
+		if (mediaGalleryAdapter != null) {
+			mediaGalleryAdapter.selectAll();
+			if (actionMode != null) {
+				if (mediaGalleryAdapter.getCheckedItemsCount() == 0) {
 					actionMode.finish();
-				}
-			} else {
-				for (int i = 0; i < gridView.getCount(); i++) {
-					if (currentType == TYPE_ALL || mediaGalleryAdapter.getItemViewType(i) == currentType) {
-						gridView.setItemChecked(i, true);
-					}
-				}
-				if (actionMode != null) {
+				} else {
 					actionMode.invalidate();
 				}
 			}
@@ -541,7 +443,7 @@ public class MediaGalleryActivity extends ThreemaToolbarActivity implements Adap
 	}
 
 	private void discardMessages() {
-		List<AbstractMessageModel> selectedMessages = getSelectedMessages();
+		List<AbstractMessageModel> selectedMessages = mediaGalleryAdapter.getCheckedItems();
 		GenericAlertDialog dialog = GenericAlertDialog.newInstance(R.string.really_delete_message_title, String.format(getString(R.string.really_delete_media), selectedMessages.size()), R.string.delete_message, R.string.cancel);
 		dialog.setData(selectedMessages);
 		dialog.show(getSupportFragmentManager(), DELETE_MESSAGES_CONFIRM_TAG);
@@ -549,49 +451,42 @@ public class MediaGalleryActivity extends ThreemaToolbarActivity implements Adap
 
 	private void saveMessages() {
 		if (ConfigUtils.requestWriteStoragePermissions(this, null, PERMISSION_REQUEST_SAVE_MESSAGE)) {
-			fileService.saveMedia(this, gridView, new CopyOnWriteArrayList<>(getSelectedMessages()), true);
+			fileService.saveMedia(this, recyclerView, new CopyOnWriteArrayList<>(mediaGalleryAdapter.getCheckedItems()), true);
 			actionMode.finish();
 		}
 	}
 
-	private List<AbstractMessageModel> getSelectedMessages() {
-		List<AbstractMessageModel> selectedMessages = new ArrayList<>();
-		SparseBooleanArray checkedItems = gridView.getCheckedItemPositions();
-
-		final int size = checkedItems.size();
-		for (int i = 0; i < size; i++) {
-			final int index = checkedItems.keyAt(i);
+	@Override
+	public void onYes(String tag, Object data, String text) {
+		List<Uri> uris = (List<Uri>) data;
+		messageService.shareMediaMessages(this,
+			new ArrayList<>(mediaGalleryAdapter.getCheckedItems()),
+			new ArrayList<>(uris), text);
+	}
 
-			if (checkedItems.valueAt(i)) {
-				selectedMessages.add(mediaGalleryAdapter.getItem(index));
-			}
-		}
-		return selectedMessages;
+	@Override
+	public void onNo(String tag) {
+		// Nothing to do here
 	}
 
 	@SuppressLint("StaticFieldLeak")
 	private void reallyDiscardMessages(final CopyOnWriteArrayList<AbstractMessageModel> selectedMessages) {
-		new AsyncTask<Void, Integer, Integer>() {
+		new AsyncTask<Void, Integer, List<AbstractMessageModel>>() {
 			boolean cancelled = false;
 
 			@Override
 			protected void onPreExecute() {
 				if (selectedMessages.size() > 10) {
 					CancelableHorizontalProgressDialog dialog = CancelableHorizontalProgressDialog.newInstance(R.string.deleting_messages, 0, R.string.cancel, selectedMessages.size());
-					dialog.setOnCancelListener(new DialogInterface.OnClickListener() {
-						@Override
-						public void onClick(DialogInterface dialog, int which) {
-							cancelled = true;
-						}
-					});
+					dialog.setOnCancelListener((dialog1, which) -> cancelled = true);
 					dialog.show(getSupportFragmentManager(), DIALOG_TAG_DELETING_MEDIA);
 				}
 			}
 
 			@Override
-			protected Integer doInBackground(Void... params) {
+			protected List<AbstractMessageModel> doInBackground(Void... params) {
 				int i = 0;
-				int deleted = 0;
+				List<AbstractMessageModel> deletedMessages = new ArrayList<>();
 				Iterator<AbstractMessageModel> checkedItemsIterator = selectedMessages.iterator();
 				while (checkedItemsIterator.hasNext() && !cancelled) {
 					publishProgress(i++);
@@ -599,31 +494,25 @@ public class MediaGalleryActivity extends ThreemaToolbarActivity implements Adap
 						final AbstractMessageModel messageModel = checkedItemsIterator.next();
 
 						if (messageModel != null) {
+							deletedMessages.add(messageModel);
 							messageService.remove(messageModel);
-							deleted++;
-						 	RuntimeUtil.runOnUiThread(new Runnable() {
-								@Override
-								public void run() {
-									mediaGalleryAdapter.remove(messageModel);
-								}
-							});
 						}
 					} catch (Exception e) {
 						logger.error("Exception", e);
 					}
 				}
-				return deleted;
+				return deletedMessages;
 			}
 
 			@Override
-			protected void onPostExecute(Integer deletedMessages) {
+			protected void onPostExecute(List<AbstractMessageModel> deletedMessages) {
+				mediaGalleryAdapter.removeItems(deletedMessages);
 				DialogUtil.dismissDialog(getSupportFragmentManager(), DIALOG_TAG_DELETING_MEDIA, true);
-				String text = ConfigUtils.getSafeQuantityString(gridView.getContext(), R.plurals.message_deleted, deletedMessages, deletedMessages);
-				Snackbar.make(gridView, text, Snackbar.LENGTH_LONG).show();
+				String text = ConfigUtils.getSafeQuantityString(recyclerView.getContext(), R.plurals.message_deleted, deletedMessages.size(), deletedMessages.size());
+				Snackbar.make(recyclerView, text, Snackbar.LENGTH_LONG).show();
 				if (actionMode != null) {
 					actionMode.finish();
 				}
-				resetSpinnerAdapter(currentType);
 			}
 
 			@Override
@@ -633,56 +522,49 @@ public class MediaGalleryActivity extends ThreemaToolbarActivity implements Adap
 		}.execute();
 	}
 
-	@Override
-	public void onYes(String tag, Object data) {
-		reallyDiscardMessages(new CopyOnWriteArrayList<>((ArrayList< AbstractMessageModel>) data));
-	}
-
-	@Override
-	public void onNo(String tag, Object data) {
-	}
-
 	@Override
 	public void onConfigurationChanged(@NonNull Configuration newConfig) {
 		final int topmost;
-		if (this.gridView != null) {
-			View topChild = this.gridView.getChildAt(0);
-			if (topChild != null) {
-				if (topChild.getTop() < 0) {
-					topmost = this.gridView.getFirstVisiblePosition() + 1;
-				} else {
-					topmost = this.gridView.getFirstVisiblePosition();
-				}
-			} else {
-				topmost = 0;
-			}
+		if (gridLayoutManager != null) {
+			topmost = gridLayoutManager.findFirstCompletelyVisibleItemPosition();
 		} else {
 			topmost = 0;
 		}
 
 		super.onConfigurationChanged(newConfig);
 
-		if (this.gridView != null) {
-			this.gridView.post(() -> {
-				gridView.setNumColumns(ConfigUtils.isLandscape(MediaGalleryActivity.this) ? 5 : 3);
-				gridView.setSelection(topmost);
+		if (recyclerView != null) {
+			recyclerView.post(() -> {
+				if (gridLayoutManager != null) {
+					gridLayoutManager.setSpanCount(ConfigUtils.isLandscape(MediaGalleryActivity.this) ? 5 : 3);
+					gridLayoutManager.scrollToPosition(topmost);
+				}
 			});
 		}
 	}
 
-	private void hideProgressBar(final ProgressBar progressBar) {
+	@Override
+	public void onBackPressed() {
+		if (actionMode != null) {
+			actionMode.finish();
+		} else {
+			super.onBackPressed();
+		}
+	}
+
+	private void hideProgressBar(final CircularProgressIndicator progressBar) {
 		if (progressBar != null) {
 		 	RuntimeUtil.runOnUiThread(() -> progressBar.setVisibility(View.GONE));
 		}
 	}
 
-	private void showProgressBar(final ProgressBar progressBar) {
+	private void showProgressBar(final CircularProgressIndicator progressBar) {
 		if (progressBar != null) {
 		 	RuntimeUtil.runOnUiThread(() -> progressBar.setVisibility(View.VISIBLE));
 		}
 	}
 
-	public void decodeAndShowFile(final AbstractMessageModel m, final View v, final ProgressBar progressBar) {
+	public void decryptAndShow(final AbstractMessageModel m, final View v, final CircularProgressIndicator progressBar) {
 		showProgressBar(progressBar);
 		fileService.loadDecryptedMessageFile(m, new FileService.OnDecryptedFileComplete() {
 			@Override
@@ -706,18 +588,18 @@ public class MediaGalleryActivity extends ThreemaToolbarActivity implements Adap
 		IntentDataUtil.append(m, intent);
 		intent.putExtra(MediaViewerActivity.EXTRA_ID_IMMEDIATE_PLAY, true);
 		intent.putExtra(MediaViewerActivity.EXTRA_ID_REVERSE_ORDER, false);
-		intent.putExtra(MediaViewerActivity.EXTRA_FILTER, this.spinnerMessageFilter.contentTypes());
-		AnimationUtil.startActivityForResult(this, v, intent, ACTIVITY_ID_MEDIA_VIEWER);
+		intent.putExtra(MediaViewerActivity.EXTRA_FILTER, getMediaContentTypeArray());
+		startActivityForResult(intent, ACTIVITY_ID_MEDIA_VIEWER);
 	}
 
 	@Override
 	protected boolean checkInstances() {
 		return TestUtil.required(
-				this.fileService,
-				this.messageService,
-				this.groupService,
-				this.distributionListService,
-				this.contactService
+				fileService,
+				messageService,
+				groupService,
+				distributionListService,
+				contactService
 		) && super.checkInstances();
 	}
 
@@ -728,11 +610,11 @@ public class MediaGalleryActivity extends ThreemaToolbarActivity implements Adap
 		ServiceManager serviceManager = ThreemaApplication.getServiceManager();
 		if (serviceManager != null) {
 			try {
-				this.fileService = serviceManager.getFileService();
-				this.messageService = serviceManager.getMessageService();
-				this.groupService = serviceManager.getGroupService();
-				this.distributionListService = serviceManager.getDistributionListService();
-				this.contactService = serviceManager.getContactService();
+				fileService = serviceManager.getFileService();
+				messageService = serviceManager.getMessageService();
+				groupService = serviceManager.getGroupService();
+				distributionListService = serviceManager.getDistributionListService();
+				contactService = serviceManager.getContactService();
 			} catch (Exception e) {
 				LogUtil.exception(e, this);
 			}
@@ -748,19 +630,163 @@ public class MediaGalleryActivity extends ThreemaToolbarActivity implements Adap
 		if (grantResults.length > 0 && grantResults[0] == PackageManager.PERMISSION_GRANTED) {
 			switch (requestCode) {
 				case PERMISSION_REQUEST_SAVE_MESSAGE:
-					fileService.saveMedia(this, gridView, new CopyOnWriteArrayList<>(getSelectedMessages()), true);
+					fileService.saveMedia(this, recyclerView, new CopyOnWriteArrayList<>(mediaGalleryAdapter.getCheckedItems()), true);
 					break;
 			}
 		} else {
 			switch (requestCode) {
 				case PERMISSION_REQUEST_SAVE_MESSAGE:
 					if (!shouldShowRequestPermissionRationale(Manifest.permission.WRITE_EXTERNAL_STORAGE)) {
-						ConfigUtils.showPermissionRationale(this, gridView, R.string.permission_storage_required);
+						ConfigUtils.showPermissionRationale(this, recyclerView, R.string.permission_storage_required);
 					}
 					break;
 			}
 		}
 		actionMode.finish();
 	}
+
+	private void refreshChipGroup() {
+		chipGroup.removeAllViews();
+		for (int i = 0; i < checkedContentTypes.length; i++) {
+			if (checkedContentTypes[i]) {
+				Chip chip = (Chip) getLayoutInflater().inflate(
+					R.layout.chip_directory, null, false
+				);
+				chip.setText(contentTypeNames[i]);
+				chip.setTag(contentTypes[i]);
+				chip.setOnCloseIconClickListener(v -> {
+					int contentType = (int) v.getTag();
+					for (int j = 0; j < checkedContentTypes.length; j++) {
+						if (contentType == contentTypes[j]) {
+							checkedContentTypes[j] = false;
+							chipGroup.removeView(v);
+							updateFilter();
+							break;
+						}
+					}
+					if (chipGroup.getChildCount() == 0) {
+						finish();
+					}
+				});
+				chipGroup.addView(chip);
+			}
+		}
+		updateFilter();
+	}
+
+	private void updateFilter() {
+		if (mediaGalleryAdapter != null && mediaGalleryViewModel != null) {
+			mediaGalleryViewModel.setFilter(getMediaContentTypeArray());
+		}
+	}
+
+	private @Nullable int[] getMediaContentTypeArray() {
+		int[] contentTypeList = new int[checkedContentTypes.length];
+		int n = 0;
+		for(int i = 0; i < checkedContentTypes.length; i++) {
+			if (checkedContentTypes[i]) {
+				contentTypeList[n++] = contentTypes[i];
+			}
+		}
+
+		return n > 0 ? Arrays.copyOfRange(contentTypeList, 0, n) : null;
+	}
+
+	@Override
+	public void onYes(String tag, Object data) {
+		reallyDiscardMessages(new CopyOnWriteArrayList<>((ArrayList< AbstractMessageModel>) data));
+	}
+
+	@Override
+	public void onYes(String tag, boolean[] checkedItems) {
+		int n = 0;
+		for (boolean checkedItem: checkedItems) {
+			if (checkedItem) {
+				n++;
+				break;
+			}
+		}
+
+		if (n == 0) {
+			finish();
+			return;
+		}
+
+		checkedContentTypes = checkedItems;
+		refreshChipGroup();
+	}
+
+	@Override
+	public void onClick(@Nullable AbstractMessageModel messageModel, @Nullable View view, int position) {
+		if (actionMode != null) {
+			mediaGalleryAdapter.toggleChecked(position);
+			if (mediaGalleryAdapter.getCheckedItemsCount() > 0) {
+				if (actionMode != null) {
+					actionMode.invalidate();
+				}
+			} else {
+				actionMode.finish();
+			}
+		} else {
+			if (messageModel != null) {
+				if (view != null) {
+					CircularProgressIndicator progressBar = view.findViewById(R.id.progress_decoding);
+
+					switch (messageModel.getMessageContentsType()) {
+						case MessageContentsType.IMAGE:
+						case MessageContentsType.VIDEO:
+						case MessageContentsType.VOICE_MESSAGE:
+						case MessageContentsType.AUDIO:
+						case MessageContentsType.GIF:
+							showInMediaFragment(messageModel, view);
+							break;
+						case MessageContentsType.FILE:
+							if ((FileUtil.isImageFile(messageModel.getFileData()) || FileUtil.isVideoFile(messageModel.getFileData()) || FileUtil.isAudioFile(messageModel.getFileData()))) {
+								showInMediaFragment(messageModel, view);
+							} else {
+								decryptAndShow(messageModel, view, progressBar);
+							}
+							break;
+						default:
+							break;
+					}
+				}
+			}
+		}
+	}
+
+	@Override
+	public boolean onLongClick(@Nullable AbstractMessageModel messageModel, @Nullable View itemView, int position) {
+		if (actionMode != null) {
+			actionMode.finish();
+		}
+		mediaGalleryAdapter.toggleChecked(position);
+		if (mediaGalleryAdapter.getCheckedItemsCount() > 0) {
+			actionMode = startSupportActionMode(new MediaGalleryAction());
+		}
+		return true;
+	}
+
+	/**
+	 * Check that no more than {@link ComposeMessageFragment#MAX_FORWARDABLE_ITEMS} are selected,
+	 * that all media is downloaded, and that sharing media is allowed.
+	 *
+	 * @return true if the items can be shared, false otherwise
+	 */
+	private boolean selectedItemsCanBeShared() {
+		if (AppRestrictionUtil.isShareMediaDisabled(MediaGalleryActivity.this)) {
+			return false;
+		}
+		if (mediaGalleryAdapter.getCheckedItemsCount() > ComposeMessageFragment.MAX_FORWARDABLE_ITEMS) {
+			return false;
+		}
+		for (AbstractMessageModel message : mediaGalleryAdapter.getCheckedItems()) {
+			if (!message.isAvailable()) {
+				return false;
+			}
+		}
+		return true;
+	}
+
 }
 
diff --git a/app/src/main/java/ch/threema/app/activities/MediaViewerActivity.java b/app/src/main/java/ch/threema/app/activities/MediaViewerActivity.java
index 6c5a4e36..879f66aa 100644
--- a/app/src/main/java/ch/threema/app/activities/MediaViewerActivity.java
+++ b/app/src/main/java/ch/threema/app/activities/MediaViewerActivity.java
@@ -21,7 +21,6 @@
 
 package ch.threema.app.activities;
 
-
 import android.Manifest;
 import android.annotation.SuppressLint;
 import android.content.Intent;
@@ -48,7 +47,9 @@ import androidx.annotation.NonNull;
 import androidx.appcompat.app.ActionBar;
 import androidx.appcompat.view.menu.MenuBuilder;
 import androidx.core.app.ActivityCompat;
+import androidx.core.graphics.Insets;
 import androidx.core.view.ViewCompat;
+import androidx.core.view.WindowInsetsCompat;
 import androidx.fragment.app.Fragment;
 import androidx.fragment.app.FragmentManager;
 import androidx.fragment.app.FragmentStatePagerAdapter;
@@ -69,6 +70,7 @@ import ch.threema.app.dialogs.ExpandableTextEntryDialog;
 import ch.threema.app.emojis.EmojiMarkupUtil;
 import ch.threema.app.fragments.mediaviews.AudioViewFragment;
 import ch.threema.app.fragments.mediaviews.FileViewFragment;
+import ch.threema.app.fragments.mediaviews.GifViewFragment;
 import ch.threema.app.fragments.mediaviews.ImageViewFragment;
 import ch.threema.app.fragments.mediaviews.MediaPlayerViewFragment;
 import ch.threema.app.fragments.mediaviews.MediaViewFragment;
@@ -78,7 +80,6 @@ import ch.threema.app.services.ContactService;
 import ch.threema.app.services.FileService;
 import ch.threema.app.services.MessageService;
 import ch.threema.app.ui.LockableViewPager;
-import ch.threema.app.utils.AnimationUtil;
 import ch.threema.app.utils.AppRestrictionUtil;
 import ch.threema.app.utils.ConfigUtils;
 import ch.threema.app.utils.FileUtil;
@@ -96,7 +97,6 @@ import ch.threema.storage.models.GroupMessageModel;
 import ch.threema.storage.models.MessageType;
 import ch.threema.storage.models.data.MessageContentsType;
 
-
 public class MediaViewerActivity extends ThreemaToolbarActivity implements
 	ExpandableTextEntryDialog.ExpandableTextEntryDialogClickListener {
 
@@ -109,9 +109,9 @@ public class MediaViewerActivity extends ThreemaToolbarActivity implements
 	public static final String EXTRA_ID_IMMEDIATE_PLAY = "play";
 	public static final String EXTRA_ID_REVERSE_ORDER = "reverse";
 	public static final String EXTRA_FILTER = "filter";
+	public static final String EXTRA_IS_VOICEMESSAGE = "vm";
 
 	private LockableViewPager pager;
-
 	private File currentMediaFile;
 	private ActionBar actionBar;
 
@@ -172,24 +172,29 @@ public class MediaViewerActivity extends ThreemaToolbarActivity implements
 		this.actionBar.setTitle(" ");
 
 		ViewCompat.setOnApplyWindowInsetsListener(getToolbar(), (v, insets) -> {
+			Insets systemInsets = insets.getInsets(WindowInsetsCompat.Type.systemBars());
+
 			FrameLayout.LayoutParams lp = (FrameLayout.LayoutParams) v.getLayoutParams();
-			lp.topMargin = insets.getSystemWindowInsetTop();
-			lp.leftMargin = insets.getSystemWindowInsetLeft();
-			lp.rightMargin = insets.getSystemWindowInsetRight();
+			lp.topMargin = systemInsets.top;
+			lp.leftMargin = systemInsets.left;
+			lp.rightMargin = systemInsets.right;
 			v.setLayoutParams(lp);
 
 			return insets;
 		});
-		getToolbar().setTitleTextAppearance(this, R.style.TextAppearance_MediaViewer_Title);
-		getToolbar().setSubtitleTextAppearance(this, R.style.TextAppearance_MediaViewer_SubTitle);
+		getToolbar().setTitleTextAppearance(this, R.style.Threema_TextAppearance_MediaViewer_Title);
+		getToolbar().setSubtitleTextAppearance(this, R.style.Threema_TextAppearance_MediaViewer_SubTitle);
 
 		this.caption = findViewById(R.id.caption);
 
 		this.captionContainer = findViewById(R.id.caption_container);
 		ViewCompat.setOnApplyWindowInsetsListener(this.captionContainer, (v, insets) -> {
-			FrameLayout.LayoutParams params = (FrameLayout.LayoutParams) v.getLayoutParams();
-			params.setMargins(insets.getSystemWindowInsetLeft(), 0, insets.getSystemWindowInsetRight(), insets.getSystemWindowInsetBottom() + getResources().getDimensionPixelSize(R.dimen.mediaviewer_caption_border_bottom));
-			v.setLayoutParams(params);
+			Insets systemInsets = insets.getInsets(WindowInsetsCompat.Type.systemBars());
+			FrameLayout.LayoutParams lp = (FrameLayout.LayoutParams) v.getLayoutParams();
+			lp.leftMargin =	systemInsets.left + getResources().getDimensionPixelSize(R.dimen.mediaviewer_caption_border_horizontal);
+			lp.rightMargin = systemInsets.right + getResources().getDimensionPixelSize(R.dimen.mediaviewer_caption_border_horizontal);
+			lp.bottomMargin = systemInsets.bottom + getResources().getDimensionPixelSize(R.dimen.mediaviewer_caption_border_bottom);
+			v.setLayoutParams(lp);
 
 			return insets;
 		});
@@ -501,7 +506,7 @@ public class MediaViewerActivity extends ThreemaToolbarActivity implements
 		if (messageModel == null) {
 			return;
 		}
-		AnimationUtil.startActivityForResult(this, null, IntentDataUtil.getJumpToMessageIntent(this, messageModel), ThreemaActivity.ACTIVITY_ID_COMPOSE_MESSAGE);
+		startActivityForResult(IntentDataUtil.getJumpToMessageIntent(this, messageModel), ThreemaActivity.ACTIVITY_ID_COMPOSE_MESSAGE);
 		finish();
 	}
 
@@ -606,7 +611,6 @@ public class MediaViewerActivity extends ThreemaToolbarActivity implements
 	}
 
 	private void attachAdapter() {
-		//reset adapter!
 		PagerAdapter pageAdapter = new ScreenSlidePagerAdapter(this, getSupportFragmentManager());
 		this.pager.setAdapter(pageAdapter);
 		this.pager.setCurrentItem(this.currentPosition);
@@ -696,7 +700,9 @@ public class MediaViewerActivity extends ThreemaToolbarActivity implements
 						break;
 					case FILE:
 						String mimeType = messageModel.getFileData().getMimeType();
-						if (MimeUtil.isImageFile(mimeType)) {
+						if (MimeUtil.isGifFile(mimeType)) {
+							f = new GifViewFragment();
+						} else if (MimeUtil.isImageFile(mimeType)) {
 							f = new ImageViewFragment();
 						} else if (MimeUtil.isVideoFile(mimeType)) {
 							f = new VideoViewFragment();
@@ -704,6 +710,7 @@ public class MediaViewerActivity extends ThreemaToolbarActivity implements
 							if (MimeUtil.isMidiFile(mimeType) || MimeUtil.isFlacFile(mimeType)) {
 								f = new MediaPlayerViewFragment();
 							} else {
+								args.putBoolean(EXTRA_IS_VOICEMESSAGE, messageModel.getMessageContentsType() == MessageContentsType.VOICE_MESSAGE);
 								f = new AudioViewFragment();
 							}
 						} else {
@@ -720,18 +727,6 @@ public class MediaViewerActivity extends ThreemaToolbarActivity implements
 				args.putInt("position", position);
 				f.setArguments(args);
 
-				//lock page if media is open (image open = zoom)
-				f.setOnMediaOpenListener(new MediaViewFragment.OnMediaOpenListener() {
-					@Override
-					public void closed() {
-						a.pager.lock(false);
-					}
-
-					@Override
-					public void open() {
-						a.pager.lock(true);
-					}
-				});
 				f.setOnImageLoaded(new MediaViewFragment.OnMediaLoadListener() {
 					@Override
 					public void decrypting() {
diff --git a/app/src/main/java/ch/threema/app/activities/MemberChooseActivity.java b/app/src/main/java/ch/threema/app/activities/MemberChooseActivity.java
index c9934a48..2fd64bbc 100644
--- a/app/src/main/java/ch/threema/app/activities/MemberChooseActivity.java
+++ b/app/src/main/java/ch/threema/app/activities/MemberChooseActivity.java
@@ -22,36 +22,41 @@
 package ch.threema.app.activities;
 
 import android.os.Bundle;
+import android.text.TextUtils;
 import android.util.SparseArray;
 import android.view.Menu;
 import android.view.MenuItem;
 import android.view.View;
 import android.view.ViewGroup;
-import android.widget.ImageView;
-import android.widget.LinearLayout;
 import android.widget.TextView;
 
-import com.google.android.material.appbar.AppBarLayout;
-import com.google.android.material.snackbar.Snackbar;
-import com.google.android.material.tabs.TabLayout;
-
-import java.util.ArrayList;
-import java.util.HashSet;
-import java.util.List;
-import java.util.Set;
-
+import androidx.annotation.IntDef;
 import androidx.annotation.MainThread;
 import androidx.annotation.NonNull;
 import androidx.annotation.StringRes;
 import androidx.appcompat.app.ActionBar;
 import androidx.appcompat.widget.SearchView;
-import androidx.appcompat.widget.Toolbar;
 import androidx.core.view.WindowInsetsCompat;
 import androidx.core.view.WindowInsetsControllerCompat;
 import androidx.fragment.app.Fragment;
 import androidx.fragment.app.FragmentManager;
 import androidx.fragment.app.FragmentPagerAdapter;
+import androidx.fragment.app.ListFragment;
 import androidx.viewpager.widget.ViewPager;
+
+import com.google.android.material.appbar.AppBarLayout;
+import com.google.android.material.floatingactionbutton.ExtendedFloatingActionButton;
+import com.google.android.material.search.SearchBar;
+import com.google.android.material.snackbar.Snackbar;
+import com.google.android.material.tabs.TabLayout;
+
+import java.lang.annotation.Retention;
+import java.lang.annotation.RetentionPolicy;
+import java.util.ArrayList;
+import java.util.HashSet;
+import java.util.List;
+import java.util.Set;
+
 import ch.threema.app.R;
 import ch.threema.app.adapters.FilterableListAdapter;
 import ch.threema.app.fragments.MemberListFragment;
@@ -65,6 +70,7 @@ import ch.threema.app.utils.LogUtil;
 import ch.threema.app.utils.NameUtil;
 import ch.threema.app.utils.RuntimeUtil;
 import ch.threema.app.utils.SnackbarUtil;
+import ch.threema.app.utils.TestUtil;
 import ch.threema.storage.models.ContactModel;
 
 abstract public class MemberChooseActivity extends ThreemaToolbarActivity implements SearchView.OnQueryTextListener, MemberListFragment.SelectionListener {
@@ -72,6 +78,15 @@ abstract public class MemberChooseActivity extends ThreemaToolbarActivity implem
 	private final static int FRAGMENT_WORK_USERS = 1;
 	private final static int NUM_FRAGMENTS = 2;
 
+	@Retention(RetentionPolicy.SOURCE)
+	@IntDef({MODE_NEW_GROUP, MODE_ADD_TO_GROUP, MODE_NEW_DISTRIBUTION_LIST, MODE_PROFILE_PIC_RECIPIENTS})
+	public @interface MemberChooseMode {}
+	protected final static int MODE_NEW_GROUP = 1;
+	protected final static int MODE_ADD_TO_GROUP = 2;
+	protected final static int MODE_NEW_DISTRIBUTION_LIST = 3;
+	protected final static int MODE_PROFILE_PIC_RECIPIENTS = 4;
+	private static final String BUNDLE_QUERY_TEXT = "query";
+
 	private MemberChoosePagerAdapter memberChoosePagerAdapter;
 	private MenuItem searchMenuItem;
 	private ThreemaSearchView searchView;
@@ -80,10 +95,13 @@ abstract public class MemberChooseActivity extends ThreemaToolbarActivity implem
 	protected ArrayList<String> excludedIdentities = new ArrayList<>();
 	protected ArrayList<String> preselectedIdentities = new ArrayList<>();
 
-	private ViewPager viewPager;
+	private TabLayout tabLayout;
 	private final ArrayList<Integer> tabs = new ArrayList<>(NUM_FRAGMENTS);
 	private Snackbar snackbar;
 	private View rootView;
+	private SearchBar searchBar;
+	private ExtendedFloatingActionButton floatingActionButton;
+	private String queryText;
 
 	@Override
 	public boolean onQueryTextSubmit(String query) {
@@ -93,15 +111,18 @@ abstract public class MemberChooseActivity extends ThreemaToolbarActivity implem
 
 	@Override
 	public boolean onQueryTextChange(String newText) {
-		int currentItem = viewPager.getCurrentItem();
-		Fragment fragment = memberChoosePagerAdapter.getRegisteredFragment(currentItem);
-
-		if (fragment != null) {
-			FilterableListAdapter listAdapter = ((MemberListFragment) fragment).getAdapter();
+		int itemCount = memberChoosePagerAdapter.getCount();
 
-			// adapter can be null if it has not been initialized yet (runs in different thread)
-			if (listAdapter == null) return false;
-			listAdapter.getFilter().filter(newText);
+		// apply filter to all adapters
+		for (int currentItem = 0; currentItem < itemCount; currentItem++) {
+			Fragment fragment = memberChoosePagerAdapter.getRegisteredFragment(currentItem);
+			if (fragment != null) {
+				FilterableListAdapter listAdapter = ((MemberListFragment) fragment).getAdapter();
+				// adapter can be null if it has not been initialized yet (runs in different thread)
+				if (listAdapter != null) {
+					listAdapter.getFilter().filter(newText);
+				}
+			}
 		}
 		return true;
 	}
@@ -119,27 +140,48 @@ abstract public class MemberChooseActivity extends ThreemaToolbarActivity implem
 		// add notice, if desired
 		ActionBar actionBar = getSupportActionBar();
 		if (actionBar != null) {
-			actionBar.setDisplayHomeAsUpEnabled(true);
-			Toolbar toolbar = getToolbar();
-			if (toolbar != null) {
-				actionBar.setTitle(null);
-			}
+			searchBar = (SearchBar) getToolbar();
+			searchBar.setNavigationOnClickListener(new View.OnClickListener() {
+				@Override
+				public void onClick(View v) {
+					if (searchView.isIconified()) {
+						goHome();
+					} else {
+						searchView.setIconified(true);
+					}
+				}
+			});
+			searchBar.setOnClickListener(new View.OnClickListener() {
+				@Override
+				public void onClick(View v) {
+					searchView.setIconified(false);
+				}
+			});
+			ConfigUtils.adjustSearchBarTextViewMargin(this, searchBar);
+
 			if (getNotice() != 0) {
+				final View noticeLayout = findViewById(R.id.notice_layout);
 				final TextView noticeText = findViewById(R.id.notice_text);
-				final LinearLayout noticeLayout = findViewById(R.id.notice_layout);
 				noticeText.setText(getNotice());
 				noticeLayout.setVisibility(View.VISIBLE);
 
-				ImageView closeButton = findViewById(R.id.close_button);
-				closeButton.setOnClickListener(new View.OnClickListener() {
-					@Override
-					public void onClick(View v) {
-						AnimationUtil.collapse(noticeLayout);
-					}
-				});
+				findViewById(R.id.close_button).setOnClickListener(v -> AnimationUtil.collapse(noticeLayout));
 			}
 		}
 
+		this.floatingActionButton = findViewById(R.id.floating);
+
+		if (getMode() == MODE_PROFILE_PIC_RECIPIENTS) {
+			floatingActionButton.hide();
+		} else {
+			this.floatingActionButton.setOnClickListener(new View.OnClickListener() {
+				@Override
+				public void onClick(View v) {
+					menuNext(getSelectedContacts());
+				}
+			});
+		}
+
 		this.rootView = findViewById(R.id.coordinator);
 
 		try {
@@ -153,15 +195,19 @@ abstract public class MemberChooseActivity extends ThreemaToolbarActivity implem
 
 	@MainThread
 	protected void updateToolbarTitle(@StringRes int title, @StringRes int subtitle) {
-		getToolbar().setTitle(title);
-		getToolbar().setSubtitle(subtitle);
+		if (searchBar != null) {
+			searchBar.setHint(subtitle);
+		}
+		if (searchView != null) {
+			searchView.setQueryHint(getString(subtitle));
+		}
 	}
 
 	protected void initList() {
-		final TabLayout tabLayout = findViewById(R.id.sliding_tabs);
+		tabLayout = findViewById(R.id.sliding_tabs);
 		tabs.clear();
 
-		viewPager = findViewById(R.id.pager);
+		ViewPager viewPager = findViewById(R.id.pager);
 		if (viewPager == null || tabLayout == null) {
 			finish();
 			return;
@@ -176,13 +222,13 @@ abstract public class MemberChooseActivity extends ThreemaToolbarActivity implem
 
 		if (ConfigUtils.isWorkBuild()) {
 			tabLayout.addTab(tabLayout.newTab()
-				.setIcon(ConfigUtils.getThemedDrawable(this, R.drawable.ic_work_outline))
+				.setIcon(R.drawable.ic_work_outline)
 				.setContentDescription(R.string.title_tab_work_users));
 			tabs.add(FRAGMENT_WORK_USERS);
 		}
 
 		tabLayout.addTab(tabLayout.newTab()
-			.setIcon(ConfigUtils.getThemedDrawable(this, R.drawable.ic_person_outline))
+			.setIcon(R.drawable.ic_person_outline)
 			.setContentDescription(R.string.title_tab_users));
 
 		tabs.add(FRAGMENT_USERS);
@@ -201,34 +247,79 @@ abstract public class MemberChooseActivity extends ThreemaToolbarActivity implem
 		viewPager.addOnPageChangeListener(new ViewPager.SimpleOnPageChangeListener() {
 			@Override
 			public void onPageSelected(int position) {
-				if (searchMenuItem != null) {
-					searchMenuItem.collapseActionView();
-					if (searchView != null) {
-						searchView.setQuery("", false);
+				if (searchView != null) {
+					if (searchMenuItem != null) {
+						CharSequence query = searchView.getQuery();
+						if (TestUtil.empty(query)) {
+							invalidateOptionsMenu();
+							if (searchMenuItem.isActionViewExpanded()) {
+								searchMenuItem.collapseActionView();
+								onQueryTextChange(null);
+							}
+							searchView.setQuery("", false);
+							queryText = null;
+						} else {
+							searchMenuItem.getActionView().post(new Runnable() {
+								@Override
+								public void run() {
+									if (!searchMenuItem.isActionViewExpanded()) {
+										searchMenuItem.expandActionView();
+									}
+									searchView.setQuery(query, true);
+								}
+							});
+							queryText = query.toString();
+						}
 					}
 				}
-				invalidateOptionsMenu();
 			}
 		});
 	}
 
+	@Override
+	protected void onCreate(Bundle savedInstanceState) {
+		super.onCreate(savedInstanceState);
+
+		if (savedInstanceState != null) {
+			queryText = savedInstanceState.getString(BUNDLE_QUERY_TEXT, null);
+		}
+	}
+
 	@Override
 	public boolean onCreateOptionsMenu(Menu menu) {
 		super.onCreateOptionsMenu(menu);
 		// Inflate the menu; this adds items to the action bar if it is present.
-		getMenuInflater().inflate(R.menu.activity_member_choose, menu);
-
-		if (!getAddNextButton()) {
-			MenuItem checkItem = menu.findItem(R.id.menu_next);
-			checkItem.setVisible(false);
-		}
+		getMenuInflater().inflate(R.menu.action_compose_message_search, menu);
 
-		this.searchMenuItem = menu.findItem(R.id.menu_search_messages);
+		this.searchMenuItem = menu.findItem(R.id.menu_action_search);
 		this.searchView = (ThreemaSearchView) this.searchMenuItem.getActionView();
+		if (ConfigUtils.isLandscape(this)) {
+			this.searchView.setMaxWidth(Integer.MAX_VALUE);
+		}
 
 		if (this.searchView != null) {
-			this.searchView.setQueryHint(getString(R.string.hint_filter_list));
+			ConfigUtils.adjustSearchViewPadding(searchView);
+			this.searchView.setQueryHint(getString(R.string.title_select_contacts));
 			this.searchView.setOnQueryTextListener(this);
+			// Hide the hint of the search bar when the search view is opened to prevent it from
+			// appearing on some devices
+			this.searchView.setOnSearchClickListener(v -> {
+				if (this.searchBar != null) {
+					this.searchBar.setHint("");
+				}
+			});
+			// Show the hint of the search bar again when the search view is closed
+			this.searchView.setOnCloseListener(() -> {
+				if (this.searchBar != null) {
+					this.searchBar.setHint(R.string.title_select_contacts);
+				}
+				return false;
+			});
+			if (!TestUtil.empty(queryText)) {
+				this.searchMenuItem.expandActionView();
+				this.searchView.setIconified(false);
+				this.searchView.setQuery(queryText, true);
+			}
 		} else {
 			this.searchMenuItem.setVisible(false);
 		}
@@ -240,26 +331,25 @@ abstract public class MemberChooseActivity extends ThreemaToolbarActivity implem
 	public boolean onOptionsItemSelected(MenuItem item) {
 		switch (item.getItemId()) {
 			case android.R.id.home:
-				if (getAddNextButton()) {
-					finish();
-					return true;
-				}
-				/* fallthrough */
-			case R.id.menu_next:
-				RuntimeUtil.runOnUiThread(new Runnable() {
-					@Override
-					public void run() {
-						if (searchView != null) {
-							new WindowInsetsControllerCompat(getWindow(), searchView).hide(WindowInsetsCompat.Type.ime());
-						}
-						menuNext(getSelectedContacts());
-					}
-				});
+				goHome();
 				return true;
 		}
 		return super.onOptionsItemSelected(item);
 	}
 
+	private void goHome() {
+		if (getMode() != MODE_PROFILE_PIC_RECIPIENTS) {
+			finish();
+		} else {
+			RuntimeUtil.runOnUiThread(() -> {
+				if (searchView != null) {
+					new WindowInsetsControllerCompat(getWindow(), searchView).hide(WindowInsetsCompat.Type.ime());
+				}
+				menuNext(getSelectedContacts());
+			});
+		}
+	}
+
 	protected List<ContactModel> getSelectedContacts() {
 		Set<ContactModel> contacts = new HashSet<>();
 		MemberListFragment fragment;
@@ -282,6 +372,7 @@ abstract public class MemberChooseActivity extends ThreemaToolbarActivity implem
 			super(fm);
 		}
 
+		@NonNull
 		@Override
 		public Fragment getItem(int position) {
 
@@ -324,14 +415,14 @@ abstract public class MemberChooseActivity extends ThreemaToolbarActivity implem
 
 		@NonNull
 		@Override
-		public Object instantiateItem(ViewGroup container, int position) {
+		public Object instantiateItem(@NonNull ViewGroup container, int position) {
 			Fragment fragment = (Fragment) super.instantiateItem(container, position);
 			registeredFragments.put(position, fragment);
 			return fragment;
 		}
 
 		@Override
-		public void destroyItem(ViewGroup container, int position, Object object) {
+		public void destroyItem(@NonNull ViewGroup container, int position, @NonNull Object object) {
 			registeredFragments.remove(position);
 			super.destroyItem(container, position, object);
 		}
@@ -348,18 +439,30 @@ abstract public class MemberChooseActivity extends ThreemaToolbarActivity implem
 		if (contacts.size() > 0) {
 			if (snackbar == null) {
 				snackbar = SnackbarUtil.make(rootView, "", Snackbar.LENGTH_INDEFINITE, 4);
-				snackbar.setBackgroundTint(ConfigUtils.getColorFromAttribute(this, R.attr.colorAccent));
 				snackbar.getView().getLayoutParams().width = AppBarLayout.LayoutParams.MATCH_PARENT;
 			}
-			snackbar.setTextColor(ConfigUtils.getColorFromAttribute(this, R.attr.colorOnSecondary));
 			snackbar.setText(getMemberNames());
 			if (!snackbar.isShown()) {
 				snackbar.show();
 			}
+			if (getMode() == MODE_NEW_GROUP || getMode() == MODE_ADD_TO_GROUP || getMode() == MODE_NEW_DISTRIBUTION_LIST) {
+				if (!floatingActionButton.isShown()) {
+					floatingActionButton.show();
+				}
+			}
 		} else {
 			if (snackbar != null && snackbar.isShown()) {
 				snackbar.dismiss();
 			}
+			if (getMode() == MODE_NEW_GROUP) {
+				if (!floatingActionButton.isShown()) {
+					floatingActionButton.show();
+				}
+			} else {
+				if (floatingActionButton.isShown()) {
+					floatingActionButton.hide();
+				}
+			}
 		}
 	}
 
@@ -374,8 +477,34 @@ abstract public class MemberChooseActivity extends ThreemaToolbarActivity implem
 		return builder.toString();
 	}
 
+	public void onQueryResultChanged(ListFragment listFragment, int count) {
+		int tabPosition = memberChoosePagerAdapter.registeredFragments.indexOfValue(listFragment);
+		TabLayout.Tab tab = tabLayout.getTabAt(tabPosition);
+
+		if (tab != null) {
+			if (count > 0) {
+				tab.getOrCreateBadge().setNumber(count);
+				tab.getBadge().setBackgroundColor(ConfigUtils.getColorFromAttribute(this, R.attr.colorPrimary));
+				tab.getBadge().setVisible(true);
+			} else {
+				if (tab.getBadge() != null) {
+					tab.getBadge().setVisible(false);
+				}
+			}
+		}
+	}
+
+	@Override
+	public void onSaveInstanceState(@NonNull Bundle outState) {
+		if (searchView != null) {
+			CharSequence query = searchView.getQuery();
+			outState.putString(BUNDLE_QUERY_TEXT, TextUtils.isEmpty(query) ? null : query.toString());
+		}
+		super.onSaveInstanceState(outState);
+	}
 
-	protected abstract boolean getAddNextButton();
+	@MemberChooseMode
+	protected abstract int getMode();
 
 	@MainThread
 	protected abstract void initData(Bundle savedInstanceState);
diff --git a/app/src/main/java/ch/threema/app/activities/NotificationsActivity.java b/app/src/main/java/ch/threema/app/activities/NotificationsActivity.java
index 6ec9fea4..6b964052 100644
--- a/app/src/main/java/ch/threema/app/activities/NotificationsActivity.java
+++ b/app/src/main/java/ch/threema/app/activities/NotificationsActivity.java
@@ -24,7 +24,6 @@ package ch.threema.app.activities;
 import android.app.Activity;
 import android.content.ActivityNotFoundException;
 import android.content.Intent;
-import android.graphics.PorterDuff;
 import android.media.RingtoneManager;
 import android.net.Uri;
 import android.os.Bundle;
@@ -33,7 +32,6 @@ import android.view.View;
 import android.view.ViewGroup;
 import android.view.Window;
 import android.widget.Button;
-import android.widget.ImageButton;
 import android.widget.ImageView;
 import android.widget.ScrollView;
 import android.widget.TextView;
@@ -42,6 +40,9 @@ import androidx.activity.result.ActivityResultLauncher;
 import androidx.activity.result.contract.ActivityResultContracts;
 import androidx.annotation.UiThread;
 import androidx.appcompat.widget.AppCompatRadioButton;
+
+import com.google.android.material.button.MaterialButton;
+
 import ch.threema.app.R;
 import ch.threema.app.ThreemaApplication;
 import ch.threema.app.dialogs.RingtoneSelectorDialog;
@@ -75,7 +76,7 @@ public abstract class NotificationsActivity extends ThreemaActivity implements V
 			radioSilentExceptMentions,
 			radioSoundCustom,
 			radioSoundNone;
-	private ImageButton plusButton, minusButton, settingsButton;
+	private MaterialButton settingsButton, plusButton, minusButton;
 	private ScrollView parentLayout;
 	protected RingtoneService ringtoneService;
 	protected ContactService contactService;
@@ -110,10 +111,6 @@ public abstract class NotificationsActivity extends ThreemaActivity implements V
 			return;
 		}
 
-		if (ConfigUtils.getAppTheme(this) == ConfigUtils.THEME_DARK) {
-			setTheme(R.style.Theme_Threema_CircularReveal_Dark);
-		}
-
 		super.onCreate(savedInstanceState);
 
 		supportRequestWindowFeature(Window.FEATURE_NO_TITLE);
@@ -152,16 +149,6 @@ public abstract class NotificationsActivity extends ThreemaActivity implements V
 			animCenterLocation = savedInstanceState.getIntArray(BUNDLE_ANIMATION_CENTER);
 		}
 
-		if (ConfigUtils.getAppTheme(this) == ConfigUtils.THEME_DARK) {
-			plusButton.setImageDrawable(ConfigUtils.getThemedDrawable(this, R.drawable.ic_add_circle_black_24dp));
-			minusButton.setImageDrawable(ConfigUtils.getThemedDrawable(this, R.drawable.ic_remove_circle_black_24dp));
-			settingsButton.setImageDrawable(ConfigUtils.getThemedDrawable(this, R.drawable.ic_settings_outline_24dp));
-		} else {
-			plusButton.setColorFilter(getResources().getColor(R.color.text_color_secondary), PorterDuff.Mode.SRC_IN);
-			minusButton.setColorFilter(getResources().getColor(R.color.text_color_secondary), PorterDuff.Mode.SRC_IN);
-			settingsButton.setColorFilter(getResources().getColor(R.color.text_color_secondary), PorterDuff.Mode.SRC_IN);
-		}
-
 		parentLayout.setOnClickListener(v -> {
 			// ignore clicks
 		});
@@ -227,16 +214,6 @@ public abstract class NotificationsActivity extends ThreemaActivity implements V
 	abstract void notifySettingsChanged();
 
 	protected void enablePlusMinus(boolean enable) {
-		int filter;
-
-		if (ConfigUtils.getAppTheme(this) == ConfigUtils.THEME_DARK) {
-			filter = enable ? ConfigUtils.getPrimaryColor() : getResources().getColor(R.color.material_grey_600);
-		} else {
-			filter = enable ? getResources().getColor(R.color.text_color_secondary) : getResources().getColor(R.color.material_grey_300);
-		}
-
-		plusButton.setColorFilter(filter, PorterDuff.Mode.SRC_IN);
-		minusButton.setColorFilter(filter, PorterDuff.Mode.SRC_IN);
 		plusButton.setEnabled(enable);
 		minusButton.setEnabled(enable);
 	}
@@ -310,52 +287,38 @@ public abstract class NotificationsActivity extends ThreemaActivity implements V
 
 	@Override
 	public void onClick(View v) {
-		switch (v.getId()) {
-			case R.id.radio_sound_default:
-				ringtoneService.removeCustomRingtone(this.uid);
-				break;
-			case R.id.radio_sound_custom:
-			case R.id.text_sound:
-				pickRingtone(this.uid);
-				break;
-			case R.id.radio_sound_none:
-				ringtoneService.setRingtone(this.uid, null);
-				break;
-			case R.id.radio_silent_off:
-				mutedChatsListService.remove(this.uid);
-				mentionOnlyChatListService.remove(this.uid);
-				break;
-			case R.id.radio_silent_unlimited:
-				mutedChatsListService.add(this.uid, DeadlineListService.DEADLINE_INDEFINITE);
-				mentionOnlyChatListService.remove(this.uid);
-				break;
-			case R.id.radio_silent_limited:
-				if (mutedIndex < 0) {
-					mutedIndex = 0;
-				}
-				mutedChatsListService.add(this.uid, muteValues[mutedIndex] * DateUtils.HOUR_IN_MILLIS + System.currentTimeMillis());
-				mentionOnlyChatListService.remove(this.uid);
-				break;
-			case R.id.radio_silent_except_mentions:
-				mentionOnlyChatListService.add(uid, DeadlineListService.DEADLINE_INDEFINITE);
-				mutedChatsListService.remove(uid);
-				break;
-			case R.id.duration_plus:
-				mutedIndex = Math.min(mutedIndex + 1, muteValues.length - 1);
-				mutedChatsListService.add(this.uid, muteValues[mutedIndex] * DateUtils.HOUR_IN_MILLIS + System.currentTimeMillis());
-				break;
-			case R.id.duration_minus:
-				mutedIndex = Math.max(mutedIndex - 1, 0);
-				mutedChatsListService.add(this.uid, muteValues[mutedIndex] * DateUtils.HOUR_IN_MILLIS + System.currentTimeMillis());
-				break;
-			case R.id.prefs_button:
-				Intent intent = new Intent(this, SettingsActivity.class);
-				intent.putExtra(SettingsActivity.EXTRA_SHOW_NOTIFICATION_FRAGMENT, true);
-				ringtoneSettingsLauncher.launch(intent);
-				overridePendingTransition(R.anim.fast_fade_in, R.anim.fast_fade_out);
-				break;
-			default:
-				break;
+		final int id = v.getId();
+		if (id == R.id.radio_sound_default) {
+			ringtoneService.removeCustomRingtone(this.uid);
+		} else if (id == R.id.radio_sound_custom || id == R.id.text_sound) {
+			pickRingtone(this.uid);
+		} else if (id == R.id.radio_sound_none) {
+			ringtoneService.setRingtone(this.uid, null);
+		} else if (id == R.id.radio_silent_off) {
+			mutedChatsListService.remove(this.uid);
+			mentionOnlyChatListService.remove(this.uid);
+		} else if (id == R.id.radio_silent_unlimited) {
+			mutedChatsListService.add(this.uid, DeadlineListService.DEADLINE_INDEFINITE);
+			mentionOnlyChatListService.remove(this.uid);
+		} else if (id == R.id.radio_silent_limited) {
+			if (mutedIndex < 0) {
+				mutedIndex = 0;
+			}
+			mutedChatsListService.add(this.uid, muteValues[mutedIndex] * DateUtils.HOUR_IN_MILLIS + System.currentTimeMillis());
+			mentionOnlyChatListService.remove(this.uid);
+		} else if (id == R.id.radio_silent_except_mentions) {
+			mentionOnlyChatListService.add(uid, DeadlineListService.DEADLINE_INDEFINITE);
+			mutedChatsListService.remove(uid);
+		} else if (id == R.id.duration_plus) {
+			mutedIndex = Math.min(mutedIndex + 1, muteValues.length - 1);
+			mutedChatsListService.add(this.uid, muteValues[mutedIndex] * DateUtils.HOUR_IN_MILLIS + System.currentTimeMillis());
+		} else if (id == R.id.duration_minus) {
+			mutedIndex = Math.max(mutedIndex - 1, 0);
+			mutedChatsListService.add(this.uid, muteValues[mutedIndex] * DateUtils.HOUR_IN_MILLIS + System.currentTimeMillis());
+		} else if (id == R.id.prefs_button) {
+			Intent intent = new Intent(this, SettingsActivity.class);
+			intent.putExtra(SettingsActivity.EXTRA_SHOW_NOTIFICATION_FRAGMENT, true);
+			ringtoneSettingsLauncher.launch(intent);
 		}
 		refreshSettings();
 		notifySettingsChanged();
diff --git a/app/src/main/java/ch/threema/app/activities/PermissionRequestActivity.kt b/app/src/main/java/ch/threema/app/activities/PermissionRequestActivity.kt
new file mode 100644
index 00000000..3236260e
--- /dev/null
+++ b/app/src/main/java/ch/threema/app/activities/PermissionRequestActivity.kt
@@ -0,0 +1,457 @@
+/*  _____ _
+ * |_   _| |_  _ _ ___ ___ _ __  __ _
+ *   | | | ' \| '_/ -_) -_) '  \/ _` |_
+ *   |_| |_||_|_| \___\___|_|_|_\__,_(_)
+ *
+ * Threema for Android
+ * Copyright (c) 2023 Threema GmbH
+ *
+ * This program is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU Affero General Public License, version 3,
+ * as published by the Free Software Foundation.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+ * GNU Affero General Public License for more details.
+ *
+ * You should have received a copy of the GNU Affero General Public License
+ * along with this program. If not, see <https://www.gnu.org/licenses/>.
+ */
+
+package ch.threema.app.activities
+
+import android.app.Activity
+import android.content.Context
+import android.content.Intent
+import android.content.SharedPreferences
+import android.content.pm.PackageManager.PERMISSION_GRANTED
+import android.net.Uri
+import android.os.Build
+import android.os.Bundle
+import android.provider.Settings
+import android.view.View
+import android.widget.Button
+import android.widget.LinearLayout
+import android.widget.LinearLayout.LayoutParams
+import android.widget.Space
+import android.widget.TextView
+import androidx.activity.result.contract.ActivityResultContracts
+import androidx.core.app.ActivityCompat
+import androidx.core.content.ContextCompat
+import androidx.preference.PreferenceManager
+import ch.threema.app.BuildConfig
+import ch.threema.app.R
+import ch.threema.app.activities.PermissionRequestActivity.Companion.INTENT_PERMISSION_REQUESTS
+import ch.threema.app.ui.PermissionIconView
+import ch.threema.app.ui.PermissionIconView.PermissionIconState
+import ch.threema.app.utils.ConfigUtils
+import ch.threema.app.utils.PermissionRequest
+import ch.threema.base.utils.LoggingUtil
+
+private val logger = LoggingUtil.getThreemaLogger("PermissionRequestActivity")
+
+/**
+ * This activity guides the user through the permission requests. This activity finishes with
+ * [Activity.RESULT_OK] if all the given (required) permissions have been granted. If the activity
+ * finishes with [Activity.RESULT_CANCELED], then at least one required permission is not yet given.
+ *
+ * The permission requests can be added to the intent as a list of [PermissionRequest] with the key
+ * [INTENT_PERMISSION_REQUESTS].
+ */
+class PermissionRequestActivity : ThreemaActivity() {
+
+    companion object {
+        const val INTENT_PERMISSION_REQUESTS = "permission_requests_extra"
+    }
+
+    private lateinit var preferences: SharedPreferences
+
+    private val permissionStates: MutableList<Pair<PermissionState, PermissionIconView>> =
+        ArrayList()
+
+    private lateinit var permissionIconViewContainer: LinearLayout
+
+    private lateinit var permissionTitleTextView: TextView
+    private lateinit var permissionDescriptionTextView: TextView
+    private lateinit var permissionSettingsExplanation: TextView
+
+    private lateinit var permissionGrantButton: Button
+    private lateinit var permissionGrantSettingsButton: Button
+    private lateinit var permissionContinueButton: Button
+    private lateinit var permissionIgnoreButton: Button
+    private lateinit var permissionSkipButton: Button
+
+    private var currentPosition = 0
+
+    private val requestPermissionLauncher =
+        registerForActivityResult(ActivityResultContracts.RequestPermission()) { isGranted: Boolean ->
+            logger.info("Permission result received: {}", isGranted)
+
+            // Note that at this point 'goToSettings' is not yet true if the user just denied
+            // the permission request. In this case the view will be updated to explain the next
+            // steps the user needs to perform.
+            if (!isGranted && getCurrentPermissionState().goToSettings) {
+                val intent = Intent(Settings.ACTION_APPLICATION_DETAILS_SETTINGS)
+                intent.data = Uri.parse("package:" + BuildConfig.APPLICATION_ID)
+                startActivity(intent)
+            }
+
+            updatePermissionStates()
+            if (updateCurrentPositionOrLeave()) {
+                updateView(true)
+            }
+        }
+
+    override fun onCreate(savedInstanceState: Bundle?) {
+        ConfigUtils.configureSystemBars(this)
+
+        super.onCreate(savedInstanceState)
+
+        if (Build.VERSION.SDK_INT < Build.VERSION_CODES.M) {
+            finishWithSuccess()
+            return
+        }
+
+        setContentView(R.layout.activity_permission_request)
+
+        preferences = PreferenceManager.getDefaultSharedPreferences(this)
+
+        permissionIconViewContainer = findViewById(R.id.permission_progress)
+
+        permissionTitleTextView = findViewById(R.id.permission_title)
+        permissionDescriptionTextView = findViewById(R.id.permission_description)
+        permissionSettingsExplanation = findViewById(R.id.permission_settings_explanation)
+
+        permissionGrantButton = findViewById(R.id.grant_permission)
+        permissionGrantSettingsButton = findViewById(R.id.grant_permission_settings)
+        permissionContinueButton = findViewById(R.id.permission_continue)
+        permissionIgnoreButton = findViewById(R.id.ignore_permission)
+        permissionSkipButton = findViewById(R.id.skip_permission)
+
+        permissionIgnoreButton.setOnClickListener {
+            val currentPermissionState = getCurrentPermissionState()
+            if (currentPermissionState.ignorePermissionPreference == null) {
+                logger.error("Permission ignore button should not be shown for permissions without preference")
+                updateView(true)
+                return@setOnClickListener
+            }
+
+            logger.info("Save do-not-ask again setting for {}", currentPermissionState.title)
+            preferences.edit().putBoolean(currentPermissionState.ignorePermissionPreference, true)
+                .apply()
+
+            currentPermissionState.asked = true
+
+            if (updateCurrentPositionOrLeave()) {
+                updateView(true)
+            }
+        }
+
+        permissionGrantButton.setOnClickListener {
+            val currentPermission = getCurrentPermissionState().permission
+            logger.info("Request permission {}", currentPermission)
+            requestPermissionLauncher.launch(currentPermission)
+        }
+
+        permissionGrantSettingsButton.setOnClickListener {
+            val currentPermission = getCurrentPermissionState().permission
+            logger.info("Request permission {} (via settings)", currentPermission)
+            requestPermissionLauncher.launch(currentPermission)
+        }
+
+        permissionContinueButton.setOnClickListener {
+            if (updateCurrentPositionOrLeave()) {
+                updateView(true)
+            }
+        }
+
+        permissionSkipButton.setOnClickListener {
+            getCurrentPermissionState().asked = true
+            if (updateCurrentPositionOrLeave()) {
+                updateView(true)
+            }
+        }
+
+        permissionSkipButton.text =
+            getString(R.string.use_threema_without_this_permission, getString(R.string.app_name))
+
+        initializePermissionRequests()
+
+        logger.info("Initialized PermissionRequestActivity for the following permission requests")
+        logPermissionStates()
+    }
+
+    override fun onStart() {
+        super.onStart()
+
+        updatePermissionStates()
+        if (updateCurrentPositionOrLeave()) {
+            updateView(false)
+        }
+    }
+
+    @Deprecated("Deprecated in Java")
+    override fun onBackPressed() {
+        if (getFirstPendingPermissionStatePosition() == null) {
+            finishWithSuccess()
+        } else {
+            finishWithoutSuccess()
+        }
+    }
+
+    private fun initializePermissionRequests() {
+        val requests = if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.TIRAMISU) {
+            intent.getParcelableArrayListExtra(
+                INTENT_PERMISSION_REQUESTS,
+                PermissionRequest::class.java
+            )
+        } else {
+            @Suppress("DEPRECATION")
+            intent.getParcelableArrayListExtra(INTENT_PERMISSION_REQUESTS)
+        }
+
+        if (requests == null) {
+            logger.error("No permission requests in intent")
+            finish()
+            return
+        }
+
+        // Only create permission states for permissions that are required on the current API level.
+        for (i in requests.filter { it.permission.isRequired() }.indices) {
+            val request = requests[i]
+            val view = createPermissionView(this, request)
+            view.setOnClickListener {
+                currentPosition = i
+                updateView(true)
+            }
+            permissionStates.add(PermissionState(request, preferences, this) to view)
+        }
+
+        initializePermissionViews()
+    }
+
+    private fun createPermissionView(
+        context: Context,
+        request: PermissionRequest
+    ): PermissionIconView {
+        val view = PermissionIconView(context)
+        view.setIcon(request.icon)
+        return view
+    }
+
+    private fun initializePermissionViews() {
+        permissionStates.map { it.second }.forEach { iconView ->
+            permissionIconViewContainer.addView(createSpaceView())
+            permissionIconViewContainer.addView(iconView)
+        }
+        permissionIconViewContainer.addView(createSpaceView())
+    }
+
+    private fun createSpaceView(): Space {
+        return Space(this).also {
+            it.layoutParams = LayoutParams(0, LayoutParams.WRAP_CONTENT, 1f)
+        }
+    }
+
+    /**
+     * Updates the texts and buttons based on [currentPosition].
+     */
+    private fun updateView(animate: Boolean) {
+        val permissionState = getCurrentPermissionState()
+        permissionTitleTextView.text = permissionState.title
+        permissionDescriptionTextView.text = permissionState.description
+        permissionSettingsExplanation.text =
+            getString(R.string.permission_enable_in_settings_rationale, permissionState.title)
+
+        permissionSkipButton.visibility = visibleOrGone(shouldShowSkipButton(permissionState))
+
+        permissionIgnoreButton.visibility = visibleOrGone(shouldShowIgnoreButton(permissionState))
+
+        for ((state, view) in permissionStates) {
+            view.setHighlighted(state == permissionState, animate)
+            view.updateBadge(getBadgeState(state))
+        }
+
+        permissionSettingsExplanation.visibility =
+            visibleOrInvisible(shouldShowGoToSettingsExplanation(permissionState))
+
+        when {
+            permissionState.granted -> {
+                permissionGrantButton.visibility = View.INVISIBLE
+                permissionGrantSettingsButton.visibility = View.INVISIBLE
+                permissionContinueButton.visibility = View.VISIBLE
+            }
+            permissionState.goToSettings -> {
+                permissionGrantButton.visibility = View.INVISIBLE
+                permissionGrantSettingsButton.visibility = View.VISIBLE
+                permissionContinueButton.visibility = View.INVISIBLE
+            }
+            else -> {
+                permissionGrantButton.visibility = View.VISIBLE
+                permissionGrantSettingsButton.visibility = View.INVISIBLE
+                permissionContinueButton.visibility = View.INVISIBLE
+            }
+        }
+
+        permissionGrantButton.text = when {
+            // If the permission is already granted, then continue to the next permission
+            permissionState.granted -> getString(R.string.next)
+            // Note that this does not work for 'Ask every time'-permissions as we cannot properly
+            // detect their state in advance. Therefore the user may still see a permission dialog
+            // without needing to go to the settings.
+            permissionState.goToSettings -> getString(R.string.grant_permission_settings)
+            // Otherwise show default grant permission text
+            else -> getString(R.string.grant_permission)
+        }
+    }
+
+    /**
+     * Get the current permission based on [currentPosition].
+     */
+    private fun getCurrentPermissionState(): PermissionState =
+        permissionStates[currentPosition].first
+
+    /**
+     * Get the position of the first permission that still needs user action. This can be a required
+     * permission that has not yet been granted or an optional permission that has not yet been
+     * granted or denied.
+     *
+     * @return the position of the pending permission, or null if all have been handled
+     */
+    private fun getFirstPendingPermissionStatePosition(): Int? {
+        return permissionStates
+            .withIndex()
+            .firstOrNull {
+                val request = it.value.first
+                val requiredAndNotGranted = !request.optional && !request.granted
+                val optionalNotGrantedAndNotAsked =
+                    request.optional && !request.granted && !request.asked
+                requiredAndNotGranted || optionalNotGrantedAndNotAsked
+            }?.index
+    }
+
+    /**
+     * Updates the [currentPosition] based on the current state of the permission. Note that the
+     * permission states may need to be updated first with [updatePermissionStates].
+     *
+     * If all required permissions are given and the optional permissions have been granted or
+     * rejected, then the activity gets finished.
+     *
+     * @return true if the position has been updated, false if the activity will be finished
+     */
+    private fun updateCurrentPositionOrLeave(): Boolean {
+        val firstPendingPosition = getFirstPendingPermissionStatePosition()
+        return if (firstPendingPosition != null) {
+            currentPosition = firstPendingPosition
+            true
+        } else {
+            finishWithSuccess()
+            false
+        }
+    }
+
+    /**
+     * Updates the [permissionStates] regarding the [PermissionState.granted] and
+     * [PermissionState.goToSettings].
+     */
+    private fun updatePermissionStates() {
+        for ((request, _) in permissionStates) {
+            request.granted =
+                ContextCompat.checkSelfPermission(this, request.permission) == PERMISSION_GRANTED
+            request.goToSettings =
+                !ActivityCompat.shouldShowRequestPermissionRationale(this, request.permission)
+
+            // Reset the permission ignore preference if the permission has been granted anyway.
+            // This means that the permission will be requested again, once the user denies the
+            // permission.
+            if (request.ignorePermissionPreference != null && request.granted) {
+                preferences.edit().putBoolean(request.ignorePermissionPreference, false).apply()
+            }
+        }
+    }
+
+    private fun finishWithSuccess() {
+        logger.info("All required permissions are granted")
+        logPermissionStates()
+        setResult(RESULT_OK)
+        finish()
+    }
+
+    private fun finishWithoutSuccess() {
+        logger.info("Some required permissions are not granted")
+        logPermissionStates()
+        setResult(RESULT_CANCELED)
+        finish()
+    }
+
+    private fun logPermissionStates() {
+        for (permission in permissionStates.map { it.first }) {
+            logger.info(
+                "Permission '{}': granted={}, redirectToSettings={}",
+                permission.permission,
+                permission.granted,
+                permission.goToSettings
+            )
+        }
+    }
+
+    private fun shouldShowSkipButton(permissionState: PermissionState) =
+        !permissionState.granted && permissionState.optional
+
+    private fun shouldShowIgnoreButton(permissionState: PermissionState) =
+        !permissionState.granted && permissionState.optional && permissionState.ignorePermissionPreference != null
+
+    private fun shouldShowGoToSettingsExplanation(permissionState: PermissionState) =
+        !permissionState.granted && permissionState.goToSettings
+
+    private fun getBadgeState(permissionState: PermissionState): PermissionIconState =
+        if (permissionState.granted) {
+            PermissionIconState.GRANTED
+        } else if (permissionState.asked && permissionState.optional) {
+            PermissionIconState.OPTIONAL_AND_DENIED
+        } else {
+            PermissionIconState.REQUIRED_OR_UNDECIDED
+        }
+
+    private fun visibleOrInvisible(visible: Boolean): Int = if (visible) {
+        View.VISIBLE
+    } else {
+        View.INVISIBLE
+    }
+
+    private fun visibleOrGone(visible: Boolean): Int = if (visible) {
+        View.VISIBLE
+    } else {
+        View.GONE
+    }
+
+    /**
+     * The current state of the permission request.
+     */
+    private data class PermissionState(
+        val permission: String,                     // the permission string
+        val title: String,                          // the name of the permission
+        val description: String,                    // the explanation of the permission
+        var goToSettings: Boolean,                  // true if the user (is likely) redirected to the settings
+        var granted: Boolean,                       // true if the permission is granted
+        var asked: Boolean,                         // true if the user has granted or denied this permission
+        var optional: Boolean,                      // true if this permission is optional
+        val ignorePermissionPreference: String?,    // the 'never-ask-again'-preference (if nonnull)
+    ) {
+        constructor(
+            permissionRequest: PermissionRequest,
+            preferences: SharedPreferences,
+            context: Context
+        ) : this(
+            permissionRequest.permission.getPermissionString(),
+            permissionRequest.permission.getPermissionName(context),
+            permissionRequest.description,
+            false,
+            false,
+            preferences.getBoolean(permissionRequest.permissionIgnorePreference, false),
+            permissionRequest.optional,
+            permissionRequest.permissionIgnorePreference
+        )
+    }
+}
diff --git a/app/src/main/java/ch/threema/app/activities/PinLockActivity.java b/app/src/main/java/ch/threema/app/activities/PinLockActivity.java
index 10dca66e..20f8643f 100644
--- a/app/src/main/java/ch/threema/app/activities/PinLockActivity.java
+++ b/app/src/main/java/ch/threema/app/activities/PinLockActivity.java
@@ -21,21 +21,17 @@
 
 package ch.threema.app.activities;
 
-import android.content.res.Configuration;
 import android.os.Bundle;
 import android.os.CountDownTimer;
 import android.os.Handler;
 import android.os.SystemClock;
 import android.text.InputFilter;
 import android.text.InputType;
-import android.view.KeyEvent;
 import android.view.WindowManager;
 import android.view.inputmethod.EditorInfo;
 import android.widget.Button;
 import android.widget.TextView;
 
-import androidx.annotation.NonNull;
-
 import org.slf4j.Logger;
 
 import java.security.MessageDigest;
@@ -53,8 +49,6 @@ import ch.threema.base.utils.LoggingUtil;
 
 public class PinLockActivity extends ThreemaActivity {
 	private static final Logger logger = LoggingUtil.getThreemaLogger("PinLockActivity");
-
-	private static final String KEY_NUM_WRONG_CONFIRM_ATTEMPTS = "num_wrong_attempts";
 	private static final long ERROR_MESSAGE_TIMEOUT = 3000;
 	private static final int FAILED_ATTEMPTS_BEFORE_TIMEOUT = 3;
 	private static final long FAILED_ATTEMPT_COUNTDOWN_INTERVAL_MS = 1000L;
@@ -79,7 +73,7 @@ public class PinLockActivity extends ThreemaActivity {
 
 		getWindow().addFlags(WindowManager.LayoutParams.FLAG_SECURE);
 
-		ConfigUtils.configureActivityTheme(this);
+		ConfigUtils.configureSystemBars(this);
 
 		isCheckOnly = getIntent().getBooleanExtra(ThreemaApplication.INTENT_DATA_CHECK_ONLY, false);
 		pinPreset = getIntent().getStringExtra(ThreemaApplication.INTENT_DATA_PIN);
diff --git a/app/src/main/java/ch/threema/app/activities/ProfilePicRecipientsActivity.java b/app/src/main/java/ch/threema/app/activities/ProfilePicRecipientsActivity.java
index 3e26fb43..cf70e025 100644
--- a/app/src/main/java/ch/threema/app/activities/ProfilePicRecipientsActivity.java
+++ b/app/src/main/java/ch/threema/app/activities/ProfilePicRecipientsActivity.java
@@ -65,8 +65,8 @@ public class ProfilePicRecipientsActivity extends MemberChooseActivity {
 	}
 
 	@Override
-	protected boolean getAddNextButton() {
-		return false;
+	protected int getMode() {
+		return MODE_PROFILE_PIC_RECIPIENTS;
 	}
 
 	@Override
diff --git a/app/src/main/java/ch/threema/app/activities/QRCodeZoomActivity.java b/app/src/main/java/ch/threema/app/activities/QRCodeZoomActivity.java
index a5bd4835..0494f3dd 100644
--- a/app/src/main/java/ch/threema/app/activities/QRCodeZoomActivity.java
+++ b/app/src/main/java/ch/threema/app/activities/QRCodeZoomActivity.java
@@ -26,14 +26,14 @@ import android.view.View;
 
 import androidx.appcompat.app.AppCompatActivity;
 import androidx.core.view.ViewCompat;
-import ch.threema.app.R;
+
 import ch.threema.app.services.QRCodeServiceImpl;
 import ch.threema.app.ui.QRCodePopup;
 
 import static ch.threema.app.services.QRCodeServiceImpl.QR_TYPE_ANY;
 
 /***
- * Activity displaying QR Code popup. Used by Launcher shortcut
+ * Activity displaying QR Code popup
  */
 public class QRCodeZoomActivity extends AppCompatActivity {
 	QRCodePopup qrPopup = null;
@@ -73,12 +73,4 @@ public class QRCodeZoomActivity extends AppCompatActivity {
 
 		super.onDestroy();
 	}
-
-	@Override
-	protected void onPause() {
-		super.onPause();
-		if (isFinishing()) {
-			overridePendingTransition(R.anim.fast_fade_in, R.anim.fast_fade_out);
-		}
-	}
 }
diff --git a/app/src/main/java/ch/threema/app/activities/RecipientListBaseActivity.java b/app/src/main/java/ch/threema/app/activities/RecipientListBaseActivity.java
index fa60497e..2b879f77 100644
--- a/app/src/main/java/ch/threema/app/activities/RecipientListBaseActivity.java
+++ b/app/src/main/java/ch/threema/app/activities/RecipientListBaseActivity.java
@@ -21,6 +21,11 @@
 
 package ch.threema.app.activities;
 
+import static ch.threema.app.activities.SendMediaActivity.MAX_EDITABLE_IMAGES;
+import static ch.threema.app.fragments.ComposeMessageFragment.MAX_FORWARDABLE_ITEMS;
+import static ch.threema.app.ui.MediaItem.TYPE_LOCATION;
+import static ch.threema.app.ui.MediaItem.TYPE_TEXT;
+
 import android.Manifest;
 import android.annotation.SuppressLint;
 import android.content.ClipData;
@@ -46,7 +51,6 @@ import android.view.Menu;
 import android.view.MenuItem;
 import android.view.View;
 import android.view.ViewGroup;
-import android.widget.ProgressBar;
 import android.widget.Toast;
 
 import androidx.annotation.AnyThread;
@@ -65,6 +69,8 @@ import androidx.fragment.app.FragmentManager;
 import androidx.fragment.app.FragmentPagerAdapter;
 import androidx.viewpager.widget.ViewPager;
 
+import com.google.android.material.progressindicator.CircularProgressIndicator;
+import com.google.android.material.search.SearchBar;
 import com.google.android.material.snackbar.Snackbar;
 import com.google.android.material.tabs.TabLayout;
 
@@ -106,6 +112,7 @@ import ch.threema.app.services.GroupService;
 import ch.threema.app.services.MessageService;
 import ch.threema.app.services.PreferenceService;
 import ch.threema.app.services.UserService;
+import ch.threema.app.services.license.LicenseService;
 import ch.threema.app.ui.MediaItem;
 import ch.threema.app.ui.SingleToast;
 import ch.threema.app.ui.ThreemaSearchView;
@@ -131,11 +138,6 @@ import ch.threema.storage.models.MessageType;
 import ch.threema.storage.models.data.LocationDataModel;
 import java8.util.concurrent.CompletableFuture;
 
-import static ch.threema.app.activities.SendMediaActivity.MAX_EDITABLE_IMAGES;
-import static ch.threema.app.fragments.ComposeMessageFragment.MAX_FORWARDABLE_ITEMS;
-import static ch.threema.app.ui.MediaItem.TYPE_LOCATION;
-import static ch.threema.app.ui.MediaItem.TYPE_TEXT;
-
 public class RecipientListBaseActivity extends ThreemaToolbarActivity implements
 	CancelableHorizontalProgressDialog.ProgressDialogClickListener,
 	ExpandableTextEntryDialog.ExpandableTextEntryDialogClickListener,
@@ -160,10 +162,11 @@ public class RecipientListBaseActivity extends ThreemaToolbarActivity implements
 	private static final int REQUEST_READ_EXTERNAL_STORAGE = 1;
 	private static final String BUNDLE_QUERY_TEXT = "query";
 
-	private ViewPager viewPager;
+	private TabLayout tabLayout;
 	private UserGroupPagerAdapter userGroupPagerAdapter;
 	private MenuItem searchMenuItem;
 	private ThreemaSearchView searchView;
+	private SearchBar searchBar;
 
 	private boolean hideUi, hideRecents, multiSelect, multiSelectIdentities;
 	private String captionText, queryText;
@@ -250,7 +253,6 @@ public class RecipientListBaseActivity extends ThreemaToolbarActivity implements
 			return false;
 		};
 
-		final ServiceManager serviceManager = ThreemaApplication.getServiceManager();
 		UserService userService;
 		try {
 			this.contactService = serviceManager.getContactService();
@@ -265,8 +267,10 @@ public class RecipientListBaseActivity extends ThreemaToolbarActivity implements
 			return false;
 		}
 
-		if (!userService.hasIdentity()) {
-			ConfigUtils.recreateActivity(this);
+		if (!userService.hasIdentity() || (ConfigUtils.isSerialLicensed() && !ConfigUtils.isSerialLicenseValid())) {
+			logger.debug("No identity or not licensed");
+			finish();
+			System.exit(0);
 		}
 
 		onNewIntent(getIntent());
@@ -275,11 +279,11 @@ public class RecipientListBaseActivity extends ThreemaToolbarActivity implements
 	}
 
 	private void setupUI() {
-		final TabLayout tabLayout = findViewById(R.id.sliding_tabs);
+		tabLayout = findViewById(R.id.sliding_tabs);
 		final ActionBar actionBar = getSupportActionBar();
-		final ProgressBar progressBar = findViewById(R.id.progress_sending);
+		final CircularProgressIndicator progressBar = findViewById(R.id.progress_sending);
 
-		viewPager = findViewById(R.id.pager);
+		ViewPager viewPager = findViewById(R.id.pager);
 		if (viewPager == null || tabLayout == null) {
 			finish();
 			return;
@@ -387,11 +391,30 @@ public class RecipientListBaseActivity extends ThreemaToolbarActivity implements
 			if (actionBar != null) {
 				actionBar.setDisplayHomeAsUpEnabled(true);
 				actionBar.setTitle(R.string.title_choose_recipient);
+				searchBar = (SearchBar) getToolbar();
+				searchBar.setNavigationOnClickListener(new View.OnClickListener() {
+					@Override
+					public void onClick(View v) {
+						if (searchView.isIconified()) {
+							finish();
+						} else {
+							searchView.setIconified(true);
+						}
+					}
+				});
+				searchBar.setOnClickListener(new View.OnClickListener() {
+					@Override
+					public void onClick(View v) {
+						searchView.setIconified(false);
+					}
+				});
+
+				ConfigUtils.adjustSearchBarTextViewMargin(this, searchBar);
 			}
 
 			if (!hideRecents && !conversationService.hasConversations()) {
 				//no conversation? show users tab as default
-				this.viewPager.setCurrentItem(tabs.indexOf(FRAGMENT_USERS), true);
+				viewPager.setCurrentItem(tabs.indexOf(FRAGMENT_USERS), true);
 			}
 
 			if (searchMenuItem != null) {
@@ -826,18 +849,35 @@ public class RecipientListBaseActivity extends ThreemaToolbarActivity implements
 	public boolean onCreateOptionsMenu(Menu menu) {
 		super.onCreateOptionsMenu(menu);
 		// Inflate the menu; this adds items to the action bar if it is present.
-		getMenuInflater().inflate(R.menu.activity_recipientlist, menu);
+		getMenuInflater().inflate(R.menu.action_compose_message_search, menu);
 
-		this.searchMenuItem = menu.findItem(R.id.menu_search_messages);
+		this.searchMenuItem = menu.findItem(R.id.menu_action_search);
 		this.searchView = (ThreemaSearchView) this.searchMenuItem.getActionView();
+		if (ConfigUtils.isLandscape(this)) {
+			this.searchView.setMaxWidth(Integer.MAX_VALUE);
+		}
 
-		if (this.searchView != null) {
-			this.searchView.setQueryHint(getString(R.string.hint_filter_list));
+		if (this.searchView != null && !hideUi) {
+			ConfigUtils.adjustSearchViewPadding(searchView);
+			this.searchView.setQueryHint(getString(R.string.title_choose_recipient));
 			this.searchView.setOnQueryTextListener(this);
-			if (hideUi) {
-				this.searchMenuItem.setVisible(false);
-			} else if (!TestUtil.empty(queryText)) {
+			// Hide the hint of the search bar when the search view is opened to prevent it from
+			// appearing on some devices
+			this.searchView.setOnSearchClickListener(v -> {
+				if (this.searchBar != null) {
+					this.searchBar.setHint("");
+				}
+			});
+			// Show the hint of the search bar again when the search view is closed
+			this.searchView.setOnCloseListener(() -> {
+				if (this.searchBar != null) {
+					this.searchBar.setHint(R.string.title_choose_recipient);
+				}
+				return false;
+			});
+			if (!TestUtil.empty(queryText)) {
 				this.searchMenuItem.expandActionView();
+				this.searchView.setIconified(false);
 				this.searchView.setQuery(queryText, true);
 			}
 		} else {
@@ -1033,7 +1073,11 @@ public class RecipientListBaseActivity extends ThreemaToolbarActivity implements
 
 					ThreemaDialogFragment alertDialog;
 					if (!expandable) {
-						alertDialog = TextWithCheckboxDialog.newInstance(getString(R.string.really_forward, recipientName), hasCaptions ? R.string.forward_captions : 0, R.string.send, R.string.cancel);
+						alertDialog = TextWithCheckboxDialog.newInstance(getString(R.string.forward_message),
+							getString(R.string.really_forward, recipientName),
+							hasCaptions ? R.string.forward_captions : 0,
+							R.string.send,
+							R.string.cancel);
 					} else {
 						alertDialog = ExpandableTextEntryDialog.newInstance(getString(R.string.really_forward, recipientName), R.string.add_caption_hint, presetCaption, R.string.send, R.string.cancel, true);
 					}
@@ -1155,6 +1199,23 @@ public class RecipientListBaseActivity extends ThreemaToolbarActivity implements
 		}
 	}
 
+	public void onQueryResultChanged(RecipientListFragment recipientListFragment, int count) {
+		int tabPosition = userGroupPagerAdapter.registeredFragments.indexOfValue(recipientListFragment);
+		TabLayout.Tab tab = tabLayout.getTabAt(tabPosition);
+
+		if (tab != null) {
+			if (count > 0) {
+				tab.getOrCreateBadge().setNumber(count);
+				tab.getBadge().setBackgroundColor(ConfigUtils.getColorFromAttribute(this, R.attr.colorPrimary));
+				tab.getBadge().setVisible(true);
+			} else {
+				if (tab.getBadge() != null) {
+					tab.getBadge().setVisible(false);
+				}
+			}
+		}
+	}
+
 	public class UserGroupPagerAdapter extends FragmentPagerAdapter {
 		// these globals are not persistent across orientation changes (at least in Android <= 4.1)!
 		SparseArray<Fragment> registeredFragments = new SparseArray<Fragment>();
diff --git a/app/src/main/java/ch/threema/app/activities/SendMediaActivity.java b/app/src/main/java/ch/threema/app/activities/SendMediaActivity.java
index 7a5cc779..2a1feceb 100644
--- a/app/src/main/java/ch/threema/app/activities/SendMediaActivity.java
+++ b/app/src/main/java/ch/threema/app/activities/SendMediaActivity.java
@@ -552,7 +552,7 @@ public class SendMediaActivity extends ThreemaToolbarActivity implements
 	}
 
 	private void showSettingsDropDown(final View view, final @NonNull MediaItem mediaItem) {
-		Context contextWrapper = new ContextThemeWrapper(this, R.style.Threema_PopupMenuStyle);
+		Context contextWrapper = new ContextThemeWrapper(this, R.style.Threema_PopupMenuStyle_SendMedia);
 		PopupMenu popup = new PopupMenu(contextWrapper, view);
 
 		if (mediaItem.getType() == TYPE_IMAGE) {
@@ -681,7 +681,6 @@ public class SendMediaActivity extends ThreemaToolbarActivity implements
 
 		try {
 			startActivityForResult(cameraIntent, requestCode);
-			overridePendingTransition(0, 0);
 		} catch (ActivityNotFoundException e) {
 			logger.error("Exception", e);
 			finish();
@@ -797,7 +796,7 @@ public class SendMediaActivity extends ThreemaToolbarActivity implements
 	}
 
 	private void prepareFlip() {
-		flip(mediaAdapterManager.getCurrentItem());
+		mediaAdapterManager.getCurrentItem().flip();
 		mediaAdapterManager.updateCurrent(NOTIFY_BOTH_ADAPTERS);
 	}
 
@@ -809,27 +808,6 @@ public class SendMediaActivity extends ThreemaToolbarActivity implements
 		return super.onOptionsItemSelected(item);
 	}
 
-	private void flip(@NonNull MediaItem item) {
-		int currentFlip = item.getFlip();
-
-		if (item.getRotation() == 90 || item.getRotation() == 270) {
-			if ((currentFlip & FLIP_VERTICAL) == FLIP_VERTICAL) {
-				// clear vertical flag
-				currentFlip &= ~FLIP_VERTICAL;
-			} else {
-				currentFlip |= FLIP_VERTICAL;
-			}
-		} else {
-			if ((currentFlip & FLIP_HORIZONTAL) == FLIP_HORIZONTAL) {
-				// clear horizontal flag
-				currentFlip &= ~FLIP_HORIZONTAL;
-			} else {
-				currentFlip |= FLIP_HORIZONTAL;
-			}
-		}
-		mediaAdapterManager.getCurrentItem().setFlip(currentFlip);
-	}
-
 	@SuppressLint("StaticFieldLeak")
 	private void addItemsByMediaItem(List<MediaItem> incomingMediaItems, boolean prepend) {
 		if (incomingMediaItems.size() > 0) {
diff --git a/app/src/main/java/ch/threema/app/activities/ServerMessageActivity.java b/app/src/main/java/ch/threema/app/activities/ServerMessageActivity.java
index abcb63f9..ac122b1d 100644
--- a/app/src/main/java/ch/threema/app/activities/ServerMessageActivity.java
+++ b/app/src/main/java/ch/threema/app/activities/ServerMessageActivity.java
@@ -26,12 +26,13 @@ import android.text.method.LinkMovementMethod;
 import android.view.MenuItem;
 import android.widget.TextView;
 
-import org.slf4j.Logger;
-
 import androidx.annotation.NonNull;
 import androidx.appcompat.app.ActionBar;
 import androidx.core.text.HtmlCompat;
 import androidx.lifecycle.ViewModelProvider;
+
+import org.slf4j.Logger;
+
 import ch.threema.app.R;
 import ch.threema.app.ThreemaApplication;
 import ch.threema.app.managers.ServiceManager;
@@ -51,7 +52,7 @@ public class ServerMessageActivity extends ThreemaActivity {
 
 	@Override
 	public void onCreate(Bundle savedInstanceState) {
-		ConfigUtils.configureActivityTheme(this);
+		ConfigUtils.configureSystemBars(this);
 
 		super.onCreate(savedInstanceState);
 
diff --git a/app/src/main/java/ch/threema/app/activities/SimpleWebViewActivity.java b/app/src/main/java/ch/threema/app/activities/SimpleWebViewActivity.java
index 3cf0a488..0d20646d 100644
--- a/app/src/main/java/ch/threema/app/activities/SimpleWebViewActivity.java
+++ b/app/src/main/java/ch/threema/app/activities/SimpleWebViewActivity.java
@@ -21,61 +21,84 @@
 
 package ch.threema.app.activities;
 
-import android.content.res.Configuration;
+import android.content.Intent;
 import android.net.ConnectivityManager;
 import android.os.Bundle;
-import android.view.MenuItem;
 import android.view.View;
 import android.webkit.WebChromeClient;
 import android.webkit.WebView;
-import android.widget.ProgressBar;
 
-import androidx.annotation.NonNull;
 import androidx.annotation.StringRes;
-import androidx.appcompat.app.ActionBar;
+import androidx.appcompat.app.AppCompatDelegate;
+import androidx.core.view.WindowCompat;
+
+import com.google.android.material.appbar.MaterialToolbar;
+import com.google.android.material.progressindicator.LinearProgressIndicator;
+
 import ch.threema.app.R;
 import ch.threema.app.dialogs.GenericAlertDialog;
 import ch.threema.app.utils.ConfigUtils;
 
+/**
+ * Warning! Do not start an Activity extending this class from an application context!
+ */
 public abstract class SimpleWebViewActivity extends ThreemaToolbarActivity implements GenericAlertDialog.DialogClickListener {
+
+	public static final String FORCE_DARK_THEME = "darkTheme";
 	private static final String DIALOG_TAG_NO_CONNECTION = "nc";
-	private ProgressBar progressBar;
+	private LinearProgressIndicator progressBar;
 	private WebView webView;
 
 	public void onCreate(Bundle savedInstanceState) {
 		super.onCreate(savedInstanceState);
 
-		ActionBar actionBar = getSupportActionBar();
-		if (actionBar != null) {
-			actionBar.setDisplayHomeAsUpEnabled(true);
-			actionBar.setTitle(getWebViewTitle());
+		WindowCompat.setDecorFitsSystemWindows(getWindow(), false);
+
+		MaterialToolbar toolbar = findViewById(R.id.material_toolbar);
+		toolbar.setNavigationOnClickListener(view -> finish());
+		toolbar.setTitle(getWebViewTitle());
+
+		Intent intent = getIntent();
+		Bundle extras = intent.getExtras();
+		final boolean darkThemeForced;
+
+		if (extras != null && extras.getBoolean(FORCE_DARK_THEME, false)) {
+			darkThemeForced = true;
+			if (getConnectionIndicator() != null) {
+				// hide connection indicator when launched from wizard
+				getConnectionIndicator().setVisibility(View.INVISIBLE);
+			}
+		} else {
+			darkThemeForced = false;
+		}
+
+		if (!ConfigUtils.isTheDarkSide(this)) {
+			if (darkThemeForced) {
+				getDelegate().setLocalNightMode(AppCompatDelegate.MODE_NIGHT_YES);
+			}
 		}
 
 		progressBar = findViewById(R.id.progress);
 		webView = findViewById(R.id.simple_webview);
-		webView.getSettings().setJavaScriptEnabled(false);
-		webView.setWebChromeClient(new WebChromeClient() {
-			@Override
-			public void onProgressChanged(WebView view, int newProgress) {
-				if (newProgress >= 99) {
-					progressBar.setVisibility(View.INVISIBLE);
-				} else {
-					progressBar.setProgress(newProgress);
+		webView.getSettings().setJavaScriptEnabled(requiresJavaScript());
+
+		if (requiresConnection()) {
+			webView.setWebChromeClient(new WebChromeClient() {
+				@Override
+				public void onProgressChanged(WebView view, int newProgress) {
+					if (newProgress >= 99) {
+						progressBar.setVisibility(View.INVISIBLE);
+					} else {
+						progressBar.setProgress(newProgress);
+					}
 				}
-			}
-		});
-
-		checkConnection();
-	}
-
-	@Override
-	protected boolean initActivity(Bundle savedInstanceState) {
-		boolean result = super.initActivity(savedInstanceState);
+			});
+			checkConnection();
+		} else {
+			progressBar.setVisibility(View.GONE);
 
-		if (getConnectionIndicator() != null) {
-			getConnectionIndicator().setVisibility(View.INVISIBLE);
+			loadWebView();
 		}
-		return result;
 	}
 
 	private void loadWebView() {
@@ -95,23 +118,6 @@ public abstract class SimpleWebViewActivity extends ThreemaToolbarActivity imple
 		return R.layout.activity_simple_webview;
 	}
 
-	@Override
-	public boolean onOptionsItemSelected(MenuItem item) {
-		switch (item.getItemId()) {
-			case android.R.id.home:
-				finish();
-				break;
-		}
-		return false;
-	}
-
-	@Override
-	public void onConfigurationChanged(@NonNull Configuration newConfig) {
-		super.onConfigurationChanged(newConfig);
-
-		ConfigUtils.adjustToolbar(this, getToolbar());
-	}
-
 	@Override
 	public void onYes(String tag, Object data) {
 		checkConnection();
@@ -124,4 +130,9 @@ public abstract class SimpleWebViewActivity extends ThreemaToolbarActivity imple
 
 	protected abstract @StringRes int getWebViewTitle();
 	protected abstract String getWebViewUrl();
+	protected boolean requiresConnection() {
+		return true;
+	}
+	protected boolean requiresJavaScript() { return false; }
 }
+
diff --git a/app/src/main/java/ch/threema/app/activities/StopPassphraseServiceActivity.java b/app/src/main/java/ch/threema/app/activities/StopPassphraseServiceActivity.java
index f62d4e09..816d0b22 100644
--- a/app/src/main/java/ch/threema/app/activities/StopPassphraseServiceActivity.java
+++ b/app/src/main/java/ch/threema/app/activities/StopPassphraseServiceActivity.java
@@ -75,14 +75,10 @@ public class StopPassphraseServiceActivity extends Activity {
 
 				masterKey.lock();
 				PassphraseService.stop(this);
-				ConfigUtils.scheduleAppRestart(this, 2000, getString(R.string.passphrase_locked));
+				ConfigUtils.scheduleAppRestart(this, 2000, null);
 			}
 		}
 
-		if (Build.VERSION.SDK_INT >= 21) {
-			finishAndRemoveTask();
-		} else {
-			finish();
-		}
+		finishAndRemoveTask();
 	}
 }
diff --git a/app/src/main/java/ch/threema/app/activities/StorageManagementActivity.java b/app/src/main/java/ch/threema/app/activities/StorageManagementActivity.java
index 2e875ae7..302b30ca 100644
--- a/app/src/main/java/ch/threema/app/activities/StorageManagementActivity.java
+++ b/app/src/main/java/ch/threema/app/activities/StorageManagementActivity.java
@@ -31,10 +31,10 @@ import android.view.View;
 import android.widget.ArrayAdapter;
 import android.widget.Button;
 import android.widget.FrameLayout;
-import android.widget.ProgressBar;
 import android.widget.TextView;
 import android.widget.Toast;
 
+import com.google.android.material.progressindicator.CircularProgressIndicator;
 import com.google.android.material.snackbar.Snackbar;
 import com.google.android.material.textfield.MaterialAutoCompleteTextView;
 
@@ -85,7 +85,7 @@ public class StorageManagementActivity extends ThreemaToolbarActivity implements
 	private TextView totalView, usageView, freeView, messageView, inuseView;
 	private MaterialAutoCompleteTextView timeSpinner, messageTimeSpinner;
 	private Button deleteButton, messageDeleteButton;
-	private ProgressBar progressBar;
+	private CircularProgressIndicator progressBar;
 	private boolean isCancelled, isMessageDeleteCancelled;
 	private int selectedSpinnerItem, selectedMessageSpinnerItem;
 	private FrameLayout storageFull, storageThreema, storageEmpty;
diff --git a/app/src/main/java/ch/threema/app/activities/SupportActivity.java b/app/src/main/java/ch/threema/app/activities/SupportActivity.java
index 20aea2b0..f4ec3bac 100644
--- a/app/src/main/java/ch/threema/app/activities/SupportActivity.java
+++ b/app/src/main/java/ch/threema/app/activities/SupportActivity.java
@@ -21,23 +21,11 @@
 
 package ch.threema.app.activities;
 
-
-import android.annotation.SuppressLint;
-import android.content.res.Configuration;
-import android.os.Bundle;
-import android.view.MenuItem;
-import android.view.View;
-import android.webkit.WebChromeClient;
-import android.webkit.WebView;
-import android.widget.ProgressBar;
-
 import org.slf4j.Logger;
 
 import java.io.UnsupportedEncodingException;
 import java.net.URLEncoder;
 
-import androidx.annotation.NonNull;
-import androidx.appcompat.app.ActionBar;
 import ch.threema.app.R;
 import ch.threema.app.utils.ConfigUtils;
 import ch.threema.app.utils.LocaleUtil;
@@ -45,64 +33,26 @@ import ch.threema.app.utils.TestUtil;
 import ch.threema.app.utils.UrlUtil;
 import ch.threema.base.utils.LoggingUtil;
 
-public class SupportActivity extends ThreemaToolbarActivity {
+public class SupportActivity extends SimpleWebViewActivity {
 	private static final Logger logger = LoggingUtil.getThreemaLogger("SupportActivity");
-	private ProgressBar progressBar;
-
-	@SuppressLint("SetJavaScriptEnabled")
-	public void onCreate(Bundle savedInstanceState) {
-		super.onCreate(savedInstanceState);
-
-		ActionBar actionBar = getSupportActionBar();
-		if (actionBar != null) {
-			actionBar.setDisplayHomeAsUpEnabled(true);
-			actionBar.setTitle(R.string.support);
-		}
-
-		progressBar = findViewById(R.id.progress);
-
-		WebView wv = findViewById(R.id.simple_webview);
-		wv.getSettings().setJavaScriptEnabled(true);
-		wv.setWebChromeClient(new WebChromeClient() {
-			@Override
-			public void onProgressChanged(WebView view, int newProgress) {
-				if (newProgress >= 99) {
-					progressBar.setVisibility(View.INVISIBLE);
-				} else {
-					progressBar.setProgress(newProgress);
-			}
-		}
-	});
 
-		wv.loadUrl(getURL());
-	}
-
-	public int getLayoutResource() {
-		return R.layout.activity_simple_webview;
+	@Override
+	protected boolean requiresConnection() {
+		return true;
 	}
 
 	@Override
-	public boolean onOptionsItemSelected(MenuItem item) {
-		switch (item.getItemId()) {
-			case android.R.id.home:
-//				ActivityCompat.finishAfterTransition(this);
-				finish();
-				break;
-		}
-		return false;
+	protected boolean requiresJavaScript() {
+		return true;
 	}
 
-	private String getIdentity() {
-		try {
-			return URLEncoder.encode(serviceManager.getUserService().getIdentity(), LocaleUtil.UTF8_ENCODING);
-		} catch (UnsupportedEncodingException e) {
-			logger.error("Encoding exception", e);
-		}
-		return "";
+	@Override
+	protected int getWebViewTitle() {
+		return R.string.support;
 	}
 
-	private String getURL() {
-		//try to load the custom url!
+	@Override
+	protected String getWebViewUrl() {
 		String baseURL = null;
 
 		if(ConfigUtils.isWorkBuild()) {
@@ -118,10 +68,12 @@ public class SupportActivity extends ThreemaToolbarActivity {
 			+ "&identity=" + getIdentity();
 	}
 
-	@Override
-	public void onConfigurationChanged(@NonNull Configuration newConfig) {
-		super.onConfigurationChanged(newConfig);
-
-		ConfigUtils.adjustToolbar(this, getToolbar());
+	private String getIdentity() {
+		try {
+			return URLEncoder.encode(serviceManager.getUserService().getIdentity(), LocaleUtil.UTF8_ENCODING);
+		} catch (UnsupportedEncodingException e) {
+			logger.error("Encoding exception", e);
+		}
+		return "";
 	}
 }
diff --git a/app/src/main/java/ch/threema/app/activities/TextChatBubbleActivity.java b/app/src/main/java/ch/threema/app/activities/TextChatBubbleActivity.java
index d785e33e..90430645 100644
--- a/app/src/main/java/ch/threema/app/activities/TextChatBubbleActivity.java
+++ b/app/src/main/java/ch/threema/app/activities/TextChatBubbleActivity.java
@@ -22,7 +22,6 @@
 package ch.threema.app.activities;
 
 import android.content.Intent;
-import android.graphics.PorterDuff;
 import android.net.Uri;
 import android.os.Build;
 import android.os.Bundle;
@@ -34,22 +33,20 @@ import android.view.View;
 import android.view.ViewGroup;
 import android.widget.TextView;
 
+import androidx.annotation.ColorInt;
+import androidx.annotation.LayoutRes;
+
+import com.google.android.material.appbar.MaterialToolbar;
 import com.google.android.material.card.MaterialCardView;
 
 import org.slf4j.Logger;
 
-import androidx.annotation.ColorInt;
-import androidx.annotation.LayoutRes;
-import androidx.appcompat.widget.Toolbar;
 import ch.threema.app.R;
 import ch.threema.app.ThreemaApplication;
 import ch.threema.app.dialogs.GenericAlertDialog;
 import ch.threema.app.emojis.EmojiConversationTextView;
-import ch.threema.app.managers.ServiceManager;
 import ch.threema.app.messagereceiver.MessageReceiver;
-import ch.threema.app.services.LockAppService;
 import ch.threema.app.services.MessageService;
-import ch.threema.app.services.PreferenceService;
 import ch.threema.app.ui.listitemholder.ComposeMessageHolder;
 import ch.threema.app.utils.ConfigUtils;
 import ch.threema.app.utils.IntentDataUtil;
@@ -61,7 +58,7 @@ import ch.threema.base.ThreemaException;
 import ch.threema.base.utils.LoggingUtil;
 import ch.threema.storage.models.AbstractMessageModel;
 
-public class TextChatBubbleActivity extends ThreemaActivity implements GenericAlertDialog.DialogClickListener {
+public class TextChatBubbleActivity extends ThreemaToolbarActivity implements GenericAlertDialog.DialogClickListener {
 	private static final Logger logger = LoggingUtil.getThreemaLogger("TextChatBubbleActivity");
 
 	private static final int CONTEXT_MENU_FORWARD = 600;
@@ -78,7 +75,12 @@ public class TextChatBubbleActivity extends ThreemaActivity implements GenericAl
 		@Override
 		public boolean onPrepareActionMode(ActionMode mode, Menu menu) {
 			menu.removeGroup(CONTEXT_MENU_GROUP);
-			menu.add(CONTEXT_MENU_GROUP, CONTEXT_MENU_FORWARD, 200, R.string.forward_text);
+			try {
+				menu.add(CONTEXT_MENU_GROUP, CONTEXT_MENU_FORWARD, 200, R.string.forward_text);
+			} catch (Exception e) {
+				// some MIUI device crash when attempting to add a context menu
+				logger.error("Error adding context menu (Xiaomi?)", e);
+			}
 			return true;
 		}
 
@@ -120,61 +122,48 @@ public class TextChatBubbleActivity extends ThreemaActivity implements GenericAl
 	};
 
 	@Override
-	public void onCreate(Bundle savedInstanceState) {
-		logger.debug("onCreate");
+	protected boolean initActivity(Bundle savedInstanceState) {
+		getTheme().applyStyle(ThreemaApplication.getServiceManager().getPreferenceService().getFontStyle(), true);
+
+		if (!super.initActivity(savedInstanceState)) {
+			return false;
+		}
 
 		MessageService messageService;
-		PreferenceService preferenceService;
-		LockAppService lockAppService;
 		MessageReceiver<? extends AbstractMessageModel> messageReceiver;
 		@LayoutRes int footerLayout;
 		@ColorInt int color;
 		String title;
 
-		ConfigUtils.configureActivityTheme(this);
-
-		super.onCreate(savedInstanceState);
-
 		try {
-			ServiceManager serviceManager = ThreemaApplication.getServiceManager();
 			messageService = serviceManager.getMessageService();
-			preferenceService = serviceManager.getPreferenceService();
-			lockAppService = serviceManager.getLockAppService();
 		} catch (Exception e) {
 			finish();
-			return;
+			return false;
 		}
 
-		// set font size according to user preferences
-		getTheme().applyStyle(ThreemaApplication.getServiceManager().getPreferenceService().getFontStyle(), true);
-		// hide contents in app switcher and inhibit screenshots
-		ConfigUtils.setScreenshotsAllowed(this, preferenceService, lockAppService);
-		ConfigUtils.setLocaleOverride(this, preferenceService);
-
-		setContentView(R.layout.activity_text_chat_bubble);
-
 		AbstractMessageModel messageModel = IntentDataUtil.getAbstractMessageModel(getIntent(), messageService);
 		try {
 			messageReceiver = messageService.getMessageReceiver(messageModel);
 		} catch (ThreemaException e) {
 			logger.error("Exception", e);
 			finish();
-			return;
+			return false;
 		}
 
 		if (messageModel.isOutbox()) {
 			// send
-			color = ConfigUtils.getColorFromAttribute(this, R.attr.bubble_send);
+			color = ConfigUtils.getColorFromAttribute(this, R.attr.colorSecondaryContainer);
 			title = getString(R.string.threema_message_to, messageReceiver.getDisplayName());
 			footerLayout = R.layout.conversation_bubble_footer_send;
 		} else {
 			// recv
-			color = ConfigUtils.getColorFromAttribute(this, R.attr.bubble_recv);
+			color = getResources().getColor(R.color.bubble_receive);
 			title = getString(R.string.threema_message_from, messageReceiver.getDisplayName());
 			footerLayout = R.layout.conversation_bubble_footer_recv;
 		}
 
-		Toolbar toolbar = findViewById(R.id.toolbar);
+		MaterialToolbar toolbar = findViewById(R.id.material_toolbar);
 		toolbar.setNavigationOnClickListener(view -> finish());
 		toolbar.setOnMenuItemClickListener(item -> {
 			if (item.isChecked()) {
@@ -192,13 +181,6 @@ public class TextChatBubbleActivity extends ThreemaActivity implements GenericAl
 
 		ConfigUtils.addIconsToOverflowMenu(this, toolbar.getMenu());
 
-		// TODO: replace with "toolbarNavigationButtonStyle" attribute in theme as soon as all Toolbars have been switched to Material Components
-		toolbar.getNavigationIcon().setColorFilter(getResources().getColor(
-			ConfigUtils.getAppTheme(this) == ConfigUtils.THEME_DARK ?
-				R.color.dark_text_color_primary :
-				R.color.text_color_secondary),
-			PorterDuff.Mode.SRC_IN);
-
 		MaterialCardView cardView = findViewById(R.id.card_view);
 		cardView.setCardBackgroundColor(color);
 
@@ -213,7 +195,7 @@ public class TextChatBubbleActivity extends ThreemaActivity implements GenericAl
 		((TextView) footerView.findViewById(R.id.date_view)).setText(s != null ? s : "");
 
 		// display message status
-		StateBitmapUtil.getInstance().setStateDrawable(messageModel, findViewById(R.id.delivered_indicator), true);
+		StateBitmapUtil.getInstance().setStateDrawable(this, messageModel, findViewById(R.id.delivered_indicator), true);
 
 		// mock a composemessageholder
 		ComposeMessageHolder holder = new ComposeMessageHolder();
@@ -236,6 +218,13 @@ public class TextChatBubbleActivity extends ThreemaActivity implements GenericAl
 				finish();
 			}
 		});
+
+		return true;
+	}
+
+	@Override
+	public int getLayoutResource() {
+		return R.layout.activity_text_chat_bubble;
 	}
 
 	private void setText(AbstractMessageModel messageModel) {
diff --git a/app/src/main/java/ch/threema/app/activities/ThreemaActivity.java b/app/src/main/java/ch/threema/app/activities/ThreemaActivity.java
index 83ea00be..bf708d97 100644
--- a/app/src/main/java/ch/threema/app/activities/ThreemaActivity.java
+++ b/app/src/main/java/ch/threema/app/activities/ThreemaActivity.java
@@ -21,19 +21,15 @@
 
 package ch.threema.app.activities;
 
-import android.content.Intent;
-import android.os.Handler;
 import android.widget.Toast;
 
 import org.slf4j.Logger;
 
-import ch.threema.app.R;
 import ch.threema.app.ThreemaApplication;
 import ch.threema.app.backuprestore.csv.BackupService;
 import ch.threema.app.backuprestore.csv.RestoreService;
 import ch.threema.app.services.UserService;
 import ch.threema.app.utils.TestUtil;
-import ch.threema.app.voip.activities.CallActivity;
 import ch.threema.base.utils.LoggingUtil;
 
 public abstract class ThreemaActivity extends ThreemaAppCompatActivity {
@@ -158,22 +154,4 @@ public abstract class ThreemaActivity extends ThreemaAppCompatActivity {
 		}
 		return this.myIdentity;
 	}
-
-	@Override
-	public void startActivityForResult(Intent intent, int requestCode) {
-		super.startActivityForResult(intent, requestCode);
-		overridePendingTransition(R.anim.fast_fade_in, R.anim.fast_fade_out);
-	}
-
-	@Override
-	public void startActivity(Intent intent) {
-		super.startActivity(intent);
-		overridePendingTransition(R.anim.fast_fade_in, R.anim.fast_fade_out);
-	}
-
-	@Override
-	public void finish() {
-		super.finish();
-		overridePendingTransition(R.anim.fast_fade_in, R.anim.fast_fade_out);
-	}
 }
diff --git a/app/src/main/java/ch/threema/app/activities/ThreemaAppCompatActivity.java b/app/src/main/java/ch/threema/app/activities/ThreemaAppCompatActivity.java
index dd462937..49ec98a3 100644
--- a/app/src/main/java/ch/threema/app/activities/ThreemaAppCompatActivity.java
+++ b/app/src/main/java/ch/threema/app/activities/ThreemaAppCompatActivity.java
@@ -21,13 +21,20 @@
 
 package ch.threema.app.activities;
 
+import static android.content.res.Configuration.UI_MODE_NIGHT_YES;
+import static androidx.appcompat.app.AppCompatDelegate.MODE_NIGHT_NO;
+import static androidx.appcompat.app.AppCompatDelegate.MODE_NIGHT_YES;
+
 import android.content.res.Configuration;
+import android.os.Bundle;
 import android.widget.Toast;
 
-import org.slf4j.Logger;
-
 import androidx.annotation.NonNull;
+import androidx.annotation.Nullable;
 import androidx.appcompat.app.AppCompatActivity;
+
+import org.slf4j.Logger;
+
 import ch.threema.app.R;
 import ch.threema.app.ThreemaApplication;
 import ch.threema.app.backuprestore.csv.BackupService;
@@ -41,25 +48,21 @@ public abstract class ThreemaAppCompatActivity extends AppCompatActivity {
 
 	private static final Logger logger = LoggingUtil.getThreemaLogger("ThreemaAppCompatActivity");
 
+	protected int savedDayNightMode;
+
+	@Override
+	protected void onCreate(@Nullable Bundle savedInstanceState) {
+		super.onCreate(savedInstanceState);
+
+		savedDayNightMode = getResources().getConfiguration().uiMode & Configuration.UI_MODE_NIGHT_MASK;
+		ConfigUtils.setCurrentDayNightMode(savedDayNightMode == UI_MODE_NIGHT_YES ? MODE_NIGHT_YES : MODE_NIGHT_NO);
+	}
+
 	@Override
 	protected void onResume() {
 		if (BackupService.isRunning() || RestoreService.isRunning()) {
 			Toast.makeText(this,  R.string.backup_restore_in_progress, Toast.LENGTH_LONG).show();
 			finish();
-		} else {
-			if (ConfigUtils.refreshDeviceTheme(this)) {
-				ConfigUtils.recreateActivity(this);
-
-				// Reset avatar cache on theme change so that the default avatars are loaded with the correct (themed) color
-				ServiceManager sm = ThreemaApplication.getServiceManager();
-				if (sm != null) {
-					try {
-						sm.getAvatarCacheService().clear();
-					} catch (FileSystemNotPresentException e) {
-						logger.error("Couldn't get avatar cache service to reset cached avatars", e);
-					}
-				}
-			}
 		}
 		try {
 			super.onResume();
@@ -69,6 +72,22 @@ public abstract class ThreemaAppCompatActivity extends AppCompatActivity {
 
 	@Override
 	public void onConfigurationChanged(@NonNull Configuration newConfig) {
+		int newDayNightMode = newConfig.uiMode & Configuration.UI_MODE_NIGHT_MASK;
+		if (savedDayNightMode != newDayNightMode) {
+			savedDayNightMode = newDayNightMode;
+			ConfigUtils.setCurrentDayNightMode(newDayNightMode == UI_MODE_NIGHT_YES ? MODE_NIGHT_YES : MODE_NIGHT_NO);
+
+			// Reset avatar cache on theme change so that the default avatars are loaded with the correct (themed) color
+			ServiceManager sm = ThreemaApplication.getServiceManager();
+			if (sm != null) {
+				try {
+					sm.getAvatarCacheService().clear();
+				} catch (FileSystemNotPresentException e) {
+					logger.error("Couldn't get avatar cache service to reset cached avatars", e);
+				}
+			}
+			recreate();
+		}
 		super.onConfigurationChanged(newConfig);
 	}
 }
diff --git a/app/src/main/java/ch/threema/app/activities/ThreemaPushNotificationInfoActivity.kt b/app/src/main/java/ch/threema/app/activities/ThreemaPushNotificationInfoActivity.kt
index 53e423f7..240281d2 100644
--- a/app/src/main/java/ch/threema/app/activities/ThreemaPushNotificationInfoActivity.kt
+++ b/app/src/main/java/ch/threema/app/activities/ThreemaPushNotificationInfoActivity.kt
@@ -36,7 +36,7 @@ class ThreemaPushNotificationInfoActivity : ThreemaActivity() {
     override fun onCreate(savedInstanceState: Bundle?) {
         logger.debug("onCreate")
 
-        ConfigUtils.configureActivityTheme(this)
+        ConfigUtils.configureSystemBars(this)
 
         super.onCreate(savedInstanceState)
 
diff --git a/app/src/main/java/ch/threema/app/activities/ThreemaToolbarActivity.java b/app/src/main/java/ch/threema/app/activities/ThreemaToolbarActivity.java
index 4cd52d47..b4b0008e 100644
--- a/app/src/main/java/ch/threema/app/activities/ThreemaToolbarActivity.java
+++ b/app/src/main/java/ch/threema/app/activities/ThreemaToolbarActivity.java
@@ -30,6 +30,13 @@ import android.view.View;
 import android.widget.EditText;
 import android.widget.Toast;
 
+import androidx.annotation.LayoutRes;
+import androidx.annotation.NonNull;
+import androidx.annotation.UiThread;
+import androidx.appcompat.widget.Toolbar;
+import androidx.preference.PreferenceManager;
+
+import com.google.android.material.appbar.AppBarLayout;
 import com.google.android.material.dialog.MaterialAlertDialogBuilder;
 
 import org.slf4j.Logger;
@@ -38,11 +45,6 @@ import java.net.InetSocketAddress;
 import java.util.HashSet;
 import java.util.Set;
 
-import androidx.annotation.LayoutRes;
-import androidx.annotation.NonNull;
-import androidx.annotation.UiThread;
-import androidx.appcompat.widget.Toolbar;
-import androidx.preference.PreferenceManager;
 import ch.threema.app.R;
 import ch.threema.app.ThreemaApplication;
 import ch.threema.app.activities.wizard.WizardIntroActivity;
@@ -93,8 +95,6 @@ public abstract class ThreemaToolbarActivity extends ThreemaActivity implements
 
 	@Override
 	protected void onApplyThemeResource(Resources.Theme theme, int resid, boolean first) {
-		// TODO
-
 		super.onApplyThemeResource(theme, resid, first);
 	}
 
@@ -107,7 +107,7 @@ public abstract class ThreemaToolbarActivity extends ThreemaActivity implements
 	protected void onCreate(Bundle savedInstanceState) {
 		logger.debug("onCreate");
 
-		ConfigUtils.configureActivityTheme(this);
+		ConfigUtils.configureSystemBars(this);
 		resetKeyboard();
 
 		super.onCreate(savedInstanceState);
@@ -183,10 +183,15 @@ public abstract class ThreemaToolbarActivity extends ThreemaActivity implements
 			logger.debug("setContentView");
 
 			setContentView(getLayoutResource());
+
 			this.toolbar = findViewById(R.id.toolbar);
 			if (toolbar != null) {
 				setSupportActionBar(toolbar);
 			}
+			AppBarLayout appBarLayout = findViewById(R.id.appbar);
+			if (appBarLayout != null) {
+				appBarLayout.addLiftOnScrollListener((elevation, backgroundColor) -> getWindow().setStatusBarColor(backgroundColor));
+			}
 
 			connectionIndicator = findViewById(R.id.connection_indicator);
 		}
@@ -249,7 +254,7 @@ public abstract class ThreemaToolbarActivity extends ThreemaActivity implements
 	private static final String LANDSCAPE_HEIGHT = "kbd_landscape_height";
 	private final Set<OnSoftKeyboardChangedListener> softKeyboardChangedListeners = new HashSet<>();
 	private boolean softKeyboardOpen = false;
-	private int minKeyboardHeight, minEmojiPickerHeight;
+	private int minEmojiPickerHeight;
 
 	public interface OnSoftKeyboardChangedListener {
 		void onKeyboardHidden();
@@ -283,14 +288,11 @@ public abstract class ThreemaToolbarActivity extends ThreemaActivity implements
 	}
 
 	public void onSoftKeyboardOpened(int softKeyboardHeight) {
-		logger.debug("Potential keyboard height = " + softKeyboardHeight + " Min = " + minKeyboardHeight);
-
-		if (softKeyboardHeight >= minKeyboardHeight) {
-			logger.debug("Soft keyboard open detected");
+		logger.debug("Soft keyboard open detected");
 
+		if (!this.softKeyboardOpen) {
 			this.softKeyboardOpen = true;
 			saveSoftKeyboardHeight(softKeyboardHeight);
-
 			notifySoftKeyboardShown();
 		}
 	}
@@ -298,9 +300,10 @@ public abstract class ThreemaToolbarActivity extends ThreemaActivity implements
 	public void onSoftKeyboardClosed() {
 		logger.debug("Soft keyboard closed");
 
-		this.softKeyboardOpen = false;
-
-		notifySoftKeyboardHidden();
+		if (this.softKeyboardOpen) {
+			this.softKeyboardOpen = false;
+			notifySoftKeyboardHidden();
+		}
 	}
 
 	public void runOnSoftKeyboardClose(final Runnable runnable) {
@@ -388,7 +391,6 @@ public abstract class ThreemaToolbarActivity extends ThreemaActivity implements
 	}
 
 	public void resetKeyboard() {
-		minKeyboardHeight = getResources().getDimensionPixelSize(R.dimen.min_keyboard_height);
 		minEmojiPickerHeight = getResources().getDimensionPixelSize(R.dimen.min_emoji_keyboard_height);
 
 		removeAllListeners();
diff --git a/app/src/main/java/ch/threema/app/activities/UnlockMasterKeyActivity.java b/app/src/main/java/ch/threema/app/activities/UnlockMasterKeyActivity.java
index 5f8f2948..284fadc5 100644
--- a/app/src/main/java/ch/threema/app/activities/UnlockMasterKeyActivity.java
+++ b/app/src/main/java/ch/threema/app/activities/UnlockMasterKeyActivity.java
@@ -24,7 +24,6 @@ package ch.threema.app.activities;
 import android.app.NotificationManager;
 import android.content.Context;
 import android.content.res.Configuration;
-import android.content.res.Resources;
 import android.content.res.TypedArray;
 import android.graphics.PorterDuff;
 import android.os.Bundle;
@@ -34,16 +33,17 @@ import android.view.KeyEvent;
 import android.view.WindowManager;
 import android.view.inputmethod.EditorInfo;
 import android.widget.EditText;
-import android.widget.ImageView;
 import android.widget.TextView;
 
+import androidx.annotation.NonNull;
+
+import com.google.android.material.button.MaterialButton;
 import com.google.android.material.textfield.TextInputLayout;
 
 import org.slf4j.Logger;
 
 import java.util.Arrays;
 
-import androidx.annotation.NonNull;
 import ch.threema.app.R;
 import ch.threema.app.ThreemaApplication;
 import ch.threema.app.dialogs.GenericProgressDialog;
@@ -69,11 +69,13 @@ public class UnlockMasterKeyActivity extends ThreemaActivity {
 	// Views
 	private ThreemaTextInputEditText passphraseText;
 	private TextInputLayout passphraseLayout;
-	private ImageView unlockButton;
+	private MaterialButton unlockButton;
 
 	private final MasterKey masterKey = ThreemaApplication.getMasterKey();
 
 	public void onCreate(Bundle savedInstanceState) {
+		ConfigUtils.configureSystemBars(this);
+
 		super.onCreate(savedInstanceState);
 
 		getWindow().addFlags(WindowManager.LayoutParams.FLAG_SECURE);
@@ -81,7 +83,7 @@ public class UnlockMasterKeyActivity extends ThreemaActivity {
 		setContentView(R.layout.activity_unlock_masterkey);
 
 		TextView infoText = findViewById(R.id.unlock_info);
-		TypedArray array = getTheme().obtainStyledAttributes(new int[]{android.R.attr.textColorSecondary});
+		TypedArray array = getTheme().obtainStyledAttributes(new int[]{R.attr.colorOnSurface});
 		infoText.getCompoundDrawables()[0].setColorFilter(array.getColor(0, -1), PorterDuff.Mode.SRC_IN);
 		array.recycle();
 
@@ -114,15 +116,6 @@ public class UnlockMasterKeyActivity extends ThreemaActivity {
 		unlockButton.setEnabled(false);
 	}
 
-	@Override
-	protected void onApplyThemeResource(Resources.Theme theme, int resid, boolean first) {
-		if (ConfigUtils.getAppTheme(this) == ConfigUtils.THEME_DARK) {
-			theme.applyStyle(R.style.Theme_Threema_WithToolbar_Dark, true);
-		} else {
-			super.onApplyThemeResource(theme, resid, first);
-		}
-	}
-
 	@Override
 	protected void onResume() {
 		super.onResume();
@@ -201,14 +194,6 @@ public class UnlockMasterKeyActivity extends ThreemaActivity {
 						RuntimeUtil.runOnUiThread(() -> {
 							ThreemaApplication.reset();
 
-							new Thread(() -> {
-								// Trigger a connection now, as there was no identity before the master key was unlocked
-								final ServiceManager serviceManager = ThreemaApplication.getServiceManager();
-								if (serviceManager != null) {
-									final LifetimeService lifetimeService = serviceManager.getLifetimeService();
-									lifetimeService.ensureConnection();
-								}
-							}).start();
 
 							// Cancel all notifications...if any
 							NotificationManager notificationManager = (NotificationManager) getSystemService(Context.NOTIFICATION_SERVICE);
@@ -217,6 +202,22 @@ public class UnlockMasterKeyActivity extends ThreemaActivity {
 							// Show persistent notification
 							PassphraseService.start(UnlockMasterKeyActivity.this.getApplicationContext());
 
+							// ServiceManager (and thus LifetimeService) are now available
+							// Trigger a connection
+							new Thread(() -> {
+								final ServiceManager serviceManager = ThreemaApplication.getServiceManager();
+								if (serviceManager != null) {
+									final LifetimeService lifetimeService = serviceManager.getLifetimeService();
+									if (lifetimeService != null) {
+										if (ThreemaApplication.isResumed) {
+											lifetimeService.acquireConnection(ThreemaApplication.ACTIVITY_CONNECTION_TAG);
+										} else {
+											lifetimeService.ensureConnection();
+										}
+									}
+								}
+							}).start();
+
 							// Start ThreemaPush service (which could not be started without an unlocked passphrase)
 							ThreemaPushService.tryStart(logger, getApplicationContext());
 
diff --git a/app/src/main/java/ch/threema/app/activities/WhatsNew2Activity.java b/app/src/main/java/ch/threema/app/activities/WhatsNew2Activity.java
index 5c049778..92789175 100644
--- a/app/src/main/java/ch/threema/app/activities/WhatsNew2Activity.java
+++ b/app/src/main/java/ch/threema/app/activities/WhatsNew2Activity.java
@@ -35,7 +35,7 @@ import static ch.threema.app.activities.WhatsNewActivity.EXTRA_NO_ANIMATION;
 public class WhatsNew2Activity extends ThreemaAppCompatActivity {
 	@Override
 	protected void onCreate(Bundle savedInstanceState) {
-		ConfigUtils.configureActivityTheme(this);
+		ConfigUtils.configureSystemBars(this);
 
 		super.onCreate(savedInstanceState);
 
diff --git a/app/src/main/java/ch/threema/app/activities/WhatsNewActivity.java b/app/src/main/java/ch/threema/app/activities/WhatsNewActivity.java
index 73ad0914..6063af81 100644
--- a/app/src/main/java/ch/threema/app/activities/WhatsNewActivity.java
+++ b/app/src/main/java/ch/threema/app/activities/WhatsNewActivity.java
@@ -27,7 +27,6 @@ import android.view.View;
 import android.widget.LinearLayout;
 import android.widget.TextView;
 
-import ch.threema.app.BuildConfig;
 import ch.threema.app.R;
 import ch.threema.app.utils.AnimationUtil;
 import ch.threema.app.utils.ConfigUtils;
@@ -38,15 +37,16 @@ public class WhatsNewActivity extends ThreemaAppCompatActivity {
 	@Override
 	protected void onCreate(Bundle savedInstanceState) {
 
-		ConfigUtils.configureActivityTheme(this);
+		ConfigUtils.configureSystemBars(this);
 
 		super.onCreate(savedInstanceState);
 
 		setContentView(R.layout.activity_whatsnew);
 
-		// TODO(ANDR-2065): Replace with correct placeholders `getString(R.string.app_name)` instead of "Threema"
-		((TextView) findViewById(R.id.whatsnew_title)).setText(getString(R.string.whatsnew_title, "Threema"));
-		((TextView) findViewById(R.id.whatsnew_body)).setText(Html.fromHtml(getString(R.string.whatsnew_headline, "Threema")));
+		String appName = getString(R.string.app_name);
+
+		((TextView) findViewById(R.id.whatsnew_title)).setText(getString(R.string.whatsnew_title, appName));
+		((TextView) findViewById(R.id.whatsnew_body)).setText(Html.fromHtml(getString(R.string.whatsnew_headline, appName)));
 
 		findViewById(R.id.next_text).setOnClickListener(v -> {
 /*			startActivity(new Intent(WhatsNewActivity.this, WhatsNew2Activity.class));
diff --git a/app/src/main/java/ch/threema/app/activities/ballot/BallotChooserActivity.java b/app/src/main/java/ch/threema/app/activities/ballot/BallotChooserActivity.java
index 66d681dc..23d87db7 100644
--- a/app/src/main/java/ch/threema/app/activities/ballot/BallotChooserActivity.java
+++ b/app/src/main/java/ch/threema/app/activities/ballot/BallotChooserActivity.java
@@ -30,11 +30,14 @@ import android.widget.AbsListView;
 import android.widget.AdapterView;
 import android.widget.ListView;
 
+import androidx.appcompat.app.ActionBar;
+
+import com.google.android.material.appbar.AppBarLayout;
+
 import org.slf4j.Logger;
 
 import java.util.List;
 
-import androidx.appcompat.app.ActionBar;
 import ch.threema.app.R;
 import ch.threema.app.activities.ThreemaToolbarActivity;
 import ch.threema.app.adapters.ballot.BallotOverviewListAdapter;
@@ -61,14 +64,11 @@ public class BallotChooserActivity extends ThreemaToolbarActivity implements Lis
 	private String myIdentity;
 
 	private BallotOverviewListAdapter listAdapter = null;
-	private List<BallotModel> ballots;
 	private ListView listView;
 
-	private BallotListener ballotListener = new BallotListener() {
+	private final BallotListener ballotListener = new BallotListener() {
 		@Override
-		public void onClosed(BallotModel ballotModel) {
-
-		}
+		public void onClosed(BallotModel ballotModel) {}
 
 		@Override
 		public void onModified(BallotModel ballotModel) {
@@ -78,13 +78,11 @@ public class BallotChooserActivity extends ThreemaToolbarActivity implements Lis
 		@Override
 		public void onCreated(BallotModel ballotModel) {
 			RuntimeUtil.runOnUiThread(() -> updateList());
-
 		}
 
 		@Override
 		public void onRemoved(BallotModel ballotModel) {
 			RuntimeUtil.runOnUiThread(() -> updateList());
-
 		}
 
 		@Override
@@ -109,6 +107,18 @@ public class BallotChooserActivity extends ThreemaToolbarActivity implements Lis
 		emptyView.setup(R.string.ballot_no_ballots_yet);
 		((ViewGroup) listView.getParent()).addView(emptyView);
 		listView.setEmptyView(emptyView);
+		final AppBarLayout appBarLayout = findViewById(R.id.appbar);
+		appBarLayout.setLiftable(true);
+		listView.setOnScrollListener(new AbsListView.OnScrollListener() {
+			@Override
+			public void onScrollStateChanged(AbsListView view, int scrollState) {}
+
+			@Override
+			public void onScroll(AbsListView view, int firstVisibleItem, int visibleItemCount, int totalItemCount) {
+				boolean isAtTop = firstVisibleItem == 0 && (view.getChildCount() == 0 || view.getChildAt(0).getTop() == 0);
+				appBarLayout.setLifted(!isAtTop);
+			}
+		});
 
 		ActionBar actionBar = getSupportActionBar();
 		if (actionBar != null) {
@@ -154,9 +164,9 @@ public class BallotChooserActivity extends ThreemaToolbarActivity implements Lis
 		}
 
 		try {
-			this.ballots = this.ballotService.getBallots(new BallotService.BallotFilter() {
+			List<BallotModel> ballots = this.ballotService.getBallots(new BallotService.BallotFilter() {
 				@Override
-				public MessageReceiver getReceiver() {
+				public MessageReceiver<?> getReceiver() {
 					return null;
 				}
 
@@ -171,9 +181,9 @@ public class BallotChooserActivity extends ThreemaToolbarActivity implements Lis
 				}
 			});
 
-			if (this.ballots != null) {
+			if (ballots != null) {
 				this.listAdapter = new BallotOverviewListAdapter(this,
-						this.ballots,
+					ballots,
 						this.ballotService,
 						this.contactService);
 
@@ -192,17 +202,15 @@ public class BallotChooserActivity extends ThreemaToolbarActivity implements Lis
 			return;
 		}
 
-		if(listAdapter != null) {
-			BallotModel b = listAdapter.getItem(position);
+		BallotModel b = listAdapter.getItem(position);
 
-			if(b != null) {
-				Intent resultIntent = this.getIntent();
-				//append ballot
-				IntentDataUtil.append(b, this.getIntent());
+		if(b != null) {
+			Intent resultIntent = this.getIntent();
+			//append ballot
+			IntentDataUtil.append(b, this.getIntent());
 
-				setResult(RESULT_OK, resultIntent);
-				finish();
-			}
+			setResult(RESULT_OK, resultIntent);
+			finish();
 		}
 	}
 
diff --git a/app/src/main/java/ch/threema/app/activities/ballot/BallotOverviewActivity.java b/app/src/main/java/ch/threema/app/activities/ballot/BallotOverviewActivity.java
index 2c01394c..635ac9c5 100644
--- a/app/src/main/java/ch/threema/app/activities/ballot/BallotOverviewActivity.java
+++ b/app/src/main/java/ch/threema/app/activities/ballot/BallotOverviewActivity.java
@@ -32,13 +32,16 @@ import android.widget.AbsListView;
 import android.widget.AdapterView;
 import android.widget.ListView;
 
+import androidx.appcompat.app.ActionBar;
+import androidx.appcompat.view.ActionMode;
+
+import com.google.android.material.appbar.AppBarLayout;
+
 import org.slf4j.Logger;
 
 import java.util.ArrayList;
 import java.util.List;
 
-import androidx.appcompat.app.ActionBar;
-import androidx.appcompat.view.ActionMode;
 import ch.threema.app.R;
 import ch.threema.app.ThreemaApplication;
 import ch.threema.app.activities.ThreemaToolbarActivity;
@@ -78,7 +81,7 @@ public class BallotOverviewActivity extends ThreemaToolbarActivity implements Li
 	private GroupService groupService;
 	private String myIdentity;
 
-	private MessageReceiver messageReceiver;
+	private MessageReceiver<?> messageReceiver;
 	private BallotOverviewListAdapter listAdapter = null;
 	private List<BallotModel> ballots;
 	private ListView listView;
@@ -169,6 +172,19 @@ public class BallotOverviewActivity extends ThreemaToolbarActivity implements Li
 		((ViewGroup) listView.getParent()).addView(emptyView);
 		listView.setEmptyView(emptyView);
 
+		final AppBarLayout appBarLayout = findViewById(R.id.appbar);
+		appBarLayout.setLiftable(true);
+		listView.setOnScrollListener(new AbsListView.OnScrollListener() {
+			@Override
+			public void onScrollStateChanged(AbsListView view, int scrollState) {}
+
+			@Override
+			public void onScroll(AbsListView view, int firstVisibleItem, int visibleItemCount, int totalItemCount) {
+				boolean isAtTop = firstVisibleItem == 0 && (view.getChildCount() == 0 || view.getChildAt(0).getTop() == 0);
+				appBarLayout.setLifted(!isAtTop);
+			}
+		});
+
 		Intent receivedIntent = getIntent();
 
 		this.messageReceiver = IntentDataUtil.getMessageReceiverFromIntent(this, receivedIntent);
@@ -465,9 +481,6 @@ public class BallotOverviewActivity extends ThreemaToolbarActivity implements Li
 		@Override
 		public boolean onCreateActionMode(ActionMode mode, Menu menu) {
 			mode.getMenuInflater().inflate(R.menu.action_ballot_overview, menu);
-
-			ConfigUtils.themeMenu(menu, ConfigUtils.getColorFromAttribute(BallotOverviewActivity.this, R.attr.colorAccent));
-
 			return true;
 		}
 
@@ -492,13 +505,12 @@ public class BallotOverviewActivity extends ThreemaToolbarActivity implements Li
 				return false;
 			}
 
-			switch (item.getItemId()) {
-				case R.id.menu_ballot_remove:
-					removeSelectedBallots();
-					return true;
-				default:
-					return false;
+			if (item.getItemId() == R.id.menu_ballot_remove) {
+				removeSelectedBallots();
+				return true;
 			}
+
+			return false;
 		}
 
 		@Override
diff --git a/app/src/main/java/ch/threema/app/activities/ballot/BallotWizardActivity.java b/app/src/main/java/ch/threema/app/activities/ballot/BallotWizardActivity.java
index 4c06fb0d..58e871d8 100644
--- a/app/src/main/java/ch/threema/app/activities/ballot/BallotWizardActivity.java
+++ b/app/src/main/java/ch/threema/app/activities/ballot/BallotWizardActivity.java
@@ -26,21 +26,22 @@ import android.content.Intent;
 import android.content.res.Configuration;
 import android.os.Bundle;
 import android.view.View;
-import android.widget.Button;
-import android.widget.ImageView;
 import android.widget.Toast;
 
+import androidx.annotation.NonNull;
+import androidx.fragment.app.Fragment;
+import androidx.fragment.app.FragmentManager;
+import androidx.fragment.app.FragmentStatePagerAdapter;
+import androidx.viewpager.widget.ViewPager;
+
+import com.google.android.material.button.MaterialButton;
+
 import org.slf4j.Logger;
 
 import java.lang.ref.WeakReference;
 import java.util.ArrayList;
 import java.util.List;
 
-import androidx.annotation.NonNull;
-import androidx.fragment.app.Fragment;
-import androidx.fragment.app.FragmentManager;
-import androidx.fragment.app.FragmentStatePagerAdapter;
-import androidx.viewpager.widget.ViewPager;
 import ch.threema.app.R;
 import ch.threema.app.ThreemaApplication;
 import ch.threema.app.activities.ThreemaActivity;
@@ -75,9 +76,8 @@ public class BallotWizardActivity extends ThreemaActivity {
 	private GroupService groupService;
 	private String identity;
 	private StepPagerStrip stepPagerStrip;
-	private ImageView nextButton, copyButton, prevButton;
-	private Button nextText;
-	private MessageReceiver receiver;
+	private MaterialButton nextButton, copyButton, prevButton;
+	private MessageReceiver<?> receiver;
 
 	private final List<BallotChoiceModel> ballotChoiceModelList = new ArrayList<>();
 	private String ballotTitle;
@@ -96,7 +96,7 @@ public class BallotWizardActivity extends ThreemaActivity {
 
 	@Override
 	protected void onCreate(Bundle savedInstanceState) {
-		ConfigUtils.configureActivityTheme(this);
+		ConfigUtils.configureSystemBars(this);
 
 		super.onCreate(savedInstanceState);
 
@@ -119,9 +119,6 @@ public class BallotWizardActivity extends ThreemaActivity {
 		nextButton = findViewById(R.id.next_page_button);
 		nextButton.setOnClickListener(v -> nextPage());
 
-		nextText = findViewById(R.id.next_text);
-		nextText.setOnClickListener(v -> nextPage());
-
 		pager.addOnPageChangeListener(new ViewPager.OnPageChangeListener() {
 			@Override
 			public void onPageScrolled(int i, float v, int i2) {}
@@ -136,17 +133,15 @@ public class BallotWizardActivity extends ThreemaActivity {
 				}
 				if (position == 1) {
 					if (checkTitle()) {
-						nextButton.setVisibility(View.GONE);
 						prevButton.setVisibility(View.VISIBLE);
-						nextText.setVisibility(View.VISIBLE);
+						nextButton.setText(R.string.finish);
 						copyButton.setVisibility(View.GONE);
 					} else {
 						position = 0;
 					}
 				} else {
-					nextButton.setVisibility(View.VISIBLE);
 					prevButton.setVisibility(View.GONE);
-					nextText.setVisibility(View.GONE);
+					nextButton.setText(R.string.next);
 					copyButton.setVisibility(View.VISIBLE);
 				}
 				stepPagerStrip.setCurrentPage(position);
@@ -175,7 +170,7 @@ public class BallotWizardActivity extends ThreemaActivity {
 	 * @param fragment
 	 */
 	@Override
-	public void onAttachFragment(Fragment fragment) {
+	public void onAttachFragment(@NonNull Fragment fragment) {
 		super.onAttachFragment(fragment);
 
 		if(fragment instanceof BallotWizardFragment) {
@@ -272,7 +267,7 @@ public class BallotWizardActivity extends ThreemaActivity {
 		return this.ballotAssessment;
 	}
 
-	private class ScreenSlidePagerAdapter extends FragmentStatePagerAdapter {
+	private static class ScreenSlidePagerAdapter extends FragmentStatePagerAdapter {
 		public ScreenSlidePagerAdapter(FragmentManager fm) {
 			super(fm);
 		}
diff --git a/app/src/main/java/ch/threema/app/activities/wizard/WizardBaseActivity.java b/app/src/main/java/ch/threema/app/activities/wizard/WizardBaseActivity.java
index 86bbeda9..0aaa4bb3 100644
--- a/app/src/main/java/ch/threema/app/activities/wizard/WizardBaseActivity.java
+++ b/app/src/main/java/ch/threema/app/activities/wizard/WizardBaseActivity.java
@@ -22,11 +22,12 @@
 package ch.threema.app.activities.wizard;
 
 import static ch.threema.app.ThreemaApplication.PHONE_LINKED_PLACEHOLDER;
-import static ch.threema.app.ThreemaApplication.WORKER_WORK_SYNC;
 
+import android.Manifest;
 import android.accounts.Account;
 import android.annotation.SuppressLint;
 import android.content.Context;
+import android.content.Intent;
 import android.content.pm.PackageManager;
 import android.os.AsyncTask;
 import android.os.Bundle;
@@ -35,8 +36,6 @@ import android.text.TextUtils;
 import android.util.Patterns;
 import android.view.View;
 import android.widget.Button;
-import android.widget.ImageView;
-import android.widget.TextView;
 import android.widget.Toast;
 
 import androidx.annotation.NonNull;
@@ -45,11 +44,10 @@ import androidx.fragment.app.FragmentManager;
 import androidx.fragment.app.FragmentStatePagerAdapter;
 import androidx.lifecycle.LifecycleOwner;
 import androidx.viewpager.widget.ViewPager;
-import androidx.work.ExistingWorkPolicy;
 import androidx.work.OneTimeWorkRequest;
-import androidx.work.WorkInfo;
 import androidx.work.WorkManager;
 
+import com.google.android.material.button.MaterialButton;
 import com.google.i18n.phonenumbers.NumberParseException;
 import com.google.i18n.phonenumbers.PhoneNumberUtil;
 import com.google.i18n.phonenumbers.Phonenumber;
@@ -111,12 +109,14 @@ public class WizardBaseActivity extends ThreemaAppCompatActivity implements
 
 	private static final Logger logger = LoggingUtil.getThreemaLogger("WizardBaseActivity");
 
+	public static final String EXTRA_NEW_IDENTITY_CREATED = "newIdentity";
 	private static final String DIALOG_TAG_USE_ID_AS_NICKNAME = "nd";
 	private static final String DIALOG_TAG_INVALID_ENTRY = "ie";
 	private static final String DIALOG_TAG_USE_ANONYMOUSLY = "ano";
 	private static final String DIALOG_TAG_THREEMA_SAFE = "sd";
 	private static final String DIALOG_TAG_PASSWORD_BAD = "pwb";
 	private static final String DIALOG_TAG_SYNC_CONTACTS_ENABLE = "scen";
+	private static final String DIALOG_TAG_SYNC_CONTACTS_MDM_ENABLE_RATIONALE = "scmer";
 
 	private static final int PERMISSION_REQUEST_READ_CONTACTS = 2;
 	private static final int NUM_PAGES = 5;
@@ -128,9 +128,8 @@ public class WizardBaseActivity extends ThreemaAppCompatActivity implements
 
 	private static int lastPage = 0;
 	private ParallaxViewPager viewPager;
-	private ImageView prevButton, nextButton;
+	private MaterialButton prevButton, nextButton;
 	private Button finishButton;
-	private TextView nextText;
 	private StepPagerStrip stepPagerStrip;
 	private String nickname, email, number, prefix, presetMobile, presetEmail, safePassword;
 	private ThreemaSafeServerInfo safeServerInfo = new ThreemaSafeServerInfo();
@@ -141,7 +140,7 @@ public class WizardBaseActivity extends ThreemaAppCompatActivity implements
 	private LocaleService localeService;
 	private PreferenceService preferenceService;
 	private ThreemaSafeService threemaSafeService;
-	private boolean errorRaised = false;
+	private boolean errorRaised = false, isNewIdentity = false;
 	private WizardFragment4 fragment4;
 
 	private final Handler finishHandler = new Handler();
@@ -224,10 +223,12 @@ public class WizardBaseActivity extends ThreemaAppCompatActivity implements
 				threemaSafeService = serviceManager.getThreemaSafeService();
 			}
 		} catch (Exception e) {
+			logger.error("Exception", e);
 			finish();
 			return;
 		}
 		if (userService == null || localeService == null || preferenceService == null) {
+			logger.error("Required services not available.");
 			finish();
 			return;
 		}
@@ -251,9 +252,6 @@ public class WizardBaseActivity extends ThreemaAppCompatActivity implements
 			}
 		});
 
-		nextText = findViewById(R.id.next_text);
-		nextText.setOnClickListener(this);
-
 		stepPagerStrip = findViewById(R.id.strip);
 		stepPagerStrip.setPageCount(NUM_PAGES);
 		stepPagerStrip.setCurrentPage(WizardFragment0.PAGE_ID);
@@ -262,6 +260,11 @@ public class WizardBaseActivity extends ThreemaAppCompatActivity implements
 		viewPager.addLayer(findViewById(R.id.layer0));
 		viewPager.addLayer(findViewById(R.id.layer1));
 
+		Intent intent = getIntent();
+		if (intent != null) {
+			isNewIdentity = intent.getBooleanExtra(EXTRA_NEW_IDENTITY_CREATED, false);
+		}
+
 		if (ConfigUtils.isWorkBuild()) {
 			performWorkSync();
 		} else {
@@ -413,7 +416,6 @@ public class WizardBaseActivity extends ThreemaAppCompatActivity implements
 	public void onPageSelected(int position) {
 		prevButton.setVisibility(position == WizardFragment0.PAGE_ID ? View.GONE : View.VISIBLE);
 		nextButton.setVisibility(position == NUM_PAGES - 1 ? View.GONE : View.VISIBLE);
-		nextText.setVisibility(View.GONE);
 
 		stepPagerStrip.setCurrentPage(position);
 
@@ -511,7 +513,15 @@ public class WizardBaseActivity extends ThreemaAppCompatActivity implements
 
 		if (this.userCannotChangeContactSync) {
 			if (this.isSyncContacts) {
-				requestContactSyncPermission();
+				if (ConfigUtils.isPermissionGranted(this, Manifest.permission.READ_CONTACTS)) {
+					// Permission already granted, therefore continue by linking the phone
+					linkPhone();
+				} else {
+					// If permission is not yet granted, show a dialog to inform that contact sync
+					// has been force enabled by the administrator
+					WizardDialog wizardDialog = WizardDialog.newInstance(R.string.contact_sync_mdm_rationale, R.string.ok);
+					wizardDialog.show(getSupportFragmentManager(), DIALOG_TAG_SYNC_CONTACTS_MDM_ENABLE_RATIONALE);
+				}
 			} else {
 				linkPhone();
 			}
@@ -645,6 +655,14 @@ public class WizardBaseActivity extends ThreemaAppCompatActivity implements
 		return this.skipWizard;
 	}
 
+	/**
+	 * Return wether the identity was just created
+	 * @return true if it's a new identity, false if the identity was restored
+	 */
+	public boolean isNewIdentity() {
+		return isNewIdentity;
+	}
+
 	@Override
 	public void onYes(String tag, Object data) {
 		switch (tag) {
@@ -658,6 +676,7 @@ public class WizardBaseActivity extends ThreemaAppCompatActivity implements
 			case DIALOG_TAG_THREEMA_SAFE:
 				break;
 			case DIALOG_TAG_SYNC_CONTACTS_ENABLE:
+			case DIALOG_TAG_SYNC_CONTACTS_MDM_ENABLE_RATIONALE:
 				requestContactSyncPermission();
 				break;
 		}
@@ -979,7 +998,7 @@ public class WizardBaseActivity extends ThreemaAppCompatActivity implements
 						threemaSafeService.storeMasterKey(masterkey);
 						preferenceService.setThreemaSafeServerInfo(safeServerInfo);
 						threemaSafeService.setEnabled(true);
-						threemaSafeService.uploadNow(WizardBaseActivity.this, true);
+						threemaSafeService.uploadNow(true);
 					} else {
 						Toast.makeText(WizardBaseActivity.this, R.string.safe_error_preparing, Toast.LENGTH_LONG).show();
 					}
diff --git a/app/src/main/java/ch/threema/app/activities/wizard/WizardFingerPrintActivity.java b/app/src/main/java/ch/threema/app/activities/wizard/WizardFingerPrintActivity.java
index f9b2ffb3..3598e2b9 100644
--- a/app/src/main/java/ch/threema/app/activities/wizard/WizardFingerPrintActivity.java
+++ b/app/src/main/java/ch/threema/app/activities/wizard/WizardFingerPrintActivity.java
@@ -129,7 +129,10 @@ public class WizardFingerPrintActivity extends WizardBackgroundActivity implemen
 				DialogUtil.dismissDialog(getSupportFragmentManager(), DIALOG_TAG_CREATE_ID, true);
 
 				if (TestUtil.empty(errorString)) {
-					startActivity(new Intent(WizardFingerPrintActivity.this, WizardBaseActivity.class));
+					Intent intent = new Intent(WizardFingerPrintActivity.this, WizardBaseActivity.class);
+					intent.putExtra(WizardBaseActivity.EXTRA_NEW_IDENTITY_CREATED, true);
+					startActivity(intent);
+
 					overridePendingTransition(R.anim.abc_fade_in, R.anim.abc_fade_out);
 					finish();
 				} else {
diff --git a/app/src/main/java/ch/threema/app/activities/wizard/WizardIntroActivity.java b/app/src/main/java/ch/threema/app/activities/wizard/WizardIntroActivity.java
index ce797cc0..38e78814 100644
--- a/app/src/main/java/ch/threema/app/activities/wizard/WizardIntroActivity.java
+++ b/app/src/main/java/ch/threema/app/activities/wizard/WizardIntroActivity.java
@@ -39,6 +39,7 @@ import android.widget.TextView;
 import ch.threema.app.R;
 import ch.threema.app.ThreemaApplication;
 import ch.threema.app.activities.PrivacyPolicyActivity;
+import ch.threema.app.activities.SimpleWebViewActivity;
 import ch.threema.app.threemasafe.ThreemaSafeMDMConfig;
 import ch.threema.app.utils.AnimationUtil;
 import ch.threema.app.utils.AppRestrictionUtil;
@@ -101,8 +102,9 @@ public class WizardIntroActivity extends WizardBackgroundActivity {
 			builder.setSpan(new ClickableSpan() {
 				@Override
 				public void onClick(View widget) {
-					ConfigUtils.setAppTheme(ConfigUtils.THEME_DARK);
-					startActivityForResult(new Intent(WizardIntroActivity.this, PrivacyPolicyActivity.class), ACTIVITY_RESULT_PRIVACY_POLICY);
+					Intent intent = new Intent(WizardIntroActivity.this, PrivacyPolicyActivity.class);
+					intent.putExtra(SimpleWebViewActivity.FORCE_DARK_THEME, true);
+					startActivityForResult(intent, ACTIVITY_RESULT_PRIVACY_POLICY);
 				}
 			}, index, index + privacyPolicy.length(), Spanned.SPAN_EXCLUSIVE_EXCLUSIVE);
 			privacyPolicyExplainText.setText(builder);
@@ -155,13 +157,6 @@ public class WizardIntroActivity extends WizardBackgroundActivity {
 		}
 	}
 
-	@Override
-	protected void onActivityResult(int requestCode, int resultCode, Intent data) {
-		super.onActivityResult(requestCode, resultCode, data);
-
-		ConfigUtils.resetAppTheme();
-	}
-
 	/**
 	 * Checks whether th_contact_sync conflicts with user restriction DISALLOW_MODIFY_ACCOUNTS.
 	 * If it conflicts, it shows an information dialog.
diff --git a/app/src/main/java/ch/threema/app/activities/wizard/WizardSafeRestoreActivity.java b/app/src/main/java/ch/threema/app/activities/wizard/WizardSafeRestoreActivity.java
index 0a22da88..7d3616e7 100644
--- a/app/src/main/java/ch/threema/app/activities/wizard/WizardSafeRestoreActivity.java
+++ b/app/src/main/java/ch/threema/app/activities/wizard/WizardSafeRestoreActivity.java
@@ -288,17 +288,14 @@ public class WizardSafeRestoreActivity extends WizardBackgroundActivity implemen
 	}
 
 	private void onSuccessfulRestore() {
-		SimpleStringAlertDialog.newInstance(R.string.restore_success_body,
-			Build.VERSION.SDK_INT <= Build.VERSION_CODES.P ?
-				R.string.android_backup_restart_threema :
-				R.string.safe_backup_tap_to_restart,
+		SimpleStringAlertDialog.newInstance(R.string.restore_success_body, R.string.android_backup_restart_threema,
 			true).show(getSupportFragmentManager(), "d");
 		try {
 			serviceManager.startConnection();
 		} catch (ThreemaException e) {
 			logger.error("Exception", e);
 		}
-		ConfigUtils.scheduleAppRestart(getApplicationContext(), 3000, getApplicationContext().getString(R.string.ipv6_restart_now));
+		ConfigUtils.scheduleAppRestart(getApplicationContext(), 3000, null);
 	}
 
 	@Override
diff --git a/app/src/main/java/ch/threema/app/adapters/BottomSheetListAdapter.java b/app/src/main/java/ch/threema/app/adapters/BottomSheetListAdapter.java
index ccaca973..9c793544 100644
--- a/app/src/main/java/ch/threema/app/adapters/BottomSheetListAdapter.java
+++ b/app/src/main/java/ch/threema/app/adapters/BottomSheetListAdapter.java
@@ -30,10 +30,11 @@ import android.view.ViewGroup;
 import android.widget.ArrayAdapter;
 import android.widget.TextView;
 
-import java.util.List;
-
 import androidx.annotation.NonNull;
 import androidx.appcompat.widget.AppCompatImageView;
+
+import java.util.List;
+
 import ch.threema.app.R;
 import ch.threema.app.ui.BottomSheetItem;
 import ch.threema.app.ui.listitemholder.AbstractListItemHolder;
@@ -57,7 +58,7 @@ public class BottomSheetListAdapter extends ArrayAdapter<BottomSheetItem> {
 		this.selectedItem = selectedItem;
 		this.layoutInflater = LayoutInflater.from(context);
 
-		TypedArray typedArray = context.getTheme().obtainStyledAttributes(new int[]{R.attr.textColorSecondary});
+		TypedArray typedArray = context.getTheme().obtainStyledAttributes(new int[]{R.attr.colorOnSurface});
 		this.regularColor = typedArray.getColor(0, 0);
 		typedArray.recycle();
 	}
@@ -92,8 +93,8 @@ public class BottomSheetListAdapter extends ArrayAdapter<BottomSheetItem> {
 		holder.textView.setText(item.getTitle());
 
 		if (position == selectedItem) {
-			holder.textView.setTextColor(ConfigUtils.getColorFromAttribute(getContext(), R.attr.colorAccent));
-			holder.imageView.setColorFilter(ConfigUtils.getColorFromAttribute(getContext(), R.attr.colorAccent), PorterDuff.Mode.SRC_IN);
+			holder.textView.setTextColor(ConfigUtils.getColorFromAttribute(getContext(), R.attr.colorPrimary));
+			holder.imageView.setColorFilter(ConfigUtils.getColorFromAttribute(getContext(), R.attr.colorPrimary), PorterDuff.Mode.SRC_IN);
 		} else {
 			holder.textView.setTextColor(regularColor);
 			holder.imageView.setColorFilter(regularColor);
diff --git a/app/src/main/java/ch/threema/app/adapters/ComposeMessageAdapter.java b/app/src/main/java/ch/threema/app/adapters/ComposeMessageAdapter.java
index 01f6af5b..81e339fd 100644
--- a/app/src/main/java/ch/threema/app/adapters/ComposeMessageAdapter.java
+++ b/app/src/main/java/ch/threema/app/adapters/ComposeMessageAdapter.java
@@ -21,9 +21,8 @@
 
 package ch.threema.app.adapters;
 
-import android.annotation.SuppressLint;
+import android.animation.LayoutTransition;
 import android.content.Context;
-import android.graphics.drawable.Drawable;
 import android.text.TextUtils;
 import android.util.SparseIntArray;
 import android.view.LayoutInflater;
@@ -40,7 +39,12 @@ import androidx.annotation.LayoutRes;
 import androidx.annotation.NonNull;
 import androidx.annotation.Nullable;
 import androidx.annotation.UiThread;
+import androidx.appcompat.content.res.AppCompatResources;
 import androidx.fragment.app.Fragment;
+import androidx.media3.session.MediaController;
+
+import com.google.android.material.shape.ShapeAppearanceModel;
+import com.google.common.util.concurrent.ListenableFuture;
 
 import org.slf4j.Logger;
 
@@ -94,8 +98,11 @@ import ch.threema.storage.models.DateSeparatorMessageModel;
 import ch.threema.storage.models.FirstUnreadMessageModel;
 import ch.threema.storage.models.MessageType;
 
+import static ch.threema.domain.protocol.csp.messages.file.FileData.RENDERING_DEFAULT;
+
 public class ComposeMessageAdapter extends ArrayAdapter<AbstractMessageModel> {
 	private static final Logger logger = LoggingUtil.getThreemaLogger("ComposeMessageAdapter");
+	public static final int MIN_CONSTRAINT_LENGTH = 2;
 
 	private final List<AbstractMessageModel> values;
 	private final ChatAdapterDecorator.Helper decoratorHelper;
@@ -115,7 +122,7 @@ public class ComposeMessageAdapter extends ArrayAdapter<AbstractMessageModel> {
 
 	private int firstUnreadPos = -1, unreadMessagesCount;
 	private final Context context;
-
+	private final ShapeAppearanceModel shapeAppearanceModelReceiveTop, shapeAppearanceModelReceiveMiddle, shapeAppearanceModelReceiveBottom, shapeAppearanceModelSendTop, shapeAppearanceModelSendMiddle, shapeAppearanceModelSendBottom, shapeAppearanceModelSingle;
 	private final LayoutInflater layoutInflater;
 
 	@Retention(RetentionPolicy.SOURCE)
@@ -187,7 +194,7 @@ public class ComposeMessageAdapter extends ArrayAdapter<AbstractMessageModel> {
 		void longClick(View view, int position, AbstractMessageModel messageModel);
 		boolean touch(View view, MotionEvent motionEvent, AbstractMessageModel messageModel);
 		void avatarClick(View view, int position, AbstractMessageModel messageModel);
-		void onSearchResultsUpdate(int searchResultsIndex, int searchResultsSize);
+		void onSearchResultsUpdate(int searchResultsIndex, int searchResultsSize, int queryLength);
 		void onSearchInProgress(boolean inProgress);
 	}
 
@@ -208,20 +215,15 @@ public class ComposeMessageAdapter extends ArrayAdapter<AbstractMessageModel> {
 			ThumbnailCache<?> thumbnailCache,
 			int thumbnailWidth,
 			Fragment fragment,
-			int unreadMessagesCount) {
+			int unreadMessagesCount,
+			ListenableFuture<MediaController> mediaControllerFuture) {
 		super(context, R.layout.conversation_list_item_send, values);
 
 		this.context = context;
 		this.values = values;
 		this.listView = listView;
 		this.layoutInflater = (LayoutInflater) context.getSystemService(Context.LAYOUT_INFLATER_SERVICE);
-		int regularColor;
-		if (ConfigUtils.getAppTheme(context) != ConfigUtils.THEME_LIGHT) {
-			regularColor = context.getResources().getColor(R.color.dark_text_color_secondary);
-		} else {
-			regularColor = context.getResources().getColor(R.color.text_color_secondary);
-		}
-		Drawable stopwatchIcon = ConfigUtils.getThemedDrawable(getContext(), R.drawable.ic_av_timer_grey600_18dp);
+		int regularColor = ConfigUtils.getColorFromAttribute(context, R.attr.colorOnSurface);
 		int maxBubbleTextLength = context.getResources().getInteger(R.integer.max_bubble_text_length);
 		int maxQuoteTextLength = context.getResources().getInteger(R.integer.max_quote_text_length);
 		this.resultMapIndex = 0;
@@ -245,14 +247,55 @@ public class ComposeMessageAdapter extends ArrayAdapter<AbstractMessageModel> {
 				thumbnailWidth,
 				fragment,
 				regularColor,
-				stopwatchIcon,
 				maxBubbleTextLength,
-				maxQuoteTextLength
+				maxQuoteTextLength,
+				mediaControllerFuture
 		);
 
+		int cornerRadius = context.getResources().getDimensionPixelSize(R.dimen.chat_bubble_border_radius),
+			cornerRadiusSharp = context.getResources().getDimensionPixelSize(R.dimen.chat_bubble_border_radius_sharp);
 		this.bubblePaddingLeftRight = getContext().getResources().getDimensionPixelSize(R.dimen.chat_bubble_container_padding_left_right);
 		this.bubblePaddingBottom = getContext().getResources().getDimensionPixelSize(R.dimen.chat_bubble_container_padding_bottom);
 		this.bubblePaddingBottomGrouped = getContext().getResources().getDimensionPixelSize(R.dimen.chat_bubble_container_padding_bottom_grouped);
+		this.shapeAppearanceModelReceiveTop = new ShapeAppearanceModel.Builder()
+			.setTopLeftCornerSize(cornerRadius)
+			.setTopRightCornerSize(cornerRadius)
+			.setBottomLeftCornerSize(cornerRadiusSharp)
+			.setBottomRightCornerSize(cornerRadius)
+			.build();
+		this.shapeAppearanceModelReceiveMiddle = new ShapeAppearanceModel.Builder()
+			.setTopLeftCornerSize(cornerRadiusSharp)
+			.setTopRightCornerSize(cornerRadius)
+			.setBottomLeftCornerSize(cornerRadiusSharp)
+			.setBottomRightCornerSize(cornerRadius)
+			.build();
+		this.shapeAppearanceModelReceiveBottom = new ShapeAppearanceModel.Builder()
+			.setTopLeftCornerSize(cornerRadiusSharp)
+			.setTopRightCornerSize(cornerRadius)
+			.setBottomLeftCornerSize(cornerRadius)
+			.setBottomRightCornerSize(cornerRadius)
+			.build();
+		this.shapeAppearanceModelSendTop = new ShapeAppearanceModel.Builder()
+			.setTopLeftCornerSize(cornerRadius)
+			.setTopRightCornerSize(cornerRadius)
+			.setBottomLeftCornerSize(cornerRadius)
+			.setBottomRightCornerSize(cornerRadiusSharp)
+			.build();
+		this.shapeAppearanceModelSendMiddle = new ShapeAppearanceModel.Builder()
+			.setTopLeftCornerSize(cornerRadius)
+			.setTopRightCornerSize(cornerRadiusSharp)
+			.setBottomLeftCornerSize(cornerRadius)
+			.setBottomRightCornerSize(cornerRadiusSharp)
+			.build();
+		this.shapeAppearanceModelSendBottom = new ShapeAppearanceModel.Builder()
+			.setTopLeftCornerSize(cornerRadius)
+			.setTopRightCornerSize(cornerRadiusSharp)
+			.setBottomLeftCornerSize(cornerRadius)
+			.setBottomRightCornerSize(cornerRadius)
+			.build();
+		this.shapeAppearanceModelSingle = new ShapeAppearanceModel.Builder()
+			.setAllCornerSizes(cornerRadius)
+			.build();
 	}
 
 	/**
@@ -430,7 +473,6 @@ public class ComposeMessageAdapter extends ArrayAdapter<AbstractMessageModel> {
 	}
 
 	@NonNull
-	@SuppressLint("WrongViewCast")
 	@Override
 	public View getView(final int position, View convertView, ViewGroup parent) {
 		View itemView = convertView;
@@ -455,6 +497,7 @@ public class ComposeMessageAdapter extends ArrayAdapter<AbstractMessageModel> {
 				holder.messageBlockView = itemView.findViewById(R.id.message_block);
 				holder.footerView = itemView.findViewById(R.id.indicator_container);
 				holder.dateView = itemView.findViewById(R.id.date_view);
+				holder.datePrefixIcon = itemView.findViewById(R.id.date_prefix_icon);
 
 				if (isUserMessage(itemType)) {
 					holder.senderView = itemView.findViewById(R.id.group_sender_view);
@@ -481,6 +524,8 @@ public class ComposeMessageAdapter extends ArrayAdapter<AbstractMessageModel> {
 					holder.groupAckThumbsUpImage = itemView.findViewById(R.id.groupack_thumbsup);
 					holder.groupAckThumbsDownImage = itemView.findViewById(R.id.groupack_thumbsdown);
 					holder.tapToResend = itemView.findViewById(R.id.tap_to_resend);
+
+					((ViewGroup) holder.groupAckContainer).getLayoutTransition().enableTransitionType(LayoutTransition.DISAPPEARING|LayoutTransition.APPEARING);
 				}
 				itemView.setTag(holder);
 			}
@@ -497,18 +542,16 @@ public class ComposeMessageAdapter extends ArrayAdapter<AbstractMessageModel> {
 			if (isUserMessage(itemType)) {
 				itemView.setLayoutParams(new AbsListView.LayoutParams(AbsListView.LayoutParams.WRAP_CONTENT, 0));
 				if (messageModel.isOutbox()) {
-					holder.messageBlockView.setBackgroundResource(R.drawable.bubble_send_selector);
+					holder.messageBlockView.setCardBackgroundColor(AppCompatResources.getColorStateList(context, R.color.bubble_send_colorstatelist));
 				} else {
-					holder.messageBlockView.setBackgroundResource(R.drawable.bubble_recv_selector);
+					holder.messageBlockView.setCardBackgroundColor(AppCompatResources.getColorStateList(context, R.color.bubble_receive_colorstatelist));
 				}
-
 			} else {
 				itemView.setLayoutParams(new AbsListView.LayoutParams(AbsListView.LayoutParams.MATCH_PARENT, 0));
 			}
 		}
 		holder.position = position;
 
-		final boolean showAvatar = adjustMarginsForMessageGrouping(holder, itemView, itemType);
 		final ChatAdapterDecorator decorator;
 
 		if (itemType == TYPE_FIRST_UNREAD) {
@@ -516,6 +559,8 @@ public class ComposeMessageAdapter extends ArrayAdapter<AbstractMessageModel> {
 			decorator = new FirstUnreadChatAdapterDecorator(this.context, messageModel, this.decoratorHelper, unreadMessagesCount);
 		}
 		else {
+			final boolean showAvatar = adjustMarginsForMessageGrouping(holder, itemView, itemType, messageModel);
+
 			switch (messageType) {
 				case STATUS:
 					decorator = new StatusChatAdapterDecorator(this.context, messageModel, this.decoratorHelper);
@@ -571,13 +616,14 @@ public class ComposeMessageAdapter extends ArrayAdapter<AbstractMessageModel> {
 					}
 			}
 
-			if(groupId > 0) {
+			if (groupId > 0) {
 				decorator.setGroupMessage(groupId, this.identityColors);
 				decorator.setGroupedMessage(showAvatar);
 			}
 
-			if(this.onClickListener != null) {
-				final View v = itemView;
+			if (this.onClickListener != null) {
+				final View v = holder.messageBlockView;
+
 				decorator.setOnClickElement(messageModel12 -> onClickListener.click(v, position, messageModel12));
 
 				decorator.setOnLongClickElement(messageModel13 -> onClickListener.longClick(v, position, messageModel13));
@@ -617,13 +663,11 @@ public class ComposeMessageAdapter extends ArrayAdapter<AbstractMessageModel> {
 	 * @param itemType The Type the item is representing
 	 * @return true if it's the first item in a group, false if it's a consecutive iitem
 	 */
-	private boolean adjustMarginsForMessageGrouping(ComposeMessageHolder holder, View itemView, @ItemType int itemType) {
-		boolean isFirstItemInGroup = true;
+	private boolean adjustMarginsForMessageGrouping(ComposeMessageHolder holder, View itemView, @ItemType int itemType, @NonNull AbstractMessageModel currentItem) {
+		boolean isFirstItemInGroup = true, hasPreviousItem = false, hasNextItem = false;
 
 		if (itemView != null) {
 			int paddingBottom = bubblePaddingBottom;
-			AbstractMessageModel currentItem = values.get(holder.position);
-
 			if (isUserMessage(itemType)) {
 				if (values.size() > holder.position + 1) {
 					AbstractMessageModel nextItem = values.get(holder.position + 1);
@@ -631,25 +675,25 @@ public class ComposeMessageAdapter extends ArrayAdapter<AbstractMessageModel> {
 					if (isUserMessage(getItemType(nextItem))) {
 						if (isConsecutiveItem(currentItem, nextItem)) {
 							paddingBottom = bubblePaddingBottomGrouped;
+							hasNextItem = true;
 						}
 					}
 				}
+
 				if (holder.position > 0) {
 					AbstractMessageModel previousItem = values.get(holder.position - 1);
 
 					if (isUserMessage(getItemType(previousItem))) {
 						if (isConsecutiveItem(currentItem, previousItem)) {
-							if (currentItem.isOutbox()) {
-								holder.messageBlockView.setBackgroundResource(R.drawable.bubble_send_selector_no_arrow);
-							} else {
-								holder.messageBlockView.setBackgroundResource(R.drawable.bubble_recv_selector_no_arrow);
-							}
 							isFirstItemInGroup = false;
+							hasPreviousItem = true;
 						}
 					}
 				}
 			}
 
+			holder.messageBlockView.setShapeAppearanceModel(getShapeAppearanceForBubble(currentItem.isOutbox(), hasPreviousItem, hasNextItem));
+
 			if (itemView.getPaddingBottom() != paddingBottom) {
 				itemView.setPadding(bubblePaddingLeftRight, 0, bubblePaddingLeftRight, paddingBottom);
 			}
@@ -657,6 +701,28 @@ public class ComposeMessageAdapter extends ArrayAdapter<AbstractMessageModel> {
 		return isFirstItemInGroup;
 	}
 
+	/**
+	 * Return the ShapeAppearanceModel that fits the combination of parameters
+	 * @param isOutbox true if the user is the sender of the message(s), false if he is the receiver
+	 * @param hasPreviousItem true if there is a consecutive message previous to this
+	 * @param hasNextItem true if there is a consecutive message after this
+	 * @return a ShapeAppearanceModel that fits the situation
+	 */
+	private ShapeAppearanceModel getShapeAppearanceForBubble(boolean isOutbox, boolean hasPreviousItem, boolean hasNextItem) {
+		if (hasPreviousItem) {
+			if (hasNextItem) {
+				return isOutbox ? shapeAppearanceModelSendMiddle : shapeAppearanceModelReceiveMiddle;
+			}
+			return isOutbox ? shapeAppearanceModelSendBottom : shapeAppearanceModelReceiveBottom;
+		}
+
+		if (hasNextItem) {
+			return isOutbox ? shapeAppearanceModelSendTop : shapeAppearanceModelReceiveTop;
+		}
+
+		return shapeAppearanceModelSingle;
+	}
+
 	/**
 	 * Detect if the provided two messageModels are from the same sender
 	 * @param firstModel AbstractMessageModel of first item
@@ -711,7 +777,7 @@ public class ComposeMessageAdapter extends ArrayAdapter<AbstractMessageModel> {
 			resultMapIndex = 0;
 			searchUpdate();
 
-			if (constraint == null || constraint.length() < 2) {
+			if (constraint == null || constraint.length() < MIN_CONSTRAINT_LENGTH) {
 				// no filtering
 				filterString = null;
 			} else {
@@ -776,7 +842,7 @@ public class ComposeMessageAdapter extends ArrayAdapter<AbstractMessageModel> {
 								if (quoteType != QuoteUtil.QUOTE_TYPE_NONE) {
 									QuoteUtil.QuoteContent quoteContent = QuoteUtil.getQuoteContent(
 										messageModel,
-										decoratorHelper.getMessageReceiver().getType(),
+										decoratorHelper.getMessageReceiver(),
 										false,
 										decoratorHelper.getThumbnailCache(),
 										getContext(),
@@ -799,8 +865,8 @@ public class ComposeMessageAdapter extends ArrayAdapter<AbstractMessageModel> {
 						} else if (messageModel.getType() == MessageType.FILE) {
 							String searchString = "";
 
-							if (!MimeUtil.isImageFile(messageModel.getFileData().getMimeType()) && !TestUtil.empty(messageModel.getFileData().getFileName())) {
-								// do not index filename for images and GIFs - as it's not visible in the UI
+							if (messageModel.getFileData().getRenderingType() == RENDERING_DEFAULT && !TestUtil.empty(messageModel.getFileData().getFileName())) {
+								// do not index filename for RENDERING_MEDIA or RENDERING_STICKER as it's not visible in the UI
 								searchString += messageModel.getFileData().getFileName();
 							}
 
@@ -929,7 +995,7 @@ public class ComposeMessageAdapter extends ArrayAdapter<AbstractMessageModel> {
 	private void searchUpdate() {
 		int size = resultMap.size();
 
-		onClickListener.onSearchResultsUpdate(size > 0 ? resultMapIndex + 1 : 0, resultMap.size());
+		onClickListener.onSearchResultsUpdate(size > 0 ? resultMapIndex + 1 : 0, resultMap.size(), currentConstraint.length());
 	}
 
 	public void resetMatchPosition() {
diff --git a/app/src/main/java/ch/threema/app/adapters/ContactDetailAdapter.java b/app/src/main/java/ch/threema/app/adapters/ContactDetailAdapter.java
index 23b08ac7..d0ceb779 100644
--- a/app/src/main/java/ch/threema/app/adapters/ContactDetailAdapter.java
+++ b/app/src/main/java/ch/threema/app/adapters/ContactDetailAdapter.java
@@ -30,11 +30,8 @@ import android.view.LayoutInflater;
 import android.view.View;
 import android.view.ViewGroup;
 import android.widget.ArrayAdapter;
-import android.widget.CheckBox;
-import android.widget.ImageButton;
 import android.widget.ImageView;
 import android.widget.LinearLayout;
-import android.widget.RelativeLayout;
 import android.widget.TextView;
 import android.widget.Toast;
 
@@ -43,23 +40,19 @@ import androidx.annotation.StringRes;
 import androidx.appcompat.app.AppCompatActivity;
 import androidx.recyclerview.widget.RecyclerView;
 
-import com.google.android.material.checkbox.MaterialCheckBox;
-import com.google.android.material.chip.Chip;
+import com.google.android.material.button.MaterialButton;
+import com.google.android.material.materialswitch.MaterialSwitch;
 import com.google.android.material.textfield.MaterialAutoCompleteTextView;
 
 import org.slf4j.Logger;
 
-import java.util.Collections;
 import java.util.List;
-import java.util.concurrent.ExecutionException;
 
 import ch.threema.app.R;
 import ch.threema.app.ThreemaApplication;
 import ch.threema.app.dialogs.PublicKeyDialog;
-import ch.threema.app.dialogs.SimpleStringAlertDialog;
 import ch.threema.app.glide.AvatarOptions;
 import ch.threema.app.managers.ServiceManager;
-import ch.threema.app.routines.UpdateFeatureLevelRoutine;
 import ch.threema.app.services.ContactService;
 import ch.threema.app.services.GroupService;
 import ch.threema.app.services.IdListService;
@@ -68,13 +61,10 @@ import ch.threema.app.services.UserService;
 import ch.threema.app.ui.VerificationLevelImageView;
 import ch.threema.app.utils.AndroidContactUtil;
 import ch.threema.app.utils.ConfigUtils;
-import ch.threema.app.utils.RuntimeUtil;
 import ch.threema.base.utils.LoggingUtil;
-import ch.threema.domain.protocol.ThreemaFeature;
-import ch.threema.domain.protocol.api.APIConnector;
+import ch.threema.protobuf.csp.e2e.fs.Terminate;
 import ch.threema.storage.models.ContactModel;
 import ch.threema.storage.models.GroupModel;
-import java8.util.concurrent.CompletableFuture;
 
 public class ContactDetailAdapter extends RecyclerView.Adapter<RecyclerView.ViewHolder> {
 	private static final Logger logger = LoggingUtil.getThreemaLogger("ContactDetailAdapter");
@@ -87,7 +77,6 @@ public class ContactDetailAdapter extends RecyclerView.Adapter<RecyclerView.View
 	private GroupService groupService;
 	private UserService userService;
 	private PreferenceService preferenceService;
-	private APIConnector apiConnector;
 	private IdListService excludeFromSyncListService;
 	private IdListService blackListIdentityService;
 	private final ContactModel contactModel;
@@ -111,16 +100,15 @@ public class ContactDetailAdapter extends RecyclerView.Adapter<RecyclerView.View
 	public class HeaderHolder extends RecyclerView.ViewHolder {
 		private final VerificationLevelImageView verificationLevelImageView;
 		private final TextView threemaIdView;
-		private final CheckBox synchronize;
+		private final MaterialSwitch synchronize;
 		private final View nicknameContainer, synchronizeContainer;
 		private final ImageView syncSourceIcon;
 		private final TextView publicNickNameView;
 		private final LinearLayout groupMembershipTitle;
 		private final MaterialAutoCompleteTextView readReceiptsSpinner, typingIndicatorsSpinner;
-		private final MaterialCheckBox forwardSecurityCheckbox;
-		private final RelativeLayout forwardSecurityContainer;
-		private final Chip clearForwardSecurityButton;
-		private final ImageButton forwardSecurityInfo;
+		private final View clearForwardSecuritySection;
+		private final MaterialButton clearForwardSecurityButton;
+		private int onThreemaIDClickCount = 0;
 
 		public HeaderHolder(View view) {
 			super(view);
@@ -136,10 +124,8 @@ public class ContactDetailAdapter extends RecyclerView.Adapter<RecyclerView.View
 			this.syncSourceIcon = itemView.findViewById(R.id.sync_source_icon);
 			this.readReceiptsSpinner = itemView.findViewById(R.id.read_receipts_spinner);
 			this.typingIndicatorsSpinner = itemView.findViewById(R.id.typing_indicators_spinner);
-			this.forwardSecurityCheckbox = itemView.findViewById(R.id.forward_security_enabled);
+			this.clearForwardSecuritySection = itemView.findViewById(R.id.clear_forward_security_section);
 			this.clearForwardSecurityButton = itemView.findViewById(R.id.clear_forward_security);
-			this.forwardSecurityContainer = itemView.findViewById(R.id.forward_security_container);
-			this.forwardSecurityInfo = itemView.findViewById(R.id.forward_security_info);
 
 			verificationLevelIconView.setOnClickListener(v -> {
 				if (onClickListener != null) {
@@ -147,15 +133,33 @@ public class ContactDetailAdapter extends RecyclerView.Adapter<RecyclerView.View
 				}
 			});
 
-
-			itemView.findViewById(R.id.threema_id).setOnLongClickListener(ignored -> {
+			threemaIdView.setOnLongClickListener(ignored -> {
 				String identity = contactModel.getIdentity();
 				copyTextToClipboard(identity, R.string.contact_details_id_copied);
 				return true;
 			});
 
+			// When clicking ten times on the Threema ID, the clear forward security session button
+			// becomes visible.
+			threemaIdView.setOnClickListener(v -> {
+				onThreemaIDClickCount++;
+				if (onThreemaIDClickCount >= 10) {
+					onThreemaIDClickCount = 0;
+					clearForwardSecuritySection.setVisibility(View.VISIBLE);
+					clearForwardSecurityButton.setOnClickListener(clearButton -> {
+						try {
+							ThreemaApplication.requireServiceManager()
+								.getForwardSecurityMessageProcessor()
+								.clearAndTerminateAllSessions(contactModel, Terminate.Cause.RESET);
+							Toast.makeText(clearButton.getContext(), R.string.forward_security_cleared, Toast.LENGTH_LONG).show();
+						} catch (Exception e) {
+							Toast.makeText(clearButton.getContext(), e.getMessage(), Toast.LENGTH_LONG).show();
+						}
+					});
+				}
+			});
 
-			itemView.findViewById(R.id.public_nickname).setOnLongClickListener(ignored -> {
+			publicNickNameView.setOnLongClickListener(ignored -> {
 				String nickname = contactModel.getPublicNickName();
 				copyTextToClipboard(nickname, R.string.contact_details_nickname_copied);
 				return true;
@@ -182,16 +186,15 @@ public class ContactDetailAdapter extends RecyclerView.Adapter<RecyclerView.View
 		this.context = context;
 		this.values = values;
 		this.contactModel = contactModel;
-		ServiceManager serviceManager = ThreemaApplication.getServiceManager();
 
 		try {
+			ServiceManager serviceManager = ThreemaApplication.requireServiceManager();
 			this.contactService = serviceManager.getContactService();
 			this.groupService = serviceManager.getGroupService();
 			this.userService = serviceManager.getUserService();
 			this.excludeFromSyncListService = serviceManager.getExcludedSyncIdentitiesService();
 			this.blackListIdentityService = serviceManager.getBlackListService();
 			this.preferenceService = serviceManager.getPreferenceService();
-			this.apiConnector = serviceManager.getAPIConnector();
 		} catch (Exception e) {
 			logger.error("Exception", e);
 		}
@@ -257,19 +260,28 @@ public class ContactDetailAdapter extends RecyclerView.Adapter<RecyclerView.View
 			headerHolder.verificationLevelImageView.setContactModel(contactModel);
 			headerHolder.verificationLevelImageView.setVisibility(View.VISIBLE);
 
-			if (preferenceService.isSyncContacts() && contactModel.getAndroidContactLookupKey() != null &&
-				ConfigUtils.isPermissionGranted(ThreemaApplication.getAppContext(), Manifest.permission.READ_CONTACTS)) {
+			boolean isSyncExcluded = excludeFromSyncListService.has(contactModel.getIdentity());
+
+			if (preferenceService.isSyncContacts()
+				&& (contactModel.getAndroidContactLookupKey() != null || isSyncExcluded)
+				&& ConfigUtils.isPermissionGranted(ThreemaApplication.getAppContext(), Manifest.permission.READ_CONTACTS)
+			) {
 				headerHolder.synchronizeContainer.setVisibility(View.VISIBLE);
 
-				Drawable icon = AndroidContactUtil.getInstance().getAccountIcon(contactModel);
+				Drawable icon = null;
+				try {
+					icon = AndroidContactUtil.getInstance().getAccountIcon(contactModel);
+				} catch (SecurityException e) {
+					logger.error("Could not access android account icon", e);
+				}
 				if (icon != null) {
 					headerHolder.syncSourceIcon.setImageDrawable(icon);
 					headerHolder.syncSourceIcon.setVisibility(View.VISIBLE);
 				} else {
-					headerHolder.syncSourceIcon.setVisibility(View.INVISIBLE);
+					headerHolder.syncSourceIcon.setVisibility(View.GONE);
 				}
 
-				headerHolder.synchronize.setChecked(excludeFromSyncListService.has(contactModel.getIdentity()));
+				headerHolder.synchronize.setChecked(isSyncExcluded);
 				headerHolder.synchronize.setOnCheckedChangeListener((buttonView, isChecked) -> {
 					if (isChecked) {
 						excludeFromSyncListService.add(contactModel.getIdentity());
@@ -317,48 +329,6 @@ public class ContactDetailAdapter extends RecyclerView.Adapter<RecyclerView.View
 				contactModel.setTypingIndicators(position12);
 				contactService.save(contactModel);
 			});
-
-			if (ConfigUtils.isForwardSecurityEnabled()) {
-				headerHolder.forwardSecurityInfo.setOnClickListener(v -> SimpleStringAlertDialog.newInstance(R.string.forward_security_mode, R.string.forward_security_explanation).show(((AppCompatActivity) context).getSupportFragmentManager(), "fsinfo"));
-
-				if (ThreemaFeature.canForwardSecurity(contactModel.getFeatureMask())) {
-					headerHolder.forwardSecurityCheckbox.setEnabled(true);
-				} else {
-					try {
-						UpdateFeatureLevelRoutine.removeTimeCache(contactModel);
-						CompletableFuture
-							.runAsync(new UpdateFeatureLevelRoutine(
-								contactService,
-								apiConnector,
-								Collections.singletonList(this.contactModel)
-							))
-							.thenRun(() -> RuntimeUtil.runOnUiThread(() -> {
-								headerHolder.forwardSecurityCheckbox.setEnabled(ThreemaFeature.canForwardSecurity(contactModel.getFeatureMask()));
-							}))
-							.get();
-					} catch (InterruptedException | ExecutionException e) {
-						logger.warn("Unable to fetch feature mask");
-					}
-				}
-				headerHolder.forwardSecurityCheckbox.setChecked(contactModel.isForwardSecurityEnabled());
-				headerHolder.forwardSecurityCheckbox.setOnCheckedChangeListener((compoundButton, b) -> {
-					contactModel.setForwardSecurityEnabled(b);
-					contactService.save(contactModel);
-				});
-				headerHolder.forwardSecurityContainer.setVisibility(View.VISIBLE);
-
-				if (ConfigUtils.isTestBuild()) {
-					headerHolder.clearForwardSecurityButton.setOnClickListener(view -> {
-						try {
-							ThreemaApplication.getServiceManager().getDHSessionStore().deleteAllDHSessions(userService.getIdentity(), contactModel.getIdentity());
-							Toast.makeText(this.context, R.string.forward_security_cleared, Toast.LENGTH_LONG).show();
-						} catch (Exception e) {
-							Toast.makeText(this.context, e.getMessage(), Toast.LENGTH_LONG).show();
-						}
-					});
-					headerHolder.clearForwardSecurityButton.setVisibility(View.VISIBLE);
-				}
-			}
 		}
 	}
 
diff --git a/app/src/main/java/ch/threema/app/adapters/ContactListAdapter.java b/app/src/main/java/ch/threema/app/adapters/ContactListAdapter.java
index 0b59c6b6..948b2065 100644
--- a/app/src/main/java/ch/threema/app/adapters/ContactListAdapter.java
+++ b/app/src/main/java/ch/threema/app/adapters/ContactListAdapter.java
@@ -48,6 +48,7 @@ import java.util.Collections;
 import java.util.Date;
 import java.util.HashMap;
 import java.util.HashSet;
+import java.util.Iterator;
 import java.util.List;
 
 import ch.threema.app.R;
@@ -63,7 +64,6 @@ import ch.threema.app.ui.VerificationLevelImageView;
 import ch.threema.app.ui.listitemholder.AvatarListItemHolder;
 import ch.threema.app.utils.AdapterUtil;
 import ch.threema.app.utils.ContactUtil;
-import ch.threema.app.utils.LocaleUtil;
 import ch.threema.app.utils.NameUtil;
 import ch.threema.app.utils.TestUtil;
 import ch.threema.app.utils.ViewUtil;
@@ -543,14 +543,16 @@ public class ContactListAdapter extends FilterableListAdapter implements Section
 		HashSet<ContactModel> contacts = new HashSet<>();
 		ContactModel contactModel;
 
-		for (int position: checkedItems) {
+		Iterator<Integer> iterator = checkedItems.iterator();
+		while (iterator.hasNext()) {
+			int position = iterator.next();
 			try {
 				contactModel = ovalues.get(position);
 				if (contactModel != null) {
 					contacts.add(contactModel);
 				}
 			} catch (IndexOutOfBoundsException e) {
-				checkedItems.remove(position);
+				iterator.remove();
 			}
 		}
 		return contacts;
diff --git a/app/src/main/java/ch/threema/app/adapters/DistributionListAdapter.java b/app/src/main/java/ch/threema/app/adapters/DistributionListAdapter.java
index 7b6934d0..8d6e3d8d 100644
--- a/app/src/main/java/ch/threema/app/adapters/DistributionListAdapter.java
+++ b/app/src/main/java/ch/threema/app/adapters/DistributionListAdapter.java
@@ -43,6 +43,7 @@ import ch.threema.app.ui.AvatarView;
 import ch.threema.app.ui.CheckableConstraintLayout;
 import ch.threema.app.ui.listitemholder.AvatarListItemHolder;
 import ch.threema.app.utils.NameUtil;
+import ch.threema.app.utils.TestUtil;
 import ch.threema.storage.models.DistributionListModel;
 
 public class DistributionListAdapter extends FilterableListAdapter {
@@ -51,14 +52,16 @@ public class DistributionListAdapter extends FilterableListAdapter {
 	private List<DistributionListModel> ovalues;
 	private DistributionListFilter groupListFilter;
 	private final DistributionListService distributionListService;
+	private final FilterResultsListener filterResultsListener;
 
-	public DistributionListAdapter(Context context, List<DistributionListModel> values, List<Integer> checkedItems, DistributionListService distributionListService) {
+	public DistributionListAdapter(Context context, List<DistributionListModel> values, List<Integer> checkedItems, DistributionListService distributionListService, FilterResultsListener filterResultsListener) {
 		super(context, R.layout.item_distribution_list, (List<Object>) (Object) values);
 
 		this.context = context;
 		this.values = values;
 		this.ovalues = values;
 		this.distributionListService = distributionListService;
+		this.filterResultsListener = filterResultsListener;
 
 		if (checkedItems != null && checkedItems.size() > 0) {
 			// restore checked items
@@ -161,6 +164,9 @@ public class DistributionListAdapter extends FilterableListAdapter {
 		@Override
 		protected void publishResults(CharSequence constraint, FilterResults results) {
 			values = (List<DistributionListModel>) results.values;
+			if (filterResultsListener != null) {
+				filterResultsListener.onResultsAvailable(TestUtil.empty(constraint) ? 0 : results.count);
+			}
 			notifyDataSetChanged();
 		}
 
diff --git a/app/src/main/java/ch/threema/app/adapters/FilterResultsListener.java b/app/src/main/java/ch/threema/app/adapters/FilterResultsListener.java
new file mode 100644
index 00000000..09cf7b08
--- /dev/null
+++ b/app/src/main/java/ch/threema/app/adapters/FilterResultsListener.java
@@ -0,0 +1,28 @@
+/*  _____ _
+ * |_   _| |_  _ _ ___ ___ _ __  __ _
+ *   | | | ' \| '_/ -_) -_) '  \/ _` |_
+ *   |_| |_||_|_| \___\___|_|_|_\__,_(_)
+ *
+ * Threema for Android
+ * Copyright (c) 2023 Threema GmbH
+ *
+ * This program is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU Affero General Public License, version 3,
+ * as published by the Free Software Foundation.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+ * GNU Affero General Public License for more details.
+ *
+ * You should have received a copy of the GNU Affero General Public License
+ * along with this program. If not, see <https://www.gnu.org/licenses/>.
+ */
+
+package ch.threema.app.adapters;
+
+import androidx.annotation.MainThread;
+
+public interface FilterResultsListener {
+	@MainThread void onResultsAvailable(int count);
+}
diff --git a/app/src/main/java/ch/threema/app/adapters/GroupDetailAdapter.java b/app/src/main/java/ch/threema/app/adapters/GroupDetailAdapter.java
index 590cb5ca..e752d14c 100644
--- a/app/src/main/java/ch/threema/app/adapters/GroupDetailAdapter.java
+++ b/app/src/main/java/ch/threema/app/adapters/GroupDetailAdapter.java
@@ -21,6 +21,10 @@
 
 package ch.threema.app.adapters;
 
+import static ch.threema.app.adapters.GroupDetailAdapter.GroupDescState.COLLAPSED;
+import static ch.threema.app.adapters.GroupDetailAdapter.GroupDescState.EXPANDED;
+import static ch.threema.app.adapters.GroupDetailAdapter.GroupDescState.NONE;
+
 import android.content.Context;
 import android.graphics.Bitmap;
 import android.text.Layout;
@@ -28,19 +32,21 @@ import android.view.LayoutInflater;
 import android.view.View;
 import android.view.ViewGroup;
 import android.widget.ImageView;
-import android.widget.LinearLayout;
 import android.widget.TextView;
 
+import androidx.annotation.NonNull;
+import androidx.appcompat.widget.AppCompatImageButton;
+import androidx.constraintlayout.widget.ConstraintLayout;
+import androidx.recyclerview.widget.RecyclerView;
+
+import com.google.android.material.chip.Chip;
+import com.google.android.material.materialswitch.MaterialSwitch;
+
 import org.slf4j.Logger;
 
 import java.io.IOException;
 import java.util.List;
 
-import androidx.annotation.NonNull;
-import androidx.appcompat.widget.AppCompatImageButton;
-import androidx.appcompat.widget.SwitchCompat;
-import androidx.constraintlayout.widget.ConstraintLayout;
-import androidx.recyclerview.widget.RecyclerView;
 import ch.threema.app.BuildConfig;
 import ch.threema.app.R;
 import ch.threema.app.ThreemaApplication;
@@ -64,10 +70,6 @@ import ch.threema.storage.models.GroupModel;
 import ch.threema.storage.models.group.GroupInviteModel;
 import java8.util.Optional;
 
-import static ch.threema.app.adapters.GroupDetailAdapter.GroupDescState.COLLAPSED;
-import static ch.threema.app.adapters.GroupDetailAdapter.GroupDescState.EXPANDED;
-import static ch.threema.app.adapters.GroupDetailAdapter.GroupDescState.NONE;
-
 public class GroupDetailAdapter extends RecyclerView.Adapter<RecyclerView.ViewHolder> {
 	public enum GroupDescState {NONE, COLLAPSED, EXPANDED}
 	private static final Logger logger = LoggingUtil.getThreemaLogger("GroupDetailAdapter");
@@ -75,7 +77,7 @@ public class GroupDetailAdapter extends RecyclerView.Adapter<RecyclerView.ViewHo
 	private static final int TYPE_HEADER = 0;
 	private static final int TYPE_ITEM = 1;
 
-	private boolean isGroupAdmin = false;
+	private boolean meIsGroupAdmin = false;
 
 	private final Context context;
 	private ContactService contactService;
@@ -92,6 +94,7 @@ public class GroupDetailAdapter extends RecyclerView.Adapter<RecyclerView.ViewHo
 		public final View view;
 		public final TextView nameView, idView;
 		public final AvatarView avatarView;
+		public final Chip adminChip;
 
 		public ItemHolder(View view) {
 			super(view);
@@ -99,19 +102,16 @@ public class GroupDetailAdapter extends RecyclerView.Adapter<RecyclerView.ViewHo
 			this.nameView = itemView.findViewById(R.id.group_name);
 			this.avatarView = itemView.findViewById(R.id.avatar_view);
 			this.idView = itemView.findViewById(R.id.threemaid);
+			this.adminChip = itemView.findViewById(R.id.admin_chip);
 		}
 	}
 
 	public class HeaderHolder extends RecyclerView.ViewHolder {
 		private final SectionHeaderView groupMembersTitleView;
-		private final LinearLayout groupOwnerContainerView;
-		private final AvatarView ownerAvatarView;
-		private final TextView ownerName;
-		private final TextView ownerThreemaId;
-		private final SectionHeaderView ownerNameTitle;
+		private final View addMembersView;
 		private final ConstraintLayout linkContainerView;
 		private final SectionHeaderView groupLinkTitle;
-		private final SwitchCompat linkEnableSwitch;
+		private final MaterialSwitch linkEnableSwitch;
 		private final TextView linkString;
 		private final AppCompatImageButton linkResetButton;
 		private final AppCompatImageButton linkShareButton;
@@ -126,11 +126,7 @@ public class GroupDetailAdapter extends RecyclerView.Adapter<RecyclerView.ViewHo
 
 			// items in object
 			this.groupMembersTitleView = itemView.findViewById(R.id.group_members_title);
-			this.groupOwnerContainerView = itemView.findViewById(R.id.group_owner_container);
-			this.ownerAvatarView = itemView.findViewById(R.id.avatar_view);
-			this.ownerName = itemView.findViewById(R.id.group_name);
-			this.ownerThreemaId = itemView.findViewById(R.id.threemaid);
-			this.ownerNameTitle = itemView.findViewById(R.id.group_owner_title);
+			this.addMembersView = itemView.findViewById(R.id.add_member);
 			this.linkContainerView = itemView.findViewById(R.id.group_link_container);
 			this.groupLinkTitle = itemView.findViewById(R.id.group_link_header);
 			this.linkEnableSwitch = itemView.findViewById(R.id.group_link_switch);
@@ -218,25 +214,19 @@ public class GroupDetailAdapter extends RecyclerView.Adapter<RecyclerView.ViewHo
 			AdapterUtil.styleContact(itemHolder.nameView, contactModel);
 			itemHolder.avatarView.setImageBitmap(avatar);
 			itemHolder.avatarView.setBadgeVisible(contactService.showBadge(contactModel));
-			itemHolder.view.setOnClickListener(new View.OnClickListener() {
-				@Override
-				public void onClick(View v) {
-					onClickListener.onGroupMemberClick(v, contactModel);
-				}
-			});
+			itemHolder.view.setOnClickListener(v -> onClickListener.onGroupMemberClick(v, contactModel));
+
+			boolean isAdmin = contactModel.getIdentity().equals(groupModel.getCreatorIdentity());
+			itemHolder.adminChip.setVisibility(isAdmin ? View.VISIBLE: View.GONE);
+			itemHolder.idView.setVisibility(isAdmin ? View.GONE : View.VISIBLE);
 		} else {
 			this.headerHolder = (HeaderHolder) holder;
-			headerHolder.groupOwnerContainerView.setOnClickListener(new View.OnClickListener() {
-				@Override
-				public void onClick(View v) {
-					onClickListener.onGroupOwnerClick(v, groupModel.getCreatorIdentity());
-				}
-			});
+			headerHolder.addMembersView.setOnClickListener(v -> onClickListener.onAddMembersClick(v));
 
 			ContactModel ownerContactModel = contactService.getByIdentity(groupModel.getCreatorIdentity());
 
 			// check if the ID is the owner of the group
-			isGroupAdmin = groupModel.getCreatorIdentity().equals(contactService.getMe().getIdentity());
+			meIsGroupAdmin = groupModel.getCreatorIdentity().equals(contactService.getMe().getIdentity());
 
 			if (ConfigUtils.supportGroupDescription()) {
 				initGroupDescriptionSection();
@@ -245,12 +235,6 @@ public class GroupDetailAdapter extends RecyclerView.Adapter<RecyclerView.ViewHo
 			}
 
 			if (ownerContactModel != null) {
-				Bitmap bitmap = contactService.getAvatar(ownerContactModel, false);
-
-				headerHolder.ownerAvatarView.setImageBitmap(bitmap);
-				headerHolder.ownerThreemaId.setText(ownerContactModel.getIdentity());
-				headerHolder.ownerName.setText(NameUtil.getDisplayNameOrNickname(ownerContactModel, true));
-
 				if (!ConfigUtils.supportsGroupLinks() || ownerContactModel != contactService.getMe()) {
 					headerHolder.linkContainerView.setVisibility(View.GONE);
 				}
@@ -258,19 +242,19 @@ public class GroupDetailAdapter extends RecyclerView.Adapter<RecyclerView.ViewHo
 					initGroupLinkSection();
 				}
 			} else {
-				// creator is no longer around / has been revoked
-				headerHolder.ownerAvatarView.setImageBitmap(contactService.getDefaultAvatar(null, false, false));
-				headerHolder.ownerThreemaId.setText(groupModel.getCreatorIdentity());
-				headerHolder.ownerName.setText(R.string.invalid_threema_id);
+				headerHolder.linkContainerView.setVisibility(View.GONE);
 			}
-			headerHolder.ownerNameTitle.setText(context.getString(R.string.add_group_owner) +
-					" (" + LocaleUtil.formatTimeStampString(context, groupModel.getCreatedAt().getTime(), false) +
-					")");
+
+			boolean addMembersViewVisibility = meIsGroupAdmin;
 
 			if (contactModels != null) {
-				headerHolder.groupMembersTitleView.setText(context.getString(R.string.add_group_members_list) +
-					" (" + contactModels.size() + "/" + BuildConfig.MAX_GROUP_SIZE + ")");
+				headerHolder.groupMembersTitleView.setText(ConfigUtils.getSafeQuantityString(context, R.plurals.number_of_group_members, contactModels.size(), contactModels.size()));
+				if (contactModels.size() >= BuildConfig.MAX_GROUP_SIZE) {
+					addMembersViewVisibility = false;
+				}
 			}
+
+			headerHolder.addMembersView.setVisibility(addMembersViewVisibility ? View.VISIBLE : View.GONE);
 		}
 	}
 
@@ -458,7 +442,7 @@ public class GroupDetailAdapter extends RecyclerView.Adapter<RecyclerView.ViewHo
 		headerHolder.groupDescText.setVisibility(View.VISIBLE);
 		headerHolder.groupDescText.setText(groupDetailViewModel.getGroupDesc());
 		LinkifyUtil.getInstance().linkifyText(headerHolder.groupDescText, true);
-		if (isGroupAdmin) {
+		if (meIsGroupAdmin) {
 			headerHolder.changeGroupDescButton.setVisibility(View.VISIBLE);
 		} else {
 			headerHolder.changeGroupDescButton.setVisibility(View.GONE);
@@ -475,7 +459,7 @@ public class GroupDetailAdapter extends RecyclerView.Adapter<RecyclerView.ViewHo
 		headerHolder.groupDescChangedDate.setVisibility(View.GONE);
 		headerHolder.changeGroupDescButton.setVisibility(View.GONE);
 		headerHolder.expandButton.setText(R.string.add_group_description);
-		if (isGroupAdmin) {
+		if (meIsGroupAdmin) {
 			headerHolder.expandButton.setVisibility(View.VISIBLE);
 		} else {
 			headerHolder.expandButton.setVisibility(View.GONE);
@@ -499,5 +483,6 @@ public class GroupDetailAdapter extends RecyclerView.Adapter<RecyclerView.ViewHo
 		void onResetLinkClick();
 		void onShareLinkClick();
 		void onGroupDescriptionEditClick();
+		void onAddMembersClick(View v);
 	}
 }
diff --git a/app/src/main/java/ch/threema/app/adapters/GroupListAdapter.java b/app/src/main/java/ch/threema/app/adapters/GroupListAdapter.java
index ff05233b..39a8b50a 100644
--- a/app/src/main/java/ch/threema/app/adapters/GroupListAdapter.java
+++ b/app/src/main/java/ch/threema/app/adapters/GroupListAdapter.java
@@ -42,6 +42,7 @@ import ch.threema.app.ui.CheckableConstraintLayout;
 import ch.threema.app.ui.listitemholder.AvatarListItemHolder;
 import ch.threema.app.utils.AdapterUtil;
 import ch.threema.app.utils.NameUtil;
+import ch.threema.app.utils.TestUtil;
 import ch.threema.app.utils.TextUtil;
 import ch.threema.storage.models.GroupModel;
 
@@ -51,14 +52,17 @@ public class GroupListAdapter extends FilterableListAdapter {
 	private List<GroupModel> ovalues;
 	private GroupListFilter groupListFilter;
 	private final GroupService groupService;
+	private final FilterResultsListener filterResultsListener;
 
-	public GroupListAdapter(Context context, List<GroupModel> values, List<Integer> checkedItems, GroupService groupService) {
+
+	public GroupListAdapter(Context context, List<GroupModel> values, List<Integer> checkedItems, GroupService groupService, FilterResultsListener filterResultsListener) {
 		super(context, R.layout.item_group_list, (List<Object>) (Object) values);
 
 		this.context = context;
 		this.values = values;
 		this.ovalues = values;
 		this.groupService = groupService;
+		this.filterResultsListener = filterResultsListener;
 
 		if (checkedItems != null && checkedItems.size() > 0) {
 			// restore checked items
@@ -168,6 +172,9 @@ public class GroupListAdapter extends FilterableListAdapter {
 		@Override
 		protected void publishResults(CharSequence constraint, FilterResults results) {
 			values = (List<GroupModel>) results.values;
+			if (filterResultsListener != null) {
+				filterResultsListener.onResultsAvailable(TestUtil.empty(constraint) ? 0 : results.count);
+			}
 			notifyDataSetChanged();
 		}
 
diff --git a/app/src/main/java/ch/threema/app/adapters/MediaGalleryAdapter.java b/app/src/main/java/ch/threema/app/adapters/MediaGalleryAdapter.java
deleted file mode 100644
index 921f7a8a..00000000
--- a/app/src/main/java/ch/threema/app/adapters/MediaGalleryAdapter.java
+++ /dev/null
@@ -1,297 +0,0 @@
-/*  _____ _
- * |_   _| |_  _ _ ___ ___ _ __  __ _
- *   | | | ' \| '_/ -_) -_) '  \/ _` |_
- *   |_| |_||_|_| \___\___|_|_|_\__,_(_)
- *
- * Threema for Android
- * Copyright (c) 2014-2023 Threema GmbH
- *
- * This program is free software: you can redistribute it and/or modify
- * it under the terms of the GNU Affero General Public License, version 3,
- * as published by the Free Software Foundation.
- *
- * This program is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
- * GNU Affero General Public License for more details.
- *
- * You should have received a copy of the GNU Affero General Public License
- * along with this program. If not, see <https://www.gnu.org/licenses/>.
- */
-
-package ch.threema.app.adapters;
-
-import android.annotation.SuppressLint;
-import android.content.Context;
-import android.graphics.Bitmap;
-import android.graphics.PorterDuff;
-import android.os.AsyncTask;
-import android.view.LayoutInflater;
-import android.view.View;
-import android.view.ViewGroup;
-import android.widget.ArrayAdapter;
-import android.widget.ImageView;
-import android.widget.ProgressBar;
-import android.widget.TextView;
-
-import org.slf4j.Logger;
-
-import java.util.ArrayList;
-import java.util.List;
-import java.util.concurrent.RejectedExecutionException;
-
-import androidx.annotation.ColorInt;
-import androidx.annotation.NonNull;
-import ch.threema.app.R;
-import ch.threema.app.cache.ThumbnailCache;
-import ch.threema.app.services.FileService;
-import ch.threema.app.ui.ControllerView;
-import ch.threema.app.ui.SquareImageView;
-import ch.threema.app.ui.listitemholder.AbstractListItemHolder;
-import ch.threema.app.utils.ConfigUtils;
-import ch.threema.app.utils.FileUtil;
-import ch.threema.app.utils.StringConversionUtil;
-import ch.threema.base.utils.LoggingUtil;
-import ch.threema.storage.models.AbstractMessageModel;
-import ch.threema.storage.models.MessageType;
-import ch.threema.storage.models.data.MessageContentsType;
-
-import static ch.threema.storage.models.data.MessageContentsType.AUDIO;
-import static ch.threema.storage.models.data.MessageContentsType.FILE;
-import static ch.threema.storage.models.data.MessageContentsType.GIF;
-import static ch.threema.storage.models.data.MessageContentsType.IMAGE;
-import static ch.threema.storage.models.data.MessageContentsType.VIDEO;
-import static ch.threema.storage.models.data.MessageContentsType.VOICE_MESSAGE;
-
-public class MediaGalleryAdapter extends ArrayAdapter<AbstractMessageModel> {
-	private static final Logger logger = LoggingUtil.getThreemaLogger("MediaGalleryAdapter");
-
-	private final List<AbstractMessageModel> values;
-	private final FileService fileService;
-	private final ThumbnailCache thumbnailCache;
-	private final LayoutInflater layoutInflater;
-	private final List<Integer> brokenThumbnails = new ArrayList<Integer>();
-	@ColorInt private final int foregroundColor;
-
-	public static final int TYPE_NONE = 0;
-	public static final int TYPE_IMAGE = 1;
-	public static final int TYPE_VIDEO = 2;
-	public static final int TYPE_AUDIO = 3;
-	public static final int TYPE_FILE = 4;
-	public static final int TYPE_MAX_COUNT = TYPE_FILE + 1;
-
-	public MediaGalleryAdapter(
-			Context context,
-			List<AbstractMessageModel> values,
-			FileService fileService,
-			ThumbnailCache thumbnailCache) {
-		super(context, R.layout.item_media_gallery, values);
-
-		this.values = values;
-		this.fileService = fileService;
-		this.thumbnailCache = thumbnailCache;
-		this.layoutInflater = LayoutInflater.from(context);
-		this.foregroundColor = ConfigUtils.getColorFromAttribute(context, R.attr.textColorSecondary);
-	}
-
-	private static class MediaGalleryHolder extends AbstractListItemHolder {
-		public ImageView imageView;
-		public ControllerView playButton;
-		public ProgressBar progressBar;
-		public TextView topTextView;
-		public View textContainerView;
-		public int messageId;
-	}
-
-	@Override
-	public int getItemViewType(int position) {
-		final AbstractMessageModel m = this.getItem(position);
-		return this.getType(m);
-	}
-
-	private int getType(AbstractMessageModel m) {
-		if (m != null) {
-			if (!m.isStatusMessage()) {
-				switch (m.getMessageContentsType()) {
-					case IMAGE:
-						return TYPE_IMAGE;
-					case GIF:
-					case VIDEO:
-						return TYPE_VIDEO;
-					case AUDIO:
-					case VOICE_MESSAGE:
-						return TYPE_AUDIO;
-					case FILE:
-						return TYPE_FILE;
-				}
-			}
-		}
-		return TYPE_NONE;
-	}
-
-	@Override
-	public int getViewTypeCount() {
-		return TYPE_MAX_COUNT;
-	}
-
-	private Bitmap getBitmap(AbstractMessageModel messageModel) {
-		Bitmap thumbnail;
-
-		try {
-			thumbnail = fileService.getMessageThumbnailBitmap(messageModel, thumbnailCache);
-		} catch (Exception e) {
-			logger.error("Exception", e);
-			thumbnail = null;
-		}
-
-		return thumbnail;
-	}
-
-	@SuppressLint("StaticFieldLeak")
-	private void loadThumbnailBitmap(final int position, MediaGalleryHolder holder, final AbstractMessageModel messageModel) {
-		//do nothing!
-		holder.imageView.setImageBitmap(null);
-		synchronized (brokenThumbnails) {
-			if(this.brokenThumbnails.contains(messageModel.getId())) {
-				return;
-			}
-		}
-
-		//load new one by async task
-		try {
-			new AsyncTask<MediaGalleryHolder, Void, Bitmap>() {
-				private MediaGalleryHolder holder;
-
-				@Override
-				protected Bitmap doInBackground(MediaGalleryHolder... params) {
-					this.holder = params[0];
-
-
-					if (position != holder.position) {
-						cancel(true);
-						return null;
-					}
-					return MediaGalleryAdapter.this.getBitmap(messageModel);
-				}
-
-				@Override
-				protected void onPostExecute(Bitmap thumbnail) {
-					if (position == holder.position) {
-						if (holder.imageView != null) {
-							boolean broken = false;
-
-							if (thumbnail != null && !thumbnail.isRecycled()) {
-								holder.textContainerView.setVisibility(View.GONE);
-								holder.imageView.setImageBitmap(thumbnail);
-								holder.imageView.clearColorFilter();
-								holder.imageView.setScaleType(ImageView.ScaleType.CENTER_CROP);
-							} else {
-								if (messageModel.getMessageContentsType() == MessageContentsType.VOICE_MESSAGE) {
-									holder.imageView.setScaleType(ImageView.ScaleType.CENTER);
-									holder.imageView.setImageResource(R.drawable.ic_keyboard_voice_outline);
-									holder.imageView.setColorFilter(foregroundColor, PorterDuff.Mode.SRC_IN);
-									holder.topTextView.setText(StringConversionUtil.secondsToString(
-										messageModel.getType() == MessageType.FILE ?
-											messageModel.getFileData().getDurationSeconds():
-											messageModel.getAudioData().getDuration(), false));
-									holder.textContainerView.setVisibility(View.VISIBLE);
-								} else if (messageModel.getType() == MessageType.FILE) {
-									// try default avatar for mime type
-									thumbnail = fileService.getDefaultMessageThumbnailBitmap(getContext(), messageModel, null, messageModel.getFileData().getMimeType(), false);
-									holder.topTextView.setText(messageModel.getFileData().getFileName());
-									holder.textContainerView.setVisibility(View.VISIBLE);
-									if (thumbnail != null) {
-										holder.imageView.setScaleType(ImageView.ScaleType.CENTER);
-										holder.imageView.setImageBitmap(thumbnail);
-										holder.imageView.setColorFilter(foregroundColor, PorterDuff.Mode.SRC_IN);
-									} else {
-										broken = true;
-									}
-								} else {
-									holder.textContainerView.setVisibility(View.GONE);
-									broken = true;
-								}
-							}
-							updateBrokenThumbnailFlags(messageModel.getId(), broken);
-						}
-					}
-				}
-			}.executeOnExecutor(AsyncTask.THREAD_POOL_EXECUTOR, holder);
-		}
-
-		catch (RejectedExecutionException x) {
-			//thread pool is full load by non thread
-			Bitmap thumbnail = this.getBitmap(messageModel);
-
-			if (thumbnail != null && !thumbnail.isRecycled()) {
-				holder.imageView.setImageBitmap(thumbnail);
-			}
-		}
-	}
-
-	private void updateBrokenThumbnailFlags(Integer id, boolean broken) {
-		synchronized (brokenThumbnails) {
-			if(broken) {
-				this.brokenThumbnails.add(id);
-			}
-			else {
-				this.brokenThumbnails.remove(id);
-			}
-		}
-	}
-
-	@NonNull
-	@Override
-	public View getView(final int position, View convertView, ViewGroup parent) {
-		View itemView = convertView;
-		MediaGalleryHolder holder;
-
-		if (convertView == null) {
-			holder = new MediaGalleryHolder();
-
-			// This a new view we inflate the new layout
-			itemView = layoutInflater.inflate(R.layout.item_media_gallery, parent, false);
-
-			SquareImageView imageView = itemView.findViewById(R.id.image_view);
-			ControllerView playButton = itemView.findViewById(R.id.play_button);
-			ProgressBar progressBar = itemView.findViewById(R.id.progress_decoding);
-			TextView topTextView = itemView.findViewById(R.id.text_filename);
-			View textContainerView = itemView.findViewById(R.id.filename_container);
-
-			holder.imageView = imageView;
-			holder.playButton = playButton;
-			holder.progressBar = progressBar;
-			holder.topTextView = topTextView;
-			holder.textContainerView = textContainerView;
-			holder.messageId = 0;
-
-			itemView.setTag(holder);
-		} else {
-			holder = (MediaGalleryHolder) itemView.getTag();
-		}
-
-		final AbstractMessageModel messageModel = values.get(position);
-
-		holder.position = position;
-
-		if (holder.messageId != messageModel.getId()) {
-			// do not load contents again if it's unchanged
-			this.loadThumbnailBitmap(position, holder, messageModel);
-			if (this.brokenThumbnails.contains(messageModel.getId())) {
-				holder.playButton.setBroken();
-				holder.playButton.setVisibility(View.VISIBLE);
-			} else {
-				if (this.getType(messageModel) == TYPE_VIDEO || (this.getType(messageModel) == TYPE_FILE && FileUtil.isVideoFile(messageModel.getFileData()))) {
-					holder.playButton.setPlay();
-					holder.playButton.setVisibility(View.VISIBLE);
-				} else {
-					holder.playButton.setHidden();
-				}
-			}
-			holder.progressBar.setVisibility(View.GONE);
-		}
-		holder.messageId = messageModel.getId();
-
-		return itemView;
-	}
-}
diff --git a/app/src/main/java/ch/threema/app/adapters/MediaGalleryAdapter.kt b/app/src/main/java/ch/threema/app/adapters/MediaGalleryAdapter.kt
new file mode 100644
index 00000000..9da3ffdf
--- /dev/null
+++ b/app/src/main/java/ch/threema/app/adapters/MediaGalleryAdapter.kt
@@ -0,0 +1,340 @@
+/*  _____ _
+ * |_   _| |_  _ _ ___ ___ _ __  __ _
+ *   | | | ' \| '_/ -_) -_) '  \/ _` |_
+ *   |_| |_||_|_| \___\___|_|_|_\__,_(_)
+ *
+ * Threema for Android
+ * Copyright (c) 2023 Threema GmbH
+ *
+ * This program is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU Affero General Public License, version 3,
+ * as published by the Free Software Foundation.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+ * GNU Affero General Public License for more details.
+ *
+ * You should have received a copy of the GNU Affero General Public License
+ * along with this program. If not, see <https://www.gnu.org/licenses/>.
+ */
+
+package ch.threema.app.adapters
+
+import android.annotation.SuppressLint
+import android.content.Context
+import android.graphics.Bitmap
+import android.graphics.Outline
+import android.graphics.PorterDuff
+import android.util.SparseBooleanArray
+import android.view.LayoutInflater
+import android.view.View
+import android.view.ViewGroup
+import android.view.ViewOutlineProvider
+import android.widget.ImageView
+import android.widget.TextView
+import androidx.annotation.ColorInt
+import androidx.core.util.forEach
+import androidx.recyclerview.widget.RecyclerView
+import ch.threema.app.R
+import ch.threema.app.ThreemaApplication
+import ch.threema.app.messagereceiver.MessageReceiver
+import ch.threema.app.services.FileService
+import ch.threema.app.ui.CheckableFrameLayout
+import ch.threema.app.utils.ConfigUtils
+import ch.threema.app.utils.IconUtil
+import ch.threema.app.utils.StringConversionUtil
+import ch.threema.storage.models.AbstractMessageModel
+import ch.threema.storage.models.MessageType
+import ch.threema.storage.models.data.MessageContentsType
+import com.bumptech.glide.Glide
+import com.bumptech.glide.load.DataSource
+import com.bumptech.glide.load.engine.GlideException
+import com.bumptech.glide.load.resource.bitmap.BitmapTransitionOptions
+import com.bumptech.glide.request.RequestListener
+import com.bumptech.glide.request.target.Target
+import com.google.android.material.imageview.ShapeableImageView
+
+class MediaGalleryAdapter(
+    private val context: Context,
+    clickListener: OnClickItemListener,
+    messageReceiver: MessageReceiver<*>,
+    columnCount: Int
+) :
+    RecyclerView.Adapter<MediaGalleryAdapter.MediaGalleryHolder>() {
+    private val clickListener: OnClickItemListener
+    private val columnCount: Int
+    private val messageReceiver: MessageReceiver<*>
+    private val checkedItems = SparseBooleanArray()
+    private var messageModels : MutableList<AbstractMessageModel>? = null
+    private val inflater: LayoutInflater = LayoutInflater.from(context)
+
+    @ColorInt
+    private val foregroundColor: Int
+    private val fileService: FileService?
+
+    private val viewOutlineProvider: ViewOutlineProvider
+
+    init {
+        this.clickListener = clickListener
+        this.columnCount = columnCount
+        this.messageReceiver = messageReceiver;
+        this.foregroundColor = ConfigUtils.getColorFromAttribute(context, R.attr.colorOnBackground);
+        this.fileService = ThreemaApplication.getServiceManager()?.fileService
+
+        val cornerRadius: Int = context.resources.getDimensionPixelSize(R.dimen.media_gallery_container_radius)
+        this.viewOutlineProvider = object : ViewOutlineProvider() {
+            override fun getOutline(view: View, outline: Outline) {
+                outline.setRoundRect(0, 0, view.width, view.height, cornerRadius.toFloat())
+            }
+        }
+    }
+
+    class MediaGalleryHolder(itemView: View) : RecyclerView.ViewHolder(itemView) {
+        var imageView: ShapeableImageView? = null
+        var videoContainerView: View? = null
+        var gifContainerView: View? = null
+        var videoDuration: TextView? = null
+        var vmContainerView: View? = null
+        var vmDuration: TextView? = null
+        var topTextView: TextView? = null
+        var textContainerView: View? = null
+        var messageId = 0
+
+        init {
+            imageView = itemView.findViewById(R.id.image_view)
+            gifContainerView = itemView.findViewById(R.id.gif_marker_container)
+            videoContainerView = itemView.findViewById(R.id.video_marker_container)
+            videoDuration = itemView.findViewById(R.id.video_duration_text)
+            vmContainerView = itemView.findViewById(R.id.voicemessage_marker_container)
+            vmDuration = itemView.findViewById(R.id.voicemessage_duration_text)
+            topTextView = itemView.findViewById(R.id.text_filename)
+            textContainerView = itemView.findViewById(R.id.filename_container)
+        }
+    }
+
+    override fun onCreateViewHolder(parent: ViewGroup, viewType: Int): MediaGalleryHolder {
+        val itemView: View = inflater.inflate(R.layout.item_media_gallery, parent, false)
+        val holder = MediaGalleryHolder(itemView)
+        holder.vmContainerView?.outlineProvider = viewOutlineProvider
+        holder.videoContainerView?.outlineProvider = viewOutlineProvider
+        holder.gifContainerView?.outlineProvider = viewOutlineProvider
+        holder.textContainerView?.outlineProvider = viewOutlineProvider
+        holder.vmContainerView?.clipToOutline = true
+        holder.videoContainerView?.clipToOutline = true
+        holder.gifContainerView?.clipToOutline = true
+        holder.textContainerView?.clipToOutline = true
+
+        return holder
+    }
+
+    override fun onBindViewHolder(holder: MediaGalleryHolder, position: Int) {
+        messageModels?.let {
+            val messageModel: AbstractMessageModel = it[position]
+
+            if (holder.messageId != messageModel.id) {
+                val placeholderIcon : Int = if (messageModel.messageContentsType == MessageContentsType.VOICE_MESSAGE) {
+                    R.drawable.ic_keyboard_voice_outline;
+                } else if (messageModel.type == MessageType.FILE) {
+                    IconUtil.getMimeIcon(messageModel.fileData.mimeType)
+                } else {
+                    IconUtil.getMimeIcon("application/x-error")
+                }
+
+                // do not load contents again if it's unchanged
+                Glide.with(context)
+                    .asBitmap()
+                    .load(messageModel)
+                    .transition(BitmapTransitionOptions.withCrossFade())
+                    .centerCrop()
+                    .error(placeholderIcon)
+                    .addListener(object : RequestListener<Bitmap?> {
+                        override fun onLoadFailed(
+                            e: GlideException?,
+                            model: Any?,
+                            target: Target<Bitmap?>?,
+                            isFirstResource: Boolean
+                        ): Boolean {
+                            decorateItem(holder, messageModel)
+                            return false
+                        }
+
+                        override fun onResourceReady(
+                            resource: Bitmap?,
+                            model: Any?,
+                            target: Target<Bitmap?>?,
+                            dataSource: DataSource?,
+                            isFirstResource: Boolean
+                        ): Boolean {
+                            holder.textContainerView?.visibility = View.GONE
+                            holder.vmContainerView?.visibility = View.GONE
+                            holder.imageView?.clearColorFilter()
+                            holder.imageView?.scaleType = ImageView.ScaleType.CENTER_CROP
+
+                            if (messageModel.messageContentsType == MessageContentsType.GIF) {
+                                holder.gifContainerView?.visibility = View.VISIBLE
+                            } else {
+                                holder.gifContainerView?.visibility = View.GONE
+                            }
+
+                            if (messageModel.messageContentsType == MessageContentsType.VIDEO) {
+                                val duration: Long = if (messageModel.type == MessageType.VIDEO) {
+                                    messageModel.videoData.duration.toLong()
+                                } else if (messageModel.type == MessageType.FILE) {
+                                    messageModel.fileData.durationSeconds
+                                } else {
+                                    0
+                                }
+
+                                if (duration > 0) {
+                                    holder.videoDuration?.text = StringConversionUtil.secondsToString(duration, false)
+                                    holder.videoDuration?.visibility = View.VISIBLE
+                                } else {
+                                    holder.videoDuration?.visibility = View.GONE
+                                }
+                                holder.videoContainerView?.visibility = View.VISIBLE
+                            } else {
+                                holder.videoContainerView?.visibility = View.GONE
+                            }
+
+                            return false
+                        }
+
+                    })
+                    .into(holder.imageView!!)
+            }
+            holder.messageId = messageModel.id
+            (holder.itemView as CheckableFrameLayout).isChecked = checkedItems.get(position)
+
+            holder.itemView.setOnClickListener { v: View? -> clickListener.onClick(messageModel, holder.itemView, holder.absoluteAdapterPosition) }
+            holder.itemView.setOnLongClickListener { clickListener.onLongClick(messageModel, holder.itemView, holder.absoluteAdapterPosition) }
+        }
+    }
+
+    private fun decorateItem(holder: MediaGalleryHolder, messageModel: AbstractMessageModel) {
+        holder.imageView?.scaleType = ImageView.ScaleType.CENTER
+        holder.imageView?.setColorFilter(foregroundColor, PorterDuff.Mode.SRC_IN)
+        holder.videoContainerView?.visibility = View.GONE
+        holder.gifContainerView?.visibility = View.GONE
+
+        if (messageModel.messageContentsType == MessageContentsType.VOICE_MESSAGE) {
+            val duration: Long = if (messageModel.type == MessageType.FILE) {
+                messageModel.fileData.durationSeconds
+            } else if (messageModel.type == MessageType.VOICEMESSAGE){
+                messageModel.audioData.duration.toLong()
+            } else {
+                0
+            }
+            holder.vmDuration?.text = StringConversionUtil.secondsToString(duration, false)
+            holder.vmContainerView?.visibility = View.VISIBLE
+            holder.textContainerView?.visibility = View.GONE
+        } else if (messageModel.type == MessageType.FILE) {
+            holder.topTextView?.text = messageModel.fileData.fileName
+            holder.textContainerView?.visibility = View.VISIBLE
+            holder.vmContainerView?.visibility = View.GONE
+        } else {
+            holder.textContainerView?.visibility = View.GONE
+            holder.vmContainerView?.visibility = View.GONE
+        }
+    }
+
+    override fun getItemCount(): Int {
+        return messageModels?.size ?: 0
+    }
+
+    fun getItemAtPosition(position: Int): AbstractMessageModel? {
+        return messageModels?.get(position)
+    }
+
+    override fun getItemId(position: Int): Long {
+        return position.toLong()
+    }
+
+    @SuppressLint("NotifyDataSetChanged")
+    fun setItems(items: MutableList<AbstractMessageModel>?) {
+        messageModels = items
+        notifyDataSetChanged()
+    }
+
+    fun toggleChecked(pos: Int) {
+        if (checkedItems[pos, false]) {
+            checkedItems.delete(pos)
+        } else {
+            checkedItems.put(pos, true)
+        }
+        notifyItemChanged(pos)
+    }
+
+    fun clearCheckedItems() {
+        var itemsToClear: Array<Int> = arrayOf()
+
+        checkedItems.forEach { position, isChecked ->
+            if (isChecked) {
+                itemsToClear += position
+            }
+        }
+        checkedItems.clear()
+        itemsToClear.forEach { position -> notifyItemChanged(position) }
+    }
+
+    fun selectAll() {
+        messageModels?.let {
+            if (checkedItems.size() == it.size) {
+                clearCheckedItems()
+            } else {
+                for (i in it.indices) {
+                    checkedItems.put(i, true)
+                    notifyItemChanged(i)
+                }
+            }
+        }
+    }
+
+    fun getCheckedItemsCount(): Int {
+        return checkedItems.size()
+    }
+
+    fun getCheckedItems(): List<AbstractMessageModel> {
+        val items: MutableList<AbstractMessageModel> = ArrayList(checkedItems.size())
+        checkedItems.forEach { key, _ ->
+            messageModels?.let {
+                items.add(it[key])
+            }
+        }
+        return items
+    }
+
+    /**
+     * get specified checked item. returns null if out of range or no data available
+     */
+    fun getCheckedItemAt(i: Int): AbstractMessageModel? {
+        if (i >= 0 && i < checkedItems.size()) {
+            messageModels?.let {
+                return it[checkedItems.keyAt(i)];
+            }
+        }
+        return null
+    }
+
+    @SuppressLint("NotifyDataSetChanged")
+    fun removeItems(deletedMessages: List<AbstractMessageModel>) {
+        checkedItems.clear()
+
+        if (deletedMessages.size == 1) {
+            messageModels?.let {
+                val deletedMessage = deletedMessages.get(0)
+                val index = it.indexOf(deletedMessage)
+                it.remove(deletedMessage)
+                notifyItemRemoved(index)
+            }
+        } else {
+            messageModels?.removeAll(deletedMessages)
+            notifyDataSetChanged()
+        }
+    }
+
+    interface OnClickItemListener {
+        fun onClick(messageModel: AbstractMessageModel?, view: View?, position: Int)
+        fun onLongClick(messageModel: AbstractMessageModel?, itemView: View?, position: Int): Boolean
+    }
+}
diff --git a/app/src/main/java/ch/threema/app/adapters/MediaGalleryRepository.kt b/app/src/main/java/ch/threema/app/adapters/MediaGalleryRepository.kt
new file mode 100644
index 00000000..489eb7fd
--- /dev/null
+++ b/app/src/main/java/ch/threema/app/adapters/MediaGalleryRepository.kt
@@ -0,0 +1,107 @@
+/*  _____ _
+ * |_   _| |_  _ _ ___ ___ _ __  __ _
+ *   | | | ' \| '_/ -_) -_) '  \/ _` |_
+ *   |_| |_||_|_| \___\___|_|_|_\__,_(_)
+ *
+ * Threema for Android
+ * Copyright (c) 2023 Threema GmbH
+ *
+ * This program is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU Affero General Public License, version 3,
+ * as published by the Free Software Foundation.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+ * GNU Affero General Public License for more details.
+ *
+ * You should have received a copy of the GNU Affero General Public License
+ * along with this program. If not, see <https://www.gnu.org/licenses/>.
+ */
+
+package ch.threema.app.adapters
+
+import android.annotation.SuppressLint
+import android.os.AsyncTask
+import androidx.lifecycle.LiveData
+import androidx.lifecycle.MutableLiveData
+import ch.threema.app.ThreemaApplication
+import ch.threema.app.activities.MediaGalleryActivity
+import ch.threema.app.activities.MediaGalleryActivity.*
+import ch.threema.app.messagereceiver.MessageReceiver
+import ch.threema.app.services.MessageService
+import ch.threema.app.services.MessageService.MessageFilter
+import ch.threema.base.ThreemaException
+import ch.threema.storage.models.AbstractMessageModel
+import ch.threema.storage.models.MessageType
+import ch.threema.storage.models.data.MessageContentsType
+
+class MediaGalleryRepository {
+    private var abstractMessageModels: MutableLiveData<List<AbstractMessageModel?>?>? = null
+    private var messageService: MessageService? = null
+    private var messageReceiver: MessageReceiver<*>? = null
+    private var filter: IntArray? = null
+
+    init {
+        val serviceManager = ThreemaApplication.getServiceManager()
+        if (serviceManager != null) {
+            messageService = null
+            try {
+                messageService = serviceManager.messageService
+                abstractMessageModels = object : MutableLiveData<List<AbstractMessageModel?>?>() {
+                    override fun getValue(): List<AbstractMessageModel?>? {
+                        return messageReceiver?.loadMessages(getMessageFilter())
+                    }
+                }
+            } catch (e: ThreemaException) {
+                //
+            }
+        }
+    }
+
+    fun getAbstractMessageModels(): LiveData<List<AbstractMessageModel?>?>? {
+        return abstractMessageModels
+    }
+
+    @SuppressLint("StaticFieldLeak")
+    fun onDataChanged() {
+        object : AsyncTask<String?, Void?, Void?>() {
+            @Deprecated("Deprecated in Java")
+            override fun doInBackground(vararg params: String?): Void? {
+                abstractMessageModels?.postValue(
+                    messageReceiver?.loadMessages(getMessageFilter())
+                )
+                return null
+            }
+        }.execute()
+    }
+
+    private fun getMessageFilter() : MessageFilter {
+        return object : MessageFilter {
+            override fun getPageSize(): Long { return 0 }
+            override fun getPageReferenceId(): Int { return 0 }
+            override fun withStatusMessages(): Boolean { return false }
+            override fun withUnsaved(): Boolean { return true }
+            override fun onlyUnread(): Boolean { return false }
+            override fun onlyDownloaded(): Boolean { return false }
+            override fun types(): Array<MessageType>? { return null }
+            override fun contentTypes(): IntArray { return getContentTypes() }
+        }
+    }
+
+    fun getContentTypes() : IntArray {
+        if (filter == null) {
+            return contentTypes
+        }
+        return filter as IntArray
+    }
+
+    fun setFilter(contentTypes: IntArray?) {
+        filter = contentTypes
+    }
+
+    fun setMessageReceiver(messageReceiver: MessageReceiver<*>) {
+        this.messageReceiver = messageReceiver
+    }
+}
+
diff --git a/app/src/main/java/ch/threema/app/adapters/MediaGallerySpinnerAdapter.java b/app/src/main/java/ch/threema/app/adapters/MediaGallerySpinnerAdapter.java
deleted file mode 100644
index c5120a8b..00000000
--- a/app/src/main/java/ch/threema/app/adapters/MediaGallerySpinnerAdapter.java
+++ /dev/null
@@ -1,92 +0,0 @@
-/*  _____ _
- * |_   _| |_  _ _ ___ ___ _ __  __ _
- *   | | | ' \| '_/ -_) -_) '  \/ _` |_
- *   |_| |_||_|_| \___\___|_|_|_\__,_(_)
- *
- * Threema for Android
- * Copyright (c) 2014-2023 Threema GmbH
- *
- * This program is free software: you can redistribute it and/or modify
- * it under the terms of the GNU Affero General Public License, version 3,
- * as published by the Free Software Foundation.
- *
- * This program is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
- * GNU Affero General Public License for more details.
- *
- * You should have received a copy of the GNU Affero General Public License
- * along with this program. If not, see <https://www.gnu.org/licenses/>.
- */
-
-package ch.threema.app.adapters;
-
-import android.content.Context;
-import android.view.LayoutInflater;
-import android.view.View;
-import android.view.ViewGroup;
-import android.widget.ArrayAdapter;
-import android.widget.TextView;
-
-import ch.threema.app.R;
-
-public class MediaGallerySpinnerAdapter extends ArrayAdapter<String> {
-
-	Context context;
-	String[] values;
-	String titleText;
-	LayoutInflater inflater;
-	String subtitle;
-
-	public MediaGallerySpinnerAdapter(Context context, String[] values, String titleText) {
-		super(context, R.layout.spinner_media_gallery, values);
-
-		this.context = context;
-		this.values = values;
-		this.titleText = titleText;
-		this.inflater = (LayoutInflater) context
-				.getSystemService(Context.LAYOUT_INFLATER_SERVICE);
-		this.subtitle = "";
-	}
-
-	@Override
-	public View getView(int position, View convertView, ViewGroup parent) {
-		if (convertView == null) {
-			convertView = inflater.inflate(R.layout.spinner_media_gallery, null);
-		}
-		TextView title = convertView.findViewById(R.id.title);
-		TextView subtitleView = convertView.findViewById(R.id.subtitle_text);
-		title.setText(this.titleText);
-		subtitleView.setText(subtitle);
-		return convertView;
-
-	}
-
-	@Override
-	public View getDropDownView(int position, View convertView, ViewGroup parent) {
-		if (convertView == null) {
-			convertView = inflater.inflate(android.R.layout.simple_spinner_dropdown_item, parent, false);
-		}
-		((TextView) convertView).setText(this.values[position]);
-		return convertView;
-	}
-
-	@Override
-	public int getCount() {
-		return this.values.length;
-	}
-
-	@Override
-	public String getItem(int position) {
-		return null;
-	}
-
-	@Override
-	public long getItemId(int position) {
-		return 0;
-	}
-
-	public void setSubtitle(String subtitle) {
-		this.subtitle = subtitle;
-	}
-}
diff --git a/app/src/main/java/ch/threema/app/adapters/MediaGalleryViewModel.kt b/app/src/main/java/ch/threema/app/adapters/MediaGalleryViewModel.kt
new file mode 100644
index 00000000..13e66bf2
--- /dev/null
+++ b/app/src/main/java/ch/threema/app/adapters/MediaGalleryViewModel.kt
@@ -0,0 +1,56 @@
+/*  _____ _
+ * |_   _| |_  _ _ ___ ___ _ __  __ _
+ *   | | | ' \| '_/ -_) -_) '  \/ _` |_
+ *   |_| |_||_|_| \___\___|_|_|_\__,_(_)
+ *
+ * Threema for Android
+ * Copyright (c) 2023 Threema GmbH
+ *
+ * This program is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU Affero General Public License, version 3,
+ * as published by the Free Software Foundation.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+ * GNU Affero General Public License for more details.
+ *
+ * You should have received a copy of the GNU Affero General Public License
+ * along with this program. If not, see <https://www.gnu.org/licenses/>.
+ */
+
+package ch.threema.app.adapters
+
+import androidx.annotation.Keep
+import androidx.lifecycle.LiveData
+import androidx.lifecycle.ViewModel
+import androidx.lifecycle.ViewModelProvider
+import ch.threema.app.messagereceiver.MessageReceiver
+import ch.threema.storage.models.AbstractMessageModel
+
+class MediaGalleryViewModel @Keep constructor(messageReceiver: MessageReceiver<*>) : ViewModel() {
+    private val repository: MediaGalleryRepository = MediaGalleryRepository()
+    private var messageModels: LiveData<List<AbstractMessageModel?>?>? = null
+
+    init {
+        repository.setMessageReceiver(messageReceiver)
+        repository.setFilter(null)
+        messageModels = repository.getAbstractMessageModels()
+    }
+
+    fun getAbstractMessageModels(): LiveData<List<AbstractMessageModel?>?>? {
+        return messageModels
+    }
+
+    fun setFilter(contentTypes: IntArray?) {
+        repository.setFilter(contentTypes)
+        repository.onDataChanged()
+    }
+
+    class MediaGalleryViewModelFactory(val messageReceiver: MessageReceiver<*>) : ViewModelProvider.Factory {
+        override fun <T : ViewModel> create(modelClass: Class<T>): T {
+            return modelClass.getConstructor(MessageReceiver::class.java)
+                .newInstance(messageReceiver)
+        }
+    }
+}
diff --git a/app/src/main/java/ch/threema/app/adapters/MentionSelectorAdapter.java b/app/src/main/java/ch/threema/app/adapters/MentionSelectorAdapter.java
index f8ea9aff..4a8277e3 100644
--- a/app/src/main/java/ch/threema/app/adapters/MentionSelectorAdapter.java
+++ b/app/src/main/java/ch/threema/app/adapters/MentionSelectorAdapter.java
@@ -56,7 +56,7 @@ public class MentionSelectorAdapter extends AbstractRecyclerAdapter<ContactModel
 		public ItemHolder(View view) {
 			super(view);
 			this.view = view;
-			this.nameView = itemView.findViewById(R.id.group_name);
+			this.nameView = itemView.findViewById(R.id.contact_name);
 			this.avatarView = itemView.findViewById(R.id.avatar_view);
 			this.idView = itemView.findViewById(R.id.threemaid);
 		}
@@ -73,7 +73,7 @@ public class MentionSelectorAdapter extends AbstractRecyclerAdapter<ContactModel
 	@NonNull
 	@Override
 	public RecyclerView.ViewHolder onCreateViewHolder(@NonNull ViewGroup parent, int viewType) {
-		View v = LayoutInflater.from(context).inflate(R.layout.item_group_detail, parent, false);
+		View v = LayoutInflater.from(context).inflate(R.layout.item_mention_selector, parent, false);
 		return new ItemHolder(v);
 	}
 
diff --git a/app/src/main/java/ch/threema/app/adapters/MessageListAdapter.java b/app/src/main/java/ch/threema/app/adapters/MessageListAdapter.java
index 434eea7f..5d5089fe 100644
--- a/app/src/main/java/ch/threema/app/adapters/MessageListAdapter.java
+++ b/app/src/main/java/ch/threema/app/adapters/MessageListAdapter.java
@@ -22,61 +22,36 @@
 package ch.threema.app.adapters;
 
 import android.content.Context;
-import android.content.res.ColorStateList;
-import android.graphics.PorterDuff;
-import android.os.SystemClock;
 import android.view.LayoutInflater;
 import android.view.View;
 import android.view.ViewGroup;
-import android.widget.Chronometer;
-import android.widget.ImageView;
-import android.widget.TextView;
 
-import androidx.annotation.AnyThread;
-import androidx.annotation.ColorInt;
 import androidx.annotation.NonNull;
 import androidx.annotation.Nullable;
+import androidx.core.content.ContextCompat;
 import androidx.recyclerview.widget.RecyclerView;
 
-import com.google.android.material.chip.Chip;
+import com.google.android.material.button.MaterialButton;
 
 import java.util.ArrayList;
 import java.util.List;
+import java.util.Map;
 
 import ch.threema.app.R;
 import ch.threema.app.ThreemaApplication;
-import ch.threema.app.activities.ComposeMessageActivity;
 import ch.threema.app.emojis.EmojiMarkupUtil;
-import ch.threema.app.managers.ListenerManager;
 import ch.threema.app.services.ContactService;
 import ch.threema.app.services.ConversationService;
-import ch.threema.app.services.ConversationTagService;
-import ch.threema.app.services.ConversationTagServiceImpl;
 import ch.threema.app.services.DeadlineListService;
 import ch.threema.app.services.DistributionListService;
 import ch.threema.app.services.GroupService;
 import ch.threema.app.services.RingtoneService;
-import ch.threema.app.ui.AvatarListItemUtil;
-import ch.threema.app.ui.AvatarView;
-import ch.threema.app.ui.CountBoxView;
-import ch.threema.app.ui.DebouncedOnClickListener;
 import ch.threema.app.ui.EmptyRecyclerView;
-import ch.threema.app.ui.listitemholder.AvatarListItemHolder;
-import ch.threema.app.utils.AdapterUtil;
 import ch.threema.app.utils.ConfigUtils;
-import ch.threema.app.utils.MessageUtil;
-import ch.threema.app.utils.NameUtil;
 import ch.threema.app.utils.StateBitmapUtil;
-import ch.threema.app.utils.TestUtil;
-import ch.threema.app.utils.ViewUtil;
-import ch.threema.app.voip.groupcall.GroupCallDescription;
 import ch.threema.app.voip.groupcall.GroupCallManager;
-import ch.threema.app.voip.groupcall.GroupCallObserver;
-import ch.threema.storage.models.AbstractMessageModel;
 import ch.threema.storage.models.ConversationModel;
 import ch.threema.storage.models.GroupModel;
-import ch.threema.storage.models.MessageType;
-import ch.threema.storage.models.TagModel;
 
 public class MessageListAdapter extends AbstractRecyclerAdapter<ConversationModel, RecyclerView.ViewHolder> {
 
@@ -85,149 +60,44 @@ public class MessageListAdapter extends AbstractRecyclerAdapter<ConversationMode
 	public static final int TYPE_ITEM = 0;
 	public static final int TYPE_FOOTER = 1;
 
-	private final Context context;
-	private final GroupService groupService;
-	private final GroupCallManager groupCallManager;
-	private final ConversationTagService conversationTagService;
-	private final ContactService contactService;
-	private final DistributionListService distributionListService;
-	private final DeadlineListService mutedChatsListService, hiddenChatsListService, mentionOnlyChatsListService;
-	private final RingtoneService ringtoneService;
-	private final ConversationService conversationService;
-	private final EmojiMarkupUtil emojiMarkupUtil;
-	private final StateBitmapUtil stateBitmapUtil;
-	private @ColorInt final int regularColor;
-	private @ColorInt final int ackColor;
-	private @ColorInt final int decColor;
-	private @ColorInt final int backgroundColor;
-	private final boolean isTablet;
-	private final LayoutInflater inflater;
-	private final ItemClickListener clickListener;
-	private final List<ConversationModel> selectedChats = new ArrayList<>();
-	private String highlightUid;
-	private RecyclerView recyclerView;
-
-	private final TagModel starTagModel, unreadTagModel;
-
-	public static class MessageListViewHolder extends RecyclerView.ViewHolder implements GroupCallObserver {
-
-		TextView fromView;
-		protected TextView dateView;
-		TextView subjectView;
-		ImageView deliveryView, attachmentView, pinIcon;
-		View listItemFG;
-		View latestMessageContainer;
-		View typingContainer;
-		TextView groupMemberName;
-		CountBoxView unreadCountView;
-		View unreadIndicator;
-		ImageView muteStatus;
-		ImageView hiddenStatus;
-		protected AvatarView avatarView;
-		protected ConversationModel conversationModel;
-		AvatarListItemHolder avatarListItemHolder;
-		final View tagStarOn;
-		final GroupCallManager groupCallManager;
-
-		private final View ongoingGroupCallContainer;
-		private final Chip joinGroupCallButton;
-		private final TextView ongoingCallDivider, ongoingCallText;
-		private final Chronometer groupCallDuration;
-		private boolean isChronometerRunning = false;
-
-		MessageListViewHolder(final View itemView, final GroupCallManager groupCallManager) {
-			super(itemView);
-
-			tagStarOn = itemView.findViewById(R.id.tag_star_on);
-
-			fromView = itemView.findViewById(R.id.from);
-			dateView = itemView.findViewById(R.id.date);
-			subjectView = itemView.findViewById(R.id.subject);
-			unreadCountView = itemView.findViewById(R.id.unread_count);
-			avatarView = itemView.findViewById(R.id.avatar_view);
-			attachmentView = itemView.findViewById(R.id.attachment);
-			deliveryView = itemView.findViewById(R.id.delivery);
-			listItemFG = itemView.findViewById(R.id.list_item_fg);
-			latestMessageContainer = itemView.findViewById(R.id.latest_message_container);
-			typingContainer = itemView.findViewById(R.id.typing_container);
-			groupMemberName = itemView.findViewById(R.id.group_member_name);
-			unreadIndicator = itemView.findViewById(R.id.unread_view);
-			muteStatus = itemView.findViewById(R.id.mute_status);
-			hiddenStatus = itemView.findViewById(R.id.hidden_status);
-			pinIcon = itemView.findViewById(R.id.pin_icon);
-			avatarListItemHolder = new AvatarListItemHolder();
-			avatarListItemHolder.avatarView = avatarView;
-			avatarListItemHolder.avatarLoadingAsyncTask = null;
-			ongoingGroupCallContainer = itemView.findViewById(R.id.ongoing_group_call_container);
-			ongoingCallText = itemView.findViewById(R.id.ongoing_call_text);
-			joinGroupCallButton = itemView.findViewById(R.id.join_group_call_button);
-			ongoingCallDivider = itemView.findViewById(R.id.ongoing_call_divider);
-			groupCallDuration = itemView.findViewById(R.id.group_call_duration);
-
-			this.groupCallManager = groupCallManager;
-		}
-
+	private final @NonNull Context context;
+	private final @NonNull GroupCallManager groupCallManager;
+	private final @NonNull ConversationService conversationService;
+	private final @NonNull ContactService contactService;
+	private final @NonNull GroupService groupService;
+	private final @NonNull DeadlineListService mutedChatsListService;
+	private final @NonNull DeadlineListService mentionOnlyChatsListService;
+	private final @NonNull RingtoneService ringtoneService;
+	private final @NonNull DeadlineListService hiddenChatsListService;
+	private final @NonNull MessageListViewHolder.MessageListItemParams messageListItemParams;
+	private final @NonNull MessageListViewHolder.MessageListItemStrings messageListItemStrings;
+	private final @NonNull LayoutInflater inflater;
+	private final @NonNull ItemClickListener clickListener;
+	private final @NonNull MessageListViewHolder.MessageListViewHolderClickListener clickForwarder = new MessageListViewHolder.MessageListViewHolderClickListener() {
 		@Override
-		public void onGroupCallUpdate(@Nullable GroupCallDescription call) {
-			if (ConfigUtils.isGroupCallsEnabled()) {
-				if (call != null && isMatchingGroup(call.getGroupIdInt()) && isNotPrivate()) {
-					updateGroupCallDuration(call);
-				} else {
-					stopGroupCallDuration();
-				}
-				ListenerManager.conversationListeners.handle(listener -> listener.onModified(conversationModel, null));
-			}
-		}
-
-		@AnyThread
-		private void updateGroupCallDuration(@NonNull GroupCallDescription call) {
-			Long runningSince = call.getRunningSince();
-			if (runningSince == null) {
-				stopGroupCallDuration();
-			} else {
-				startGroupCallDuration(runningSince);
-			}
-		}
-
-		@AnyThread
-		private void startGroupCallDuration(long base) {
-			groupCallDuration.post(() -> {
-				if (base != groupCallDuration.getBase() || !isChronometerRunning) {
-					groupCallDuration.setBase(base);
-					groupCallDuration.start();
-					isChronometerRunning = true;
-				}
-				groupCallDuration.setVisibility(View.VISIBLE);
-				ongoingCallDivider.setVisibility(View.VISIBLE);
-			});
+		public void onItemClick(@NonNull View view, int position) {
+			clickListener.onItemClick(view, position, getEntity(position));
 		}
 
-		@AnyThread
-		private void stopGroupCallDuration() {
-			groupCallDuration.post(() -> {
-				if (isChronometerRunning) {
-					groupCallDuration.stop();
-					isChronometerRunning = false;
-				}
-				groupCallDuration.setVisibility(View.GONE);
-				ongoingCallDivider.setVisibility(View.GONE);
-			});
-		}
-
-		private boolean isMatchingGroup(int groupId) {
-			return conversationModel.isGroupConversation() && conversationModel.getGroup().getId() == groupId;
+		@Override
+		public boolean onItemLongClick(@NonNull View view, int position) {
+			return clickListener.onItemLongClick(view, position, getEntity(position));
 		}
 
-		private boolean isNotPrivate() {
-			return hiddenStatus.getVisibility() != View.VISIBLE;
+		@Override
+		public void onAvatarClick(@NonNull View view, int position) {
+			clickListener.onAvatarClick(view, position, getEntity(position));
 		}
 
-		public View getItem() {
-			return itemView;
+		@Override
+		public void onJoinGroupCallClick(int position) {
+			clickListener.onJoinGroupCallClick(getEntity(position));
 		}
+	};
+	private final List<ConversationModel> selectedChats = new ArrayList<>();
+	private RecyclerView recyclerView;
+	private final Map<ConversationModel, MessageListAdapterItem> messageListAdapterItemsCache;
 
-		public ConversationModel getConversationModel() { return conversationModel; }
-	}
 
 	public static class FooterViewHolder extends RecyclerView.ViewHolder {
 		FooterViewHolder(View itemView) {
@@ -237,55 +107,68 @@ public class MessageListAdapter extends AbstractRecyclerAdapter<ConversationMode
 
 	public interface ItemClickListener {
 		void onItemClick(View view, int position, ConversationModel conversationModel);
+
 		boolean onItemLongClick(View view, int position, ConversationModel conversationModel);
+
 		void onAvatarClick(View view, int position, ConversationModel conversationModel);
+
 		void onFooterClick(View view);
+
 		void onJoinGroupCallClick(ConversationModel conversationModel);
 	}
 
 	public MessageListAdapter(
-		Context context,
-		ContactService contactService,
-		GroupService groupService,
-		GroupCallManager groupCallManager,
-		DistributionListService distributionListService,
-		ConversationService conversationService,
-		DeadlineListService mutedChatsListService,
-		DeadlineListService mentionOnlyChatsListService,
-		DeadlineListService hiddenChatsListService,
-		ConversationTagService conversationTagService,
-		RingtoneService ringtoneService,
-		String highlightUid,
-		ItemClickListener clickListener) {
-
+		@NonNull Context context,
+		@NonNull ContactService contactService,
+		@NonNull GroupService groupService,
+		@NonNull DistributionListService distributionListService,
+		@NonNull ConversationService conversationService,
+		@NonNull DeadlineListService mutedChatsListService,
+		@NonNull DeadlineListService mentionOnlyChatsListService,
+		@NonNull RingtoneService ringtoneService,
+		@NonNull DeadlineListService hiddenChatsListService,
+		@NonNull GroupCallManager groupCallManager,
+		@Nullable String highlightUid,
+		@NonNull ItemClickListener clickListener,
+		@NonNull Map<ConversationModel, MessageListAdapterItem> messageListAdapterItemCache
+	) {
 		this.context = context;
 		this.inflater = LayoutInflater.from(context);
+		this.conversationService = conversationService;
 		this.contactService = contactService;
 		this.groupService = groupService;
-		this.conversationTagService = conversationTagService;
-		this.emojiMarkupUtil = EmojiMarkupUtil.getInstance();
-		this.stateBitmapUtil = StateBitmapUtil.getInstance();
-		this.distributionListService = distributionListService;
-		this.conversationService = conversationService;
 		this.mutedChatsListService = mutedChatsListService;
 		this.mentionOnlyChatsListService = mentionOnlyChatsListService;
-		this.hiddenChatsListService = hiddenChatsListService;
 		this.ringtoneService = ringtoneService;
-		this.highlightUid = highlightUid;
+		this.hiddenChatsListService = hiddenChatsListService;
 		this.clickListener = clickListener;
-
-		this.regularColor = ConfigUtils.getColorFromAttribute(context, android.R.attr.textColorSecondary);
-		this.backgroundColor = ConfigUtils.getColorFromAttribute(context, android.R.attr.windowBackground);
-
-		this.ackColor = context.getResources().getColor(R.color.material_green);
-		this.decColor = context.getResources().getColor(R.color.material_orange);
-
-		this.isTablet = ConfigUtils.isTabletLayout();
-
-		this.starTagModel = this.conversationTagService.getTagModel(ConversationTagServiceImpl.FIXED_TAG_PIN);
-		this.unreadTagModel = this.conversationTagService.getTagModel(ConversationTagServiceImpl.FIXED_TAG_UNREAD);
+		EmojiMarkupUtil emojiMarkupUtil = EmojiMarkupUtil.getInstance();
+		StateBitmapUtil stateBitmapUtil = StateBitmapUtil.getInstance();
+
+		messageListItemParams = new MessageListViewHolder.MessageListItemParams(
+			ConfigUtils.getColorFromAttribute(context, R.attr.colorOnSurface),
+			ContextCompat.getColor(context, R.color.material_green),
+			ContextCompat.getColor(context, R.color.material_orange),
+			ConfigUtils.getColorFromAttribute(context, android.R.attr.colorBackground),
+			ConfigUtils.isTabletLayout(),
+			emojiMarkupUtil,
+			contactService,
+			groupService,
+			distributionListService,
+			highlightUid,
+			stateBitmapUtil
+		);
+
+		messageListItemStrings = new MessageListViewHolder.MessageListItemStrings(
+			context.getString(R.string.notes),
+			context.getString(R.string.prefs_group_notifications),
+			context.getString(R.string.distribution_list),
+			context.getString(R.string.state_sent),
+			String.format(" %s", context.getString(R.string.draft))
+		);
 
 		this.groupCallManager = groupCallManager;
+		this.messageListAdapterItemsCache = messageListAdapterItemCache;
 	}
 
 	@Override
@@ -307,11 +190,19 @@ public class MessageListAdapter extends AbstractRecyclerAdapter<ConversationMode
 	@Override
 	public void onViewRecycled(@NonNull RecyclerView.ViewHolder holder) {
 		super.onViewRecycled(holder);
-		if (holder instanceof MessageListViewHolder && ((MessageListViewHolder) holder).conversationModel.isGroupConversation()) {
+		ConversationModel conversationModel = null;
+		if (holder instanceof MessageListViewHolder) {
+			MessageListAdapterItem item = ((MessageListViewHolder) holder).getMessageListAdapterItem();
+			if (item != null) {
+				conversationModel = item.getConversationModel();
+			}
+		}
+		if (conversationModel != null && conversationModel.isGroupConversation()) {
 			MessageListViewHolder messageListViewHolder = (MessageListViewHolder) holder;
-			GroupModel group = messageListViewHolder.conversationModel.getGroup();
-			groupCallManager.removeGroupCallObserver(group, messageListViewHolder);
-			messageListViewHolder.stopGroupCallDuration();
+			GroupModel group = conversationModel.getGroup();
+			if (group != null) {
+				groupCallManager.removeGroupCallObserver(group, messageListViewHolder);
+			}
 		}
 	}
 
@@ -321,9 +212,7 @@ public class MessageListAdapter extends AbstractRecyclerAdapter<ConversationMode
 		if (viewType == TYPE_ITEM) {
 			View itemView = inflater.inflate(R.layout.item_message_list, viewGroup, false);
 			itemView.setClickable(true);
-			// TODO: MaterialCardView: Setting a custom background is not supported.
-			itemView.setBackgroundResource(R.drawable.listitem_background_selector);
-			return new MessageListViewHolder(itemView, groupCallManager);
+			return new MessageListViewHolder(itemView, context, clickForwarder, groupCallManager, messageListItemParams, messageListItemStrings);
 		}
 		return new FooterViewHolder(inflater.inflate(R.layout.footer_message_section, viewGroup, false));
 	}
@@ -331,285 +220,39 @@ public class MessageListAdapter extends AbstractRecyclerAdapter<ConversationMode
 	@Override
 	public void onBindViewHolder(@NonNull RecyclerView.ViewHolder h, int p) {
 		if (h instanceof MessageListViewHolder) {
-			final MessageListViewHolder holder = (MessageListViewHolder) h;
-			final int position = h.getAdapterPosition();
-
-			final ConversationModel conversationModel = this.getEntity(position);
-			holder.conversationModel = conversationModel;
-
-			holder.itemView.setOnClickListener(new DebouncedOnClickListener(500) {
-				@Override
-				public void onDebouncedClick(View v) {
-					// position may have changed after the item was bound. query current position from holder
-					int currentPos = holder.getLayoutPosition();
-
-					if (currentPos >= 0) {
-						clickListener.onItemClick(v, currentPos, getEntity(currentPos));
-					}
-				}
-			});
-
-			holder.itemView.setOnLongClickListener(v -> {
-				// position may have changed after the item was bound. query current position from holder
-				int currentPos = holder.getLayoutPosition();
-
-				if (currentPos >= 0) {
-					return clickListener.onItemLongClick(v, currentPos, getEntity(currentPos));
-				}
-				return false;
-			});
-
-			holder.avatarView.setOnClickListener(v -> {
-				// position may have changed after the item was bound. query current position from holder
-				int currentPos = holder.getLayoutPosition();
-
-				if (currentPos >= 0) {
-					clickListener.onAvatarClick(v, currentPos, getEntity(currentPos));
-				}
-			});
-
-			holder.joinGroupCallButton.setOnClickListener(v -> {
-				// position may have changed after the item was bound. query current position from holder
-				int currentPos = holder.getLayoutPosition();
-
-				if (currentPos >= 0) {
-					clickListener.onJoinGroupCallClick(getEntity(currentPos));
-				}
-			});
-
-			// Show or hide star tag
-			boolean isTagStarOn = this.conversationTagService.isTaggedWith(conversationModel, this.starTagModel);
-			ViewUtil.show(holder.tagStarOn, isTagStarOn);
-			ViewUtil.show(holder.pinIcon, isTagStarOn);
-
-			AbstractMessageModel messageModel = conversationModel.getLatestMessage();
-
-			if (holder.groupMemberName != null) {
-				holder.groupMemberName.setVisibility(View.GONE);
-			}
-
-			holder.fromView.setText(conversationModel.getReceiver().getDisplayName());
-
-			if (messageModel != null && ((!messageModel.isOutbox() && conversationModel.hasUnreadMessage()) || this.conversationTagService.isTaggedWith(conversationModel, this.unreadTagModel))) {
-				holder.fromView.setTextAppearance(context, R.style.Threema_TextAppearance_List_FirstLine_Bold);
-				holder.subjectView.setTextAppearance(context, R.style.Threema_TextAppearance_List_SecondLine_Bold);
-				if (holder.groupMemberName != null && holder.dateView != null) {
-					holder.groupMemberName.setTextAppearance(context, R.style.Threema_TextAppearance_List_SecondLine_Bold);
-				}
-				long unreadCount = conversationModel.getUnreadCount();
-				if (unreadCount > 0) {
-					holder.unreadCountView.setText(String.valueOf(unreadCount));
-					holder.unreadCountView.setVisibility(View.VISIBLE);
-					holder.unreadIndicator.setVisibility(View.VISIBLE);
-				} else if (this.conversationTagService.isTaggedWith(conversationModel, this.unreadTagModel)) {
-					holder.unreadCountView.setText("");
-					holder.unreadCountView.setVisibility(View.VISIBLE);
-					holder.unreadIndicator.setVisibility(View.VISIBLE);
-				}
-			} else {
-				holder.fromView.setTextAppearance(context, R.style.Threema_TextAppearance_List_FirstLine);
-				holder.subjectView.setTextAppearance(context, R.style.Threema_TextAppearance_List_SecondLine);
-				if (holder.groupMemberName != null && holder.dateView != null) {
-					holder.groupMemberName.setTextAppearance(context, R.style.Threema_TextAppearance_List_SecondLine);
-				}
-				holder.unreadCountView.setVisibility(View.GONE);
-				holder.unreadIndicator.setVisibility(View.GONE);
-			}
-
-			holder.deliveryView.setColorFilter(this.regularColor);
-			holder.attachmentView.setColorFilter(this.regularColor);
-			holder.muteStatus.setColorFilter(this.regularColor);
-			holder.dateView.setTextAppearance(context, R.style.Threema_TextAppearance_List_ThirdLine);
-			holder.subjectView.setVisibility(View.VISIBLE);
-
-			String uniqueId = conversationModel.getReceiver().getUniqueIdString();
-
-			if (messageModel != null) {
-				if (hiddenChatsListService.has(uniqueId)) {
-					holder.hiddenStatus.setVisibility(View.VISIBLE);
-					holder.subjectView.setText(R.string.private_chat_subject);
-					holder.attachmentView.setVisibility(View.GONE);
-					holder.dateView.setVisibility(View.INVISIBLE);
-					holder.deliveryView.setVisibility(View.GONE);
-					holder.joinGroupCallButton.setVisibility(View.GONE);
-					holder.ongoingGroupCallContainer.setVisibility(View.GONE);
-				} else {
-					holder.hiddenStatus.setVisibility(View.GONE);
-					holder.dateView.setText(MessageUtil.getDisplayDate(this.context, messageModel, false));
-					holder.dateView.setContentDescription("." + context.getString(R.string.state_dialog_modified) + "." + holder.dateView.getText() + ".");
-					holder.dateView.setVisibility(View.VISIBLE);
-
-					String draft = ThreemaApplication.getMessageDraft(uniqueId);
-					if (!TestUtil.empty(draft)) {
-						holder.groupMemberName.setVisibility(View.GONE);
-						holder.attachmentView.setVisibility(View.GONE);
-						holder.deliveryView.setVisibility(View.GONE);
-						holder.dateView.setText(" " + context.getString(R.string.draft));
-						holder.dateView.setContentDescription(null);
-						holder.dateView.setTextAppearance(context, R.style.Threema_TextAppearance_List_ThirdLine_Red);
-						holder.dateView.setVisibility(View.VISIBLE);
-						holder.subjectView.setText(emojiMarkupUtil.formatBodyTextString(context, draft + " ", 100));
-					} else {
-						if (conversationModel.isGroupConversation()) {
-							if (holder.groupMemberName != null && messageModel.getType() != MessageType.GROUP_CALL_STATUS) {
-								holder.groupMemberName.setText(NameUtil.getShortName(this.context, messageModel, this.contactService) + ": ");
-								holder.groupMemberName.setVisibility(View.VISIBLE);
-							}
-						} else {
-							holder.joinGroupCallButton.setVisibility(View.GONE);
-							holder.ongoingGroupCallContainer.setVisibility(View.GONE);
-						}
-
-						// Configure subject
-						MessageUtil.MessageViewElement viewElement = MessageUtil.getViewElement(this.context, messageModel);
-						String subject = viewElement.text;
-
-						if (messageModel.getType() == MessageType.TEXT) {
-							// we need to add an arbitrary character - otherwise span-only strings are formatted incorrectly in the item layout
-							subject += " ";
-						}
-
-						if (viewElement.icon != null) {
-							holder.attachmentView.setVisibility(View.VISIBLE);
-							holder.attachmentView.setImageResource(viewElement.icon);
-							String description = viewElement.placeholder != null
-								? viewElement.placeholder
-								: "";
-							holder.attachmentView.setContentDescription(description);
-
-							// Configure attachment
-							// Configure color of the attachment view
-							if (viewElement.color != null) {
-								holder.attachmentView.setColorFilter(
-										this.context.getResources().getColor(viewElement.color),
-										PorterDuff.Mode.SRC_IN);
-							}
-						} else {
-							holder.attachmentView.setVisibility(View.GONE);
-						}
-
-						if (TestUtil.empty(subject)) {
-							holder.subjectView.setText("");
-							holder.subjectView.setContentDescription("");
-						} else {
-							// Append space if attachmentView is visible
-							if (holder.attachmentView.getVisibility() == View.VISIBLE) {
-								subject = " " + subject;
-							}
-							holder.subjectView.setText(emojiMarkupUtil.formatBodyTextString(context, subject, 100));
-							holder.subjectView.setContentDescription(viewElement.contentDescription);
-						}
-
-						// Special icons for voice call message
-						if (messageModel.getType() == MessageType.VOIP_STATUS) {
-							// Always show the phone icon
-							holder.deliveryView.setImageResource(R.drawable.ic_phone_locked);
-						} else if (messageModel.getType() == MessageType.GROUP_CALL_STATUS) {
-							holder.deliveryView.setImageResource(R.drawable.ic_group_call);
-						} else {
-							if (!messageModel.isOutbox()) {
-								holder.deliveryView.setImageResource(R.drawable.ic_reply_filled);
-								holder.deliveryView.setContentDescription(context.getString(R.string.state_sent));
-
-								if (conversationModel.isContactConversation()){
-									if (messageModel.getState() != null) {
-										switch (messageModel.getState()) {
-											case USERACK:
-												holder.deliveryView.setColorFilter(this.ackColor);
-												break;
-											case USERDEC:
-												holder.deliveryView.setColorFilter(this.decColor);
-												break;
-										}
-									}
-								}
-								holder.deliveryView.setVisibility(View.VISIBLE);
-							} else {
-								stateBitmapUtil.setStateDrawable(messageModel, holder.deliveryView, false);
-							}
-						}
-
-						if (conversationModel.isGroupConversation()) {
-							if (groupService.isNotesGroup(conversationModel.getGroup())) {
-								holder.deliveryView.setImageResource(R.drawable.ic_spiral_bound_booklet_outline);
-								holder.deliveryView.setContentDescription(context.getString(R.string.notes));
-							} else {
-								holder.deliveryView.setImageResource(R.drawable.ic_group_filled);
-								holder.deliveryView.setContentDescription(context.getString(R.string.prefs_group_notifications));
-							}
-							holder.deliveryView.setVisibility(View.VISIBLE);
-						} else if (conversationModel.isDistributionListConversation()) {
-							holder.deliveryView.setImageResource(R.drawable.ic_distribution_list_filled);
-							holder.deliveryView.setContentDescription(context.getString(R.string.distribution_list));
-							holder.deliveryView.setVisibility(View.VISIBLE);
-						}
-					}
-				}
-				if (mutedChatsListService.has(uniqueId)) {
-					holder.muteStatus.setImageResource(R.drawable.ic_do_not_disturb_filled);
-					holder.muteStatus.setVisibility(View.VISIBLE);
-				} else if (mentionOnlyChatsListService.has(uniqueId)) {
-					holder.muteStatus.setImageResource(R.drawable.ic_dnd_mention_black_18dp);
-					holder.muteStatus.setVisibility(View.VISIBLE);
-				} else if (ringtoneService.hasCustomRingtone(uniqueId) && ringtoneService.isSilent(uniqueId, conversationModel.isGroupConversation())) {
-					holder.muteStatus.setImageResource(R.drawable.ic_notifications_off_filled);
-					holder.muteStatus.setVisibility(View.VISIBLE);
-				} else {
-					holder.muteStatus.setVisibility(View.GONE);
-				}
+			ConversationModel conversationModel = getEntity(h.getAbsoluteAdapterPosition());
+			MessageListAdapterItem item;
+			if (messageListAdapterItemsCache.containsKey(conversationModel)) {
+				item = messageListAdapterItemsCache.get(conversationModel);
 			} else {
-				// empty chat
-				holder.attachmentView.setVisibility(View.GONE);
-				holder.deliveryView.setVisibility(View.GONE);
-				holder.dateView.setVisibility(View.GONE);
-				holder.dateView.setContentDescription(null);
-				holder.subjectView.setText("");
-				holder.subjectView.setContentDescription("");
-				holder.muteStatus.setVisibility(View.GONE);
-				holder.hiddenStatus.setVisibility(uniqueId != null && hiddenChatsListService.has(uniqueId) ? View.VISIBLE : View.GONE);
-				holder.joinGroupCallButton.setVisibility(View.GONE);
-				holder.ongoingGroupCallContainer.setVisibility(View.GONE);
-			}
-
-			initializeGroupCallIndicator(holder, conversationModel);
-
-			AdapterUtil.styleConversation(holder.fromView, groupService, conversationModel);
-
-			AvatarListItemUtil.loadAvatar(conversationModel, contactService, groupService, distributionListService, holder.avatarListItemHolder);
-
-			this.updateTypingIndicator(
-					holder,
-					conversationModel.isTyping()
-			);
-
-			holder.itemView.setActivated(selectedChats.contains(conversationModel));
-
-			if (isTablet) {
-				// handle selection in multi-pane mode
-				if (highlightUid != null && highlightUid.equals(conversationModel.getUid()) && context instanceof ComposeMessageActivity) {
-					if (ConfigUtils.getAppTheme(context) == ConfigUtils.THEME_DARK) {
-						holder.listItemFG.setBackgroundResource(R.color.dark_settings_multipane_selection_bg);
-					} else {
-						holder.listItemFG.setBackgroundResource(R.color.settings_multipane_selection_bg);
-					}
-				} else {
-					holder.listItemFG.setBackgroundColor(this.backgroundColor);
+				item = new MessageListAdapterItem(
+					conversationModel,
+					contactService,
+					groupService,
+					mutedChatsListService,
+					mentionOnlyChatsListService,
+					ringtoneService,
+					hiddenChatsListService
+				);
+				synchronized (messageListAdapterItemsCache) {
+					messageListAdapterItemsCache.put(conversationModel, item);
 				}
 			}
+			((MessageListViewHolder) h).setMessageListAdapterItem(item);
 		} else {
 			// footer
-			Chip archivedChip = h.itemView.findViewById(R.id.archived_text);
+			MaterialButton archivedButton = h.itemView.findViewById(R.id.archived_text);
 
 			int archivedCount = conversationService.getArchivedCount();
 			if (archivedCount > 0) {
-				archivedChip.setVisibility(View.VISIBLE);
-				archivedChip.setOnClickListener(clickListener::onFooterClick);
-				archivedChip.setText(ConfigUtils.getSafeQuantityString(ThreemaApplication.getAppContext(), R.plurals.num_archived_chats, archivedCount, archivedCount));
+				archivedButton.setVisibility(View.VISIBLE);
+				archivedButton.setOnClickListener(clickListener::onFooterClick);
+				archivedButton.setText(ConfigUtils.getSafeQuantityString(ThreemaApplication.getAppContext(), R.plurals.num_archived_chats, archivedCount, archivedCount));
 				if (recyclerView != null) {
 					((EmptyRecyclerView) recyclerView).setNumHeadersAndFooters(0);
 				}
 			} else {
-				archivedChip.setVisibility(View.GONE);
+				archivedButton.setVisibility(View.GONE);
 				if (recyclerView != null) {
 					((EmptyRecyclerView) recyclerView).setNumHeadersAndFooters(1);
 				}
@@ -617,55 +260,6 @@ public class MessageListAdapter extends AbstractRecyclerAdapter<ConversationMode
 		}
 	}
 
-	/**
-	 * Initializes the view holder regarding ongoing group calls. If a group call is running, it
-	 * makes the join group call button visible and disables all the views that would be hidden
-	 * by the button.
-	 */
-	private void initializeGroupCallIndicator(@NonNull MessageListViewHolder holder, @NonNull ConversationModel conversationModel) {
-		GroupModel groupModel = conversationModel.getGroup();
-		if (conversationModel.isGroupConversation()
-			&& !groupService.isNotesGroup(groupModel)
-			&& groupService.isGroupMember(groupModel)
-		) {
-			GroupCallDescription call = groupCallManager.getCurrentChosenCall(holder.conversationModel.getGroup());
-			if (call != null && ConfigUtils.isGroupCallsEnabled()) {
-				boolean isJoined = groupCallManager.isJoinedCall(call);
-
-				holder.joinGroupCallButton.setVisibility(View.VISIBLE);
-				holder.joinGroupCallButton.setText(isJoined ? R.string.voip_gc_open_call : R.string.voip_gc_join_call);
-				ColorStateList groupCallTextColor = ColorStateList.valueOf(context.getResources().getColor(R.color.group_call_accent));
-				holder.joinGroupCallButton.setTextColor(groupCallTextColor);
-				holder.joinGroupCallButton.setChipBackgroundColor(groupCallTextColor.withAlpha(0x1a));
-				holder.ongoingCallText.setText(isJoined ? R.string.voip_gc_in_call : R.string.voip_gc_ongoing_call);
-				holder.ongoingGroupCallContainer.setVisibility(View.VISIBLE);
-				holder.groupCallDuration.postDelayed(() -> {
-					Long runningSince = call.getRunningSince();
-					holder.startGroupCallDuration(runningSince != null ? runningSince : SystemClock.elapsedRealtime());
-				}, 100L);
-				holder.unreadCountView.setVisibility(View.GONE);
-				holder.pinIcon.setVisibility(View.GONE);
-				holder.typingContainer.setVisibility(View.GONE);
-				holder.deliveryView.setVisibility(View.GONE);
-				holder.subjectView.setVisibility(View.GONE);
-				holder.dateView.setVisibility(View.GONE);
-				holder.attachmentView.setVisibility(View.GONE);
-				holder.groupMemberName.setVisibility(View.GONE);
-				holder.muteStatus.setVisibility(View.GONE);
-			} else {
-				holder.joinGroupCallButton.setVisibility(View.GONE);
-				holder.ongoingGroupCallContainer.setVisibility(View.GONE);
-			}
-			groupCallManager.addGroupCallObserver(groupModel, holder);
-		} else {
-			if (groupModel != null) {
-				groupCallManager.removeGroupCallObserver(groupModel, holder);
-			}
-			holder.joinGroupCallButton.setVisibility(View.GONE);
-			holder.ongoingGroupCallContainer.setVisibility(View.GONE);
-		}
-	}
-
 	@Override
 	public void onAttachedToRecyclerView(@NonNull RecyclerView recyclerView) {
 		super.onAttachedToRecyclerView(recyclerView);
@@ -707,13 +301,6 @@ public class MessageListAdapter extends AbstractRecyclerAdapter<ConversationMode
 	}
 
 	public void setHighlightItem(String uid) {
-		highlightUid = uid;
-	}
-
-	private void updateTypingIndicator(MessageListViewHolder holder, boolean isTyping) {
-		if(holder != null && holder.latestMessageContainer != null && holder.typingContainer != null) {
-			holder.latestMessageContainer.setVisibility(isTyping ? View.GONE : View.VISIBLE);
-			holder.typingContainer.setVisibility(!isTyping ? View.GONE : View.VISIBLE);
-		}
+		messageListItemParams.setHighlightUid(uid);
 	}
 }
diff --git a/app/src/main/java/ch/threema/app/adapters/MessageListAdapterItem.kt b/app/src/main/java/ch/threema/app/adapters/MessageListAdapterItem.kt
new file mode 100644
index 00000000..8b0570cf
--- /dev/null
+++ b/app/src/main/java/ch/threema/app/adapters/MessageListAdapterItem.kt
@@ -0,0 +1,178 @@
+/*  _____ _
+ * |_   _| |_  _ _ ___ ___ _ __  __ _
+ *   | | | ' \| '_/ -_) -_) '  \/ _` |_
+ *   |_| |_||_|_| \___\___|_|_|_\__,_(_)
+ *
+ * Threema for Android
+ * Copyright (c) 2022-2023 Threema GmbH
+ *
+ * This program is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU Affero General Public License, version 3,
+ * as published by the Free Software Foundation.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+ * GNU Affero General Public License for more details.
+ *
+ * You should have received a copy of the GNU Affero General Public License
+ * along with this program. If not, see <https://www.gnu.org/licenses/>.
+ */
+
+package ch.threema.app.adapters
+
+import ch.threema.app.R
+import ch.threema.app.ThreemaApplication
+import ch.threema.app.services.ContactService
+import ch.threema.app.services.DeadlineListService
+import ch.threema.app.services.GroupService
+import ch.threema.app.services.RingtoneService
+import ch.threema.app.utils.MessageUtil
+import ch.threema.app.utils.NameUtil
+import ch.threema.app.utils.TestUtil
+import ch.threema.storage.models.ConversationModel
+import ch.threema.storage.models.GroupModel
+import ch.threema.storage.models.MessageState
+import ch.threema.storage.models.MessageType
+
+/**
+ * This class is used to get the information of a conversation list item faster. These objects can
+ * be created in advance and when the user scrolls through the list, the information can be
+ * displayed quickly.
+ */
+class MessageListAdapterItem(
+    val conversationModel: ConversationModel,
+    contactService: ContactService,
+    groupService: GroupService,
+    private val mutedChatsListService: DeadlineListService,
+    private val mentionOnlyChatsListService: DeadlineListService,
+    private val ringtoneService: RingtoneService,
+    hiddenChatsListService: DeadlineListService
+) {
+
+    val group: GroupModel? = conversationModel.group
+
+    val isContactConversation = conversationModel.isContactConversation
+    val isGroupConversation = conversationModel.isGroupConversation
+    private val isDistributionListConversation = conversationModel.isDistributionListConversation
+    val isNotesGroup = group?.let { groupService.isNotesGroup(it) } ?: false
+    val isGroupMember = group?.let { groupService.isGroupMember(it) } ?: false
+
+    private val uniqueId = conversationModel.receiver?.uniqueIdString ?: ""
+    val uid: String = conversationModel.uid
+
+    val isHidden = hiddenChatsListService.has(uniqueId)
+    val isPinTagged = conversationModel.isPinTagged
+    val isTyping = conversationModel.isTyping
+
+    // This string contains the drafted message (only the first 100 characters); no draft available if null
+    private var lastDraft: CharSequence? = null
+    private var lastDraftPadded: CharSequence? = getDraft()
+
+    fun getDraft(): CharSequence? {
+        val draft = ThreemaApplication.getMessageDraft(uniqueId)
+        if (draft == lastDraft) {
+            return lastDraftPadded
+        }
+        if (draft?.isNotBlank() == true) {
+            lastDraft = draft
+            lastDraftPadded = "$draft "
+        } else {
+            lastDraft = null
+            lastDraftPadded = null
+        }
+        return lastDraftPadded
+    }
+
+    // This string contains the number of unread messages. If empty, the conversation is tagged unread
+    val unreadCountText = if (conversationModel.unreadCount > 0) {
+        conversationModel.unreadCount.toString()
+    } else if (conversationModel.isUnreadTagged) {
+        ""
+    } else {
+        null
+    }
+
+    val latestMessage = conversationModel.latestMessage
+    val latestMessageDate: String? =
+        MessageUtil.getDisplayDate(conversationModel.context, latestMessage, false)
+    val latestMessageDateContentDescription =
+        "." + conversationModel.context.getString(R.string.state_dialog_modified) + "." + latestMessageDate + "."
+    val latestMessageViewElement =
+        latestMessage?.let { MessageUtil.getViewElement(conversationModel.context, it) }
+
+    val latestMessageSubject: String by lazy {
+        var subject: String? = ""
+        if (latestMessageViewElement != null) {
+            subject = latestMessageViewElement.text
+        }
+        if (latestMessage != null && latestMessage.type == MessageType.TEXT) {
+            // we need to add an arbitrary character - otherwise span-only strings are formatted incorrectly in the item layout
+            subject += " "
+        }
+        if (subject.isNullOrBlank()) {
+            ""
+        } else {
+            // Append space if attachmentView is visible
+            if (latestMessageViewElement?.icon != null) {
+                subject = " $subject"
+            }
+            subject
+        }
+    }
+    val latestMessageIsAck = latestMessage != null && latestMessage.state == MessageState.USERACK
+    val latestMessageIsDec = latestMessage != null && latestMessage.state == MessageState.USERDEC
+
+    val latestMessageGroupMemberName =
+        if (isGroupConversation && latestMessage != null && latestMessage.type != MessageType.GROUP_CALL_STATUS && TestUtil.empty(getDraft())) {
+            String.format(
+                "%s: ",
+                NameUtil.getShortName(conversationModel.context, latestMessage, contactService)
+            )
+        } else {
+            ""
+        }
+
+    val deliveryIconResource = run {
+        if (isContactConversation) {
+            if (latestMessage != null) {
+                if (latestMessage.type == MessageType.VOIP_STATUS) {
+                    // Always show the phone icon for voip status messages
+                    R.drawable.ic_phone_locked
+                } else {
+                    if (!latestMessage.isOutbox) {
+                        R.drawable.ic_reply_filled
+                    } else {
+                        ConversationModel.NO_RESOURCE
+                    }
+                    // Note that the icon for outbox messages is handled directly in the view holder
+                }
+            } else {
+                ConversationModel.NO_RESOURCE
+            }
+        } else if (isGroupConversation) {
+            if (isNotesGroup) {
+                R.drawable.ic_spiral_bound_booklet_outline
+            } else {
+                R.drawable.ic_group_filled
+            }
+        } else if (isDistributionListConversation) {
+            R.drawable.ic_distribution_list_filled
+        } else {
+            ConversationModel.NO_RESOURCE
+        }
+    }
+
+    val muteStatusResource = run {
+        if (mutedChatsListService.has(uniqueId)) {
+            R.drawable.ic_do_not_disturb_filled
+        } else if (mentionOnlyChatsListService.has(uniqueId)) {
+            R.drawable.ic_dnd_mention_black_18dp
+        } else if (ringtoneService.hasCustomRingtone(uniqueId) && ringtoneService.isSilent(uniqueId, isGroupConversation)) {
+            R.drawable.ic_notifications_off_filled
+        } else {
+            ConversationModel.NO_RESOURCE
+        }
+    }
+}
+
diff --git a/app/src/main/java/ch/threema/app/adapters/MessageListViewHolder.kt b/app/src/main/java/ch/threema/app/adapters/MessageListViewHolder.kt
new file mode 100644
index 00000000..96fc4cb6
--- /dev/null
+++ b/app/src/main/java/ch/threema/app/adapters/MessageListViewHolder.kt
@@ -0,0 +1,496 @@
+/*  _____ _
+ * |_   _| |_  _ _ ___ ___ _ __  __ _
+ *   | | | ' \| '_/ -_) -_) '  \/ _` |_
+ *   |_| |_||_|_| \___\___|_|_|_\__,_(_)
+ *
+ * Threema for Android
+ * Copyright (c) 2022-2023 Threema GmbH
+ *
+ * This program is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU Affero General Public License, version 3,
+ * as published by the Free Software Foundation.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+ * GNU Affero General Public License for more details.
+ *
+ * You should have received a copy of the GNU Affero General Public License
+ * along with this program. If not, see <https://www.gnu.org/licenses/>.
+ */
+
+package ch.threema.app.adapters
+
+import android.content.Context
+import android.view.View
+import android.view.View.GONE
+import android.view.View.INVISIBLE
+import android.view.View.VISIBLE
+import android.widget.Chronometer
+import android.widget.ImageView
+import android.widget.TextView
+import androidx.annotation.AnyThread
+import androidx.annotation.ColorInt
+import androidx.core.content.ContextCompat
+import androidx.core.widget.TextViewCompat
+import androidx.recyclerview.widget.RecyclerView
+import ch.threema.app.R
+import ch.threema.app.activities.ComposeMessageActivity
+import ch.threema.app.emojis.EmojiMarkupUtil
+import ch.threema.app.services.ContactService
+import ch.threema.app.services.DistributionListService
+import ch.threema.app.services.GroupService
+import ch.threema.app.ui.AvatarListItemUtil
+import ch.threema.app.ui.AvatarView
+import ch.threema.app.ui.DebouncedOnClickListener
+import ch.threema.app.ui.listitemholder.AvatarListItemHolder
+import ch.threema.app.utils.AdapterUtil
+import ch.threema.app.utils.ConfigUtils
+import ch.threema.app.utils.RuntimeUtil
+import ch.threema.app.utils.StateBitmapUtil
+import ch.threema.app.utils.ViewUtil
+import ch.threema.app.utils.getRunningSince
+import ch.threema.app.voip.groupcall.GroupCallDescription
+import ch.threema.app.voip.groupcall.GroupCallManager
+import ch.threema.app.voip.groupcall.GroupCallObserver
+import ch.threema.base.utils.LoggingUtil
+import ch.threema.storage.models.ConversationModel.NO_RESOURCE
+import com.google.android.material.button.MaterialButton
+import java.util.Objects
+
+private val logger = LoggingUtil.getThreemaLogger("MessageListViewHolder")
+
+class MessageListViewHolder(itemView: View,
+                            private val context: Context,
+                            private val clickListener: MessageListViewHolderClickListener,
+                            private val groupCallManager: GroupCallManager,
+                            private val params: MessageListItemParams,
+                            private val strings: MessageListItemStrings
+) : RecyclerView.ViewHolder(itemView), GroupCallObserver {
+    interface MessageListViewHolderClickListener {
+        fun onItemClick(view: View, position: Int)
+        fun onItemLongClick(view: View, position: Int): Boolean
+        fun onAvatarClick(view: View, position: Int)
+        fun onJoinGroupCallClick(position: Int)
+    }
+
+    class MessageListItemParams(
+            @ColorInt
+            val regularColor: Int,
+            @ColorInt
+            val ackColor: Int,
+            @ColorInt
+            val decColor: Int,
+            @ColorInt
+            val backgroundColor: Int,
+            val isTablet: Boolean,
+            val emojiMarkupUtil: EmojiMarkupUtil,
+            val contactService: ContactService,
+            val groupService: GroupService,
+            val distributionListService: DistributionListService,
+            var highlightUid: String?,
+            val stateBitmapUtil: StateBitmapUtil?,
+    )
+
+    class MessageListItemStrings(
+            val notes: String,
+            val groups: String,
+            val distributionLists: String,
+            val stateSent: String,
+            val draftText: String
+    )
+
+    lateinit var listItem: View
+    private lateinit var unreadBar: View
+    private lateinit var unreadCountView: MaterialButton
+    private lateinit var pinBar: View
+    private lateinit var pinIcon: ImageView
+    private lateinit var fromView: TextView
+    private lateinit var dateView: TextView
+    private lateinit var subjectView: TextView
+    private lateinit var deliveryView: ImageView
+    private lateinit var attachmentView: ImageView
+    private lateinit var listItemFG: View
+    private lateinit var latestMessageContainer: View
+    private lateinit var typingContainer: View
+    private lateinit var groupMemberName: TextView
+    private lateinit var muteStatus: ImageView
+    private lateinit var hiddenStatus: ImageView
+    lateinit var avatarView: AvatarView
+    private lateinit var avatarListItemHolder: AvatarListItemHolder
+    private lateinit var ongoingGroupCallContainer: View
+    private lateinit var joinGroupCallButton: MaterialButton
+    private lateinit var ongoingCallDivider: TextView
+    private lateinit var ongoingCallText: TextView
+    private lateinit var groupCallDuration: Chronometer
+
+    private var isGroupCallOngoing = false
+    private var isGroupCallJoined = false
+
+    var messageListAdapterItem: MessageListAdapterItem? = null
+        set(value) {
+            if (value != null) {
+                initializeMessageListView(value)
+                value.group?.let {
+                    logger.debug("Adding group call observer {}", it)
+                    groupCallManager.addGroupCallObserver(it, this)
+                }
+            }
+            field = value
+        }
+
+    init {
+        initLayout(itemView)
+        initializeOnClickListeners()
+    }
+
+    override fun onGroupCallUpdate(call: GroupCallDescription?) {
+        if (!ConfigUtils.isGroupCallsEnabled()) {
+            return
+        }
+
+        if (call != null && messageListAdapterItem?.group?.id == call.getGroupIdInt() && messageListAdapterItem?.isHidden != true) {
+            updateGroupCallDuration(call)
+        } else {
+            stopGroupCallDuration()
+        }
+        if (
+            call == null && (isGroupCallOngoing || isGroupCallJoined)
+            || call != null && (!isGroupCallOngoing || groupCallManager.isJoinedCall(call) != isGroupCallJoined)
+        ) {
+            RuntimeUtil.runOnUiThread {
+                messageListAdapterItem?.let { initializeMessageListView(it) }
+            }
+        }
+    }
+
+    private fun initLayout(view: View) {
+        listItem = view.findViewById(R.id.list_item)
+        unreadBar = view.findViewById(R.id.unread_bar)
+        unreadCountView = view.findViewById(R.id.unread_count)
+        pinBar = view.findViewById(R.id.pin_bar)
+        pinIcon = view.findViewById(R.id.pin_icon)
+        fromView = view.findViewById(R.id.from)
+        dateView = view.findViewById(R.id.date)
+        subjectView = view.findViewById(R.id.subject)
+        deliveryView = view.findViewById(R.id.delivery)
+        attachmentView = view.findViewById(R.id.attachment)
+        listItemFG = view.findViewById(R.id.list_item_fg)
+        latestMessageContainer = view.findViewById(R.id.latest_message_container)
+        typingContainer = view.findViewById(R.id.typing_container)
+        groupMemberName = view.findViewById(R.id.group_member_name)
+        muteStatus = view.findViewById(R.id.mute_status)
+        hiddenStatus = view.findViewById(R.id.hidden_status)
+        avatarView = view.findViewById(R.id.avatar_view)
+        avatarListItemHolder = AvatarListItemHolder()
+        avatarListItemHolder.avatarView = avatarView
+        avatarListItemHolder.avatarLoadingAsyncTask = null
+        ongoingGroupCallContainer = view.findViewById(R.id.ongoing_group_call_container)
+        ongoingCallText = view.findViewById(R.id.ongoing_call_text)
+        joinGroupCallButton = view.findViewById(R.id.join_group_call_button)
+        ongoingCallDivider = view.findViewById(R.id.ongoing_call_divider)
+        groupCallDuration = view.findViewById(R.id.group_call_duration)
+    }
+
+    private fun initializeOnClickListeners() {
+        listItem.setOnClickListener(object : DebouncedOnClickListener(500) {
+            override fun onDebouncedClick(v: View) {
+                // position may have changed after the item was bound. query current position from holder
+                val currentPos = layoutPosition
+                if (currentPos >= 0) {
+                    clickListener.onItemClick(v, currentPos)
+                }
+            }
+        })
+        listItem.setOnLongClickListener { v: View ->
+            // position may have changed after the item was bound. query current position from holder
+            val currentPos = layoutPosition
+            if (currentPos >= 0) {
+                return@setOnLongClickListener clickListener.onItemLongClick(v, currentPos)
+            }
+            false
+        }
+
+        avatarView.setOnClickListener { v: View ->
+            // position may have changed after the item was bound. query current position from holder
+            val currentPos = layoutPosition
+            if (currentPos >= 0) {
+                clickListener.onAvatarClick(v, currentPos)
+            }
+        }
+
+        joinGroupCallButton.setOnClickListener {
+            val currentPos = layoutPosition
+            if (currentPos >= 0) {
+                clickListener.onJoinGroupCallClick(currentPos)
+            }
+        }
+    }
+
+    private fun initializeMessageListView(messageListAdapterItem: MessageListAdapterItem) {
+        // Show or hide pin tag
+        val isPinTagged = messageListAdapterItem.isPinTagged
+        ViewUtil.show(pinBar, isPinTagged)
+        ViewUtil.show(pinIcon, isPinTagged)
+
+        val latestMessage = messageListAdapterItem.latestMessage
+
+        fromView.text = messageListAdapterItem.conversationModel.receiver.displayName
+
+        val draft = messageListAdapterItem.getDraft()
+
+        // Initialize subject
+        subjectView.visibility = VISIBLE
+        subjectView.text = params.emojiMarkupUtil.formatBodyTextString(
+            context,
+            draft?.toString() ?: messageListAdapterItem.latestMessageSubject,
+            100
+        )
+
+        groupMemberName.text = if (messageListAdapterItem.isHidden) "" else messageListAdapterItem.latestMessageGroupMemberName
+
+        if (draft != null) {
+            initializeDraft()
+        } else if (latestMessage != null) {
+            initializeLatestMessage(messageListAdapterItem)
+        } else {
+            initializeEmptyChat()
+        }
+
+        initializeUnreadAppearance(messageListAdapterItem)
+
+        initializeMuteAppearance(messageListAdapterItem)
+
+        initializeHiddenAppearance(messageListAdapterItem.isHidden)
+
+        initializeDeliveryView(messageListAdapterItem, messageListAdapterItem.isHidden, draft != null)
+
+        initializeGroupCallIndicator(messageListAdapterItem)
+
+        AdapterUtil.styleConversation(fromView, params.groupService, messageListAdapterItem.conversationModel)
+
+        AvatarListItemUtil.loadAvatar(messageListAdapterItem.conversationModel, params.contactService, params.groupService, params.distributionListService, avatarListItemHolder)
+
+        updateTypingIndicator(messageListAdapterItem)
+
+        if (params.isTablet) {
+            // handle selection in multi-pane mode
+            if (params.highlightUid != null && params.highlightUid == messageListAdapterItem.uid && context is ComposeMessageActivity) {
+                listItemFG.setBackgroundResource(R.color.settings_multipane_selection_bg)
+            } else {
+                listItemFG.setBackgroundColor(params.backgroundColor)
+            }
+        }
+    }
+
+    private fun initializeUnreadAppearance(messageListAdapterItem: MessageListAdapterItem) {
+        val unreadCountText = messageListAdapterItem.unreadCountText
+        if (unreadCountText != null) {
+            TextViewCompat.setTextAppearance(fromView, R.style.Threema_TextAppearance_List_FirstLine_Bold)
+            TextViewCompat.setTextAppearance(subjectView, R.style.Threema_TextAppearance_List_SecondLine_Bold)
+            TextViewCompat.setTextAppearance(groupMemberName, R.style.Threema_TextAppearance_List_SecondLine_Bold)
+            unreadCountView.text = unreadCountText
+            unreadCountView.visibility = VISIBLE
+            unreadBar.visibility = VISIBLE
+        } else {
+            TextViewCompat.setTextAppearance(fromView, R.style.Threema_TextAppearance_List_FirstLine)
+            TextViewCompat.setTextAppearance(subjectView, R.style.Threema_TextAppearance_List_SecondLine)
+            TextViewCompat.setTextAppearance(groupMemberName, R.style.Threema_TextAppearance_List_SecondLine)
+            unreadCountView.visibility = GONE
+            unreadBar.visibility = GONE
+        }
+    }
+
+    private fun initializeDraft() {
+        attachmentView.visibility = GONE
+        deliveryView.visibility = GONE
+        dateView.text = strings.draftText
+        dateView.contentDescription = null
+        TextViewCompat.setTextAppearance(dateView, R.style.Threema_TextAppearance_List_ThirdLine_Red)
+        dateView.visibility = VISIBLE
+    }
+
+    private fun initializeLatestMessage(messageListAdapterItem: MessageListAdapterItem) {
+        // Set the date of the latest message
+        dateView.text = messageListAdapterItem.latestMessageDate
+        dateView.contentDescription = messageListAdapterItem.latestMessageDateContentDescription
+        dateView.visibility = VISIBLE
+        TextViewCompat.setTextAppearance(dateView, R.style.Threema_TextAppearance_List_ThirdLine)
+
+        val viewElement = messageListAdapterItem.latestMessageViewElement
+        // Configure subject
+        if (viewElement?.icon != null) {
+            attachmentView.visibility = VISIBLE
+            attachmentView.setImageResource(viewElement.icon)
+            attachmentView.setColorFilter(when {
+                viewElement.color != null -> ContextCompat.getColor(context, viewElement.color)
+                else -> params.regularColor
+            })
+            attachmentView.contentDescription = Objects.requireNonNullElse(viewElement.placeholder, "")
+        } else {
+            attachmentView.visibility = GONE
+        }
+        subjectView.contentDescription = viewElement?.contentDescription ?: ""
+    }
+
+    private fun initializeEmptyChat() {
+        attachmentView.visibility = GONE
+        dateView.visibility = GONE
+        dateView.contentDescription = null
+    }
+
+    private fun initializeDeliveryView(messageListAdapterItem: MessageListAdapterItem,
+                                       isHiddenChat: Boolean,
+                                       hasDraft: Boolean
+    ) {
+        if (isHiddenChat || hasDraft) {
+            deliveryView.visibility = GONE
+        } else {
+            deliveryView.visibility = VISIBLE
+            val deliveryIconResource = messageListAdapterItem.deliveryIconResource
+            if (deliveryIconResource != NO_RESOURCE) {
+                deliveryView.setImageResource(deliveryIconResource)
+                deliveryView.contentDescription = when {
+                    messageListAdapterItem.isContactConversation -> strings.stateSent
+                    messageListAdapterItem.isNotesGroup -> strings.notes
+                    messageListAdapterItem.isGroupConversation -> strings.groups
+                    else -> strings.distributionLists
+                }
+            } else {
+                if (messageListAdapterItem.latestMessage != null) {
+                    // In case there is a latest message but no icon is set, we need to get the
+                    // icon for the current message state
+                    params.stateBitmapUtil?.setStateDrawable(context, messageListAdapterItem.latestMessage, deliveryView, false)
+                } else {
+                    deliveryView.visibility = GONE
+                }
+            }
+
+            deliveryView.setColorFilter(
+                when {
+                    messageListAdapterItem.isGroupConversation -> params.regularColor
+                    messageListAdapterItem.latestMessageIsAck -> params.ackColor
+                    messageListAdapterItem.latestMessageIsDec -> params.decColor
+                    else -> params.regularColor
+                }
+            )
+        }
+    }
+
+    private fun initializeMuteAppearance(messageListAdapterItem: MessageListAdapterItem) {
+        val muteStatusResource = messageListAdapterItem.muteStatusResource
+        if (muteStatusResource != NO_RESOURCE) {
+            muteStatus.visibility = VISIBLE
+            muteStatus.setImageResource(muteStatusResource)
+            muteStatus.setColorFilter(params.regularColor)
+        } else {
+            muteStatus.visibility = GONE
+        }
+    }
+
+    private fun initializeHiddenAppearance(isHiddenChat: Boolean) {
+        if (isHiddenChat) {
+            hiddenStatus.visibility = VISIBLE
+            subjectView.setText(R.string.private_chat_subject)
+            attachmentView.visibility = GONE
+            dateView.visibility = INVISIBLE
+            deliveryView.visibility = GONE
+        } else {
+            hiddenStatus.visibility = GONE
+        }
+    }
+
+    /**
+     * Initializes the view holder regarding ongoing group calls. If a group call is running, it
+     * makes the join group call button visible and disables all the views that would be hidden
+     * by the button.
+     */
+    private fun initializeGroupCallIndicator(messageListAdapterItem: MessageListAdapterItem) {
+        val group = messageListAdapterItem.group
+        if (group != null
+                && !messageListAdapterItem.isNotesGroup
+                && messageListAdapterItem.isGroupMember
+        ) {
+            val call: GroupCallDescription? = groupCallManager.getCurrentChosenCall(group)
+            if (call != null) {
+                val isJoined = groupCallManager.isJoinedCall(call)
+
+                isGroupCallOngoing = true
+                isGroupCallJoined = isJoined
+
+                // Initialize group call related views
+                joinGroupCallButton.visibility = VISIBLE
+                joinGroupCallButton.setText(
+                    if (isJoined) {
+                        R.string.voip_gc_open_call
+                    } else {
+                        R.string.voip_gc_join_call
+                    }
+                )
+                ongoingCallText.setText(
+                    if (isJoined) {
+                        R.string.voip_gc_in_call
+                    } else {
+                        R.string.voip_gc_ongoing_call
+                    }
+                )
+                ongoingGroupCallContainer.visibility = VISIBLE
+
+                // Make views invisible that are only displayed when no group call is happening
+                groupMemberName.visibility = GONE
+                unreadCountView.visibility = GONE
+                pinIcon.visibility = GONE
+                typingContainer.visibility = GONE
+                deliveryView.visibility = GONE
+                subjectView.visibility = GONE
+                dateView.visibility = GONE
+                attachmentView.visibility = GONE
+                muteStatus.visibility = GONE
+            } else {
+                joinGroupCallButton.visibility = GONE
+                ongoingGroupCallContainer.visibility = GONE
+
+                isGroupCallOngoing = false
+                isGroupCallJoined = false
+            }
+        } else {
+            joinGroupCallButton.visibility = GONE
+            ongoingGroupCallContainer.visibility = GONE
+        }
+    }
+
+    private fun updateTypingIndicator(messageListAdapterItem: MessageListAdapterItem) {
+        val isTypingIndicatorHidden = !messageListAdapterItem.isTyping || messageListAdapterItem.isHidden
+        latestMessageContainer.visibility = if (isTypingIndicatorHidden) VISIBLE else GONE
+        typingContainer.visibility = if (isTypingIndicatorHidden) GONE else VISIBLE
+    }
+
+    @AnyThread
+    fun updateGroupCallDuration(call: GroupCallDescription) {
+        val runningSince = getRunningSince(call, context)
+        startGroupCallDuration(runningSince ?: 0)
+    }
+
+    @AnyThread
+    private fun startGroupCallDuration(base: Long) {
+        RuntimeUtil.runOnUiThread {
+            groupCallDuration.apply {
+                this.base = base
+                start()
+                visibility = VISIBLE
+            }
+            ongoingCallDivider.visibility = VISIBLE
+        }
+    }
+
+    @AnyThread
+    private fun stopGroupCallDuration() {
+        RuntimeUtil.runOnUiThread {
+            groupCallDuration.apply {
+                stop()
+                visibility = GONE
+            }
+            ongoingCallDivider.visibility = GONE
+        }
+    }
+}
diff --git a/app/src/main/java/ch/threema/app/adapters/RecentListAdapter.java b/app/src/main/java/ch/threema/app/adapters/RecentListAdapter.java
index 5e14693d..6b7fca4f 100644
--- a/app/src/main/java/ch/threema/app/adapters/RecentListAdapter.java
+++ b/app/src/main/java/ch/threema/app/adapters/RecentListAdapter.java
@@ -44,6 +44,7 @@ import ch.threema.app.ui.CheckableConstraintLayout;
 import ch.threema.app.ui.listitemholder.AvatarListItemHolder;
 import ch.threema.app.utils.AdapterUtil;
 import ch.threema.app.utils.NameUtil;
+import ch.threema.app.utils.TestUtil;
 import ch.threema.storage.models.ContactModel;
 import ch.threema.storage.models.ConversationModel;
 import ch.threema.storage.models.DistributionListModel;
@@ -52,8 +53,9 @@ import ch.threema.storage.models.GroupModel;
 public class RecentListAdapter extends FilterableListAdapter {
 	private final Context context;
 	private List<ConversationModel> values;
-	private List<ConversationModel> ovalues;
+	private final List<ConversationModel> ovalues;
 	private RecentListFilter recentListFilter;
+	private final FilterResultsListener filterResultsListener;
 	private final ContactService contactService;
 	private final GroupService groupService;
 	private final DistributionListService distributionListService;
@@ -63,7 +65,8 @@ public class RecentListAdapter extends FilterableListAdapter {
 	                         final List<Integer> checkedItems,
 	                         ContactService contactService,
 	                         GroupService groupService,
-	                         DistributionListService distributionListService) {
+	                         DistributionListService distributionListService,
+							 FilterResultsListener filterResultsListener) {
 		super(context, R.layout.item_user_list, (List<Object>) (Object) values);
 
 		this.context = context;
@@ -72,6 +75,8 @@ public class RecentListAdapter extends FilterableListAdapter {
 		this.contactService = contactService;
 		this.groupService = groupService;
 		this.distributionListService = distributionListService;
+		this.filterResultsListener = filterResultsListener;
+
 		if (checkedItems != null && checkedItems.size() > 0) {
 			// restore checked items
 			this.checkedItems.addAll(checkedItems);
@@ -222,6 +227,9 @@ public class RecentListAdapter extends FilterableListAdapter {
 		@Override
 		protected void publishResults(CharSequence constraint, FilterResults results) {
 			values = (List<ConversationModel>) results.values;
+			if (filterResultsListener != null) {
+				filterResultsListener.onResultsAvailable(TestUtil.empty(constraint) ? 0 : results.count);
+			}
 			notifyDataSetChanged();
 		}
 
diff --git a/app/src/main/java/ch/threema/app/adapters/UserListAdapter.java b/app/src/main/java/ch/threema/app/adapters/UserListAdapter.java
index 6cb02323..306363ff 100644
--- a/app/src/main/java/ch/threema/app/adapters/UserListAdapter.java
+++ b/app/src/main/java/ch/threema/app/adapters/UserListAdapter.java
@@ -70,6 +70,7 @@ public class UserListAdapter extends FilterableListAdapter {
 	private final ContactService contactService;
 	private final IdListService blacklistService;
 	private final DeadlineListService hiddenChatsListService;
+	private final FilterResultsListener filterResultsListener;
 
 	public UserListAdapter(
 		Context context,
@@ -79,7 +80,8 @@ public class UserListAdapter extends FilterableListAdapter {
 		ContactService contactService,
 		IdListService blacklistService,
 		DeadlineListService hiddenChatsListService,
-		PreferenceService preferenceService
+		PreferenceService preferenceService,
+		FilterResultsListener filterResultsListener
 	) {
 		super(context, R.layout.item_user_list, (List<Object>) (Object) values);
 
@@ -87,6 +89,7 @@ public class UserListAdapter extends FilterableListAdapter {
 		this.contactService = contactService;
 		this.hiddenChatsListService = hiddenChatsListService;
 		this.blacklistService = blacklistService;
+		this.filterResultsListener = filterResultsListener;
 
 		this.values = new ArrayList<>(values);
 		this.values.addAll(getMissingPreselectedContacts(values, preselectedIdentities));
@@ -236,6 +239,9 @@ public class UserListAdapter extends FilterableListAdapter {
 		@Override
 		protected void publishResults(CharSequence constraint, FilterResults results) {
 			values = (List<ContactModel>) results.values;
+			if (filterResultsListener != null) {
+				filterResultsListener.onResultsAvailable(TestUtil.empty(constraint) ? 0 : results.count);
+			}
 			notifyDataSetChanged();
 		}
 
diff --git a/app/src/main/java/ch/threema/app/adapters/ballot/BallotOverviewListAdapter.java b/app/src/main/java/ch/threema/app/adapters/ballot/BallotOverviewListAdapter.java
index f72a52a3..00e6910e 100644
--- a/app/src/main/java/ch/threema/app/adapters/ballot/BallotOverviewListAdapter.java
+++ b/app/src/main/java/ch/threema/app/adapters/ballot/BallotOverviewListAdapter.java
@@ -28,6 +28,8 @@ import android.view.ViewGroup;
 import android.widget.ArrayAdapter;
 import android.widget.TextView;
 
+import com.google.android.material.button.MaterialButton;
+
 import java.util.List;
 import java.util.Locale;
 
@@ -35,7 +37,6 @@ import ch.threema.app.R;
 import ch.threema.app.services.ContactService;
 import ch.threema.app.services.ballot.BallotService;
 import ch.threema.app.ui.AvatarListItemUtil;
-import ch.threema.app.ui.CountBoxView;
 import ch.threema.app.ui.listitemholder.AvatarListItemHolder;
 import ch.threema.app.utils.BallotUtil;
 import ch.threema.app.utils.LocaleUtil;
@@ -49,8 +50,8 @@ import ch.threema.storage.models.ballot.BallotModel;
  */
 public class BallotOverviewListAdapter extends ArrayAdapter<BallotModel> {
 
-	private Context context;
-	private List<BallotModel> values;
+	private final Context context;
+	private final List<BallotModel> values;
 	private final BallotService ballotService;
 	private final ContactService contactService;
 
@@ -68,7 +69,7 @@ public class BallotOverviewListAdapter extends ArrayAdapter<BallotModel> {
 		public TextView state;
 		public TextView creator;
 		public TextView creationDate;
-		public CountBoxView countBoxView;
+		public MaterialButton countBoxView;
 	}
 
 	@Override
diff --git a/app/src/main/java/ch/threema/app/adapters/ballot/BallotVoteListAdapter.java b/app/src/main/java/ch/threema/app/adapters/ballot/BallotVoteListAdapter.java
index dcd6b6f6..fea596a6 100644
--- a/app/src/main/java/ch/threema/app/adapters/ballot/BallotVoteListAdapter.java
+++ b/app/src/main/java/ch/threema/app/adapters/ballot/BallotVoteListAdapter.java
@@ -30,14 +30,16 @@ import android.widget.CheckBox;
 import android.widget.RadioButton;
 import android.widget.TextView;
 
+import androidx.annotation.NonNull;
+
+import com.google.android.material.button.MaterialButton;
+
 import java.util.List;
 import java.util.Map;
 
-import androidx.annotation.NonNull;
 import ch.threema.app.R;
 import ch.threema.app.ThreemaApplication;
 import ch.threema.app.ui.CheckableRelativeLayout;
-import ch.threema.app.ui.CountBoxView;
 import ch.threema.app.utils.TestUtil;
 import ch.threema.storage.models.ballot.BallotChoiceModel;
 
@@ -46,8 +48,8 @@ import ch.threema.storage.models.ballot.BallotChoiceModel;
  */
 public class BallotVoteListAdapter extends ArrayAdapter<BallotChoiceModel> {
 
-	private Context context;
-	private List<BallotChoiceModel> values;
+	private final Context context;
+	private final List<BallotChoiceModel> values;
 	private final Map<Integer, Integer> selected;
 	private final boolean readonly;
 	private final boolean multipleChoice;
@@ -71,7 +73,7 @@ public class BallotVoteListAdapter extends ArrayAdapter<BallotChoiceModel> {
 
 	private static class BallotAdminChoiceItemHolder {
 		public TextView name;
-		public CountBoxView voteCount;
+		public MaterialButton voteCount;
 		public RadioButton radioButton;
 		public CheckBox checkBox;
 		int originalPosition;
diff --git a/app/src/main/java/ch/threema/app/adapters/decorators/AnimGifChatAdapterDecorator.java b/app/src/main/java/ch/threema/app/adapters/decorators/AnimGifChatAdapterDecorator.java
index 5e78eba2..03f51bc8 100644
--- a/app/src/main/java/ch/threema/app/adapters/decorators/AnimGifChatAdapterDecorator.java
+++ b/app/src/main/java/ch/threema/app/adapters/decorators/AnimGifChatAdapterDecorator.java
@@ -62,7 +62,7 @@ public class AnimGifChatAdapterDecorator extends ChatAdapterDecorator {
 
 		logger.debug("configureChatMessage - position " + position);
 
-		gifMessagePlayer = (GifMessagePlayer) getMessagePlayerService().createPlayer(getMessageModel(), (Activity) getContext(), helper.getMessageReceiver());
+		gifMessagePlayer = (GifMessagePlayer) getMessagePlayerService().createPlayer(getMessageModel(), (Activity) getContext(), helper.getMessageReceiver(), null);
 		holder.messagePlayer = gifMessagePlayer;
 
 		/*
@@ -73,6 +73,9 @@ public class AnimGifChatAdapterDecorator extends ChatAdapterDecorator {
 				int status = holder.controller.getStatus();
 
 				switch (status) {
+					case ControllerView.STATUS_READY_TO_RETRY:
+						propagateControllerRetryClickToParent();
+						break;
 					case ControllerView.STATUS_READY_TO_PLAY:
 					case ControllerView.STATUS_READY_TO_DOWNLOAD:
 						gifMessagePlayer.open();
@@ -132,7 +135,7 @@ public class AnimGifChatAdapterDecorator extends ChatAdapterDecorator {
 			holder.attachmentImage.invalidate();
 		}
 		if (fileData.getRenderingType() == FileData.RENDERING_STICKER) {
-			holder.messageBlockView.setBackground(null);
+			setStickerBackground(holder);
 		} else {
 			setDefaultBackground(holder);
 		}
@@ -141,7 +144,7 @@ public class AnimGifChatAdapterDecorator extends ChatAdapterDecorator {
 
 		RuntimeUtil.runOnUiThread(() -> setControllerState(holder, fileData, fileSize));
 
-		setDatePrefix(FileUtil.getFileMessageDatePrefix(getContext(), getMessageModel(), "GIF"), 0);
+		setDatePrefix(FileUtil.getFileMessageDatePrefix(getContext(), getMessageModel(), "GIF"));
 
 		gifMessagePlayer
 				.attachContainer(holder.attachmentImage)
diff --git a/app/src/main/java/ch/threema/app/adapters/decorators/AudioChatAdapterDecorator.java b/app/src/main/java/ch/threema/app/adapters/decorators/AudioChatAdapterDecorator.java
index 85dcb379..57c0e19e 100644
--- a/app/src/main/java/ch/threema/app/adapters/decorators/AudioChatAdapterDecorator.java
+++ b/app/src/main/java/ch/threema/app/adapters/decorators/AudioChatAdapterDecorator.java
@@ -23,8 +23,6 @@ package ch.threema.app.adapters.decorators;
 
 import android.annotation.SuppressLint;
 import android.content.Context;
-import android.os.Build;
-import android.os.PowerManager;
 import android.view.View;
 import android.widget.SeekBar;
 import android.widget.Toast;
@@ -35,62 +33,45 @@ import org.slf4j.Logger;
 
 import java.io.File;
 
-import ch.threema.app.BuildConfig;
 import ch.threema.app.R;
 import ch.threema.app.ThreemaApplication;
 import ch.threema.app.services.messageplayer.MessagePlayer;
 import ch.threema.app.ui.AudioProgressBarView;
 import ch.threema.app.ui.ControllerView;
 import ch.threema.app.ui.listitemholder.ComposeMessageHolder;
-import ch.threema.app.utils.AnimationUtil;
 import ch.threema.app.utils.ConfigUtils;
 import ch.threema.app.utils.RuntimeUtil;
 import ch.threema.app.utils.StringConversionUtil;
 import ch.threema.app.utils.TestUtil;
 import ch.threema.base.utils.LoggingUtil;
+import ch.threema.logging.ThreemaLogger;
 import ch.threema.storage.models.AbstractMessageModel;
 import ch.threema.storage.models.MessageState;
 import ch.threema.storage.models.MessageType;
 import ch.threema.storage.models.data.media.AudioDataModel;
 import ch.threema.storage.models.data.media.FileDataModel;
 
-import static ch.threema.app.voicemessage.VoiceRecorderActivity.MAX_VOICE_MESSAGE_LENGTH_MILLIS;
-
 public class AudioChatAdapterDecorator extends ChatAdapterDecorator {
 	private static final Logger logger = LoggingUtil.getThreemaLogger("AudioChatAdapterDecorator");
 
 	private static final String LISTENER_TAG = "decorator";
 	private MessagePlayer audioMessagePlayer;
-	private final PowerManager.WakeLock audioPlayerWakelock;
 
 	public AudioChatAdapterDecorator(Context context, AbstractMessageModel messageModel, Helper helper) {
-		super(context.getApplicationContext(), messageModel, helper);
-		PowerManager powerManager = (PowerManager) context.getApplicationContext().getSystemService(Context.POWER_SERVICE);
-		audioPlayerWakelock = powerManager.newWakeLock(PowerManager.PARTIAL_WAKE_LOCK, BuildConfig.APPLICATION_ID + ":AudioPlayer");
-	}
-
-	private void keepScreenOn() {
-		if (audioPlayerWakelock.isHeld()) {
-			keepScreenOff();
-		}
+		super(context, messageModel, helper);
 
-		if (!audioPlayerWakelock.isHeld()) {
-			audioPlayerWakelock.acquire(MAX_VOICE_MESSAGE_LENGTH_MILLIS);
+		if (logger instanceof ThreemaLogger) {
+			((ThreemaLogger) logger).setPrefix(String.valueOf(getMessageModel().getId()));
 		}
 
-		keepScreenOnUpdate();
-	}
-
-	private void keepScreenOnUpdate() {}
-
-	private void keepScreenOff() {
-		if (audioPlayerWakelock != null && audioPlayerWakelock.isHeld()) {
-			audioPlayerWakelock.release();
-		}
+		logger.info("New AudioChatAdapterDecorator instance for {}", messageModel.getId());
 	}
 
 	@Override
 	protected void configureChatMessage(final ComposeMessageHolder holder, final int position) {
+
+		logger.info("configureChatMessage for {}", getMessageModel().getId());
+
 		AudioDataModel audioDataModel;
 		FileDataModel fileDataModel;
 		final long duration;
@@ -109,7 +90,7 @@ public class AudioChatAdapterDecorator extends ChatAdapterDecorator {
 		}
 
 		audioMessagePlayer = getMessagePlayerService().createPlayer(getMessageModel(),
-			helper.getFragment().getActivity(), helper.getMessageReceiver());
+			helper.getFragment().getActivity(), helper.getMessageReceiver(), helper.getMediaControllerFuture());
 
 		setOnClickListener(view -> {
 			// no action on onClick
@@ -117,23 +98,28 @@ public class AudioChatAdapterDecorator extends ChatAdapterDecorator {
 
 		holder.messagePlayer = audioMessagePlayer;
 		holder.readOnButton.setOnClickListener(v -> {
-			float speed = audioMessagePlayer.togglePlaybackSpeed();
+			float currentSpeed = getPreferenceService().getAudioPlaybackSpeed();
+			float speed = audioMessagePlayer.togglePlaybackSpeed(currentSpeed);
 			setSpeedButtonText(holder, speed);
 		});
 
 		setSpeedButtonText(holder, getPreferenceService().getAudioPlaybackSpeed());
 		holder.seekBar.setMessageModel(getMessageModel(), helper.getThumbnailCache());
+		holder.seekBar.setEnabled(false);
 		holder.readOnButton.setVisibility(View.GONE);
 		holder.messageTypeButton.setVisibility(View.VISIBLE);
 		holder.controller.setOnClickListener(v -> {
 			int status = holder.controller.getStatus();
 
 			switch (status) {
+				case ControllerView.STATUS_READY_TO_RETRY:
+					propagateControllerRetryClickToParent();
+					break;
 				case ControllerView.STATUS_READY_TO_PLAY:
 				case ControllerView.STATUS_PLAYING:
 				case ControllerView.STATUS_READY_TO_DOWNLOAD:
 					if (holder.seekBar != null && audioMessagePlayer != null) {
-						audioMessagePlayer.toggle();
+						audioMessagePlayer.togglePlayPause();
 					}
 					break;
 				case ControllerView.STATUS_PROGRESSING:
@@ -167,6 +153,7 @@ public class AudioChatAdapterDecorator extends ChatAdapterDecorator {
 					case MessagePlayer.State_NONE:
 						if (isDownloaded) {
 							if (holder.seekBar != null) {
+								updateProgressCount(holder, 0);
 								holder.seekBar.setMessageModel(getMessageModel(), helper.getThumbnailCache());
 							}
 							holder.controller.setPlay();
@@ -186,23 +173,24 @@ public class AudioChatAdapterDecorator extends ChatAdapterDecorator {
 					case MessagePlayer.State_DOWNLOADED:
 					case MessagePlayer.State_DECRYPTED:
 						if (holder.seekBar != null) {
+							updateProgressCount(holder, 0);
 							holder.seekBar.setMessageModel(getMessageModel(), helper.getThumbnailCache());
 						}
 						holder.controller.setPlay();
 						break;
 					case MessagePlayer.State_PLAYING:
 						isPlaying = true;
-						changePlayingState(holder, true);
+						logger.debug("playing");
 						// fallthrough
 					case MessagePlayer.State_PAUSE:
-					case MessagePlayer.State_INTERRUPTED_PLAY:
 						if (isPlaying) {
 							holder.controller.setPause();
 						} else {
 							holder.controller.setPlay();
 						}
+						changePlayingState(holder, isPlaying);
 
-						if (holder.seekBar != null) {
+						if (holder.seekBar != null && audioMessagePlayer.getDuration() > 0) {
 							holder.seekBar.setEnabled(true);
 							logger.debug("SeekBar: Duration = " + audioMessagePlayer.getDuration());
 							holder.seekBar.setMax(audioMessagePlayer.getDuration());
@@ -210,22 +198,17 @@ public class AudioChatAdapterDecorator extends ChatAdapterDecorator {
 							updateProgressCount(holder, audioMessagePlayer.getPosition());
 							holder.seekBar.setOnSeekBarChangeListener(new AudioProgressBarView.OnSeekBarChangeListener() {
 								@Override
-								public void onProgressChanged(SeekBar seekBar, int progress, boolean fromUser) {
-									if (fromUser) {
-										audioMessagePlayer.seekTo(progress);
-									}
-								}
+								public void onProgressChanged(SeekBar seekBar, int progress, boolean fromUser) { }
 
 								@Override
-								public void onStartTrackingTouch(SeekBar seekBar) {
-								}
+								public void onStartTrackingTouch(SeekBar seekBar) {}
 
 								@Override
 								public void onStopTrackingTouch(SeekBar seekBar) {
+									audioMessagePlayer.seekTo(seekBar.getProgress());
 								}
 							});
 						}
-
 						break;
 				}
 
@@ -239,7 +222,7 @@ public class AudioChatAdapterDecorator extends ChatAdapterDecorator {
 						}
 
 						@Override
-						public void onEnd(AbstractMessageModel messageModel, boolean success, final String message, File decryptedFile) {
+						public void onEnd(final AbstractMessageModel messageModel, boolean success, final String message, File decryptedFile) {
 							if (!success) {
 								RuntimeUtil.runOnUiThread(() -> {
 									holder.controller.setPlay();
@@ -263,7 +246,7 @@ public class AudioChatAdapterDecorator extends ChatAdapterDecorator {
 						}
 
 						@Override
-						public void onEnd(AbstractMessageModel messageModel, boolean success, final String message) {
+						public void onEnd(final AbstractMessageModel messageModel, boolean success, final String message) {
 							if (!success) {
 								RuntimeUtil.runOnUiThread(() -> {
 									holder.controller.setReadyToDownload();
@@ -278,27 +261,31 @@ public class AudioChatAdapterDecorator extends ChatAdapterDecorator {
 
 					.addListener(LISTENER_TAG, new MessagePlayer.PlaybackListener() {
 						@Override
-						public void onPlay(AbstractMessageModel messageModel, boolean autoPlay) {
+						public void onPlay(final AbstractMessageModel messageModel, boolean autoPlay) {
 							RuntimeUtil.runOnUiThread(() -> {
-								invalidate(holder, position);
-								keepScreenOn();
-								changePlayingState(holder, true);
+								if (holder.position == position && getMessageModel().getId() == messageModel.getId()) {
+									logger.debug("onPlay");
+									invalidate(holder, position);
+									changePlayingState(holder, true);
+								}
 							});
 						}
 
 						@Override
-						public void onPause(AbstractMessageModel messageModel) {
+						public void onPause(final AbstractMessageModel messageModel) {
 							RuntimeUtil.runOnUiThread(() -> {
-								invalidate(holder, position);
-								keepScreenOff();
-								changePlayingState(holder, false);
+								if (holder.position == position && getMessageModel().getId() == messageModel.getId()) {
+									logger.debug("onPause");
+									invalidate(holder, position);
+									changePlayingState(holder, false);
+								}
 							});
 						}
 
 						@Override
-						public void onStatusUpdate(AbstractMessageModel messageModel, final int pos) {
+						public void onStatusUpdate(final AbstractMessageModel messageModel, final int pos) {
 							RuntimeUtil.runOnUiThread(() -> {
-								if (holder.position == position) {
+								if (holder.position == position && getMessageModel().getId() == messageModel.getId()) {
 									if (holder.seekBar != null) {
 										if (holder.seekBar.getMax() != holder.messagePlayer.getDuration()) {
 											logger.info("Audio message player duration changed old={} new={}", holder.seekBar.getMax(), holder.messagePlayer.getDuration());
@@ -309,19 +296,25 @@ public class AudioChatAdapterDecorator extends ChatAdapterDecorator {
 
 									// make sure pinlock is not activated while playing
 									ThreemaApplication.activityUserInteract(helper.getFragment().getActivity());
-									keepScreenOnUpdate();
 								}
 							});
 						}
 
 						@Override
-						public void onStop(AbstractMessageModel messageModel) {
+						public void onStop(final AbstractMessageModel messageModel) {
 							RuntimeUtil.runOnUiThread(() -> {
-								holder.controller.setPlay();
-								updateProgressCount(holder, 0);
-								invalidate(holder, position);
-								keepScreenOff();
-								changePlayingState(holder, false);
+								if (holder.position == position && getMessageModel().getId() == messageModel.getId()) {
+									logger.debug("onStop getMessageModel {} messageModel {} position {}", getMessageModel().getId(), messageModel.getId(), position);
+									invalidate(holder, position);
+									if (messageModel.isAvailable()) {
+										holder.controller.setPlay();
+									} else {
+										holder.controller.setReadyToDownload();
+									}
+									holder.seekBar.setEnabled(false);
+									updateProgressCount(holder, 0);
+									changePlayingState(holder, false);
+								}
 							});
 						}
 					});
@@ -356,10 +349,8 @@ public class AudioChatAdapterDecorator extends ChatAdapterDecorator {
 
 		//do not show duration if 0
 		if(duration > 0) {
-			setDatePrefix(StringConversionUtil.secondsToString(
-					duration,
-					false
-			), holder.dateView.getTextSize());
+			setDatePrefix(StringConversionUtil.secondsToString(duration, false));
+			setDuration(duration);
 			dateContentDescriptionPrefix = getContext().getString(R.string.duration) + ": " + StringConversionUtil.getDurationStringHuman(getContext(), duration);
 		}
 
@@ -381,10 +372,9 @@ public class AudioChatAdapterDecorator extends ChatAdapterDecorator {
 
 	@UiThread
 	private synchronized void changePlayingState(final ComposeMessageHolder holder, boolean isPlaying) {
-		if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {
-			AnimationUtil.setFadingVisibility(holder.readOnButton, isPlaying ? View.VISIBLE : View.GONE);
-			AnimationUtil.setFadingVisibility(holder.messageTypeButton, isPlaying ? View.GONE : View.VISIBLE);
-		}
+		logger.debug("changePlayingState for {} to {}", getMessageModel().getId(), isPlaying);
+		holder.readOnButton.setVisibility(isPlaying ? View.VISIBLE : View.GONE);
+		holder.messageTypeButton.setVisibility(isPlaying ? View.GONE : View.VISIBLE);
 	}
 
 	@SuppressLint("DefaultLocale")
diff --git a/app/src/main/java/ch/threema/app/adapters/decorators/ChatAdapterDecorator.java b/app/src/main/java/ch/threema/app/adapters/decorators/ChatAdapterDecorator.java
index ee83a3e0..223270f7 100644
--- a/app/src/main/java/ch/threema/app/adapters/decorators/ChatAdapterDecorator.java
+++ b/app/src/main/java/ch/threema/app/adapters/decorators/ChatAdapterDecorator.java
@@ -22,21 +22,23 @@
 package ch.threema.app.adapters.decorators;
 
 import android.content.Context;
+import android.content.res.ColorStateList;
 import android.graphics.Bitmap;
-import android.graphics.drawable.Drawable;
+import android.graphics.Color;
 import android.text.Spannable;
-import android.text.SpannableStringBuilder;
 import android.text.TextUtils;
-import android.text.style.ImageSpan;
 import android.view.MotionEvent;
 import android.view.View;
-import android.widget.TextView;
 
+import androidx.annotation.ColorInt;
 import androidx.annotation.DrawableRes;
 import androidx.annotation.NonNull;
 import androidx.annotation.Nullable;
 import androidx.appcompat.content.res.AppCompatResources;
 import androidx.fragment.app.Fragment;
+import androidx.media3.session.MediaController;
+
+import com.google.common.util.concurrent.ListenableFuture;
 
 import org.slf4j.Logger;
 
@@ -98,7 +100,7 @@ abstract public class ChatAdapterDecorator extends AdapterDecorator {
 	private OnLongClickElement onLongClickElement = null;
 	private OnTouchElement onTouchElement = null;
 	protected ActionModeStatus actionModeStatus = null;
-
+	private long durationS = 0;
 	private CharSequence datePrefix = "";
 	protected String dateContentDescriptionPrefix = "";
 
@@ -133,9 +135,9 @@ abstract public class ChatAdapterDecorator extends AdapterDecorator {
 		private final Fragment fragment;
 		protected int regularColor;
 		private final Map<String, ContactCache> contacts = new HashMap<>();
-		private final Drawable stopwatchIcon;
 		private final int maxBubbleTextLength;
 		private final int maxQuoteTextLength;
+		private final ListenableFuture<MediaController> mediaControllerFuture;
 
 		public Helper(
 			String myIdentity,
@@ -153,9 +155,9 @@ abstract public class ChatAdapterDecorator extends AdapterDecorator {
 			int thumbnailWidth,
 			Fragment fragment,
 			int regularColor,
-			Drawable stopwatchIcon,
 			int maxBubbleTextLength,
-			int maxQuoteTextLength) {
+			int maxQuoteTextLength,
+			ListenableFuture<MediaController> mediaControllerFuture) {
 			this.myIdentity = myIdentity;
 			this.messageService = messageService;
 			this.userService = userService;
@@ -171,9 +173,9 @@ abstract public class ChatAdapterDecorator extends AdapterDecorator {
 			this.thumbnailWidth = thumbnailWidth;
 			this.fragment = fragment;
 			this.regularColor = regularColor;
-			this.stopwatchIcon = stopwatchIcon;
 			this.maxBubbleTextLength = maxBubbleTextLength;
 			this.maxQuoteTextLength = maxQuoteTextLength;
+			this.mediaControllerFuture = mediaControllerFuture;
 		}
 
 		public Fragment getFragment() {
@@ -240,10 +242,6 @@ abstract public class ChatAdapterDecorator extends AdapterDecorator {
 			thumbnailWidth = preferredThumbnailWidth;
 		}
 
-		public Drawable getStopwatchIcon() {
-			return stopwatchIcon;
-		}
-
 		public int getMaxBubbleTextLength() {
 			return maxBubbleTextLength;
 		}
@@ -255,6 +253,10 @@ abstract public class ChatAdapterDecorator extends AdapterDecorator {
 		public void setMessageReceiver(MessageReceiver messageReceiver) {
 			this.messageReceiver = messageReceiver;
 		}
+
+		public ListenableFuture<MediaController> getMediaControllerFuture() {
+			return this.mediaControllerFuture;
+		}
 	}
 
 	public ChatAdapterDecorator(Context context,
@@ -372,9 +374,7 @@ abstract public class ChatAdapterDecorator extends AdapterDecorator {
 			CharSequence contentDescription;
 
 			if (!TestUtil.empty(datePrefix)) {
-				contentDescription = dateContentDescriptionPrefix + ". "
-						+ getContext().getString(R.string.state_dialog_modified) + ": "
-						+ s;
+				contentDescription = getContext().getString(R.string.state_dialog_modified) + ": " + s;
 				if (messageModel.isOutbox()) {
 					s = TextUtils.concat(datePrefix, " | " + s);
 				} else {
@@ -384,11 +384,15 @@ abstract public class ChatAdapterDecorator extends AdapterDecorator {
 				contentDescription = s;
 			}
 			if (holder.dateView != null) {
-				holder.dateView.setText(s, TextView.BufferType.SPANNABLE);
+				holder.dateView.setText(s);
 				holder.dateView.setContentDescription(contentDescription);
 			}
 
-			stateBitmapUtil.setStateDrawable(messageModel, holder.deliveredIndicator, true);
+			if (holder.datePrefixIcon != null) {
+				holder.datePrefixIcon.setVisibility(durationS > 0L ? View.VISIBLE : View.GONE);
+			}
+
+			stateBitmapUtil.setStateDrawable(getContext(), messageModel, holder.deliveredIndicator, true);
 			stateBitmapUtil.setGroupAckCount(messageModel, holder);
 		}
 	}
@@ -414,19 +418,12 @@ abstract public class ChatAdapterDecorator extends AdapterDecorator {
 
 	abstract protected void configureChatMessage(final ComposeMessageHolder holder, final int position);
 
-	protected void setDatePrefix(String prefix, float textSize) {
-		if (!TestUtil.empty(prefix) && textSize > 0) {
-			Drawable icon = helper.getStopwatchIcon();
-			icon.setBounds(0, 0, (int) (textSize * 0.8), (int) (textSize * 0.8));
-
-			SpannableStringBuilder spannableString = new SpannableStringBuilder("  " + prefix);
-			spannableString.setSpan(new ImageSpan(icon, ImageSpan.ALIGN_BASELINE),
-				0, 1, Spannable.SPAN_EXCLUSIVE_EXCLUSIVE);
+	protected void setDatePrefix(String prefix) {
+		datePrefix = prefix;
+	}
 
-			datePrefix = spannableString;
-		} else {
-			datePrefix = prefix;
-		}
+	protected void setDuration(long durationS) {
+		this.durationS = durationS;
 	}
 
 	protected MessageService getMessageService() {
@@ -499,18 +496,22 @@ abstract public class ChatAdapterDecorator extends AdapterDecorator {
 		}
 	}
 
+	void setStickerBackground(ComposeMessageHolder holder) {
+		holder.messageBlockView.setCardBackgroundColor(AppCompatResources.getColorStateList(getContext(), R.color.bubble_sticker_colorstatelist));
+	}
+
 	void setDefaultBackground(ComposeMessageHolder holder) {
-		if (holder.messageBlockView.getBackground() == null) {
-			@DrawableRes int drawableRes;
+		if (holder.messageBlockView.getCardBackgroundColor().getDefaultColor() == Color.TRANSPARENT) {
+			int colorStateListRes;
 
 			if (getMessageModel().isOutbox() && !(getMessageModel() instanceof DistributionListMessageModel)) {
 				// outgoing
-				drawableRes = R.drawable.bubble_send_selector;
+				colorStateListRes = R.color.bubble_send_colorstatelist;
 			} else {
 				// incoming
-				drawableRes = R.drawable.bubble_recv_selector;
+				colorStateListRes = R.color.bubble_receive_colorstatelist;
 			}
-			holder.messageBlockView.setBackground(AppCompatResources.getDrawable(getContext(), drawableRes));
+			holder.messageBlockView.setCardBackgroundColor(AppCompatResources.getColorStateList(getContext(), colorStateListRes));
 
 			logger.debug("*** setDefaultBackground");
 		}
@@ -560,4 +561,19 @@ abstract public class ChatAdapterDecorator extends AdapterDecorator {
 			showHide(holder.bodyTextView, false);
 		}
 	}
+
+	protected void propagateControllerRetryClickToParent() {
+		if (
+			getMessageModel().getState() == MessageState.FS_KEY_MISMATCH ||
+				getMessageModel().getState() == MessageState.SENDFAILED
+		) {
+			propagateControllerClickToParent();
+		}
+	}
+
+	protected void propagateControllerClickToParent() {
+		if (onClickElement != null) {
+			onClickElement.onClick(getMessageModel());
+		}
+	}
 }
diff --git a/app/src/main/java/ch/threema/app/adapters/decorators/FileChatAdapterDecorator.java b/app/src/main/java/ch/threema/app/adapters/decorators/FileChatAdapterDecorator.java
index 60dbed55..b6ada71b 100644
--- a/app/src/main/java/ch/threema/app/adapters/decorators/FileChatAdapterDecorator.java
+++ b/app/src/main/java/ch/threema/app/adapters/decorators/FileChatAdapterDecorator.java
@@ -44,6 +44,7 @@ import ch.threema.app.ui.DebouncedOnClickListener;
 import ch.threema.app.ui.listitemholder.ComposeMessageHolder;
 import ch.threema.app.utils.AvatarConverterUtil;
 import ch.threema.app.utils.FileUtil;
+import ch.threema.app.utils.IconUtil;
 import ch.threema.app.utils.ImageViewUtil;
 import ch.threema.app.utils.MimeUtil;
 import ch.threema.app.utils.RuntimeUtil;
@@ -69,7 +70,7 @@ public class FileChatAdapterDecorator extends ChatAdapterDecorator {
 
 	@Override
 	protected void configureChatMessage(final ComposeMessageHolder holder, final int position) {
-		fileMessagePlayer = (FileMessagePlayer) getMessagePlayerService().createPlayer(getMessageModel(), (Activity) context, helper.getMessageReceiver());
+		fileMessagePlayer = (FileMessagePlayer) getMessagePlayerService().createPlayer(getMessageModel(), (Activity) context, helper.getMessageReceiver(), null);
 
 		holder.messagePlayer = fileMessagePlayer;
 
@@ -105,8 +106,8 @@ public class FileChatAdapterDecorator extends ChatAdapterDecorator {
 			setDatePrefix(
 				FileUtil.getFileMessageDatePrefix(getContext(),
 				getMessageModel(),
-				FileUtil.isImageFile(fileData) ? getContext().getString(R.string.image_placeholder) : null),
-				0);
+				FileUtil.isImageFile(fileData) ? getContext().getString(R.string.image_placeholder) : null)
+			);
 		}
 	}
 
@@ -223,6 +224,9 @@ public class FileChatAdapterDecorator extends ChatAdapterDecorator {
 					int status = holder.controller.getStatus();
 
 					switch (status) {
+						case ControllerView.STATUS_READY_TO_RETRY:
+							propagateControllerRetryClickToParent();
+							break;
 						case ControllerView.STATUS_READY_TO_PLAY:
 						case ControllerView.STATUS_READY_TO_DOWNLOAD:
 						case ControllerView.STATUS_NONE:
@@ -295,28 +299,19 @@ public class FileChatAdapterDecorator extends ChatAdapterDecorator {
 			}
 
 			if (fileData.getRenderingType() == FileData.RENDERING_STICKER) {
-				holder.messageBlockView.setBackground(null);
+				setStickerBackground(holder);
 			} else {
 				setDefaultBackground(holder);
 			}
 		} else {
-			if (thumbnail == null) {
-				try {
-					thumbnail = getFileService().getDefaultMessageThumbnailBitmap(context, getMessageModel(), null, fileData.getMimeType(), false);
-					if (thumbnail != null) {
-						thumbnail = AvatarConverterUtil.convert(getContext().getResources(), thumbnail, getContext().getResources().getColor(R.color.item_controller_color), Color.WHITE);
-					}
-				} catch (Exception e) {
-					//
-				}
-			} else {
-				thumbnail = AvatarConverterUtil.convert(getContext().getResources(), thumbnail);
-			}
-
 			if (thumbnail != null) {
 				if (holder.controller != null) {
 					holder.controller.setBackgroundImage(thumbnail);
 				}
+			} else {
+				if (holder.controller != null) {
+					holder.controller.setImageResource(IconUtil.getMimeIcon(fileData.getMimeType()));
+				}
 			}
 
 			if (holder.attachmentImage != null) {
diff --git a/app/src/main/java/ch/threema/app/adapters/decorators/ForwardSecurityStatusChatAdapterDecorator.kt b/app/src/main/java/ch/threema/app/adapters/decorators/ForwardSecurityStatusChatAdapterDecorator.kt
index a718f644..a7e38c5d 100644
--- a/app/src/main/java/ch/threema/app/adapters/decorators/ForwardSecurityStatusChatAdapterDecorator.kt
+++ b/app/src/main/java/ch/threema/app/adapters/decorators/ForwardSecurityStatusChatAdapterDecorator.kt
@@ -42,6 +42,7 @@ class ForwardSecurityStatusChatAdapterDecorator(context: Context?, messageModel:
             ForwardSecurityStatusType.FORWARD_SECURITY_MESSAGE_OUT_OF_ORDER -> body = context.getString(R.string.forward_security_message_out_of_order)
             ForwardSecurityStatusType.FORWARD_SECURITY_MESSAGES_SKIPPED -> body = ConfigUtils.getSafeQuantityString(context, R.plurals.forward_security_messages_skipped, statusDataModel.quantity, statusDataModel.quantity)
             ForwardSecurityStatusType.FORWARD_SECURITY_UNAVAILABLE_DOWNGRADE -> body = context.getString(R.string.forward_security_downgraded_status_message)
+            ForwardSecurityStatusType.FORWARD_SECURITY_ILLEGAL_SESSION_STATE -> body = context.getString(R.string.forward_security_illegal_session_status_message)
         }
         if (showHide(holder.bodyTextView, !TestUtil.empty(body))) {
             holder.bodyTextView.text = body
diff --git a/app/src/main/java/ch/threema/app/adapters/decorators/ImageChatAdapterDecorator.java b/app/src/main/java/ch/threema/app/adapters/decorators/ImageChatAdapterDecorator.java
index 169ce1aa..0eb51816 100644
--- a/app/src/main/java/ch/threema/app/adapters/decorators/ImageChatAdapterDecorator.java
+++ b/app/src/main/java/ch/threema/app/adapters/decorators/ImageChatAdapterDecorator.java
@@ -39,7 +39,6 @@ import ch.threema.app.services.messageplayer.MessagePlayer;
 import ch.threema.app.ui.ControllerView;
 import ch.threema.app.ui.DebouncedOnClickListener;
 import ch.threema.app.ui.listitemholder.ComposeMessageHolder;
-import ch.threema.app.utils.AnimationUtil;
 import ch.threema.app.utils.ImageViewUtil;
 import ch.threema.app.utils.IntentDataUtil;
 import ch.threema.app.utils.RuntimeUtil;
@@ -62,7 +61,7 @@ public class ImageChatAdapterDecorator extends ChatAdapterDecorator {
 	@Override
 	protected void configureChatMessage(final ComposeMessageHolder holder, final int position) {
 		final MessagePlayer imageMessagePlayer = getMessagePlayerService().createPlayer(getMessageModel(),
-				(Activity) getContext(), helper.getMessageReceiver());
+				(Activity) getContext(), helper.getMessageReceiver(), null);
 		logger.debug("configureChatMessage Image");
 
 		holder.messagePlayer = imageMessagePlayer;
@@ -132,6 +131,9 @@ public class ImageChatAdapterDecorator extends ChatAdapterDecorator {
 					int status = holder.controller.getStatus();
 
 					switch (status) {
+						case ControllerView.STATUS_READY_TO_RETRY:
+							propagateControllerRetryClickToParent();
+							break;
 						case ControllerView.STATUS_PROGRESSING:
 							if (getMessageModel().isOutbox() && (getMessageModel().getState() == MessageState.PENDING || getMessageModel().getState() == MessageState.SENDING)) {
 								getMessageService().cancelMessageUpload(getMessageModel());
@@ -139,9 +141,6 @@ public class ImageChatAdapterDecorator extends ChatAdapterDecorator {
 								imageMessagePlayer.cancel();
 							}
 							break;
-						case ControllerView.STATUS_READY_TO_RETRY:
-							// ignore (retries will be handled by click listener for messageView)
-							break;
 						case ControllerView.STATUS_READY_TO_DOWNLOAD:
 							imageMessagePlayer.open();
 							break;
@@ -184,7 +183,7 @@ public class ImageChatAdapterDecorator extends ChatAdapterDecorator {
 			Intent intent = new Intent(getContext(), MediaViewerActivity.class);
 			IntentDataUtil.append(m, intent);
 			intent.putExtra(MediaViewerActivity.EXTRA_ID_REVERSE_ORDER, true);
-			AnimationUtil.startActivityForResult((Activity) getContext(), v, intent, ThreemaActivity.ACTIVITY_ID_MEDIA_VIEWER);
+			((Activity) getContext()).startActivityForResult(intent, ThreemaActivity.ACTIVITY_ID_MEDIA_VIEWER);
 		}
 	}
 
diff --git a/app/src/main/java/ch/threema/app/adapters/decorators/TextChatAdapterDecorator.java b/app/src/main/java/ch/threema/app/adapters/decorators/TextChatAdapterDecorator.java
index d2da5d90..2cc25b43 100644
--- a/app/src/main/java/ch/threema/app/adapters/decorators/TextChatAdapterDecorator.java
+++ b/app/src/main/java/ch/threema/app/adapters/decorators/TextChatAdapterDecorator.java
@@ -26,6 +26,7 @@ import android.content.Context;
 import android.content.Intent;
 import android.text.method.LinkMovementMethod;
 import android.view.View;
+import android.widget.TextView;
 
 import androidx.annotation.Nullable;
 
@@ -40,6 +41,7 @@ import ch.threema.app.utils.LinkifyUtil;
 import ch.threema.app.utils.NameUtil;
 import ch.threema.app.utils.QuoteUtil;
 import ch.threema.app.utils.RuntimeUtil;
+import ch.threema.app.utils.TestUtil;
 import ch.threema.storage.models.AbstractMessageModel;
 import ch.threema.storage.models.ContactModel;
 import ch.threema.storage.models.GroupMessageModel;
@@ -110,7 +112,7 @@ public class TextChatAdapterDecorator extends ChatAdapterDecorator {
 	private QuoteUtil.QuoteContent configureQuote(final ComposeMessageHolder holder, final AbstractMessageModel messageModel) {
 		QuoteUtil.QuoteContent content = QuoteUtil.getQuoteContent(
 			messageModel,
-			this.helper.getMessageReceiver().getType(),
+			this.helper.getMessageReceiver(),
 			false,
 			this.helper.getThumbnailCache(),
 			this.getContext(),
@@ -121,9 +123,13 @@ public class TextChatAdapterDecorator extends ChatAdapterDecorator {
 
 		if (content != null) {
 			if (holder.secondaryTextView instanceof EmojiConversationTextView) {
-				holder.secondaryTextView.setText(formatTextString(content.quotedText, this.filterString, helper.getMaxQuoteTextLength() + 8));
 				((EmojiConversationTextView) holder.secondaryTextView).setFade(
-					content.quotedText != null && content.quotedText.length() > helper.getMaxQuoteTextLength());
+						TestUtil.empty(filterString) &&
+						content.quotedText != null &&
+						content.quotedText.length() > helper.getMaxQuoteTextLength());
+				holder.secondaryTextView.setText(
+					formatTextString(content.quotedText, this.filterString, helper.getMaxQuoteTextLength() + 8),
+					TextView.BufferType.SPANNABLE);
 			}
 
 			ContactModel contactModel = this.helper.getContactService().getByIdentity(content.identity);
diff --git a/app/src/main/java/ch/threema/app/adapters/decorators/VideoChatAdapterDecorator.java b/app/src/main/java/ch/threema/app/adapters/decorators/VideoChatAdapterDecorator.java
index c6f9d277..e9374d6d 100644
--- a/app/src/main/java/ch/threema/app/adapters/decorators/VideoChatAdapterDecorator.java
+++ b/app/src/main/java/ch/threema/app/adapters/decorators/VideoChatAdapterDecorator.java
@@ -62,7 +62,7 @@ public class VideoChatAdapterDecorator extends ChatAdapterDecorator {
 	@Override
 	protected void configureChatMessage(final ComposeMessageHolder holder, final int position) {
 		final MessagePlayer videoMessagePlayer = getMessagePlayerService().createPlayer(getMessageModel(),
-			(Activity) getContext(), helper.getMessageReceiver());
+			(Activity) getContext(), helper.getMessageReceiver(), null);
 
 		logger.debug("configureChatMessage Video on position {} instance {} holder {} messageplayer = {}", position, this, holder, videoMessagePlayer);
 
@@ -107,6 +107,7 @@ public class VideoChatAdapterDecorator extends ChatAdapterDecorator {
 		if (duration > 0) {
 			datePrefixString = StringConversionUtil.secondsToString(duration, false);
 			dateContentDescriptionPrefix = getContext().getString(R.string.duration) + ": " + StringConversionUtil.getDurationStringHuman(getContext(), duration);
+			setDuration(duration);
 		}
 
 		if (size > 0) {
@@ -114,33 +115,41 @@ public class VideoChatAdapterDecorator extends ChatAdapterDecorator {
 			dateContentDescriptionPrefix = getContext().getString(R.string.file_size) + ": " + Formatter.formatShortFileSize(getContext(), size);
 		}
 
-		setDatePrefix(datePrefixString, holder.dateView.getTextSize());
+		setDatePrefix(datePrefixString);
 
 		setDefaultBackground(holder);
 	}
 
 	private void configureForMessageTypeFile(@NonNull ComposeMessageHolder holder) {
-		String datePrefixString = getMessageModel().getFileData().getDurationString();
+		String datePrefixString = "";
 		long duration = getMessageModel().getFileData().getDurationSeconds();
 
 		if (!getMessageModel().getFileData().isDownloaded()) {
 			long size = getMessageModel().getFileData().getFileSize();
 			if (size > 0) {
-				if (duration > 0) {
-					datePrefixString += " (" + Formatter.formatShortFileSize(getContext(), size) + ")";
-				} else {
-					datePrefixString = Formatter.formatShortFileSize(getContext(), size);
-				}
+				datePrefixString = Formatter.formatShortFileSize(getContext(), size);
 				dateContentDescriptionPrefix = getContext().getString(R.string.file_size) + ": " + Formatter.formatShortFileSize(getContext(), size);
 			}
+
+			if (duration > 0) {
+				if (size > 0) {
+					datePrefixString = datePrefixString + " | ";
+				}
+				datePrefixString = datePrefixString + getMessageModel().getFileData().getDurationString();
+			}
 		} else {
-			dateContentDescriptionPrefix = getContext().getString(R.string.duration) + ": " + StringConversionUtil.getDurationStringHuman(getContext(), duration);
+			if (duration > 0) {
+				datePrefixString = datePrefixString + getMessageModel().getFileData().getDurationString();
+				dateContentDescriptionPrefix = getContext().getString(R.string.duration) + ": " + StringConversionUtil.getDurationStringHuman(getContext(), duration);
+			}
 		}
 
-		if (holder.dateView != null) {
-			setDatePrefix(datePrefixString, 0);
+		if (duration > 0) {
+			setDuration(duration);
 		}
 
+		setDatePrefix(datePrefixString);
+
 		configureBodyText(holder, getMessageModel().getFileData().getCaption());
 
 		configureBackground(holder);
@@ -148,7 +157,7 @@ public class VideoChatAdapterDecorator extends ChatAdapterDecorator {
 
 	private void configureBackground(@NonNull ComposeMessageHolder holder) {
 		if (getMessageModel().getFileData().getRenderingType() == FileData.RENDERING_STICKER) {
-			holder.messageBlockView.setBackground(null);
+			setStickerBackground(holder);
 		} else {
 			setDefaultBackground(holder);
 		}
@@ -223,11 +232,19 @@ public class VideoChatAdapterDecorator extends ChatAdapterDecorator {
 		holder.controller.setOnClickListener(new DebouncedOnClickListener(500) {
 			@Override
 			public void onDebouncedClick(View v) {
+				if (actionModeStatus.getActionModeEnabled()) {
+					propagateControllerClickToParent();
+					return;
+				}
+
 				int status = holder.controller.getStatus();
 
 				logger.debug("onClick status = {}", status);
 
 				switch (status) {
+					case ControllerView.STATUS_READY_TO_RETRY:
+						propagateControllerRetryClickToParent();
+						break;
 					case ControllerView.STATUS_READY_TO_PLAY:
 					case ControllerView.STATUS_READY_TO_DOWNLOAD:
 						videoMessagePlayer.open();
diff --git a/app/src/main/java/ch/threema/app/adapters/decorators/VoipStatusDataChatAdapterDecorator.java b/app/src/main/java/ch/threema/app/adapters/decorators/VoipStatusDataChatAdapterDecorator.java
index 6decf9ec..3fe5585d 100644
--- a/app/src/main/java/ch/threema/app/adapters/decorators/VoipStatusDataChatAdapterDecorator.java
+++ b/app/src/main/java/ch/threema/app/adapters/decorators/VoipStatusDataChatAdapterDecorator.java
@@ -67,7 +67,8 @@ public class VoipStatusDataChatAdapterDecorator extends ChatAdapterDecorator {
 						this.setDatePrefix(StringConversionUtil.secondsToString(
 							status.getDuration(),
 							false
-						), holder.dateView.getTextSize());
+						));
+						this.setDuration(status.getDuration());
 					}
 				}
 
diff --git a/app/src/main/java/ch/threema/app/archive/ArchiveActivity.java b/app/src/main/java/ch/threema/app/archive/ArchiveActivity.java
index 556bafa5..1b96a85d 100644
--- a/app/src/main/java/ch/threema/app/archive/ArchiveActivity.java
+++ b/app/src/main/java/ch/threema/app/archive/ArchiveActivity.java
@@ -21,6 +21,9 @@
 
 package ch.threema.app.archive;
 
+import static ch.threema.app.managers.ListenerManager.conversationListeners;
+import static ch.threema.app.managers.ListenerManager.messageListeners;
+
 import android.annotation.SuppressLint;
 import android.content.Intent;
 import android.content.res.Configuration;
@@ -57,7 +60,6 @@ import ch.threema.app.services.GroupService;
 import ch.threema.app.ui.EmptyRecyclerView;
 import ch.threema.app.ui.EmptyView;
 import ch.threema.app.ui.ThreemaSearchView;
-import ch.threema.app.utils.AnimationUtil;
 import ch.threema.app.utils.ConfigUtils;
 import ch.threema.app.utils.IntentDataUtil;
 import ch.threema.app.utils.TestUtil;
@@ -66,9 +68,6 @@ import ch.threema.base.utils.LoggingUtil;
 import ch.threema.storage.models.AbstractMessageModel;
 import ch.threema.storage.models.ConversationModel;
 
-import static ch.threema.app.managers.ListenerManager.conversationListeners;
-import static ch.threema.app.managers.ListenerManager.messageListeners;
-
 public class ArchiveActivity extends ThreemaToolbarActivity implements GenericAlertDialog.DialogClickListener, SearchView.OnQueryTextListener {
 	private static final Logger logger = LoggingUtil.getThreemaLogger("ArchiveActivity");
 	private static final String DIALOG_TAG_REALLY_DELETE_CHATS = "delc";
@@ -202,16 +201,6 @@ public class ArchiveActivity extends ThreemaToolbarActivity implements GenericAl
 		return true;
 	}
 
-	@Override
-	public boolean onOptionsItemSelected(MenuItem item) {
-		switch (item.getItemId()) {
-			case android.R.id.home:
-				this.finish();
-				return true;
-		}
-		return super.onOptionsItemSelected(item);
-	}
-
 	@Override
 	public boolean onQueryTextSubmit(String query) {
 		return false;
@@ -228,8 +217,6 @@ public class ArchiveActivity extends ThreemaToolbarActivity implements GenericAl
 		public boolean onCreateActionMode(ActionMode mode, Menu menu) {
 			mode.getMenuInflater().inflate(R.menu.action_archive, menu);
 
-			ConfigUtils.themeMenu(menu, ConfigUtils.getColorFromAttribute(ArchiveActivity.this, R.attr.colorAccent));
-
 			return true;
 		}
 
@@ -245,23 +232,22 @@ public class ArchiveActivity extends ThreemaToolbarActivity implements GenericAl
 
 		@Override
 		public boolean onActionItemClicked(ActionMode mode, MenuItem item) {
-			switch (item.getItemId()) {
-				case R.id.menu_delete:
-					delete(archiveAdapter.getCheckedItems());
-					return true;
-				case R.id.menu_unarchive:
-					unarchive(archiveAdapter.getCheckedItems());
-					return true;
-				case R.id.menu_select_all:
-					archiveAdapter.selectAll();
-					if (archiveAdapter.getCheckedItemsCount() > 0) {
-						actionMode.invalidate();
-					} else {
-						actionMode.finish();
-					}
-					return true;
-				default:
-					return false;
+			if (item.getItemId() == R.id.menu_delete) {
+				delete(archiveAdapter.getCheckedItems());
+				return true;
+			} else if (item.getItemId() == R.id.menu_unarchive) {
+				unarchive(archiveAdapter.getCheckedItems());
+				return true;
+			} else if (item.getItemId() == R.id.menu_select_all) {
+				archiveAdapter.selectAll();
+				if (archiveAdapter.getCheckedItemsCount() > 0) {
+					actionMode.invalidate();
+				} else {
+					actionMode.finish();
+				}
+				return true;
+			} else {
+				return false;
 			}
 		}
 
@@ -287,7 +273,7 @@ public class ArchiveActivity extends ThreemaToolbarActivity implements GenericAl
 		if (intent == null) {
 			return;
 		}
-		AnimationUtil.startActivityForResult(this, ConfigUtils.isTabletLayout() ? null : v, intent, ThreemaActivity.ACTIVITY_ID_COMPOSE_MESSAGE);
+		startActivityForResult(intent, ThreemaActivity.ACTIVITY_ID_COMPOSE_MESSAGE);
 	}
 
 	private void unarchive(List<ConversationModel> checkedItems) {
@@ -346,11 +332,6 @@ public class ArchiveActivity extends ThreemaToolbarActivity implements GenericAl
 		reallyDelete((List<ConversationModel>)data);
 	}
 
-	@Override
-	public void onNo(String tag, Object data) {
-
-	}
-
 	private final ConversationListener conversationListener = new ConversationListener() {
 		@Override
 		public void onNew(final ConversationModel conversationModel) {
@@ -414,6 +395,11 @@ public class ArchiveActivity extends ThreemaToolbarActivity implements GenericAl
 
 		@Override
 		public void onProgressChanged(AbstractMessageModel messageModel, int newProgress) {}
+
+		@Override
+		public void onResendDismissed(@NonNull AbstractMessageModel messageModel) {
+			// Ignore
+		}
 	};
 
 	@Override
diff --git a/app/src/main/java/ch/threema/app/archive/ArchiveAdapter.java b/app/src/main/java/ch/threema/app/archive/ArchiveAdapter.java
index 6bb4d956..deeda5d9 100644
--- a/app/src/main/java/ch/threema/app/archive/ArchiveAdapter.java
+++ b/app/src/main/java/ch/threema/app/archive/ArchiveAdapter.java
@@ -30,13 +30,14 @@ import android.view.ViewGroup;
 import android.widget.ImageView;
 import android.widget.TextView;
 
+import androidx.annotation.NonNull;
+import androidx.recyclerview.widget.RecyclerView;
+
 import org.slf4j.Logger;
 
 import java.util.ArrayList;
 import java.util.List;
 
-import androidx.annotation.NonNull;
-import androidx.recyclerview.widget.RecyclerView;
 import ch.threema.app.R;
 import ch.threema.app.ThreemaApplication;
 import ch.threema.app.emojis.EmojiMarkupUtil;
@@ -227,7 +228,12 @@ public class ArchiveAdapter extends RecyclerView.Adapter<ArchiveAdapter.ArchiveV
 
 			if (this.onClickItemListener != null) {
 				holder.itemView.setOnClickListener(v -> onClickItemListener.onClick(conversationModel, holder.itemView, position));
-				holder.itemView.setOnLongClickListener(v -> onClickItemListener.onLongClick(conversationModel, holder.itemView, position));
+				holder.itemView.setOnLongClickListener(new View.OnLongClickListener() {
+					@Override
+					public boolean onLongClick(View v) {
+						return onClickItemListener.onLongClick(conversationModel, holder.itemView, position);
+					}
+				});
 			}
 		} else {
 			// Covers the case of data not being ready yet.
diff --git a/app/src/main/java/ch/threema/app/asynctasks/DeleteIdentityAsyncTask.java b/app/src/main/java/ch/threema/app/asynctasks/DeleteIdentityAsyncTask.java
index 15bc9303..4d1b814a 100644
--- a/app/src/main/java/ch/threema/app/asynctasks/DeleteIdentityAsyncTask.java
+++ b/app/src/main/java/ch/threema/app/asynctasks/DeleteIdentityAsyncTask.java
@@ -44,7 +44,7 @@ import ch.threema.app.webclient.services.SessionWakeUpServiceImpl;
 import ch.threema.app.webclient.services.instance.DisconnectContext;
 import ch.threema.base.utils.LoggingUtil;
 import ch.threema.storage.DatabaseServiceNew;
-import ch.threema.storage.NonceDatabaseBlobService;
+import ch.threema.storage.DatabaseNonceStore;
 
 public class DeleteIdentityAsyncTask extends AsyncTask<Void, Void, Exception> {
 	private static final Logger logger = LoggingUtil.getThreemaLogger("DeleteIdentityAsyncTask");
@@ -76,7 +76,7 @@ public class DeleteIdentityAsyncTask extends AsyncTask<Void, Void, Exception> {
 			// clear push token
 			PushService.deleteToken(ThreemaApplication.getAppContext());
 
-			serviceManager.getThreemaSafeService().unscheduleUpload();
+			serviceManager.getThreemaSafeService().unschedulePeriodicUpload();
 			serviceManager.getMessageService().removeAll();
 			serviceManager.getConversationService().reset();
 			serviceManager.getGroupService().removeAll();
@@ -115,7 +115,7 @@ public class DeleteIdentityAsyncTask extends AsyncTask<Void, Void, Exception> {
 
 			File aesFile = new File(ThreemaApplication.getAppContext().getFilesDir(), ThreemaApplication.AES_KEY_FILE);
 			File databaseFile = ThreemaApplication.getAppContext().getDatabasePath(DatabaseServiceNew.DATABASE_NAME_V4);
-			File nonceDatabaseFile = ThreemaApplication.getAppContext().getDatabasePath(NonceDatabaseBlobService.DATABASE_NAME_V4);
+			File nonceDatabaseFile = ThreemaApplication.getAppContext().getDatabasePath(DatabaseNonceStore.DATABASE_NAME_V4);
 			File backupFile = ThreemaApplication.getAppContext().getDatabasePath(DatabaseServiceNew.DATABASE_NAME_V4 + DatabaseServiceNew.DATABASE_BACKUP_EXT);
 			File cacheDirectory = ThreemaApplication.getAppContext().getCacheDir();
 			File externalCacheDirectory = ThreemaApplication.getAppContext().getExternalCacheDir();
diff --git a/app/src/main/java/ch/threema/app/asynctasks/EmptyChatAsyncTask.java b/app/src/main/java/ch/threema/app/asynctasks/EmptyChatAsyncTask.java
index 48d5c707..ac35d93f 100644
--- a/app/src/main/java/ch/threema/app/asynctasks/EmptyChatAsyncTask.java
+++ b/app/src/main/java/ch/threema/app/asynctasks/EmptyChatAsyncTask.java
@@ -21,17 +21,17 @@
 
 package ch.threema.app.asynctasks;
 
+import android.database.sqlite.SQLiteException;
 import android.os.AsyncTask;
 
-import net.sqlcipher.database.SQLiteException;
+import androidx.annotation.Nullable;
+import androidx.fragment.app.FragmentManager;
 
 import org.slf4j.Logger;
 
 import java.util.ArrayList;
 import java.util.List;
 
-import androidx.annotation.Nullable;
-import androidx.fragment.app.FragmentManager;
 import ch.threema.app.R;
 import ch.threema.app.dialogs.CancelableHorizontalProgressDialog;
 import ch.threema.app.managers.ListenerManager;
diff --git a/app/src/main/java/ch/threema/app/backuprestore/BackupRestoreDataConfig.java b/app/src/main/java/ch/threema/app/backuprestore/BackupRestoreDataConfig.java
index 8bbf862b..2f27a5b0 100644
--- a/app/src/main/java/ch/threema/app/backuprestore/BackupRestoreDataConfig.java
+++ b/app/src/main/java/ch/threema/app/backuprestore/BackupRestoreDataConfig.java
@@ -25,12 +25,13 @@ import java.io.Serializable;
 
 public class BackupRestoreDataConfig implements Serializable {
 	private final String password;
-	private Boolean backupIdentity = true;
-	private Boolean backupContactAndMessages = true;
-	private Boolean backupMedia = true;
-	private Boolean backupAvatars = true;
-	private Boolean backupThumbnails = false;
-	private Boolean backupVideoAndFiles = false;
+	private boolean backupIdentity = true;
+	private boolean backupContactAndMessages = true;
+	private boolean backupMedia = true;
+	private boolean backupAvatars = true;
+	private boolean backupThumbnails = false;
+	private boolean backupVideoAndFiles = false;
+	private boolean backupNonces = true;
 
 	public BackupRestoreDataConfig(String password) {
 		this.password = password;
@@ -40,69 +41,78 @@ public class BackupRestoreDataConfig implements Serializable {
 		return this.password;
 	}
 
-	public Boolean backupIdentity() {
+	public boolean backupIdentity() {
 		return backupIdentity;
 	}
 
-	public BackupRestoreDataConfig setBackupIdentity(Boolean backupIdentity) {
+	public BackupRestoreDataConfig setBackupIdentity(boolean backupIdentity) {
 		this.backupIdentity = backupIdentity;
 		return this;
 	}
 
-	public Boolean backupContactAndMessages() {
+	public boolean backupContactAndMessages() {
 		return this.backupContactAndMessages;
 	}
 
-	public Boolean backupGroupsAndMessages() {
+	public boolean backupGroupsAndMessages() {
 		 return this.backupContactAndMessages();
 	}
 
-	public Boolean backupDistributionLists() {
+	public boolean backupDistributionLists() {
 		return this.backupContactAndMessages();
 	}
 
-	public Boolean backupBallots() {
+	public boolean backupBallots() {
 		return  this.backupContactAndMessages();
 	}
 
-	public BackupRestoreDataConfig setBackupContactAndMessages(Boolean backupContactAndMessages) {
+	public BackupRestoreDataConfig setBackupContactAndMessages(boolean backupContactAndMessages) {
 		this.backupContactAndMessages = backupContactAndMessages;
 		return this;
 	}
 
-	public Boolean backupMedia() {
+	public boolean backupMedia() {
 		return this.backupMedia;
 	}
 
-	public Boolean backupVideoAndFiles() {
+	public boolean backupVideoAndFiles() {
 		return this.backupVideoAndFiles;
 	}
 
-	public Boolean backupThumbnails() {
+	public boolean backupThumbnails() {
 		return this.backupThumbnails;
 	}
 
-	public Boolean backupAvatars() {
+	public boolean backupAvatars() {
 		return this.backupAvatars;
 	}
 
-	public BackupRestoreDataConfig setBackupMedia(Boolean backupMedia) {
+	public boolean backupNonces() {
+		return this.backupNonces;
+	}
+
+	public BackupRestoreDataConfig setBackupMedia(boolean backupMedia) {
 		this.backupMedia = backupMedia;
 		return this;
 	}
 
-	public BackupRestoreDataConfig setBackupVideoAndFiles(Boolean backupVideoAndFiles) {
+	public BackupRestoreDataConfig setBackupVideoAndFiles(boolean backupVideoAndFiles) {
 		this.backupVideoAndFiles = backupVideoAndFiles;
 		return this;
 	}
 
-	public BackupRestoreDataConfig setBackupThumbnails(Boolean backupThumbnails) {
+	public BackupRestoreDataConfig setBackupThumbnails(boolean backupThumbnails) {
 		this.backupThumbnails = backupThumbnails;
 		return this;
 	}
 
-	public BackupRestoreDataConfig setBackupAvatars(Boolean backupAvatars) {
+	public BackupRestoreDataConfig setBackupAvatars(boolean backupAvatars) {
 		this.backupAvatars = backupAvatars;
 		return this;
 	}
+
+	public BackupRestoreDataConfig setBackupNonces(boolean backupNonces) {
+		this.backupNonces = backupNonces;
+		return this;
+	}
 }
diff --git a/app/src/main/java/ch/threema/app/backuprestore/csv/BackupService.java b/app/src/main/java/ch/threema/app/backuprestore/csv/BackupService.java
index 1cf12070..80edd791 100644
--- a/app/src/main/java/ch/threema/app/backuprestore/csv/BackupService.java
+++ b/app/src/main/java/ch/threema/app/backuprestore/csv/BackupService.java
@@ -93,6 +93,7 @@ import ch.threema.base.ThreemaException;
 import ch.threema.base.utils.LoggingUtil;
 import ch.threema.base.utils.Utils;
 import ch.threema.domain.identitybackup.IdentityBackupGenerator;
+import ch.threema.storage.DatabaseNonceStore;
 import ch.threema.storage.DatabaseServiceNew;
 import ch.threema.storage.models.AbstractMessageModel;
 import ch.threema.storage.models.ContactModel;
@@ -150,6 +151,7 @@ public class BackupService extends Service {
 	private PreferenceService preferenceService;
 	private PowerManager.WakeLock wakeLock;
 	private NotificationManager notificationManager;
+	private DatabaseNonceStore databaseNonceStore;
 
 	private NotificationCompat.Builder notificationBuilder;
 
@@ -303,7 +305,7 @@ public class BackupService extends Service {
 		}
 
 		notificationManager = (NotificationManager) getSystemService(Context.NOTIFICATION_SERVICE);
-
+		databaseNonceStore = new DatabaseNonceStore(this, serviceManager.getIdentityStore());
 	}
 
 	@Override
@@ -394,6 +396,11 @@ public class BackupService extends Service {
 					logger.error("Exception", x);
 				}
 			}
+
+			if (this.config.backupNonces()) {
+				progress += 1;
+			}
+
 			logger.debug("Calculated steps " + progress);
 			this.initProgress(progress);
 
@@ -438,6 +445,13 @@ public class BackupService extends Service {
 				}
 			}
 
+			// Backup nonces
+			if (this.config.backupNonces()) {
+				if (!this.backupNonces(zipOutputStream)) {
+					return this.cancelBackup(backupFile);
+				}
+			}
+
 			backupSuccess = true;
 			onFinished("");
 		} catch (final Exception e) {
@@ -529,7 +543,6 @@ public class BackupService extends Service {
 			Tags.TAG_CONTACT_NICK_NAME,
 			Tags.TAG_CONTACT_HIDDEN,
 			Tags.TAG_CONTACT_ARCHIVED,
-			Tags.TAG_CONTACT_FORWARD_SECURITY,
 			Tags.TAG_CONTACT_IDENTITY_ID
 		};
 		final String[] messageCsvHeader = {
@@ -575,7 +588,6 @@ public class BackupService extends Service {
 						.write(Tags.TAG_CONTACT_NICK_NAME, contactModel.getPublicNickName())
 						.write(Tags.TAG_CONTACT_HIDDEN, contactModel.isHidden())
 						.write(Tags.TAG_CONTACT_ARCHIVED, contactModel.isArchived())
-						.write(Tags.TAG_CONTACT_FORWARD_SECURITY, contactModel.isForwardSecurityEnabled())
 						.write(Tags.TAG_CONTACT_IDENTITY_ID, identityId)
 						.write();
 
@@ -1044,6 +1056,44 @@ public class BackupService extends Service {
 		return true;
 	}
 
+	private boolean backupNonces(@NonNull ZipOutputStream zipOutputStream) {
+		logger.info("Backing up nonces");
+
+		if (!next("Backup nonces")) {
+			return false;
+		}
+
+		try (ByteArrayOutputStream outputStreamBuffer = new ByteArrayOutputStream()) {
+			writeNonces(outputStreamBuffer, zipOutputStream);
+		} catch (IOException | ThreemaException e) {
+			logger.error("Error with byte array output stream", e);
+			return false;
+		}
+
+		return true;
+	}
+
+	private void writeNonces(
+		@NonNull ByteArrayOutputStream outputStream,
+		@NonNull ZipOutputStream zipOutputStream
+	) throws ThreemaException, IOException {
+		final String[] nonceHeader = new String[]{Tags.TAG_NONCES};
+		try (
+			OutputStreamWriter outputStreamWriter = new OutputStreamWriter(outputStream);
+			CSVWriter csvWriter = new CSVWriter(outputStreamWriter, nonceHeader)
+		) {
+			for (String nonce : databaseNonceStore.getAllHashedNonces()) {
+				csvWriter.createRow().write(Tags.TAG_NONCES, nonce).write();
+			}
+		}
+		ZipUtil.addZipStream(
+			zipOutputStream,
+			new ByteArrayInputStream(outputStream.toByteArray()),
+			Tags.NONCE_FILE_NAME + Tags.CSV_FILE_POSTFIX,
+			true
+		);
+	}
+
 	/**
 	 * Create the distribution list zip file.
 	 */
diff --git a/app/src/main/java/ch/threema/app/backuprestore/csv/RestoreService.java b/app/src/main/java/ch/threema/app/backuprestore/csv/RestoreService.java
index 20e07bf7..a63758d8 100644
--- a/app/src/main/java/ch/threema/app/backuprestore/csv/RestoreService.java
+++ b/app/src/main/java/ch/threema/app/backuprestore/csv/RestoreService.java
@@ -21,6 +21,10 @@
 
 package ch.threema.app.backuprestore.csv;
 
+import static ch.threema.app.services.NotificationService.NOTIFICATION_CHANNEL_ALERT;
+import static ch.threema.app.services.NotificationService.NOTIFICATION_CHANNEL_BACKUP_RESTORE_IN_PROGRESS;
+import static ch.threema.app.utils.IntentDataUtil.PENDING_INTENT_FLAG_IMMUTABLE;
+
 import android.annotation.SuppressLint;
 import android.app.Notification;
 import android.app.NotificationManager;
@@ -92,6 +96,7 @@ import ch.threema.domain.models.GroupId;
 import ch.threema.domain.models.VerificationLevel;
 import ch.threema.domain.protocol.csp.ProtocolDefines;
 import ch.threema.domain.protocol.csp.connection.ThreemaConnection;
+import ch.threema.storage.DatabaseNonceStore;
 import ch.threema.storage.DatabaseServiceNew;
 import ch.threema.storage.factories.ContactModelFactory;
 import ch.threema.storage.models.AbstractMessageModel;
@@ -115,10 +120,6 @@ import ch.threema.storage.models.data.MessageContentsType;
 import ch.threema.storage.models.data.media.BallotDataModel;
 import ch.threema.storage.models.data.media.FileDataModel;
 
-import static ch.threema.app.services.NotificationService.NOTIFICATION_CHANNEL_ALERT;
-import static ch.threema.app.services.NotificationService.NOTIFICATION_CHANNEL_BACKUP_RESTORE_IN_PROGRESS;
-import static ch.threema.app.utils.IntentDataUtil.PENDING_INTENT_FLAG_IMMUTABLE;
-
 public class RestoreService extends Service {
 	private static final Logger logger = LoggingUtil.getThreemaLogger("RestoreService");
 
@@ -135,6 +136,7 @@ public class RestoreService extends Service {
 	private PreferenceService preferenceService;
 	private PowerManager.WakeLock wakeLock;
 	private NotificationManager notificationManager;
+	private DatabaseNonceStore databaseNonceStore;
 
 	private NotificationCompat.Builder notificationBuilder;
 
@@ -280,6 +282,7 @@ public class RestoreService extends Service {
 			userService = serviceManager.getUserService();
 			groupService = serviceManager.getGroupService();
 			preferenceService = serviceManager.getPreferenceService();
+			databaseNonceStore = new DatabaseNonceStore(this, serviceManager.getIdentityStore());
 		} catch (Exception e) {
 			logger.error("Could not instantiate all required services", e);
 			stopSelf();
@@ -469,6 +472,12 @@ public class RestoreService extends Service {
 						if (!userService.restoreIdentity(identityContent, this.password)) {
 							throw new ThreemaException(getString(R.string.unable_to_restore_identity_because, "n/a"));
 						}
+						// If the backup is older than version 19, the contact avatar file has the
+						// id as suffix and is not "me". Therefore we need to include the identity
+						// in the id map, so that restoring this id's avatar file works.
+						if (restoreSettings.getVersion() < 19) {
+							identityIdMap.put(userService.getIdentity(), userService.getIdentity());
+						}
 					} catch (UnknownHostException e) {
 						throw e;
 					} catch (Exception e) {
@@ -478,6 +487,13 @@ public class RestoreService extends Service {
 					updateProgress(STEP_SIZE_IDENTITY);
 				}
 
+				// Restore nonces
+				logger.info("Restoring nonces");
+				if (!restoreNonces(fileHeaders)) {
+					logger.error("Restoring nonces failed");
+					//continue anyway!
+				}
+
 				//contacts, groups and distribution lists
 				logger.info("Restoring main files (contacts, groups, distribution lists)");
 				if(!this.restoreMainFiles(fileHeaders)) {
@@ -518,6 +534,10 @@ public class RestoreService extends Service {
 					//continue anyway!
 				}
 
+				// Reset the profile pic upload so that the own profile picture is redistributed
+				preferenceService.setProfilePicUploadDate(new Date(0));
+				preferenceService.setProfilePicUploadData(null);
+
 				if (!writeToDb) {
 					stepSizeTotal += (messageCount * STEP_SIZE_MESSAGES)  + ((long) mediaCount * STEP_SIZE_MEDIA);
 				}
@@ -613,6 +633,46 @@ public class RestoreService extends Service {
 		return true;
 	}
 
+	private boolean restoreNonces(List<FileHeader> fileHeaders) throws IOException {
+		FileHeader nonceFileHeader = null;
+		for (FileHeader fileHeader : fileHeaders) {
+			String fileName = fileHeader.getFileName();
+			if (fileName != null && fileName.startsWith(Tags.NONCE_FILE_NAME)) {
+				nonceFileHeader = fileHeader;
+				break;
+			}
+		}
+		if (nonceFileHeader == null) {
+			logger.info("Nonce file header is null");
+			return false;
+		}
+
+		if (this.writeToDb) {
+			try (ZipInputStream inputStream = this.zipFile.getInputStream(nonceFileHeader);
+			     InputStreamReader inputStreamReader = new InputStreamReader(inputStream);
+			     CSVReader csvReader = new CSVReader(inputStreamReader, false)
+			) {
+				boolean success = true;
+				CSVRow row;
+				while ((row = csvReader.readNextRow()) != null) {
+					try {
+						// Note that currently there is only one nonce per row, and therefore we do
+						// not need to read them as array. However, this gives us the flexibility to
+						// backup several nonces in one row (as we have done in 5.1-alpha3)
+						String[] nonces = row.getStrings(Tags.TAG_NONCES);
+						success &= databaseNonceStore.insertHashedNonces(nonces);
+					} catch (ThreemaException e) {
+						logger.error("Could not insert nonces");
+						return false;
+					}
+				}
+				return success;
+			}
+		}
+
+		return true;
+	}
+
 	/**
 	 * restore all avatars and profile pics
 	 */
@@ -785,8 +845,9 @@ public class RestoreService extends Service {
 							try (ZipInputStream inputStream = zipFile.getInputStream(fileHeader)) {
 								imageData = IOUtils.toByteArray(inputStream);
 								this.fileService.writeConversationMedia(model, imageData);
+							} catch (OutOfMemoryError e) {
+								imageData = null;
 							}
-							//
 
 							if (MessageUtil.canHaveThumbnailFile(model)) {
 								//check if a thumbnail file is in backup
@@ -860,14 +921,10 @@ public class RestoreService extends Service {
 
 		// Set contact avatar
 		try (ZipInputStream inputStream = zipFile.getInputStream(fileHeader)) {
-			boolean success = fileService.writeContactAvatar(
+			return fileService.writeContactAvatar(
 				contactModel,
 				IOUtils.toByteArray(inputStream)
 			);
-			if (contactModel.getIdentity().equals(contactService.getMe().getIdentity())) {
-				preferenceService.setProfilePicLastUpdate(new Date());
-			}
-			return success;
 		} catch (Exception e) {
 			logger.error("Exception while writing contact avatar", e);
 			return false;
@@ -1418,9 +1475,6 @@ public class RestoreService extends Service {
 		if(restoreSettings.getVersion() >= 14) {
 			contactModel.setArchived(row.getBoolean(Tags.TAG_CONTACT_ARCHIVED));
 		}
-		if(restoreSettings.getVersion() >= 18) {
-			contactModel.setForwardSecurityEnabled(row.getBoolean(Tags.TAG_CONTACT_FORWARD_SECURITY));
-		}
 		if (restoreSettings.getVersion() >= 19) {
 			identityIdMap.put(row.getString(Tags.TAG_CONTACT_IDENTITY_ID), contactModel.getIdentity());
 		} else {
diff --git a/app/src/main/java/ch/threema/app/backuprestore/csv/Tags.java b/app/src/main/java/ch/threema/app/backuprestore/csv/Tags.java
index dd9b7fb0..0c999a71 100644
--- a/app/src/main/java/ch/threema/app/backuprestore/csv/Tags.java
+++ b/app/src/main/java/ch/threema/app/backuprestore/csv/Tags.java
@@ -37,6 +37,7 @@ public abstract class Tags {
 	public static final String CONTACT_AVATAR_FILE_PREFIX = "contact_avatar_";
 	public static final String CONTACT_AVATAR_FILE_SUFFIX_ME = "me";
 	public static final String CONTACT_PROFILE_PIC_FILE_PREFIX = "contact_profile_pic_";
+	public static final String NONCE_FILE_NAME = "nonces";
 
 	public static final String DISTRIBUTION_LIST_MESSAGE_MEDIA_FILE_PREFIX = "distribution_list_message_media_";
 	public static final String DISTRIBUTION_LIST_MESSAGE_MEDIA_THUMBNAIL_FILE_PREFIX = "distribution_list_thumbnail_";
@@ -50,6 +51,8 @@ public abstract class Tags {
 
 	public static final String TAG_INFO_VERSION = "version";
 
+	public static final String TAG_NONCES = "nonces";
+
 	public static final String TAG_CONTACT_IDENTITY = "identity";
 	public static final String TAG_CONTACT_FIRST_NAME = "firstname";
 	public static final String TAG_CONTACT_LAST_NAME = "lastname";
@@ -61,7 +64,6 @@ public abstract class Tags {
 	public static final String TAG_CONTACT_THREEMA_ANDROID_CONTACT_ID = "tacid";
 	public static final String TAG_CONTACT_HIDDEN = "hidden";
 	public static final String TAG_CONTACT_ARCHIVED = "archived";
-	public static final String TAG_CONTACT_FORWARD_SECURITY = "forward_security";
 	public static final String TAG_CONTACT_IDENTITY_ID = "identity_id"; // a unique ID representing the identity of a contact
 
 	public static final String TAG_GROUP_ID = "id";
diff --git a/app/src/main/java/ch/threema/app/camera/CameraActivity.java b/app/src/main/java/ch/threema/app/camera/CameraActivity.java
index f6ddaa75..02b64576 100644
--- a/app/src/main/java/ch/threema/app/camera/CameraActivity.java
+++ b/app/src/main/java/ch/threema/app/camera/CameraActivity.java
@@ -189,12 +189,6 @@ public class CameraActivity extends ThreemaAppCompatActivity implements CameraFr
 		}
 	}
 
-	@Override
-	public void finish() {
-		super.finish();
-		overridePendingTransition(0, 0);
-	}
-
 	@Override
 	public boolean getVideoEnable() {
 		return ConfigUtils.supportsVideoCapture() && !noVideo;
diff --git a/app/src/main/java/ch/threema/app/camera/CameraConfig.java b/app/src/main/java/ch/threema/app/camera/CameraConfig.java
index 4d596e24..7a059c0c 100644
--- a/app/src/main/java/ch/threema/app/camera/CameraConfig.java
+++ b/app/src/main/java/ch/threema/app/camera/CameraConfig.java
@@ -23,28 +23,28 @@ package ch.threema.app.camera;
 
 class CameraConfig {
 	private final static int DEFAULT_IMAGE_SIZE = 2592;
-	private final static int DEFAULT_VIDEO_SIZE = 1280;
 	private final static int DEFAULT_AUDIO_BITRATE = 128000;
 	private final static int DEFAULT_VIDEO_BITRATE = 2000000;
-	private final static int DEFAULT_VIDEO_FRAMERATE = 30;
 
 	static int getDefaultImageSize() {
 		return DEFAULT_IMAGE_SIZE;
 	}
 
-	static int getDefaultVideoSize() {
-		return DEFAULT_VIDEO_SIZE;
-	}
-
+	/**
+	 * Get the default audio bitrate. Note that this value is only used to guess the estimated file
+	 * size and therefore to limit the duration of the recording. The actual audio bitrate depends
+	 * on the device.
+	 */
 	static int getDefaultAudioBitrate() {
 		return DEFAULT_AUDIO_BITRATE;
 	}
 
+	/**
+	 * Get the default video bitrate. Note that this value is only used to guess the estimated file
+	 * size and therefore to limit the duration of the recording. The actual video bitrate depend on
+	 * the device.
+	 */
 	static int getDefaultVideoBitrate() {
 		return DEFAULT_VIDEO_BITRATE;
 	}
-
-	static int getDefaultVideoFramerate() {
-		return DEFAULT_VIDEO_FRAMERATE;
-	}
 }
diff --git a/app/src/main/java/ch/threema/app/camera/CameraFragment.kt b/app/src/main/java/ch/threema/app/camera/CameraFragment.kt
index 2897627c..c5286536 100644
--- a/app/src/main/java/ch/threema/app/camera/CameraFragment.kt
+++ b/app/src/main/java/ch/threema/app/camera/CameraFragment.kt
@@ -21,6 +21,7 @@
 
 package ch.threema.app.camera
 
+import android.Manifest
 import android.annotation.SuppressLint
 import android.content.BroadcastReceiver
 import android.content.Context
@@ -40,20 +41,38 @@ import android.util.Rational
 import android.util.Size
 import android.view.*
 import android.widget.ImageView
-import android.widget.ProgressBar
 import android.widget.TextView
 import android.widget.Toast
-import androidx.camera.core.*
+import androidx.camera.core.Camera
+import androidx.camera.core.CameraInfo
+import androidx.camera.core.CameraInfoUnavailableException
+import androidx.camera.core.CameraSelector
+import androidx.camera.core.CameraState
+import androidx.camera.core.FocusMeteringAction
+import androidx.camera.core.ImageCapture
 import androidx.camera.core.ImageCapture.FlashMode
+import androidx.camera.core.ImageCaptureException
+import androidx.camera.core.Preview
+import androidx.camera.core.ZoomState
 import androidx.camera.lifecycle.ProcessCameraProvider
+import androidx.camera.video.FallbackStrategy
+import androidx.camera.video.FileOutputOptions
+import androidx.camera.video.Quality
+import androidx.camera.video.QualitySelector
+import androidx.camera.video.Recorder
+import androidx.camera.video.Recording
+import androidx.camera.video.VideoCapture
+import androidx.camera.video.VideoRecordEvent
+import androidx.camera.video.VideoRecordEvent.Finalize
 import androidx.camera.view.PreviewView
 import androidx.constraintlayout.widget.ConstraintLayout
+import androidx.core.app.ActivityCompat
 import androidx.core.content.ContextCompat
+import androidx.core.util.Consumer
 import androidx.core.view.ViewCompat
 import androidx.core.view.WindowInsetsCompat
 import androidx.fragment.app.Fragment
 import androidx.fragment.app.viewModels
-import androidx.lifecycle.Lifecycle
 import androidx.lifecycle.asFlow
 import androidx.localbroadcastmanager.content.LocalBroadcastManager
 import ch.threema.app.R
@@ -67,12 +86,14 @@ import ch.threema.app.utils.ConfigUtils
 import ch.threema.app.utils.LocaleUtil
 import ch.threema.app.utils.RuntimeUtil
 import ch.threema.base.utils.LoggingUtil
+import com.google.android.material.progressindicator.CircularProgressIndicator
 import kotlinx.coroutines.CoroutineScope
 import kotlinx.coroutines.Dispatchers
 import kotlinx.coroutines.delay
 import kotlinx.coroutines.flow.takeWhile
 import kotlinx.coroutines.launch
 import java.io.File
+import java.lang.IllegalArgumentException
 import java.util.concurrent.ExecutorService
 import java.util.concurrent.Executors
 import kotlin.math.floor
@@ -86,7 +107,8 @@ class CameraFragment : Fragment() {
     private var displayId: Int = -1
     private var preview: Preview? = null
     private var imageCapture: ImageCapture? = null
-    private var videoCapture: VideoCapture? = null
+    private var videoCapture: VideoCapture<Recorder>? = null
+    private var videoRecording: Recording? = null
     private var camera: Camera? = null
     private var cameraProvider: ProcessCameraProvider? = null
 
@@ -96,7 +118,7 @@ class CameraFragment : Fragment() {
     private var container: ConstraintLayout? = null
     private var controlsContainer: View? = null
     private var previewView: PreviewView? = null
-    private var progressBar: ProgressBar? = null
+    private var progressBar: CircularProgressIndicator? = null
     private var timerView: TimerView? = null
     private var windowInsets: WindowInsetsCompat? = null
     private var mediaActionSound: LessObnoxiousMediaActionSound? = null
@@ -109,11 +131,6 @@ class CameraFragment : Fragment() {
     // Configuration options
     private var targetWidth = CameraConfig.getDefaultImageSize()
     private var targetHeight = CameraConfig.getDefaultImageSize()
-    private val targetVideoWidth = CameraConfig.getDefaultVideoSize()
-    private val targetVideoHeight = CameraConfig.getDefaultVideoSize()
-    private val targetVideoBitrate = CameraConfig.getDefaultVideoBitrate()
-    private val targetAudioBitrate = CameraConfig.getDefaultAudioBitrate()
-    private val targetVideoFramerate = CameraConfig.getDefaultVideoFramerate()
 
     private val displayManager by lazy {
         requireContext().getSystemService(Context.DISPLAY_SERVICE) as DisplayManager
@@ -142,12 +159,10 @@ class CameraFragment : Fragment() {
         override fun onDisplayAdded(displayId: Int) = Unit
         override fun onDisplayRemoved(displayId: Int) = Unit
 
-        @SuppressLint("RestrictedApi")
         override fun onDisplayChanged(displayId: Int) = view?.let { view ->
             if (displayId == this@CameraFragment.displayId) {
                 logger.debug("Rotation changed: {}", view.display.rotation)
                 imageCapture?.targetRotation = view.display.rotation
-                videoCapture?.setTargetRotation(view.display.rotation)
             }
         } ?: Unit
     }
@@ -166,23 +181,33 @@ class CameraFragment : Fragment() {
         }
     }
 
-    @SuppressLint("RestrictedApi")
-    private val onVideoSavedCallback: VideoCapture.OnVideoSavedCallback = object : VideoCapture.OnVideoSavedCallback {
-        override fun onVideoSaved(outputFileResults: VideoCapture.OutputFileResults) {
-            if (lifecycle.currentState.isAtLeast(Lifecycle.State.CREATED)) {
-                previewView?.visibility = View.GONE
-                val constraintLayout: ConstraintLayout? = container?.findViewById(R.id.camera_ui_container)
-                constraintLayout?.visibility = View.GONE
-                cameraCallback?.onVideoReady()
-            } else {
-                cameraCallback?.onError("Lifecycle")
+    private val videoEventConsumer: Consumer<VideoRecordEvent> = Consumer {
+        when (it) {
+            is VideoRecordEvent.Start -> logger.debug("Starting recording")
+            is Finalize -> {
+                if (it.hasError()) {
+                    cameraCallback?.onError(
+                        when(it.error) {
+                            Finalize.ERROR_ENCODING_FAILED -> "Encoding failed"
+                            Finalize.ERROR_FILE_SIZE_LIMIT_REACHED -> "File size limit reached"
+                            Finalize.ERROR_INSUFFICIENT_STORAGE -> "Insufficient storage"
+                            Finalize.ERROR_INVALID_OUTPUT_OPTIONS -> "Invalid output options"
+                            Finalize.ERROR_NO_VALID_DATA -> "No valid data"
+                            Finalize.ERROR_RECORDER_ERROR -> "Recorder error"
+                            Finalize.ERROR_SOURCE_INACTIVE -> "Source inactive"
+                            Finalize.ERROR_UNKNOWN -> "Unknown"
+                            Finalize.ERROR_NONE -> "None"
+                            else -> "Unknown"
+                        }
+                    )
+                } else {
+                    previewView?.visibility = View.GONE
+                    container?.findViewById<ConstraintLayout?>(R.id.camera_ui_container)
+                        ?.visibility = View.GONE
+                    cameraCallback?.onVideoReady()
+                }
             }
         }
-
-        override fun onError(videoCaptureError: Int, message: String, cause: Throwable?) {
-            logger.debug("Video capture error {}", message)
-            cameraCallback?.onError(message)
-        }
     }
 
     override fun onResume() {
@@ -363,7 +388,6 @@ class CameraFragment : Fragment() {
     }
 
     /** Declare and bind preview, capture and analysis use cases */
-    @SuppressLint("RestrictedApi")
     private fun bindCameraUseCases(): Boolean {
         if (previewView == null || previewView!!.display == null) {
             return false
@@ -378,7 +402,6 @@ class CameraFragment : Fragment() {
 
         val cameraProvider = cameraProvider
                 ?: throw IllegalStateException("Camera initialization failed.")
-        val cameraSelector = CameraSelector.Builder().requireLensFacing(viewModel.lensFacing).build()
 
         val previewHeight = (previewView!!.measuredWidth / targetAspectRatio.toFloat()).toInt()
 
@@ -390,89 +413,96 @@ class CameraFragment : Fragment() {
                 .build()
         logger.debug("Preview size: {} * {} isDisplayPortrait {}", previewView!!.measuredWidth, previewHeight, isDisplayPortrait)
 
-        val width: Int
-        val height: Int
-
         if (ConfigUtils.supportsVideoCapture() && recordingMode == RECORDING_MODE_VIDEO) {
-            if (targetVideoWidth > targetVideoHeight) {
-                width = (targetVideoHeight.toFloat() * targetAspectRatio.toFloat()).toInt()
-                height = targetVideoHeight
-            } else if (targetVideoWidth < targetVideoHeight) {
-                width = targetVideoWidth
-                height = (targetVideoWidth.toFloat() / targetAspectRatio.toFloat()).toInt()
-            } else {
-                if (isDisplayPortrait) {
-                    width = (targetVideoHeight.toFloat() * targetAspectRatio.toFloat()).toInt()
-                    height = targetVideoHeight
-                } else {
-                    width = targetVideoWidth
-                    height = (targetVideoWidth.toFloat() / targetAspectRatio.toFloat()).toInt()
-                }
+            prepareVideoRecording(cameraProvider)
+            imageCapture = null
+        } else {
+            if (!prepareImageCapture(cameraProvider, isDisplayPortrait, targetAspectRatio, rotation)) {
+                return false
             }
+            videoCapture = null
+        }
 
-            videoCapture = VideoCapture.Builder()
-                    .setTargetName("VideoCapture")
-                    .setTargetResolution(Size(width, height))
-                    .setTargetRotation(rotation)
-                    .setAudioChannelCount(1)
-/* Setting the video bitrate currently causes Pixel 5 to crash */
-/*                  .setBitRate(targetVideoBitrate) */
-                    .setAudioBitRate(targetAudioBitrate)
-                    .setVideoFrameRate(targetVideoFramerate)
-                    .build()
-            logger.debug("Video capture size: {} * {}", width, height)
+        // Attach the viewfinder's surface provider to preview use case
+        preview?.setSurfaceProvider(previewView!!.surfaceProvider)
+        observeCameraState(camera?.cameraInfo!!)
 
-        } else {
-            // ImageCapture
-            // Adjust the captured image resolution according to the view size and the target width.
+        return true
+    }
 
-            if (targetWidth > targetHeight) {
-                width = (targetHeight.toFloat() * targetAspectRatio.toFloat()).toInt()
-                height = targetHeight
-            } else if (targetWidth < targetHeight) {
-                width = targetWidth
-                height = (targetWidth.toFloat() / targetAspectRatio.toFloat()).toInt()
-            } else {
-                if (isDisplayPortrait) {
-                    width = (targetHeight.toFloat() * targetAspectRatio.toFloat()).toInt()
-                    height = targetHeight
-                } else {
-                    width = targetWidth
-                    height = (targetWidth.toFloat() / targetAspectRatio.toFloat()).toInt()
-                }
-            }
+    private fun prepareVideoRecording(cameraProvider: ProcessCameraProvider) {
+        val qualitySelector = QualitySelector.fromOrderedList(
+            listOf(Quality.HD, Quality.FHD, Quality.SD, Quality.UHD),
+            FallbackStrategy.higherQualityOrLowerThan(Quality.HD)
+        )
 
-            imageCapture = ImageCapture.Builder()
-                    .setTargetName("ImageCapture")
-                    .setCaptureMode(CameraUtil.getCaptureMode())
-                    .setTargetResolution(Size(width, height))
-                    .setTargetRotation(rotation)
-                    .build()
-            logger.debug("Image capture size: {} * {}", width, height)
+        // Note that the video bit rate varies depending on the device. However, we still set the
+        // bitrate to keep the bitrate close to the value we use for calculating the maximum
+        // duration of a video.
+        val recorder = Recorder.Builder()
+            .setQualitySelector(qualitySelector)
+            .setTargetVideoEncodingBitRate(CameraConfig.getDefaultVideoBitrate())
+            .build()
 
-            videoCapture = null
-        }
+        videoCapture = VideoCapture.withOutput(recorder)
 
         try {
-            // Must unbind the use-cases before rebinding them
             cameraProvider.unbindAll()
+            camera = cameraProvider.bindToLifecycle(
+                this,
+                CameraSelector.Builder().requireLensFacing(viewModel.lensFacing).build(),
+                preview,
+                videoCapture
+            )
+        } catch (e: Exception) {
+            logger.error("Error binding camera to lifecycle", e)
+        }
+    }
 
-            // A variable number of use-cases can be passed here -
-            // camera provides access to CameraControl & CameraInfo
-            camera = if (videoCapture != null) {
-                cameraProvider.bindToLifecycle(this, cameraSelector, preview, videoCapture)
+    private fun prepareImageCapture(
+        cameraProvider: ProcessCameraProvider,
+        isDisplayPortrait: Boolean,
+        targetAspectRatio: Rational,
+        rotation: Int,
+    ) : Boolean {
+        val cameraSelector = CameraSelector.Builder().requireLensFacing(viewModel.lensFacing).build()
+
+        // ImageCapture
+        // Adjust the captured image resolution according to the view size and the target width.
+        val width: Int
+        val height: Int
+
+        if (targetWidth > targetHeight) {
+            width = (targetHeight.toFloat() * targetAspectRatio.toFloat()).toInt()
+            height = targetHeight
+        } else if (targetWidth < targetHeight) {
+            width = targetWidth
+            height = (targetWidth.toFloat() / targetAspectRatio.toFloat()).toInt()
+        } else {
+            if (isDisplayPortrait) {
+                width = (targetHeight.toFloat() * targetAspectRatio.toFloat()).toInt()
+                height = targetHeight
             } else {
-                cameraProvider.bindToLifecycle(this, cameraSelector, preview, imageCapture)
+                width = targetWidth
+                height = (targetWidth.toFloat() / targetAspectRatio.toFloat()).toInt()
             }
+        }
 
-            // Attach the viewfinder's surface provider to preview use case
-            preview?.setSurfaceProvider(previewView!!.surfaceProvider)
-            observeCameraState(camera?.cameraInfo!!)
-        } catch (exc: Exception) {
-            logger.error("Use case binding failed", exc)
+        imageCapture = ImageCapture.Builder()
+            .setTargetName("ImageCapture")
+            .setCaptureMode(CameraUtil.getCaptureMode())
+            .setTargetResolution(Size(width, height))
+            .setTargetRotation(rotation)
+            .build()
+        logger.debug("Image capture size: {} * {}", width, height)
+
+        cameraProvider.unbindAll()
+        try {
+            camera = cameraProvider.bindToLifecycle(this, cameraSelector, preview, imageCapture)
+        } catch (e: IllegalArgumentException) {
+            logger.error("Unable to resolve camera", e)
             return false
         }
-
         return true
     }
 
@@ -509,7 +539,7 @@ class CameraFragment : Fragment() {
                     return
                 }
             } catch (exc: java.lang.IllegalStateException) {
-                logger.error("Unable to get flash state", exc.message)
+                logger.error("Unable to get flash state", exc)
             }
             it.visibility = View.GONE
         }
@@ -813,14 +843,17 @@ class CameraFragment : Fragment() {
         updateFlashButton()
     }
 
-    @SuppressLint("UnsafeExperimentalUsageError", "UnsafeOptInUsageError", "RestrictedApi", "MissingPermission")
     private fun startVideoRecording() {
-        if (cameraCallback?.videoFilePath == null) {
+        val context = context
+        if (cameraCallback?.videoFilePath == null || context == null) {
             return
         }
 
-        // play shutter sound
+        // Play shutter sound
         mediaActionSound?.play(LessObnoxiousMediaActionSound.START_VIDEO_RECORDING)
+        // Use default video and audio bitrate to calculate video duration. Note that the actual
+        // bitrate depends on the device. If the video gets larger than the maximum blob size, then
+        // it will be transcoded to reduce file size.
         val bytesPerSecond = CameraConfig.getDefaultVideoBitrate().toFloat() / 8f + CameraConfig.getDefaultAudioBitrate().toFloat() / 8f
         val durationSeconds = floor(((ThreemaApplication.MAX_BLOB_SIZE - 1000000).toFloat() / bytesPerSecond).toDouble()).toLong() // we assume a MP4 overhead of 1 MB
         logger.debug("Calculated video duration: " + LocaleUtil.formatTimerText(durationSeconds * DateUtils.SECOND_IN_MILLIS, true))
@@ -831,7 +864,15 @@ class CameraFragment : Fragment() {
         camera?.cameraControl?.setLinearZoom(0F)
 
         // Create output options object which contains file + metadata
-        val outputOptions = VideoCapture.OutputFileOptions.Builder(File(cameraCallback?.videoFilePath!!)).build()
+        val pendingRecording = videoCapture?.output?.prepareRecording(
+            context,
+            FileOutputOptions.Builder(File(cameraCallback?.videoFilePath!!)).build()
+        )
+        if (ActivityCompat.checkSelfPermission(context, Manifest.permission.RECORD_AUDIO)
+            == PackageManager.PERMISSION_GRANTED
+        ) {
+            pendingRecording?.withAudioEnabled()
+        }
 
         CoroutineScope(Dispatchers.Default).launch {
             // Wait until camera is open
@@ -844,11 +885,10 @@ class CameraFragment : Fragment() {
             RuntimeUtil.runOnUiThread {
                 timerView?.start(durationSeconds * DateUtils.SECOND_IN_MILLIS) { _: Long -> stopVideoRecording() }
             }
-            videoCapture?.startRecording(outputOptions, RuntimeUtil.MainThreadExecutor(), onVideoSavedCallback)
+            videoRecording = pendingRecording?.start(RuntimeUtil.MainThreadExecutor(), videoEventConsumer)
         }
     }
 
-    @SuppressLint("UnsafeExperimentalUsageError", "UnsafeOptInUsageError", "RestrictedApi")
     private fun stopVideoRecording() {
         timerView?.stop()
 
@@ -862,7 +902,7 @@ class CameraFragment : Fragment() {
             // ignore this
         }
         try {
-            videoCapture?.stopRecording()
+            videoRecording?.stop()
         } catch (e: java.lang.Exception) {
             logger.error("Exception", e)
         }
diff --git a/app/src/main/java/ch/threema/app/camera/QRScannerActivity.kt b/app/src/main/java/ch/threema/app/camera/QRScannerActivity.kt
index acc6f042..83fb63b6 100644
--- a/app/src/main/java/ch/threema/app/camera/QRScannerActivity.kt
+++ b/app/src/main/java/ch/threema/app/camera/QRScannerActivity.kt
@@ -145,7 +145,7 @@ class QRScannerActivity : ThreemaActivity() {
         }
 
         val cameraSelector = CameraSelector.Builder().requireLensFacing(lensFacing).build()
-        val rotation = cameraPreview.display.rotation
+        val rotation = cameraPreview.display?.rotation ?: 0
         val resolution = Size(720, 1280)
 
         val cameraProvider = cameraProvider
diff --git a/app/src/main/java/ch/threema/app/camera/VideoEditView.java b/app/src/main/java/ch/threema/app/camera/VideoEditView.java
index c6b90d7c..009843b7 100644
--- a/app/src/main/java/ch/threema/app/camera/VideoEditView.java
+++ b/app/src/main/java/ch/threema/app/camera/VideoEditView.java
@@ -21,7 +21,7 @@
 
 package ch.threema.app.camera;
 
-import static com.google.android.exoplayer2.C.TIME_END_OF_SOURCE;
+import static androidx.media3.common.C.TIME_END_OF_SOURCE;
 
 import android.annotation.SuppressLint;
 import android.content.Context;
@@ -54,12 +54,6 @@ import androidx.core.view.ViewCompat;
 import androidx.lifecycle.DefaultLifecycleObserver;
 import androidx.lifecycle.LifecycleOwner;
 
-import com.google.android.exoplayer2.ExoPlayer;
-import com.google.android.exoplayer2.Player;
-import com.google.android.exoplayer2.source.ClippingMediaSource;
-import com.google.android.exoplayer2.source.DefaultMediaSourceFactory;
-import com.google.android.exoplayer2.ui.PlayerView;
-
 import org.slf4j.Logger;
 
 import java.io.File;
@@ -69,6 +63,13 @@ import java.util.List;
 import androidx.media.AudioAttributesCompat;
 import androidx.media.AudioFocusRequestCompat;
 import androidx.media.AudioManagerCompat;
+import androidx.media3.common.Player;
+import androidx.media3.common.util.UnstableApi;
+import androidx.media3.exoplayer.ExoPlayer;
+import androidx.media3.exoplayer.source.ClippingMediaSource;
+import androidx.media3.exoplayer.source.DefaultMediaSourceFactory;
+import androidx.media3.ui.PlayerView;
+
 import ch.threema.app.R;
 import ch.threema.app.ThreemaApplication;
 import ch.threema.app.services.PreferenceService;
@@ -80,7 +81,7 @@ import ch.threema.app.utils.VideoUtil;
 import ch.threema.app.video.VideoTimelineThumbnailTask;
 import ch.threema.base.utils.LoggingUtil;
 
-public class VideoEditView extends FrameLayout implements DefaultLifecycleObserver, VideoTimelineThumbnailTask.VideoTimelineListener {
+@UnstableApi public class VideoEditView extends FrameLayout implements DefaultLifecycleObserver, VideoTimelineThumbnailTask.VideoTimelineListener {
 	private static final Logger logger = LoggingUtil.getThreemaLogger("VideoEditView");
 
 	private static final int MOVING_NONE = 0;
@@ -106,7 +107,7 @@ public class VideoEditView extends FrameLayout implements DefaultLifecycleObserv
 	private GridLayout timelineGridLayout;
 	private PlayerView videoView;
 	private ExoPlayer videoPlayer;
-	private com.google.android.exoplayer2.MediaItem videoSourceMediaItem;
+	private androidx.media3.common.MediaItem videoSourceMediaItem;
 	private DefaultMediaSourceFactory mediaSourceFactory;
 	private View startContainer, endContainer, sizeContainer;
 	private TextView startTimeTextView, endTimeTextView, sizeTextView;
@@ -555,7 +556,7 @@ public class VideoEditView extends FrameLayout implements DefaultLifecycleObserv
 		}
 
 		if (isAttachedToWindow() && context != null) {
-			videoSourceMediaItem = com.google.android.exoplayer2.MediaItem.fromUri(videoItem.getUri());
+			videoSourceMediaItem = androidx.media3.common.MediaItem.fromUri(videoItem.getUri());
 			preparePlayer();
 		}
 
diff --git a/app/src/main/java/ch/threema/app/dialogs/BallotVoteDialog.java b/app/src/main/java/ch/threema/app/dialogs/BallotVoteDialog.java
index 5ef9b241..a0e4f832 100644
--- a/app/src/main/java/ch/threema/app/dialogs/BallotVoteDialog.java
+++ b/app/src/main/java/ch/threema/app/dialogs/BallotVoteDialog.java
@@ -77,7 +77,7 @@ public class BallotVoteDialog extends ThreemaDialogFragment {
 
 	private Thread votingThread = null;
 
-	private BallotListener ballotListener = new BallotListener() {
+	private final BallotListener ballotListener = new BallotListener() {
 		@Override
 		public void onClosed(BallotModel ballotModel) {
 		}
@@ -105,7 +105,7 @@ public class BallotVoteDialog extends ThreemaDialogFragment {
 		}
 	};
 
-	private BallotVoteListener ballotVoteListener = new BallotVoteListener() {
+	private final BallotVoteListener ballotVoteListener = new BallotVoteListener() {
 		@Override
 		public void onSelfVote(BallotModel ballotModel) { }
 
diff --git a/app/src/main/java/ch/threema/app/dialogs/CancelableHorizontalProgressDialog.java b/app/src/main/java/ch/threema/app/dialogs/CancelableHorizontalProgressDialog.java
index bae10cfa..5a7f9c2a 100644
--- a/app/src/main/java/ch/threema/app/dialogs/CancelableHorizontalProgressDialog.java
+++ b/app/src/main/java/ch/threema/app/dialogs/CancelableHorizontalProgressDialog.java
@@ -29,10 +29,10 @@ import android.text.Spannable;
 import android.text.SpannableString;
 import android.text.style.StyleSpan;
 import android.view.View;
-import android.widget.ProgressBar;
 import android.widget.TextView;
 
 import com.google.android.material.dialog.MaterialAlertDialogBuilder;
+import com.google.android.material.progressindicator.LinearProgressIndicator;
 
 import java.text.NumberFormat;
 
@@ -49,7 +49,7 @@ public class CancelableHorizontalProgressDialog extends ThreemaDialogFragment {
 	private DialogInterface.OnClickListener listener;
 	private NumberFormat mProgressPercentFormat;
 	private TextView progressPercent;
-	private ProgressBar progressBar;
+	private LinearProgressIndicator progressBar;
 	private int max;
 
 	/**
diff --git a/app/src/main/java/ch/threema/app/dialogs/GenericAlertDialog.java b/app/src/main/java/ch/threema/app/dialogs/GenericAlertDialog.java
index b64a19db..e79e0749 100644
--- a/app/src/main/java/ch/threema/app/dialogs/GenericAlertDialog.java
+++ b/app/src/main/java/ch/threema/app/dialogs/GenericAlertDialog.java
@@ -30,6 +30,7 @@ import android.text.method.LinkMovementMethod;
 import android.view.View;
 import android.widget.TextView;
 
+import androidx.annotation.DrawableRes;
 import androidx.annotation.Nullable;
 import androidx.annotation.StringRes;
 import androidx.appcompat.app.AlertDialog;
@@ -59,6 +60,37 @@ public class GenericAlertDialog extends ThreemaDialogFragment {
 		return dialog;
 	}
 
+	public static GenericAlertDialog newInstance(@StringRes int title, @StringRes int message,
+												 @StringRes int positive, @StringRes int negative,
+												 @StringRes int neutral, @DrawableRes int icon) {
+		GenericAlertDialog dialog = new GenericAlertDialog();
+		Bundle args = new Bundle();
+		args.putInt("title", title);
+		args.putInt("message", message);
+		args.putInt("positive", positive);
+		args.putInt("negative", negative);
+		args.putInt("neutral", neutral);
+		args.putInt("icon", icon);
+
+		dialog.setArguments(args);
+		return dialog;
+	}
+
+	public static GenericAlertDialog newInstance(@StringRes int title, @StringRes int message,
+												 @StringRes int positive, @StringRes int negative,
+												 @DrawableRes int icon) {
+		GenericAlertDialog dialog = new GenericAlertDialog();
+		Bundle args = new Bundle();
+		args.putInt("title", title);
+		args.putInt("message", message);
+		args.putInt("positive", positive);
+		args.putInt("negative", negative);
+		args.putInt("icon", icon);
+
+		dialog.setArguments(args);
+		return dialog;
+	}
+
 	public static GenericAlertDialog newInstance(@StringRes int title, @StringRes int message,
 	                                             @StringRes int positive, @StringRes int negative, boolean cancelable) {
 		GenericAlertDialog dialog = new GenericAlertDialog();
@@ -130,7 +162,10 @@ public class GenericAlertDialog extends ThreemaDialogFragment {
 
 	public interface DialogClickListener {
 		void onYes(String tag, Object data);
-		void onNo(String tag, Object data);
+		default void onNo(String tag, Object data) {};
+		default void onNeutral(String tag, Object data) {
+			// optional interface
+		}
 	}
 
 	@Override
@@ -183,6 +218,8 @@ public class GenericAlertDialog extends ThreemaDialogFragment {
 		CharSequence messageString = getArguments().getCharSequence("messageString");
 		int positive = getArguments().getInt("positive");
 		int negative = getArguments().getInt("negative");
+		int neutral = getArguments().getInt("neutral");
+		@DrawableRes int icon = getArguments().getInt("icon", 0);
 		boolean cancelable = getArguments().getBoolean("cancelable", true);
 		isHtml = getArguments().getBoolean("html", false);
 
@@ -211,8 +248,16 @@ public class GenericAlertDialog extends ThreemaDialogFragment {
 		builder.setPositiveButton(getString(positive), (dialog, whichButton) -> callback.onYes(tag, object)
 		);
 		if (negative != 0) {
-			builder.setNegativeButton(getString(negative), (dialog, whichButton) -> callback.onNo(tag, object)
-			);
+			builder.setNegativeButton(getString(negative), (dialog, whichButton) -> callback.onNo(tag, object));
+		}
+
+		if (neutral != 0) {
+			builder.setNeutralButton(getString(neutral), (dialog, whichButton) -> callback.onNeutral(tag, object));
+			cancelable = false;
+		}
+
+		if (icon != 0) {
+			builder.setIcon(icon);
 		}
 
 		alertDialog = builder.create();
@@ -242,9 +287,5 @@ public class GenericAlertDialog extends ThreemaDialogFragment {
 	public void setCallback(DialogClickListener dialogClickListener) {
 		callback = dialogClickListener;
 	}
-
-	public void showInActivity() {
-		alertDialog.show();
-	}
 }
 
diff --git a/app/src/main/java/ch/threema/app/dialogs/MessageDetailDialog.java b/app/src/main/java/ch/threema/app/dialogs/MessageDetailDialog.java
index da2f9c5b..b08f5184 100644
--- a/app/src/main/java/ch/threema/app/dialogs/MessageDetailDialog.java
+++ b/app/src/main/java/ch/threema/app/dialogs/MessageDetailDialog.java
@@ -39,6 +39,7 @@ import androidx.annotation.StringRes;
 import androidx.appcompat.app.AppCompatDialog;
 import androidx.core.app.ActivityCompat;
 
+import com.google.android.material.button.MaterialButton;
 import com.google.android.material.card.MaterialCardView;
 import com.google.android.material.chip.Chip;
 import com.google.android.material.chip.ChipDrawable;
@@ -59,7 +60,6 @@ import ch.threema.app.managers.ListenerManager;
 import ch.threema.app.services.ContactService;
 import ch.threema.app.services.MessageService;
 import ch.threema.app.stores.IdentityStore;
-import ch.threema.app.ui.CountBoxView;
 import ch.threema.app.utils.AvatarConverterUtil;
 import ch.threema.app.utils.BitmapUtil;
 import ch.threema.app.utils.ConfigUtils;
@@ -106,6 +106,11 @@ public class MessageDetailDialog extends ThreemaDialogFragment implements View.O
 
 		@Override
 		public void onProgressChanged(AbstractMessageModel messageModel, int newProgress) {}
+
+		@Override
+		public void onResendDismissed(@NonNull AbstractMessageModel messageModel) {
+			// Ignore
+		}
 	};
 
 	public static MessageDetailDialog newInstance(@StringRes int title, int messageId, String type, @Nullable ForwardSecurityMode forwardSecurityMode) {
@@ -371,11 +376,11 @@ public class MessageDetailDialog extends ThreemaDialogFragment implements View.O
 		final MaterialCardView ackCard = dialogView.findViewById(R.id.ack_card);
 		final ImageView ackIcon = dialogView.findViewById(R.id.ack_icon);
 		final ChipGroup ackData = dialogView.findViewById(R.id.ack_data);
-		final CountBoxView ackCountView = dialogView.findViewById(R.id.ack_count);
+		final MaterialButton ackCountView = dialogView.findViewById(R.id.ack_count);
 		final MaterialCardView decCard = dialogView.findViewById(R.id.dec_card);
 		final ImageView decIcon = dialogView.findViewById(R.id.dec_icon);
 		final ChipGroup decData = dialogView.findViewById(R.id.dec_data);
-		final CountBoxView decCountView = dialogView.findViewById(R.id.dec_count);
+		final MaterialButton decCountView = dialogView.findViewById(R.id.dec_count);
 
 		if (messageModel instanceof GroupMessageModel) {
 			Map<String, Object> messageStates = ((GroupMessageModel) messageModel).getGroupMessageStates();
@@ -432,13 +437,13 @@ public class MessageDetailDialog extends ThreemaDialogFragment implements View.O
 		ChipDrawable chipDrawable = ChipDrawable.createFromAttributes(getContext(),
 			null,
 			0,
-			R.style.Chip_MessageDetails);
+			R.style.Threema_Chip_MessageDetails);
 		chip.setChipDrawable(chipDrawable);
 		chip.setEnsureMinTouchTargetSize(false);
 		chip.setTag(contactModel.getIdentity());
 		chip.setOnClickListener(this);
 		if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {
-			chip.setTextAppearance(R.style.TextAppearance_Chip_ChatNotice);
+			chip.setTextAppearance(R.style.Threema_TextAppearance_Chip_ChatNotice);
 		} else {
 			chip.setTextSize(14);
 		}
diff --git a/app/src/main/java/ch/threema/app/dialogs/MultiChoiceSelectorDialog.java b/app/src/main/java/ch/threema/app/dialogs/MultiChoiceSelectorDialog.java
index 18c48baa..e472cd16 100644
--- a/app/src/main/java/ch/threema/app/dialogs/MultiChoiceSelectorDialog.java
+++ b/app/src/main/java/ch/threema/app/dialogs/MultiChoiceSelectorDialog.java
@@ -50,7 +50,9 @@ public class MultiChoiceSelectorDialog extends ThreemaDialogFragment {
 
 	public interface SelectorDialogClickListener {
 		void onYes(String tag, boolean[] checkedItems);
-		void onCancel(String tag);
+		default void onCancel(String tag) {
+			// optional interface
+		};
 	}
 
 	@Override
diff --git a/app/src/main/java/ch/threema/app/dialogs/PasswordEntryDialog.java b/app/src/main/java/ch/threema/app/dialogs/PasswordEntryDialog.java
index 778a0c2a..13e5e018 100644
--- a/app/src/main/java/ch/threema/app/dialogs/PasswordEntryDialog.java
+++ b/app/src/main/java/ch/threema/app/dialogs/PasswordEntryDialog.java
@@ -38,16 +38,17 @@ import android.view.WindowManager;
 import android.widget.EditText;
 import android.widget.TextView;
 
-import com.google.android.material.checkbox.MaterialCheckBox;
-import com.google.android.material.dialog.MaterialAlertDialogBuilder;
-import com.google.android.material.textfield.TextInputEditText;
-import com.google.android.material.textfield.TextInputLayout;
-
 import androidx.annotation.NonNull;
 import androidx.annotation.StringRes;
 import androidx.appcompat.app.AlertDialog;
 import androidx.appcompat.app.AppCompatDialog;
 import androidx.core.text.util.LinkifyCompat;
+
+import com.google.android.material.dialog.MaterialAlertDialogBuilder;
+import com.google.android.material.materialswitch.MaterialSwitch;
+import com.google.android.material.textfield.TextInputEditText;
+import com.google.android.material.textfield.TextInputLayout;
+
 import ch.threema.app.R;
 import ch.threema.app.utils.DialogUtil;
 import ch.threema.app.utils.LocaleUtil;
@@ -61,7 +62,7 @@ public class PasswordEntryDialog extends ThreemaDialogFragment implements Generi
 	protected boolean isLinkify = false;
 	protected boolean isLengthCheck = true;
 	protected int minLength, maxLength;
-	protected MaterialCheckBox checkBox;
+	protected MaterialSwitch checkBox;
 	public enum ForgotHintType {
 		NONE,
 		SAFE,
@@ -287,6 +288,9 @@ public class PasswordEntryDialog extends ThreemaDialogFragment implements Generi
 		builder.setBackgroundInsetTop(getResources().getDimensionPixelSize(R.dimen.dialog_inset_top_bottom));
 		builder.setBackgroundInsetBottom(getResources().getDimensionPixelSize(R.dimen.dialog_inset_top_bottom));
 
+		builder.setBackgroundInsetTop(getResources().getDimensionPixelSize(R.dimen.dialog_inset_top_bottom));
+		builder.setBackgroundInsetBottom(getResources().getDimensionPixelSize(R.dimen.dialog_inset_top_bottom));
+
 		alertDialog = builder.create();
 		alertDialog.getWindow().setSoftInputMode(WindowManager.LayoutParams.SOFT_INPUT_STATE_HIDDEN);
 		return alertDialog;
diff --git a/app/src/main/java/ch/threema/app/dialogs/RateDialog.java b/app/src/main/java/ch/threema/app/dialogs/RateDialog.java
index 09921a35..8af6152c 100644
--- a/app/src/main/java/ch/threema/app/dialogs/RateDialog.java
+++ b/app/src/main/java/ch/threema/app/dialogs/RateDialog.java
@@ -21,6 +21,7 @@
 
 package ch.threema.app.dialogs;
 
+import android.annotation.SuppressLint;
 import android.app.Activity;
 import android.content.Context;
 import android.content.DialogInterface;
@@ -37,17 +38,17 @@ import android.widget.ImageView;
 import android.widget.LinearLayout;
 import android.widget.Toast;
 
+import androidx.appcompat.app.AlertDialog;
+import androidx.appcompat.app.AppCompatDialog;
+
 import com.google.android.material.dialog.MaterialAlertDialogBuilder;
 import com.google.android.material.textfield.TextInputEditText;
 
-import androidx.appcompat.app.AlertDialog;
-import androidx.appcompat.app.AppCompatDialog;
 import ch.threema.app.R;
 import ch.threema.app.ThreemaApplication;
 import ch.threema.app.managers.ServiceManager;
 import ch.threema.app.services.PreferenceService;
 import ch.threema.app.services.RatingService;
-import ch.threema.app.utils.ConfigUtils;
 import ch.threema.app.utils.DialogUtil;
 import ch.threema.app.utils.TestUtil;
 
@@ -141,7 +142,6 @@ public class RateDialog extends ThreemaDialogFragment {
 		for (int i = 0; i < starMap.length; i++) {
 			ImageView starView = dialogView.findViewById(starMap[i]);
 			starView.setTag(i + 1);
-			ConfigUtils.themeImageView(activity, starView);
 			starView.setOnClickListener(new View.OnClickListener() {
 				@Override
 				public void onClick(View v) {
@@ -179,6 +179,7 @@ public class RateDialog extends ThreemaDialogFragment {
 		return alertDialog;
 	}
 
+	@SuppressLint("StaticFieldLeak")
 	private void sendReview(final String tag, final int rating, final String text) {
 		new AsyncTask<Void, Void, Boolean>() {
 			@Override
diff --git a/app/src/main/java/ch/threema/app/dialogs/RingtoneSelectorDialog.java b/app/src/main/java/ch/threema/app/dialogs/RingtoneSelectorDialog.java
index df83b1ad..ff3b1e92 100644
--- a/app/src/main/java/ch/threema/app/dialogs/RingtoneSelectorDialog.java
+++ b/app/src/main/java/ch/threema/app/dialogs/RingtoneSelectorDialog.java
@@ -35,14 +35,15 @@ import android.os.Bundle;
 import android.widget.ArrayAdapter;
 import android.widget.Toast;
 
+import androidx.annotation.NonNull;
+import androidx.appcompat.app.AlertDialog;
+import androidx.appcompat.app.AppCompatDialog;
+
 import com.google.android.material.dialog.MaterialAlertDialogBuilder;
 
 import org.msgpack.core.annotations.Nullable;
 import org.slf4j.Logger;
 
-import androidx.annotation.NonNull;
-import androidx.appcompat.app.AlertDialog;
-import androidx.appcompat.app.AppCompatDialog;
 import ch.threema.app.R;
 import ch.threema.app.utils.RingtoneUtil;
 import ch.threema.base.utils.LoggingUtil;
@@ -158,8 +159,8 @@ public class RingtoneSelectorDialog extends ThreemaDialogFragment {
 			} while (cursor.moveToNext());
 		}
 
-		final TypedArray a = getContext().obtainStyledAttributes(null, androidx.appcompat.R.styleable.AlertDialog,
-				androidx.appcompat.R.attr.alertDialogStyle, 0);
+		final TypedArray a = getContext().obtainStyledAttributes(null, R.styleable.AlertDialog,
+				R.attr.alertDialogStyle, 0);
 		int itemLayout = a.getResourceId(com.google.android.material.R.styleable.AlertDialog_singleChoiceItemLayout, 0);
 		RingtoneListItemAdapter adapter = new RingtoneListItemAdapter(getContext(), itemLayout, android.R.id.text1, labels);
 
diff --git a/app/src/main/java/ch/threema/app/dialogs/SMSVerificationDialog.java b/app/src/main/java/ch/threema/app/dialogs/SMSVerificationDialog.java
index 847d626c..b9811610 100644
--- a/app/src/main/java/ch/threema/app/dialogs/SMSVerificationDialog.java
+++ b/app/src/main/java/ch/threema/app/dialogs/SMSVerificationDialog.java
@@ -30,11 +30,12 @@ import android.view.View;
 import android.widget.Button;
 import android.widget.EditText;
 
-import com.google.android.material.dialog.MaterialAlertDialogBuilder;
-
 import androidx.annotation.NonNull;
 import androidx.appcompat.app.AlertDialog;
 import androidx.appcompat.app.AppCompatDialog;
+
+import com.google.android.material.dialog.MaterialAlertDialogBuilder;
+
 import ch.threema.app.R;
 import ch.threema.app.utils.ConfigUtils;
 import ch.threema.app.utils.DialogUtil;
@@ -102,7 +103,7 @@ public class SMSVerificationDialog extends ThreemaDialogFragment {
 				callback.onCallRequested(tag);
 			}
 		});
-		if (ConfigUtils.getAppTheme(activity) == ConfigUtils.THEME_DARK) {
+		if (ConfigUtils.isTheDarkSide(getContext())) {
 			if (requestCallButton.getCompoundDrawables()[0] != null) {
 				requestCallButton.getCompoundDrawables()[0].setColorFilter(getResources().getColor(android.R.color.white), PorterDuff.Mode.SRC_IN);
 			}
diff --git a/app/src/main/java/ch/threema/app/dialogs/SelectorDialog.java b/app/src/main/java/ch/threema/app/dialogs/SelectorDialog.java
index 2352090b..0b5baed4 100644
--- a/app/src/main/java/ch/threema/app/dialogs/SelectorDialog.java
+++ b/app/src/main/java/ch/threema/app/dialogs/SelectorDialog.java
@@ -25,6 +25,7 @@ import android.app.Activity;
 import android.content.DialogInterface;
 import android.os.Bundle;
 import android.os.Parcelable;
+import android.util.TypedValue;
 import android.view.ContextThemeWrapper;
 import android.view.View;
 import android.view.ViewGroup;
@@ -32,12 +33,13 @@ import android.widget.ArrayAdapter;
 import android.widget.ListAdapter;
 import android.widget.TextView;
 
+import androidx.annotation.NonNull;
+import androidx.appcompat.app.AppCompatDialog;
+
 import com.google.android.material.dialog.MaterialAlertDialogBuilder;
 
 import java.util.ArrayList;
 
-import androidx.annotation.NonNull;
-import androidx.appcompat.app.AppCompatDialog;
 import ch.threema.app.R;
 import ch.threema.app.emojis.EmojiTextView;
 import ch.threema.app.ui.SelectorDialogItem;
@@ -136,10 +138,12 @@ public class SelectorDialog extends ThreemaDialogFragment {
 
 		MaterialAlertDialogBuilder builder = new MaterialAlertDialogBuilder(getActivity(), getTheme());
 		if (title != null) {
-			EmojiTextView emojiTextView = new EmojiTextView(new ContextThemeWrapper(getContext(), R.style.Threema_AlertDialog_TitleTextStyle));
+			EmojiTextView emojiTextView = new EmojiTextView(new ContextThemeWrapper(getContext(), R.style.MaterialAlertDialog_Material3_Title_Text));
 			emojiTextView.setText(title);
+			emojiTextView.setMaxLines(2);
 			int padding = getResources().getDimensionPixelSize(R.dimen.edittext_padding);
-			emojiTextView.setPadding(padding, padding, 0, 0);
+			int paddingRight = (int) TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP, 16, getResources().getDisplayMetrics());
+			emojiTextView.setPadding(padding, padding, paddingRight, 0);
 			builder.setCustomTitle(emojiTextView);
 		}
 
diff --git a/app/src/main/java/ch/threema/app/dialogs/ShowOnceDialog.java b/app/src/main/java/ch/threema/app/dialogs/ShowOnceDialog.java
index e1266443..56bdeef9 100644
--- a/app/src/main/java/ch/threema/app/dialogs/ShowOnceDialog.java
+++ b/app/src/main/java/ch/threema/app/dialogs/ShowOnceDialog.java
@@ -27,16 +27,18 @@ import android.os.Bundle;
 import android.view.View;
 import android.widget.TextView;
 
-import com.google.android.material.dialog.MaterialAlertDialogBuilder;
-
+import androidx.annotation.DrawableRes;
 import androidx.annotation.NonNull;
 import androidx.annotation.StringRes;
 import androidx.appcompat.app.AlertDialog;
 import androidx.appcompat.app.AppCompatDialog;
-import androidx.appcompat.widget.AppCompatCheckBox;
 import androidx.fragment.app.FragmentManager;
 import androidx.fragment.app.FragmentTransaction;
 import androidx.preference.PreferenceManager;
+
+import com.google.android.material.checkbox.MaterialCheckBox;
+import com.google.android.material.dialog.MaterialAlertDialogBuilder;
+
 import ch.threema.app.R;
 import ch.threema.app.ThreemaApplication;
 
@@ -46,7 +48,6 @@ import ch.threema.app.ThreemaApplication;
  *  Make sure to use a unique tag for this dialog in the show() method
  */
 public class ShowOnceDialog extends ThreemaDialogFragment {
-	private AlertDialog alertDialog;
 	private Activity activity;
 
 	private static final String PREF_PREFIX = "dialog_";
@@ -54,6 +55,7 @@ public class ShowOnceDialog extends ThreemaDialogFragment {
 	public static final String ARG_TITLE = "title";
 	public static final String ARG_MESSAGE_STRING = "messageString";
 	public static final String ARG_MESSAGE_INT = "messageInt";
+	public static final String ARG_ICON = "icon";
 
 	public static ShowOnceDialog newInstance(@StringRes int title, @StringRes int message) {
 		final Bundle args = new Bundle();
@@ -62,6 +64,14 @@ public class ShowOnceDialog extends ThreemaDialogFragment {
 		return newInstance(args);
 	}
 
+	public static ShowOnceDialog newInstance(@StringRes int title, @StringRes int message, @DrawableRes int icon) {
+		final Bundle args = new Bundle();
+		args.putInt(ARG_TITLE, title);
+		args.putInt(ARG_MESSAGE_INT, message);
+		args.putInt(ARG_ICON, icon);
+		return newInstance(args);
+	}
+
 	public static ShowOnceDialog newInstance(@StringRes int title, @NonNull String message) {
 		final Bundle args = new Bundle();
 		args.putInt(ARG_TITLE, title);
@@ -100,6 +110,7 @@ public class ShowOnceDialog extends ThreemaDialogFragment {
 		return sharedPreferences.getBoolean(PREF_PREFIX + tag, false);
 	}
 
+	@NonNull
 	@Override
 	public AppCompatDialog onCreateDialog(Bundle savedInstanceState) {
 		final SharedPreferences sharedPreferences = PreferenceManager.getDefaultSharedPreferences(ThreemaApplication.getAppContext());
@@ -111,10 +122,11 @@ public class ShowOnceDialog extends ThreemaDialogFragment {
 		if (messageInt == 0) {
 			messageString = arguments.getString(ARG_MESSAGE_STRING);
 		}
+		@DrawableRes int icon = arguments.getInt(ARG_ICON, 0);
 
 		final View dialogView = activity.getLayoutInflater().inflate(R.layout.dialog_show_once, null);
 		final TextView textView = dialogView.findViewById(R.id.message);
-		final AppCompatCheckBox checkbox = dialogView.findViewById(R.id.checkbox);
+		final MaterialCheckBox checkbox = dialogView.findViewById(R.id.checkbox);
 		checkbox.setOnCheckedChangeListener((buttonView, isChecked) -> sharedPreferences.edit().putBoolean(PREF_PREFIX + getTag(), isChecked).apply());
 
 		MaterialAlertDialogBuilder builder = new MaterialAlertDialogBuilder(getActivity(), getTheme());
@@ -125,6 +137,10 @@ public class ShowOnceDialog extends ThreemaDialogFragment {
 			builder.setTitle(title);
 		}
 
+		if (icon != 0) {
+			builder.setIcon(icon);
+		}
+
 		builder.setPositiveButton(getString(R.string.ok), null);
 		if (messageString != null) {
 			textView.setText(messageString);
@@ -134,7 +150,7 @@ public class ShowOnceDialog extends ThreemaDialogFragment {
 
 		setCancelable(false);
 
-		alertDialog = builder.create();
+		AlertDialog alertDialog = builder.create();
 		return alertDialog;
 	}
 }
diff --git a/app/src/main/java/ch/threema/app/dialogs/TextEntryDialog.java b/app/src/main/java/ch/threema/app/dialogs/TextEntryDialog.java
index 00401471..312533eb 100644
--- a/app/src/main/java/ch/threema/app/dialogs/TextEntryDialog.java
+++ b/app/src/main/java/ch/threema/app/dialogs/TextEntryDialog.java
@@ -32,13 +32,14 @@ import android.text.TextWatcher;
 import android.view.View;
 import android.widget.Button;
 
-import com.google.android.material.dialog.MaterialAlertDialogBuilder;
-import com.google.android.material.textfield.TextInputLayout;
-
 import androidx.annotation.NonNull;
 import androidx.annotation.StringRes;
 import androidx.appcompat.app.AlertDialog;
 import androidx.appcompat.app.AppCompatDialog;
+
+import com.google.android.material.dialog.MaterialAlertDialogBuilder;
+import com.google.android.material.textfield.TextInputLayout;
+
 import ch.threema.app.R;
 import ch.threema.app.ThreemaApplication;
 import ch.threema.app.emojis.EmojiEditText;
@@ -201,7 +202,9 @@ public class TextEntryDialog extends ThreemaDialogFragment {
 	public interface TextEntryDialogClickListener {
 		void onYes(String tag, String text);
 		void onNo(String tag);
-		void onNeutral(String tag);
+		default void onNeutral(String tag) {
+			// optional interface
+		}
 	}
 
 	@Override
diff --git a/app/src/main/java/ch/threema/app/dialogs/TextWithCheckboxDialog.java b/app/src/main/java/ch/threema/app/dialogs/TextWithCheckboxDialog.java
index 64fdd5ce..fcaec571 100644
--- a/app/src/main/java/ch/threema/app/dialogs/TextWithCheckboxDialog.java
+++ b/app/src/main/java/ch/threema/app/dialogs/TextWithCheckboxDialog.java
@@ -25,13 +25,14 @@ import android.app.Activity;
 import android.os.Bundle;
 import android.view.View;
 
-import com.google.android.material.dialog.MaterialAlertDialogBuilder;
-
 import androidx.annotation.DrawableRes;
 import androidx.annotation.NonNull;
 import androidx.annotation.StringRes;
 import androidx.appcompat.app.AppCompatDialog;
-import androidx.appcompat.widget.AppCompatCheckBox;
+
+import com.google.android.material.dialog.MaterialAlertDialogBuilder;
+import com.google.android.material.materialswitch.MaterialSwitch;
+
 import ch.threema.app.R;
 
 /**
@@ -81,9 +82,10 @@ public class TextWithCheckboxDialog extends ThreemaDialogFragment {
 		return dialog;
 	}
 
-	public static TextWithCheckboxDialog newInstance(String message, @StringRes int checkboxLabel, @StringRes int positive, @StringRes int negative) {
+	public static TextWithCheckboxDialog newInstance(String title, String message, @StringRes int checkboxLabel, @StringRes int positive, @StringRes int negative) {
 		TextWithCheckboxDialog dialog = new TextWithCheckboxDialog();
 		Bundle args = new Bundle();
+		args.putString(TITLE_KEY, title);
 		args.putString(MESSAGE_KEY, message);
 		args.putInt(CHECKBOX_LABEL_KEY, checkboxLabel);
 		args.putInt(POSITIVE_KEY, positive);
@@ -141,12 +143,11 @@ public class TextWithCheckboxDialog extends ThreemaDialogFragment {
 		@DrawableRes int icon = getArguments().getInt(ARG_ICON, 0);
 
 		final View dialogView = activity.getLayoutInflater().inflate(R.layout.dialog_text_with_checkbox, null);
-		final AppCompatCheckBox checkbox = dialogView.findViewById(R.id.checkbox);
+		final MaterialSwitch checkbox = dialogView.findViewById(R.id.checkbox);
 		final String tag = this.getTag();
 
 		MaterialAlertDialogBuilder builder = new MaterialAlertDialogBuilder(getActivity(), getTheme())
 			.setTitle(title != null ? title : message)
-			.setView(dialogView)
 			.setCancelable(false)
 			.setNegativeButton(negative, null)
 			.setPositiveButton(positive, (dialog, which) -> callback.onYes(tag, object, checkbox.isChecked()));
@@ -161,12 +162,10 @@ public class TextWithCheckboxDialog extends ThreemaDialogFragment {
 			builder.setMessage(message);
 		}
 
-		checkbox.setChecked(false);
 		if (checkboxLabel != 0) {
-			checkbox.setTextSize(14);
+			builder.setView(dialogView);
+			checkbox.setChecked(false);
 			checkbox.setText(checkboxLabel);
-		} else {
-			checkbox.setVisibility(View.GONE);
 		}
 
 		setCancelable(false);
diff --git a/app/src/main/java/ch/threema/app/emojis/DiverseEmojiPopup.java b/app/src/main/java/ch/threema/app/emojis/DiverseEmojiPopup.java
index 99d9926f..5cfd3bf1 100644
--- a/app/src/main/java/ch/threema/app/emojis/DiverseEmojiPopup.java
+++ b/app/src/main/java/ch/threema/app/emojis/DiverseEmojiPopup.java
@@ -156,7 +156,7 @@ public class DiverseEmojiPopup extends PopupWindow implements View.OnClickListen
 			EmojiItemView emojiView = (EmojiItemView) originView;
 			if (emojiView != null) {
 				emojiView.setEmoji(emojiService.getPreferredDiversity(emojiSequence), true,
-						ConfigUtils.getColorFromAttribute(context, R.attr.emoji_picker_hint));
+					context.getResources().getColor(R.color.emoji_picker_hint));
 			}
 			dismiss();
 		}
diff --git a/app/src/main/java/ch/threema/app/emojis/EmojiConversationTextView.java b/app/src/main/java/ch/threema/app/emojis/EmojiConversationTextView.java
index 98315e34..723e11e2 100644
--- a/app/src/main/java/ch/threema/app/emojis/EmojiConversationTextView.java
+++ b/app/src/main/java/ch/threema/app/emojis/EmojiConversationTextView.java
@@ -31,9 +31,13 @@ import android.util.AttributeSet;
 
 import androidx.annotation.NonNull;
 import androidx.annotation.Nullable;
+
+import com.google.android.material.textview.MaterialTextView;
+
+import ch.threema.app.R;
 import ch.threema.app.utils.ConfigUtils;
 
-public class EmojiConversationTextView extends androidx.appcompat.widget.AppCompatTextView {
+public class EmojiConversationTextView extends MaterialTextView {
 	protected final EmojiMarkupUtil emojiMarkupUtil;
 	private boolean isFade = false;
 	private boolean ignoreMarkup = false;
@@ -71,7 +75,7 @@ public class EmojiConversationTextView extends androidx.appcompat.widget.AppComp
 					0,
 					getHeight() - (getTextSize() * 3),
 					Color.TRANSPARENT,
-					ConfigUtils.getColorFromAttribute(getContext(), android.R.attr.textColorPrimary),
+					ConfigUtils.getColorFromAttribute(getContext(), R.attr.colorOnBackground),
 					Shader.TileMode.CLAMP));
 		}
 		super.onDraw(canvas);
@@ -88,6 +92,13 @@ public class EmojiConversationTextView extends androidx.appcompat.widget.AppComp
 	}
 
 	public void setFade(boolean isFade) {
+		if (this.isFade != isFade && isFade == false) {
+			if (getPaint() != null) {
+				getPaint().clearShadowLayer();
+				getPaint().setShader(null);
+			}
+		}
+
 		this.isFade = isFade;
 	}
 
diff --git a/app/src/main/java/ch/threema/app/emojis/EmojiGridAdapter.java b/app/src/main/java/ch/threema/app/emojis/EmojiGridAdapter.java
index 0d4cd1ca..44717c16 100644
--- a/app/src/main/java/ch/threema/app/emojis/EmojiGridAdapter.java
+++ b/app/src/main/java/ch/threema/app/emojis/EmojiGridAdapter.java
@@ -34,7 +34,6 @@ import java.util.ArrayList;
 
 import androidx.core.content.res.ResourcesCompat;
 import ch.threema.app.R;
-import ch.threema.app.utils.ConfigUtils;
 
 import static ch.threema.app.emojis.EmojiSpritemap.emojiCategories;
 
@@ -57,7 +56,7 @@ public class EmojiGridAdapter extends BaseAdapter {
 		this.pageNumber = pageNumber;
 		this.keyClickListener = listener;
 		this.emojiService = emojiService;
-		this.diverseHintColor = ConfigUtils.getColorFromAttribute(context, R.attr.emoji_picker_hint);
+		this.diverseHintColor = context.getResources().getColor(R.color.emoji_picker_hint);
 		if (EmojiManager.getInstance(context).getSpritemapInSampleSize() == 1) {
 			this.emojiItemSize = context.getResources().getDimensionPixelSize(R.dimen.emoji_picker_item_size);
 			this.emojiItemPaddingSize = (emojiItemSize - context.getResources().getDimensionPixelSize(R.dimen.emoji_picker_emoji_size)) / 2;
diff --git a/app/src/main/java/ch/threema/app/emojis/EmojiListAdapter.kt b/app/src/main/java/ch/threema/app/emojis/EmojiListAdapter.kt
index 26f222bc..acf8791a 100644
--- a/app/src/main/java/ch/threema/app/emojis/EmojiListAdapter.kt
+++ b/app/src/main/java/ch/threema/app/emojis/EmojiListAdapter.kt
@@ -42,7 +42,7 @@ class EmojiListAdapter(
 	private var emojiItemPaddingSize = 0
 
 	@ColorInt
-	private val diverseHintColor: Int = ConfigUtils.getColorFromAttribute(context, R.attr.emoji_picker_hint)
+	private val diverseHintColor: Int = context.resources.getColor(R.color.emoji_picker_hint)
 	private var emojis: List<EmojiInfo> = emptyList()
 
 	init {
diff --git a/app/src/main/java/ch/threema/app/emojis/EmojiMarkupUtil.java b/app/src/main/java/ch/threema/app/emojis/EmojiMarkupUtil.java
index fe6edcd8..b9022ea5 100644
--- a/app/src/main/java/ch/threema/app/emojis/EmojiMarkupUtil.java
+++ b/app/src/main/java/ch/threema/app/emojis/EmojiMarkupUtil.java
@@ -191,10 +191,10 @@ public class EmojiMarkupUtil {
 			return inputText;
 		}
 
-		@ColorInt int mentionColor = ConfigUtils.getColorFromAttribute(context, R.attr.mention_background);
-		@ColorInt int invertedMentionColor = ConfigUtils.getColorFromAttribute(context, R.attr.mention_background_inverted);
-		@ColorInt int mentionTextColor = ConfigUtils.getColorFromAttribute(context, R.attr.mention_text_color);
-		@ColorInt int invertedMentionTextColor = ConfigUtils.getColorFromAttribute(context, R.attr.mention_text_color_inverted);
+		@ColorInt int mentionColor = context.getResources().getColor(R.color.mention_background);
+		@ColorInt int invertedMentionColor = context.getResources().getColor(R.color.mention_background_inverted);
+		@ColorInt int mentionTextColor = context.getResources().getColor(R.color.mention_text_color);
+		@ColorInt int invertedMentionTextColor =  context.getResources().getColor(R.color.mention_text_color_inverted);
 
 		SpannableStringBuilder s = new SpannableStringBuilder(inputText);
 
diff --git a/app/src/main/java/ch/threema/app/filepicker/FilePickerActivity.java b/app/src/main/java/ch/threema/app/filepicker/FilePickerActivity.java
index c7d2e5fe..520cf650 100644
--- a/app/src/main/java/ch/threema/app/filepicker/FilePickerActivity.java
+++ b/app/src/main/java/ch/threema/app/filepicker/FilePickerActivity.java
@@ -32,12 +32,16 @@ import android.view.KeyEvent;
 import android.view.Menu;
 import android.view.MenuItem;
 import android.view.View;
-import android.widget.AbsListView;
 import android.widget.AdapterView;
 import android.widget.ListView;
 import android.widget.Toast;
 
-import com.google.android.material.floatingactionbutton.ExtendedFloatingActionButton;
+import androidx.annotation.NonNull;
+import androidx.appcompat.app.ActionBar;
+import androidx.appcompat.app.ActionBarDrawerToggle;
+import androidx.core.view.GravityCompat;
+import androidx.drawerlayout.widget.DrawerLayout;
+
 import com.google.android.material.navigation.NavigationView;
 
 import org.slf4j.Logger;
@@ -51,11 +55,6 @@ import java.util.Collections;
 import java.util.Comparator;
 import java.util.List;
 
-import androidx.annotation.NonNull;
-import androidx.appcompat.app.ActionBar;
-import androidx.appcompat.app.ActionBarDrawerToggle;
-import androidx.core.view.GravityCompat;
-import androidx.drawerlayout.widget.DrawerLayout;
 import ch.threema.app.R;
 import ch.threema.app.activities.ThreemaToolbarActivity;
 import ch.threema.app.utils.ConfigUtils;
@@ -69,24 +68,18 @@ public class FilePickerActivity extends ThreemaToolbarActivity implements ListVi
 	private static final int PERMISSION_STORAGE = 1;
 
 	public static final String INTENT_DATA_DEFAULT_PATH = "defpath";
-	public static final String INTENT_DATA_SELECT_DIRECTORY = "directory";
-	public static final String EXTRA_DIRECTORY = "dir";
 
 	private String currentFolder;
 	private FilePickerAdapter fileArrayListAdapter;
 	private FileFilter fileFilter;
-	private File fileSelected;
 	private ListView listView;
 	private ArrayList<String> extensions;
-	private ArrayList<String> rootPaths = new ArrayList<>(2);
+	private final ArrayList<String> rootPaths = new ArrayList<>(2);
 	private ActionBar actionBar;
 	private DrawerLayout drawerLayout;
 	private Comparator<FileInfo> comparator;
-	private ExtendedFloatingActionButton floatingActionButton;
 	private int currentRoot = 0;
 
-	private boolean isDirectoriesOnly = false, isExternal = false;
-
 	@Override
 	public int getLayoutResource() {
 		return R.layout.activity_filepicker;
@@ -109,42 +102,20 @@ public class FilePickerActivity extends ThreemaToolbarActivity implements ListVi
 
 		actionBar = getSupportActionBar();
 
-		floatingActionButton = findViewById(R.id.floating);
-
 		Bundle extras = getIntent().getExtras();
 		if (extras != null) {
 			if (extras.getStringArrayList(Constants.KEY_FILTER_FILES_EXTENSIONS) != null) {
 				extensions = extras
 					.getStringArrayList(Constants.KEY_FILTER_FILES_EXTENSIONS);
-				fileFilter = new FileFilter() {
-					@Override
-					public boolean accept(File pathname) {
-						return ((pathname.isDirectory()) ||
-							(pathname.getName().contains(".") &&
-								extensions.contains(pathname.getName().substring(pathname.getName().lastIndexOf(".")))));
-					}
-				};
+				fileFilter = pathname -> ((pathname.isDirectory()) ||
+					(pathname.getName().contains(".") &&
+						extensions.contains(pathname.getName().substring(pathname.getName().lastIndexOf(".")))));
 			}
 
 			defaultPath = extras.getString(INTENT_DATA_DEFAULT_PATH, null);
 			if (defaultPath != null && !(new File(defaultPath)).exists()) {
 				defaultPath = null;
 			}
-
-			if (extras.getBoolean(INTENT_DATA_SELECT_DIRECTORY, false)) {
-				floatingActionButton.setText(R.string.select_directory_for_backup);
-				floatingActionButton.setIconResource(R.drawable.ic_check);
-				floatingActionButton.setOnClickListener(new View.OnClickListener() {
-					@Override
-					public void onClick(View v) {
-						Intent intent = new Intent();
-						intent.putExtra(EXTRA_DIRECTORY, currentFolder);
-						setResult(Activity.RESULT_OK, intent);
-						finish();
-					}
-				});
-				isDirectoriesOnly = true;
-			}
 		}
 
 		listView = findViewById(android.R.id.list);
@@ -156,25 +127,6 @@ public class FilePickerActivity extends ThreemaToolbarActivity implements ListVi
 
 		listView.setOnItemClickListener(this);
 		listView.setDivider(getResources().getDrawable(R.drawable.divider_listview));
-
-		if (isDirectoriesOnly) {
-			listView.setOnScrollListener(new AbsListView.OnScrollListener() {
-				@Override
-				public void onScrollStateChanged(AbsListView view, int scrollState) {
-				}
-
-				@Override
-				public void onScroll(AbsListView view, int firstVisibleItem, int visibleItemCount, int totalItemCount) {
-					if (floatingActionButton != null) {
-						if (firstVisibleItem == 0) {
-							floatingActionButton.extend();
-						} else {
-							floatingActionButton.shrink();
-						}
-					}
-				}
-			});
-		}
 		listView.setDividerHeight(getResources().getDimensionPixelSize(R.dimen.list_divider_height));
 
 		if (getRootPaths() == 0) {
@@ -195,12 +147,10 @@ public class FilePickerActivity extends ThreemaToolbarActivity implements ListVi
 		if (defaultPath != null) {
 			currentRoot = 0;
 			currentFolder = defaultPath;
-			if (currentFolder != null) {
-				for (int i=0; i < rootPaths.size(); i++) {
-					if (currentFolder.startsWith(rootPaths.get(i))) {
-						currentRoot = i;
-						break;
-					}
+			for (int i=0; i < rootPaths.size(); i++) {
+				if (currentFolder.startsWith(rootPaths.get(i))) {
+					currentRoot = i;
+					break;
 				}
 			}
 
@@ -273,13 +223,12 @@ public class FilePickerActivity extends ThreemaToolbarActivity implements ListVi
 		List<FileInfo> files = new ArrayList<FileInfo>();
 		try {
 			for (File file : folders) {
-				if (file.isDirectory() && !file.isHidden())
+				if (file.isDirectory() && !file.isHidden()) {
 					dirs.add(new FileInfo(file.getName(),
-							Constants.FOLDER, file.getAbsolutePath(),
-							file.lastModified(),
-							true, false));
-//				else if (!isDirectoriesOnly) {
-				else {
+						Constants.FOLDER, file.getAbsolutePath(),
+						file.lastModified(),
+						true, false));
+				} else {
 					if (!file.isHidden())
 						files.add(new FileInfo(file.getName(),
 								Formatter.formatFileSize(this, file.length()),
@@ -309,13 +258,9 @@ public class FilePickerActivity extends ThreemaToolbarActivity implements ListVi
 		}
 
 		fileArrayListAdapter = new FilePickerAdapter(FilePickerActivity.this,
-				R.layout.item_filepicker, dirs, isDirectoriesOnly);
+				R.layout.item_filepicker, dirs);
 
 		listView.setAdapter(fileArrayListAdapter);
-
-		if (isDirectoriesOnly) {
-			floatingActionButton.setVisibility(f.canWrite() ? View.VISIBLE : View.GONE);
-		}
 	}
 
 	private boolean isTop(String path) {
@@ -339,7 +284,7 @@ public class FilePickerActivity extends ThreemaToolbarActivity implements ListVi
 			currentFolder = fileDescriptor.getPath();
 			scanFiles(currentFolder);
 		} else {
-			fileSelected = new File(fileDescriptor.getPath());
+			File fileSelected = new File(fileDescriptor.getPath());
 
 			Intent intent = new Intent();
 			intent.setData(Uri.fromFile(fileSelected));
@@ -362,47 +307,39 @@ public class FilePickerActivity extends ThreemaToolbarActivity implements ListVi
 
 	private void setupDrawerContent(final NavigationView navigationView) {
 		Menu menu = navigationView.getMenu();
-		if (menu != null) {
-			if (rootPaths.size() > 1) {
-				for (int i = 1; i < rootPaths.size(); i++) {
-					File file = new File(rootPaths.get(i));
-					MenuItem item = menu.add(R.id.main_group, Menu.NONE, i, file.getName()).setIcon(R.drawable.ic_sd_card_black_24dp);
-					if (i == currentRoot) {
-						item.setChecked(true);
-					}
+		if (rootPaths.size() > 1) {
+			for (int i = 1; i < rootPaths.size(); i++) {
+				File file = new File(rootPaths.get(i));
+				MenuItem item = menu.add(R.id.main_group, Menu.NONE, i, file.getName()).setIcon(R.drawable.ic_sd_card_black_24dp);
+				if (i == currentRoot) {
+					item.setChecked(true);
 				}
 			}
-			menu.setGroupCheckable(R.id.main_group, true, true);
+		}
+		menu.setGroupCheckable(R.id.main_group, true, true);
 
-			if (currentRoot == 0) {
-				MenuItem menuItem = menu.findItem(R.id.internal_storage);
-				menuItem.setChecked(true);
-			}
+		if (currentRoot == 0) {
+			MenuItem menuItem = menu.findItem(R.id.internal_storage);
+			menuItem.setChecked(true);
 		}
 
 		navigationView.setNavigationItemSelectedListener(
-				new NavigationView.OnNavigationItemSelectedListener() {
-					@Override
-					public boolean onNavigationItemSelected(MenuItem menuItem) {
-						currentFolder = rootPaths.get(menuItem.getOrder());
-						currentRoot = menuItem.getOrder();
-						scanFiles(currentFolder);
-						drawerLayout.closeDrawers();
-						menuItem.setChecked(true);
-						return true;
-					}
-				});
+			menuItem -> {
+				currentFolder = rootPaths.get(menuItem.getOrder());
+				currentRoot = menuItem.getOrder();
+				scanFiles(currentFolder);
+				drawerLayout.closeDrawers();
+				menuItem.setChecked(true);
+				return true;
+			});
 	}
 
 	@Override
 	public void onRequestPermissionsResult(int requestCode,
-										   @NonNull String permissions[], @NonNull int[] grantResults) {
+										   @NonNull String[] permissions, @NonNull int[] grantResults) {
+		super.onRequestPermissionsResult(requestCode, permissions, grantResults);
 		switch (requestCode) {
 			case PERMISSION_STORAGE:
-				/* From the docs: It is possible that the permissions request interaction with the user is
-				 * interrupted. In this case you will receive empty permissions and results arrays which
-				 * should be treated as a cancellation.
-				 */
 				if (grantResults.length >= 1 && grantResults[0] == PackageManager.PERMISSION_GRANTED) {
 					scanFiles(currentFolder);
 				} else {
diff --git a/app/src/main/java/ch/threema/app/filepicker/FilePickerAdapter.java b/app/src/main/java/ch/threema/app/filepicker/FilePickerAdapter.java
index f711d371..1434450d 100644
--- a/app/src/main/java/ch/threema/app/filepicker/FilePickerAdapter.java
+++ b/app/src/main/java/ch/threema/app/filepicker/FilePickerAdapter.java
@@ -29,11 +29,12 @@ import android.widget.ArrayAdapter;
 import android.widget.ImageView;
 import android.widget.TextView;
 
+import androidx.annotation.ColorInt;
+import androidx.annotation.NonNull;
+
 import java.util.Date;
 import java.util.List;
 
-import androidx.annotation.ColorInt;
-import androidx.annotation.NonNull;
 import ch.threema.app.R;
 import ch.threema.app.utils.ConfigUtils;
 import ch.threema.app.utils.FileUtil;
@@ -44,20 +45,18 @@ import ch.threema.app.utils.TestUtil;
 
 public class FilePickerAdapter extends ArrayAdapter<FileInfo> {
 
-	private Context context;
-	private int resourceID;
-	private List<FileInfo> items;
-	private boolean isDirectoryMode;
-	private @ColorInt int enabledColor = ConfigUtils.getColorFromAttribute(getContext(), R.attr.textColorSecondary);
-	private @ColorInt int disabledColor = ConfigUtils.getColorFromAttribute(getContext(), R.attr.textColorTertiary);
+	private final Context context;
+	private final int resourceID;
+	private final List<FileInfo> items;
+	private final @ColorInt int enabledColor = ConfigUtils.getColorFromAttribute(getContext(), R.attr.colorOnSurface);
+	private final @ColorInt int disabledColor = ConfigUtils.getColorFromAttribute(getContext(), R.attr.colorOnSurfaceVariant);
 
 	FilePickerAdapter(Context context, int textViewResourceId,
-	                  List<FileInfo> objects, boolean directoryMode) {
+	                  List<FileInfo> objects) {
 		super(context, textViewResourceId, objects);
 		this.context = context;
 		this.resourceID = textViewResourceId;
 		this.items = objects;
-		this.isDirectoryMode = directoryMode;
 	}
 
 	public FileInfo getItem(int i) {
@@ -95,14 +94,14 @@ public class FilePickerAdapter extends ArrayAdapter<FileInfo> {
 			if (fileInfo.getData().equalsIgnoreCase(Constants.FOLDER)) {
 				viewHolder.icon.setImageResource(R.drawable.ic_folder);
 				viewHolder.extra.setVisibility(View.GONE);
-				tintItem(viewHolder, true);
+				tintItem(viewHolder);
 			} else if (fileInfo.getData().equalsIgnoreCase(
 					Constants.PARENT_FOLDER)) {
 				viewHolder.icon.setImageResource(R.drawable.ic_doc_parent);
 				viewHolder.date.setText(R.string.parent_directory);
 				viewHolder.size.setVisibility(View.GONE);
 				viewHolder.extra.setVisibility(View.GONE);
-				tintItem(viewHolder, true);
+				tintItem(viewHolder);
 			} else {
 				String mimeType = FileUtil.getMimeTypeFromPath(fileInfo.getPath());
 
@@ -119,7 +118,7 @@ public class FilePickerAdapter extends ArrayAdapter<FileInfo> {
 					}
 				}
 
-				tintItem(viewHolder, !isDirectoryMode);
+				tintItem(viewHolder);
 			}
 
 			long date = fileInfo.getLastModified();
@@ -140,7 +139,7 @@ public class FilePickerAdapter extends ArrayAdapter<FileInfo> {
 					final Date time = new Date();
 
 					try {
-						time.setTime(Long.valueOf(pieces[2]));
+						time.setTime(Long.parseLong(pieces[2]));
 					} catch (NumberFormatException e) {
 						return null;
 					}
@@ -152,8 +151,8 @@ public class FilePickerAdapter extends ArrayAdapter<FileInfo> {
 		return null;
 	}
 
-	private void tintItem(ViewHolder holder, boolean enabled) {
-		int color = enabled ? enabledColor : disabledColor;
+	private void tintItem(ViewHolder holder) {
+		int color = enabledColor;
 
 		holder.icon.setColorFilter(color);
 		holder.name.setTextColor(color);
@@ -167,16 +166,7 @@ public class FilePickerAdapter extends ArrayAdapter<FileInfo> {
 		return false;
 	}
 
-	@Override
-	public boolean isEnabled(int position) {
-		if (isDirectoryMode) {
-			FileInfo fileInfo = items.get(position);
-			return fileInfo == null || fileInfo.isFolder() || fileInfo.isParent();
-		}
-		return true;
-	}
-
-	class ViewHolder {
+	static class ViewHolder {
 		View item;
 		ImageView icon;
 		TextView name;
diff --git a/app/src/main/java/ch/threema/app/fragments/BackupDataFragment.java b/app/src/main/java/ch/threema/app/fragments/BackupDataFragment.java
index 8c4e16b1..8e3e53d3 100644
--- a/app/src/main/java/ch/threema/app/fragments/BackupDataFragment.java
+++ b/app/src/main/java/ch/threema/app/fragments/BackupDataFragment.java
@@ -21,6 +21,8 @@
 
 package ch.threema.app.fragments;
 
+import static android.app.Activity.RESULT_OK;
+
 import android.Manifest;
 import android.content.Intent;
 import android.content.pm.PackageManager;
@@ -32,13 +34,6 @@ import android.view.ViewGroup;
 import android.widget.TextView;
 import android.widget.Toast;
 
-import com.google.android.material.button.MaterialButton;
-import com.google.android.material.floatingactionbutton.ExtendedFloatingActionButton;
-
-import org.slf4j.Logger;
-
-import java.util.Date;
-
 import androidx.annotation.NonNull;
 import androidx.annotation.Nullable;
 import androidx.annotation.UiThread;
@@ -47,6 +42,14 @@ import androidx.core.widget.NestedScrollView;
 import androidx.documentfile.provider.DocumentFile;
 import androidx.fragment.app.DialogFragment;
 import androidx.fragment.app.Fragment;
+
+import com.google.android.material.button.MaterialButton;
+import com.google.android.material.floatingactionbutton.ExtendedFloatingActionButton;
+
+import org.slf4j.Logger;
+
+import java.util.Date;
+
 import ch.threema.app.R;
 import ch.threema.app.ThreemaApplication;
 import ch.threema.app.activities.DisableBatteryOptimizationsActivity;
@@ -64,8 +67,6 @@ import ch.threema.app.utils.LocaleUtil;
 import ch.threema.app.utils.TestUtil;
 import ch.threema.base.utils.LoggingUtil;
 
-import static android.app.Activity.RESULT_OK;
-
 public class BackupDataFragment extends Fragment implements
 		GenericAlertDialog.DialogClickListener,
 		PasswordEntryDialog.PasswordEntryDialogClickListener {
@@ -84,7 +85,6 @@ public class BackupDataFragment extends Fragment implements
 	private BackupRestoreDataService backupRestoreDataService;
 	private View fragmentView;
 	private ExtendedFloatingActionButton fab;
-	private ServiceManager serviceManager;
 	private FileService fileService;
 	private PreferenceService preferenceService;
 	private Uri backupUri;
@@ -119,7 +119,7 @@ public class BackupDataFragment extends Fragment implements
 		setRetainInstance(true);
 
 		try {
-			this.serviceManager = ThreemaApplication.getServiceManager();
+			ServiceManager serviceManager = ThreemaApplication.getServiceManager();
 			this.fileService = serviceManager.getFileService();
 			this.preferenceService = serviceManager.getPreferenceService();
 			this.backupRestoreDataService = serviceManager.getBackupRestoreDataService();
@@ -271,7 +271,8 @@ public class BackupDataFragment extends Fragment implements
 					.setBackupAvatars(true)
 					.setBackupMedia(includeMedia)
 					.setBackupThumbnails(includeMedia)
-					.setBackupVideoAndFiles(includeMedia);
+					.setBackupVideoAndFiles(includeMedia)
+					.setBackupNonces(true);
 
 			Intent intent = new Intent(getActivity(), BackupService.class);
 			intent.putExtra(BackupService.EXTRA_BACKUP_RESTORE_DATA_CONFIG, backupRestoreDataConfig);
diff --git a/app/src/main/java/ch/threema/app/fragments/BigMediaFragment.kt b/app/src/main/java/ch/threema/app/fragments/BigMediaFragment.kt
index c4afc526..b910ab92 100644
--- a/app/src/main/java/ch/threema/app/fragments/BigMediaFragment.kt
+++ b/app/src/main/java/ch/threema/app/fragments/BigMediaFragment.kt
@@ -26,7 +26,6 @@ import android.view.LayoutInflater
 import android.view.View
 import android.view.ViewGroup
 import android.widget.ImageView
-import android.widget.ProgressBar
 import androidx.core.view.doOnLayout
 import androidx.fragment.app.Fragment
 import androidx.lifecycle.Lifecycle
@@ -43,6 +42,7 @@ import com.bumptech.glide.load.resource.bitmap.FitCenter
 import com.bumptech.glide.load.resource.bitmap.Rotate
 import com.bumptech.glide.load.resource.drawable.DrawableTransitionOptions
 import com.bumptech.glide.request.RequestOptions
+import com.google.android.material.progressindicator.CircularProgressIndicator
 import pl.droidsonroids.gif.GifImageView
 
 private val logger = LoggingUtil.getThreemaLogger("BigMediaFragment")
@@ -54,7 +54,7 @@ class BigMediaFragment : Fragment() {
     private lateinit var bigImageView: ImageView
     private lateinit var bigGifImageView: GifImageView
     private lateinit var videoEditView: VideoEditView
-    private lateinit var bigProgressBar: ProgressBar
+    private lateinit var bigProgressBar: CircularProgressIndicator
     private var bottomElemHeight: Int = 0
     private var isVideo = false
 
diff --git a/app/src/main/java/ch/threema/app/fragments/ComposeMessageFragment.java b/app/src/main/java/ch/threema/app/fragments/ComposeMessageFragment.java
index 6a303b93..35a8bcc4 100644
--- a/app/src/main/java/ch/threema/app/fragments/ComposeMessageFragment.java
+++ b/app/src/main/java/ch/threema/app/fragments/ComposeMessageFragment.java
@@ -21,11 +21,27 @@
 
 package ch.threema.app.fragments;
 
+import static android.view.WindowManager.LayoutParams.FLAG_SECURE;
+import static ch.threema.app.ThreemaApplication.getAppContext;
+import static ch.threema.app.adapters.ComposeMessageAdapter.MIN_CONSTRAINT_LENGTH;
+import static ch.threema.app.services.messageplayer.MessagePlayer.SOURCE_AUDIORECORDER;
+import static ch.threema.app.services.messageplayer.MessagePlayer.SOURCE_LIFECYCLE;
+import static ch.threema.app.services.messageplayer.MessagePlayer.SOURCE_VOIP;
+import static ch.threema.app.ui.AckjiPopup.ITEM_ACK;
+import static ch.threema.app.ui.AckjiPopup.ITEM_DEC;
+import static ch.threema.app.ui.AckjiPopup.ITEM_IMAGE_REPLY;
+import static ch.threema.app.ui.AckjiPopup.ITEM_INFO;
+import static ch.threema.app.ui.ScrollButtonManager.SCROLLBUTTON_VIEW_TIMEOUT;
+import static ch.threema.app.ui.ScrollButtonManager.TYPE_DOWN;
+import static ch.threema.app.utils.LinkifyUtil.DIALOG_TAG_CONFIRM_LINK;
+import static ch.threema.app.utils.ShortcutUtil.TYPE_CHAT;
+
 import android.Manifest;
 import android.annotation.SuppressLint;
 import android.app.Activity;
 import android.content.ClipData;
 import android.content.ClipboardManager;
+import android.content.ComponentName;
 import android.content.Context;
 import android.content.Intent;
 import android.content.pm.PackageManager;
@@ -46,6 +62,7 @@ import android.text.TextUtils;
 import android.text.TextWatcher;
 import android.text.format.DateUtils;
 import android.util.Pair;
+import android.util.SparseBooleanArray;
 import android.view.Gravity;
 import android.view.HapticFeedbackConstants;
 import android.view.KeyEvent;
@@ -57,6 +74,7 @@ import android.view.MotionEvent;
 import android.view.View;
 import android.view.ViewGroup;
 import android.view.ViewStub;
+import android.view.ViewTreeObserver;
 import android.view.animation.LinearInterpolator;
 import android.view.inputmethod.EditorInfo;
 import android.widget.AbsListView;
@@ -65,7 +83,6 @@ import android.widget.FrameLayout;
 import android.widget.ImageButton;
 import android.widget.ImageView;
 import android.widget.LinearLayout;
-import android.widget.ProgressBar;
 import android.widget.RelativeLayout;
 import android.widget.TextView;
 import android.widget.Toast;
@@ -73,6 +90,7 @@ import android.widget.Toast;
 import androidx.activity.result.ActivityResultLauncher;
 import androidx.activity.result.contract.ActivityResultContracts;
 import androidx.annotation.AnyThread;
+import androidx.annotation.ColorInt;
 import androidx.annotation.MainThread;
 import androidx.annotation.NonNull;
 import androidx.annotation.Nullable;
@@ -84,15 +102,17 @@ import androidx.appcompat.view.ActionMode;
 import androidx.appcompat.widget.SearchView;
 import androidx.appcompat.widget.Toolbar;
 import androidx.coordinatorlayout.widget.CoordinatorLayout;
-import androidx.core.app.ActivityCompat;
 import androidx.core.content.ContextCompat;
 import androidx.core.content.pm.ShortcutManagerCompat;
-import androidx.core.view.MenuItemCompat;
+import androidx.core.view.OnApplyWindowInsetsListener;
 import androidx.core.view.ViewCompat;
+import androidx.core.view.WindowInsetsCompat;
 import androidx.fragment.app.Fragment;
 import androidx.fragment.app.FragmentActivity;
 import androidx.lifecycle.DefaultLifecycleObserver;
 import androidx.lifecycle.LifecycleOwner;
+import androidx.media3.session.MediaController;
+import androidx.media3.session.SessionToken;
 import androidx.swiperefreshlayout.widget.SwipeRefreshLayout;
 import androidx.transition.Slide;
 import androidx.transition.Transition;
@@ -100,8 +120,12 @@ import androidx.transition.TransitionManager;
 
 import com.getkeepsafe.taptargetview.TapTarget;
 import com.getkeepsafe.taptargetview.TapTargetView;
-import com.google.android.material.snackbar.BaseTransientBottomBar;
-import com.google.android.material.snackbar.Snackbar;
+import com.google.android.material.badge.BadgeDrawable;
+import com.google.android.material.badge.BadgeUtils;
+import com.google.android.material.badge.ExperimentalBadgeUtils;
+import com.google.android.material.button.MaterialButton;
+import com.google.android.material.progressindicator.CircularProgressIndicator;
+import com.google.common.util.concurrent.ListenableFuture;
 
 import org.slf4j.Logger;
 
@@ -110,13 +134,13 @@ import java.io.IOException;
 import java.sql.SQLException;
 import java.text.SimpleDateFormat;
 import java.util.ArrayList;
-import java.util.Arrays;
 import java.util.Collections;
 import java.util.Date;
 import java.util.HashMap;
 import java.util.List;
 import java.util.Map;
 import java.util.concurrent.CopyOnWriteArrayList;
+import java.util.concurrent.ExecutionException;
 
 import ch.threema.app.R;
 import ch.threema.app.ThreemaApplication;
@@ -183,6 +207,7 @@ import ch.threema.app.services.PreferenceService;
 import ch.threema.app.services.QRCodeServiceImpl;
 import ch.threema.app.services.RingtoneService;
 import ch.threema.app.services.UserService;
+import ch.threema.app.services.VoiceMessagePlayerService;
 import ch.threema.app.services.WallpaperService;
 import ch.threema.app.services.ballot.BallotService;
 import ch.threema.app.services.license.LicenseService;
@@ -192,14 +217,16 @@ import ch.threema.app.ui.AvatarView;
 import ch.threema.app.ui.ContentCommitComposeEditText;
 import ch.threema.app.ui.ConversationListView;
 import ch.threema.app.ui.DebouncedOnClickListener;
-import ch.threema.app.ui.ListViewSwipeListener;
+import ch.threema.app.ui.ListViewTouchSwipeListener;
 import ch.threema.app.ui.LockableScrollView;
+import ch.threema.app.ui.LongToast;
 import ch.threema.app.ui.MediaItem;
 import ch.threema.app.ui.OngoingCallNoticeMode;
 import ch.threema.app.ui.OngoingCallNoticeView;
 import ch.threema.app.ui.OpenBallotNoticeView;
 import ch.threema.app.ui.QRCodePopup;
 import ch.threema.app.ui.ReportSpamView;
+import ch.threema.app.ui.ScrollButtonManager;
 import ch.threema.app.ui.SelectorDialogItem;
 import ch.threema.app.ui.SendButton;
 import ch.threema.app.ui.SingleToast;
@@ -259,18 +286,6 @@ import ch.threema.storage.models.MessageType;
 import ch.threema.storage.models.ballot.BallotModel;
 import ch.threema.storage.models.data.MessageContentsType;
 
-import static android.view.WindowManager.LayoutParams.FLAG_SECURE;
-import static ch.threema.app.ThreemaApplication.getAppContext;
-import static ch.threema.app.services.messageplayer.MessagePlayer.SOURCE_AUDIORECORDER;
-import static ch.threema.app.services.messageplayer.MessagePlayer.SOURCE_LIFECYCLE;
-import static ch.threema.app.services.messageplayer.MessagePlayer.SOURCE_VOIP;
-import static ch.threema.app.ui.AckjiPopup.ITEM_ACK;
-import static ch.threema.app.ui.AckjiPopup.ITEM_DEC;
-import static ch.threema.app.ui.AckjiPopup.ITEM_IMAGE_REPLY;
-import static ch.threema.app.ui.AckjiPopup.ITEM_INFO;
-import static ch.threema.app.utils.LinkifyUtil.DIALOG_TAG_CONFIRM_LINK;
-import static ch.threema.app.utils.ShortcutUtil.TYPE_CHAT;
-
 public class ComposeMessageFragment extends Fragment implements
 	LifecycleOwner,
 	DefaultLifecycleObserver,
@@ -310,12 +325,15 @@ public class ComposeMessageFragment extends Fragment implements
 
 	public static final long VIBRATION_MSEC = 300;
 	private static final long MESSAGE_PAGE_SIZE = 100;
-	public static final int SCROLLBUTTON_VIEW_TIMEOUT = 3000;
 	private static final int SMOOTHSCROLL_THRESHOLD = 10;
 	private static final int MAX_SELECTED_ITEMS = 100; // may not be larger than MESSAGE_PAGE_SIZE
 	public static final int MAX_FORWARDABLE_ITEMS = 50;
 
 	private static final String CAMERA_URI = "camera_uri";
+	private static final String BUNDLE_LIST_POSITION = "list_position";
+	private static final String BUNDLE_LIST_RECEIVER_ID = "list_receiver_id";
+	private static final String BUNDLE_LIST_TOP = "list_top";
+	private static final String BUNDLE_LIST_LONG_CLICK_ITEM = "list_long_click_item";
 
 	private ContentCommitComposeEditText messageText;
 	private SendButton sendButton;
@@ -341,7 +359,6 @@ public class ComposeMessageFragment extends Fragment implements
 
 	private ActionMode actionMode = null;
 	private ActionMode searchActionMode = null;
-	private ImageView quickscrollDownView = null, quickscrollUpView = null;
 	private FrameLayout dateView = null;
 	private FrameLayout bottomPanel = null;
 	private String identity;
@@ -399,23 +416,14 @@ public class ComposeMessageFragment extends Fragment implements
 		messageService.sendMediaAsync(Collections.singletonList(mediaItem), Collections.singletonList(receiver));
 	});
 
-	private final ActivityResultLauncher<String> readPhoneStatePermissionLauncher = registerForActivityResult(new ActivityResultContracts.RequestPermission(), isGranted -> {
-		Activity composeActivity = getActivity();
-		if (composeActivity == null) {
-			logger.warn("Activity is null; cannot check if permission rationale should be shown");
-			return;
-		}
-		if (!isGranted && !ActivityCompat.shouldShowRequestPermissionRationale(composeActivity, Manifest.permission.READ_PHONE_STATE)) {
-			ConfigUtils.showPermissionRationale(composeActivity, composeActivity.findViewById(R.id.compose_activity_parent), R.string.read_phone_state_short_message);
-		} else {
-			initiateCall();
-		}
-	});
-
 	private boolean listUpdateInProgress = false, isPaused = false;
+	@NonNull
 	private final List<AbstractMessageModel> unreadMessages = new ArrayList<>();
+	@NonNull
 	private final List<AbstractMessageModel> messageValues = new ArrayList<>();
+	@NonNull
 	private final List<AbstractMessageModel> selectedMessages = new ArrayList<>(1);
+	@NonNull
 	private final List<Pair<AbstractMessageModel, Integer>> deleteableMessages = new ArrayList<>(1);
 
 	private EmojiMarkupUtil emojiMarkupUtil;
@@ -440,7 +448,7 @@ public class ComposeMessageFragment extends Fragment implements
 	private BallotService ballotService;
 	private DatabaseServiceNew databaseServiceNew;
 	private LayoutInflater layoutInflater;
-	private ListViewSwipeListener listViewSwipeListener;
+	private ListViewTouchSwipeListener listViewTouchSwipeListener;
 
 	private GroupService groupService;
 	private GroupCallManager groupCallManager;
@@ -455,14 +463,15 @@ public class ComposeMessageFragment extends Fragment implements
 	private int listInstanceTop = 0;
 	private String listInstanceReceiverId = null;
 	private String conversationUid = null;
-	private int unreadCount = 0;
+	private int unreadCount = 0, recentlyAddedCount = 0;
 	private final QuoteInfo quoteInfo = new QuoteInfo();
 	private TextView searchCounter;
-	private ProgressBar searchProgress;
+	private CircularProgressIndicator searchProgress;
 	private ImageView searchNextButton, searchPreviousButton;
 
 	private OngoingCallNoticeView ongoingCallNotice;
 	private GroupCallObserver groupCallObserver;
+	private ScrollButtonManager scrollButtonManager;
 
 	@SuppressLint("SimpleDateFormat")
 	private final SimpleDateFormat dayFormatter = new SimpleDateFormat("yyyyMMdd");
@@ -530,8 +539,6 @@ public class ComposeMessageFragment extends Fragment implements
 	private final Runnable dateViewTask = () -> RuntimeUtil.runOnUiThread(() -> {
 		if (dateView != null && dateView.getVisibility() == View.VISIBLE) {
 			AnimationUtil.slideOutAnimation(dateView, false, 1f, null);
-			AnimationUtil.setFadingVisibility(quickscrollUpView, View.GONE);
-			AnimationUtil.setFadingVisibility(quickscrollDownView, View.GONE);
 		}
 	});
 
@@ -600,6 +607,20 @@ public class ComposeMessageFragment extends Fragment implements
 								if (!newMessage.isStatusMessage() && newMessage.getType() != MessageType.VOIP_STATUS && newMessage.getType() != MessageType.GROUP_CALL_STATUS) {
 									playReceivedSound();
 								}
+
+								if (convListView != null) {
+									convListView.post(new Runnable() {
+										@Override
+										public void run() {
+											if (convListView.canScrollList(View.SCROLL_AXIS_VERTICAL)) {
+												// list view is not fully scrolled to the bottom
+												if (scrollButtonManager != null) {
+													scrollButtonManager.showButton(ScrollButtonManager.TYPE_DOWN, recentlyAddedCount);
+												}
+											}
+										}
+									});
+								}
 							}
 						}
 					}
@@ -665,6 +686,11 @@ public class ComposeMessageFragment extends Fragment implements
 					}
 				});
 		}
+
+		@Override
+		public void onResendDismissed(@NonNull AbstractMessageModel messageModel) {
+			// Ignore
+		}
 	};
 
 	private final GroupListener groupListener = new GroupListener() {
@@ -725,7 +751,8 @@ public class ComposeMessageFragment extends Fragment implements
 		}
 
 		private void updateGroupCallObserverRegistration() {
-			if (groupService.isGroupMember(groupModel)) {
+			// groupModel may be null if Fragment was re-configured with a new intent
+			if (isGroupChat && groupModel != null && groupService.isGroupMember(groupModel)) {
 				registerGroupCallObserver();
 			} else {
 				// Remove ongoing group call notice if not a member of the group anymore
@@ -811,9 +838,6 @@ public class ComposeMessageFragment extends Fragment implements
 	};
 
 	private final MessagePlayerListener messagePlayerListener = new MessagePlayerListener() {
-		@Override
-		public void onAudioStreamChanged(int newStreamType) { }
-
 		@Override
 		public void onAudioPlayEnded(AbstractMessageModel messageModel) {
 			// Play next audio message, if any
@@ -954,7 +978,7 @@ public class ComposeMessageFragment extends Fragment implements
 		}
 		super.onCreate(savedInstanceState);
 
-		setRetainInstance(true);
+//		setRetainInstance(true);
 
 		ListenerManager.contactTypingListeners.add(this.contactTypingListener);
 		ListenerManager.messageListeners.add(this.messageListener, true);
@@ -965,9 +989,12 @@ public class ComposeMessageFragment extends Fragment implements
 		ListenerManager.qrCodeScanListener.add(this.qrCodeScanListener);
 		ListenerManager.ballotListeners.add(this.ballotListener);
 		VoipListenerManager.callEventListener.add(this.voipCallEventListener);
+
+		initializeMedia3Controller();
 	}
 
 	@Override
+	@ExperimentalBadgeUtils
 	public View onCreateView(@NonNull LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {
 		logger.debug("onCreateView");
 
@@ -1001,7 +1028,7 @@ public class ComposeMessageFragment extends Fragment implements
 			this.listViewTop = this.convListView.getPaddingTop();
 			this.swipeRefreshLayout = fragmentView.findViewById(R.id.ptr_layout);
 			this.swipeRefreshLayout.setOnRefreshListener(this);
-			this.swipeRefreshLayout.setColorSchemeResources(R.color.accent_light);
+			this.swipeRefreshLayout.setColorSchemeResources(R.color.md_theme_light_primary);
 			this.swipeRefreshLayout.setSize(SwipeRefreshLayout.LARGE);
 			this.coordinatorLayout = fragmentView.findViewById(R.id.coordinator);
 			this.messageText = fragmentView.findViewById(R.id.embedded_text_editor);
@@ -1028,8 +1055,9 @@ public class ComposeMessageFragment extends Fragment implements
 
 			this.emojiMarkupUtil = EmojiMarkupUtil.getInstance();
 			this.wallpaperView = this.fragmentView.findViewById(R.id.wallpaper_view);
-			this.quickscrollUpView = this.fragmentView.findViewById(R.id.quickscroll_top);
-			this.quickscrollDownView = this.fragmentView.findViewById(R.id.quickscroll_bottom);
+			final MaterialButton quickscrollUpView = this.fragmentView.findViewById(R.id.quickscroll_top);
+			final MaterialButton quickscrollDownView = this.fragmentView.findViewById(R.id.quickscroll_bottom);
+			final FrameLayout quickscrollDownContainer = this.fragmentView.findViewById(R.id.quickscroll_bottom_container);
 			this.dateView = this.fragmentView.findViewById(R.id.date_separator_container);
 			this.dateTextView = this.fragmentView.findViewById(R.id.text_view);
 
@@ -1049,6 +1077,40 @@ public class ComposeMessageFragment extends Fragment implements
 			this.reportSpamView = this.fragmentView.findViewById(R.id.report_spam_layout);
 			this.reportSpamView.setListener(this);
 
+			quickscrollDownContainer.getViewTreeObserver().addOnGlobalLayoutListener(new ViewTreeObserver.OnGlobalLayoutListener() {
+                @Override
+                public void onGlobalLayout() {
+	                quickscrollDownContainer.getViewTreeObserver().removeOnGlobalLayoutListener(this);
+
+	                Context context = getContext();
+					if (context != null) {
+						final BadgeDrawable quickscrollDownBadge = BadgeDrawable.createFromResource(context, R.xml.badge_compose);
+						quickscrollDownBadge.setHorizontalOffset(getResources().getDimensionPixelOffset(R.dimen.quickscroll_badge_offset));
+						quickscrollDownBadge.setVerticalOffset(getResources().getDimensionPixelOffset(R.dimen.quickscroll_badge_offset));
+						BadgeUtils.attachBadgeDrawable(quickscrollDownBadge, quickscrollDownView, quickscrollDownContainer);
+						quickscrollDownBadge.setVisible(false);
+
+						scrollButtonManager = new ScrollButtonManager(quickscrollUpView, quickscrollDownContainer, quickscrollDownBadge);
+					}
+                }
+            });
+
+			quickscrollDownView.setOnClickListener(v -> {
+				removeDateView();
+				if (scrollButtonManager != null) {
+					scrollButtonManager.hideAllButtons();
+				};
+				scrollList(Integer.MAX_VALUE);
+
+			});
+			quickscrollUpView.setOnClickListener(v -> {
+				removeDateView();
+				if (scrollButtonManager != null) {
+					scrollButtonManager.hideAllButtons();
+				};
+				scrollList(0);
+			});
+
 			this.getValuesFromBundle(savedInstanceState);
 			this.handleIntent(activity.getIntent());
 			this.setupListeners();
@@ -1192,9 +1254,9 @@ public class ComposeMessageFragment extends Fragment implements
 	}
 
 	private void showEmojiPicker() {
-		logger.info("Emoji button clicked");
+		logger.debug("Emoji button clicked");
 		if (activity.isSoftKeyboardOpen() && !isEmojiPickerShown()) {
-			logger.info("Show emoji picker after keyboard close");
+			logger.debug("Show emoji picker after keyboard close");
 			activity.runOnSoftKeyboardClose(() -> {
 				if (emojiPicker != null) {
 					emojiPicker.show(activity.loadStoredSoftKeyboardHeight());
@@ -1205,7 +1267,7 @@ public class ComposeMessageFragment extends Fragment implements
 		} else {
 			if (emojiPicker != null) {
 				if (emojiPicker.isShown()) {
-					logger.info("EmojPicker currently shown. Closing.");
+					logger.debug("Emoji picker currently shown. Closing.");
 					if (ConfigUtils.isLandscape(activity) &&
 						!ConfigUtils.isTabletLayout() &&
 						preferenceService.isFullscreenIme()) {
@@ -1217,7 +1279,7 @@ public class ComposeMessageFragment extends Fragment implements
 						}
 					}
 				} else {
-					logger.info("Show emoji picker immediately");
+					logger.debug("Show emoji picker immediately");
 					emojiPicker.show(activity.loadStoredSoftKeyboardHeight());
 				}
 			}
@@ -1250,27 +1312,29 @@ public class ComposeMessageFragment extends Fragment implements
 					}
 				}
 
-				ViewCompat.setOnApplyWindowInsetsListener(rootView, (v, insets) -> {
-					logger.debug("system window top " + insets.getSystemWindowInsetTop() + " bottom " + insets.getSystemWindowInsetBottom());
-					logger.debug("stable insets top " + insets.getStableInsetTop() + " bottom " + insets.getStableInsetBottom());
-
-					if (insets.getSystemWindowInsetBottom() <= insets.getStableInsetBottom()) {
-						activity.onSoftKeyboardClosed();
-					} else {
-						activity.onSoftKeyboardOpened(insets.getSystemWindowInsetBottom() - insets.getStableInsetBottom());
+				ViewCompat.setOnApplyWindowInsetsListener(rootView, new OnApplyWindowInsetsListener() {
+					@NonNull
+					@Override
+					public WindowInsetsCompat onApplyWindowInsets(@NonNull View v, @NonNull WindowInsetsCompat insets) {
+						ThreemaToolbarActivity attachedActivity = activity;
+						if (attachedActivity == null) {
+							attachedActivity = (ThreemaToolbarActivity) getActivity();
+						}
+						if (attachedActivity != null) {
+							if (insets.isVisible(WindowInsetsCompat.Type.ime())) {
+								attachedActivity.onSoftKeyboardOpened(insets.getInsets(WindowInsetsCompat.Type.ime()).bottom - insets.getInsets(WindowInsetsCompat.Type.navigationBars()).bottom);
+							} else {
+								attachedActivity.onSoftKeyboardClosed();
+							}
+						}
+						return ViewCompat.onApplyWindowInsets(v, insets);
 					}
-					return insets;
 				});
 			} catch (NullPointerException e) {
 				logger.error("Exception", e);
 			}
 			activity.addOnSoftKeyboardChangedListener(this);
 		}
-
-		// restore action mode after rotate if the activity was detached
-		if (convListView != null && convListView.getCheckedItemCount() > 0 && actionMode != null) {
-			actionMode = ((AppCompatActivity) requireActivity()).startSupportActionMode(new ComposeMessageAction(this.longClickItem));
-		}
 	}
 
 	@Override
@@ -1328,6 +1392,13 @@ public class ComposeMessageFragment extends Fragment implements
 							messageReceiver.getUniqueIdString().equals(listInstanceReceiverId)) {
 							logger.debug("restoring position " + listInstancePosition);
 							convListView.setSelectionFromTop(listInstancePosition, listInstanceTop);
+							if (activity != null && convListView.getCheckedItemCount() > 0 && actionMode == null) {
+								SparseBooleanArray itemPositions = convListView.getCheckedItemPositions();
+								for (int i = 0; i < itemPositions.size(); i++) {
+									selectedMessages.add(composeMessageAdapter.getItem(itemPositions.keyAt(i)));
+								}
+								actionMode = activity.startSupportActionMode(new ComposeMessageAction(this.longClickItem));
+							}
 						} else {
 							jumpToFirstUnreadMessage();
 						}
@@ -1358,11 +1429,6 @@ public class ComposeMessageFragment extends Fragment implements
 			this.notificationService.setVisibleReceiver(null);
 		}
 
-		//stop all playing audio messages (incoming call?)
-		if (this.messagePlayerService != null) {
-			this.messagePlayerService.pauseAll(SOURCE_LIFECYCLE);
-		}
-
 		// save unfinished text
 		saveMessageDraft();
 
@@ -1423,6 +1489,10 @@ public class ComposeMessageFragment extends Fragment implements
 			ListenerManager.ballotListeners.remove(this.ballotListener);
 			VoipListenerManager.callEventListener.remove(this.voipCallEventListener);
 
+			if (scrollButtonManager != null) {
+				scrollButtonManager.hideAllButtons();
+			}
+
 			dismissTooltipPopup(workTooltipPopup, true);
 			workTooltipPopup = null;
 
@@ -1441,7 +1511,6 @@ public class ComposeMessageFragment extends Fragment implements
 				return;
 			}
 
-			//release all players!
 			if (this.messagePlayerService != null) {
 				this.messagePlayerService.release();
 			}
@@ -1475,6 +1544,7 @@ public class ComposeMessageFragment extends Fragment implements
 				this.composeMessageAdapter = null;
 			}
 
+			releaseMedia3Controller();
 		} catch (Exception x) {
 			logger.error("Exception", x);
 		}
@@ -1482,8 +1552,7 @@ public class ComposeMessageFragment extends Fragment implements
 		super.onDestroy();
 	}
 
-	private void removeScrollButtons() {
-		logger.debug("removeScrollButtons");
+	private void removeDateView() {
 		if (dateView != null && dateView.getVisibility() == View.VISIBLE) {
 			AnimationUtil.slideOutAnimation(dateView, false, 1f, null);
 		}
@@ -1496,7 +1565,6 @@ public class ComposeMessageFragment extends Fragment implements
 	private void setupListeners() {
 		setupConversationListScrollListener();
 		setupConversationListSwipeListener();
-		setupQuickscrollClickListeners();
 		setupSendButtonClickListener();
 		setupAttachButtonClickListener();
 		setupMessageTextListeners();
@@ -1508,16 +1576,20 @@ public class ComposeMessageFragment extends Fragment implements
 		this.convListView.setOnScrollListener(new AbsListView.OnScrollListener() {
 			@Override
 			public void onScrollStateChanged(AbsListView absListView, int scrollState) {
-				if (listViewSwipeListener != null) {
-					listViewSwipeListener.setEnabled(scrollState != AbsListView.OnScrollListener.SCROLL_STATE_TOUCH_SCROLL);
+				if (listViewTouchSwipeListener != null) {
+					listViewTouchSwipeListener.setEnabled(scrollState != AbsListView.OnScrollListener.SCROLL_STATE_TOUCH_SCROLL);
 				}
 
 				if (!absListView.canScrollList(View.SCROLL_AXIS_VERTICAL)) {
-					AnimationUtil.setFadingVisibility(quickscrollDownView, View.GONE);
+					if (scrollButtonManager != null) {
+						scrollButtonManager.hideButton(ScrollButtonManager.TYPE_DOWN);
+					}
 				}
 
 				if (!absListView.canScrollList(-View.SCROLL_AXIS_VERTICAL)) {
-					AnimationUtil.setFadingVisibility(quickscrollUpView, View.GONE);
+					if (scrollButtonManager != null) {
+						scrollButtonManager.hideButton(ScrollButtonManager.TYPE_UP);
+					}
 				}
 			}
 
@@ -1532,15 +1604,26 @@ public class ComposeMessageFragment extends Fragment implements
 					if (firstVisibleItem != lastFirstVisibleItem) {
 						if (lastFirstVisibleItem < firstVisibleItem) {
 							// scrolling down
-							AnimationUtil.setFadingVisibility(quickscrollUpView, View.GONE);
 							if (view.canScrollList(View.SCROLL_AXIS_VERTICAL)) {
-								AnimationUtil.setFadingVisibility(quickscrollDownView, View.VISIBLE);
+								if (scrollButtonManager != null) {
+									scrollButtonManager.showButton(ScrollButtonManager.TYPE_DOWN, 0);
+								}
+							} else {
+								if (scrollButtonManager != null) {
+									scrollButtonManager.hideButton(ScrollButtonManager.TYPE_UP);
+								}
+								recentlyAddedCount = 0;
 							}
 						} else {
 							// scrolling up
-							AnimationUtil.setFadingVisibility(quickscrollDownView, View.GONE);
 							if (view.canScrollList(-View.SCROLL_AXIS_VERTICAL)) {
-								AnimationUtil.setFadingVisibility(quickscrollUpView, View.VISIBLE);
+								if (scrollButtonManager != null) {
+									scrollButtonManager.showButton(ScrollButtonManager.TYPE_UP, 0);
+								}
+							} else {
+								if (scrollButtonManager != null) {
+									scrollButtonManager.hideButton(ScrollButtonManager.TYPE_DOWN);
+								}
 							}
 						}
 
@@ -1574,9 +1657,9 @@ public class ComposeMessageFragment extends Fragment implements
 	}
 
 	private void setupConversationListSwipeListener() {
-		listViewSwipeListener = new ListViewSwipeListener(
+		listViewTouchSwipeListener = new ListViewTouchSwipeListener(
 			this.convListView,
-			new ListViewSwipeListener.DismissCallbacks() {
+			new ListViewTouchSwipeListener.DismissCallbacks() {
 				@Override
 				public boolean canSwipe(int position) {
 					if (actionMode != null) {
@@ -1635,17 +1718,6 @@ public class ComposeMessageFragment extends Fragment implements
 		);
 	}
 
-	private void setupQuickscrollClickListeners() {
-		this.quickscrollDownView.setOnClickListener(v -> {
-			removeScrollButtons();
-			scrollList(Integer.MAX_VALUE);
-		});
-		this.quickscrollUpView.setOnClickListener(v -> {
-			removeScrollButtons();
-			scrollList(0);
-		});
-	}
-
 	private void setupSendButtonClickListener() {
 		if (sendButton != null) {
 			sendButton.setOnClickListener(new DebouncedOnClickListener(500) {
@@ -1786,7 +1858,7 @@ public class ComposeMessageFragment extends Fragment implements
 
 	private void setBackgroundWallpaper() {
 		if (isAdded() && this.wallpaperView != null) {
-			wallpaperService.setupWallpaperBitmap(this.messageReceiver, this.wallpaperView, ConfigUtils.isLandscape(activity));
+			wallpaperService.setupWallpaperBitmap(this.messageReceiver, this.wallpaperView, ConfigUtils.isLandscape(activity), ConfigUtils.isTheDarkSide(activity));
 		}
 	}
 
@@ -1828,6 +1900,10 @@ public class ComposeMessageFragment extends Fragment implements
 			this.identity = bundle.getString(ThreemaApplication.INTENT_DATA_CONTACT);
 			this.intentTimestamp = bundle.getLong(ThreemaApplication.INTENT_DATA_TIMESTAMP, 0L);
 			this.cameraUri = bundle.getParcelable(CAMERA_URI);
+			this.listInstancePosition = bundle.getInt(BUNDLE_LIST_POSITION);
+			this.listInstanceReceiverId = bundle.getString(BUNDLE_LIST_RECEIVER_ID);
+			this.listInstanceTop = bundle.getInt(BUNDLE_LIST_TOP);
+			this.longClickItem = bundle.getInt(BUNDLE_LIST_LONG_CLICK_ITEM);
 		}
 	}
 
@@ -1838,6 +1914,16 @@ public class ComposeMessageFragment extends Fragment implements
 			return;
 		}
 
+		if (this.messagePlayerService != null) {
+			this.messagePlayerService.stopAll();
+			this.messagePlayerService.release();
+		}
+
+		MediaController mediaController = getMedia3Controller();
+		if (mediaController != null) {
+			mediaController.stop();
+		}
+
 		resetDefaultValues();
 
 		this.closeQuoteMode();
@@ -1896,7 +1982,7 @@ public class ComposeMessageFragment extends Fragment implements
 									location[0] += actionBarAvatarView.getWidth() / 2;
 									location[1] += actionBarAvatarView.getHeight();
 
-									workTooltipPopup = new TooltipPopup(getActivity(), R.string.preferences__tooltip_work_hint_shown, R.layout.popup_tooltip_top_left_work, this, new Intent(getActivity(), WorkExplainActivity.class));
+									workTooltipPopup = new TooltipPopup(getActivity(), R.string.preferences__tooltip_work_hint_shown, this, new Intent(getActivity(), WorkExplainActivity.class), R.drawable.ic_badge_work_24dp);
 									workTooltipPopup.show(getActivity(), actionBarAvatarView, getString(R.string.tooltip_work_hint), TooltipPopup.ALIGN_BELOW_ANCHOR_ARROW_LEFT, location, 4000);
 								}
 							}, 1000);
@@ -1937,17 +2023,19 @@ public class ComposeMessageFragment extends Fragment implements
 						return;
 					}
 					final View itemView = toolbar.findViewById(R.id.menu_threema_call);
+					final @ColorInt int textColor = ConfigUtils.getColorFromAttribute(getContext(), R.attr.colorOnPrimary);
+
 					try {
 						TapTargetView.showFor(activity,
 							TapTarget.forView(itemView, getString(R.string.group_calls_tooltip_title), getString(R.string.group_calls_tooltip_text))
-								.outerCircleColor(ConfigUtils.getAppTheme(activity) == ConfigUtils.THEME_DARK ? R.color.dark_accent : R.color.accent_light)      // Specify a color for the outer circle
+								.outerCircleColorInt(ConfigUtils.getColorFromAttribute(getContext(), R.attr.colorPrimary))      // Specify a color for the outer circle
 								.outerCircleAlpha(0.96f)            // Specify the alpha amount for the outer circle
 								.targetCircleColor(android.R.color.white)   // Specify a color for the target circle
 								.titleTextSize(24)                  // Specify the size (in sp) of the title text
-								.titleTextColor(android.R.color.white)      // Specify the color of the title text
+								.titleTextColorInt(textColor)      // Specify the color of the title text
 								.descriptionTextSize(18)            // Specify the size (in sp) of the description text
-								.descriptionTextColor(android.R.color.white)  // Specify the color of the description text
-								.textColor(android.R.color.white)            // Specify a color for both the title and description text
+								.descriptionTextColorInt(textColor)  // Specify the color of the description text
+								.textColorInt(textColor)            // Specify a color for both the title and description text
 								.textTypeface(Typeface.SANS_SERIF)  // Specify a typeface for the text
 								.dimColor(android.R.color.black)            // If set, will dim behind the view with 30% opacity of the given color
 								.drawShadow(true)                   // Whether to draw a drop shadow or not
@@ -2046,7 +2134,7 @@ public class ComposeMessageFragment extends Fragment implements
 					if (Build.VERSION.SDK_INT < Build.VERSION_CODES.M || ContextCompat.checkSelfPermission(activity, Manifest.permission.READ_CONTACTS) == PackageManager.PERMISSION_GRANTED) {
 						this.identity = ContactUtil.getIdentityFromViewIntent(activity, intent);
 					} else {
-						Toast.makeText(activity, R.string.permission_contacts_required, Toast.LENGTH_LONG).show();
+						LongToast.makeText(activity, R.string.permission_contacts_required, Toast.LENGTH_LONG).show();
 					}
 				}
 			}
@@ -2069,7 +2157,7 @@ public class ComposeMessageFragment extends Fragment implements
 				return;
 			}
 			this.messageReceiver = this.contactService.createReceiver(this.contactModel);
-			this.typingIndicatorTextWatcher = new TypingIndicatorTextWatcher(this.userService, contactModel);
+			this.typingIndicatorTextWatcher = new TypingIndicatorTextWatcher(this.contactService, contactModel);
 			this.conversationUid = ConversationUtil.getIdentityConversationUid(this.identity);
 		}
 
@@ -2092,18 +2180,20 @@ public class ComposeMessageFragment extends Fragment implements
 
 		// report shortcut as used
 		if (preferenceService.isDirectShare()) {
-			try {
-				ShortcutManagerCompat.reportShortcutUsed(activity, this.messageReceiver.getUniqueIdString());
-			} catch (IllegalStateException e) {
-				logger.debug("Failed to report shortcut use", e);
-			}
+			RuntimeUtil.runOnWorkerThread(() -> {
+				try {
+					ShortcutManagerCompat.reportShortcutUsed(activity, this.messageReceiver.getUniqueIdString());
+				} catch (IllegalStateException e) {
+					logger.debug("Failed to report shortcut use", e);
+				}
+			});
 		}
 
 		this.initConversationList(intent.hasExtra(EXTRA_API_MESSAGE_ID) && intent.hasExtra(EXTRA_SEARCH_QUERY) ? () -> {
 				String apiMessageId = intent.getStringExtra(EXTRA_API_MESSAGE_ID);
 				String searchQuery = intent.getStringExtra(EXTRA_SEARCH_QUERY);
 
-				AbstractMessageModel targetMessageModel = messageService.getMessageModelByApiMessageId(apiMessageId, messageReceiver.getType());
+				AbstractMessageModel targetMessageModel = messageService.getMessageModelByApiMessageIdAndReceiver(apiMessageId, messageReceiver);
 
 				if (targetMessageModel != null && !TestUtil.empty(apiMessageId) && !TestUtil.empty(searchQuery)) {
 					String identity;
@@ -2119,7 +2209,7 @@ public class ComposeMessageFragment extends Fragment implements
 						searchQuery,
 						apiMessageId,
 						targetMessageModel,
-						messageReceiver.getType(),
+						messageReceiver,
 						null,
 						null
 					);
@@ -2157,6 +2247,11 @@ public class ComposeMessageFragment extends Fragment implements
 		this.messageText.setText("");
 		this.messageText.setMessageReceiver(this.messageReceiver);
 		this.openBallotNoticeView.setMessageReceiver(this.messageReceiver);
+		this.openBallotNoticeView.setOnCloseClickedListener(() -> {
+			toggleOpenBallotNoticeViewVisibility();
+			getActivity().invalidateOptionsMenu();
+		});
+
 
 		// restore draft before setting predefined text
 		restoreMessageDraft(false);
@@ -2193,7 +2288,7 @@ public class ComposeMessageFragment extends Fragment implements
 	private void deleteSelectedMessages() {
 		deleteableMessages.clear();
 
-		if (selectedMessages != null && selectedMessages.size() > 0) {
+		if (!selectedMessages.isEmpty()) {
 			for (AbstractMessageModel messageModel : selectedMessages) {
 				if (messageModel != null) {
 					deleteableMessages.add(new Pair<>(messageModel, composeMessageAdapter.getPosition(messageModel)));
@@ -2383,8 +2478,9 @@ public class ComposeMessageFragment extends Fragment implements
 		this.composeMessageAdapter.add(message);
 
 		if (!this.isPaused) {
+			this.recentlyAddedCount++;
 			new Thread(
-					new ReadMessagesRoutine(Arrays.asList(message),
+					new ReadMessagesRoutine(Collections.singletonList(message),
 							this.messageService,
 							this.notificationService)
 			).start();
@@ -2669,7 +2765,8 @@ public class ComposeMessageFragment extends Fragment implements
 				thumbnailCache,
 				ConfigUtils.getPreferredThumbnailWidth(getContext(), false),
 				ComposeMessageFragment.this,
-				unreadCount
+				unreadCount,
+				mediaControllerFuture
 			);
 
 			//adding footer before setting the list adapter (android < 4.4)
@@ -2683,12 +2780,18 @@ public class ComposeMessageFragment extends Fragment implements
 			composeMessageAdapter.setOnClickListener(new ComposeMessageAdapter.OnClickListener() {
 				@Override
 				public void click(View view, int position, AbstractMessageModel messageModel) {
-					if (messageModel.isOutbox() && (messageModel.getState() == MessageState.SENDFAILED || messageModel.getState() == MessageState.FS_KEY_MISMATCH) && messageReceiver.isMessageBelongsToMe(messageModel)) {
-						try {
-							messageService.resendMessage(messageModel, messageReceiver, null);
-						} catch (Exception e) {
-							RuntimeUtil.runOnUiThread(() -> Toast.makeText(getContext(), R.string.original_file_no_longer_avilable, Toast.LENGTH_LONG).show());
-						}
+					if (actionMode == null && messageModel.isOutbox() && (messageModel.getState() == MessageState.SENDFAILED || messageModel.getState() == MessageState.FS_KEY_MISMATCH) && messageReceiver.isMessageBelongsToMe(messageModel)) {
+						ThreemaApplication.sendMessageExecutorService.execute(() -> {
+							try {
+								messageService.resendMessage(messageModel, messageReceiver, null);
+							} catch (Exception e) {
+								RuntimeUtil.runOnUiThread(() -> {
+									if (isAdded()) {
+										Toast.makeText(getContext(), R.string.original_file_no_longer_avilable, Toast.LENGTH_LONG).show();
+									}
+								});
+							}
+						});
 					} else {
 						if (searchActionMode == null) {
 							onListItemClick(view, position, messageModel);
@@ -2705,8 +2808,13 @@ public class ComposeMessageFragment extends Fragment implements
 
 				@Override
 				public boolean touch(View view, MotionEvent motionEvent, AbstractMessageModel messageModel) {
-					if (listViewSwipeListener != null && searchActionMode == null) {
-						return listViewSwipeListener.onTouch(view, motionEvent);
+					if (actionMode != null) {
+						return false;
+					}
+					if (listViewTouchSwipeListener != null && searchActionMode == null) {
+						// performs (long) click manually
+						//  to propagate event to click listeners only after checking for swipe
+						return listViewTouchSwipeListener.onTouch(view, motionEvent);
 					}
 					return false;
 				}
@@ -2729,18 +2837,28 @@ public class ComposeMessageFragment extends Fragment implements
 								intent.putExtra(ThreemaApplication.INTENT_DATA_CONTACT_READONLY, true);
 								IntentDataUtil.append(contactModel, intent);
 							}
-							AnimationUtil.startActivityForResult(getActivity(), view, intent, 0);
+							getActivity().startActivity(intent);
 						}
 					}
 				}
 
 				@SuppressLint("DefaultLocale")
 				@Override
-				public void onSearchResultsUpdate(int searchResultsIndex, int searchResultsSize) {
+				public void onSearchResultsUpdate(int searchResultsIndex, int searchResultsSize, final int queryLength) {
 					RuntimeUtil.runOnUiThread(() -> {
 						if (searchCounter != null) {
 							try {
-								searchCounter.setText(String.format("%d / %d", searchResultsIndex, searchResultsSize));
+								if (queryLength < MIN_CONSTRAINT_LENGTH && searchResultsSize == 0) {
+									searchCounter.setText(getString(R.string.min_n_chars, MIN_CONSTRAINT_LENGTH));
+									searchCounter.setVisibility(View.VISIBLE);
+									searchPreviousButton.setVisibility(View.INVISIBLE);
+									searchNextButton.setVisibility(View.INVISIBLE);
+								} else {
+									searchCounter.setText(String.format("%d / %d", searchResultsIndex, searchResultsSize));
+									searchCounter.setVisibility(View.VISIBLE);
+									searchPreviousButton.setVisibility(View.VISIBLE);
+									searchNextButton.setVisibility(View.VISIBLE);
+								}
 							} catch (Exception e) {
 								//
 							}
@@ -2753,8 +2871,6 @@ public class ComposeMessageFragment extends Fragment implements
 					RuntimeUtil.runOnUiThread(() -> {
 						if (searchNextButton != null && searchPreviousButton != null) {
 							try {
-								searchPreviousButton.setVisibility(inProgress ? View.INVISIBLE : View.VISIBLE);
-								searchNextButton.setVisibility(inProgress ? View.INVISIBLE : View.VISIBLE);
 								searchProgress.setVisibility(inProgress ? View.VISIBLE : View.INVISIBLE);
 							} catch (Exception e) {
 								//
@@ -2783,7 +2899,8 @@ public class ComposeMessageFragment extends Fragment implements
 	private void jumpToFirstUnreadMessage() {
 		if (unreadCount > 0) {
 			synchronized (this.messageValues) {
-				int position = Math.min(convListView.getCount() - unreadCount, this.messageValues.size() - 1);
+				int entryCount = convListView.getCount();
+				int position = Math.min(entryCount - unreadCount, this.messageValues.size() - 1);
 				while (position >= 0) {
 					if (this.messageValues.get(position) instanceof FirstUnreadMessageModel) {
 						break;
@@ -2791,6 +2908,7 @@ public class ComposeMessageFragment extends Fragment implements
 					position--;
 
 				}
+				final int finalUnreadCount = unreadCount;
 				unreadCount = 0;
 
 				if (position > 0) {
@@ -2798,7 +2916,14 @@ public class ComposeMessageFragment extends Fragment implements
 					logger.debug("jump to initial position " + finalPosition);
 
 					convListView.setSelection(finalPosition);
-					convListView.postDelayed(() -> convListView.setSelection(finalPosition), 750);
+					convListView.postDelayed(() -> {
+						convListView.setSelection(finalPosition);
+						if (convListView.canScrollList(View.SCROLL_AXIS_VERTICAL)) {
+							if (scrollButtonManager != null) {
+								scrollButtonManager.showButton(TYPE_DOWN, finalUnreadCount);
+							}
+						}
+					}, 500);
 
 					return;
 				}
@@ -2813,7 +2938,7 @@ public class ComposeMessageFragment extends Fragment implements
 		if (this.isGroupChat) {
 			Map<String, Integer> colorIndices = this.groupService.getGroupMemberIDColorIndices(this.groupModel);
 			Map<String, Integer> colors = new HashMap<>();
-			boolean darkTheme = ConfigUtils.getAppTheme(activity) == ConfigUtils.THEME_DARK;
+			boolean darkTheme = ConfigUtils.isTheDarkSide(getContext());
 			for (Map.Entry<String, Integer> entry : colorIndices.entrySet()) {
 				String memberIdentity = entry.getKey();
 				int memberColorIndex = entry.getValue();
@@ -2879,7 +3004,7 @@ public class ComposeMessageFragment extends Fragment implements
 			if (QuoteUtil.isQuoteV1(messageModel.getBody())) {
 				QuoteUtil.QuoteContent quoteContent = QuoteUtil.getQuoteContent(
 					messageModel,
-					messageReceiver.getType(),
+					messageReceiver,
 					false,
 					thumbnailCache,
 					getContext(),
@@ -2904,7 +3029,7 @@ public class ComposeMessageFragment extends Fragment implements
 			} else if (messageModel.getQuotedMessageId() != null) {
 				QuoteUtil.QuoteContent quoteContent = QuoteUtil.getQuoteContent(
 					messageModel,
-					messageReceiver.getType(),
+					messageReceiver,
 					false,
 					thumbnailCache,
 					getContext(),
@@ -2917,7 +3042,7 @@ public class ComposeMessageFragment extends Fragment implements
 						searchActionMode.finish();
 					}
 
-					AbstractMessageModel quotedMessageModel = messageService.getMessageModelByApiMessageId(messageModel.getQuotedMessageId(), messageReceiver.getType());
+					AbstractMessageModel quotedMessageModel = messageService.getMessageModelByApiMessageIdAndReceiver(messageModel.getQuotedMessageId(), messageReceiver);
 					if (quotedMessageModel != null) {
 						ComposeMessageAdapter.ConversationListFilter filter = (ComposeMessageAdapter.ConversationListFilter) composeMessageAdapter.getQuoteFilter(quoteContent);
 						searchV2Quote(quotedMessageModel.getApiMessageId(), filter);
@@ -2971,6 +3096,7 @@ public class ComposeMessageFragment extends Fragment implements
 								} else {
 									SingleToast.getInstance().showShortText(getString(R.string.quote_not_found));
 									swipeRefreshLayout.setEnabled(false);
+									DialogUtil.dismissDialog(getParentFragmentManager(), DIALOG_TAG_SEARCHING, true);
 								}
 							}
 						}
@@ -3170,7 +3296,7 @@ public class ComposeMessageFragment extends Fragment implements
 					@Override
 					public void onError(final String errorMessage) {
 						RuntimeUtil.runOnUiThread(() -> {
-							Toast.makeText(getActivity(), errorMessage, Toast.LENGTH_LONG).show();
+							LongToast.makeText(getActivity(), errorMessage, Toast.LENGTH_LONG).show();
 							if (!TestUtil.empty(message)) {
 								messageText.setText(message);
 								messageText.setSelection(messageText.length());
@@ -3211,7 +3337,7 @@ public class ComposeMessageFragment extends Fragment implements
 		Intent intent = new Intent(activity, VoiceRecorderActivity.class);
 		IntentDataUtil.addMessageReceiverToIntent(intent, messageReceiver);
 		activity.startActivityForResult(intent, ACTIVITY_ID_VOICE_RECORDER);
-		activity.overridePendingTransition(R.anim.slide_in_left_short, 0);
+		activity.overridePendingTransition(R.anim.fast_fade_in, R.anim.fast_fade_out);
 	}
 
 	private void copySelectedMessagesToClipboard() {
@@ -3237,11 +3363,10 @@ public class ComposeMessageFragment extends Fragment implements
 				ClipData clipData = ClipData.newPlainText(null, body.toString());
 				if (clipData != null) {
 					clipboard.setPrimaryClip(clipData);
-					Snackbar.make(
-						coordinatorLayout,
+					Toast.makeText(
+						getContext(),
 						getResources().getQuantityString(R.plurals.message_copied, selectedMessages.size()),
-						BaseTransientBottomBar.LENGTH_SHORT
-					).show();
+						Toast.LENGTH_SHORT).show();
 				}
 			}
 		} catch (Exception e) {
@@ -3272,7 +3397,7 @@ public class ComposeMessageFragment extends Fragment implements
 
 						@Override
 						public void error(String message) {
-							RuntimeUtil.runOnUiThread(() -> Toast.makeText(activity, message, Toast.LENGTH_LONG).show());
+							RuntimeUtil.runOnUiThread(() -> LongToast.makeText(activity, message, Toast.LENGTH_LONG).show());
 						}
 					});
 					return null;
@@ -3303,7 +3428,7 @@ public class ComposeMessageFragment extends Fragment implements
 
 					@Override
 					public void error(final String message) {
-						RuntimeUtil.runOnUiThread(() -> Toast.makeText(activity, message, Toast.LENGTH_LONG).show());
+						RuntimeUtil.runOnUiThread(() -> LongToast.makeText(activity, message, Toast.LENGTH_LONG).show());
 					}
 				});
 			}
@@ -3453,6 +3578,7 @@ public class ComposeMessageFragment extends Fragment implements
 			actionBarSubtitleTextView.setVisibility(View.VISIBLE);
 			groupService.loadAvatarIntoImage(groupModel, actionBarAvatarView.getAvatarView(), AvatarOptions.PRESET_DEFAULT_FALLBACK);
 			actionBarAvatarView.setBadgeVisible(false);
+			actionBarAvatarView.setContentDescription(getString(R.string.prefs_group_notifications));
 		} else if (this.isDistributionListChat) {
 			actionBarSubtitleTextView.setText(this.distributionListService.getMembersString(this.distributionListModel));
 			actionBarSubtitleTextView.setVisibility(View.VISIBLE);
@@ -3463,6 +3589,7 @@ public class ComposeMessageFragment extends Fragment implements
 				distributionListService.loadAvatarIntoImage(distributionListModel, actionBarAvatarView.getAvatarView(), AvatarOptions.PRESET_DEFAULT_AVATAR_NO_CACHE);
 			}
 			actionBarAvatarView.setBadgeVisible(false);
+			actionBarAvatarView.setContentDescription(getString(R.string.distribution_list));
 		} else {
 			if (contactModel != null) {
 				this.actionBarSubtitleImageView.setContactModel(contactModel);
@@ -3470,6 +3597,7 @@ public class ComposeMessageFragment extends Fragment implements
 				contactService.loadAvatarIntoImage(contactModel, this.actionBarAvatarView.getAvatarView(), AvatarOptions.PRESET_RESPECT_SETTINGS);
 				this.actionBarAvatarView.setBadgeVisible(contactService.showBadge(contactModel));
 			}
+			actionBarAvatarView.setContentDescription(getString(R.string.prefs_header_chat));
 		}
 		this.actionBarTitleTextView.invalidate();
 		this.actionBarSubtitleTextView.invalidate();
@@ -3569,7 +3697,7 @@ public class ComposeMessageFragment extends Fragment implements
 				}
 				Context context = getContext();
 				if (context != null) {
-					ConfigUtils.themeMenuItem(showOpenBallotWindowMenuItem, ConfigUtils.getColorFromAttribute(context, R.attr.textColorSecondary));
+					ConfigUtils.tintMenuItem(context, showOpenBallotWindowMenuItem, R.attr.colorOnSurface);
 				}
 			}
 		}.execute();
@@ -3723,7 +3851,7 @@ public class ComposeMessageFragment extends Fragment implements
 			previewIntent.putExtra(ThreemaApplication.INTENT_DATA_TEXT, this.actionBarTitleTextView.getText().toString());
 		}
 		previewIntent.putExtra(ThreemaApplication.INTENT_DATA_PICK_FROM_CAMERA, true);
-		AnimationUtil.startActivityForResult(activity, null, previewIntent, ThreemaActivity.ACTIVITY_ID_SEND_MEDIA);
+		activity.startActivityForResult(previewIntent, ThreemaActivity.ACTIVITY_ID_SEND_MEDIA);
 	}
 
 	private void showPermissionRationale(int stringResource) {
@@ -3732,107 +3860,96 @@ public class ComposeMessageFragment extends Fragment implements
 
 	@Override
 	public boolean onOptionsItemSelected(MenuItem item) {
-		switch (item.getItemId()) {
-			case android.R.id.home:
-				NavigationUtil.navigateUpToHome(activity);
-				break;
-			case R.id.menu_search_messages:
-				searchActionMode = activity.startSupportActionMode(new SearchActionMode());
-				break;
-			case R.id.menu_gallery:
-				Intent mediaGalleryIntent = new Intent(activity, MediaGalleryActivity.class);
-				activity.startActivity(addExtrasToIntent(mediaGalleryIntent, this.messageReceiver));
-				break;
-			case R.id.menu_threema_call:
-				initiateCall();
-				break;
-			case R.id.menu_wallpaper:
-				wallpaperService.selectWallpaper(this, this.wallpaperLauncher, this.messageReceiver, () -> RuntimeUtil.runOnUiThread(this::setBackgroundWallpaper));
-				activity.overridePendingTransition(R.anim.fast_fade_in, R.anim.fast_fade_out);
-				break;
-			case R.id.menu_muted:
-				if (!isDistributionListChat) {
-					Intent intent;
-					int[] location = new int[2];
-
-					if (isGroupChat) {
-						intent = new Intent(activity, GroupNotificationsActivity.class);
-						intent.putExtra(ThreemaApplication.INTENT_DATA_GROUP, this.groupId);
-					} else {
-						intent = new Intent(activity, ContactNotificationsActivity.class);
-						intent.putExtra(ThreemaApplication.INTENT_DATA_CONTACT, this.identity);
-					}
-					if (ToolbarUtil.getMenuItemCenterPosition(activity.getToolbar(), R.id.menu_muted, location)) {
-						intent.putExtra((ThreemaApplication.INTENT_DATA_ANIM_CENTER), location);
-					}
-					activity.startActivity(intent);
-				}
-				break;
-			case R.id.menu_block_contact:
-				if (this.blackListIdentityService.has(contactModel.getIdentity())) {
-					this.blackListIdentityService.toggle(activity, contactModel);
-					updateBlockMenu();
+		final int id = item.getItemId();
+		if (id == android.R.id.home) {
+			NavigationUtil.navigateUpToHome(activity);
+		} else if (id == R.id.menu_search_messages) {
+			searchActionMode = activity.startSupportActionMode(new SearchActionMode());
+		} else if (id == R.id.menu_gallery) {
+			Intent mediaGalleryIntent = new Intent(activity, MediaGalleryActivity.class);
+			activity.startActivity(addExtrasToIntent(mediaGalleryIntent, this.messageReceiver));
+		} else if (id == R.id.menu_threema_call) {
+			initiateCall();
+		} else if (id == R.id.menu_wallpaper) {
+			wallpaperService.selectWallpaper(this, this.wallpaperLauncher, this.messageReceiver, () -> RuntimeUtil.runOnUiThread(this::setBackgroundWallpaper));
+		} else if (id == R.id.menu_muted) {
+			if (!isDistributionListChat) {
+				Intent intent;
+				int[] location = new int[2];
+
+				if (isGroupChat) {
+					intent = new Intent(activity, GroupNotificationsActivity.class);
+					intent.putExtra(ThreemaApplication.INTENT_DATA_GROUP, this.groupId);
 				} else {
-					GenericAlertDialog.newInstance(R.string.block_contact, R.string.really_block_contact, R.string.yes, R.string.no).setTargetFragment(this).show(getFragmentManager(), DIALOG_TAG_CONFIRM_BLOCK);
+					intent = new Intent(activity, ContactNotificationsActivity.class);
+					intent.putExtra(ThreemaApplication.INTENT_DATA_CONTACT, this.identity);
 				}
-				break;
-			case R.id.menu_delete_distribution_list:
-				GenericAlertDialog.newInstance(R.string.really_delete_distribution_list,
-						R.string.really_delete_distribution_list_message,
-						R.string.ok,
-						R.string.cancel)
-						.setTargetFragment(this)
-						.setData(distributionListModel)
-						.show(getFragmentManager(), CONFIRM_TAG_DELETE_DISTRIBUTION_LIST);
-				break;
-			case R.id.menu_shortcut:
-				createShortcut();
-				break;
-			case R.id.menu_empty_chat:
-				GenericAlertDialog.newInstance(R.string.empty_chat_title,
+				if (ToolbarUtil.getMenuItemCenterPosition(activity.getToolbar(), R.id.menu_muted, location)) {
+					intent.putExtra((ThreemaApplication.INTENT_DATA_ANIM_CENTER), location);
+				}
+				activity.startActivity(intent);
+			}
+		} else if (id == R.id.menu_block_contact) {
+			if (this.blackListIdentityService.has(contactModel.getIdentity())) {
+				this.blackListIdentityService.toggle(activity, contactModel);
+				updateBlockMenu();
+			} else {
+				GenericAlertDialog.newInstance(R.string.block_contact, R.string.really_block_contact, R.string.yes, R.string.no).setTargetFragment(this).show(getFragmentManager(), DIALOG_TAG_CONFIRM_BLOCK);
+			}
+		} else if (id == R.id.menu_delete_distribution_list) {
+			GenericAlertDialog.newInstance(R.string.really_delete_distribution_list,
+					R.string.really_delete_distribution_list_message,
+					R.string.ok,
+					R.string.cancel)
+				.setTargetFragment(this)
+				.setData(distributionListModel)
+				.show(getFragmentManager(), CONFIRM_TAG_DELETE_DISTRIBUTION_LIST);
+		} else if (id == R.id.menu_shortcut) {
+			createShortcut();
+		} else if (id == R.id.menu_empty_chat) {
+			GenericAlertDialog.newInstance(R.string.empty_chat_title,
 					R.string.empty_chat_confirm,
 					R.string.ok,
 					R.string.cancel)
-					.setTargetFragment(this)
-					.show(getFragmentManager(), DIALOG_TAG_EMPTY_CHAT);
-				break;
-			case R.id.menu_ballot_window_show:
-				if (openBallotNoticeView.isShown()) {
-					preferenceService.setBallotOverviewHidden(true);
-					openBallotNoticeView.hide(true);
-				} else {
-					preferenceService.setBallotOverviewHidden(false);
-					openBallotNoticeView.show(true);
-				}
-				break;
-			case R.id.menu_ballot_show_all:
-				Intent intent = new Intent(getContext(), BallotOverviewActivity.class);
-				IntentDataUtil.addMessageReceiverToIntent(intent, messageReceiver);
-				startActivity(intent);
-				break;
-			case R.id.menu_group_request_show_all:
-				Intent groupRequestsOverviewIntent = new Intent(getContext(), IncomingGroupRequestActivity.class);
-				groupRequestsOverviewIntent.putExtra(ThreemaApplication.INTENT_DATA_GROUP_API, groupModel.getApiGroupId());
-				startActivity(groupRequestsOverviewIntent);
-				break;
-			case R.id.menu_group_requests_show:
-				if (openGroupRequestNoticeView.isShown()) {
-					preferenceService.setGroupRequestsOverviewHidden(true);
-					openGroupRequestNoticeView.hide(true);
-				} else {
-					preferenceService.setGroupRequestsOverviewHidden(false);
-					openGroupRequestNoticeView.show(true);
-				}
-				break;
+				.setTargetFragment(this)
+				.show(getFragmentManager(), DIALOG_TAG_EMPTY_CHAT);
+		} else if (id == R.id.menu_ballot_window_show) {
+			toggleOpenBallotNoticeViewVisibility();
+		} else if (id == R.id.menu_ballot_show_all) {
+			Intent intent = new Intent(getContext(), BallotOverviewActivity.class);
+			IntentDataUtil.addMessageReceiverToIntent(intent, messageReceiver);
+			startActivity(intent);
+		} else if (id == R.id.menu_group_request_show_all) {
+			Intent groupRequestsOverviewIntent = new Intent(getContext(), IncomingGroupRequestActivity.class);
+			groupRequestsOverviewIntent.putExtra(ThreemaApplication.INTENT_DATA_GROUP_API, groupModel.getApiGroupId());
+			startActivity(groupRequestsOverviewIntent);
+		} else if (id == R.id.menu_group_requests_show) {
+			if (openGroupRequestNoticeView.isShown()) {
+				preferenceService.setGroupRequestsOverviewHidden(true);
+				openGroupRequestNoticeView.hide(true);
+			} else {
+				preferenceService.setGroupRequestsOverviewHidden(false);
+				openGroupRequestNoticeView.show(true);
+			}
 		}
 		return false;
 	}
 
+	private void toggleOpenBallotNoticeViewVisibility() {
+		if (openBallotNoticeView.isShown()) {
+			preferenceService.setBallotOverviewHidden(true);
+			openBallotNoticeView.hide(true);
+		} else {
+			preferenceService.setBallotOverviewHidden(false);
+			openBallotNoticeView.show(true);
+		}
+	}
+
 	private void initiateCall() {
 		if (isGroupChat) {
 			GroupCallUtilKt.initiateCall(activity, groupModel);
 		} else {
-			VoipUtil.initiateCall(activity, contactModel, false, null, readPhoneStatePermissionLauncher);
+			VoipUtil.initiateCall(activity, contactModel, false, null);
 		}
 	}
 
@@ -3960,6 +4077,9 @@ public class ComposeMessageFragment extends Fragment implements
 				hasDefaultRendering = hasDefaultRendering || isDefaultRendering(message);
 			}
 
+			// Sharing text message is only possible when there is exactly one selected message
+			isShareable = isShareable && (selectedMessages.size() == 1 || !containsTextMessage(selectedMessages));
+
 			quoteItem.setVisible(isQuotable);
 			qrItem.setVisible(showAsQRCode);
 			showText.setVisible(showAsText);
@@ -4012,7 +4132,8 @@ public class ComposeMessageFragment extends Fragment implements
 			return message.isAvailable()                    // if the message is available
 				&& (message.getType() == MessageType.IMAGE  // and message is an image
 				|| message.getType() == MessageType.VIDEO   // or video
-				|| message.getType() == MessageType.FILE);  // or voice message
+				|| message.getType() == MessageType.FILE    // or voice message
+				|| message.getType() == MessageType.TEXT);  // or text message
 		}
 
 		private boolean isCopyable(@NonNull AbstractMessageModel message) {
@@ -4027,6 +4148,15 @@ public class ComposeMessageFragment extends Fragment implements
 				&& message.getFileData().getRenderingType() == FileData.RENDERING_DEFAULT;  // and default rendering is set
 		}
 
+		private boolean containsTextMessage(@NonNull List<AbstractMessageModel> messages) {
+			for (AbstractMessageModel message : messages) {
+				if (message.getType() == MessageType.TEXT) {
+					return true;
+				}
+			}
+			return false;
+		}
+
 		@Override
 		public boolean onCreateActionMode(ActionMode mode, Menu menu) {
 			if (this.position == AbsListView.INVALID_POSITION) {
@@ -4069,51 +4199,44 @@ public class ComposeMessageFragment extends Fragment implements
 
 		@Override
 		public boolean onActionItemClicked(ActionMode mode, MenuItem item) {
-			if (selectedMessages == null || selectedMessages.size() < 1) {
+			if (selectedMessages.isEmpty()) {
 				mode.finish();
 				return true;
 			}
 
-			switch (item.getItemId()) {
-				case R.id.menu_message_copy:
-					copySelectedMessagesToClipboard();
-					mode.finish();
-					break;
-				case R.id.menu_message_discard:
-					deleteSelectedMessages();
-					break;
-				case R.id.menu_message_forward:
-					startForwardMessage();
-					mode.finish();
-					break;
-				case R.id.menu_message_save:
-					if (ConfigUtils.requestWriteStoragePermissions(activity, ComposeMessageFragment.this, PERMISSION_REQUEST_SAVE_MESSAGE)) {
-						fileService.saveMedia(activity, coordinatorLayout, new CopyOnWriteArrayList<>(selectedMessages), false);
-					}
-					mode.finish();
-					break;
-				case R.id.menu_message_qrcode:
-					showAsQrCode(((ThreemaToolbarActivity) activity).getToolbar());
-					mode.finish();
-					break;
-				case R.id.menu_share:
-					shareMessages();
-					mode.finish();
-					break;
-				case R.id.menu_message_quote:
-					startQuoteMode(null, () -> RuntimeUtil.runOnUiThread(() -> {
-						messageText.requestFocus();
-						EditTextUtil.showSoftKeyboard(messageText);
-					}));
-					mode.finish();
-					break;
-				case R.id.menu_show_text:
-					showTextChatBubble(selectedMessages.get(0));
-					mode.finish();
-					break;
-				default:
-					return false;
+			final int id = item.getItemId();
+			if (id == R.id.menu_message_copy) {
+				copySelectedMessagesToClipboard();
+				mode.finish();
+			} else if (id == R.id.menu_message_discard) {
+				deleteSelectedMessages();
+			} else if (id == R.id.menu_message_forward) {
+				startForwardMessage();
+				mode.finish();
+			} else if (id == R.id.menu_message_save) {
+				if (ConfigUtils.requestWriteStoragePermissions(activity, ComposeMessageFragment.this, PERMISSION_REQUEST_SAVE_MESSAGE)) {
+					fileService.saveMedia(activity, coordinatorLayout, new CopyOnWriteArrayList<>(selectedMessages), false);
+				}
+				mode.finish();
+			} else if (id == R.id.menu_message_qrcode) {
+				showAsQrCode(activity.getToolbar());
+				mode.finish();
+			} else if (id == R.id.menu_share) {
+				shareMessages();
+				mode.finish();
+			} else if (id == R.id.menu_message_quote) {
+				startQuoteMode(null, () -> RuntimeUtil.runOnUiThread(() -> {
+					messageText.requestFocus();
+					EditTextUtil.showSoftKeyboard(messageText);
+				}));
+				mode.finish();
+			} else if (id == R.id.menu_show_text) {
+				showTextChatBubble(selectedMessages.get(0));
+				mode.finish();
+			} else {
+				return false;
 			}
+
 			return true;
 		}
 
@@ -4143,7 +4266,6 @@ public class ComposeMessageFragment extends Fragment implements
 		Intent intent = new Intent(getContext(), TextChatBubbleActivity.class);
 		IntentDataUtil.append(messageModel, intent);
 		activity.startActivity(intent);
-		activity.overridePendingTransition(R.anim.fast_fade_in, R.anim.fast_fade_out);
 	}
 
 	private void showAsQrCode(View v) {
@@ -4257,9 +4379,6 @@ public class ComposeMessageFragment extends Fragment implements
 	}
 
 	private void preserveListInstanceValues() {
-		// this instance variable will probably survive an orientation change
-		// since setRetainInstance() is set in onCreate()
-		// so we don't put it into a bundle in onSaveInstanceState
 		listInstancePosition = AbsListView.INVALID_POSITION;
 
 		if (convListView != null && composeMessageAdapter != null) {
@@ -4283,6 +4402,10 @@ public class ComposeMessageFragment extends Fragment implements
 		outState.putInt(ThreemaApplication.INTENT_DATA_GROUP, this.groupId);
 		outState.putLong(ThreemaApplication.INTENT_DATA_DISTRIBUTION_LIST, this.distributionListId);
 		outState.putString(ThreemaApplication.INTENT_DATA_CONTACT, this.identity);
+		outState.putInt(BUNDLE_LIST_POSITION, this.listInstancePosition);
+		outState.putString(BUNDLE_LIST_RECEIVER_ID, this.listInstanceReceiverId);
+		outState.putInt(BUNDLE_LIST_TOP, this.listInstanceTop);
+		outState.putInt(BUNDLE_LIST_LONG_CLICK_ITEM, this.longClickItem);
 
 		super.onSaveInstanceState(outState);
 	}
@@ -4315,7 +4438,6 @@ public class ComposeMessageFragment extends Fragment implements
 
 				FrameLayout searchPreviousLayout = (FrameLayout) layoutInflater.inflate(R.layout.button_search_action, null);
 				searchPreviousButton = searchPreviousLayout.findViewById(R.id.search_button);
-				searchPreviousButton.setImageDrawable(ConfigUtils.getThemedDrawable(activity, R.drawable.ic_keyboard_arrow_down_outline));
 				searchPreviousButton.setScaleY(-1);
 				searchPreviousButton.setOnClickListener(v -> composeMessageAdapter.previousMatchPosition());
 				linearLayoutOfSearchView.addView(searchPreviousLayout);
@@ -4323,7 +4445,6 @@ public class ComposeMessageFragment extends Fragment implements
 				FrameLayout searchNextLayout = (FrameLayout) layoutInflater.inflate(R.layout.button_search_action, null);
 				searchNextButton = searchNextLayout.findViewById(R.id.search_button);
 				searchProgress = searchNextLayout.findViewById(R.id.next_progress);
-				searchNextButton.setImageDrawable(ConfigUtils.getThemedDrawable(activity, R.drawable.ic_keyboard_arrow_down_outline));
 				searchNextButton.setOnClickListener(v -> composeMessageAdapter.nextMatchPosition());
 				linearLayoutOfSearchView.addView(searchNextLayout);
 			}
@@ -4509,7 +4630,7 @@ public class ComposeMessageFragment extends Fragment implements
 				BallotUtil.closeBallot((AppCompatActivity) requireActivity(), (BallotModel) data, ballotService);
 				break;
 			case DIALOG_TAG_CONFIRM_CALL:
-				VoipUtil.initiateCall((AppCompatActivity) requireActivity(), contactModel, false, null, readPhoneStatePermissionLauncher);
+				VoipUtil.initiateCall((AppCompatActivity) requireActivity(), contactModel, false, null);
 				break;
 			case DIALOG_TAG_EMPTY_CHAT:
 				emptyChat();
@@ -4586,7 +4707,9 @@ public class ComposeMessageFragment extends Fragment implements
 	/* properly dispose of popups */
 
 	private void dismissMentionPopup() {
-		messageText.dismissMentionPopup();
+		if (messageText != null) {
+			messageText.dismissMentionPopup();
+		}
 	}
 
 	private void dismissTooltipPopup(TooltipPopup tooltipPopup, boolean immediate) {
@@ -4605,6 +4728,7 @@ public class ComposeMessageFragment extends Fragment implements
 				List<AbstractMessageModel> unreadMessages = messageReceiver.getUnreadMessages();
 				if (unreadMessages != null && unreadMessages.size() > 0) {
 					new Thread(new ReadMessagesRoutine(unreadMessages, this.messageService, this.notificationService)).start();
+					notificationService.cancel(messageReceiver);
 				}
 			} catch (SQLException e) {
 				logger.error("Exception", e);
@@ -4630,7 +4754,7 @@ public class ComposeMessageFragment extends Fragment implements
 		} else {
 			if (isAdded()) {
 				// refresh wallpaper to reflect orientation change
-				this.wallpaperService.setupWallpaperBitmap(this.messageReceiver, this.wallpaperView, ConfigUtils.isLandscape(activity));
+				this.wallpaperService.setupWallpaperBitmap(this.messageReceiver, this.wallpaperView, ConfigUtils.isLandscape(activity), ConfigUtils.isTheDarkSide(activity));
 			}
 		}
 	}
@@ -4644,11 +4768,15 @@ public class ComposeMessageFragment extends Fragment implements
 				this.messageText.append(messageDraft);
 				String apiMessageId = ThreemaApplication.getQuoteDraft(this.messageReceiver.getUniqueIdString());
 				if (apiMessageId != null) {
-					AbstractMessageModel quotedMessageModel = messageService.getMessageModelByApiMessageId(apiMessageId, messageReceiver.getType());
+					AbstractMessageModel quotedMessageModel = messageService.getMessageModelByApiMessageIdAndReceiver(apiMessageId, messageReceiver);
 					if (quotedMessageModel != null && QuoteUtil.isQuoteable(quotedMessageModel)) {
 						startQuoteMode(quotedMessageModel, null);
 					}
 				}
+				// If the draft is just "@", then dismiss the mention popup when restoring the draft
+				if ("@".equals(messageDraft)) {
+					dismissMentionPopup();
+				}
 			} else {
 				this.messageText.setText("");
 			}
@@ -4702,7 +4830,7 @@ public class ComposeMessageFragment extends Fragment implements
 			spammerContactModel,
 			unused -> {
 				if (isAdded()) {
-					Toast.makeText(getContext(), R.string.spam_successfully_reported, Toast.LENGTH_LONG).show();
+					LongToast.makeText(getContext(), R.string.spam_successfully_reported, Toast.LENGTH_LONG).show();
 				}
 
 				if (block) {
@@ -4723,7 +4851,7 @@ public class ComposeMessageFragment extends Fragment implements
 			},
 			message -> {
 				if (isAdded()) {
-					Toast.makeText(getContext(), requireContext().getString(R.string.spam_error_reporting, message), Toast.LENGTH_LONG).show();
+					LongToast.makeText(getContext(), requireContext().getString(R.string.spam_error_reporting, message), Toast.LENGTH_LONG).show();
 				}
 			}
 		);
@@ -4734,5 +4862,42 @@ public class ComposeMessageFragment extends Fragment implements
 			activity.finish();
 		}
 	}
+
+	/*--------------------------------------------------------------------------------------------*/
+
+	private ListenableFuture<MediaController> mediaControllerFuture;
+
+	private void initializeMedia3Controller() {
+		SessionToken sessionToken = new SessionToken(getAppContext(), new ComponentName(getAppContext(), VoiceMessagePlayerService.class));
+
+		mediaControllerFuture = new MediaController.Builder(getAppContext(), sessionToken).buildAsync();
+	}
+
+	@Nullable
+	private MediaController getMedia3Controller() {
+		if (mediaControllerFuture.isDone()) {
+			try {
+				return mediaControllerFuture.get();
+			} catch (ExecutionException e) {
+				logger.error("Media Controller exception", e);
+			} catch (InterruptedException e) {
+				logger.error("Media Controller interrupted exception", e);
+				Thread.currentThread().interrupt();
+			}
+		}
+		return null;
+	}
+
+	private void releaseMedia3Controller() {
+		MediaController mediaController = getMedia3Controller();
+		if (mediaController != null) {
+			mediaController.stop();
+			mediaController.release();
+		}
+
+		if (mediaControllerFuture != null) {
+			MediaController.releaseFuture(mediaControllerFuture);
+		}
+	}
 }
 
diff --git a/app/src/main/java/ch/threema/app/fragments/ContactsSectionFragment.java b/app/src/main/java/ch/threema/app/fragments/ContactsSectionFragment.java
index 2f11550a..e7092713 100644
--- a/app/src/main/java/ch/threema/app/fragments/ContactsSectionFragment.java
+++ b/app/src/main/java/ch/threema/app/fragments/ContactsSectionFragment.java
@@ -21,6 +21,11 @@
 
 package ch.threema.app.fragments;
 
+import static android.view.MenuItem.SHOW_AS_ACTION_ALWAYS;
+import static android.view.MenuItem.SHOW_AS_ACTION_COLLAPSE_ACTION_VIEW;
+import static android.view.MenuItem.SHOW_AS_ACTION_NEVER;
+import static ch.threema.app.ThreemaApplication.WORKER_WORK_SYNC;
+
 import android.Manifest;
 import android.annotation.SuppressLint;
 import android.app.Activity;
@@ -49,7 +54,18 @@ import android.widget.FrameLayout;
 import android.widget.ListView;
 import android.widget.Toast;
 
-import com.google.android.material.chip.Chip;
+import androidx.annotation.NonNull;
+import androidx.annotation.Nullable;
+import androidx.appcompat.widget.SearchView;
+import androidx.core.util.Pair;
+import androidx.core.view.MenuItemCompat;
+import androidx.localbroadcastmanager.content.LocalBroadcastManager;
+import androidx.swiperefreshlayout.widget.SwipeRefreshLayout;
+import androidx.work.ExistingWorkPolicy;
+import androidx.work.OneTimeWorkRequest;
+import androidx.work.WorkManager;
+
+import com.google.android.material.button.MaterialButton;
 import com.google.android.material.floatingactionbutton.ExtendedFloatingActionButton;
 import com.google.android.material.tabs.TabLayout;
 
@@ -62,16 +78,6 @@ import java.util.HashSet;
 import java.util.List;
 import java.util.Set;
 
-import androidx.annotation.NonNull;
-import androidx.annotation.Nullable;
-import androidx.appcompat.widget.SearchView;
-import androidx.core.util.Pair;
-import androidx.core.view.MenuItemCompat;
-import androidx.localbroadcastmanager.content.LocalBroadcastManager;
-import androidx.swiperefreshlayout.widget.SwipeRefreshLayout;
-import androidx.work.ExistingWorkPolicy;
-import androidx.work.OneTimeWorkRequest;
-import androidx.work.WorkManager;
 import ch.threema.app.R;
 import ch.threema.app.ThreemaApplication;
 import ch.threema.app.activities.AddContactActivity;
@@ -110,7 +116,6 @@ import ch.threema.app.ui.EmptyView;
 import ch.threema.app.ui.LockingSwipeRefreshLayout;
 import ch.threema.app.ui.ResumePauseHandler;
 import ch.threema.app.ui.SelectorDialogItem;
-import ch.threema.app.utils.AnimationUtil;
 import ch.threema.app.utils.BitmapUtil;
 import ch.threema.app.utils.ConfigUtils;
 import ch.threema.app.utils.EditTextUtil;
@@ -128,11 +133,6 @@ import ch.threema.domain.models.VerificationLevel;
 import ch.threema.localcrypto.MasterKeyLockedException;
 import ch.threema.storage.models.ContactModel;
 
-import static android.view.MenuItem.SHOW_AS_ACTION_ALWAYS;
-import static android.view.MenuItem.SHOW_AS_ACTION_COLLAPSE_ACTION_VIEW;
-import static android.view.MenuItem.SHOW_AS_ACTION_NEVER;
-import static ch.threema.app.ThreemaApplication.WORKER_WORK_SYNC;
-
 public class ContactsSectionFragment
 		extends MainFragment
 		implements
@@ -171,7 +171,7 @@ public class ContactsSectionFragment
 
 	private ResumePauseHandler resumePauseHandler;
 	private ListView listView;
-	private Chip contactsCounterChip;
+	private MaterialButton contactsCounterButton;
 	private LockingSwipeRefreshLayout swipeRefreshLayout;
 	private ServiceManager serviceManager;
 	private SearchView searchView;
@@ -567,10 +567,12 @@ public class ContactsSectionFragment
 		super.onPrepareOptionsMenu(menu);
 
 		// move search item to popup if the lock item is visible
-		if (lockAppService != null && lockAppService.isLockingEnabled()) {
-			this.searchMenuItem.setShowAsAction(SHOW_AS_ACTION_NEVER | SHOW_AS_ACTION_COLLAPSE_ACTION_VIEW);
-		} else {
-			this.searchMenuItem.setShowAsAction(SHOW_AS_ACTION_ALWAYS | SHOW_AS_ACTION_COLLAPSE_ACTION_VIEW);
+		if (this.searchMenuItem != null) {
+			if (lockAppService != null && lockAppService.isLockingEnabled()) {
+				this.searchMenuItem.setShowAsAction(SHOW_AS_ACTION_NEVER | SHOW_AS_ACTION_COLLAPSE_ACTION_VIEW);
+			} else {
+				this.searchMenuItem.setShowAsAction(SHOW_AS_ACTION_ALWAYS | SHOW_AS_ACTION_COLLAPSE_ACTION_VIEW);
+			}
 		}
 	}
 
@@ -624,9 +626,7 @@ public class ContactsSectionFragment
 
 	private int getDesiredWorkTab(boolean isOnFirstLaunch, Bundle savedInstanceState) {
 		if (ConfigUtils.isWorkBuild()) {
-			if (isOnFirstLaunch) {
-				return TAB_WORK_ONLY; // may be overridden later if there are no work contacts
-			} else {
+			if (!isOnFirstLaunch) {
 				if (savedInstanceState != null) {
 					return savedInstanceState.getInt(BUNDLE_SELECTED_TAB, TAB_ALL_CONTACTS);
 				} else if (workTabLayout != null) {
@@ -716,7 +716,7 @@ public class ContactsSectionFragment
 
 	private void updateContactsCounter(int numContacts, @Nullable FetchResults counts) {
 		if (getActivity() != null && listView != null && isAdded()) {
-			if (contactsCounterChip != null) {
+			if (contactsCounterButton != null) {
 				if (counts != null) {
 					ListenerManager.contactCountListener.handle(listener -> listener.onNewContactsCountUpdated(counts.last24h));
 				}
@@ -726,10 +726,10 @@ public class ContactsSectionFragment
 					if (counts != null) {
 						builder.append(" (+").append(counts.last30d).append(" / ").append(getString(R.string.thirty_days_abbrev)).append(")");
 					}
-					contactsCounterChip.setText(builder.toString());
-					contactsCounterChip.setVisibility(View.VISIBLE);
+					contactsCounterButton.setText(builder.toString());
+					contactsCounterButton.setVisibility(View.VISIBLE);
 				} else {
-					contactsCounterChip.setVisibility(View.GONE);
+					contactsCounterButton.setVisibility(View.GONE);
 				}
 			}
 			if (ConfigUtils.isWorkBuild() && counts != null) {
@@ -812,7 +812,6 @@ public class ContactsSectionFragment
 		Intent intent = new Intent(getActivity(), AddContactActivity.class);
 		intent.putExtra(AddContactActivity.EXTRA_ADD_BY_ID, true);
 		startActivity(intent);
-		getActivity().overridePendingTransition(R.anim.fast_fade_in, R.anim.fast_fade_out);
 	}
 
 	@Override
@@ -850,7 +849,7 @@ public class ContactsSectionFragment
 					mode.getMenuInflater().inflate(R.menu.action_contacts_section, menu);
 					actionMode = mode;
 
-					ConfigUtils.themeMenu(menu, ConfigUtils.getColorFromAttribute(getContext(), R.attr.colorAccent));
+					ConfigUtils.tintMenu(menu, ConfigUtils.getColorFromAttribute(getContext(), R.attr.colorPrimary));
 
 					return true;
 				}
@@ -894,7 +893,7 @@ public class ContactsSectionFragment
 				listView.addHeaderView(headerView, null, false);
 
 				View footerView = View.inflate(getActivity(), R.layout.footer_contact_section, null);
-				this.contactsCounterChip = footerView.findViewById(R.id.contact_counter_text);
+				this.contactsCounterButton = footerView.findViewById(R.id.contact_counter_text);
 				listView.addFooterView(footerView, null, false);
 
 				headerView.findViewById(R.id.share_container).setOnClickListener(new View.OnClickListener() {
@@ -912,7 +911,7 @@ public class ContactsSectionFragment
 			this.swipeRefreshLayout = fragmentView.findViewById(R.id.swipe_container);
 			this.swipeRefreshLayout.setOnRefreshListener(this);
 			this.swipeRefreshLayout.setDistanceToTriggerSync(getResources().getConfiguration().screenHeightDp / 3);
-			this.swipeRefreshLayout.setColorSchemeResources(R.color.accent_light);
+			this.swipeRefreshLayout.setColorSchemeResources(R.color.md_theme_light_primary);
 			this.swipeRefreshLayout.setSize(SwipeRefreshLayout.LARGE);
 
 			this.floatingButtonView = fragmentView.findViewById(R.id.floating);
@@ -1096,14 +1095,14 @@ public class ContactsSectionFragment
 		intent.putExtra(ThreemaApplication.INTENT_DATA_CONTACT, identity);
 		intent.putExtra(ThreemaApplication.INTENT_DATA_EDITFOCUS, Boolean.TRUE);
 
-		AnimationUtil.startActivityForResult(getActivity(), v, intent, ThreemaActivity.ACTIVITY_ID_COMPOSE_MESSAGE);
+		getActivity().startActivityForResult(intent, ThreemaActivity.ACTIVITY_ID_COMPOSE_MESSAGE);
 	}
 
 	private void openContact(@Nullable View view, String identity) {
 		Intent intent = new Intent(getActivity(), ContactDetailActivity.class);
 		intent.putExtra(ThreemaApplication.INTENT_DATA_CONTACT, identity);
 
-		AnimationUtil.startActivityForResult(getActivity(), view, intent, ThreemaActivity.ACTIVITY_ID_CONTACT_DETAIL);
+		getActivity().startActivityForResult(intent, ThreemaActivity.ACTIVITY_ID_CONTACT_DETAIL);
 	}
 
 	@Override
@@ -1268,7 +1267,7 @@ public class ContactsSectionFragment
 		if (showExcludeFromContactSync(contacts)) {
 			dialog = TextWithCheckboxDialog.newInstance(
 				deleteContactTitle,
-				0,
+				R.drawable.ic_contact,
 				message,
 				R.string.exclude_contact,
 				R.string.ok,
diff --git a/app/src/main/java/ch/threema/app/fragments/DistributionListFragment.java b/app/src/main/java/ch/threema/app/fragments/DistributionListFragment.java
index 00b219d2..8fe4c396 100644
--- a/app/src/main/java/ch/threema/app/fragments/DistributionListFragment.java
+++ b/app/src/main/java/ch/threema/app/fragments/DistributionListFragment.java
@@ -94,7 +94,8 @@ public class DistributionListFragment extends RecipientListFragment {
 					activity,
 					distributionListModels,
 					checkedItemPositions,
-					distributionListService
+					distributionListService,
+					DistributionListFragment.this
 				);
 				setListAdapter(adapter);
 				if (listInstanceState != null) {
diff --git a/app/src/main/java/ch/threema/app/fragments/GroupListFragment.java b/app/src/main/java/ch/threema/app/fragments/GroupListFragment.java
index 60753825..afd21fd9 100644
--- a/app/src/main/java/ch/threema/app/fragments/GroupListFragment.java
+++ b/app/src/main/java/ch/threema/app/fragments/GroupListFragment.java
@@ -104,7 +104,8 @@ public class GroupListFragment extends RecipientListFragment {
 					activity,
 					groupModels,
 					checkedItemPositions,
-					groupService
+					groupService,
+					GroupListFragment.this
 				);
 				setListAdapter(adapter);
 				if (listInstanceState != null) {
diff --git a/app/src/main/java/ch/threema/app/fragments/MemberListFragment.java b/app/src/main/java/ch/threema/app/fragments/MemberListFragment.java
index a7e4b3e2..0ed03311 100644
--- a/app/src/main/java/ch/threema/app/fragments/MemberListFragment.java
+++ b/app/src/main/java/ch/threema/app/fragments/MemberListFragment.java
@@ -29,20 +29,23 @@ import android.view.View;
 import android.view.ViewGroup;
 import android.widget.AbsListView;
 import android.widget.ListView;
-import android.widget.ProgressBar;
 
-import com.google.android.material.floatingactionbutton.FloatingActionButton;
+import androidx.annotation.NonNull;
+import androidx.annotation.StringRes;
+import androidx.fragment.app.ListFragment;
+
+import com.google.android.material.floatingactionbutton.ExtendedFloatingActionButton;
+import com.google.android.material.progressindicator.CircularProgressIndicator;
 
 import java.util.ArrayList;
 import java.util.HashSet;
 
-import androidx.annotation.StringRes;
-import androidx.fragment.app.ListFragment;
 import ch.threema.app.R;
 import ch.threema.app.ThreemaApplication;
 import ch.threema.app.activities.GroupAddActivity;
 import ch.threema.app.activities.MemberChooseActivity;
 import ch.threema.app.activities.ProfilePicRecipientsActivity;
+import ch.threema.app.adapters.FilterResultsListener;
 import ch.threema.app.adapters.FilterableListAdapter;
 import ch.threema.app.managers.ServiceManager;
 import ch.threema.app.services.ContactService;
@@ -57,7 +60,7 @@ import ch.threema.app.utils.LogUtil;
 import ch.threema.base.ThreemaException;
 import ch.threema.storage.models.ContactModel;
 
-public abstract class MemberListFragment extends ListFragment {
+public abstract class MemberListFragment extends ListFragment implements FilterResultsListener {
 	public static final String BUNDLE_ARG_PRESELECTED = "pres";
 	public static final String BUNDLE_ARG_EXCLUDED = "excl";
 
@@ -70,16 +73,16 @@ public abstract class MemberListFragment extends ListFragment {
 	protected DeadlineListService hiddenChatsListService;
 	protected Activity activity;
 	protected Parcelable listInstanceState;
-	protected FloatingActionButton floatingActionButton;
+	protected ExtendedFloatingActionButton floatingActionButton;
 	protected ArrayList<String> preselectedIdentities = new ArrayList<>();
 	protected ArrayList<String> excludedIdentities = new ArrayList<>();
-	protected ProgressBar progressBar;
+	protected CircularProgressIndicator progressBar;
 	protected View topLayout;
 	protected FilterableListAdapter adapter;
 	private SelectionListener selectionListener;
 
 	@Override
-	public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {
+	public View onCreateView(@NonNull LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {
 		activity = getActivity();
 		selectionListener = (MemberChooseActivity) activity;
 
@@ -125,7 +128,7 @@ public abstract class MemberListFragment extends ListFragment {
 	}
 
 	@Override
-	public void onViewCreated(View view, Bundle savedInstanceState) {
+	public void onViewCreated(@NonNull View view, Bundle savedInstanceState) {
 		super.onViewCreated(view, savedInstanceState);
 
 		getListView().setDividerHeight(0);
@@ -145,7 +148,7 @@ public abstract class MemberListFragment extends ListFragment {
 	}
 
 	@Override
-	public void onSaveInstanceState(Bundle outState) {
+	public void onSaveInstanceState(@NonNull Bundle outState) {
 		try {
 			ListView listView = getListView();
 
@@ -192,6 +195,13 @@ public abstract class MemberListFragment extends ListFragment {
 		}
 	}
 
+	@Override
+	public void onResultsAvailable(int count) {
+		if (isAdded() && activity != null) {
+			((MemberChooseActivity) activity).onQueryResultChanged(this, count);
+		}
+	}
+
 	public interface SelectionListener {
 		void onSelectionChanged();
 	}
diff --git a/app/src/main/java/ch/threema/app/fragments/MessageSectionFragment.java b/app/src/main/java/ch/threema/app/fragments/MessageSectionFragment.java
index d26b9774..47dbc2da 100644
--- a/app/src/main/java/ch/threema/app/fragments/MessageSectionFragment.java
+++ b/app/src/main/java/ch/threema/app/fragments/MessageSectionFragment.java
@@ -21,6 +21,13 @@
 
 package ch.threema.app.fragments;
 
+import static android.view.MenuItem.SHOW_AS_ACTION_ALWAYS;
+import static android.view.MenuItem.SHOW_AS_ACTION_COLLAPSE_ACTION_VIEW;
+import static android.view.MenuItem.SHOW_AS_ACTION_NEVER;
+import static ch.threema.app.ThreemaApplication.MAX_PW_LENGTH_BACKUP;
+import static ch.threema.app.ThreemaApplication.MIN_PW_LENGTH_BACKUP;
+import static ch.threema.app.managers.ListenerManager.conversationListeners;
+
 import android.Manifest;
 import android.annotation.SuppressLint;
 import android.app.Activity;
@@ -34,7 +41,6 @@ import android.graphics.Paint;
 import android.graphics.PorterDuff;
 import android.graphics.Rect;
 import android.os.AsyncTask;
-import android.os.Build;
 import android.os.Bundle;
 import android.text.Html;
 import android.text.format.DateUtils;
@@ -42,7 +48,6 @@ import android.view.LayoutInflater;
 import android.view.Menu;
 import android.view.MenuInflater;
 import android.view.MenuItem;
-import android.view.MotionEvent;
 import android.view.View;
 import android.view.ViewGroup;
 import android.widget.Toast;
@@ -68,7 +73,9 @@ import java.io.File;
 import java.lang.ref.WeakReference;
 import java.util.ArrayList;
 import java.util.Collections;
+import java.util.HashMap;
 import java.util.List;
+import java.util.Map;
 
 import ch.threema.app.R;
 import ch.threema.app.ThreemaApplication;
@@ -78,6 +85,8 @@ import ch.threema.app.activities.DistributionListAddActivity;
 import ch.threema.app.activities.RecipientListBaseActivity;
 import ch.threema.app.activities.ThreemaActivity;
 import ch.threema.app.adapters.MessageListAdapter;
+import ch.threema.app.adapters.MessageListAdapterItem;
+import ch.threema.app.adapters.MessageListViewHolder;
 import ch.threema.app.archive.ArchiveActivity;
 import ch.threema.app.asynctasks.DeleteDistributionListAsyncTask;
 import ch.threema.app.asynctasks.DeleteGroupAsyncTask;
@@ -101,6 +110,7 @@ import ch.threema.app.listeners.SynchronizeContactsListener;
 import ch.threema.app.managers.ListenerManager;
 import ch.threema.app.managers.ServiceManager;
 import ch.threema.app.messagereceiver.ContactMessageReceiver;
+import ch.threema.app.messagereceiver.DistributionListMessageReceiver;
 import ch.threema.app.messagereceiver.GroupMessageReceiver;
 import ch.threema.app.messagereceiver.MessageReceiver;
 import ch.threema.app.preference.SettingsActivity;
@@ -122,7 +132,6 @@ import ch.threema.app.ui.EmptyRecyclerView;
 import ch.threema.app.ui.EmptyView;
 import ch.threema.app.ui.ResumePauseHandler;
 import ch.threema.app.ui.SelectorDialogItem;
-import ch.threema.app.utils.AnimationUtil;
 import ch.threema.app.utils.AppRestrictionUtil;
 import ch.threema.app.utils.ConfigUtils;
 import ch.threema.app.utils.DialogUtil;
@@ -146,13 +155,6 @@ import ch.threema.storage.models.DistributionListModel;
 import ch.threema.storage.models.GroupModel;
 import ch.threema.storage.models.TagModel;
 
-import static android.view.MenuItem.SHOW_AS_ACTION_ALWAYS;
-import static android.view.MenuItem.SHOW_AS_ACTION_COLLAPSE_ACTION_VIEW;
-import static android.view.MenuItem.SHOW_AS_ACTION_NEVER;
-import static ch.threema.app.ThreemaApplication.MAX_PW_LENGTH_BACKUP;
-import static ch.threema.app.ThreemaApplication.MIN_PW_LENGTH_BACKUP;
-import static ch.threema.app.managers.ListenerManager.conversationListeners;
-
 public class MessageSectionFragment extends MainFragment
 		implements
 			PasswordEntryDialog.PasswordEntryDialogClickListener,
@@ -222,6 +224,7 @@ public class MessageSectionFragment extends MainFragment
 	private String filterQuery;
 	private int cornerRadius;
 	private TagModel unreadTagModel;
+	private final Map<ConversationModel, MessageListAdapterItem> messageListAdapterItemCache = new HashMap<>();
 
 	private @Nullable String myIdentity;
 
@@ -283,6 +286,10 @@ public class MessageSectionFragment extends MainFragment
 		public void onModified(final ConversationModel modifiedConversationModel, final Integer oldPosition) {
 			logger.debug("on modified conversation. old position = {}", oldPosition);
 			if (messageListAdapter != null && recyclerView != null) {
+				synchronized (messageListAdapterItemCache) {
+					messageListAdapterItemCache.remove(modifiedConversationModel);
+				}
+
 				//scroll if position changed (to top)
 				List<ConversationModel> l = new ArrayList<>();
 				l.add(modifiedConversationModel);
@@ -603,7 +610,10 @@ public class MessageSectionFragment extends MainFragment
 	};
 
 	private void showConversation(ConversationModel conversationModel, View v) {
-		conversationTagService.unTag(conversationModel, unreadTagModel);
+		new Thread(() -> {
+			conversationTagService.unTag(conversationModel, unreadTagModel);
+			conversationModel.setUnreadCount(0);
+		}).start();
 
 		// Close keyboard if search view is expanded
 		if (searchView != null && !searchView.isIconified()) {
@@ -623,7 +633,7 @@ public class MessageSectionFragment extends MainFragment
 				activity.overridePendingTransition(0, 0);
 			}
 		} else {
-			AnimationUtil.startActivityForResult(activity, ConfigUtils.isTabletLayout() ? null : v, intent, ThreemaActivity.ACTIVITY_ID_COMPOSE_MESSAGE);
+			activity.startActivityForResult(intent, ThreemaActivity.ACTIVITY_ID_COMPOSE_MESSAGE);
 		}
 	}
 
@@ -670,10 +680,7 @@ public class MessageSectionFragment extends MainFragment
 				if (resultCode == Activity.RESULT_OK) {
 					ThreemaApplication.getServiceManager().getScreenLockService().setAuthenticated(true);
 					if (selectedConversation != null) {
-						MessageReceiver receiver = selectedConversation.getReceiver();
-						if (receiver != null) {
-							doUnhideChat(receiver);
-						}
+						doUnhideChat(selectedConversation);
 					}
 				}
 				// fallthrough
@@ -682,7 +689,8 @@ public class MessageSectionFragment extends MainFragment
 		}
 	}
 
-	private void doUnhideChat(MessageReceiver receiver) {
+	private void doUnhideChat(@NonNull ConversationModel conversationModel) {
+		MessageReceiver<?> receiver = conversationModel.getReceiver();
 		if (receiver != null && hiddenChatsListService.has(receiver.getUniqueIdString())) {
 			hiddenChatsListService.remove(receiver.getUniqueIdString());
 
@@ -704,7 +712,7 @@ public class MessageSectionFragment extends MainFragment
 				selectedConversation = conversationModel;
 				HiddenChatUtil.launchLockCheckDialog(null, this, preferenceService, ID_PRIVATE_TO_PUBLIC);
 			} else {
-				doUnhideChat(receiver);
+				doUnhideChat(conversationModel);
 			}
 		} else {
 			if (ConfigUtils.hasProtection(preferenceService)) {
@@ -892,30 +900,34 @@ public class MessageSectionFragment extends MainFragment
 					// required to clear swipe layout
 					messageListAdapter.notifyDataSetChanged();
 
-					final MessageListAdapter.MessageListViewHolder holder = (MessageListAdapter.MessageListViewHolder) viewHolder;
-					final int oldPosition = holder.getConversationModel().getPosition();
+					final MessageListViewHolder holder = (MessageListViewHolder) viewHolder;
+					MessageListAdapterItem messageListAdapterItem = holder.getMessageListAdapterItem();
+					ConversationModel conversationModel = messageListAdapterItem != null ? messageListAdapterItem.getConversationModel() : null;
+					if (conversationModel == null) {
+						logger.error("Conversation model is null");
+						return;
+					}
+					final int oldPosition = conversationModel.getPosition();
 
 					if (direction == ItemTouchHelper.RIGHT) {
 						TagModel pinTagModel = conversationTagService.getTagModel(ConversationTagServiceImpl.FIXED_TAG_PIN);
 
-						conversationTagService.toggle(holder.getConversationModel(), pinTagModel, true);
+						conversationTagService.toggle(conversationModel, pinTagModel, true);
+						conversationModel.setIsPinTagged(!conversationModel.isPinTagged());
 
 						ArrayList<ConversationModel> conversationModels = new ArrayList<>();
-						conversationModels.add(holder.getConversationModel());
+						conversationModels.add(conversationModel);
 
 						updateList(null, conversationModels, new Runnable() {
 							@Override
 							public void run() {
-								conversationListeners.handle((ConversationListener listener) -> {
-									listener.onModified(holder.getConversationModel(), oldPosition);
-								});
+								conversationListeners.handle((ConversationListener listener) -> listener.onModified(conversationModel, oldPosition));
 							}
 						});
 					} else if (direction == ItemTouchHelper.LEFT) {
-						ConversationModel archiveableConversation = holder.getConversationModel();
-						conversationService.archive(archiveableConversation);
+						conversationService.archive(conversationModel);
 
-						archiveSnackbar = new ArchiveSnackbar(archiveSnackbar, archiveableConversation);
+						archiveSnackbar = new ArchiveSnackbar(archiveSnackbar, conversationModel);
 					}
  				}
 
@@ -927,13 +939,16 @@ public class MessageSectionFragment extends MainFragment
 						Paint paint = new Paint();
 
 						if (dX > 0) {
-							MessageListAdapter.MessageListViewHolder holder = (MessageListAdapter.MessageListViewHolder) viewHolder;
+							MessageListViewHolder holder = (MessageListViewHolder) viewHolder;
 							TagModel pinTagModel = conversationTagService.getTagModel(ConversationTagServiceImpl.FIXED_TAG_PIN);
 
-							VectorDrawableCompat icon = conversationTagService.isTaggedWith(holder.getConversationModel(), pinTagModel) ? unpinIconDrawable : pinIconDrawable;
+							MessageListAdapterItem messageListAdapterItem = holder.getMessageListAdapterItem();
+							ConversationModel conversationModel = messageListAdapterItem != null ? messageListAdapterItem.getConversationModel() : null;
+
+							VectorDrawableCompat icon = conversationTagService.isTaggedWith(conversationModel, pinTagModel) ? unpinIconDrawable : pinIconDrawable;
 							icon.setBounds(0, 0, icon.getIntrinsicWidth(), icon.getIntrinsicHeight());
 
-							String label = conversationTagService.isTaggedWith(holder.getConversationModel(), pinTagModel) ? getString(R.string.unpin) : getString(R.string.pin);
+							String label = conversationTagService.isTaggedWith(conversationModel, pinTagModel) ? getString(R.string.unpin) : getString(R.string.pin);
 
 							paint.setColor(getResources().getColor(R.color.messagelist_pinned_color));
 							canvas.drawRect((float) itemView.getLeft(), (float) itemView.getTop(), dX + cornerRadius, (float) itemView.getBottom(), paint);
@@ -1036,7 +1051,7 @@ public class MessageSectionFragment extends MainFragment
 					}
 				}
 			});
-
+/* TODO(ANDR-2505) this solution does not currently work on Chromebooks.
 			if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.N && getActivity() != null && getActivity().isInMultiWindowMode()) {
 				recyclerView.addOnItemTouchListener(new RecyclerView.OnItemTouchListener() {
 					private final int TOUCH_SAFE_AREA_PX = 5;
@@ -1059,7 +1074,7 @@ public class MessageSectionFragment extends MainFragment
 					}
 				});
 			}
-
+*/
 			//instantiate fragment
 			//
 			if (!this.requiredInstances()) {
@@ -1078,7 +1093,7 @@ public class MessageSectionFragment extends MainFragment
 		intent.putExtra(ThreemaApplication.INTENT_DATA_HIDE_RECENTS, true);
 		intent.putExtra(RecipientListBaseActivity.INTENT_DATA_MULTISELECT, false);
 		intent.putExtra(RecipientListBaseActivity.INTENT_DATA_MULTISELECT_FOR_COMPOSE, true);
-		AnimationUtil.startActivityForResult(this.getActivity(), v, intent, ThreemaActivity.ACTIVITY_ID_COMPOSE_MESSAGE);
+		getActivity().startActivityForResult(intent, ThreemaActivity.ACTIVITY_ID_COMPOSE_MESSAGE);
 	}
 
 	@Override
@@ -1110,7 +1125,7 @@ public class MessageSectionFragment extends MainFragment
 			intent.putExtra(ThreemaApplication.INTENT_DATA_DISTRIBUTION_LIST, model.getDistributionList().getId());
 		}
 		if (intent != null) {
-			AnimationUtil.startActivityForResult(activity, view, intent, 0);
+			activity.startActivity(intent);
 		}
 	}
 
@@ -1118,7 +1133,7 @@ public class MessageSectionFragment extends MainFragment
 	public void onFooterClick(View view) {
 		Intent intent = new Intent(getActivity(), ArchiveActivity.class);
 		intent.putExtra(ThreemaApplication.INTENT_DATA_ARCHIVE_FILTER, filterQuery);
-		AnimationUtil.startActivity(getActivity(), TestUtil.empty(filterQuery) ? view : null, intent);
+		getActivity().startActivity(intent);
 	}
 
 	@Override
@@ -1132,7 +1147,7 @@ public class MessageSectionFragment extends MainFragment
 	private void editGroup(ConversationModel model, View view) {
 		Intent intent = groupService.getGroupEditIntent(model.getGroup(), activity);
 		intent.putExtra(ThreemaApplication.INTENT_DATA_GROUP, model.getGroup().getId());
-		AnimationUtil.startActivityForResult(activity, view, intent, 0);
+		activity.startActivity(intent);
 	}
 
 	@Override
@@ -1392,15 +1407,16 @@ public class MessageSectionFragment extends MainFragment
 				break;
 			case TAG_MARK_READ:
 				conversationTagService.unTag(conversationModel, unreadTagModel);
-				new Thread(new Runnable() {
-					@Override
-					public void run() {
-						messageService.markConversationAsRead(conversationModel.getReceiver(), serviceManager.getNotificationService());
-					}
-				}).start();
+				conversationModel.setIsUnreadTagged(false);
+				conversationModel.setUnreadCount(0);
+				new Thread(() -> messageService.markConversationAsRead(
+					conversationModel.getReceiver(),
+					serviceManager.getNotificationService())
+				).start();
 				break;
 			case TAG_MARK_UNREAD:
 				conversationTagService.tag(conversationModel, unreadTagModel);
+				conversationModel.setIsUnreadTagged(true);
 				break;
 		}
 	}
@@ -1568,16 +1584,17 @@ public class MessageSectionFragment extends MainFragment
 									MessageSectionFragment.this.activity,
 									contactService,
 									groupService,
-									groupCallManager,
 									distributionListService,
 									conversationService,
 									mutedChatsListService,
 									mentionOnlyChatsListService,
-									hiddenChatsListService,
-									conversationTagService,
 									ringtoneService,
+									hiddenChatsListService,
+									groupCallManager,
 									highlightUid,
-									MessageSectionFragment.this);
+									MessageSectionFragment.this,
+									messageListAdapterItemCache
+								);
 
 								recyclerView.setAdapter(messageListAdapter);
 							}
@@ -1606,6 +1623,22 @@ public class MessageSectionFragment extends MainFragment
 						}
 					}
 				});
+
+				synchronized (messageListAdapterItemCache) {
+					for (ConversationModel conversationModel : conversationModels) {
+						if (!messageListAdapterItemCache.containsKey(conversationModel)) {
+							messageListAdapterItemCache.put(conversationModel, new MessageListAdapterItem(
+								conversationModel,
+								contactService,
+								groupService,
+								mutedChatsListService,
+								mentionOnlyChatsListService,
+								ringtoneService,
+								hiddenChatsListService
+							));
+						}
+					}
+				}
 			}
 		});
 
@@ -1637,21 +1670,18 @@ public class MessageSectionFragment extends MainFragment
 
 	private void fireReceiverUpdate(final MessageReceiver receiver) {
 		if (receiver instanceof GroupMessageReceiver) {
-			ListenerManager.groupListeners.handle(new ListenerManager.HandleListener<GroupListener>() {
-				@Override
-				public void handle(GroupListener listener) {
-					listener.onUpdate(((GroupMessageReceiver) receiver).getGroup());
-				}
-			});
+			ListenerManager.groupListeners.handle(listener ->
+				listener.onUpdate(((GroupMessageReceiver) receiver).getGroup())
+			);
 		} else if (receiver instanceof ContactMessageReceiver) {
-			ListenerManager.contactListeners.handle(new ListenerManager.HandleListener<ContactListener>() {
-				@Override
-				public void handle(ContactListener listener) {
-					listener.onModified(((ContactMessageReceiver) receiver).getContact());
-				}
-			});
+			ListenerManager.contactListeners.handle(listener ->
+				listener.onModified(((ContactMessageReceiver) receiver).getContact())
+			);
+		} else if (receiver instanceof DistributionListMessageReceiver) {
+			ListenerManager.distributionListListeners.handle(listener ->
+				listener.onModify(((DistributionListMessageReceiver) receiver).getDistributionList())
+			);
 		}
-		//ignore distribution lists
 	}
 
 	@WorkerThread
diff --git a/app/src/main/java/ch/threema/app/fragments/MyIDFragment.java b/app/src/main/java/ch/threema/app/fragments/MyIDFragment.java
index 382df6de..a38f15e3 100644
--- a/app/src/main/java/ch/threema/app/fragments/MyIDFragment.java
+++ b/app/src/main/java/ch/threema/app/fragments/MyIDFragment.java
@@ -21,6 +21,9 @@
 
 package ch.threema.app.fragments;
 
+import static ch.threema.app.ThreemaApplication.EMAIL_LINKED_PLACEHOLDER;
+import static ch.threema.app.ThreemaApplication.PHONE_LINKED_PLACEHOLDER;
+
 import android.animation.LayoutTransition;
 import android.annotation.SuppressLint;
 import android.app.Activity;
@@ -32,23 +35,24 @@ import android.view.LayoutInflater;
 import android.view.View;
 import android.view.ViewGroup;
 import android.widget.ArrayAdapter;
-import android.widget.ImageView;
 import android.widget.RelativeLayout;
 import android.widget.TextView;
 import android.widget.Toast;
 
-import com.google.android.material.textfield.MaterialAutoCompleteTextView;
-
-import org.slf4j.Logger;
-
-import java.util.Date;
-
 import androidx.annotation.NonNull;
 import androidx.annotation.Nullable;
 import androidx.annotation.UiThread;
 import androidx.core.widget.NestedScrollView;
 import androidx.fragment.app.DialogFragment;
 import androidx.fragment.app.FragmentManager;
+
+import com.google.android.material.button.MaterialButton;
+import com.google.android.material.textfield.MaterialAutoCompleteTextView;
+
+import org.slf4j.Logger;
+
+import java.util.Date;
+
 import ch.threema.app.R;
 import ch.threema.app.ThreemaApplication;
 import ch.threema.app.activities.ExportIDActivity;
@@ -77,7 +81,6 @@ import ch.threema.app.services.UserService;
 import ch.threema.app.ui.AvatarEditView;
 import ch.threema.app.ui.ImagePopup;
 import ch.threema.app.ui.QRCodePopup;
-import ch.threema.app.utils.AnimationUtil;
 import ch.threema.app.utils.AppRestrictionUtil;
 import ch.threema.app.utils.ConfigUtils;
 import ch.threema.app.utils.DialogUtil;
@@ -93,9 +96,6 @@ import ch.threema.domain.protocol.api.LinkMobileNoException;
 import ch.threema.domain.protocol.csp.ProtocolDefines;
 import ch.threema.localcrypto.MasterKeyLockedException;
 
-import static ch.threema.app.ThreemaApplication.EMAIL_LINKED_PLACEHOLDER;
-import static ch.threema.app.ThreemaApplication.PHONE_LINKED_PLACEHOLDER;
-
 public class MyIDFragment extends MainFragment
 		implements
 		View.OnClickListener,
@@ -233,7 +233,7 @@ public class MyIDFragment extends MainFragment
 
 			fragmentView.findViewById(R.id.policy_explain).setVisibility(isReadonlyProfile || AppRestrictionUtil.isBackupsDisabled(ThreemaApplication.getAppContext()) || AppRestrictionUtil.isIdBackupsDisabled(ThreemaApplication.getAppContext()) ? View.VISIBLE : View.GONE);
 
-			final ImageView picReleaseConfImageView = fragmentView.findViewById(R.id.picrelease_config);
+			final MaterialButton picReleaseConfImageView = fragmentView.findViewById(R.id.picrelease_config);
 			picReleaseConfImageView.setOnClickListener(this);
 			picReleaseConfImageView.setVisibility(preferenceService.getProfilePicRelease() == PreferenceService.PROFILEPIC_RELEASE_SOME ? View.VISIBLE : View.GONE);
 
@@ -487,7 +487,7 @@ public class MyIDFragment extends MainFragment
 		return pending;
 	}
 
-	private void configureEditWithButton(RelativeLayout l, ImageView button, boolean disable) {
+	private void configureEditWithButton(RelativeLayout l, MaterialButton button, boolean disable) {
 		if (disable) {
 			button.setVisibility(View.INVISIBLE);
 		} else {
@@ -495,18 +495,6 @@ public class MyIDFragment extends MainFragment
 		}
 	}
 
-	private String getIdentity() {
-		if(!this.requiredInstances()) {
-			return "undefined";
-		}
-
-		if (userService.hasIdentity()) {
-			return userService.getIdentity();
-		} else {
-			return "undefined";
-		}
-	}
-
 	private void deleteIdentity() {
 		if(!this.requiredInstances()) {
 			return;
@@ -539,111 +527,88 @@ public class MyIDFragment extends MainFragment
 	@Override
 	public void onClick(View v) {
 		int neutral;
+		final int id = v.getId();
 
-		switch (v.getId()) {
-			case R.id.change_email:
-				neutral = 0;
-				if (this.userService.getEmailLinkingState() != UserService.LinkingState_NONE) {
-					neutral = R.string.unlink;
-				}
+		if (id == R.id.change_email) {
+			neutral = 0;
+			if (this.userService.getEmailLinkingState() != UserService.LinkingState_NONE) {
+				neutral = R.string.unlink;
+			}
 
-				TextEntryDialog textEntryDialog = TextEntryDialog.newInstance(
-						R.string.wizard2_email_linking,
-						R.string.wizard2_email_hint,
-						R.string.ok,
-						neutral,
-						R.string.cancel,
-						userService.getLinkedEmail(),
-						InputType.TYPE_TEXT_VARIATION_WEB_EMAIL_ADDRESS, TextEntryDialog.INPUT_FILTER_TYPE_NONE);
-				textEntryDialog.setTargetFragment(this, 0);
-				textEntryDialog.show(getFragmentManager(), DIALOG_TAG_LINKED_EMAIL);
-				break;
-			case R.id.change_mobile:
-				String presetNumber = serviceManager.getLocaleService().getHRPhoneNumber(userService.getLinkedMobile());
-				neutral = 0;
-				if (this.userService.getMobileLinkingState() != UserService.LinkingState_NONE) {
-					neutral = R.string.unlink;
-				} else {
-					presetNumber = localeService.getCountryCodePhonePrefix();
-					if (!TestUtil.empty(presetNumber)) {
-						presetNumber += " ";
-					}
-				}
-				TextEntryDialog textEntryDialog1 = TextEntryDialog.newInstance(
-						R.string.wizard2_phone_linking,
-						R.string.wizard2_phone_hint,
-						R.string.ok,
-						neutral,
-						R.string.cancel,
-						presetNumber,
-						InputType.TYPE_CLASS_PHONE,
-						TextEntryDialog.INPUT_FILTER_TYPE_PHONE);
-				textEntryDialog1.setTargetFragment(this, 0);
-				textEntryDialog1.show(getFragmentManager(), DIALOG_TAG_LINKED_MOBILE);
-				break;
-			case R.id.revocation_key:
-				if (!preferenceService.getLockMechanism().equals(PreferenceService.LockingMech_NONE)) {
-					HiddenChatUtil.launchLockCheckDialog(null, this, preferenceService, LOCK_CHECK_REVOCATION);
-				} else {
-					setRevocationPassword();
-				}
-				break;
-			case R.id.delete_id:
-				// ask for pin before entering
-				if (!preferenceService.getLockMechanism().equals(PreferenceService.LockingMech_NONE)) {
-					HiddenChatUtil.launchLockCheckDialog(null, this, preferenceService, LOCK_CHECK_DELETE_ID);
-				} else {
-					confirmIdDelete();
-				}
-				break;
-			case R.id.export_id:
-				// ask for pin before entering
-				if (!preferenceService.getLockMechanism().equals(PreferenceService.LockingMech_NONE)) {
-					HiddenChatUtil.launchLockCheckDialog(null, this, preferenceService, LOCK_CHECK_EXPORT_ID);
-				} else {
-					startActivity(new Intent(getContext(), ExportIDActivity.class));
+			TextEntryDialog textEntryDialog = TextEntryDialog.newInstance(
+				R.string.wizard2_email_linking,
+				R.string.wizard2_email_hint,
+				R.string.ok,
+				neutral,
+				R.string.cancel,
+				userService.getLinkedEmail(),
+				InputType.TYPE_TEXT_VARIATION_WEB_EMAIL_ADDRESS, TextEntryDialog.INPUT_FILTER_TYPE_NONE);
+			textEntryDialog.setTargetFragment(this, 0);
+			textEntryDialog.show(getFragmentManager(), DIALOG_TAG_LINKED_EMAIL);
+		} else if (id == R.id.change_mobile) {
+			String presetNumber = serviceManager.getLocaleService().getHRPhoneNumber(userService.getLinkedMobile());
+			neutral = 0;
+			if (this.userService.getMobileLinkingState() != UserService.LinkingState_NONE) {
+				neutral = R.string.unlink;
+			} else {
+				presetNumber = localeService.getCountryCodePhonePrefix();
+				if (!TestUtil.empty(presetNumber)) {
+					presetNumber += " ";
 				}
-				break;
-			case R.id.picrelease_config:
-				launchProfilePictureRecipientsSelector(v);
-				break;
-			case R.id.profile_edit:
-				TextEntryDialog nicknameEditDialog = TextEntryDialog.newInstance(R.string.set_nickname_title,
-					R.string.wizard3_nickname_hint,
-					R.string.ok, 0,
-					R.string.cancel,
-					userService.getPublicNickname(),
-					InputType.TYPE_CLASS_TEXT | InputType.TYPE_TEXT_FLAG_NO_SUGGESTIONS,
-					0,
-					ProtocolDefines.PUSH_FROM_LEN);;
-				nicknameEditDialog.setTargetFragment(this, 0);
-				nicknameEditDialog.show(getFragmentManager(), DIALOG_TAG_EDIT_NICKNAME);
-				break;
-			case R.id.my_id_qr:
-				new QRCodePopup(getContext(), getActivity().getWindow().getDecorView(), getActivity()).show(v, null, QRCodeServiceImpl.QR_TYPE_ID);
-				break;
-			case R.id.avatar:
-				launchContactImageZoom(v);
-				break;
-			case R.id.my_id_share:
-				ShareUtil.shareContact(getContext(), null);
-				break;
-		}
-	}
-
-	private void launchContactImageZoom(View v) {
-		if (getView() != null) {
-			View rootView = getView().findViewById(R.id.main_content);
-
-			if (fileService.hasContactAvatarFile(contactService.getMe())) {
-				ImagePopup detailPopup = new ImagePopup(getContext(), rootView, rootView.getWidth(), rootView.getHeight());
-				detailPopup.show(v, contactService.getAvatar(contactService.getMe(), true), userService.getPublicNickname());
 			}
+			TextEntryDialog textEntryDialog1 = TextEntryDialog.newInstance(
+				R.string.wizard2_phone_linking,
+				R.string.wizard2_phone_hint,
+				R.string.ok,
+				neutral,
+				R.string.cancel,
+				presetNumber,
+				InputType.TYPE_CLASS_PHONE,
+				TextEntryDialog.INPUT_FILTER_TYPE_PHONE);
+			textEntryDialog1.setTargetFragment(this, 0);
+			textEntryDialog1.show(getFragmentManager(), DIALOG_TAG_LINKED_MOBILE);
+		} else if (id == R.id.revocation_key) {
+			if (!preferenceService.getLockMechanism().equals(PreferenceService.LockingMech_NONE)) {
+				HiddenChatUtil.launchLockCheckDialog(null, this, preferenceService, LOCK_CHECK_REVOCATION);
+			} else {
+				setRevocationPassword();
+			}
+		} else if (id == R.id.delete_id) {
+			// ask for pin before entering
+			if (!preferenceService.getLockMechanism().equals(PreferenceService.LockingMech_NONE)) {
+				HiddenChatUtil.launchLockCheckDialog(null, this, preferenceService, LOCK_CHECK_DELETE_ID);
+			} else {
+				confirmIdDelete();
+			}
+		} else if (id == R.id.export_id) {
+			// ask for pin before entering
+			if (!preferenceService.getLockMechanism().equals(PreferenceService.LockingMech_NONE)) {
+				HiddenChatUtil.launchLockCheckDialog(null, this, preferenceService, LOCK_CHECK_EXPORT_ID);
+			} else {
+				startActivity(new Intent(getContext(), ExportIDActivity.class));
+			}
+		} else if (id == R.id.picrelease_config) {
+			launchProfilePictureRecipientsSelector(v);
+		} else if (id == R.id.profile_edit) {
+			TextEntryDialog nicknameEditDialog = TextEntryDialog.newInstance(R.string.set_nickname_title,
+				R.string.wizard3_nickname_hint,
+				R.string.ok, 0,
+				R.string.cancel,
+				userService.getPublicNickname(),
+				InputType.TYPE_CLASS_TEXT | InputType.TYPE_TEXT_FLAG_NO_SUGGESTIONS,
+				0,
+				ProtocolDefines.PUSH_FROM_LEN);
+			nicknameEditDialog.setTargetFragment(this, 0);
+			nicknameEditDialog.show(getFragmentManager(), DIALOG_TAG_EDIT_NICKNAME);
+		} else if (id == R.id.my_id_qr) {
+			new QRCodePopup(getContext(), getActivity().getWindow().getDecorView(), getActivity()).show(v, null, QRCodeServiceImpl.QR_TYPE_ID);
+		} else if (id == R.id.my_id_share) {
+			ShareUtil.shareContact(getContext(), null);
 		}
 	}
 
 	private void launchProfilePictureRecipientsSelector(View v) {
-		AnimationUtil.startActivityForResult(getActivity(), v, new Intent(getContext(), ProfilePicRecipientsActivity.class), 55);
+		getActivity().startActivityForResult(new Intent(getContext(), ProfilePicRecipientsActivity.class), 55);
 	}
 
 	private void confirmIdDelete() {
diff --git a/app/src/main/java/ch/threema/app/fragments/RecentListFragment.java b/app/src/main/java/ch/threema/app/fragments/RecentListFragment.java
index b5728f92..05d93b36 100644
--- a/app/src/main/java/ch/threema/app/fragments/RecentListFragment.java
+++ b/app/src/main/java/ch/threema/app/fragments/RecentListFragment.java
@@ -33,6 +33,7 @@ import java.util.List;
 import androidx.annotation.NonNull;
 import ch.threema.app.R;
 import ch.threema.app.activities.RecipientListBaseActivity;
+import ch.threema.app.adapters.FilterResultsListener;
 import ch.threema.app.adapters.RecentListAdapter;
 import ch.threema.app.services.ConversationService;
 import ch.threema.storage.models.ConversationModel;
@@ -117,7 +118,8 @@ public class RecentListFragment extends RecipientListFragment {
 			checkedItemPositions,
 			contactService,
 			groupService,
-			distributionListService
+			distributionListService,
+			this
 		);
 		setListAdapter(adapter);
 
diff --git a/app/src/main/java/ch/threema/app/fragments/RecipientListFragment.java b/app/src/main/java/ch/threema/app/fragments/RecipientListFragment.java
index 3e600fbb..7e726c83 100644
--- a/app/src/main/java/ch/threema/app/fragments/RecipientListFragment.java
+++ b/app/src/main/java/ch/threema/app/fragments/RecipientListFragment.java
@@ -33,14 +33,21 @@ import android.widget.AbsListView;
 import android.widget.AdapterView;
 import android.widget.ImageView;
 import android.widget.ListView;
-import android.widget.ProgressBar;
 import android.widget.TextView;
 import android.widget.Toast;
 
+import androidx.annotation.ColorInt;
+import androidx.annotation.DrawableRes;
+import androidx.annotation.NonNull;
+import androidx.annotation.StringRes;
+import androidx.fragment.app.FragmentActivity;
+import androidx.fragment.app.ListFragment;
+
 import com.getkeepsafe.taptargetview.TapTarget;
 import com.getkeepsafe.taptargetview.TapTargetView;
 import com.google.android.material.appbar.AppBarLayout;
-import com.google.android.material.floatingactionbutton.FloatingActionButton;
+import com.google.android.material.floatingactionbutton.ExtendedFloatingActionButton;
+import com.google.android.material.progressindicator.CircularProgressIndicator;
 import com.google.android.material.snackbar.Snackbar;
 
 import org.slf4j.Logger;
@@ -50,14 +57,10 @@ import java.util.Collections;
 import java.util.HashSet;
 import java.util.List;
 
-import androidx.annotation.DrawableRes;
-import androidx.annotation.NonNull;
-import androidx.annotation.StringRes;
-import androidx.fragment.app.FragmentActivity;
-import androidx.fragment.app.ListFragment;
 import ch.threema.app.R;
 import ch.threema.app.ThreemaApplication;
 import ch.threema.app.activities.RecipientListBaseActivity;
+import ch.threema.app.adapters.FilterResultsListener;
 import ch.threema.app.adapters.FilterableListAdapter;
 import ch.threema.app.managers.ServiceManager;
 import ch.threema.app.services.ContactService;
@@ -81,7 +84,7 @@ import ch.threema.storage.models.ContactModel;
 import ch.threema.storage.models.DistributionListModel;
 import ch.threema.storage.models.GroupModel;
 
-public abstract class RecipientListFragment extends ListFragment implements ListView.OnItemLongClickListener {
+public abstract class RecipientListFragment extends ListFragment implements ListView.OnItemLongClickListener, FilterResultsListener {
 	public static final String ARGUMENT_MULTI_SELECT = "ms";
 	public static final String ARGUMENT_MULTI_SELECT_FOR_COMPOSE = "msi";
 
@@ -96,9 +99,9 @@ public abstract class RecipientListFragment extends ListFragment implements List
 	protected DeadlineListService hiddenChatsListService;
 	protected FragmentActivity activity;
 	protected Parcelable listInstanceState;
-	protected FloatingActionButton floatingActionButton;
+	protected ExtendedFloatingActionButton floatingActionButton;
 	protected Snackbar snackbar;
-	protected ProgressBar progressBar;
+	protected CircularProgressIndicator progressBar;
 	protected View topLayout;
 	protected boolean multiSelect = true, multiSelectIdentity = false;
 	protected FilterableListAdapter adapter;
@@ -167,7 +170,6 @@ public abstract class RecipientListFragment extends ListFragment implements List
 					Intent intent = getAddIntent();
 					if (intent != null) {
 						startActivity(intent);
-						activity.overridePendingTransition(R.anim.fast_fade_in, R.anim.fast_fade_out);
 					}
 				}
 			});
@@ -188,8 +190,8 @@ public abstract class RecipientListFragment extends ListFragment implements List
 			});
 
 			if (multiSelectIdentity) {
-				floatingActionButton.setImageResource(R.drawable.ic_arrow_left);
-				floatingActionButton.setRotation(180);
+				floatingActionButton.setIcon(getResources().getDrawable(R.drawable.ic_keyboard_arrow_right));
+				floatingActionButton.setText(R.string.label_continue);
 
 				if (preferenceService.getMultipleRecipientsTooltipCount() < 1) {
 					preferenceService.incrementMultipleRecipientsTooltipCount();
@@ -207,16 +209,18 @@ public abstract class RecipientListFragment extends ListFragment implements List
 								location[0] + 200 + itemHeight,
 								location[1] + (itemHeight * 2));
 
+							final @ColorInt int textColor = ConfigUtils.getColorFromAttribute(getContext(), R.attr.colorOnPrimary);
+
 							TapTargetView.showFor(requireActivity(),
 								TapTarget.forBounds(rect, getString(R.string.tooltip_multiple_recipients_title), getString(R.string.tooltip_multiple_recipients_text))
-									.outerCircleColor(ConfigUtils.getAppTheme(getActivity()) == ConfigUtils.THEME_DARK ? R.color.dark_accent : R.color.accent_light)      // Specify a color for the outer circle
+									.outerCircleColorInt(ConfigUtils.getColorFromAttribute(getContext(), R.attr.colorPrimary))      // Specify a color for the outer circle
 									.outerCircleAlpha(0.96f)            // Specify the alpha amount for the outer circle
 									.targetCircleColor(android.R.color.transparent)   // Specify a color for the target circle
 									.titleTextSize(24)                  // Specify the size (in sp) of the title text
-									.titleTextColor(android.R.color.white)      // Specify the color of the title text
+									.titleTextColorInt(textColor)      // Specify the color of the title text
 									.descriptionTextSize(18)            // Specify the size (in sp) of the description text
-									.descriptionTextColor(android.R.color.white)  // Specify the color of the description text
-									.textColor(android.R.color.white)            // Specify a color for both the title and description text
+									.descriptionTextColorInt(textColor)  // Specify the color of the description text
+									.textColorInt(textColor)            // Specify a color for both the title and description text
 									.textTypeface(Typeface.SANS_SERIF)  // Specify a typeface for the text
 									.dimColor(android.R.color.black)            // If set, will dim behind the view with 30% opacity of the given color
 									.drawShadow(true)                   // Whether to draw a drop shadow or not
@@ -273,8 +277,8 @@ public abstract class RecipientListFragment extends ListFragment implements List
 		getListView().setChoiceMode(AbsListView.CHOICE_MODE_MULTIPLE);
 		if (isVisible) {
 			snackbar = SnackbarUtil.make(topLayout, "", Snackbar.LENGTH_INDEFINITE, 4);
-			snackbar.setBackgroundTint(ConfigUtils.getColorFromAttribute(getContext(), R.attr.colorAccent));
-			snackbar.setTextColor(ConfigUtils.getColorFromAttribute(getContext(), R.attr.colorOnSecondary));
+//			snackbar.setBackgroundTint(ConfigUtils.getColorFromAttribute(getContext(), R.attr.colorPrimary));
+//			snackbar.setTextColor(ConfigUtils.getColorFromAttribute(getContext(), R.attr.colorOnSecondary));
 			snackbar.getView().getLayoutParams().width = AppBarLayout.LayoutParams.MATCH_PARENT;
 			snackbar.show();
 			snackbar.getView().post(new Runnable() {
@@ -443,6 +447,13 @@ public abstract class RecipientListFragment extends ListFragment implements List
 		}
 	}
 
+	@Override
+	public void onResultsAvailable(int count) {
+		if (isAdded() && activity != null) {
+			((RecipientListBaseActivity) activity).onQueryResultChanged(this, count);
+		}
+	}
+
 	protected abstract void createListAdapter(ArrayList<Integer> checkedItems);
 	protected abstract String getBundleName();
 	protected abstract @StringRes int getEmptyText();
diff --git a/app/src/main/java/ch/threema/app/fragments/UserListFragment.java b/app/src/main/java/ch/threema/app/fragments/UserListFragment.java
index bb8143ef..11f83f50 100644
--- a/app/src/main/java/ch/threema/app/fragments/UserListFragment.java
+++ b/app/src/main/java/ch/threema/app/fragments/UserListFragment.java
@@ -102,7 +102,8 @@ public class UserListFragment extends RecipientListFragment {
 					contactService,
 					blacklistService,
 					hiddenChatsListService,
-					preferenceService
+					preferenceService,
+					UserListFragment.this
 				);
 				setListAdapter(adapter);
 				if (listInstanceState != null) {
diff --git a/app/src/main/java/ch/threema/app/fragments/UserMemberListFragment.java b/app/src/main/java/ch/threema/app/fragments/UserMemberListFragment.java
index 8d2d2ecb..87f7db2c 100644
--- a/app/src/main/java/ch/threema/app/fragments/UserMemberListFragment.java
+++ b/app/src/main/java/ch/threema/app/fragments/UserMemberListFragment.java
@@ -140,7 +140,8 @@ public class UserMemberListFragment extends MemberListFragment {
 					contactService,
 					blacklistService,
 					hiddenChatsListService,
-					preferenceService
+					preferenceService,
+					UserMemberListFragment.this
 				);
 				setListAdapter(adapter);
 				if (listInstanceState != null) {
diff --git a/app/src/main/java/ch/threema/app/fragments/WorkUserListFragment.java b/app/src/main/java/ch/threema/app/fragments/WorkUserListFragment.java
index 0fc6d6c3..c6ca753a 100644
--- a/app/src/main/java/ch/threema/app/fragments/WorkUserListFragment.java
+++ b/app/src/main/java/ch/threema/app/fragments/WorkUserListFragment.java
@@ -172,7 +172,8 @@ public class WorkUserListFragment extends RecipientListFragment {
 					contactService,
 					blacklistService,
 					hiddenChatsListService,
-					preferenceService
+					preferenceService,
+					WorkUserListFragment.this
 				);
 				setListAdapter(adapter);
 				if (listInstanceState != null) {
diff --git a/app/src/main/java/ch/threema/app/fragments/WorkUserMemberListFragment.java b/app/src/main/java/ch/threema/app/fragments/WorkUserMemberListFragment.java
index 50958eb4..d7bef125 100644
--- a/app/src/main/java/ch/threema/app/fragments/WorkUserMemberListFragment.java
+++ b/app/src/main/java/ch/threema/app/fragments/WorkUserMemberListFragment.java
@@ -101,7 +101,7 @@ public class WorkUserMemberListFragment extends MemberListFragment {
 				}), new IPredicateNonNull<ContactModel>() {
 					@Override
 					public boolean apply(@NonNull ContactModel type) {
-						return type.isWork() && (!profilePics || ContactUtil.canReceiveProfilePics(type));
+						return type.isWork() && (!profilePics || !ContactUtil.isEchoEchoOrChannelContact(type));
 					}
 				});
 
@@ -127,7 +127,8 @@ public class WorkUserMemberListFragment extends MemberListFragment {
 					contactService,
 					blacklistService,
 					hiddenChatsListService,
-					preferenceService
+					preferenceService,
+					WorkUserMemberListFragment.this
 				);
 				setListAdapter(adapter);
 				getListView().setChoiceMode(AbsListView.CHOICE_MODE_MULTIPLE);
diff --git a/app/src/main/java/ch/threema/app/fragments/mediaviews/AudioFocusSupportingMediaViewFragment.java b/app/src/main/java/ch/threema/app/fragments/mediaviews/AudioFocusSupportingMediaViewFragment.java
index 2f096346..32883b0f 100644
--- a/app/src/main/java/ch/threema/app/fragments/mediaviews/AudioFocusSupportingMediaViewFragment.java
+++ b/app/src/main/java/ch/threema/app/fragments/mediaviews/AudioFocusSupportingMediaViewFragment.java
@@ -29,6 +29,8 @@ import android.view.View;
 import android.view.ViewGroup;
 import android.widget.Toast;
 
+import androidx.annotation.NonNull;
+
 import org.slf4j.Logger;
 
 import ch.threema.app.R;
@@ -41,7 +43,7 @@ public abstract class AudioFocusSupportingMediaViewFragment extends MediaViewFra
 	private AudioManager audioManager;
 
 	@Override
-	public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {
+	public View onCreateView(@NonNull LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {
 		this.audioManager = (AudioManager) getContext().getApplicationContext().getSystemService(Context.AUDIO_SERVICE);
 
 		return super.onCreateView(inflater, container, savedInstanceState);
diff --git a/app/src/main/java/ch/threema/app/fragments/mediaviews/AudioViewFragment.java b/app/src/main/java/ch/threema/app/fragments/mediaviews/AudioViewFragment.java
index 0d8c4406..b4457e82 100644
--- a/app/src/main/java/ch/threema/app/fragments/mediaviews/AudioViewFragment.java
+++ b/app/src/main/java/ch/threema/app/fragments/mediaviews/AudioViewFragment.java
@@ -21,6 +21,7 @@
 
 package ch.threema.app.fragments.mediaviews;
 
+import android.annotation.SuppressLint;
 import android.content.Context;
 import android.graphics.drawable.Drawable;
 import android.net.Uri;
@@ -28,44 +29,46 @@ import android.os.Bundle;
 import android.view.LayoutInflater;
 import android.view.View;
 import android.view.ViewGroup;
-import android.widget.ProgressBar;
-
-import com.google.android.exoplayer2.ExoPlayer;
-import com.google.android.exoplayer2.MediaItem;
-import com.google.android.exoplayer2.Player;
-import com.google.android.exoplayer2.source.MediaSource;
-import com.google.android.exoplayer2.source.ProgressiveMediaSource;
-import com.google.android.exoplayer2.ui.PlayerControlView;
-import com.google.android.exoplayer2.ui.PlayerView;
-import com.google.android.exoplayer2.upstream.DataSource;
-import com.google.android.exoplayer2.upstream.DefaultDataSource;
-import com.google.android.exoplayer2.upstream.DefaultHttpDataSource;
-import com.google.android.exoplayer2.util.Util;
+
+import androidx.annotation.NonNull;
+import androidx.annotation.UiThread;
+import androidx.core.content.res.ResourcesCompat;
+import androidx.media3.common.AudioAttributes;
+import androidx.media3.common.C;
+import androidx.media3.common.MediaItem;
+import androidx.media3.common.Player;
+import androidx.media3.common.util.Util;
+import androidx.media3.datasource.DataSource;
+import androidx.media3.datasource.DefaultDataSource;
+import androidx.media3.datasource.DefaultHttpDataSource;
+import androidx.media3.exoplayer.ExoPlayer;
+import androidx.media3.exoplayer.source.MediaSource;
+import androidx.media3.exoplayer.source.ProgressiveMediaSource;
+import androidx.media3.ui.PlayerControlView;
+import androidx.media3.ui.PlayerView;
+
+import com.google.android.material.progressindicator.CircularProgressIndicator;
 
 import org.slf4j.Logger;
 
 import java.io.File;
 import java.lang.ref.WeakReference;
 
-import androidx.annotation.NonNull;
-import androidx.annotation.UiThread;
-import androidx.core.content.res.ResourcesCompat;
-import androidx.core.view.OnApplyWindowInsetsListener;
-import androidx.core.view.ViewCompat;
-import androidx.core.view.WindowInsetsCompat;
 import ch.threema.app.R;
 import ch.threema.app.ThreemaApplication;
 import ch.threema.app.activities.MediaViewerActivity;
 import ch.threema.app.mediaattacher.PreviewFragmentInterface;
+import ch.threema.app.utils.ConfigUtils;
 import ch.threema.app.utils.IconUtil;
 import ch.threema.app.utils.MimeUtil;
 import ch.threema.app.utils.VideoUtil;
 import ch.threema.base.utils.LoggingUtil;
 
-public class AudioViewFragment extends AudioFocusSupportingMediaViewFragment implements Player.Listener, PreviewFragmentInterface {
+@SuppressLint("UnsafeOptInUsageError")
+public class AudioViewFragment extends MediaViewFragment implements Player.Listener, PreviewFragmentInterface {
 	private static final Logger logger = LoggingUtil.getThreemaLogger("AudioViewFragment");
 
-	private WeakReference<ProgressBar> progressBarRef;
+	private WeakReference<CircularProgressIndicator> progressBarRef;
 	private WeakReference<PlayerView> audioView;
 	private ExoPlayer audioPlayer;
 	private boolean isImmediatePlay, isPreparing;
@@ -75,11 +78,19 @@ public class AudioViewFragment extends AudioFocusSupportingMediaViewFragment imp
 	}
 
 	@Override
-	public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {
+	public View onCreateView(@NonNull LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {
 		this.isImmediatePlay = getArguments().getBoolean(MediaViewerActivity.EXTRA_ID_IMMEDIATE_PLAY, false);
+		boolean isVoiceMessage = getArguments().getBoolean(MediaViewerActivity.EXTRA_IS_VOICEMESSAGE, false);
+
+		AudioAttributes audioAttributes = new AudioAttributes.Builder()
+			.setUsage(C.USAGE_MEDIA)
+			.setContentType(isVoiceMessage ? C.AUDIO_CONTENT_TYPE_SPEECH : C.AUDIO_CONTENT_TYPE_MUSIC)
+			.setAllowedCapturePolicy(C.ALLOW_CAPTURE_BY_NONE)
+			.build();
 
 		try {
 			this.audioPlayer = VideoUtil.getExoPlayer(getContext());
+			this.audioPlayer.setAudioAttributes(audioAttributes, true);
 			this.audioPlayer.addListener(this);
 		} catch (OutOfMemoryError e) {
 			logger.error("Exception", e);
@@ -132,18 +143,7 @@ public class AudioViewFragment extends AudioFocusSupportingMediaViewFragment imp
 			audioView.setControllerShowTimeoutMs(-1);
 			audioView.setControllerAutoShow(true);
 			audioView.setDefaultArtwork(ResourcesCompat.getDrawable(getResources(), IconUtil.getMimeCategoryIcon(MimeUtil.MimeCategory.AUDIO), ThreemaApplication.getAppContext().getTheme()));
-			View controllerView = audioView.findViewById(R.id.position_container);
-			ViewCompat.setOnApplyWindowInsetsListener(controllerView, new OnApplyWindowInsetsListener() {
-				@NonNull
-				@Override
-				public WindowInsetsCompat onApplyWindowInsets(@NonNull View v, @NonNull WindowInsetsCompat insets) {
-					ViewGroup.MarginLayoutParams params = (ViewGroup.MarginLayoutParams) v.getLayoutParams();
-					params.leftMargin = insets.getSystemWindowInsetLeft();
-					params.rightMargin = insets.getSystemWindowInsetRight();
-					params.bottomMargin = insets.getSystemWindowInsetBottom();
-					return insets;
-				}
-			});
+			ConfigUtils.adjustExoPlayerControllerMargins(getContext(), audioView);
 		}
 
 		this.progressBarRef = new WeakReference<>(rootViewReference.get().findViewById(R.id.progress_bar));
@@ -205,15 +205,6 @@ public class AudioViewFragment extends AudioFocusSupportingMediaViewFragment imp
 		}
 	}
 
-	@Override
-	public void onIsPlayingChanged(boolean isPlaying) {
-		if (isPlaying) {
-			requestFocus();
-		} else {
-			abandonFocus();
-		}
-	}
-
 	@Override
 	public void onPlayerStateChanged(boolean playWhenReady, int playbackState) {
 		if (isPreparing && playbackState == Player.STATE_READY) {
@@ -233,8 +224,6 @@ public class AudioViewFragment extends AudioFocusSupportingMediaViewFragment imp
 
 	@Override
 	public void onDestroyView() {
-		abandonFocus();
-
 		if (this.audioPlayer != null) {
 			this.audioPlayer.release();
 			this.audioPlayer = null;
@@ -247,17 +236,9 @@ public class AudioViewFragment extends AudioFocusSupportingMediaViewFragment imp
 	public void setUserVisibleHint(boolean isVisibleToUser) {
 		// stop player if fragment comes out of view
 		if (!isVisibleToUser && this.audioPlayer != null &&
-				(this.audioPlayer.isLoading() ||
-				this.audioPlayer.getPlaybackState() != ExoPlayer.STATE_IDLE)) {
+				(this.audioPlayer.isLoading() || this.audioPlayer.isPlaying())) {
 			this.audioPlayer.setPlayWhenReady(false);
-		}
-	}
-
-	@Override
-	public void setVolume(float volume) {
-		// ducking
-		if (this.audioPlayer != null) {
-			this.audioPlayer.setVolume(volume);
+			this.audioPlayer.pause();
 		}
 	}
 }
diff --git a/app/src/main/java/ch/threema/app/fragments/mediaviews/GifViewFragment.kt b/app/src/main/java/ch/threema/app/fragments/mediaviews/GifViewFragment.kt
new file mode 100644
index 00000000..c2af1d2d
--- /dev/null
+++ b/app/src/main/java/ch/threema/app/fragments/mediaviews/GifViewFragment.kt
@@ -0,0 +1,95 @@
+/*  _____ _
+ * |_   _| |_  _ _ ___ ___ _ __  __ _
+ *   | | | ' \| '_/ -_) -_) '  \/ _` |_
+ *   |_| |_||_|_| \___\___|_|_|_\__,_(_)
+ *
+ * Threema for Android
+ * Copyright (c) 2023 Threema GmbH
+ *
+ * This program is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU Affero General Public License, version 3,
+ * as published by the Free Software Foundation.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+ * GNU Affero General Public License for more details.
+ *
+ * You should have received a copy of the GNU Affero General Public License
+ * along with this program. If not, see <https://www.gnu.org/licenses/>.
+ */
+
+package ch.threema.app.fragments.mediaviews
+
+import android.graphics.drawable.Drawable
+import android.net.Uri
+import android.os.Bundle
+import android.view.View
+import android.widget.ImageView
+import ch.threema.app.R
+import ch.threema.base.utils.LoggingUtil
+import pl.droidsonroids.gif.GifDrawable
+import pl.droidsonroids.gif.GifImageView
+import java.io.File
+import java.io.IOException
+import java.lang.ref.WeakReference
+
+private val logger = LoggingUtil.getThreemaLogger("GifViewFragment")
+
+/**
+ * This fragment is used to show GIFs.
+ */
+class GifViewFragment: MediaViewFragment() {
+
+    private lateinit var thumbnailImageView: WeakReference<ImageView>
+    private lateinit var gifImageViewRef: WeakReference<GifImageView>
+
+    override fun created(savedInstanceState: Bundle?) {
+        thumbnailImageView = WeakReference(rootViewReference.get()?.findViewById(R.id.gif_thumbnail))
+        gifImageViewRef = WeakReference(rootViewReference.get()?.findViewById(R.id.gif_view))
+    }
+
+    override fun getFragmentResourceId(): Int = R.layout.fragment_media_viewer_gif
+
+    override fun inquireClose(): Boolean = true
+
+    override fun handleDecryptingFile() {
+        // nothing to do
+    }
+
+    override fun handleDecryptFailure() {
+        // nothing to do
+    }
+
+    override fun showThumbnail(thumbnail: Drawable) {
+        gifImageViewRef.get()?.visibility = View.INVISIBLE
+        thumbnailImageView.get()?.visibility = View.VISIBLE
+        thumbnailImageView.get()?.setImageDrawable(thumbnail)
+    }
+
+    override fun handleDecryptedFile(file: File?) {
+        if (file == null) {
+            logger.error("Cannot show gif: file is null")
+            return
+        }
+        showGif(file)
+    }
+
+    /**
+     * Show gif and hide the progress bar
+     *
+     * @param file the gif file
+     */
+    private fun showGif(file: File) {
+        try {
+            val gifDrawable = GifDrawable(requireContext().contentResolver, Uri.fromFile(file))
+            gifImageViewRef.get()?.setImageDrawable(gifDrawable)
+            gifImageViewRef.get()?.visibility = View.VISIBLE
+            thumbnailImageView.get()?.visibility = View.GONE
+            gifDrawable.start()
+        } catch (e: IOException) {
+            logger.error("Could not show gif", e)
+        }
+    }
+
+}
diff --git a/app/src/main/java/ch/threema/app/fragments/mediaviews/ImageViewFragment.java b/app/src/main/java/ch/threema/app/fragments/mediaviews/ImageViewFragment.java
index 7dfe9bb5..ab8091fe 100644
--- a/app/src/main/java/ch/threema/app/fragments/mediaviews/ImageViewFragment.java
+++ b/app/src/main/java/ch/threema/app/fragments/mediaviews/ImageViewFragment.java
@@ -36,22 +36,20 @@ import com.davemorrissey.labs.subscaleview.SubsamplingScaleImageView;
 import org.slf4j.Logger;
 
 import java.io.File;
-import java.io.IOException;
 import java.lang.ref.WeakReference;
 
 import androidx.annotation.NonNull;
 import ch.threema.app.R;
 import ch.threema.app.utils.BitmapUtil;
-import ch.threema.app.utils.FileUtil;
 import ch.threema.app.utils.TestUtil;
 import ch.threema.base.utils.LoggingUtil;
-import pl.droidsonroids.gif.GifDrawable;
-import pl.droidsonroids.gif.GifImageView;
 
+/**
+ * This fragment is used to show images. Note that GIFs must be shown with the GifViewFragment.
+ */
 public class ImageViewFragment extends MediaViewFragment {
 	private static final Logger logger = LoggingUtil.getThreemaLogger("ImageViewFragment");
 
-	private WeakReference<GifImageView> gifImageViewRef;
 	private WeakReference<SubsamplingScaleImageView> imageViewReference;
 	private WeakReference<ImageView> previewViewReference;
 
@@ -74,7 +72,6 @@ public class ImageViewFragment extends MediaViewFragment {
 		if (TestUtil.required(imageViewReference.get(), thumbnail)) {
 			previewViewReference.get().setVisibility(View.VISIBLE);
 			previewViewReference.get().setImageDrawable(thumbnail);
-			logger.debug("invisible");
 			imageViewReference.get().setVisibility(View.INVISIBLE);
 		}
 	}
@@ -88,7 +85,6 @@ public class ImageViewFragment extends MediaViewFragment {
 		SubsamplingScaleImageView.setPreferredBitmapConfig(Bitmap.Config.ARGB_8888);
 
 		if (rootViewReference != null && rootViewReference.get() != null) {
-			gifImageViewRef = new WeakReference<>(rootViewReference.get().findViewById(R.id.gif_view));
 			imageViewReference = new WeakReference<>(rootViewReference.get().findViewById(R.id.subsampling_image));
 			previewViewReference = new WeakReference<>(rootViewReference.get().findViewById(R.id.preview_image));
 
@@ -139,11 +135,7 @@ public class ImageViewFragment extends MediaViewFragment {
 	protected void handleDecryptedFile(File file) {
 		if (this.isAdded()) {
 			try {
-				if (FileUtil.isAnimGif(requireContext().getContentResolver(), Uri.fromFile(file))) {
-					showGif(file);
-				} else {
-					showImage(file);
-				}
+				showImage(file);
 			} catch (Exception e) {
 				logger.error("Exception", e);
 			}
@@ -169,26 +161,6 @@ public class ImageViewFragment extends MediaViewFragment {
 		}
 	}
 
-	/**
-	 * Show gif and hide the image view.
-	 *
-	 * @param file the gif file
-	 */
-	private void showGif(@NonNull File file) {
-		try {
-			GifDrawable gifDrawable = new GifDrawable(requireContext().getContentResolver(), Uri.fromFile(file));
-			this.gifImageViewRef.get().setImageDrawable(gifDrawable);
-			this.gifImageViewRef.get().setVisibility(View.VISIBLE);
-			gifDrawable.start();
-
-			this.imageViewReference.get().setVisibility(View.INVISIBLE);
-			// Don't show thumbnail for GIFs. This is important especially for transparent GIFs.
-			hideThumbnail();
-		} catch (IOException ignored) {
-			// nothing to do
-		}
-	}
-
 	/**
 	 * Show image and hide the gif view
 	 *
@@ -215,7 +187,5 @@ public class ImageViewFragment extends MediaViewFragment {
 		if (exifOrientation.getRotation() != 0F) {
 			imageViewReference.get().setOrientation(rotation);
 		}
-
-		gifImageViewRef.get().setVisibility(View.INVISIBLE);
 	}
 }
diff --git a/app/src/main/java/ch/threema/app/fragments/mediaviews/MediaPlayerViewFragment.java b/app/src/main/java/ch/threema/app/fragments/mediaviews/MediaPlayerViewFragment.java
index eb37654b..690a1dca 100644
--- a/app/src/main/java/ch/threema/app/fragments/mediaviews/MediaPlayerViewFragment.java
+++ b/app/src/main/java/ch/threema/app/fragments/mediaviews/MediaPlayerViewFragment.java
@@ -21,6 +21,9 @@
 
 package ch.threema.app.fragments.mediaviews;
 
+import static ch.threema.app.utils.StringConversionUtil.getDurationString;
+
+import android.annotation.SuppressLint;
 import android.media.AudioManager;
 import android.media.MediaPlayer;
 import android.net.Uri;
@@ -30,11 +33,15 @@ import android.view.LayoutInflater;
 import android.view.View;
 import android.view.ViewGroup;
 import android.widget.ImageButton;
-import android.widget.ProgressBar;
 import android.widget.TextView;
 
-import com.google.android.exoplayer2.ui.DefaultTimeBar;
-import com.google.android.exoplayer2.ui.TimeBar;
+import androidx.annotation.NonNull;
+import androidx.annotation.Nullable;
+import androidx.core.view.ViewCompat;
+import androidx.media3.ui.DefaultTimeBar;
+import androidx.media3.ui.TimeBar;
+
+import com.google.android.material.progressindicator.CircularProgressIndicator;
 
 import org.slf4j.Logger;
 
@@ -42,22 +49,22 @@ import java.io.File;
 import java.io.IOException;
 import java.lang.ref.WeakReference;
 
-import androidx.annotation.Nullable;
-import androidx.core.view.ViewCompat;
 import ch.threema.app.R;
 import ch.threema.app.activities.MediaViewerActivity;
 import ch.threema.app.utils.MediaPlayerStateWrapper;
 import ch.threema.app.utils.RuntimeUtil;
 import ch.threema.base.utils.LoggingUtil;
 
-import static ch.threema.app.utils.StringConversionUtil.getDurationString;
-
+/**
+ * Media Player Fragment using traditional Android MediaPlayer. Only used to play MIDI and FLAC files which are not supported by ExoPlayer
+ */
+@SuppressLint("UnsafeOptInUsageError")
 public class MediaPlayerViewFragment extends AudioFocusSupportingMediaViewFragment implements TimeBar.OnScrubListener, MediaPlayerStateWrapper.StateListener {
 	private static final Logger logger = LoggingUtil.getThreemaLogger("MediaPlayerViewFragment");
 
 	private WeakReference<TextView> filenameViewRef, positionRef, durationRef;
 	private WeakReference<DefaultTimeBar> timeBarRef;
-	private WeakReference<ProgressBar> progressBarRef;
+	private WeakReference<CircularProgressIndicator> progressBarRef;
 	private WeakReference<ImageButton> playRef, pauseRef;
 
 	private MediaPlayerStateWrapper mediaPlayer;
@@ -76,7 +83,7 @@ public class MediaPlayerViewFragment extends AudioFocusSupportingMediaViewFragme
 	public boolean inquireClose() { return true; }
 
 	@Override
-	public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {
+	public View onCreateView(@NonNull LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {
 		Bundle arguments = getArguments();
 		if (arguments != null) {
 			this.isImmediatePlay = arguments.getBoolean(MediaViewerActivity.EXTRA_ID_IMMEDIATE_PLAY, false);
@@ -284,13 +291,13 @@ public class MediaPlayerViewFragment extends AudioFocusSupportingMediaViewFragme
 	}
 
 	@Override
-	public void onScrubStart(TimeBar timeBar, long position) {}
+	public void onScrubStart(@NonNull TimeBar timeBar, long position) {}
 
 	@Override
-	public void onScrubMove(TimeBar timeBar, long position) {}
+	public void onScrubMove(@NonNull TimeBar timeBar, long position) {}
 
 	@Override
-	public void onScrubStop(TimeBar timeBar, long position, boolean canceled) {
+	public void onScrubStop(@NonNull TimeBar timeBar, long position, boolean canceled) {
 		if (!canceled) {
 			mediaPlayer.seekTo((int) position);
 		}
@@ -315,4 +322,12 @@ public class MediaPlayerViewFragment extends AudioFocusSupportingMediaViewFragme
 			}
 		}
 	}
+
+	@Override
+	public void setUserVisibleHint(boolean isVisibleToUser) {
+		// stop player if fragment comes out of view
+		if (!isVisibleToUser) {
+			pauseAudio();
+		}
+	}
 }
diff --git a/app/src/main/java/ch/threema/app/fragments/mediaviews/MediaViewFragment.java b/app/src/main/java/ch/threema/app/fragments/mediaviews/MediaViewFragment.java
index 64ad17fb..3647d605 100644
--- a/app/src/main/java/ch/threema/app/fragments/mediaviews/MediaViewFragment.java
+++ b/app/src/main/java/ch/threema/app/fragments/mediaviews/MediaViewFragment.java
@@ -23,6 +23,7 @@ package ch.threema.app.fragments.mediaviews;
 
 import android.app.Activity;
 import android.graphics.Bitmap;
+import android.graphics.Color;
 import android.graphics.drawable.BitmapDrawable;
 import android.graphics.drawable.Drawable;
 import android.os.Bundle;
@@ -78,15 +79,10 @@ abstract public class MediaViewFragment extends Fragment {
 		void thumbnailLoaded(Drawable bitmap);
 	}
 
-	public interface OnMediaOpenListener {
-		void closed();
-		void open();
-	}
-
 	private AbstractMessageModel messageModel;
 
 	private Future threadFullDecrypt;
-	private ExecutorService threadPoolExecutor = Executors.newSingleThreadExecutor();
+	private final ExecutorService threadPoolExecutor = Executors.newSingleThreadExecutor();
 	protected FileService fileService;
 	protected MessageService messageService;
 	private File[] decryptedFileCache;
@@ -125,20 +121,14 @@ abstract public class MediaViewFragment extends Fragment {
 	}
 
 	@Override
-	public void onAttach(Activity activity) {
+	public void onAttach(@NonNull Activity activity) {
 		super.onAttach(activity);
 
 		this.activity = activity;
 	}
 
-	public void setOnClickListener(View.OnClickListener onClickListener) {
-	}
-
-	public void setOnMediaOpenListener(OnMediaOpenListener onMediaOpenListener) {
-	}
-
 	@Override
-	public View onCreateView(LayoutInflater inflater, ViewGroup container,
+	public View onCreateView(@NonNull LayoutInflater inflater, ViewGroup container,
 							 Bundle savedInstanceState) {
 
 		ServiceManager serviceManager = ThreemaApplication.getServiceManager();
@@ -219,7 +209,7 @@ abstract public class MediaViewFragment extends Fragment {
 						thumbnail.setTint(ContextCompat.getColor(requireContext(), R.color.material_dark_grey));
 					}
 				} else if (messageModel.getType() == MessageType.FILE) {
-					thumbnail = new BitmapDrawable(getResources(), BitmapUtil.tintImage(fileService.getDefaultMessageThumbnailBitmap(getContext(), messageModel, null, messageModel.getFileData().getMimeType(), true), ContextCompat.getColor(requireContext(), R.color.material_dark_grey)));
+					thumbnail = new BitmapDrawable(getResources(), fileService.getDefaultMessageThumbnailBitmap(getContext(), messageModel, null, messageModel.getFileData().getMimeType(), true, ContextCompat.getColor(requireContext(), R.color.material_dark_grey)));
 				}
 			}
 
@@ -401,4 +391,18 @@ abstract public class MediaViewFragment extends Fragment {
 	protected void handleFileName(@Nullable String filename) {
 		// nothing to do
 	}
+
+	@Override
+	public void onPause() {
+		setUserVisibleHint(false);
+		super.onPause();
+	}
+
+	@Override
+	public void setMenuVisibility(boolean menuVisible) {
+		super.setMenuVisibility(menuVisible);
+		if (!menuVisible) {
+			setUserVisibleHint(false);
+		}
+	}
 }
diff --git a/app/src/main/java/ch/threema/app/fragments/mediaviews/VideoViewFragment.java b/app/src/main/java/ch/threema/app/fragments/mediaviews/VideoViewFragment.java
index 6ed4b10a..109a99f5 100644
--- a/app/src/main/java/ch/threema/app/fragments/mediaviews/VideoViewFragment.java
+++ b/app/src/main/java/ch/threema/app/fragments/mediaviews/VideoViewFragment.java
@@ -21,49 +21,57 @@
 
 package ch.threema.app.fragments.mediaviews;
 
+import android.annotation.SuppressLint;
 import android.graphics.drawable.Drawable;
 import android.net.Uri;
 import android.os.Bundle;
 import android.view.LayoutInflater;
+import android.view.MotionEvent;
+import android.view.ScaleGestureDetector;
 import android.view.TextureView;
 import android.view.View;
 import android.view.ViewGroup;
 import android.widget.ImageView;
-import android.widget.ProgressBar;
 import android.widget.Toast;
 
-import com.google.android.exoplayer2.ExoPlayer;
-import com.google.android.exoplayer2.MediaItem;
-import com.google.android.exoplayer2.PlaybackException;
-import com.google.android.exoplayer2.Player;
-import com.google.android.exoplayer2.source.MediaSource;
-import com.google.android.exoplayer2.source.ProgressiveMediaSource;
-import com.google.android.exoplayer2.ui.PlayerControlView;
-import com.google.android.exoplayer2.upstream.DataSource;
-import com.google.android.exoplayer2.upstream.DefaultDataSourceFactory;
-import com.google.android.exoplayer2.util.Util;
+import androidx.annotation.NonNull;
+import androidx.annotation.UiThread;
+import androidx.media3.common.AudioAttributes;
+import androidx.media3.common.C;
+import androidx.media3.common.MediaItem;
+import androidx.media3.common.PlaybackException;
+import androidx.media3.common.Player;
+import androidx.media3.common.util.Util;
+import androidx.media3.datasource.DataSource;
+import androidx.media3.datasource.DefaultDataSourceFactory;
+import androidx.media3.exoplayer.ExoPlayer;
+import androidx.media3.exoplayer.source.MediaSource;
+import androidx.media3.exoplayer.source.ProgressiveMediaSource;
+import androidx.media3.ui.PlayerControlView;
+import androidx.media3.ui.PlayerView;
+
+import com.google.android.material.progressindicator.CircularProgressIndicator;
 
 import org.slf4j.Logger;
 
 import java.io.File;
 import java.lang.ref.WeakReference;
 
-import androidx.annotation.NonNull;
-import androidx.annotation.UiThread;
-import androidx.core.view.ViewCompat;
 import ch.threema.app.R;
 import ch.threema.app.activities.MediaViewerActivity;
-import ch.threema.app.ui.ZoomableExoPlayerView;
+import ch.threema.app.ui.ExoPlayerZoomGestureDetector;
+import ch.threema.app.utils.ConfigUtils;
 import ch.threema.app.utils.TestUtil;
 import ch.threema.app.utils.VideoUtil;
 import ch.threema.base.utils.LoggingUtil;
 
-public class VideoViewFragment extends AudioFocusSupportingMediaViewFragment implements Player.Listener {
+@SuppressLint("UnsafeOptInUsageError")
+public class VideoViewFragment extends MediaViewFragment implements Player.Listener {
 	private static final Logger logger = LoggingUtil.getThreemaLogger("VideoViewFragment");
 
 	private WeakReference<ImageView> previewImageViewRef;
-	private WeakReference<ProgressBar> progressBarRef;
-	private WeakReference<ZoomableExoPlayerView> videoViewRef;
+	private WeakReference<CircularProgressIndicator> progressBarRef;
+	private WeakReference<PlayerView> videoViewRef;
 	private ExoPlayer videoPlayer;
 	private boolean isImmediatePlay, isPreparing;
 
@@ -73,13 +81,20 @@ public class VideoViewFragment extends AudioFocusSupportingMediaViewFragment imp
 	}
 
 	@Override
-	public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {
+	public View onCreateView(@NonNull LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {
 		logger.debug("onCreateView");
 
 		this.isImmediatePlay = getArguments().getBoolean(MediaViewerActivity.EXTRA_ID_IMMEDIATE_PLAY, false);
 
+		AudioAttributes audioAttributes = new AudioAttributes.Builder()
+			.setUsage(C.USAGE_MEDIA)
+			.setContentType(C.AUDIO_CONTENT_TYPE_MOVIE)
+			.setAllowedCapturePolicy(C.ALLOW_CAPTURE_BY_NONE)
+			.build();
+
 		try {
 			this.videoPlayer = VideoUtil.getExoPlayer(requireContext());
+			this.videoPlayer.setAudioAttributes(audioAttributes, true);
 			this.videoPlayer.addListener(this);
 		} catch (OutOfMemoryError e) {
 			logger.error("Exception", e);
@@ -144,16 +159,18 @@ public class VideoViewFragment extends AudioFocusSupportingMediaViewFragment imp
 			this.videoViewRef.get().setControllerShowTimeoutMs(MediaViewerActivity.ACTIONBAR_TIMEOUT);
 			this.videoViewRef.get().setControllerAutoShow(true);
 
+			final ScaleGestureDetector scaleGestureDetector = new ScaleGestureDetector(getContext(), new ExoPlayerZoomGestureDetector(this.videoViewRef.get()));
+			videoViewRef.get().setOnTouchListener(new View.OnTouchListener() {
+				@Override
+				public boolean onTouch(View v, MotionEvent event) {
+					scaleGestureDetector.onTouchEvent(event);
+					return false;
+				}
+			});
+
 			logger.debug("View Type: " + (this.videoViewRef.get().getVideoSurfaceView() instanceof TextureView ? "Texture" : "Surface"));
 
-			View controllerView = this.videoViewRef.get().findViewById(R.id.position_container);
-			ViewCompat.setOnApplyWindowInsetsListener(controllerView, (v, insets) -> {
-				ViewGroup.MarginLayoutParams params = (ViewGroup.MarginLayoutParams) v.getLayoutParams();
-				params.leftMargin = insets.getSystemWindowInsetLeft();
-				params.rightMargin = insets.getSystemWindowInsetRight();
-				params.bottomMargin = insets.getSystemWindowInsetBottom();
-				return insets;
-			});
+			ConfigUtils.adjustExoPlayerControllerMargins(getContext(), this.videoViewRef.get());
 
 			this.progressBarRef = new WeakReference<>(rootViewReference.get().findViewById(R.id.progress_bar));
 		}
@@ -219,8 +236,6 @@ public class VideoViewFragment extends AudioFocusSupportingMediaViewFragment imp
 	public void onDestroyView() {
 		logger.debug("onDestroyView");
 
-		abandonFocus();
-
 		if (this.videoPlayer != null) {
 			this.videoPlayer.release();
 			this.videoPlayer = null;
@@ -231,12 +246,6 @@ public class VideoViewFragment extends AudioFocusSupportingMediaViewFragment imp
 
 	@Override
 	public void onIsPlayingChanged(boolean isPlaying) {
-		if (isPlaying) {
-			requestFocus();
-		} else {
-			abandonFocus();
-		}
-
 		keepScreenOn(isPlaying);
 	}
 
@@ -273,23 +282,11 @@ public class VideoViewFragment extends AudioFocusSupportingMediaViewFragment imp
 
 		// stop player if fragment comes out of view
 		if (!isVisibleToUser && this.videoPlayer != null &&
-				(this.videoPlayer.isLoading() ||
-				this.videoPlayer.getPlaybackState() != Player.STATE_IDLE)) {
+				(this.videoPlayer.isLoading() || this.videoPlayer.isPlaying())) {
 			this.videoPlayer.setPlayWhenReady(false);
+			this.videoPlayer.pause();
 		}
 	}
 
-	@Override
-	public void onPause() {
-		setUserVisibleHint(false);
-		super.onPause();
-	}
 
-	@Override
-	public void setVolume(float volume) {
-		// ducking
-		if (this.videoPlayer != null) {
-			this.videoPlayer.setVolume(volume);
-		}
-	}
 }
diff --git a/app/src/main/java/ch/threema/app/fragments/wizard/WizardFragment.java b/app/src/main/java/ch/threema/app/fragments/wizard/WizardFragment.java
index d6e97246..78895c17 100644
--- a/app/src/main/java/ch/threema/app/fragments/wizard/WizardFragment.java
+++ b/app/src/main/java/ch/threema/app/fragments/wizard/WizardFragment.java
@@ -53,7 +53,6 @@ public abstract class WizardFragment extends Fragment {
 	protected PreferenceService preferenceService;
 	protected UserService userService;
 	protected LocaleService localeService;
-	protected AppBarLayout appBarLayout;
 	protected ViewStub contentViewStub;
 
 	@Override
@@ -73,7 +72,6 @@ public abstract class WizardFragment extends Fragment {
 		View rootView = inflater.inflate(R.layout.fragment_wizard, container, false);
 
 		contentViewStub = rootView.findViewById(R.id.stub_content);
-		appBarLayout = rootView.findViewById(R.id.appbar_layout);
 
 		ImageView infoIcon = rootView.findViewById(R.id.wizard_icon_info);
 		infoIcon.setOnClickListener(v -> showAdditionalInfo());
diff --git a/app/src/main/java/ch/threema/app/fragments/wizard/WizardFragment0.java b/app/src/main/java/ch/threema/app/fragments/wizard/WizardFragment0.java
index b12825e8..cd9faefc 100644
--- a/app/src/main/java/ch/threema/app/fragments/wizard/WizardFragment0.java
+++ b/app/src/main/java/ch/threema/app/fragments/wizard/WizardFragment0.java
@@ -30,6 +30,7 @@ import android.widget.TextView;
 import java.util.Objects;
 
 import ch.threema.app.R;
+import ch.threema.app.activities.wizard.WizardBaseActivity;
 
 public class WizardFragment0 extends WizardFragment {
 	public static final int PAGE_ID = 0;
@@ -40,7 +41,6 @@ public class WizardFragment0 extends WizardFragment {
 		View rootView = Objects.requireNonNull(super.onCreateView(inflater, container, savedInstanceState));
 
 		TextView title = rootView.findViewById(R.id.wizard_title);
-		title.setText(R.string.new_wizard_welcome);
 
 		// inflate content layout
 		contentViewStub.setLayoutResource(R.layout.fragment_wizard0);
@@ -49,6 +49,14 @@ public class WizardFragment0 extends WizardFragment {
 		TextView idTitle = rootView.findViewById(R.id.wizard_id_title);
 		idTitle.setText(this.userService.getIdentity());
 
+		if (((WizardBaseActivity) getActivity()).isNewIdentity()) {
+			title.setText(R.string.new_wizard_welcome);
+		} else {
+			title.setText(R.string.welcome_back);
+			((TextView) rootView.findViewById(R.id.scooter)).setText(R.string.id_restored_successfully);
+			rootView.findViewById(R.id.wizard_id_explain).setVisibility(View.GONE);
+		}
+
 		return rootView;
 	}
 
diff --git a/app/src/main/java/ch/threema/app/fragments/wizard/WizardFragment4.java b/app/src/main/java/ch/threema/app/fragments/wizard/WizardFragment4.java
index 5e73e715..41ea6dbd 100644
--- a/app/src/main/java/ch/threema/app/fragments/wizard/WizardFragment4.java
+++ b/app/src/main/java/ch/threema/app/fragments/wizard/WizardFragment4.java
@@ -106,12 +106,16 @@ public class WizardFragment4 extends WizardFragment implements View.OnClickListe
 
 	void initValues() {
 		if (isResumed()) {
-			String email = callback.getEmail();
-			String phone = callback.getPhone();
+			String email = TestUtil.empty(callback.getEmail()) ? callback.getPresetEmail() : callback.getEmail();
+			String phone = TestUtil.empty(callback.getPhone()) ? callback.getPresetPhone() : callback.getPhone();
 
 			nicknameText.setText(callback.getNickname());
-			emailText.setText(TestUtil.empty(email) ? getString(R.string.not_linked) : EMAIL_LINKED_PLACEHOLDER.equals(email) ? getString(R.string.unchanged) : email);
-			phoneText.setText(TestUtil.empty(phone) ? getString(R.string.not_linked) : PHONE_LINKED_PLACEHOLDER.equals(phone) ? getString(R.string.unchanged) : phone);
+			emailText.setText(TestUtil.empty(email) ?
+				getString(R.string.not_linked) :
+				(EMAIL_LINKED_PLACEHOLDER.equals(email) ? getString(R.string.unchanged) : email));
+			phoneText.setText(TestUtil.empty(phone) ?
+				getString(R.string.not_linked) :
+				(PHONE_LINKED_PLACEHOLDER.equals(phone) ? getString(R.string.unchanged) : phone));
 			syncContactsText.setText(callback.getSyncContacts() ? R.string.on : R.string.off);
 			setThreemaSafeInProgress(false, null);
 		}
diff --git a/app/src/main/java/ch/threema/app/glide/AvatarGlideModule.java b/app/src/main/java/ch/threema/app/glide/AvatarGlideModule.java
index 37c4433b..dac59bb4 100644
--- a/app/src/main/java/ch/threema/app/glide/AvatarGlideModule.java
+++ b/app/src/main/java/ch/threema/app/glide/AvatarGlideModule.java
@@ -24,13 +24,15 @@ package ch.threema.app.glide;
 import android.content.Context;
 import android.graphics.Bitmap;
 
+import androidx.annotation.NonNull;
+
 import com.bumptech.glide.Glide;
 import com.bumptech.glide.Registry;
 import com.bumptech.glide.annotation.GlideModule;
 import com.bumptech.glide.module.AppGlideModule;
 
-import androidx.annotation.NonNull;
 import ch.threema.app.services.AvatarCacheServiceImpl;
+import ch.threema.storage.models.AbstractMessageModel;
 
 @GlideModule
 public class AvatarGlideModule extends AppGlideModule {
@@ -40,6 +42,6 @@ public class AvatarGlideModule extends AppGlideModule {
 		registry.prepend(AvatarCacheServiceImpl.ContactAvatarConfig.class, Bitmap.class, new ContactAvatarModelLoaderFactory(context));
 		registry.prepend(AvatarCacheServiceImpl.GroupAvatarConfig.class, Bitmap.class, new GroupAvatarModelLoaderFactory(context));
 		registry.prepend(AvatarCacheServiceImpl.DistributionListAvatarConfig.class, Bitmap.class, new DistributionListAvatarModelLoaderFactory(context));
+		registry.prepend(AbstractMessageModel.class, Bitmap.class, new ThumbnailLoaderFactory(context));
 	}
-
 }
diff --git a/app/src/main/java/androidx/core/app/FixedJobIntentService.java b/app/src/main/java/ch/threema/app/glide/ThumbnailConfig.java
similarity index 55%
rename from app/src/main/java/androidx/core/app/FixedJobIntentService.java
rename to app/src/main/java/ch/threema/app/glide/ThumbnailConfig.java
index 244082ce..89e20f3a 100644
--- a/app/src/main/java/androidx/core/app/FixedJobIntentService.java
+++ b/app/src/main/java/ch/threema/app/glide/ThumbnailConfig.java
@@ -4,7 +4,7 @@
  *   |_| |_||_|_| \___\___|_|_|_\__,_(_)
  *
  * Threema for Android
- * Copyright (c) 2019-2023 Threema GmbH
+ * Copyright (c) 2023 Threema GmbH
  *
  * This program is free software: you can redistribute it and/or modify
  * it under the terms of the GNU Affero General Public License, version 3,
@@ -19,22 +19,27 @@
  * along with this program. If not, see <https://www.gnu.org/licenses/>.
  */
 
-package androidx.core.app;
+package ch.threema.app.glide;
 
-import org.slf4j.Logger;
-import org.slf4j.LoggerFactory;
+import androidx.annotation.NonNull;
+import androidx.annotation.Nullable;
 
-public abstract class FixedJobIntentService extends JobIntentService {
-	private static final Logger logger = LoggerFactory.getLogger(FixedJobIntentService.class);
+import ch.threema.storage.models.MessageModel;
+
+public class ThumbnailConfig {
+	final MessageModel model;
+
+	public ThumbnailConfig(@NonNull MessageModel model) {
+		this.model = model;
+	}
+
+	@Override
+	public boolean equals(@Nullable Object obj) {
+		return obj instanceof  MessageModel && ((MessageModel) obj).getId() == model.getId();
+	}
 
 	@Override
-	GenericWorkItem dequeueWork() {
-		// See https://medium.com/@mohamed.zak/workaround-to-solve-securityexception-caused-by-jobintentservice-1f4b0e688a26
-		try {
-			return super.dequeueWork();
-		} catch (SecurityException|IllegalArgumentException exception) {
-			logger.info("Exception while dequeueing work", exception);
-		}
-		return null;
+	public int hashCode() {
+		return model.getId();
 	}
 }
diff --git a/app/src/main/java/ch/threema/app/glide/ThumbnailFetcher.kt b/app/src/main/java/ch/threema/app/glide/ThumbnailFetcher.kt
new file mode 100644
index 00000000..b3486da3
--- /dev/null
+++ b/app/src/main/java/ch/threema/app/glide/ThumbnailFetcher.kt
@@ -0,0 +1,69 @@
+/*  _____ _
+ * |_   _| |_  _ _ ___ ___ _ __  __ _
+ *   | | | ' \| '_/ -_) -_) '  \/ _` |_
+ *   |_| |_||_|_| \___\___|_|_|_\__,_(_)
+ *
+ * Threema for Android
+ * Copyright (c) 2022-2023 Threema GmbH
+ *
+ * This program is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU Affero General Public License, version 3,
+ * as published by the Free Software Foundation.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+ * GNU Affero General Public License for more details.
+ *
+ * You should have received a copy of the GNU Affero General Public License
+ * along with this program. If not, see <https://www.gnu.org/licenses/>.
+ */
+
+package ch.threema.app.glide
+
+import android.content.Context
+import android.graphics.Bitmap
+import android.graphics.Color
+import ch.threema.app.R
+import ch.threema.app.ThreemaApplication
+import ch.threema.app.services.FileService
+import ch.threema.app.utils.ConfigUtils
+import ch.threema.storage.models.AbstractMessageModel
+import com.bumptech.glide.Priority
+import com.bumptech.glide.load.DataSource
+import com.bumptech.glide.load.data.DataFetcher
+
+/**
+ * This class is used to get the thumbnails from the database or create placeholders. The results of the loaded bitmaps will be cached by glide (if possible).
+ */
+class ThumbnailFetcher(
+    private val context: Context,
+    private val messageModel: AbstractMessageModel,
+    ) : DataFetcher<Bitmap> {
+
+    private val fileService: FileService? by lazy { ThreemaApplication.getServiceManager()?.fileService }
+
+    override fun loadData(priority: Priority, callback: DataFetcher.DataCallback<in Bitmap>) {
+        val messageModel = messageModel
+
+        val thumbnail: Bitmap? = try {
+            fileService?.getMessageThumbnailBitmap(messageModel, null)
+        } catch (e: java.lang.Exception) {
+            null
+        }
+
+        callback.onDataReady(thumbnail)
+    }
+
+    override fun cleanup() {
+        // Nothing to cleanup
+    }
+
+    override fun cancel() {
+        // Nothing to do here
+    }
+
+    override fun getDataClass(): Class<Bitmap> = Bitmap::class.java
+
+    override fun getDataSource(): DataSource = DataSource.LOCAL
+}
diff --git a/app/src/main/java/ch/threema/app/glide/ThumbnailLoader.kt b/app/src/main/java/ch/threema/app/glide/ThumbnailLoader.kt
new file mode 100644
index 00000000..10af3855
--- /dev/null
+++ b/app/src/main/java/ch/threema/app/glide/ThumbnailLoader.kt
@@ -0,0 +1,37 @@
+/*  _____ _
+ * |_   _| |_  _ _ ___ ___ _ __  __ _
+ *   | | | ' \| '_/ -_) -_) '  \/ _` |_
+ *   |_| |_||_|_| \___\___|_|_|_\__,_(_)
+ *
+ * Threema for Android
+ * Copyright (c) 2022-2023 Threema GmbH
+ *
+ * This program is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU Affero General Public License, version 3,
+ * as published by the Free Software Foundation.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+ * GNU Affero General Public License for more details.
+ *
+ * You should have received a copy of the GNU Affero General Public License
+ * along with this program. If not, see <https://www.gnu.org/licenses/>.
+ */
+
+package ch.threema.app.glide
+
+import android.content.Context
+import android.graphics.Bitmap
+import ch.threema.storage.models.AbstractMessageModel
+import com.bumptech.glide.load.Options
+import com.bumptech.glide.load.model.ModelLoader
+import com.bumptech.glide.signature.ObjectKey
+
+class ThumbnailLoader(val context: Context) : ModelLoader<AbstractMessageModel, Bitmap> {
+    override fun buildLoadData(model: AbstractMessageModel, width: Int, height: Int, options: Options): ModelLoader.LoadData<Bitmap> {
+        return ModelLoader.LoadData(ObjectKey(model), ThumbnailFetcher(context, model))
+    }
+
+    override fun handles(model: AbstractMessageModel) = true
+}
diff --git a/app/src/main/java/ch/threema/app/receivers/RestrictBackgroundChangedReceiver.java b/app/src/main/java/ch/threema/app/glide/ThumbnailLoaderFactory.kt
similarity index 52%
rename from app/src/main/java/ch/threema/app/receivers/RestrictBackgroundChangedReceiver.java
rename to app/src/main/java/ch/threema/app/glide/ThumbnailLoaderFactory.kt
index 5cf021e3..60516757 100644
--- a/app/src/main/java/ch/threema/app/receivers/RestrictBackgroundChangedReceiver.java
+++ b/app/src/main/java/ch/threema/app/glide/ThumbnailLoaderFactory.kt
@@ -4,7 +4,7 @@
  *   |_| |_||_|_| \___\___|_|_|_\__,_(_)
  *
  * Threema for Android
- * Copyright (c) 2013-2023 Threema GmbH
+ * Copyright (c) 2022-2023 Threema GmbH
  *
  * This program is free software: you can redistribute it and/or modify
  * it under the terms of the GNU Affero General Public License, version 3,
@@ -19,23 +19,21 @@
  * along with this program. If not, see <https://www.gnu.org/licenses/>.
  */
 
-package ch.threema.app.receivers;
+package ch.threema.app.glide
 
-import android.content.BroadcastReceiver;
-import android.content.Context;
-import android.content.Intent;
+import android.content.Context
+import android.graphics.Bitmap
+import ch.threema.storage.models.AbstractMessageModel
+import com.bumptech.glide.load.model.ModelLoader
+import com.bumptech.glide.load.model.ModelLoaderFactory
+import com.bumptech.glide.load.model.MultiModelLoaderFactory
 
-import org.slf4j.Logger;
+class ThumbnailLoaderFactory(private val context: Context) : ModelLoaderFactory<AbstractMessageModel, Bitmap> {
 
-import ch.threema.app.services.RestrictBackgroundChangedService;
-import ch.threema.base.utils.LoggingUtil;
+    override fun build(unused: MultiModelLoaderFactory): ModelLoader<AbstractMessageModel, Bitmap> = ThumbnailLoader(context)
 
-public class RestrictBackgroundChangedReceiver extends BroadcastReceiver {
-	private static final Logger logger = LoggingUtil.getThreemaLogger("RestrictBackgroundChangedReceiver");
+    override fun teardown() {
+        // Nothing to do here
+    }
 
-	@Override
-	public void onReceive(Context context, Intent intent) {
-		logger.info("Restrict Background changed broadcast received");
-		RestrictBackgroundChangedService.enqueueWork(context, intent);
-	}
 }
diff --git a/app/src/main/java/ch/threema/app/globalsearch/GlobalSearchActivity.java b/app/src/main/java/ch/threema/app/globalsearch/GlobalSearchActivity.java
index 8a522a46..35409bec 100644
--- a/app/src/main/java/ch/threema/app/globalsearch/GlobalSearchActivity.java
+++ b/app/src/main/java/ch/threema/app/globalsearch/GlobalSearchActivity.java
@@ -21,19 +21,19 @@
 
 package ch.threema.app.globalsearch;
 
+import static com.google.android.material.bottomsheet.BottomSheetBehavior.STATE_DRAGGING;
+import static com.google.android.material.bottomsheet.BottomSheetBehavior.STATE_EXPANDED;
+import static com.google.android.material.bottomsheet.BottomSheetBehavior.STATE_HIDDEN;
+import static com.google.android.material.bottomsheet.BottomSheetBehavior.STATE_SETTLING;
+
 import android.annotation.SuppressLint;
 import android.content.Intent;
+import android.graphics.drawable.Drawable;
 import android.os.Bundle;
 import android.os.Handler;
 import android.view.View;
-import android.widget.ProgressBar;
 import android.widget.TextView;
 
-import com.google.android.material.bottomsheet.BottomSheetBehavior;
-import com.google.android.material.chip.Chip;
-
-import org.slf4j.Logger;
-
 import androidx.annotation.IdRes;
 import androidx.annotation.NonNull;
 import androidx.annotation.UiThread;
@@ -42,6 +42,14 @@ import androidx.lifecycle.ViewModelProvider;
 import androidx.recyclerview.widget.DefaultItemAnimator;
 import androidx.recyclerview.widget.LinearLayoutManager;
 import androidx.recyclerview.widget.RecyclerView;
+
+import com.google.android.material.bottomsheet.BottomSheetBehavior;
+import com.google.android.material.chip.Chip;
+import com.google.android.material.progressindicator.CircularProgressIndicator;
+import com.google.android.material.shape.MaterialShapeDrawable;
+
+import org.slf4j.Logger;
+
 import ch.threema.app.R;
 import ch.threema.app.ThreemaApplication;
 import ch.threema.app.activities.ComposeMessageActivity;
@@ -54,19 +62,12 @@ import ch.threema.app.services.ContactService;
 import ch.threema.app.services.DeadlineListService;
 import ch.threema.app.services.GroupService;
 import ch.threema.app.ui.ThreemaSearchView;
-import ch.threema.app.utils.AnimationUtil;
-import ch.threema.app.utils.ConfigUtils;
 import ch.threema.app.utils.EditTextUtil;
 import ch.threema.base.utils.LoggingUtil;
 import ch.threema.storage.models.AbstractMessageModel;
 import ch.threema.storage.models.DistributionListMessageModel;
 import ch.threema.storage.models.GroupMessageModel;
 
-import static com.google.android.material.bottomsheet.BottomSheetBehavior.STATE_DRAGGING;
-import static com.google.android.material.bottomsheet.BottomSheetBehavior.STATE_EXPANDED;
-import static com.google.android.material.bottomsheet.BottomSheetBehavior.STATE_HIDDEN;
-import static com.google.android.material.bottomsheet.BottomSheetBehavior.STATE_SETTLING;
-
 public class GlobalSearchActivity extends ThreemaToolbarActivity implements ThreemaSearchView.OnQueryTextListener {
 	private static final Logger logger = LoggingUtil.getThreemaLogger("GlobalSearchActivity");
 	private static final int QUERY_MIN_LENGTH = 2;
@@ -80,7 +81,7 @@ public class GlobalSearchActivity extends ThreemaToolbarActivity implements Thre
 	private GlobalSearchViewModel chatsViewModel;
 	private TextView emptyTextView;
 	private ThreemaSearchView searchView;
-	private ProgressBar progressBar;
+	private CircularProgressIndicator progressBar;
 	private DeadlineListService hiddenChatsListService;
 	private ContactService contactService;
 	private GroupService groupService;
@@ -157,13 +158,18 @@ public class GlobalSearchActivity extends ThreemaToolbarActivity implements Thre
 						break;
 					case STATE_EXPANDED:
 						findViewById(R.id.drag_handle).setVisibility(View.INVISIBLE);
-						getWindow().setStatusBarColor(ConfigUtils.getColorFromAttribute(GlobalSearchActivity.this, R.attr.attach_status_bar_color_expanded));
+						Drawable background = bottomSheetLayout.getBackground();
+						if (background instanceof MaterialShapeDrawable) {
+							getWindow().setStatusBarColor(((MaterialShapeDrawable) background).getResolvedTintColor());
+						} else {
+							getWindow().setStatusBarColor(getResources().getColor(R.color.attach_status_bar_color_expanded));
+						}
 						break;
 					case STATE_SETTLING:
 						findViewById(R.id.drag_handle).setVisibility(View.VISIBLE);
 						break;
 					case STATE_DRAGGING:
-						getWindow().setStatusBarColor(ConfigUtils.getColorFromAttribute(GlobalSearchActivity.this, R.attr.attach_status_bar_color_collapsed));
+						getWindow().setStatusBarColor(getResources().getColor(R.color.attach_status_bar_color_collapsed));
 					default:
 						break;
 				}
@@ -182,7 +188,7 @@ public class GlobalSearchActivity extends ThreemaToolbarActivity implements Thre
 			}
 		});
 
-		getWindow().setStatusBarColor(ConfigUtils.getColorFromAttribute(GlobalSearchActivity.this, R.attr.attach_status_bar_color_collapsed));
+		getWindow().setStatusBarColor(getResources().getColor(R.color.attach_status_bar_color_collapsed));
 
 		searchView = findViewById(R.id.search);
 		searchView.setOnQueryTextListener(this);
@@ -275,7 +281,7 @@ public class GlobalSearchActivity extends ThreemaToolbarActivity implements Thre
 		intent.putExtra(ComposeMessageFragment.EXTRA_API_MESSAGE_ID, messageModel.getApiMessageId());
 		intent.putExtra(ComposeMessageFragment.EXTRA_SEARCH_QUERY, queryText);
 
-		AnimationUtil.startActivityForResult(this, view, intent, ThreemaActivity.ACTIVITY_ID_COMPOSE_MESSAGE);
+		startActivityForResult(intent, ThreemaActivity.ACTIVITY_ID_COMPOSE_MESSAGE);
 
 		finish();
 	}
diff --git a/app/src/main/java/ch/threema/app/grouplinks/AddGroupLinkBottomSheet.java b/app/src/main/java/ch/threema/app/grouplinks/AddGroupLinkBottomSheet.java
index 4486a085..837212d6 100644
--- a/app/src/main/java/ch/threema/app/grouplinks/AddGroupLinkBottomSheet.java
+++ b/app/src/main/java/ch/threema/app/grouplinks/AddGroupLinkBottomSheet.java
@@ -21,9 +21,12 @@
 
 package ch.threema.app.grouplinks;
 
+import static com.google.android.material.bottomsheet.BottomSheetBehavior.STATE_HIDDEN;
+
 import android.content.Context;
 import android.content.Intent;
 import android.content.res.Configuration;
+import android.database.SQLException;
 import android.graphics.Rect;
 import android.os.Bundle;
 import android.text.Editable;
@@ -38,22 +41,21 @@ import android.widget.FrameLayout;
 import android.widget.TextView;
 import android.widget.Toast;
 
+import androidx.annotation.NonNull;
+import androidx.appcompat.widget.AppCompatImageButton;
+import androidx.appcompat.widget.FitWindowsFrameLayout;
+import androidx.constraintlayout.widget.ConstraintLayout;
+import androidx.coordinatorlayout.widget.CoordinatorLayout;
+
 import com.google.android.material.bottomsheet.BottomSheetBehavior;
+import com.google.android.material.checkbox.MaterialCheckBox;
 import com.google.android.material.datepicker.MaterialDatePicker;
 import com.google.android.material.textfield.TextInputLayout;
 
-import net.sqlcipher.SQLException;
-
 import org.slf4j.Logger;
 
 import java.util.Date;
 
-import androidx.annotation.NonNull;
-import androidx.appcompat.widget.AppCompatCheckBox;
-import androidx.appcompat.widget.AppCompatImageButton;
-import androidx.appcompat.widget.FitWindowsFrameLayout;
-import androidx.constraintlayout.widget.ConstraintLayout;
-import androidx.coordinatorlayout.widget.CoordinatorLayout;
 import ch.threema.app.R;
 import ch.threema.app.ThreemaApplication;
 import ch.threema.app.activities.ThreemaToolbarActivity;
@@ -62,7 +64,6 @@ import ch.threema.app.exceptions.FileSystemNotPresentException;
 import ch.threema.app.mediaattacher.ControlPanelButton;
 import ch.threema.app.services.GroupService;
 import ch.threema.app.services.group.GroupInviteService;
-import ch.threema.app.utils.ConfigUtils;
 import ch.threema.app.utils.IntentDataUtil;
 import ch.threema.app.utils.LogUtil;
 import ch.threema.base.utils.LoggingUtil;
@@ -72,8 +73,6 @@ import ch.threema.storage.models.GroupModel;
 import ch.threema.storage.models.group.GroupInviteModel;
 import java8.util.Optional;
 
-import static com.google.android.material.bottomsheet.BottomSheetBehavior.STATE_HIDDEN;
-
 public class AddGroupLinkBottomSheet extends ThreemaToolbarActivity implements View.OnClickListener {
 
 	private static final Logger logger = LoggingUtil.getThreemaLogger("AddGroupLinkBottomSheet");
@@ -89,7 +88,7 @@ public class AddGroupLinkBottomSheet extends ThreemaToolbarActivity implements V
 
 	private TextInputLayout textInputLayout;
 	private EmojiEditText newGroupLinkName;
-	private AppCompatCheckBox administrationCheckbox;
+	private MaterialCheckBox administrationCheckbox;
 	private AppCompatImageButton expirationDateButton;
 	private TextView linkExpirationDate;
 	private ControlPanelButton qrButton;
@@ -146,7 +145,7 @@ public class AddGroupLinkBottomSheet extends ThreemaToolbarActivity implements V
 	}
 
 	private void initLayout() {
-		getWindow().setStatusBarColor(ConfigUtils.getColorFromAttribute(AddGroupLinkBottomSheet.this, R.attr.attach_status_bar_color_collapsed));
+		getWindow().setStatusBarColor(this.getResources().getColor(R.color.attach_status_bar_color_collapsed));
 
 		this.textInputLayout = findViewById(R.id.text_input_layout);
 		this.newGroupLinkName = findViewById(R.id.link_name);
diff --git a/app/src/main/java/ch/threema/app/grouplinks/GroupLinkOverviewActivity.java b/app/src/main/java/ch/threema/app/grouplinks/GroupLinkOverviewActivity.java
index 9d91ef3b..1002d095 100644
--- a/app/src/main/java/ch/threema/app/grouplinks/GroupLinkOverviewActivity.java
+++ b/app/src/main/java/ch/threema/app/grouplinks/GroupLinkOverviewActivity.java
@@ -21,8 +21,8 @@
 
 package ch.threema.app.grouplinks;
 
-import android.annotation.SuppressLint;
 import android.content.Intent;
+import android.database.SQLException;
 import android.os.Bundle;
 import android.view.Menu;
 import android.view.MenuItem;
@@ -30,11 +30,17 @@ import android.view.View;
 import android.view.ViewGroup;
 import android.widget.Toast;
 
+import androidx.annotation.NonNull;
+import androidx.appcompat.app.ActionBar;
+import androidx.appcompat.view.ActionMode;
+import androidx.lifecycle.Observer;
+import androidx.lifecycle.ViewModelProvider;
+import androidx.recyclerview.widget.DefaultItemAnimator;
+import androidx.recyclerview.widget.LinearLayoutManager;
+
 import com.google.android.material.datepicker.MaterialDatePicker;
 import com.google.android.material.floatingactionbutton.ExtendedFloatingActionButton;
 
-import net.sqlcipher.SQLException;
-
 import org.slf4j.Logger;
 
 import java.util.ArrayList;
@@ -42,13 +48,6 @@ import java.util.Collections;
 import java.util.Date;
 import java.util.List;
 
-import androidx.annotation.NonNull;
-import androidx.appcompat.app.ActionBar;
-import androidx.appcompat.view.ActionMode;
-import androidx.lifecycle.Observer;
-import androidx.lifecycle.ViewModelProvider;
-import androidx.recyclerview.widget.DefaultItemAnimator;
-import androidx.recyclerview.widget.LinearLayoutManager;
 import ch.threema.app.R;
 import ch.threema.app.ThreemaApplication;
 import ch.threema.app.activities.ThreemaToolbarActivity;
@@ -337,7 +336,6 @@ public class GroupLinkOverviewActivity extends ThreemaToolbarActivity implements
 		public boolean onCreateActionMode(ActionMode mode, Menu menu) {
 			logger.debug("onCreateActionMode");
 			mode.getMenuInflater().inflate(R.menu.action_group_url, menu);
-			ConfigUtils.themeMenu(menu, ConfigUtils.getColorFromAttribute(GroupLinkOverviewActivity.this, R.attr.colorAccent));
 			return true;
 		}
 
@@ -351,23 +349,20 @@ public class GroupLinkOverviewActivity extends ThreemaToolbarActivity implements
 			return false;
 		}
 
-		@SuppressLint("NonConstantResourceId")
 		@Override
 		public boolean onActionItemClicked(ActionMode mode, MenuItem item) {
-			switch (item.getItemId()) {
-				case R.id.menu_select_all:
-					if (viewModel.selectAll()) {
-						mode.setTitle(Integer.toString(viewModel.getCheckedItemsCount()));
-					}
-					else {
-						actionMode.finish();
-					}
-					return true;
-				case R.id.menu_delete:
-					delete(viewModel.getCheckedItems());
-					return true;
-				default:
-					return false;
+			if (item.getItemId() == R.id.menu_select_all) {
+				if (viewModel.selectAll()) {
+					mode.setTitle(Integer.toString(viewModel.getCheckedItemsCount()));
+				} else {
+					actionMode.finish();
+				}
+				return true;
+			} else if (item.getItemId() == R.id.menu_delete) {
+				delete(viewModel.getCheckedItems());
+				return true;
+			} else {
+				return false;
 			}
 		}
 
diff --git a/app/src/main/java/ch/threema/app/grouplinks/GroupLinkViewModel.java b/app/src/main/java/ch/threema/app/grouplinks/GroupLinkViewModel.java
index f0f0241b..4c16beb7 100644
--- a/app/src/main/java/ch/threema/app/grouplinks/GroupLinkViewModel.java
+++ b/app/src/main/java/ch/threema/app/grouplinks/GroupLinkViewModel.java
@@ -21,9 +21,12 @@
 
 package ch.threema.app.grouplinks;
 
+import android.database.SQLException;
 import android.util.SparseBooleanArray;
 
-import net.sqlcipher.SQLException;
+import androidx.annotation.NonNull;
+import androidx.lifecycle.MutableLiveData;
+import androidx.lifecycle.ViewModel;
 
 import java.util.ArrayList;
 import java.util.List;
@@ -32,9 +35,6 @@ import java.util.concurrent.ExecutorService;
 import java.util.concurrent.Executors;
 import java.util.concurrent.FutureTask;
 
-import androidx.annotation.NonNull;
-import androidx.lifecycle.MutableLiveData;
-import androidx.lifecycle.ViewModel;
 import ch.threema.app.ThreemaApplication;
 import ch.threema.app.managers.ServiceManager;
 import ch.threema.base.Result;
diff --git a/app/src/main/java/ch/threema/app/grouplinks/IncomingGroupRequestActivity.java b/app/src/main/java/ch/threema/app/grouplinks/IncomingGroupRequestActivity.java
index 8754423b..8b627eab 100644
--- a/app/src/main/java/ch/threema/app/grouplinks/IncomingGroupRequestActivity.java
+++ b/app/src/main/java/ch/threema/app/grouplinks/IncomingGroupRequestActivity.java
@@ -29,16 +29,17 @@ import android.view.MenuItem;
 import android.view.View;
 import android.view.ViewGroup;
 
-import org.slf4j.Logger;
-
-import java.util.List;
-
 import androidx.appcompat.app.ActionBar;
 import androidx.appcompat.view.ActionMode;
 import androidx.lifecycle.Observer;
 import androidx.lifecycle.ViewModelProvider;
 import androidx.recyclerview.widget.DefaultItemAnimator;
 import androidx.recyclerview.widget.LinearLayoutManager;
+
+import org.slf4j.Logger;
+
+import java.util.List;
+
 import ch.threema.app.R;
 import ch.threema.app.ThreemaApplication;
 import ch.threema.app.activities.ThreemaToolbarActivity;
@@ -49,7 +50,6 @@ import ch.threema.app.ui.EmptyView;
 import ch.threema.app.ui.ViewModelFactory;
 import ch.threema.app.utils.ConfigUtils;
 import ch.threema.app.utils.RuntimeUtil;
-import ch.threema.app.voip.Config;
 import ch.threema.base.ThreemaException;
 import ch.threema.base.utils.LoggingUtil;
 import ch.threema.domain.models.GroupId;
@@ -136,10 +136,6 @@ public class IncomingGroupRequestActivity extends ThreemaToolbarActivity impleme
 	}
 
 	private void initLayout() {
-		if (ConfigUtils.getAppTheme(this) == ConfigUtils.THEME_DARK) {
-			setTheme(R.style.Theme_Threema_Translucent_Dark);
-		}
-
 		ActionBar actionBar = getSupportActionBar();
 		if (actionBar != null) {
 			actionBar.setDisplayHomeAsUpEnabled(true);
@@ -243,7 +239,6 @@ public class IncomingGroupRequestActivity extends ThreemaToolbarActivity impleme
 		@Override
 		public boolean onCreateActionMode(ActionMode mode, Menu menu) {
 			mode.getMenuInflater().inflate(R.menu.action_group_request, menu);
-			ConfigUtils.themeMenu(menu, ConfigUtils.getColorFromAttribute(IncomingGroupRequestActivity.this, R.attr.colorAccent));
 			return true;
 		}
 
@@ -257,23 +252,20 @@ public class IncomingGroupRequestActivity extends ThreemaToolbarActivity impleme
 			return false;
 		}
 
-		@SuppressLint("NonConstantResourceId")
 		@Override
 		public boolean onActionItemClicked(ActionMode mode, MenuItem item) {
-			switch (item.getItemId()) {
-				case R.id.menu_select_all:
-					if (viewModel.selectAll()) {
-						mode.setTitle(Integer.toString(viewModel.getCheckedItemsCount()));
-					}
-					else {
-						actionMode.finish();
-					}
-					return true;
-				case R.id.menu_delete:
-					delete(viewModel.getCheckedItems());
-					return true;
-				default:
-					return false;
+			if (item.getItemId() == R.id.menu_select_all) {
+				if (viewModel.selectAll()) {
+					mode.setTitle(Integer.toString(viewModel.getCheckedItemsCount()));
+				} else {
+					actionMode.finish();
+				}
+				return true;
+			} else if (item.getItemId() == R.id.menu_delete) {
+				delete(viewModel.getCheckedItems());
+				return true;
+			} else {
+				return false;
 			}
 		}
 
diff --git a/app/src/main/java/ch/threema/app/grouplinks/IncomingGroupRequestViewModel.java b/app/src/main/java/ch/threema/app/grouplinks/IncomingGroupRequestViewModel.java
index 03d1832d..4714caf1 100644
--- a/app/src/main/java/ch/threema/app/grouplinks/IncomingGroupRequestViewModel.java
+++ b/app/src/main/java/ch/threema/app/grouplinks/IncomingGroupRequestViewModel.java
@@ -21,9 +21,11 @@
 
 package ch.threema.app.grouplinks;
 
+import android.database.SQLException;
 import android.util.SparseBooleanArray;
 
-import net.sqlcipher.SQLException;
+import androidx.lifecycle.MutableLiveData;
+import androidx.lifecycle.ViewModel;
 
 import java.util.ArrayList;
 import java.util.List;
@@ -32,8 +34,6 @@ import java.util.concurrent.ExecutorService;
 import java.util.concurrent.Executors;
 import java.util.concurrent.FutureTask;
 
-import androidx.lifecycle.MutableLiveData;
-import androidx.lifecycle.ViewModel;
 import ch.threema.app.ThreemaApplication;
 import ch.threema.app.managers.ServiceManager;
 import ch.threema.base.Result;
diff --git a/app/src/main/java/ch/threema/app/grouplinks/OpenGroupRequestNoticeView.java b/app/src/main/java/ch/threema/app/grouplinks/OpenGroupRequestNoticeView.java
index 0e604198..c2e92621 100644
--- a/app/src/main/java/ch/threema/app/grouplinks/OpenGroupRequestNoticeView.java
+++ b/app/src/main/java/ch/threema/app/grouplinks/OpenGroupRequestNoticeView.java
@@ -34,6 +34,16 @@ import android.view.View;
 import android.view.View.OnClickListener;
 import android.view.ViewGroup;
 
+import androidx.annotation.NonNull;
+import androidx.annotation.UiThread;
+import androidx.appcompat.app.AppCompatActivity;
+import androidx.constraintlayout.widget.ConstraintLayout;
+import androidx.lifecycle.DefaultLifecycleObserver;
+import androidx.lifecycle.LifecycleOwner;
+import androidx.transition.Fade;
+import androidx.transition.Transition;
+import androidx.transition.TransitionManager;
+
 import com.google.android.material.chip.Chip;
 import com.google.android.material.chip.ChipDrawable;
 import com.google.android.material.chip.ChipGroup;
@@ -44,15 +54,6 @@ import java.util.List;
 import java.util.concurrent.ExecutorService;
 import java.util.concurrent.Executors;
 
-import androidx.annotation.NonNull;
-import androidx.annotation.UiThread;
-import androidx.appcompat.app.AppCompatActivity;
-import androidx.constraintlayout.widget.ConstraintLayout;
-import androidx.lifecycle.DefaultLifecycleObserver;
-import androidx.lifecycle.LifecycleOwner;
-import androidx.transition.Fade;
-import androidx.transition.Transition;
-import androidx.transition.TransitionManager;
 import ch.threema.app.R;
 import ch.threema.app.ThreemaApplication;
 import ch.threema.app.managers.ListenerManager;
@@ -139,7 +140,7 @@ public class OpenGroupRequestNoticeView extends ConstraintLayout implements Defa
 		this.contactService = serviceManager.getContactService();
 
 		LayoutInflater inflater = (LayoutInflater) context.getSystemService(Context.LAYOUT_INFLATER_SERVICE);
-		inflater.inflate(R.layout.view_open_ballots, this);
+		inflater.inflate(R.layout.notice_open_ballots, this);
 	}
 
 	@Override
@@ -186,15 +187,14 @@ public class OpenGroupRequestNoticeView extends ConstraintLayout implements Defa
 		ChipDrawable firstChipDrawable = ChipDrawable.createFromAttributes(getContext(),
 			null,
 			0,
-			R.style.Chip_ChatNotice_Overview_Intro);
+			R.style.Threema_Chip_ChatNotice_Overview_Intro);
 		firstChip.setChipDrawable(firstChipDrawable);
 		if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {
-			firstChip.setTextAppearance(R.style.TextAppearance_Chip_ChatNotice);
+			firstChip.setTextAppearance(R.style.Threema_TextAppearance_Chip_ChatNotice);
 		} else {
 			firstChip.setTextSize(14);
 		}
-		firstChip.setTextColor(ConfigUtils.getColorFromAttribute(getContext(), R.attr.text_color_openNotice));
-		firstChip.setChipBackgroundColor(ColorStateList.valueOf(ConfigUtils.getColorFromAttribute(getContext(), R.attr.background_openNotice)));
+		firstChip.setTextColor(getResources().getColor(R.color.text_color_openNotice));
 		firstChip.setText(ThreemaApplication.getAppContext().getString(R.string.open_group_requests_chips_title));
 		firstChip.setClickable(false);
 		chipGroup.addView(firstChip);
@@ -205,10 +205,10 @@ public class OpenGroupRequestNoticeView extends ConstraintLayout implements Defa
 		ChipDrawable chipDrawable = ChipDrawable.createFromAttributes(getContext(),
 			null,
 			0,
-			R.style.Chip_ChatNotice_Overview);
+			R.style.Threema_Chip_ChatNotice_Overview);
 		chip.setChipDrawable(chipDrawable);
 		if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {
-			chip.setTextAppearance(R.style.TextAppearance_Chip_ChatNotice);
+			chip.setTextAppearance(R.style.Threema_TextAppearance_Chip_ChatNotice);
 		} else {
 			chip.setTextSize(14);
 		}
@@ -229,11 +229,11 @@ public class OpenGroupRequestNoticeView extends ConstraintLayout implements Defa
 		chip.setText(NameUtil.getDisplayName(contactService.getByIdentity(request.getRequestingIdentity())));
 		ColorStateList foregroundColor;
 		ColorStateList backgroundColor;
-		if (ConfigUtils.getAppTheme(getContext()) == ConfigUtils.THEME_DARK) {
-			foregroundColor = ColorStateList.valueOf(ConfigUtils.getColorFromAttribute(getContext(), R.attr.textColorPrimary));
-			backgroundColor = ColorStateList.valueOf(ConfigUtils.getColorFromAttribute(getContext(), R.attr.colorAccent));
+		if (ConfigUtils.isTheDarkSide(getContext())) {
+			foregroundColor = ColorStateList.valueOf(ConfigUtils.getColorFromAttribute(getContext(), R.attr.colorOnBackground));
+			backgroundColor = ColorStateList.valueOf(ConfigUtils.getColorFromAttribute(getContext(), R.attr.colorPrimary));
 		} else {
-			foregroundColor = ColorStateList.valueOf(ConfigUtils.getColorFromAttribute(getContext(), R.attr.colorAccent));
+			foregroundColor = ColorStateList.valueOf(ConfigUtils.getColorFromAttribute(getContext(), R.attr.colorPrimary));
 			backgroundColor = foregroundColor.withAlpha(getResources().getInteger(R.integer.chip_alpha));
 		}
 		chip.setTextColor(foregroundColor);
diff --git a/app/src/main/java/ch/threema/app/grouplinks/OutgoingGroupRequestActivity.java b/app/src/main/java/ch/threema/app/grouplinks/OutgoingGroupRequestActivity.java
index 573b176e..51f091e8 100644
--- a/app/src/main/java/ch/threema/app/grouplinks/OutgoingGroupRequestActivity.java
+++ b/app/src/main/java/ch/threema/app/grouplinks/OutgoingGroupRequestActivity.java
@@ -30,12 +30,6 @@ import android.view.MenuItem;
 import android.view.View;
 import android.view.ViewGroup;
 
-import org.slf4j.Logger;
-
-import java.io.IOException;
-import java.util.ArrayList;
-import java.util.List;
-
 import androidx.annotation.NonNull;
 import androidx.appcompat.app.ActionBar;
 import androidx.appcompat.view.ActionMode;
@@ -44,6 +38,13 @@ import androidx.lifecycle.Observer;
 import androidx.lifecycle.ViewModelProvider;
 import androidx.recyclerview.widget.DefaultItemAnimator;
 import androidx.recyclerview.widget.LinearLayoutManager;
+
+import org.slf4j.Logger;
+
+import java.io.IOException;
+import java.util.ArrayList;
+import java.util.List;
+
 import ch.threema.app.R;
 import ch.threema.app.ThreemaApplication;
 import ch.threema.app.activities.ComposeMessageActivity;
@@ -60,7 +61,6 @@ import ch.threema.app.services.group.OutgoingGroupJoinRequestService;
 import ch.threema.app.ui.EmptyRecyclerView;
 import ch.threema.app.ui.EmptyView;
 import ch.threema.app.ui.SelectorDialogItem;
-import ch.threema.app.utils.AnimationUtil;
 import ch.threema.app.utils.ConfigUtils;
 import ch.threema.app.utils.LogUtil;
 import ch.threema.app.utils.NameUtil;
@@ -186,10 +186,6 @@ public class OutgoingGroupRequestActivity extends ThreemaToolbarActivity impleme
 			return;
 		}
 
-		if (ConfigUtils.getAppTheme(this) == ConfigUtils.THEME_DARK) {
-			setTheme(R.style.Theme_Threema_Translucent_Dark);
-		}
-
 		ActionBar actionBar = getSupportActionBar();
 		if (actionBar != null) {
 			actionBar.setDisplayHomeAsUpEnabled(true);
@@ -390,7 +386,7 @@ public class OutgoingGroupRequestActivity extends ThreemaToolbarActivity impleme
 	private void forwardToGroup(int groupId) {
 		Intent intent = new Intent(this, ComposeMessageActivity.class);
 		intent.putExtra(ThreemaApplication.INTENT_DATA_GROUP, groupId);
-		AnimationUtil.startActivity(this, null, intent);
+		startActivity(intent);
 	}
 
 	private void confirmSend(String admin, String groupName) {
@@ -527,7 +523,6 @@ public class OutgoingGroupRequestActivity extends ThreemaToolbarActivity impleme
 		@Override
 		public boolean onCreateActionMode(ActionMode mode, Menu menu) {
 			mode.getMenuInflater().inflate(R.menu.action_group_request, menu);
-			ConfigUtils.themeMenu(menu, ConfigUtils.getColorFromAttribute(OutgoingGroupRequestActivity.this, R.attr.colorAccent));
 			return true;
 		}
 
diff --git a/app/src/main/java/ch/threema/app/grouplinks/OutgoingGroupRequestViewModel.java b/app/src/main/java/ch/threema/app/grouplinks/OutgoingGroupRequestViewModel.java
index 78007029..1102e786 100644
--- a/app/src/main/java/ch/threema/app/grouplinks/OutgoingGroupRequestViewModel.java
+++ b/app/src/main/java/ch/threema/app/grouplinks/OutgoingGroupRequestViewModel.java
@@ -21,9 +21,11 @@
 
 package ch.threema.app.grouplinks;
 
+import android.database.SQLException;
 import android.util.SparseBooleanArray;
 
-import net.sqlcipher.SQLException;
+import androidx.lifecycle.MutableLiveData;
+import androidx.lifecycle.ViewModel;
 
 import java.util.ArrayList;
 import java.util.List;
@@ -32,8 +34,6 @@ import java.util.concurrent.ExecutorService;
 import java.util.concurrent.Executors;
 import java.util.concurrent.FutureTask;
 
-import androidx.lifecycle.MutableLiveData;
-import androidx.lifecycle.ViewModel;
 import ch.threema.app.ThreemaApplication;
 import ch.threema.app.managers.ServiceManager;
 import ch.threema.base.Result;
diff --git a/app/src/main/java/ch/threema/app/listeners/MessageListener.java b/app/src/main/java/ch/threema/app/listeners/MessageListener.java
index 3438f3f5..e90ea974 100644
--- a/app/src/main/java/ch/threema/app/listeners/MessageListener.java
+++ b/app/src/main/java/ch/threema/app/listeners/MessageListener.java
@@ -24,6 +24,7 @@ package ch.threema.app.listeners;
 import java.util.List;
 
 import androidx.annotation.AnyThread;
+import androidx.annotation.NonNull;
 import ch.threema.storage.models.AbstractMessageModel;
 
 /**
@@ -35,4 +36,5 @@ public interface MessageListener {
 	@AnyThread void onRemoved(AbstractMessageModel removedMessageModel);
 	@AnyThread void onRemoved(List<AbstractMessageModel> removedMessageModels);
 	@AnyThread void onProgressChanged(AbstractMessageModel messageModel, int newProgress);
+	@AnyThread void onResendDismissed(@NonNull AbstractMessageModel messageModel);
 }
diff --git a/app/src/main/java/ch/threema/app/listeners/MessagePlayerListener.java b/app/src/main/java/ch/threema/app/listeners/MessagePlayerListener.java
index 3fbac9a6..debb5c37 100644
--- a/app/src/main/java/ch/threema/app/listeners/MessagePlayerListener.java
+++ b/app/src/main/java/ch/threema/app/listeners/MessagePlayerListener.java
@@ -22,9 +22,9 @@
 package ch.threema.app.listeners;
 
 import androidx.annotation.AnyThread;
+
 import ch.threema.storage.models.AbstractMessageModel;
 
 public interface MessagePlayerListener {
-	@AnyThread void onAudioStreamChanged(int newStreamType);
-	@AnyThread void onAudioPlayEnded(AbstractMessageModel messageModel);
+	@AnyThread default void onAudioPlayEnded(AbstractMessageModel messageModel) {};
 }
diff --git a/app/src/main/java/ch/threema/app/locationpicker/LocationAutocompleteActivity.java b/app/src/main/java/ch/threema/app/locationpicker/LocationAutocompleteActivity.java
index eabdea2b..f8b3b363 100644
--- a/app/src/main/java/ch/threema/app/locationpicker/LocationAutocompleteActivity.java
+++ b/app/src/main/java/ch/threema/app/locationpicker/LocationAutocompleteActivity.java
@@ -22,8 +22,6 @@
 package ch.threema.app.locationpicker;
 
 import android.content.Intent;
-import android.graphics.Color;
-import android.graphics.PorterDuff;
 import android.os.Bundle;
 import android.os.Handler;
 import android.text.Editable;
@@ -31,19 +29,20 @@ import android.text.TextWatcher;
 import android.view.MenuItem;
 import android.view.View;
 import android.view.ViewGroup;
-import android.widget.ProgressBar;
-
-import com.mapbox.mapboxsdk.geometry.LatLng;
-
-import java.util.ArrayList;
-import java.util.List;
 
 import androidx.annotation.Nullable;
 import androidx.appcompat.app.ActionBar;
-import androidx.appcompat.widget.Toolbar;
 import androidx.lifecycle.ViewModelProvider;
 import androidx.recyclerview.widget.DefaultItemAnimator;
 import androidx.recyclerview.widget.LinearLayoutManager;
+
+import com.google.android.material.appbar.MaterialToolbar;
+import com.google.android.material.progressindicator.LinearProgressIndicator;
+import com.mapbox.mapboxsdk.geometry.LatLng;
+
+import java.util.ArrayList;
+import java.util.List;
+
 import ch.threema.app.R;
 import ch.threema.app.activities.ThreemaActivity;
 import ch.threema.app.dialogs.SimpleStringAlertDialog;
@@ -71,7 +70,7 @@ public class LocationAutocompleteActivity extends ThreemaActivity {
 	private LatLng currentLocation = new LatLng();
 	private LocationAutocompleteViewModel viewModel;
 	private List<Poi> places = new ArrayList<>();
-	private ProgressBar progressBar;
+	private LinearProgressIndicator progressBar;
 	private EmptyView emptyView;
 
 	private Handler queryHandler = new Handler();
@@ -86,13 +85,11 @@ public class LocationAutocompleteActivity extends ThreemaActivity {
 	protected void onCreate(@Nullable Bundle savedInstanceState) {
 		super.onCreate(savedInstanceState);
 
-		ConfigUtils.configureActivityTheme(this);
+		ConfigUtils.configureSystemBars(this);
 
 		setContentView(R.layout.activity_location_autocomplete);
 
-		ConfigUtils.configureTransparentStatusBar(this);
-
-		Toolbar toolbar = findViewById(R.id.toolbar);
+		MaterialToolbar toolbar = findViewById(R.id.toolbar);
 		setSupportActionBar(toolbar);
 		toolbar.setTitle(null);
 		final ActionBar actionBar = getSupportActionBar();
@@ -103,10 +100,6 @@ public class LocationAutocompleteActivity extends ThreemaActivity {
 		actionBar.setTitle(null);
 		actionBar.setDisplayHomeAsUpEnabled(true);
 
-		if (toolbar.getNavigationIcon() != null) {
-			toolbar.getNavigationIcon().setColorFilter(Color.WHITE, PorterDuff.Mode.SRC_IN);
-		}
-
 		Intent intent = getIntent();
 		currentLocation.setLatitude(intent.getDoubleExtra(INTENT_DATA_LOCATION_LAT, 0));
 		currentLocation.setLongitude(intent.getDoubleExtra(INTENT_DATA_LOCATION_LNG, 0));
diff --git a/app/src/main/java/ch/threema/app/locationpicker/LocationPickerActivity.java b/app/src/main/java/ch/threema/app/locationpicker/LocationPickerActivity.java
index 29a27282..38c96217 100644
--- a/app/src/main/java/ch/threema/app/locationpicker/LocationPickerActivity.java
+++ b/app/src/main/java/ch/threema/app/locationpicker/LocationPickerActivity.java
@@ -27,8 +27,6 @@ import android.content.Context;
 import android.content.Intent;
 import android.content.pm.PackageManager;
 import android.content.res.Configuration;
-import android.graphics.Color;
-import android.graphics.PorterDuff;
 import android.location.Location;
 import android.location.LocationManager;
 import android.os.AsyncTask;
@@ -40,9 +38,22 @@ import android.view.ViewGroup;
 import android.widget.TextView;
 import android.widget.Toast;
 
+import androidx.activity.result.ActivityResultLauncher;
+import androidx.activity.result.contract.ActivityResultContracts;
+import androidx.annotation.NonNull;
+import androidx.annotation.Nullable;
+import androidx.appcompat.app.ActionBar;
+import androidx.coordinatorlayout.widget.CoordinatorLayout;
+import androidx.core.app.ActivityCompat;
+import androidx.core.content.ContextCompat;
+import androidx.core.view.ViewCompat;
+import androidx.recyclerview.widget.LinearLayoutManager;
+
 import com.google.android.material.appbar.AppBarLayout;
 import com.google.android.material.appbar.CollapsingToolbarLayout;
+import com.google.android.material.appbar.MaterialToolbar;
 import com.google.android.material.card.MaterialCardView;
+import com.google.android.material.progressindicator.CircularProgressIndicator;
 import com.google.android.material.snackbar.BaseTransientBottomBar;
 import com.mapbox.android.gestures.MoveGestureDetector;
 import com.mapbox.mapboxsdk.annotations.Marker;
@@ -66,18 +77,6 @@ import java.util.HashMap;
 import java.util.List;
 import java.util.Map;
 
-import androidx.activity.result.ActivityResultLauncher;
-import androidx.activity.result.contract.ActivityResultContracts;
-import androidx.annotation.NonNull;
-import androidx.annotation.Nullable;
-import androidx.appcompat.app.ActionBar;
-import androidx.appcompat.widget.Toolbar;
-import androidx.coordinatorlayout.widget.CoordinatorLayout;
-import androidx.core.app.ActivityCompat;
-import androidx.core.content.ContextCompat;
-import androidx.core.view.ViewCompat;
-import androidx.core.widget.ContentLoadingProgressBar;
-import androidx.recyclerview.widget.LinearLayoutManager;
 import ch.threema.app.BuildConfig;
 import ch.threema.app.R;
 import ch.threema.app.ThreemaApplication;
@@ -131,10 +130,11 @@ public class LocationPickerActivity extends ThreemaActivity implements
 	private TextView poilistDescription;
 	MaterialCardView searchView;
 	AppBarLayout appBarLayout;
+	CollapsingToolbarLayout collapsingToolbarBarLayout;
 	private LatLng lastPosition = new LatLng(0,0);
 
 	private LocationPickerAdapter locationPickerAdapter;
-	private ContentLoadingProgressBar loadingProgressBar;
+	private CircularProgressIndicator loadingProgressBar;
 
 	/**
 	 * Launcher to request location permissions. When the location permission is given, it zooms to the current position (or asks to enable location services).
@@ -206,18 +206,18 @@ public class LocationPickerActivity extends ThreemaActivity implements
 	public void onCreate(Bundle savedInstanceState) {
 		super.onCreate(savedInstanceState);
 
-		ConfigUtils.configureActivityTheme(this);
+		ConfigUtils.configureSystemBars(this);
 
 		setContentView(R.layout.activity_location_picker);
 
 		ConfigUtils.configureTransparentStatusBar(this);
-		((CollapsingToolbarLayout) findViewById(R.id.collapsingToolbarLayout)).setStatusBarScrimColor(ConfigUtils.getColorFromAttribute(this, R.attr.colorAccent));
 
 		root = findViewById(R.id.coordinator);
-		appBarLayout = findViewById(R.id.appbar_layout);
+		appBarLayout = findViewById(R.id.appbar);
+		collapsingToolbarBarLayout = findViewById(R.id.collapsingToolbarLayout);
 		mapView = findViewById(R.id.map);
 
-		Toolbar toolbar = findViewById(R.id.toolbar);
+		MaterialToolbar toolbar = findViewById(R.id.toolbar);
 		setSupportActionBar(toolbar);
 		final ActionBar actionBar = getSupportActionBar();
 		if (actionBar == null) {
@@ -226,10 +226,6 @@ public class LocationPickerActivity extends ThreemaActivity implements
 		}
 		actionBar.setDisplayHomeAsUpEnabled(true);
 
-		if (toolbar.getNavigationIcon() != null) {
-			toolbar.getNavigationIcon().setColorFilter(Color.WHITE, PorterDuff.Mode.SRC_IN);
-		}
-
 		// Get Threema services
 		final ServiceManager serviceManager = ThreemaApplication.getServiceManager();
 		if (serviceManager == null) {
@@ -288,8 +284,8 @@ public class LocationPickerActivity extends ThreemaActivity implements
 
 		searchView = findViewById(R.id.search_container);
 		searchView.setVisibility(View.VISIBLE);
-		((AppBarLayout)findViewById(R.id.appbar_layout)).addOnOffsetChangedListener(((appBarLayout, verticalOffset) -> {
-			Toolbar toolbar = findViewById(R.id.toolbar);
+		((AppBarLayout)findViewById(R.id.appbar)).addOnOffsetChangedListener(((appBarLayout, verticalOffset) -> {
+			MaterialToolbar toolbar = findViewById(R.id.toolbar);
 			float verticalOffset1 = (float)verticalOffset;
 			toolbar.setAlpha(Math.abs(verticalOffset1 / (float)appBarLayout.getTotalScrollRange()));
 		}));
@@ -302,6 +298,7 @@ public class LocationPickerActivity extends ThreemaActivity implements
 
 		if (layoutParams != null) {
 			CoordinatorLayout.LayoutParams appBarLayoutParams = (CoordinatorLayout.LayoutParams)layoutParams;
+			AppBarLayout.LayoutParams collapsingToolBarLayoutParams = (AppBarLayout.LayoutParams)collapsingToolbarBarLayout.getLayoutParams();
 			appBarLayoutParams.setBehavior((new AppBarLayout.Behavior()));
 			CoordinatorLayout.Behavior appBarLayoutParamsBehavior = appBarLayoutParams.getBehavior();
 
@@ -317,15 +314,15 @@ public class LocationPickerActivity extends ThreemaActivity implements
 				// Set the size of AppBarLayout to 68% of the total height
 				CoordinatorLayout coordinatorLayout = findViewById(R.id.coordinator);
 				if (ViewCompat.isLaidOut(coordinatorLayout) && !coordinatorLayout.isLayoutRequested()) {
-					appBarLayoutParams.height = coordinatorLayout.getHeight() * APPBAR_HEIGHT_PERCENT / 100;
-					appBarLayout.setLayoutParams(appBarLayoutParams);
+					collapsingToolBarLayoutParams.height = coordinatorLayout.getHeight() * APPBAR_HEIGHT_PERCENT / 100 - getResources().getDimensionPixelSize(R.dimen.send_location_container_height);
+					collapsingToolbarBarLayout.setLayoutParams(collapsingToolBarLayoutParams);
 				} else {
 					coordinatorLayout.addOnLayoutChangeListener(new View.OnLayoutChangeListener() {
 						@Override
 						public void onLayoutChange(View v, int left, int top, int right, int bottom, int oldLeft, int oldTop, int oldRight, int oldBottom) {
 							coordinatorLayout.removeOnLayoutChangeListener(this);
-							appBarLayoutParams.height = coordinatorLayout.getHeight() * APPBAR_HEIGHT_PERCENT / 100;
-							appBarLayout.setLayoutParams(appBarLayoutParams);
+							collapsingToolBarLayoutParams.height = coordinatorLayout.getHeight() * APPBAR_HEIGHT_PERCENT / 100 - getResources().getDimensionPixelSize(R.dimen.send_location_container_height);
+							collapsingToolbarBarLayout.setLayoutParams(collapsingToolBarLayoutParams);
 						}
 					});
 				}
@@ -513,13 +510,10 @@ public class LocationPickerActivity extends ThreemaActivity implements
 
 	@Override
 	public boolean onOptionsItemSelected(MenuItem item) {
-		switch (item.getItemId()) {
-			case android.R.id.home:
-				finish();
-				break;
-			case R.id.action_search:
-				requestPlacesSearch();
-				break;
+		if (item.getItemId() == android.R.id.home) {
+			finish();
+		} else if (item.getItemId() == R.id.action_search) {
+			requestPlacesSearch();
 		}
 		return true;
 	}
diff --git a/app/src/main/java/ch/threema/app/managers/ServiceManager.java b/app/src/main/java/ch/threema/app/managers/ServiceManager.java
index 87fe2b7a..7821bfc4 100644
--- a/app/src/main/java/ch/threema/app/managers/ServiceManager.java
+++ b/app/src/main/java/ch/threema/app/managers/ServiceManager.java
@@ -23,16 +23,14 @@ package ch.threema.app.managers;
 
 import android.content.Context;
 
-import androidx.annotation.NonNull;
-import androidx.annotation.Nullable;
-
 import org.apache.commons.io.Charsets;
 import org.slf4j.Logger;
 
-import java.io.File;
 import java.util.Date;
 import java.util.Locale;
 
+import androidx.annotation.NonNull;
+import androidx.annotation.Nullable;
 import ch.threema.app.BuildFlavor;
 import ch.threema.app.ThreemaApplication;
 import ch.threema.app.backuprestore.BackupChatService;
@@ -128,7 +126,6 @@ import ch.threema.app.threemasafe.ThreemaSafeService;
 import ch.threema.app.threemasafe.ThreemaSafeServiceImpl;
 import ch.threema.app.utils.ConfigUtils;
 import ch.threema.app.utils.DeviceIdUtil;
-import ch.threema.app.utils.FileUtil;
 import ch.threema.app.utils.ForwardSecurityStatusSender;
 import ch.threema.app.voip.groupcall.GroupCallManager;
 import ch.threema.app.voip.groupcall.GroupCallManagerImpl;
@@ -220,7 +217,8 @@ public class ServiceManager {
 
 	private WebClientServiceManager webClientServiceManager;
 
-	private DHSessionStoreInterface dhSessionStore;
+	@NonNull
+	private final DHSessionStoreInterface dhSessionStore;
 	private ForwardSecurityMessageProcessor forwardSecurityMessageProcessor;
 	private SymmetricEncryptionService symmetricEncryptionService;
 
@@ -228,6 +226,7 @@ public class ServiceManager {
 
 	public ServiceManager(ThreemaConnection connection,
 						  @NonNull DatabaseServiceNew databaseServiceNew,
+						  @NonNull DHSessionStoreInterface dhSessionStore,
 						  IdentityStore identityStore,
 						  PreferenceStoreInterface preferenceStore,
 						  MasterKey masterKey,
@@ -240,12 +239,15 @@ public class ServiceManager {
 		this.identityStore = identityStore;
 		this.masterKey = masterKey;
 		this.databaseServiceNew = databaseServiceNew;
+		this.dhSessionStore = dhSessionStore;
 		this.updateSystemService = updateSystemService;
 	}
 
 	private DatabaseContactStore getContactStore() {
 		if (this.contactStore == null) {
 			this.contactStore = new DatabaseContactStore(
+					this.getIdentityStore(),
+					this.getDHSessionStore(),
 					this.getAPIConnector(),
 					this.getPreferenceService(),
 					this.databaseServiceNew,
@@ -399,7 +401,6 @@ public class ServiceManager {
 						this.getLocaleService(),
 						this.getAPIConnector(),
 						this.getIdentityStore(),
-						this.getMessageQueue(),
 						this.getPreferenceService());
 			} catch (Exception e) {
 				logger.error("Exception", e);
@@ -465,6 +466,7 @@ public class ServiceManager {
 					this.getBlackListService(),
 					this.getForwardSecurityMessageProcessor()
 			);
+			this.messageQueue.setMessageEnqueueListener(message -> messageService.executeProfilePictureDistribution(message));
 		}
 
 		return this.messageService;
@@ -738,6 +740,7 @@ public class ServiceManager {
 	public ConversationService getConversationService() throws ThreemaException {
 		if(null == this.conversationService) {
 			this.conversationService = new ConversationServiceImpl(
+				this.getContext(),
 				this.cacheService,
 				this.databaseServiceNew,
 				this.getContactService(),
@@ -840,7 +843,8 @@ public class ServiceManager {
 					getContext(),
 					this.getMessageService(),
 					this.getFileService(),
-					this.getPreferenceService()
+					this.getPreferenceService(),
+					this.getHiddenChatsListService()
 			);
 		}
 		return this.messagePlayerService;
@@ -988,8 +992,6 @@ public class ServiceManager {
 					this.getContactService(),
 					this.getRingtoneService(),
 					this.getPreferenceService(),
-					this.getMessageService(),
-					this.getMessageQueue(),
 					this.getLifetimeService(),
 					this.getContext()
 			);
@@ -1002,28 +1004,11 @@ public class ServiceManager {
 		return this.databaseServiceNew;
 	}
 
-	public DHSessionStoreInterface getDHSessionStore() throws MasterKeyLockedException {
-		if (this.dhSessionStore == null) {
-			this.dhSessionStore = new SQLDHSessionStore(this.getContext(), this.masterKey.getKey());
-			try {
-				dhSessionStore.executeNull();
-			} catch (Exception e) {
-				logger.error("Could not execute a statement on the fs database", e);
-				Context context = ThreemaApplication.getAppContext();
-				if (context != null) {
-					// The database file seems to be corrupt, therefore we delete the file
-					File databaseFile = context.getDatabasePath(SQLDHSessionStore.DATABASE_NAME);
-					if (databaseFile.exists()) {
-						FileUtil.deleteFileOrWarn(databaseFile, "sql dh session database", logger);
-					}
-					dhSessionStore = new SQLDHSessionStore(context, masterKey.getKey());
-				}
-			}
-		}
+	public DHSessionStoreInterface getDHSessionStore() {
 		return this.dhSessionStore;
 	}
 
-	public ForwardSecurityMessageProcessor getForwardSecurityMessageProcessor() throws MasterKeyLockedException {
+	public ForwardSecurityMessageProcessor getForwardSecurityMessageProcessor() {
 		if (!ConfigUtils.isForwardSecurityEnabled()) {
 			return null;
 		}
@@ -1034,13 +1019,17 @@ public class ServiceManager {
 				this.getContactStore(),
 				this.getIdentityStore(),
 				this.getMessageQueue(),
-				(sender, rejectedApiMessageId) -> {
-					this.messageService.updateMessageStateForOutgoingMessage(rejectedApiMessageId, MessageState.FS_KEY_MISMATCH, new Date());
-			}
+				(sender, rejectedApiMessageId) ->
+					this.messageService.updateMessageStateForOutgoingMessage(
+						rejectedApiMessageId,
+						MessageState.FS_KEY_MISMATCH,
+						new Date(),
+						sender.getIdentity()
+					)
 			);
 
 			try {
-				this.forwardSecurityMessageProcessor.addStatusListener(new ForwardSecurityStatusSender(
+				this.forwardSecurityMessageProcessor.setStatusListener(new ForwardSecurityStatusSender(
 					this.getContactService(),
 					this.getMessageService(),
 					this.getAPIConnector()
diff --git a/app/src/main/java/ch/threema/app/mediaattacher/ControlPanelButton.java b/app/src/main/java/ch/threema/app/mediaattacher/ControlPanelButton.java
index c02d7057..f0740b36 100644
--- a/app/src/main/java/ch/threema/app/mediaattacher/ControlPanelButton.java
+++ b/app/src/main/java/ch/threema/app/mediaattacher/ControlPanelButton.java
@@ -38,6 +38,7 @@ import androidx.appcompat.widget.AppCompatImageView;
 import androidx.constraintlayout.widget.ConstraintLayout;
 import androidx.core.graphics.ColorUtils;
 import androidx.core.widget.ImageViewCompat;
+
 import ch.threema.app.R;
 import ch.threema.app.utils.ConfigUtils;
 
@@ -78,7 +79,7 @@ public class ControlPanelButton extends FrameLayout {
 			int fillColorAlpha = a.getInt(R.styleable.ControlPanelButton_fillColorAlpha, -1);
 
 			setFillAndStrokeColor(fillColor, strokeColor, fillColorAlpha);
-			setForegroundColor(a.getColor(R.styleable.ControlPanelButton_foregroundColor, ConfigUtils.getColorFromAttribute(context, R.attr.textColorSecondary)));
+			setForegroundColor(a.getColor(R.styleable.ControlPanelButton_foregroundColor, ConfigUtils.getColorFromAttribute(context, R.attr.colorOnSurface)));
 
 			a.recycle();
 		}
@@ -92,7 +93,7 @@ public class ControlPanelButton extends FrameLayout {
 		try {
 			GradientDrawable gradientDrawable = (GradientDrawable) labelImageView.getBackground().mutate();
 
-			if (ConfigUtils.getAppTheme(getContext())== ConfigUtils.THEME_DARK) {
+			if (ConfigUtils.isTheDarkSide(getContext())) {
 				fillColorAlpha += 0x20;
 			}
 
diff --git a/app/src/main/java/ch/threema/app/mediaattacher/MediaAttachActivity.java b/app/src/main/java/ch/threema/app/mediaattacher/MediaAttachActivity.java
index 04698600..6f98e3c5 100644
--- a/app/src/main/java/ch/threema/app/mediaattacher/MediaAttachActivity.java
+++ b/app/src/main/java/ch/threema/app/mediaattacher/MediaAttachActivity.java
@@ -21,6 +21,11 @@
 
 package ch.threema.app.mediaattacher;
 
+import static com.google.android.material.bottomsheet.BottomSheetBehavior.STATE_EXPANDED;
+import static ch.threema.app.ThreemaApplication.MAX_BLOB_SIZE;
+import static ch.threema.app.ThreemaApplication.getMessageDraft;
+import static ch.threema.app.utils.IntentDataUtil.INTENT_DATA_LOCATION_NAME;
+
 import android.Manifest;
 import android.animation.Animator;
 import android.animation.AnimatorListenerAdapter;
@@ -45,6 +50,14 @@ import android.widget.ImageView;
 import android.widget.LinearLayout;
 import android.widget.Toast;
 
+import androidx.activity.result.ActivityResultLauncher;
+import androidx.activity.result.contract.ActivityResultContracts;
+import androidx.annotation.NonNull;
+import androidx.annotation.UiThread;
+import androidx.constraintlayout.widget.ConstraintLayout;
+import androidx.core.app.ActivityCompat;
+import androidx.core.content.ContextCompat;
+
 import com.google.android.material.bottomsheet.BottomSheetBehavior;
 
 import org.slf4j.Logger;
@@ -53,13 +66,6 @@ import java.util.ArrayList;
 import java.util.Collections;
 import java.util.List;
 
-import androidx.activity.result.ActivityResultLauncher;
-import androidx.activity.result.contract.ActivityResultContracts;
-import androidx.annotation.NonNull;
-import androidx.annotation.UiThread;
-import androidx.constraintlayout.widget.ConstraintLayout;
-import androidx.core.app.ActivityCompat;
-import androidx.core.content.ContextCompat;
 import ch.threema.app.R;
 import ch.threema.app.ThreemaApplication;
 import ch.threema.app.actions.LocationMessageSendAction;
@@ -92,11 +98,6 @@ import ch.threema.app.utils.QRScannerUtil;
 import ch.threema.app.utils.RuntimeUtil;
 import ch.threema.base.utils.LoggingUtil;
 
-import static ch.threema.app.ThreemaApplication.MAX_BLOB_SIZE;
-import static ch.threema.app.ThreemaApplication.getMessageDraft;
-import static ch.threema.app.utils.IntentDataUtil.INTENT_DATA_LOCATION_NAME;
-import static com.google.android.material.bottomsheet.BottomSheetBehavior.STATE_EXPANDED;
-
 public class MediaAttachActivity extends MediaSelectionBaseActivity implements View.OnClickListener,
 	MediaAttachAdapter.ItemClickListener,
 	GenericAlertDialog.DialogClickListener {
@@ -380,68 +381,55 @@ public class MediaAttachActivity extends MediaSelectionBaseActivity implements V
 		}
 	}
 
-	@SuppressLint("NonConstantResourceId")
 	@Override
 	public void onClick(View v) {
 		super.onClick(v);
-		int id = v.getId();
-		switch (id) {
-			case R.id.attach_location:
-				if (!ConfigUtils.hasNoMapLibreSupport()) {
-					launchPlacePicker();
-				} else {
-					Toast.makeText(this, "Feature not available due to firmware error", Toast.LENGTH_LONG).show();
-				}
-				break;
-			case R.id.attach_file:
-				if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.Q || ConfigUtils.requestStoragePermissions(this, null, PERMISSION_REQUEST_ATTACH_FILE)) {
-					attachFile();
-				}
-				break;
-			case R.id.attach_poll:
-				createBallot();
-				break;
-			case R.id.attach_qr_code:
-				if (ConfigUtils.requestCameraPermissions(this, null, PERMISSION_REQUEST_QR_READER)) {
-					attachQR(v);
-				}
-				break;
-			case R.id.attach_contact:
-				if (ConfigUtils.requestContactPermissions(this, null, PERMISSION_REQUEST_ATTACH_CONTACT)) {
-					attachContact();
-				}
-				break;
-			case R.id.attach_drawing:
-				attachDrawing();
-				break;
-			case R.id.edit:
-				if (mediaAttachAdapter != null) {
-					onEdit(mediaAttachViewModel.getSelectedMediaUris());
-				}
-				break;
-			case R.id.send:
-				if (mediaAttachAdapter != null) {
-					v.setAlpha(0.3f);
-					v.setClickable(false);
-					// return last filter to potentially re-use it when attaching more media in compose fragment
-					if (mediaAttachViewModel.getLastQueryType() != null) {
-						Intent resultIntent = IntentDataUtil.addLastMediaFilterToIntent(new Intent(),
-							mediaAttachViewModel.getLastQuery(),
-							mediaAttachViewModel.getLastQueryType());
-						setResult(RESULT_OK, resultIntent);
-					}
-					onSend(mediaAttachViewModel.getSelectedMediaUris());
-				}
-				break;
-			case R.id.attach_gallery:
-				attachFilesFromGallery();
-				break;
-			case R.id.attach_system_camera:
-				if (ConfigUtils.requestCameraPermissions(this, null, PERMISSION_REQUEST_ATTACH_FROM_EXTERNAL_CAMERA)) {
-					attachFromExternalCamera();
+		final int id = v.getId();
+		if (id == R.id.attach_location) {
+			if (!ConfigUtils.hasNoMapLibreSupport()) {
+				launchPlacePicker();
+			} else {
+				Toast.makeText(this, "Feature not available due to firmware error", Toast.LENGTH_LONG).show();
+			}
+		} else if (id == R.id.attach_file) {
+			if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.Q || ConfigUtils.requestStoragePermissions(this, null, PERMISSION_REQUEST_ATTACH_FILE)) {
+				attachFile();
+			}
+		} else if (id == R.id.attach_poll) {
+			createBallot();
+		} else if (id == R.id.attach_qr_code) {
+			if (ConfigUtils.requestCameraPermissions(this, null, PERMISSION_REQUEST_QR_READER)) {
+				attachQR(v);
+			}
+		} else if (id == R.id.attach_contact) {
+			if (ConfigUtils.requestContactPermissions(this, null, PERMISSION_REQUEST_ATTACH_CONTACT)) {
+				attachContact();
+			}
+		} else if (id == R.id.attach_drawing) {
+			attachDrawing();
+		} else if (id == R.id.edit) {
+			if (mediaAttachAdapter != null) {
+				onEdit(mediaAttachViewModel.getSelectedMediaUris());
+			}
+		} else if (id == R.id.send) {
+			if (mediaAttachAdapter != null) {
+				v.setAlpha(0.3f);
+				v.setClickable(false);
+				// return last filter to potentially re-use it when attaching more media in compose fragment
+				if (mediaAttachViewModel.getLastQueryType() != null) {
+					Intent resultIntent = IntentDataUtil.addLastMediaFilterToIntent(new Intent(),
+						mediaAttachViewModel.getLastQuery(),
+						mediaAttachViewModel.getLastQueryType());
+					setResult(RESULT_OK, resultIntent);
 				}
-			default:
-				break;
+				onSend(mediaAttachViewModel.getSelectedMediaUris());
+			}
+		} else if (id == R.id.attach_gallery) {
+			attachFilesFromGallery();
+		} else if (id == R.id.attach_system_camera) {
+			if (ConfigUtils.requestCameraPermissions(this, null, PERMISSION_REQUEST_ATTACH_FROM_EXTERNAL_CAMERA)) {
+				attachFromExternalCamera();
+			}
 		}
 	}
 
@@ -593,7 +581,7 @@ public class MediaAttachActivity extends MediaSelectionBaseActivity implements V
 					mediaAttachViewModel.getLastQuery(),
 					mediaAttachViewModel.getLastQueryType());
 			}
-			AnimationUtil.startActivityForResult(this, null, intent, ThreemaActivity.ACTIVITY_ID_SEND_MEDIA);
+			startActivityForResult(intent, ThreemaActivity.ACTIVITY_ID_SEND_MEDIA);
 		} else {
 			Toast.makeText(MediaAttachActivity.this, R.string.only_images_or_videos, Toast.LENGTH_LONG).show();
 		}
@@ -634,24 +622,24 @@ public class MediaAttachActivity extends MediaSelectionBaseActivity implements V
 		intent.putExtra(ThreemaApplication.INTENT_DATA_TEXT, messageReceiver.getDisplayName());
 		intent.putExtra(ThreemaApplication.INTENT_DATA_PICK_FROM_CAMERA, true);
 		intent.putExtra(SendMediaActivity.EXTRA_USE_EXTERNAL_CAMERA, true);
-		AnimationUtil.startActivityForResult(this, null, intent, ThreemaActivity.ACTIVITY_ID_SEND_MEDIA);
+		startActivityForResult(intent, ThreemaActivity.ACTIVITY_ID_SEND_MEDIA);
 	}
 
 	private void createBallot() {
 		Intent intent = new Intent(this, BallotWizardActivity.class);
 		IntentDataUtil.addMessageReceiverToIntent(intent, messageReceiver);
-		AnimationUtil.startActivityForResult(this, null, intent, ThreemaActivity.ACTIVITY_ID_CREATE_BALLOT);
+		startActivityForResult(intent, ThreemaActivity.ACTIVITY_ID_CREATE_BALLOT);
 	}
 
 	private void launchPlacePicker() {
 		Intent intent = new Intent(this, LocationPickerActivity.class);
-		AnimationUtil.startActivityForResult(this, null, intent, LOCATION_PICKER_INTENT);
+		startActivityForResult(intent, LOCATION_PICKER_INTENT);
 	}
 
 	private void attachContact() {
 		try {
 			Intent intent = new Intent(Intent.ACTION_PICK, ContactsContract.Contacts.CONTENT_URI);
-			AnimationUtil.startActivityForResult(this, null, intent, CONTACT_PICKER_INTENT);
+			startActivityForResult(intent, CONTACT_PICKER_INTENT);
 		} catch (ActivityNotFoundException e) {
 			SingleToast.getInstance().showShortText(getString(R.string.no_activity_for_mime_type));
 		}
@@ -681,7 +669,7 @@ public class MediaAttachActivity extends MediaSelectionBaseActivity implements V
 		Intent intent = IntentDataUtil.addMessageReceiversToIntent(new Intent(this, SendMediaActivity.class), new MessageReceiver[]{this.messageReceiver});
 		intent.putExtra(SendMediaActivity.EXTRA_MEDIA_ITEMS, MediaItem.getFromUris(uriList, this, true));
 		intent.putExtra(ThreemaApplication.INTENT_DATA_TEXT, messageReceiver.getDisplayName());
-		AnimationUtil.startActivityForResult(this, null, intent, ThreemaActivity.ACTIVITY_ID_SEND_MEDIA);
+		startActivityForResult(intent, ThreemaActivity.ACTIVITY_ID_SEND_MEDIA);
 	}
 
 	private void sendLocationMessage(final Location location, final String poiName) {
@@ -765,4 +753,10 @@ public class MediaAttachActivity extends MediaSelectionBaseActivity implements V
 			&& this.messageReceiver.validateSendingPermission(errorResId -> RuntimeUtil.runOnUiThread(() -> SingleToast.getInstance().showLongText(getString(errorResId))));
 	}
 	/* end section sending/attachment methods */
+
+	@Override
+	public void finish() {
+		super.finish();
+		overridePendingTransition(R.anim.fast_fade_in, R.anim.fast_fade_out);
+	}
 }
diff --git a/app/src/main/java/ch/threema/app/mediaattacher/MediaAttachAdapter.java b/app/src/main/java/ch/threema/app/mediaattacher/MediaAttachAdapter.java
index 50c4c8b7..9cf9a599 100644
--- a/app/src/main/java/ch/threema/app/mediaattacher/MediaAttachAdapter.java
+++ b/app/src/main/java/ch/threema/app/mediaattacher/MediaAttachAdapter.java
@@ -21,6 +21,8 @@
 
 package ch.threema.app.mediaattacher;
 
+import static com.bumptech.glide.load.resource.drawable.DrawableTransitionOptions.withCrossFade;
+
 import android.content.Context;
 import android.graphics.drawable.Drawable;
 import android.view.LayoutInflater;
@@ -31,6 +33,11 @@ import android.widget.ImageView;
 import android.widget.LinearLayout;
 import android.widget.TextView;
 
+import androidx.annotation.NonNull;
+import androidx.annotation.Nullable;
+import androidx.lifecycle.ViewModelProvider;
+import androidx.recyclerview.widget.RecyclerView;
+
 import com.bumptech.glide.Glide;
 import com.bumptech.glide.load.DataSource;
 import com.bumptech.glide.load.engine.GlideException;
@@ -46,18 +53,12 @@ import java.util.HashMap;
 import java.util.List;
 import java.util.concurrent.RejectedExecutionException;
 
-import androidx.annotation.NonNull;
-import androidx.annotation.Nullable;
-import androidx.lifecycle.ViewModelProvider;
-import androidx.recyclerview.widget.RecyclerView;
 import ch.threema.app.R;
 import ch.threema.app.ui.CheckableFrameLayout;
 import ch.threema.app.ui.MediaItem;
 import ch.threema.app.utils.StringConversionUtil;
 import ch.threema.base.utils.LoggingUtil;
 
-import static com.bumptech.glide.load.resource.drawable.DrawableTransitionOptions.withCrossFade;
-
 public class MediaAttachAdapter extends RecyclerView.Adapter<MediaAttachAdapter.MediaGalleryHolder> {
 	private static final Logger logger = LoggingUtil.getThreemaLogger("MediaAttachAdapter");
 
@@ -150,7 +151,7 @@ public class MediaAttachAdapter extends RecyclerView.Adapter<MediaAttachAdapter.
 				Glide.with(context).load(mediaAttachItem.getUri())
 					.transition(withCrossFade())
 					.centerInside()
-					.addListener(new RequestListener<Drawable>() {
+					.addListener(new RequestListener<>() {
 						@Override
 						public boolean onLoadFailed(@Nullable GlideException e, Object model, Target<Drawable> target, boolean isFirstResource) {
 							logger.error("Glide Loading Exception ", e);
@@ -177,8 +178,11 @@ public class MediaAttachAdapter extends RecyclerView.Adapter<MediaAttachAdapter.
 								return true;
 							});
 
+							contentView.setContentDescription(context.getString(R.string.attach_picture) +  ": " + mediaAttachItem.getDisplayName());
+
 							if (mediaAttachItem.getType() == MediaItem.TYPE_GIF) {
 								gifIndicator.setVisibility(View.VISIBLE);
+								contentView.setContentDescription(context.getString(R.string.attach_gif) +  ": " + mediaAttachItem.getDisplayName());
 							} else {
 								gifIndicator.setVisibility(View.GONE);
 							}
@@ -186,11 +190,13 @@ public class MediaAttachAdapter extends RecyclerView.Adapter<MediaAttachAdapter.
 							if (mediaAttachItem.getType() == MediaItem.TYPE_VIDEO) {
 								videoDuration.setText(StringConversionUtil.getDurationString(mediaAttachItem.getDuration()));
 								videoIndicator.setVisibility(View.VISIBLE);
+								contentView.setContentDescription(context.getString(R.string.attach_video) +  ": " + mediaAttachItem.getDisplayName());
 							} else {
 								videoIndicator.setVisibility(View.GONE);
 							}
 
 							contentView.setChecked(mediaAttachViewModel.getSelectedMediaItemsHashMap().containsKey(mediaAttachItem.getId()));
+
 							return false;
 						}
 					})
diff --git a/app/src/main/java/ch/threema/app/mediaattacher/MediaAttachViewModel.java b/app/src/main/java/ch/threema/app/mediaattacher/MediaAttachViewModel.java
index 54dbbf1e..285628fd 100644
--- a/app/src/main/java/ch/threema/app/mediaattacher/MediaAttachViewModel.java
+++ b/app/src/main/java/ch/threema/app/mediaattacher/MediaAttachViewModel.java
@@ -25,6 +25,14 @@ import android.Manifest;
 import android.content.pm.PackageManager;
 import android.net.Uri;
 
+import androidx.annotation.AnyThread;
+import androidx.annotation.NonNull;
+import androidx.annotation.UiThread;
+import androidx.core.content.ContextCompat;
+import androidx.lifecycle.MutableLiveData;
+import androidx.lifecycle.SavedStateHandle;
+import androidx.lifecycle.ViewModel;
+
 import java.util.ArrayList;
 import java.util.Collections;
 import java.util.HashMap;
@@ -33,13 +41,6 @@ import java.util.List;
 import java.util.Map;
 import java.util.Objects;
 
-import androidx.annotation.AnyThread;
-import androidx.annotation.NonNull;
-import androidx.annotation.UiThread;
-import androidx.core.content.ContextCompat;
-import androidx.lifecycle.MutableLiveData;
-import androidx.lifecycle.SavedStateHandle;
-import androidx.lifecycle.ViewModel;
 import ch.threema.app.ThreemaApplication;
 import ch.threema.app.utils.RuntimeUtil;
 import java8.util.concurrent.CompletableFuture;
@@ -221,7 +222,7 @@ public class MediaAttachViewModel extends ViewModel {
 		return savedState.get(KEY_RECENT_QUERY_TYPE);
 	}
 
-	public void setlastQuery(@MediaFilterQuery.FilerType int type, String labelQuery) {
+	public void setlastQuery(@MediaFilterQuery.FilterType int type, String labelQuery) {
 		savedState.set(KEY_RECENT_QUERY, labelQuery);
 		savedState.set(KEY_RECENT_QUERY_TYPE, type);
 	}
diff --git a/app/src/main/java/ch/threema/app/mediaattacher/MediaFilterQuery.java b/app/src/main/java/ch/threema/app/mediaattacher/MediaFilterQuery.java
index 6d14a32e..70cf5f32 100644
--- a/app/src/main/java/ch/threema/app/mediaattacher/MediaFilterQuery.java
+++ b/app/src/main/java/ch/threema/app/mediaattacher/MediaFilterQuery.java
@@ -21,19 +21,19 @@
 
 package ch.threema.app.mediaattacher;
 
-import java.lang.annotation.Retention;
+import static java.lang.annotation.RetentionPolicy.SOURCE;
 
 import androidx.annotation.IntDef;
 import androidx.annotation.NonNull;
 
-import static java.lang.annotation.RetentionPolicy.SOURCE;
+import java.lang.annotation.Retention;
 
 
 public class MediaFilterQuery {
 
 	@Retention(SOURCE)
 	@IntDef({FILTER_MEDIA_TYPE, FILTER_MEDIA_BUCKET, FILTER_MEDIA_LABEL, FILTER_MEDIA_SELECTED, FILTER_MEDIA_DATE})
-	public @interface FilerType {}
+	public @interface FilterType {}
 	public static final int FILTER_MEDIA_TYPE = 0;
 	public static final int FILTER_MEDIA_BUCKET = 1;
 	public static final int FILTER_MEDIA_LABEL = 2;
@@ -41,9 +41,10 @@ public class MediaFilterQuery {
 	public static final int FILTER_MEDIA_DATE = 4;
 
 	public final String query;
-	@FilerType public final int type;
+	@FilterType
+	public final int type;
 
-	public MediaFilterQuery(@NonNull String query, @FilerType int type) {
+	public MediaFilterQuery(@NonNull String query, @FilterType int type) {
 		this.query = query;
 		this.type = type;
 	}
@@ -52,7 +53,7 @@ public class MediaFilterQuery {
 		return query;
 	}
 
-	@FilerType
+	@FilterType
 	public int getType() {
 		return type;
 	}
diff --git a/app/src/main/java/ch/threema/app/mediaattacher/MediaSelectionActivity.java b/app/src/main/java/ch/threema/app/mediaattacher/MediaSelectionActivity.java
index 784c0e6d..0ee8da90 100644
--- a/app/src/main/java/ch/threema/app/mediaattacher/MediaSelectionActivity.java
+++ b/app/src/main/java/ch/threema/app/mediaattacher/MediaSelectionActivity.java
@@ -21,6 +21,9 @@
 
 package ch.threema.app.mediaattacher;
 
+import static ch.threema.app.mediaattacher.MediaFilterQuery.FILTER_MEDIA_BUCKET;
+import static ch.threema.app.mediaattacher.MediaFilterQuery.FILTER_MEDIA_TYPE;
+
 import android.Manifest;
 import android.animation.ValueAnimator;
 import android.app.Activity;
@@ -32,11 +35,6 @@ import android.view.View;
 import android.view.ViewStub;
 import android.widget.Button;
 
-import com.google.android.material.bottomsheet.BottomSheetBehavior;
-
-import java.util.ArrayList;
-import java.util.List;
-
 import androidx.activity.result.ActivityResultLauncher;
 import androidx.activity.result.contract.ActivityResultContracts;
 import androidx.annotation.NonNull;
@@ -44,6 +42,12 @@ import androidx.constraintlayout.widget.ConstraintLayout;
 import androidx.core.app.ActivityCompat;
 import androidx.core.content.ContextCompat;
 import androidx.lifecycle.Observer;
+
+import com.google.android.material.bottomsheet.BottomSheetBehavior;
+
+import java.util.ArrayList;
+import java.util.List;
+
 import ch.threema.app.R;
 import ch.threema.app.activities.SendMediaActivity;
 import ch.threema.app.fragments.ComposeMessageFragment;
@@ -54,9 +58,6 @@ import ch.threema.app.utils.FileUtil;
 import ch.threema.app.utils.IntentDataUtil;
 import ch.threema.app.utils.LocaleUtil;
 
-import static ch.threema.app.mediaattacher.MediaFilterQuery.FILTER_MEDIA_BUCKET;
-import static ch.threema.app.mediaattacher.MediaFilterQuery.FILTER_MEDIA_TYPE;
-
 public class MediaSelectionActivity extends MediaSelectionBaseActivity {
 
 	private ControlPanelButton selectButton, cancelButton;
@@ -80,7 +81,6 @@ public class MediaSelectionActivity extends MediaSelectionBaseActivity {
 	protected void setInitialMediaGrid() {
 		super.setInitialMediaGrid();
 		// hide media items dependent views until we have data loaded and set to grid
-		dateView.setVisibility(View.GONE);
 
 		// check for previous filter selection to be reset
 		Intent intent = getIntent();
@@ -128,7 +128,6 @@ public class MediaSelectionActivity extends MediaSelectionBaseActivity {
 			@Override
 			public void onChanged(List<MediaAttachItem> mediaAttachItems) {
 				if (mediaAttachItems.size() != 0) {
-					dateView.setVisibility(View.VISIBLE);
 					mediaAttachViewModel.getCurrentMedia().removeObserver(this);
 				}
 			}
diff --git a/app/src/main/java/ch/threema/app/mediaattacher/MediaSelectionBaseActivity.java b/app/src/main/java/ch/threema/app/mediaattacher/MediaSelectionBaseActivity.java
index 18aeb17d..4bf47033 100644
--- a/app/src/main/java/ch/threema/app/mediaattacher/MediaSelectionBaseActivity.java
+++ b/app/src/main/java/ch/threema/app/mediaattacher/MediaSelectionBaseActivity.java
@@ -21,6 +21,15 @@
 
 package ch.threema.app.mediaattacher;
 
+import static com.google.android.material.bottomsheet.BottomSheetBehavior.STATE_COLLAPSED;
+import static com.google.android.material.bottomsheet.BottomSheetBehavior.STATE_DRAGGING;
+import static com.google.android.material.bottomsheet.BottomSheetBehavior.STATE_EXPANDED;
+import static com.google.android.material.bottomsheet.BottomSheetBehavior.STATE_HIDDEN;
+import static ch.threema.app.ThreemaApplication.MAX_BLOB_SIZE;
+import static ch.threema.app.mediaattacher.MediaFilterQuery.FILTER_MEDIA_BUCKET;
+import static ch.threema.app.mediaattacher.MediaFilterQuery.FILTER_MEDIA_SELECTED;
+import static ch.threema.app.mediaattacher.MediaFilterQuery.FILTER_MEDIA_TYPE;
+
 import android.Manifest;
 import android.animation.Animator;
 import android.animation.AnimatorListenerAdapter;
@@ -49,20 +58,6 @@ import android.widget.ImageView;
 import android.widget.LinearLayout;
 import android.widget.TextView;
 
-import com.google.android.material.appbar.AppBarLayout;
-import com.google.android.material.appbar.MaterialToolbar;
-import com.google.android.material.bottomsheet.BottomSheetBehavior;
-import com.google.android.material.button.MaterialButton;
-
-import org.slf4j.Logger;
-
-import java.util.ArrayList;
-import java.util.Collections;
-import java.util.List;
-import java.util.Map;
-import java.util.Objects;
-import java.util.TreeMap;
-
 import androidx.activity.result.ActivityResultLauncher;
 import androidx.annotation.ColorInt;
 import androidx.annotation.NonNull;
@@ -80,6 +75,22 @@ import androidx.lifecycle.ViewModelProvider;
 import androidx.recyclerview.widget.GridLayoutManager;
 import androidx.recyclerview.widget.RecyclerView;
 import androidx.viewpager2.widget.ViewPager2;
+
+import com.google.android.material.appbar.AppBarLayout;
+import com.google.android.material.appbar.MaterialToolbar;
+import com.google.android.material.bottomsheet.BottomSheetBehavior;
+import com.google.android.material.button.MaterialButton;
+import com.google.android.material.shape.MaterialShapeDrawable;
+
+import org.slf4j.Logger;
+
+import java.util.ArrayList;
+import java.util.Collections;
+import java.util.List;
+import java.util.Map;
+import java.util.Objects;
+import java.util.TreeMap;
+
 import ch.threema.app.R;
 import ch.threema.app.ThreemaApplication;
 import ch.threema.app.activities.EnterSerialActivity;
@@ -97,20 +108,12 @@ import ch.threema.app.utils.ConfigUtils;
 import ch.threema.app.utils.FileUtil;
 import ch.threema.app.utils.LocaleUtil;
 import ch.threema.app.utils.MimeUtil;
+import ch.threema.app.utils.RecyclerViewUtil;
 import ch.threema.base.utils.LoggingUtil;
 import ch.threema.localcrypto.MasterKey;
 import me.zhanghai.android.fastscroll.FastScroller;
 import me.zhanghai.android.fastscroll.FastScrollerBuilder;
 
-import static ch.threema.app.ThreemaApplication.MAX_BLOB_SIZE;
-import static ch.threema.app.mediaattacher.MediaFilterQuery.FILTER_MEDIA_BUCKET;
-import static ch.threema.app.mediaattacher.MediaFilterQuery.FILTER_MEDIA_SELECTED;
-import static ch.threema.app.mediaattacher.MediaFilterQuery.FILTER_MEDIA_TYPE;
-import static com.google.android.material.bottomsheet.BottomSheetBehavior.STATE_COLLAPSED;
-import static com.google.android.material.bottomsheet.BottomSheetBehavior.STATE_DRAGGING;
-import static com.google.android.material.bottomsheet.BottomSheetBehavior.STATE_EXPANDED;
-import static com.google.android.material.bottomsheet.BottomSheetBehavior.STATE_HIDDEN;
-
 abstract public class MediaSelectionBaseActivity extends ThreemaActivity implements View.OnClickListener,
 														MediaAttachAdapter.ItemClickListener {
 	// Logging
@@ -138,9 +141,9 @@ abstract public class MediaSelectionBaseActivity extends ThreemaActivity impleme
 	protected GridLayoutManager gridLayoutManager;
 	protected ConstraintLayout bottomSheetLayout, previewBottomSheetLayout;
 	protected ImageView dragHandle;
-	protected FrameLayout controlPanel, dateView;
+	protected FrameLayout controlPanel;
 	protected LinearLayout menuTitleFrame;
-	protected TextView dateTextView, menuTitle, previewFilenameTextView, previewDateTextView;
+	protected TextView menuTitle, previewFilenameTextView, previewDateTextView;
 	protected DisplayMetrics displayMetrics;
 	protected MenuItem selectFromGalleryItem;
 	protected PopupMenu bucketFilterMenu;
@@ -157,7 +160,7 @@ abstract public class MediaSelectionBaseActivity extends ThreemaActivity impleme
 	protected boolean isEditingContact = false;
 
 	protected int peekHeightNumRows = 1;
-	private @ColorInt int savedStatusBarColor = 0;
+	private @ColorInt int savedStatusBarColor = 0, expandedStatusBarColor;
 
 	private boolean isDragging = false;
 	private boolean bottomSheetScroll = false;
@@ -176,7 +179,7 @@ abstract public class MediaSelectionBaseActivity extends ThreemaActivity impleme
 	@Override
 	protected void onCreate(Bundle savedInstanceState) {
 		super.onCreate(savedInstanceState);
-		ConfigUtils.configureActivityTheme(this);
+		ConfigUtils.configureSystemBars(this);
 		checkMasterKey();
 		initServices();
 		// set font size according to user preferences
@@ -273,8 +276,6 @@ abstract public class MediaSelectionBaseActivity extends ThreemaActivity impleme
 		this.mediaAttachRecyclerView = findViewById(R.id.media_grid_recycler);
 		this.dragHandle = findViewById(R.id.drag_handle);
 		this.controlPanel = findViewById(R.id.control_panel);
-		this.dateView = findViewById(R.id.date_separator_container);
-		this.dateTextView = findViewById(R.id.text_view);
 		this.gridContainer = findViewById(R.id.grid_container);
 		this.previewPager = findViewById(R.id.pager);
 		this.pagerContainer = findViewById(R.id.pager_container);
@@ -323,7 +324,19 @@ abstract public class MediaSelectionBaseActivity extends ThreemaActivity impleme
 		contentFrameLayout.setOnClickListener(v -> finish());
 
 		// set status bar color
-		getWindow().setStatusBarColor(ConfigUtils.getColorFromAttribute(this, R.attr.attach_status_bar_color_collapsed));
+		getWindow().setStatusBarColor(getResources().getColor(R.color.attach_status_bar_color_collapsed));
+
+		expandedStatusBarColor = getResources().getColor(R.color.attach_status_bar_color_expanded);
+
+		this.bottomSheetLayout.post(new Runnable() {
+			@Override
+			public void run() {
+				Drawable background = bottomSheetLayout.getBackground();
+				if (background instanceof MaterialShapeDrawable) {
+					expandedStatusBarColor = ((MaterialShapeDrawable) background).getResolvedTintColor();
+				}
+			}
+		});
 
 		// horizontal layout fill screen 2/3 with media selection layout
 		if (this.getResources().getConfiguration().orientation == Configuration.ORIENTATION_LANDSCAPE && !isInSplitScreenMode()) {
@@ -372,8 +385,7 @@ abstract public class MediaSelectionBaseActivity extends ThreemaActivity impleme
 
 				// adjust height of bottom sheet container to snap smack below toolbar
 				CoordinatorLayout bottomSheetContainer = findViewById(R.id.bottom_sheet_container);
-				int topMargin = toolbar.getHeight() - getResources().getDimensionPixelSize(R.dimen.drag_handle_height) -
-					(getResources().getDimensionPixelSize(R.dimen.drag_handle_topbottom_margin) * 2);
+				int topMargin = toolbar.getHeight() - getResources().getDimensionPixelSize(R.dimen.drag_handle_height);
 
 				CoordinatorLayout.LayoutParams bottomSheetContainerLayoutParams = (CoordinatorLayout.LayoutParams) bottomSheetContainer.getLayoutParams();
 				bottomSheetContainerLayoutParams.setMargins(0, topMargin, 0, 0);
@@ -403,7 +415,7 @@ abstract public class MediaSelectionBaseActivity extends ThreemaActivity impleme
 			return true;
 		});
 		topMenuItem.setIcon(R.drawable.ic_collections);
-		ConfigUtils.themeMenuItem(topMenuItem, ConfigUtils.getColorFromAttribute(this, R.attr.textColorSecondary));
+		ConfigUtils.tintMenuItem(this, topMenuItem, R.attr.colorOnSurface);
 
 		// Fetch all media, add a unique menu item for each media storage bucket and media type group.
 		registerOnAllDataFetchedListener(new Observer<List<MediaAttachItem>>() {
@@ -461,7 +473,7 @@ abstract public class MediaSelectionBaseActivity extends ThreemaActivity impleme
 								item.setIcon(R.drawable.ic_gif_24dp);
 								break;
 						}
-						ConfigUtils.themeMenuItem(item, ConfigUtils.getColorFromAttribute(MediaSelectionBaseActivity.this, R.attr.textColorSecondary));
+						ConfigUtils.tintMenuItem(MediaSelectionBaseActivity.this, item, R.attr.colorOnSurface);
 					}
 
 					for (String bucket : buckets) {
@@ -471,7 +483,7 @@ abstract public class MediaSelectionBaseActivity extends ThreemaActivity impleme
 								return true;
 							});
 							item.setIcon(R.drawable.ic_outline_folder_24);
-							ConfigUtils.themeMenuItem(item, ConfigUtils.getColorFromAttribute(MediaSelectionBaseActivity.this, R.attr.textColorSecondary));
+							ConfigUtils.tintMenuItem(MediaSelectionBaseActivity.this, item, R.attr.colorOnSurface);
 						}
 					}
 
@@ -594,7 +606,7 @@ abstract public class MediaSelectionBaseActivity extends ThreemaActivity impleme
 				super.onScrolled(recyclerView, dx, dy);
 				setFirstVisibleItemDate();
 
-				// make sure only bottom sheet or recylcerview is scrolling at a same time
+				// make sure only bottom sheet or recyclerview is scrolling at a same time
 				if (bottomSheetScroll && bottomSheetBehavior.getState() == STATE_EXPANDED) {
 					bottomSheetScroll = false;
 					bottomSheetBehavior.setDraggable(false);
@@ -616,7 +628,16 @@ abstract public class MediaSelectionBaseActivity extends ThreemaActivity impleme
 						MediaSelectionBaseActivity.this.fastScroller = new FastScrollerBuilder(MediaSelectionBaseActivity.this.mediaAttachRecyclerView)
 							.setThumbDrawable(Objects.requireNonNull(thumbDrawable))
 							.setTrackDrawable(Objects.requireNonNull(AppCompatResources.getDrawable(context, R.drawable.fastscroll_track_media)))
-							.setPadding(0, 0, 0, 0)
+							.setPopupStyle(RecyclerViewUtil.thumbScrollerPopupStyle)
+							.setPopupTextProvider(position -> {
+								int firstVisible = gridLayoutManager.findFirstCompletelyVisibleItemPosition();
+								if (firstVisible >= 0) {
+									MediaAttachItem item = mediaAttachAdapter.getMediaAttachItems().get(firstVisible);
+									return LocaleUtil.formatDateRelative(item.getDateModified() * 1000);
+								}
+
+								return context.getString(R.string.unknown);
+							})
 							.build();
 
 					}
@@ -649,9 +670,9 @@ abstract public class MediaSelectionBaseActivity extends ThreemaActivity impleme
 
 					getWindow().setStatusBarColor(savedStatusBarColor);
 					if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {
-						getWindow().setNavigationBarColor(ConfigUtils.getColorFromAttribute(this, R.attr.attach_status_bar_color_expanded));
+						getWindow().setNavigationBarColor(expandedStatusBarColor);
 					}
-					if (ConfigUtils.getAppTheme(this) != ConfigUtils.THEME_DARK) {
+					if (!ConfigUtils.isTheDarkSide(this)) {
 						if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {
 							getWindow().getDecorView().setSystemUiVisibility(View.SYSTEM_UI_FLAG_LIGHT_STATUS_BAR);
 						}
@@ -680,7 +701,7 @@ abstract public class MediaSelectionBaseActivity extends ThreemaActivity impleme
 					if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {
 						getWindow().setNavigationBarColor(getResources().getColor(R.color.gallery_background));
 					}
-					if (ConfigUtils.getAppTheme(MediaSelectionBaseActivity.this) != ConfigUtils.THEME_DARK) {
+					if (!ConfigUtils.isTheDarkSide(this)) {
 						if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {
 							getWindow().getDecorView().setSystemUiVisibility(getWindow().getDecorView().getSystemUiVisibility() & ~View.SYSTEM_UI_FLAG_LIGHT_STATUS_BAR);
 						}
@@ -766,31 +787,30 @@ abstract public class MediaSelectionBaseActivity extends ThreemaActivity impleme
 				}
 				break;
 			case STATE_EXPANDED:
-				dateView.setVisibility(View.VISIBLE);
 				dragHandle.setVisibility(View.INVISIBLE);
 				setFirstVisibleItemDate();
 
 				bucketFilterMenu.getMenu().setGroupVisible(Menu.NONE, true);
 				menuTitleFrame.setClickable(true);
 
-				animation = toolbar.getAnimation();
+				animation = appBarLayout.getAnimation();
 				if (animation != null) {
 					animation.cancel();
 				}
 
-				toolbar.setAlpha(0f);
-				toolbar.setVisibility(View.VISIBLE);
-				toolbar.animate()
+				appBarLayout.setAlpha(0f);
+				appBarLayout.setVisibility(View.VISIBLE);
+				appBarLayout.animate()
 					.alpha(1f)
 					.setDuration(100)
 					.setListener(new AnimatorListenerAdapter() {
 					@Override
 					public void onAnimationEnd(Animator animation) {
-						toolbar.setVisibility(View.VISIBLE);
+						appBarLayout.setVisibility(View.VISIBLE);
 					}
 				});
-				toolbar.postDelayed(
-					() -> getWindow().setStatusBarColor(ConfigUtils.getColorFromAttribute(this, R.attr.attach_status_bar_color_expanded)),
+				appBarLayout.postDelayed(
+					() -> getWindow().setStatusBarColor(expandedStatusBarColor),
 					50
 				);
 				// show/hide control panel in attach mode depending on whether we have selected items
@@ -809,32 +829,30 @@ abstract public class MediaSelectionBaseActivity extends ThreemaActivity impleme
 				if (!isDragging) {
 					isDragging = true;
 
-					dateView.setVisibility(View.GONE);
 					dragHandle.setVisibility(View.VISIBLE);
 
-					animation = toolbar.getAnimation();
+					animation = appBarLayout.getAnimation();
 					if (animation != null) {
 						animation.cancel();
 					}
-					toolbar.setAlpha(1f);
-					toolbar.animate()
+					appBarLayout.setAlpha(1f);
+					appBarLayout.animate()
 						.alpha(0f)
 						.setDuration(100)
 						.setListener(new AnimatorListenerAdapter() {
 							@Override
 							public void onAnimationEnd(Animator animation) {
-								toolbar.setVisibility(View.GONE);
+								appBarLayout.setVisibility(View.GONE);
 							}
 						});
-					toolbar.postDelayed(() -> {
-						getWindow().setStatusBarColor(ConfigUtils.getColorFromAttribute(this, R.attr.attach_status_bar_color_collapsed));
+					appBarLayout.postDelayed(() -> {
+						getWindow().setStatusBarColor(getResources().getColor(R.color.attach_status_bar_color_collapsed));
 					}, 50);
 				}
 				break;
 			case STATE_COLLAPSED:
 				bottomSheetBehavior.setDraggable(true);
 				bottomSheetScroll = true;
-				dateView.setVisibility(View.GONE);
 				bucketFilterMenu.getMenu().setGroupVisible(Menu.NONE, false);
 				menuTitleFrame.setClickable(false);
 				// only default slide up control panel if in attach mode, as there are no control button options otherwise
@@ -866,7 +884,6 @@ abstract public class MediaSelectionBaseActivity extends ThreemaActivity impleme
 			final int controlPanelHeight = resources.getDimensionPixelSize(R.dimen.control_panel_height);
 			final int controlPanelShadowHeight = resources.getDimensionPixelSize(R.dimen.media_attach_control_panel_shadow_size);
 			final int dragHandleHeight = resources.getDimensionPixelSize(R.dimen.drag_handle_height);
-			final int dragHandleTopBottomMargin = resources.getDimensionPixelSize(R.dimen.drag_handle_topbottom_margin);
 
 			// We have a bit of a chicken-and-egg problem: Before the peek height is not set,
 			// the grid items are not loaded. But without the grid items being loaded, we cannot
@@ -876,8 +893,7 @@ abstract public class MediaSelectionBaseActivity extends ThreemaActivity impleme
 			// are loaded, we can update the peek height.
 			int peekHeight = controlPanelHeight
 				- controlPanelShadowHeight
-				+ dragHandleHeight
-				+ dragHandleTopBottomMargin * 2;
+				+ dragHandleHeight;
 			boolean peekHeightKnown;
 			if (numItems > 0 && mediaAttachRecyclerView.getChildAt(0) != null) {
 				// Child views are already here, we can calculate the total height
@@ -921,45 +937,31 @@ abstract public class MediaSelectionBaseActivity extends ThreemaActivity impleme
 
 	protected void setFirstVisibleItemDate(){
 		int firstVisible = gridLayoutManager.findFirstVisibleItemPosition();
-		if (firstVisible >= 0){
-			MediaAttachItem item = mediaAttachAdapter.getMediaAttachItems().get(firstVisible);
-			dateView.post(() -> {
-				dateTextView.setMaxLines(1);
-				dateTextView.setText(LocaleUtil.formatDateRelative(item.getDateModified() * 1000));
-			});
-			dateView.setVisibility(View.VISIBLE);
-		} else {
+		if (firstVisible < 0){
 			mediaAttachRecyclerView.clearEmptyView();
 
 			EmptyView emptyView = new EmptyView(this, 0);
 			emptyView.setup(R.string.no_media_found_global);
 			((ViewGroup) mediaAttachRecyclerView.getParent()).addView(emptyView);
 			mediaAttachRecyclerView.setEmptyView(emptyView);
-
-			dateView.setVisibility(View.GONE);
 		}
 	}
 
-	@SuppressLint("NonConstantResourceId")
 	@Override
 	public void onClick(View v) {
-		int id = v.getId();
-		switch (id) {
-			case R.id.collapsing_toolbar:
-				finish();
-				break;
+		final int id = v.getId();
+		if (id == R.id.collapsing_toolbar) {
+			finish();
+		} else if (id == R.id.cancel) {
 			// finish when clicking transparent area showing the chat behind the attacher
-			case R.id.cancel:
-				if (mediaAttachAdapter != null) {
-					mediaAttachAdapter.clearSelection();
-					onItemChecked(0);
-				}
-				break;
-			case R.id.select_counter_button:
-				if (mediaAttachAdapter != null) {
-					filterMediaBySelectedItems();
-				}
-				break;
+			if (mediaAttachAdapter != null) {
+				mediaAttachAdapter.clearSelection();
+				onItemChecked(0);
+			}
+		} else if (id == R.id.select_counter_button) {
+			if (mediaAttachAdapter != null) {
+				filterMediaBySelectedItems();
+			}
 		}
 	}
 
@@ -1014,9 +1016,9 @@ abstract public class MediaSelectionBaseActivity extends ThreemaActivity impleme
 		}
 
 		dragHandle.setVisibility(View.VISIBLE);
-		toolbar.setVisibility(View.GONE);
-		toolbar.post(() -> {
-			getWindow().setStatusBarColor(ConfigUtils.getColorFromAttribute(this, R.attr.attach_status_bar_color_collapsed));
+		appBarLayout.setVisibility(View.GONE);
+		appBarLayout.post(() -> {
+			getWindow().setStatusBarColor(getResources().getColor(R.color.attach_status_bar_color_collapsed));
 		});
 
 		updateUI(STATE_COLLAPSED);
diff --git a/app/src/main/java/ch/threema/app/mediaattacher/PreviewFragment.java b/app/src/main/java/ch/threema/app/mediaattacher/PreviewFragment.java
index 3bdf7d3f..f0d74ae7 100644
--- a/app/src/main/java/ch/threema/app/mediaattacher/PreviewFragment.java
+++ b/app/src/main/java/ch/threema/app/mediaattacher/PreviewFragment.java
@@ -31,8 +31,7 @@ import androidx.annotation.Nullable;
 import androidx.fragment.app.Fragment;
 import ch.threema.app.R;
 
-public abstract class PreviewFragment extends Fragment implements AudioManager.OnAudioFocusChangeListener, PreviewFragmentInterface.AudioFocusActions {
-	private AudioManager audioManager;
+public abstract class PreviewFragment extends Fragment {
 	protected MediaAttachItem mediaItem;
 	protected MediaAttachViewModel mediaAttachViewModel;
 	protected View rootView;
@@ -44,43 +43,5 @@ public abstract class PreviewFragment extends Fragment implements AudioManager.O
 
 		setRetainInstance(true);
 	}
-
-	@Override
-	public void onCreate(@Nullable Bundle savedInstanceState) {
-		this.audioManager = (AudioManager) getContext().getSystemService(Context.AUDIO_SERVICE);
-
-		super.onCreate(savedInstanceState);
-	}
-
-	@Override
-	public void onAudioFocusChange(int focusChange) {
-		switch (focusChange) {
-			case AudioManager.AUDIOFOCUS_GAIN:
-				resumeAudio();
-				setVolume(1.0f);
-				break;
-			case AudioManager.AUDIOFOCUS_LOSS:
-				stopAudio();
-				break;
-			case AudioManager.AUDIOFOCUS_LOSS_TRANSIENT:
-				pauseAudio();
-				break;
-			case AudioManager.AUDIOFOCUS_LOSS_TRANSIENT_CAN_DUCK:
-				setVolume(0.2f);
-				break;
-		}
-	}
-
-	protected boolean requestFocus() {
-		if (audioManager.requestAudioFocus(this, AudioManager.STREAM_MUSIC, AudioManager.AUDIOFOCUS_GAIN_TRANSIENT) != AudioManager.AUDIOFOCUS_REQUEST_GRANTED) {
-			Toast.makeText(getActivity(), R.string.error, Toast.LENGTH_SHORT).show();
-			return false;
-		}
-		return true;
-	}
-
-	protected void abandonFocus() {
-		audioManager.abandonAudioFocus(this);
-	}
 }
 
diff --git a/app/src/main/java/ch/threema/app/mediaattacher/VideoPreviewFragment.java b/app/src/main/java/ch/threema/app/mediaattacher/VideoPreviewFragment.java
index 60579562..977bba08 100644
--- a/app/src/main/java/ch/threema/app/mediaattacher/VideoPreviewFragment.java
+++ b/app/src/main/java/ch/threema/app/mediaattacher/VideoPreviewFragment.java
@@ -25,30 +25,33 @@ import android.os.Bundle;
 import android.view.LayoutInflater;
 import android.view.View;
 import android.view.ViewGroup;
-import android.widget.ImageButton;
 import android.widget.Toast;
 
-import com.google.android.exoplayer2.ExoPlayer;
-import com.google.android.exoplayer2.MediaItem;
-import com.google.android.exoplayer2.PlaybackException;
-import com.google.android.exoplayer2.Player;
-
-import org.slf4j.Logger;
-
 import androidx.annotation.NonNull;
 import androidx.annotation.Nullable;
 import androidx.lifecycle.DefaultLifecycleObserver;
 import androidx.lifecycle.LifecycleOwner;
+import androidx.media3.common.AudioAttributes;
+import androidx.media3.common.C;
+import androidx.media3.common.MediaItem;
+import androidx.media3.common.PlaybackException;
+import androidx.media3.common.Player;
+import androidx.media3.common.util.UnstableApi;
+import androidx.media3.exoplayer.ExoPlayer;
+import androidx.media3.ui.PlayerView;
+
+import org.slf4j.Logger;
+
 import ch.threema.app.R;
-import ch.threema.app.ui.ZoomableExoPlayerView;
 import ch.threema.app.utils.RuntimeUtil;
 import ch.threema.app.utils.VideoUtil;
 import ch.threema.base.utils.LoggingUtil;
 
+@UnstableApi
 public class VideoPreviewFragment extends PreviewFragment implements DefaultLifecycleObserver, Player.Listener, PreviewFragmentInterface {
 	private static final Logger logger = LoggingUtil.getThreemaLogger("VideoPreviewFragment");
 
-	private ZoomableExoPlayerView videoView;
+	private PlayerView videoView;
 	private ExoPlayer videoPlayer;
 
 	VideoPreviewFragment(MediaAttachItem mediaItem, MediaAttachViewModel mediaAttachViewModel){
@@ -70,11 +73,6 @@ public class VideoPreviewFragment extends PreviewFragment implements DefaultLife
 
 		if (rootView != null) {
 			this.videoView = rootView.findViewById(R.id.video_view);
-
-			ImageButton play = rootView.findViewById(R.id.exo_play);
-			ImageButton pause = rootView.findViewById(R.id.exo_pause);
-			play.setImageResource(R.drawable.ic_play);
-			pause.setImageResource(R.drawable.ic_pause);
 		}
 	}
 
@@ -98,29 +96,23 @@ public class VideoPreviewFragment extends PreviewFragment implements DefaultLife
 	}
 
 	@Override
-	public void onDestroy(@NonNull LifecycleOwner owner) {
-		releasePlayer();
-	}
+	public void setUserVisibleHint(boolean isVisibleToUser) {
+		super.setUserVisibleHint(isVisibleToUser);
 
-	@Override
-	public void setVolume(float volume) {
-		// ducking
-		if (this.videoPlayer != null) {
-			this.videoPlayer.setVolume(volume);
+		if (isVisibleToUser) {
+			onResume(this);
+		} else {
+			onPause(this);
 		}
 	}
 
 	@Override
-	public void onIsPlayingChanged(boolean isPlaying) {
-		if (isPlaying) {
-			requestFocus();
-		} else {
-			abandonFocus();
-		}
+	public void onDestroy(@NonNull LifecycleOwner owner) {
+		releasePlayer();
 	}
 
 	@Override
-	public void onPlayerError(PlaybackException error) {
+	public void onPlayerError(@NonNull PlaybackException error) {
 		RuntimeUtil.runOnUiThread(() -> Toast.makeText(getContext(), "Exoplayer error: " + error.getErrorCodeName(), Toast.LENGTH_LONG).show());
 
 		releasePlayer();
@@ -129,11 +121,19 @@ public class VideoPreviewFragment extends PreviewFragment implements DefaultLife
 
 	public void initializePlayer(boolean playWhenReady) {
 		try {
+			AudioAttributes audioAttributes = new AudioAttributes.Builder()
+				.setUsage(C.USAGE_MEDIA)
+				.setContentType(C.AUDIO_CONTENT_TYPE_MOVIE)
+				.setAllowedCapturePolicy(C.ALLOW_CAPTURE_BY_NONE)
+				.build();
+
 			this.videoPlayer = VideoUtil.getExoPlayer(getContext());
+			this.videoPlayer.setAudioAttributes(audioAttributes, true);
 			this.videoPlayer.addListener(this);
 
 			this.videoView.setPlayer(videoPlayer);
 			this.videoView.setControllerHideOnTouch(true);
+			this.videoView.setControllerShowTimeoutMs(1500);
 			this.videoView.showController();
 
 			this.videoPlayer.setMediaItem(MediaItem.fromUri(this.mediaItem.getUri()));
diff --git a/app/src/main/java/ch/threema/app/messagereceiver/ContactMessageReceiver.java b/app/src/main/java/ch/threema/app/messagereceiver/ContactMessageReceiver.java
index 3bd02ded..2bd696a1 100644
--- a/app/src/main/java/ch/threema/app/messagereceiver/ContactMessageReceiver.java
+++ b/app/src/main/java/ch/threema/app/messagereceiver/ContactMessageReceiver.java
@@ -24,6 +24,9 @@ package ch.threema.app.messagereceiver;
 import android.content.Intent;
 import android.graphics.Bitmap;
 
+import androidx.annotation.NonNull;
+import androidx.annotation.Nullable;
+
 import org.slf4j.Logger;
 
 import java.sql.SQLException;
@@ -32,8 +35,6 @@ import java.util.List;
 import java.util.Objects;
 import java.util.UUID;
 
-import androidx.annotation.NonNull;
-import androidx.annotation.Nullable;
 import ch.threema.app.R;
 import ch.threema.app.ThreemaApplication;
 import ch.threema.app.services.ContactService;
@@ -46,15 +47,20 @@ import ch.threema.app.utils.TestUtil;
 import ch.threema.base.ThreemaException;
 import ch.threema.base.crypto.SymmetricEncryptionResult;
 import ch.threema.base.utils.LoggingUtil;
-import ch.threema.domain.protocol.csp.fs.ForwardSecurityMessageProcessor;
 import ch.threema.base.utils.Utils;
 import ch.threema.domain.models.MessageId;
 import ch.threema.domain.protocol.ThreemaFeature;
 import ch.threema.domain.protocol.csp.coders.MessageBox;
 import ch.threema.domain.protocol.csp.connection.MessageQueue;
+import ch.threema.domain.protocol.csp.fs.ForwardSecurityMessageProcessor;
 import ch.threema.domain.protocol.csp.messages.AbstractMessage;
 import ch.threema.domain.protocol.csp.messages.BoxLocationMessage;
 import ch.threema.domain.protocol.csp.messages.BoxTextMessage;
+import ch.threema.domain.protocol.csp.messages.ContactDeleteProfilePictureMessage;
+import ch.threema.domain.protocol.csp.messages.ContactRequestProfilePictureMessage;
+import ch.threema.domain.protocol.csp.messages.ContactSetProfilePictureMessage;
+import ch.threema.domain.protocol.csp.messages.DeliveryReceiptMessage;
+import ch.threema.domain.protocol.csp.messages.TypingIndicatorMessage;
 import ch.threema.domain.protocol.csp.messages.ballot.BallotCreateMessage;
 import ch.threema.domain.protocol.csp.messages.ballot.BallotData;
 import ch.threema.domain.protocol.csp.messages.ballot.BallotId;
@@ -62,6 +68,16 @@ import ch.threema.domain.protocol.csp.messages.ballot.BallotVote;
 import ch.threema.domain.protocol.csp.messages.ballot.BallotVoteMessage;
 import ch.threema.domain.protocol.csp.messages.file.FileData;
 import ch.threema.domain.protocol.csp.messages.file.FileMessage;
+import ch.threema.domain.protocol.csp.messages.voip.VoipCallAnswerData;
+import ch.threema.domain.protocol.csp.messages.voip.VoipCallAnswerMessage;
+import ch.threema.domain.protocol.csp.messages.voip.VoipCallHangupData;
+import ch.threema.domain.protocol.csp.messages.voip.VoipCallHangupMessage;
+import ch.threema.domain.protocol.csp.messages.voip.VoipCallOfferData;
+import ch.threema.domain.protocol.csp.messages.voip.VoipCallOfferMessage;
+import ch.threema.domain.protocol.csp.messages.voip.VoipCallRingingData;
+import ch.threema.domain.protocol.csp.messages.voip.VoipCallRingingMessage;
+import ch.threema.domain.protocol.csp.messages.voip.VoipICECandidatesData;
+import ch.threema.domain.protocol.csp.messages.voip.VoipICECandidatesMessage;
 import ch.threema.storage.DatabaseServiceNew;
 import ch.threema.storage.models.AbstractMessageModel;
 import ch.threema.storage.models.ContactModel;
@@ -158,16 +174,14 @@ public class ContactMessageReceiver implements MessageReceiver<MessageModel> {
 		innerMsg.setToIdentity(this.contactModel.getIdentity());
 
 		MessageBox boxmsg = wrapAndEnqueueMessage(innerMsg, messageModel);
-		if (boxmsg != null) {
-			messageModel.setIsQueued(true);
-			MessageId id = boxmsg.getMessageId();
-
-			if(id != null) {
-				messageModel.setApiMessageId(id.toString());
-				contactService.setIsHidden(innerMsg.getToIdentity(), false);
-				contactService.setIsArchived(innerMsg.getToIdentity(), false);
-				return true;
-			}
+		messageModel.setIsQueued(true);
+		MessageId id = boxmsg.getMessageId();
+
+		if (id != null) {
+			messageModel.setApiMessageId(id.toString());
+			contactService.setIsHidden(innerMsg.getToIdentity(), false);
+			contactService.setIsArchived(innerMsg.getToIdentity(), false);
+			return true;
 		}
 		logger.error("createBoxedTextMessage failed");
 		return false;
@@ -187,15 +201,13 @@ public class ContactMessageReceiver implements MessageReceiver<MessageModel> {
 		innerMsg.setPoiAddress(locationDataModel.getAddress());
 
 		MessageBox boxmsg = wrapAndEnqueueMessage(innerMsg, messageModel);
-		if (boxmsg != null) {
-			messageModel.setIsQueued(true);
-			MessageId id = boxmsg.getMessageId();
-			if (id!= null) {
-				messageModel.setApiMessageId(id.toString());
-				contactService.setIsHidden(innerMsg.getToIdentity(), false);
-				contactService.setIsArchived(innerMsg.getToIdentity(), false);
-				return true;
-			}
+		messageModel.setIsQueued(true);
+		MessageId id = boxmsg.getMessageId();
+		if (id != null) {
+			messageModel.setApiMessageId(id.toString());
+			contactService.setIsHidden(innerMsg.getToIdentity(), false);
+			contactService.setIsArchived(innerMsg.getToIdentity(), false);
+			return true;
 		}
 		return false;
 	}
@@ -227,21 +239,19 @@ public class ContactMessageReceiver implements MessageReceiver<MessageModel> {
 		fileMessage.setToIdentity(contactModel.getIdentity());
 
 		MessageBox messageBox = wrapAndEnqueueMessage(fileMessage, messageModel);
-		if(messageBox != null) {
-			messageModel.setIsQueued(true);
-			MessageId id = messageBox.getMessageId();
-			if (id!= null) {
-				messageModel.setApiMessageId(id.toString());
-				contactService.setIsHidden(fileMessage.getToIdentity(), false);
-				contactService.setIsArchived(fileMessage.getToIdentity(), false);
-				return true;
-			}
+		messageModel.setIsQueued(true);
+		MessageId id = messageBox.getMessageId();
+		if (id != null) {
+			messageModel.setApiMessageId(id.toString());
+			contactService.setIsHidden(fileMessage.getToIdentity(), false);
+			contactService.setIsArchived(fileMessage.getToIdentity(), false);
+			return true;
 		}
 		return false;
 	}
 
 	@Override
-	public boolean createBoxedBallotMessage(
+	public void createBoxedBallotMessage(
 											BallotData ballotData,
 											BallotModel ballotModel,
 											final String[] filteredIdentities,
@@ -256,24 +266,20 @@ public class ContactMessageReceiver implements MessageReceiver<MessageModel> {
 		innerMsg.setData(ballotData);
 
 		MessageBox messageBox = wrapAndEnqueueMessage(innerMsg, messageModel);
-		if(messageBox != null) {
-			messageModel.setIsQueued(true);
-			messageModel.setApiMessageId(messageBox.getMessageId().toString());
-			contactService.setIsHidden(innerMsg.getToIdentity(), false);
-			contactService.setIsArchived(innerMsg.getToIdentity(), false);
-			return true;
-		}
-		return false;
+		messageModel.setIsQueued(true);
+		messageModel.setApiMessageId(messageBox.getMessageId().toString());
+		contactService.setIsHidden(innerMsg.getToIdentity(), false);
+		contactService.setIsArchived(innerMsg.getToIdentity(), false);
 	}
 
 	@Override
-	public boolean createBoxedBallotVoteMessage(BallotVote[] votes, BallotModel ballotModel) throws ThreemaException {
+	public void createBoxedBallotVoteMessage(BallotVote[] votes, BallotModel ballotModel) throws ThreemaException {
 		final BallotId ballotId = new BallotId(Utils.hexStringToByteArray(ballotModel.getApiBallotId()));
 
 		if (ballotModel.getType() == BallotModel.Type.RESULT_ON_CLOSE) {
 			//if i am the creator do not send anything
 			if (TestUtil.compare(ballotModel.getCreatorIdentity(), identityStore.getIdentity())) {
-				return true;
+				return;
 			}
 		}
 
@@ -286,14 +292,147 @@ public class ContactMessageReceiver implements MessageReceiver<MessageModel> {
 			innerMsg.getBallotVotes().add(v);
 		}
 
-		MessageBox messageBox = wrapAndEnqueueMessage(innerMsg, null);
-		if (messageBox != null) {
-			contactService.setIsHidden(innerMsg.getToIdentity(), false);
-			contactService.setIsArchived(innerMsg.getToIdentity(), false);
-			return true;
-		}
-		return false;
+		wrapAndEnqueueMessage(innerMsg, null);
+		contactService.setIsHidden(innerMsg.getToIdentity(), false);
+		contactService.setIsArchived(innerMsg.getToIdentity(), false);
+	}
 
+	/**
+	 * Send a typing indicator to the receiver.
+	 *
+	 * @param isTyping true if the user is typing, false otherwise
+	 * @throws ThreemaException if enqueuing the message fails
+	 */
+	public void sendTypingIndicatorMessage(boolean isTyping) throws ThreemaException {
+		TypingIndicatorMessage typingIndicatorMessage = new TypingIndicatorMessage();
+		typingIndicatorMessage.setTyping(isTyping);
+		typingIndicatorMessage.setToIdentity(contactModel.getIdentity());
+		wrapAndEnqueueMessage(typingIndicatorMessage, null);
+	}
+
+	/**
+	 * Send request profile picture message to the receiver.
+	 *
+	 * @throws ThreemaException if enqueuing the message fails
+	 */
+	public void sendRequestProfilePictureMessage() throws ThreemaException {
+		ContactRequestProfilePictureMessage msg = new ContactRequestProfilePictureMessage();
+		msg.setToIdentity(contactModel.getIdentity());
+		wrapAndEnqueueMessage(msg, null);
+	}
+
+	/**
+	 * Send a set profile picture message to the receiver.
+	 *
+	 * @param data the profile picture upload data
+	 * @throws ThreemaException if enqueuing the message fails
+	 */
+	public void sendSetProfilePictureMessage(@NonNull ContactService.ProfilePictureUploadData data) throws ThreemaException {
+		ContactSetProfilePictureMessage msg = new ContactSetProfilePictureMessage();
+		msg.setBlobId(data.blobId);
+		msg.setEncryptionKey(data.encryptionKey);
+		msg.setSize(data.size);
+		msg.setToIdentity(contactModel.getIdentity());
+
+		wrapAndEnqueueMessage(msg, null);
+	}
+
+	/**
+	 * Send a delete profile picture message to the receiver.
+	 *
+	 * @throws ThreemaException if enqueuing the message fails
+	 */
+	public void sendDeleteProfilePictureMessage() throws ThreemaException {
+		ContactDeleteProfilePictureMessage msg = new ContactDeleteProfilePictureMessage();
+		msg.setToIdentity(contactModel.getIdentity());
+
+		wrapAndEnqueueMessage(msg, null);
+	}
+
+	/**
+	 * Send a delivery receipt to the receiver.
+	 *
+	 * @param receiptType the type of the delivery receipt
+	 * @param messageIds  the message ids
+	 * @throws ThreemaException if enqueuing the message fails
+	 */
+	public void sendDeliveryReceipt(int receiptType, @NonNull MessageId[] messageIds) throws ThreemaException {
+		DeliveryReceiptMessage receipt = new DeliveryReceiptMessage();
+		receipt.setReceiptType(receiptType);
+		receipt.setReceiptMessageIds(messageIds);
+		receipt.setToIdentity(contactModel.getIdentity());
+
+		wrapAndEnqueueMessage(receipt, null);
+	}
+
+	/**
+	 * Send a voip call offer message to the receiver.
+	 *
+	 * @param callOfferData the call offer data
+	 * @throws ThreemaException if enqueuing the message fails
+	 */
+	public void sendVoipCallOfferMessage(@NonNull VoipCallOfferData callOfferData) throws ThreemaException {
+		VoipCallOfferMessage voipCallOfferMessage = new VoipCallOfferMessage();
+		voipCallOfferMessage.setData(callOfferData);
+		voipCallOfferMessage.setToIdentity(contactModel.getIdentity());
+
+		wrapAndEnqueueMessage(voipCallOfferMessage, null);
+	}
+
+	/**
+	 * Send a voip call answer message to the receiver.
+	 *
+	 * @param callAnswerData the call answer data
+	 * @throws ThreemaException if enqueuing the message fails
+	 */
+	public void sendVoipCallAnswerMessage(@NonNull VoipCallAnswerData callAnswerData) throws ThreemaException {
+		VoipCallAnswerMessage voipCallAnswerMessage = new VoipCallAnswerMessage();
+		voipCallAnswerMessage.setData(callAnswerData);
+		voipCallAnswerMessage.setToIdentity(contactModel.getIdentity());
+
+		wrapAndEnqueueMessage(voipCallAnswerMessage, null);
+	}
+
+	/**
+	 * Send a voip ICE candidates message to the receiver.
+	 *
+	 * @param voipICECandidatesData the voip ICE candidate data
+	 * @throws ThreemaException if enqueuing the message fails
+	 */
+	public void sendVoipICECandidateMessage(@NonNull VoipICECandidatesData voipICECandidatesData) throws ThreemaException {
+		VoipICECandidatesMessage voipICECandidatesMessage = new VoipICECandidatesMessage();
+		voipICECandidatesMessage.setData(voipICECandidatesData);
+		voipICECandidatesMessage.setToIdentity(contactModel.getIdentity());
+
+		wrapAndEnqueueMessage(voipICECandidatesMessage, null);
+	}
+
+	/**
+	 * Send a voip call hangup message to the receiver.
+	 *
+	 * @param callHangupData the call hangup data
+	 * @throws ThreemaException if enqueuing the message fails
+	 */
+	public void sendVoipCallHangupMessage(@NonNull VoipCallHangupData callHangupData) throws ThreemaException {
+		VoipCallHangupMessage voipCallHangupMessage = new VoipCallHangupMessage();
+		voipCallHangupMessage.setData(callHangupData);
+		voipCallHangupMessage.setToIdentity(contactModel.getIdentity());
+
+		wrapAndEnqueueMessage(voipCallHangupMessage, null);
+	}
+
+	/**
+	 * Send a voip call ringing message to the receiver.
+	 *
+	 * @param callRingingData the call ringing data
+	 * @throws ThreemaException if enqueuing the message fails
+	 */
+	public void sendVoipCallRingingMessage(@NonNull VoipCallRingingData callRingingData) throws ThreemaException {
+		VoipCallRingingMessage voipCallRingingMessage = new VoipCallRingingMessage();
+		voipCallRingingMessage.setToIdentity(contactModel.getIdentity());
+		voipCallRingingMessage.setData(callRingingData);
+
+		wrapAndEnqueueMessage(voipCallRingingMessage, null);
 	}
 
 	@Override
@@ -370,6 +509,15 @@ public class ContactMessageReceiver implements MessageReceiver<MessageModel> {
 		return avatar;
 	}
 
+	@Override
+	@Nullable
+	public Bitmap getAvatar() {
+		if(avatar == null && contactService != null) {
+			avatar = contactService.getAvatar(contactModel, true, true);
+		}
+		return avatar;
+	}
+
 	@Deprecated
 	@Override
 	public int getUniqueId() {
@@ -475,23 +623,42 @@ public class ContactMessageReceiver implements MessageReceiver<MessageModel> {
 		}
 	}
 
+	@NonNull
 	private MessageBox wrapAndEnqueueMessage(@NonNull AbstractMessage innerMsg, @Nullable MessageModel messageModel) throws ThreemaException {
 		// Check whether peer contact supports forward security
 		if (ConfigUtils.isForwardSecurityEnabled() &&
-			ThreemaFeature.canForwardSecurity(this.getContact().getFeatureMask()) &&
-			this.getContact().isForwardSecurityEnabled()) {
+			ThreemaFeature.canForwardSecurity(this.getContact().getFeatureMask())) {
 
 			// Synchronize FS wrapping and enqueuing to ensure the order stays correct
 			synchronized (fsmp) {
-				AbstractMessage wrappedMessage = fsmp.makeMessage(this.getContact(), innerMsg);
+				AbstractMessage message;
+				try {
+					message = fsmp.makeMessage(this.getContact(), innerMsg);
+					logger.info(
+						"Enqueue FS wrapped message {} of type {} to {}",
+						message.getMessageId(),
+						Utils.byteToHex((byte) innerMsg.getType(), true, true),
+						message.getToIdentity()
+					);
+				} catch (ForwardSecurityMessageProcessor.MessageTypeNotSupportedInSession e) {
+					logger.info(
+						"Message {} for {} of type {} is not supported in FS session with negotiated version {}",
+						innerMsg.getMessageId(),
+						innerMsg.getToIdentity(),
+						Utils.byteToHex((byte) innerMsg.getType(), true, true),
+						e.getNegotiatedVersion()
+					);
+					// If the message is not supported to be sent in the session, then send it
+					// without forward security.
+					message = innerMsg;
+				}
 
 				if (messageModel != null) {
 					// Save model before enqueuing new message (fixes ANDR-512)
-					initNewAbstractMessage(messageModel, wrappedMessage);
+					initNewAbstractMessage(messageModel, message);
 				}
 
-				logger.info("Enqueue FS wrapped {} message ID {} to {}", innerMsg.getClass().getSimpleName(), wrappedMessage.getMessageId(), wrappedMessage.getToIdentity());
-				return messageQueue.enqueue(wrappedMessage);
+				return messageQueue.enqueue(message);
 			}
 		} else {
 			// No forward security support or not enabled
@@ -502,7 +669,11 @@ public class ContactMessageReceiver implements MessageReceiver<MessageModel> {
 				initNewAbstractMessage(messageModel, innerMsg);
 			}
 
-			logger.info("Enqueue {} message ID {} to {}", innerMsg.getClass().getSimpleName(), innerMsg.getMessageId(), innerMsg.getToIdentity());
+			logger.info("Enqueue message {} of type {} to {}",
+				innerMsg.getMessageId(),
+				Utils.byteToHex((byte) innerMsg.getType(), true, true),
+				innerMsg.getToIdentity()
+			);
 			return messageQueue.enqueue(innerMsg);
 		}
 	}
diff --git a/app/src/main/java/ch/threema/app/messagereceiver/DistributionListMessageReceiver.java b/app/src/main/java/ch/threema/app/messagereceiver/DistributionListMessageReceiver.java
index 7d8cc64a..3f4f646c 100644
--- a/app/src/main/java/ch/threema/app/messagereceiver/DistributionListMessageReceiver.java
+++ b/app/src/main/java/ch/threema/app/messagereceiver/DistributionListMessageReceiver.java
@@ -24,6 +24,9 @@ package ch.threema.app.messagereceiver;
 import android.content.Intent;
 import android.graphics.Bitmap;
 
+import androidx.annotation.NonNull;
+import androidx.annotation.Nullable;
+
 import java.sql.SQLException;
 import java.util.ArrayList;
 import java.util.Date;
@@ -31,8 +34,6 @@ import java.util.List;
 import java.util.Objects;
 import java.util.UUID;
 
-import androidx.annotation.NonNull;
-import androidx.annotation.Nullable;
 import ch.threema.app.ThreemaApplication;
 import ch.threema.app.collections.Functional;
 import ch.threema.app.collections.IPredicateNonNull;
@@ -162,17 +163,17 @@ public class DistributionListMessageReceiver implements MessageReceiver<Distribu
 	}
 
 	@Override
-	public boolean createBoxedBallotMessage(
+	public void createBoxedBallotMessage(
 											BallotData ballotData,
 											BallotModel ballotModel,
 											final String[] filteredIdentities,
 											DistributionListMessageModel abstractMessageModel) {
-		return false;
+		// Not supported in distribution lists
 	}
 
 	@Override
-	public boolean createBoxedBallotVoteMessage(BallotVote[] votes, BallotModel ballotModel) {
-		return false;
+	public void createBoxedBallotVoteMessage(BallotVote[] votes, BallotModel ballotModel) {
+		// Not supported in distribution lists
 	}
 
 	@Override
@@ -224,6 +225,11 @@ public class DistributionListMessageReceiver implements MessageReceiver<Distribu
 		return distributionListService.getAvatar(distributionListModel, false);
 	}
 
+	@Override
+	public Bitmap getAvatar() {
+		return distributionListService.getAvatar(distributionListModel, true, true);
+	}
+
 	@Deprecated
 	@Override
 	public int getUniqueId() {
diff --git a/app/src/main/java/ch/threema/app/messagereceiver/GroupMessageReceiver.java b/app/src/main/java/ch/threema/app/messagereceiver/GroupMessageReceiver.java
index d6219c0f..0873ab69 100644
--- a/app/src/main/java/ch/threema/app/messagereceiver/GroupMessageReceiver.java
+++ b/app/src/main/java/ch/threema/app/messagereceiver/GroupMessageReceiver.java
@@ -24,6 +24,9 @@ package ch.threema.app.messagereceiver;
 import android.content.Intent;
 import android.graphics.Bitmap;
 
+import androidx.annotation.NonNull;
+import androidx.annotation.Nullable;
+
 import org.slf4j.Logger;
 
 import java.sql.SQLException;
@@ -34,8 +37,6 @@ import java.util.List;
 import java.util.Objects;
 import java.util.UUID;
 
-import androidx.annotation.NonNull;
-import androidx.annotation.Nullable;
 import ch.threema.app.ThreemaApplication;
 import ch.threema.app.collections.Functional;
 import ch.threema.app.collections.IPredicateNonNull;
@@ -221,14 +222,14 @@ public class GroupMessageReceiver implements MessageReceiver<GroupMessageModel>
 	}
 
 	@Override
-	public boolean createBoxedBallotMessage(final BallotData ballotData,
+	public void createBoxedBallotMessage(final BallotData ballotData,
 											final BallotModel ballotModel,
 											final String[] filteredIdentities,
 											@Nullable GroupMessageModel abstractMessageModel) throws ThreemaException {
 
 		final BallotId ballotId = new BallotId(Utils.hexStringToByteArray(ballotModel.getApiBallotId()));
 
-		return sendMessage(messageId -> {
+		sendMessage(messageId -> {
 			final GroupBallotCreateMessage msg = new GroupBallotCreateMessage();
 			msg.setMessageId(messageId);
 			msg.setBallotCreator(ballotModel.getCreatorIdentity());
@@ -246,7 +247,7 @@ public class GroupMessageReceiver implements MessageReceiver<GroupMessageModel>
 	}
 
 	@Override
-	public boolean createBoxedBallotVoteMessage(final BallotVote[] votes, final BallotModel ballotModel) throws ThreemaException {
+	public void createBoxedBallotVoteMessage(final BallotVote[] votes, final BallotModel ballotModel) throws ThreemaException {
 		final BallotId ballotId = new BallotId(Utils.hexStringToByteArray(ballotModel.getApiBallotId()));
 
 		String[] toIdentities = groupService.getGroupIdentities(group);
@@ -268,7 +269,7 @@ public class GroupMessageReceiver implements MessageReceiver<GroupMessageModel>
 				//only to the creator
 				break;
 		}
-		return sendMessage(messageId -> {
+		sendMessage(messageId -> {
 			final GroupBallotVoteMessage msg = new GroupBallotVoteMessage();
 			msg.setMessageId(messageId);
 			msg.setBallotCreator(ballotModel.getCreatorIdentity());
@@ -276,8 +277,6 @@ public class GroupMessageReceiver implements MessageReceiver<GroupMessageModel>
 			for (BallotVote v : votes) {
 				msg.getBallotVotes().add(v);
 			}
-			logger.info("Enqueue ballot vote message ID {} to {}", msg.getMessageId(), msg.getToIdentity());
-
 			return msg;
 		}, null, toIdentities);
 	}
@@ -333,13 +332,20 @@ public class GroupMessageReceiver implements MessageReceiver<GroupMessageModel>
 
 	@Override
 	public Bitmap getNotificationAvatar() {
-		//lacy
 		if(avatar == null && groupService != null) {
 			avatar = groupService.getAvatar(group, false);
 		}
 		return avatar;
 	}
 
+	@Override
+	public Bitmap getAvatar() {
+		if(avatar == null && groupService != null) {
+			avatar = groupService.getAvatar(group, true, true);
+		}
+		return avatar;
+	}
+
 	@Override
 	@Deprecated
 	public int getUniqueId() {
diff --git a/app/src/main/java/ch/threema/app/messagereceiver/MessageReceiver.java b/app/src/main/java/ch/threema/app/messagereceiver/MessageReceiver.java
index de0ab0f0..651d0520 100644
--- a/app/src/main/java/ch/threema/app/messagereceiver/MessageReceiver.java
+++ b/app/src/main/java/ch/threema/app/messagereceiver/MessageReceiver.java
@@ -24,14 +24,15 @@ package ch.threema.app.messagereceiver;
 import android.content.Intent;
 import android.graphics.Bitmap;
 
+import androidx.annotation.IntDef;
+import androidx.annotation.Nullable;
+
 import java.lang.annotation.Retention;
 import java.lang.annotation.RetentionPolicy;
 import java.sql.SQLException;
 import java.util.Date;
 import java.util.List;
 
-import androidx.annotation.IntDef;
-import androidx.annotation.Nullable;
 import ch.threema.app.services.MessageService;
 import ch.threema.base.ThreemaException;
 import ch.threema.base.crypto.SymmetricEncryptionResult;
@@ -106,7 +107,7 @@ public interface MessageReceiver<M extends AbstractMessageModel> {
 	/**
 	 * send a ballot (create) message
 	 */
-	boolean createBoxedBallotMessage(
+	void createBoxedBallotMessage(
 			final BallotData ballotData,
 			final BallotModel ballotModel,
 			final String[] filteredIdentities,
@@ -115,7 +116,7 @@ public interface MessageReceiver<M extends AbstractMessageModel> {
 	/**
 	 * send a ballot vote message
 	 */
-	boolean createBoxedBallotVoteMessage(BallotVote[] votes, BallotModel ballotModel) throws ThreemaException;
+	void createBoxedBallotVoteMessage(BallotVote[] votes, BallotModel ballotModel) throws ThreemaException;
 
 	/**
 	 * select and filter (if filter is set) all message models
@@ -164,6 +165,9 @@ public interface MessageReceiver<M extends AbstractMessageModel> {
 	 */
 	Bitmap getNotificationAvatar();
 
+	@Nullable
+	Bitmap getAvatar();
+
 	/**
 	 * @return a unique id
 	 */
diff --git a/app/src/main/java/ch/threema/app/motionviews/widget/ActionEntity.kt b/app/src/main/java/ch/threema/app/motionviews/widget/ActionEntity.kt
new file mode 100644
index 00000000..321ddfb6
--- /dev/null
+++ b/app/src/main/java/ch/threema/app/motionviews/widget/ActionEntity.kt
@@ -0,0 +1,27 @@
+/*  _____ _
+ * |_   _| |_  _ _ ___ ___ _ __  __ _
+ *   | | | ' \| '_/ -_) -_) '  \/ _` |_
+ *   |_| |_||_|_| \___\___|_|_|_\__,_(_)
+ *
+ * Threema for Android
+ * Copyright (c) 2023 Threema GmbH
+ *
+ * This program is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU Affero General Public License, version 3,
+ * as published by the Free Software Foundation.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+ * GNU Affero General Public License for more details.
+ *
+ * You should have received a copy of the GNU Affero General Public License
+ * along with this program. If not, see <https://www.gnu.org/licenses/>.
+ */
+
+package ch.threema.app.motionviews.widget
+
+/**
+ * The base class for actions.
+ */
+interface ActionEntity
diff --git a/app/src/main/java/ch/threema/app/motionviews/widget/CropEntity.kt b/app/src/main/java/ch/threema/app/motionviews/widget/CropEntity.kt
new file mode 100644
index 00000000..67caea18
--- /dev/null
+++ b/app/src/main/java/ch/threema/app/motionviews/widget/CropEntity.kt
@@ -0,0 +1,34 @@
+/*  _____ _
+ * |_   _| |_  _ _ ___ ___ _ __  __ _
+ *   | | | ' \| '_/ -_) -_) '  \/ _` |_
+ *   |_| |_||_|_| \___\___|_|_|_\__,_(_)
+ *
+ * Threema for Android
+ * Copyright (c) 2023 Threema GmbH
+ *
+ * This program is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU Affero General Public License, version 3,
+ * as published by the Free Software Foundation.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+ * GNU Affero General Public License for more details.
+ *
+ * You should have received a copy of the GNU Affero General Public License
+ * along with this program. If not, see <https://www.gnu.org/licenses/>.
+ */
+
+package ch.threema.app.motionviews.widget
+
+import android.net.Uri
+import ch.threema.app.ui.MediaItem
+
+/**
+ * An action entity that stores the uri of the previous (full size) image with its orientation
+ * parameters.
+ */
+class CropEntity(private val lastUri: Uri, private val orientation: MediaItem.Orientation) : ActionEntity {
+    fun getLastUri() = lastUri
+    fun getOrientation() = orientation
+}
diff --git a/app/src/main/java/ch/threema/app/motionviews/widget/FlipEntity.kt b/app/src/main/java/ch/threema/app/motionviews/widget/FlipEntity.kt
new file mode 100644
index 00000000..569b1753
--- /dev/null
+++ b/app/src/main/java/ch/threema/app/motionviews/widget/FlipEntity.kt
@@ -0,0 +1,27 @@
+/*  _____ _
+ * |_   _| |_  _ _ ___ ___ _ __  __ _
+ *   | | | ' \| '_/ -_) -_) '  \/ _` |_
+ *   |_| |_||_|_| \___\___|_|_|_\__,_(_)
+ *
+ * Threema for Android
+ * Copyright (c) 2023 Threema GmbH
+ *
+ * This program is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU Affero General Public License, version 3,
+ * as published by the Free Software Foundation.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+ * GNU Affero General Public License for more details.
+ *
+ * You should have received a copy of the GNU Affero General Public License
+ * along with this program. If not, see <https://www.gnu.org/licenses/>.
+ */
+
+package ch.threema.app.motionviews.widget
+
+/**
+ * A dummy class for a flip operation used in the undo history.
+ */
+class FlipEntity : ActionEntity
diff --git a/app/src/main/java/ch/threema/app/motionviews/widget/MotionEntity.java b/app/src/main/java/ch/threema/app/motionviews/widget/MotionEntity.java
index 5d333fe5..cd6e27da 100644
--- a/app/src/main/java/ch/threema/app/motionviews/widget/MotionEntity.java
+++ b/app/src/main/java/ch/threema/app/motionviews/widget/MotionEntity.java
@@ -36,7 +36,7 @@ import ch.threema.app.motionviews.utils.MathUtils;
 import ch.threema.app.motionviews.viewmodel.Layer;
 
 @SuppressWarnings({"WeakerAccess"})
-public abstract class MotionEntity {
+public abstract class MotionEntity implements ActionEntity {
 
 	/**
 	 * data
diff --git a/app/src/main/java/ch/threema/app/motionviews/widget/PathEntity.java b/app/src/main/java/ch/threema/app/motionviews/widget/PathEntity.java
index 5e974ad6..f27e7466 100644
--- a/app/src/main/java/ch/threema/app/motionviews/widget/PathEntity.java
+++ b/app/src/main/java/ch/threema/app/motionviews/widget/PathEntity.java
@@ -21,38 +21,9 @@
 
 package ch.threema.app.motionviews.widget;
 
-import android.graphics.Canvas;
-import android.graphics.Paint;
-import androidx.annotation.NonNull;
-import androidx.annotation.Nullable;
-
-/* dummy entity for paths on draw canvas */
-
-public class PathEntity extends MotionEntity {
-	public PathEntity() {
-		super(null, 1, 1);
-	}
-
-	@Override
-	protected void drawContent(@NonNull Canvas canvas, @Nullable Paint drawingPaint) {}
-
-	@Override
-	public boolean canMove() {
-		return false;
-	}
-
-	@Override
-	public boolean canChangeColor() {
-		return false;
-	}
-
-	@Override
-	public int getWidth() {
-		return 0;
-	}
+/**
+ * A dummy entity for paths on draw canvas.
+ */
 
-	@Override
-	public int getHeight() {
-		return 0;
-	}
+public class PathEntity implements ActionEntity {
 }
diff --git a/app/src/main/java/ch/threema/app/motionviews/widget/RotationEntity.kt b/app/src/main/java/ch/threema/app/motionviews/widget/RotationEntity.kt
new file mode 100644
index 00000000..f95d204d
--- /dev/null
+++ b/app/src/main/java/ch/threema/app/motionviews/widget/RotationEntity.kt
@@ -0,0 +1,27 @@
+/*  _____ _
+ * |_   _| |_  _ _ ___ ___ _ __  __ _
+ *   | | | ' \| '_/ -_) -_) '  \/ _` |_
+ *   |_| |_||_|_| \___\___|_|_|_\__,_(_)
+ *
+ * Threema for Android
+ * Copyright (c) 2023 Threema GmbH
+ *
+ * This program is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU Affero General Public License, version 3,
+ * as published by the Free Software Foundation.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+ * GNU Affero General Public License for more details.
+ *
+ * You should have received a copy of the GNU Affero General Public License
+ * along with this program. If not, see <https://www.gnu.org/licenses/>.
+ */
+
+package ch.threema.app.motionviews.widget
+
+/**
+ * A dummy class for a rotate operation used in the undo history.
+ */
+class RotationEntity : ActionEntity
diff --git a/app/src/main/java/ch/threema/app/notifications/NotificationBuilderWrapper.java b/app/src/main/java/ch/threema/app/notifications/NotificationBuilderWrapper.java
index 487b8f57..b3ec34cf 100644
--- a/app/src/main/java/ch/threema/app/notifications/NotificationBuilderWrapper.java
+++ b/app/src/main/java/ch/threema/app/notifications/NotificationBuilderWrapper.java
@@ -55,6 +55,7 @@ import androidx.core.app.NotificationCompat;
 import org.slf4j.Logger;
 
 import java.io.InputStream;
+import java.util.ArrayList;
 import java.util.Arrays;
 import java.util.List;
 import java.util.Objects;
@@ -304,7 +305,7 @@ public class NotificationBuilderWrapper extends NotificationCompat.Builder {
 
 			// clear all chats in this channel group and re-create it
 			if (getNotificationChannelGroup(notificationManager, notificationChannelSettings.getChannelGroupId()) != null) {
-				notificationManager.deleteNotificationChannelGroup(notificationChannelSettings.getChannelGroupId());
+				deleteNotificationChannelGroup(notificationManager, notificationChannelSettings.getChannelGroupId());
 			}
 			createNotificationChannelGroupIfNotExists(notificationManager, notificationChannelSettings);
 			newNotificationChannel = createNotificationChannel(notificationChannelSettings.hash(), notificationChannelSettings);
@@ -317,7 +318,7 @@ public class NotificationBuilderWrapper extends NotificationCompat.Builder {
 			if (existingNotificationChannel == null) {
 				if (!allowMultipleChannelsPerGroup &&
 					getNotificationChannelGroup(notificationManager, notificationChannelSettings.getChannelGroupId()) != null) {
-						notificationManager.deleteNotificationChannelGroup(notificationChannelSettings.getChannelGroupId());
+						deleteNotificationChannelGroup(notificationManager, notificationChannelSettings.getChannelGroupId());
 				}
 				createNotificationChannelGroupIfNotExists(notificationManager, notificationChannelSettings);
 
@@ -339,6 +340,31 @@ public class NotificationBuilderWrapper extends NotificationCompat.Builder {
 		return newNotificationChannel;
 	}
 
+	@TargetApi(Build.VERSION_CODES.O)
+	private static void deleteNotificationChannelGroup(@NonNull NotificationManager notificationManager, String channelGroupId) {
+		if (ConfigUtils.hasBrokenDeleteNotificationChannelGroup()) {
+			final List<String> channelIds = new ArrayList<>();
+			for (NotificationChannel channel: notificationManager.getNotificationChannels()) {
+				if (channelGroupId.equals(channel.getGroup())) {
+					channelIds.add(channel.getId());
+				}
+			}
+
+			if (channelIds.size() > 0) {
+				for (String channelId : channelIds) {
+					try {
+						notificationManager.deleteNotificationChannel(channelId);
+					} catch (Exception e) {
+						logger.error("Deleting notification channel failed", e);
+					}
+				}
+			}
+		}
+		else {
+			notificationManager.deleteNotificationChannelGroup(channelGroupId);
+		}
+	}
+
 	@TargetApi(Build.VERSION_CODES.O)
 	private static void createNotificationChannelGroupIfNotExists(NotificationManager notificationManager, NotificationChannelSettings notificationChannelSettings) {
 		if (getNotificationChannelGroup(notificationManager, notificationChannelSettings.getChannelGroupId()) == null) {
diff --git a/app/src/main/java/ch/threema/app/preference/MaterialMultiSelectListPreference.kt b/app/src/main/java/ch/threema/app/preference/MaterialMultiSelectListPreference.kt
new file mode 100644
index 00000000..fd7b1f22
--- /dev/null
+++ b/app/src/main/java/ch/threema/app/preference/MaterialMultiSelectListPreference.kt
@@ -0,0 +1,69 @@
+/*  _____ _
+ * |_   _| |_  _ _ ___ ___ _ __  __ _
+ *   | | | ' \| '_/ -_) -_) '  \/ _` |_
+ *   |_| |_||_|_| \___\___|_|_|_\__,_(_)
+ *
+ * Threema for Android
+ * Copyright (c) 2023 Threema GmbH
+ *
+ * This program is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU Affero General Public License, version 3,
+ * as published by the Free Software Foundation.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+ * GNU Affero General Public License for more details.
+ *
+ * You should have received a copy of the GNU Affero General Public License
+ * along with this program. If not, see <https://www.gnu.org/licenses/>.
+ */
+
+package ch.threema.app.preference
+
+import android.app.Dialog
+import android.content.Context
+import android.content.DialogInterface
+import android.os.Bundle
+import androidx.preference.MultiSelectListPreferenceDialogFragmentCompat
+import com.google.android.material.dialog.MaterialAlertDialogBuilder
+
+class MaterialMultiSelectListPreference : MultiSelectListPreferenceDialogFragmentCompat() {
+    private var mWhichButtonClicked = 0
+    override fun onCreateDialog(savedInstanceState: Bundle?): Dialog {
+        val context: Context? = activity
+        mWhichButtonClicked = DialogInterface.BUTTON_NEGATIVE
+        val builder = MaterialAlertDialogBuilder(requireActivity()).setTitle(preference.dialogTitle).setIcon(preference.dialogIcon)
+                .setPositiveButton(preference.positiveButtonText, this)
+                .setNegativeButton(preference.negativeButtonText, this)
+        val contentView = context?.let { onCreateDialogView(it) }
+        if (contentView != null) {
+            onBindDialogView(contentView)
+            builder.setView(contentView)
+        } else {
+            builder.setMessage(preference.dialogMessage)
+        }
+        onPrepareDialogBuilder(builder)
+        return builder.create()
+    }
+
+    override fun onClick(dialog: DialogInterface, which: Int) {
+        mWhichButtonClicked = which
+    }
+
+    override fun onDismiss(dialog: DialogInterface) {
+        onDialogClosedWasCalledFromOnDismiss = true
+        super.onDismiss(dialog)
+    }
+
+    private var onDialogClosedWasCalledFromOnDismiss = false
+
+    override fun onDialogClosed(positiveResult: Boolean) {
+        if (onDialogClosedWasCalledFromOnDismiss) {
+            onDialogClosedWasCalledFromOnDismiss = false
+            super.onDialogClosed(mWhichButtonClicked == DialogInterface.BUTTON_POSITIVE)
+        } else {
+            super.onDialogClosed(positiveResult)
+        }
+    }
+}
diff --git a/app/src/main/java/ch/threema/app/preference/SettingsAboutFragment.kt b/app/src/main/java/ch/threema/app/preference/SettingsAboutFragment.kt
index c03fe1bd..468826a0 100644
--- a/app/src/main/java/ch/threema/app/preference/SettingsAboutFragment.kt
+++ b/app/src/main/java/ch/threema/app/preference/SettingsAboutFragment.kt
@@ -83,7 +83,7 @@ class SettingsAboutFragment : ThreemaPreferenceFragment() {
     private fun initLicensePref() {
         val licensePreference = getPref<Preference>(R.string.preferences__licenses)
         licensePreference.setOnPreferenceClickListener {
-            startActivity(Intent(requireActivity().applicationContext, LicenseActivity::class.java))
+            startActivity(Intent(context, LicenseActivity::class.java))
             true
         }
     }
@@ -94,7 +94,7 @@ class SettingsAboutFragment : ThreemaPreferenceFragment() {
             privacyPolicyPreference.isVisible = false
         } else {
             privacyPolicyPreference.onPreferenceClickListener = Preference.OnPreferenceClickListener {
-                startActivity(Intent(requireActivity().applicationContext, PrivacyPolicyActivity::class.java))
+                startActivity(Intent(context, PrivacyPolicyActivity::class.java))
                 true
             }
         }
@@ -106,7 +106,7 @@ class SettingsAboutFragment : ThreemaPreferenceFragment() {
             licensePreference.isVisible = false
         } else {
             licensePreference.setOnPreferenceClickListener {
-                startActivity(Intent(requireActivity().applicationContext, TermsOfServiceActivity::class.java))
+                startActivity(Intent(context, TermsOfServiceActivity::class.java))
                 true
             }
         }
@@ -116,7 +116,7 @@ class SettingsAboutFragment : ThreemaPreferenceFragment() {
         val licensePreference = getPref<Preference>(R.string.preferences__eula)
         if (BuildFlavor.getLicenseType() == BuildFlavor.LicenseType.GOOGLE) {
             licensePreference.setOnPreferenceClickListener {
-                startActivity(Intent(requireActivity().applicationContext, EulaActivity::class.java))
+                startActivity(Intent(context, EulaActivity::class.java))
                 true
             }
         } else {
diff --git a/app/src/main/java/ch/threema/app/preference/SettingsActivity.kt b/app/src/main/java/ch/threema/app/preference/SettingsActivity.kt
index d46150e5..118ace98 100644
--- a/app/src/main/java/ch/threema/app/preference/SettingsActivity.kt
+++ b/app/src/main/java/ch/threema/app/preference/SettingsActivity.kt
@@ -21,33 +21,40 @@
 
 package ch.threema.app.preference
 
-import android.content.res.Resources
+import android.graphics.Color
+import android.os.Build
 import android.os.Bundle
 import android.view.MenuItem
 import android.view.View
 import androidx.annotation.StringRes
+import androidx.core.view.WindowCompat
 import androidx.fragment.app.Fragment
 import androidx.preference.Preference
 import androidx.preference.PreferenceFragmentCompat
 import ch.threema.app.R
 import ch.threema.app.activities.ThreemaToolbarActivity
 import ch.threema.app.utils.ConfigUtils
-import ch.threema.app.utils.ConfigUtils.THEME_DARK
 import ch.threema.app.utils.ConfigUtils.isTabletLayout
 import ch.threema.base.utils.LoggingUtil
 
 private val logger = LoggingUtil.getThreemaLogger("SettingsActivity")
 
 class SettingsActivity : ThreemaToolbarActivity(), PreferenceFragmentCompat.OnPreferenceStartFragmentCallback {
-    private val settingsFragment = SettingsFragment()
+    private val settingsSummaryFragment = SettingsSummaryFragment()
 
     override fun onCreate(savedInstanceState: Bundle?) {
+
         super.onCreate(savedInstanceState)
+        WindowCompat.setDecorFitsSystemWindows(window, false)
+        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.Q) {
+            window.statusBarColor = Color.TRANSPARENT
+            window.navigationBarColor = Color.TRANSPARENT
+        }
 
         // hide contents in app switcher and inhibit screenshots
         ConfigUtils.setScreenshotsAllowed(this, preferenceService, lockAppService)
 
-        if (isTabletLayout() && ConfigUtils.getAppTheme(this) == THEME_DARK) {
+        if (isTabletLayout() && ConfigUtils.isTheDarkSide(this)) {
             findViewById<View>(R.id.settings_separator).visibility = View.INVISIBLE
         }
 
@@ -72,7 +79,7 @@ class SettingsActivity : ThreemaToolbarActivity(), PreferenceFragmentCompat.OnPr
     private fun showDefaultSettings() {
         supportFragmentManager
                 .beginTransaction()
-                .replace(R.id.settings, settingsFragment)
+                .replace(R.id.settings, settingsSummaryFragment)
                 .commit()
 
         // Show first preference screen (privacy) on the right side on tablets per default.
@@ -97,7 +104,7 @@ class SettingsActivity : ThreemaToolbarActivity(), PreferenceFragmentCompat.OnPr
         if (isTabletLayout()) {
             supportFragmentManager
                     .beginTransaction()
-                    .replace(R.id.settings, settingsFragment)
+                    .replace(R.id.settings, settingsSummaryFragment)
                     .commit()
 
             supportFragmentManager
@@ -123,16 +130,29 @@ class SettingsActivity : ThreemaToolbarActivity(), PreferenceFragmentCompat.OnPr
                 fragmentClassName)
 
         val layoutID = if (isTabletLayout()) R.id.settings_detailed else R.id.settings
-        val transaction = supportFragmentManager
-                .beginTransaction()
-                .replace(layoutID, fragment)
+        val transaction =
+            if (isTabletLayout()) {
+                supportFragmentManager
+                    .beginTransaction()
+                    .replace(layoutID, fragment)
+            } else {
+                supportFragmentManager
+                    .beginTransaction()
+                    .setCustomAnimations(
+                        R.anim.slide_in_right_short,
+                        R.anim.slide_out_left_short,
+                        R.anim.slide_in_left_short,
+                        R.anim.slide_out_right_short,
+                        )
+                    .replace(layoutID, fragment)
+            }
         // On tablets there is no need to add the fragment to the back stack except for nested fragments (i.e. troubleshooting)
         if (!isTabletLayout() || fragment is SettingsTroubleshootingFragment) {
             transaction.addToBackStack(null)
         }
         transaction.commit()
 
-        settingsFragment.onPrefClicked(pref.key)
+        settingsSummaryFragment.onPrefClicked(pref.key)
 
         return true
     }
@@ -148,14 +168,6 @@ class SettingsActivity : ThreemaToolbarActivity(), PreferenceFragmentCompat.OnPr
         return false
     }
 
-    override fun onApplyThemeResource(theme: Resources.Theme, resid: Int, first: Boolean) {
-        if (ConfigUtils.getAppTheme(this) == THEME_DARK) {
-            theme.applyStyle(R.style.Theme_Threema_Settings_Dark, true)
-        } else {
-            super.onApplyThemeResource(theme, resid, first)
-        }
-    }
-
     fun setActionBarTitle(@StringRes title: Int = R.string.menu_settings) {
         supportActionBar?.setDisplayHomeAsUpEnabled(true)
         supportActionBar?.setTitle(title)
diff --git a/app/src/main/java/ch/threema/app/preference/SettingsAppearanceFragment.kt b/app/src/main/java/ch/threema/app/preference/SettingsAppearanceFragment.kt
index 82557b9d..8ff874dc 100644
--- a/app/src/main/java/ch/threema/app/preference/SettingsAppearanceFragment.kt
+++ b/app/src/main/java/ch/threema/app/preference/SettingsAppearanceFragment.kt
@@ -24,6 +24,7 @@ package ch.threema.app.preference
 import androidx.preference.CheckBoxPreference
 import androidx.preference.DropDownPreference
 import androidx.preference.Preference
+import androidx.preference.PreferenceCategory
 import ch.threema.app.R
 import ch.threema.app.ThreemaApplication
 import ch.threema.app.dialogs.GenericAlertDialog
@@ -32,7 +33,8 @@ import ch.threema.app.services.PreferenceService
 import ch.threema.app.services.WallpaperService
 import ch.threema.app.utils.AppRestrictionUtil
 import ch.threema.app.utils.ConfigUtils
-import ch.threema.app.utils.StateBitmapUtil
+import com.google.android.material.color.DynamicColors
+import com.google.android.material.color.DynamicColorsOptions
 
 @Suppress("unused")
 class SettingsAppearanceFragment : ThreemaPreferenceFragment() {
@@ -52,6 +54,8 @@ class SettingsAppearanceFragment : ThreemaPreferenceFragment() {
         this.showBadge = getPrefOrNull(R.string.preferences__show_unread_badge)
         this.showBadgeChecked = this.showBadge?.isChecked ?: false
 
+        initDynamicColorPref()
+
         initDefaultColoredAvatarPref()
 
         initShowProfilePicPref()
@@ -84,6 +88,36 @@ class SettingsAppearanceFragment : ThreemaPreferenceFragment() {
 
     override fun getPreferenceResource(): Int = R.xml.preference_appearance
 
+    private fun initDynamicColorPref() {
+        if (DynamicColors.isDynamicColorAvailable()) {
+            getPrefOrNull<CheckBoxPreference>(R.string.preferences__dynamic_color)?.apply {
+                onPreferenceChangeListener = Preference.OnPreferenceChangeListener { preference, newValue ->
+                    val newCheckedValue = newValue == true
+
+                    if ((preference as CheckBoxPreference).isChecked != newCheckedValue) {
+                        val dynamicColorsOptions = DynamicColorsOptions.Builder()
+                            .setPrecondition { _, _ -> newCheckedValue }
+                            .build()
+
+                        DynamicColors.applyToActivitiesIfAvailable(requireActivity().application, dynamicColorsOptions)
+
+                        // we need to set the new preference synchronously here because we exit the app before returning the result of this listener
+                        sharedPreferences?.edit()?.putBoolean(getString(R.string.preferences__dynamic_color), newCheckedValue)?.commit()
+
+                        ConfigUtils.recreateActivity(requireActivity())
+                        Runtime.getRuntime().exit(0)
+                    }
+
+                    true
+                }
+            }
+         } else {
+            val preferenceCategory = getPref<PreferenceCategory>("pref_key_appearance_cat")
+            preferenceCategory.removePreference(getPref(resources.getString(R.string.preferences__dynamic_color)))
+        }
+
+    }
+
     private fun initDefaultColoredAvatarPref() {
         getPrefOrNull<CheckBoxPreference>(R.string.preferences__default_contact_picture_colored)?.apply {
             onPreferenceChangeListener = Preference.OnPreferenceChangeListener { preference, newValue ->
@@ -119,8 +153,7 @@ class SettingsAppearanceFragment : ThreemaPreferenceFragment() {
 
     private fun initThemePref() {
         val themePreference = getPref<DropDownPreference>(R.string.preferences__theme)
-        var themeIndex: Int = preferenceManager.sharedPreferences?.getString(resources.getString(R.string.preferences__theme), "0")?.toInt()
-                ?: 0
+        var themeIndex: Int = ConfigUtils.getAppThemePrefsSettings().toInt()
         val themeArray = resources.getStringArray(R.array.list_theme)
 
         if (themeIndex >= themeArray.size) {
@@ -133,11 +166,10 @@ class SettingsAppearanceFragment : ThreemaPreferenceFragment() {
         themePreference.onPreferenceChangeListener = Preference.OnPreferenceChangeListener { preference, newValue ->
             val newTheme = newValue.toString().toInt()
             if (newTheme != oldTheme) {
-                ConfigUtils.setAppTheme(newTheme)
-                StateBitmapUtil.init(ThreemaApplication.getAppContext())
+                ConfigUtils.saveAppThemeToPrefs(newValue.toString(), requireContext())
                 preference.summary = themeArray[newTheme]
                 ListenerManager.contactSettingsListeners.handle { listener -> listener.onAvatarSettingChanged() }
-                ConfigUtils.recreateActivity(activity)
+                activity?.recreate()
             }
             true
         }
diff --git a/app/src/main/java/ch/threema/app/preference/SettingsRateFragment.java b/app/src/main/java/ch/threema/app/preference/SettingsRateFragment.java
index dd94fd0c..294c5d52 100644
--- a/app/src/main/java/ch/threema/app/preference/SettingsRateFragment.java
+++ b/app/src/main/java/ch/threema/app/preference/SettingsRateFragment.java
@@ -69,7 +69,7 @@ public class SettingsRateFragment extends ThreemaPreferenceFragment implements R
 			dialog.show(getParentFragmentManager(), DIALOG_TAG_RATE_ON_GOOGLE_PLAY);
 		} else {
 			Toast.makeText(getAppContext(), getString(R.string.rate_thank_you), Toast.LENGTH_LONG).show();
-			requireActivity().onBackPressed();
+			onBackPressed();
 		}
 	}
 
@@ -79,18 +79,18 @@ public class SettingsRateFragment extends ThreemaPreferenceFragment implements R
 			if (!startRating(Uri.parse("market://details?id=" + BuildConfig.APPLICATION_ID))) {
 				startRating(Uri.parse("https://play.google.com/store/apps/details?id=" + BuildConfig.APPLICATION_ID));
 			}
-			requireActivity().onBackPressed();
+			onBackPressed();
 		}
 	}
 
 	@Override
 	public void onNo(String tag, Object data) {
-		requireActivity().onBackPressed();
+		onBackPressed();
 	}
 
 	@Override
 	public void onCancel(String tag) {
-		requireActivity().onBackPressed();
+		onBackPressed();
 	}
 
 	@Override
@@ -102,4 +102,10 @@ public class SettingsRateFragment extends ThreemaPreferenceFragment implements R
 	public int getPreferenceResource() {
 		return R.xml.preference_rate;
 	}
+
+	private void onBackPressed() {
+		if (getActivity() != null) {
+			getActivity().onBackPressed();
+		}
+	}
 }
diff --git a/app/src/main/java/ch/threema/app/preference/SettingsSecurityFragment.java b/app/src/main/java/ch/threema/app/preference/SettingsSecurityFragment.java
index 4ae21ca6..6a73ebf4 100644
--- a/app/src/main/java/ch/threema/app/preference/SettingsSecurityFragment.java
+++ b/app/src/main/java/ch/threema/app/preference/SettingsSecurityFragment.java
@@ -34,6 +34,13 @@ import android.text.InputType;
 import android.view.View;
 import android.widget.Toast;
 
+import androidx.annotation.NonNull;
+import androidx.biometric.BiometricPrompt;
+import androidx.fragment.app.DialogFragment;
+import androidx.preference.DropDownPreference;
+import androidx.preference.Preference;
+import androidx.preference.TwoStatePreference;
+
 import com.google.android.material.snackbar.Snackbar;
 
 import org.slf4j.Logger;
@@ -41,12 +48,6 @@ import org.slf4j.Logger;
 import java.security.MessageDigest;
 import java.util.Arrays;
 
-import androidx.annotation.NonNull;
-import androidx.biometric.BiometricPrompt;
-import androidx.fragment.app.DialogFragment;
-import androidx.preference.DropDownPreference;
-import androidx.preference.Preference;
-import androidx.preference.TwoStatePreference;
 import ch.threema.app.R;
 import ch.threema.app.ThreemaApplication;
 import ch.threema.app.activities.ThreemaActivity;
@@ -60,7 +61,6 @@ import ch.threema.app.services.DeadlineListService;
 import ch.threema.app.services.PassphraseService;
 import ch.threema.app.services.PreferenceService;
 import ch.threema.app.utils.BiometricUtil;
-import ch.threema.app.utils.ConfigUtils;
 import ch.threema.app.utils.DialogUtil;
 import ch.threema.app.utils.HiddenChatUtil;
 import ch.threema.app.utils.RuntimeUtil;
@@ -113,7 +113,7 @@ public class SettingsSecurityFragment extends ThreemaPreferenceFragment implemen
 		uiLockSwitchPreference.setChecked(preferenceService.isAppLockEnabled());
 
 		CharSequence[] entries = lockMechanismPreference.getEntries();
-		if (Build.VERSION.SDK_INT < Build.VERSION_CODES.M || ConfigUtils.isBlackBerry()) {
+		if (Build.VERSION.SDK_INT < Build.VERSION_CODES.M) {
 			// remove system screen lock option
 			lockMechanismPreference.setEntries(Arrays.copyOf(entries, 2));
 		} else {
diff --git a/app/src/main/java/ch/threema/app/preference/SettingsFragment.kt b/app/src/main/java/ch/threema/app/preference/SettingsSummaryFragment.kt
similarity index 92%
rename from app/src/main/java/ch/threema/app/preference/SettingsFragment.kt
rename to app/src/main/java/ch/threema/app/preference/SettingsSummaryFragment.kt
index e6ec0c24..961cf283 100644
--- a/app/src/main/java/ch/threema/app/preference/SettingsFragment.kt
+++ b/app/src/main/java/ch/threema/app/preference/SettingsSummaryFragment.kt
@@ -22,6 +22,7 @@
 package ch.threema.app.preference
 
 import android.content.Intent
+import android.os.Bundle
 import android.os.Handler
 import android.os.Looper
 import android.view.View
@@ -35,7 +36,7 @@ import ch.threema.app.activities.WorkExplainActivity
 import ch.threema.app.utils.AppRestrictionUtil
 import ch.threema.app.utils.ConfigUtils.*
 
-class SettingsFragment() : ThreemaPreferenceFragment() {
+class SettingsSummaryFragment : ThreemaPreferenceFragment() {
     private var preferencePairs: List<Pair<Preference, String>> = listOf()
     private var selectedPrefView: View? = null
     private val preferenceService = requirePreferenceService()
@@ -44,8 +45,8 @@ class SettingsFragment() : ThreemaPreferenceFragment() {
 
         val preferenceScreen = getPrefOrNull<PreferenceScreen>("pref_screen_header") ?: return
 
-        var voipDisabled = isBlackBerry()
-        if (!voipDisabled && isWorkRestricted()) {
+        var voipDisabled = false
+        if (isWorkRestricted()) {
             val disableCalls = AppRestrictionUtil.getBooleanRestriction(getString(R.string.restriction__disable_calls))
             voipDisabled = disableCalls != null && disableCalls
         }
@@ -94,6 +95,14 @@ class SettingsFragment() : ThreemaPreferenceFragment() {
         }
     }
 
+    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {
+        super.onViewCreated(view, savedInstanceState)
+
+        toolbar?.setNavigationOnClickListener {
+            requireActivity().finish()
+        }
+    }
+
     /**
      * This method sets the background color of the preference header on tablets.
      * The currently selected preference header is marked as selected and the previously selected
@@ -104,10 +113,7 @@ class SettingsFragment() : ThreemaPreferenceFragment() {
      */
     fun onPrefClicked(prefKey: String): Boolean {
         if (isTabletLayout() && isAdded && context != null) {
-            val dark = getAppTheme(requireContext()) == THEME_DARK
-
-            selectedPrefView?.setBackgroundColor(ContextCompat.getColor(requireContext(),
-                    if (dark) R.color.dark_preference_background_color else R.color.preference_background_color))
+            selectedPrefView?.setBackgroundColor(ContextCompat.getColor(requireContext(), android.R.color.transparent))
 
             val index = preferencePairs.map { it.first.key }.indexOf(prefKey)
             if (index < 0) {
@@ -116,8 +122,7 @@ class SettingsFragment() : ThreemaPreferenceFragment() {
 
             val view = activity?.findViewById<LinearLayout>(preferencePairs[index].first.widgetLayoutResource)
             selectedPrefView = (view?.parent as RecyclerView?)?.getChildAt(index)
-            selectedPrefView?.setBackgroundColor(ContextCompat.getColor(requireContext(),
-                    if (dark) R.color.dark_list_item_background_checked else R.color.list_item_background_checked_light))
+            selectedPrefView?.setBackgroundColor(ContextCompat.getColor(requireContext(), R.color.list_item_background_checked))
 
             return selectedPrefView != null
         }
diff --git a/app/src/main/java/ch/threema/app/preference/SettingsTroubleshootingFragment.java b/app/src/main/java/ch/threema/app/preference/SettingsTroubleshootingFragment.java
deleted file mode 100644
index fe585151..00000000
--- a/app/src/main/java/ch/threema/app/preference/SettingsTroubleshootingFragment.java
+++ /dev/null
@@ -1,910 +0,0 @@
-/*  _____ _
- * |_   _| |_  _ _ ___ ___ _ __  __ _
- *   | | | ' \| '_/ -_) -_) '  \/ _` |_
- *   |_| |_||_|_| \___\___|_|_|_\__,_(_)
- *
- * Threema for Android
- * Copyright (c) 2013-2023 Threema GmbH
- *
- * This program is free software: you can redistribute it and/or modify
- * it under the terms of the GNU Affero General Public License, version 3,
- * as published by the Free Software Foundation.
- *
- * This program is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
- * GNU Affero General Public License for more details.
- *
- * You should have received a copy of the GNU Affero General Public License
- * along with this program. If not, see <https://www.gnu.org/licenses/>.
- */
-
-package ch.threema.app.preference;
-
-import android.Manifest;
-import android.annotation.SuppressLint;
-import android.annotation.TargetApi;
-import android.app.Activity;
-import android.content.ActivityNotFoundException;
-import android.content.BroadcastReceiver;
-import android.content.Context;
-import android.content.Intent;
-import android.content.IntentFilter;
-import android.content.SharedPreferences;
-import android.content.pm.PackageManager;
-import android.net.Uri;
-import android.os.AsyncTask;
-import android.os.Build;
-import android.os.Bundle;
-import android.os.Handler;
-import android.provider.Settings;
-import android.text.TextUtils;
-import android.view.View;
-import android.widget.Toast;
-
-import com.google.common.util.concurrent.FutureCallback;
-import com.google.common.util.concurrent.Futures;
-import com.google.common.util.concurrent.ListenableFuture;
-
-import org.slf4j.Logger;
-
-import java.io.File;
-import java.util.Arrays;
-import java.util.Collections;
-import java.util.List;
-
-import androidx.activity.result.ActivityResultLauncher;
-import androidx.activity.result.contract.ActivityResultContracts;
-import androidx.annotation.NonNull;
-import androidx.core.content.ContextCompat;
-import androidx.core.content.IntentCompat;
-import androidx.core.content.PackageManagerCompat;
-import androidx.core.content.UnusedAppRestrictionsConstants;
-import androidx.localbroadcastmanager.content.LocalBroadcastManager;
-import androidx.preference.DropDownPreference;
-import androidx.preference.Preference;
-import androidx.preference.Preference.SummaryProvider;
-import androidx.preference.PreferenceCategory;
-import androidx.preference.PreferenceScreen;
-import androidx.preference.TwoStatePreference;
-import ch.threema.app.BuildConfig;
-import ch.threema.app.BuildFlavor;
-import ch.threema.app.R;
-import ch.threema.app.ThreemaApplication;
-import ch.threema.app.activities.DisableBatteryOptimizationsActivity;
-import ch.threema.app.dialogs.CancelableHorizontalProgressDialog;
-import ch.threema.app.dialogs.GenericAlertDialog;
-import ch.threema.app.dialogs.GenericProgressDialog;
-import ch.threema.app.dialogs.SimpleStringAlertDialog;
-import ch.threema.app.dialogs.TextEntryDialog;
-import ch.threema.app.listeners.ConversationListener;
-import ch.threema.app.managers.ListenerManager;
-import ch.threema.app.managers.ServiceManager;
-import ch.threema.app.messagereceiver.MessageReceiver;
-import ch.threema.app.push.PushService;
-import ch.threema.app.services.ContactService;
-import ch.threema.app.services.DeadlineListService;
-import ch.threema.app.services.FileService;
-import ch.threema.app.services.LifetimeService;
-import ch.threema.app.services.MessageService;
-import ch.threema.app.services.MessageServiceImpl;
-import ch.threema.app.services.NotificationService;
-import ch.threema.app.services.PreferenceService;
-import ch.threema.app.services.RingtoneService;
-import ch.threema.app.services.ThreemaPushService;
-import ch.threema.app.services.UserService;
-import ch.threema.app.services.WallpaperService;
-import ch.threema.app.ui.MediaItem;
-import ch.threema.app.utils.AppRestrictionUtil;
-import ch.threema.app.utils.ConfigUtils;
-import ch.threema.app.utils.DialogUtil;
-import ch.threema.app.utils.MimeUtil;
-import ch.threema.app.utils.PowermanagerUtil;
-import ch.threema.app.utils.PushUtil;
-import ch.threema.app.utils.RuntimeUtil;
-import ch.threema.app.utils.ShareUtil;
-import ch.threema.app.utils.TestUtil;
-import ch.threema.app.voip.activities.WebRTCDebugActivity;
-import ch.threema.app.webclient.activities.WebDiagnosticsActivity;
-import ch.threema.base.utils.LoggingUtil;
-import ch.threema.logging.backend.DebugLogFileBackend;
-import ch.threema.storage.models.ContactModel;
-
-import static ch.threema.app.utils.PowermanagerUtil.RESULT_DISABLE_AUTOSTART;
-import static ch.threema.app.utils.PowermanagerUtil.RESULT_DISABLE_POWERMANAGER;
-
-public class SettingsTroubleshootingFragment extends ThreemaPreferenceFragment implements GenericAlertDialog.DialogClickListener, SharedPreferences.OnSharedPreferenceChangeListener, TextEntryDialog.TextEntryDialogClickListener, CancelableHorizontalProgressDialog.ProgressDialogClickListener {
-	private static final Logger logger = LoggingUtil.getThreemaLogger("SettingsTroubleshootingFragment");
-
-	private static final String DIALOG_TAG_REMOVE_WALLPAPERS = "removeWP";
-	private static final String DIALOG_TAG_PUSH_REGISTER = "pushReg";
-	private static final String DIALOG_TAG_PUSH_RESULT = "pushRes";
-	private static final String DIALOG_TAG_RESET_RINGTONES = "rri";
-	private static final String DIALOG_TAG_IPV6_APP_RESTART = "rs";
-	private static final String DIALOG_TAG_POWERMANAGER_WORKAROUNDS = "hw";
-	private static final String DIALOG_TAG_AUTOSTART_WORKAROUNDS = "as";
-	private static final String DIALOG_TAG_REALLY_ENABLE_THREEMA_PUSH = "enp";
-
-	public static final int REQUEST_ID_DISABLE_BATTERY_OPTIMIZATIONS = 441;
-	public static final int REQUEST_ID_DISABLE_BATTERY_OPTIMIZATIONS_HUAWEI = 442;
-	private static final String DIALOG_TAG_SENDLOG = "sl";
-
-	public static final String THREEMA_SUPPORT_IDENTITY = "*SUPPORT";
-
-	private static final int PERMISSION_REQUEST_MESSAGE_LOG = 1;
-	private static final int PERMISSION_REQUEST_SEND_LOG = 2;
-
-	private TwoStatePreference threemaPushTwoStatePreference;
-	private TwoStatePreference messageLogPreference, ipv6Preferences;
-
-	private WallpaperService wallpaperService;
-	private SharedPreferences sharedPreferences;
-	private PreferenceService preferenceService;
-	private RingtoneService ringtoneService;
-	private NotificationService notificationService;
-	private FileService fileService;
-	private UserService userService;
-	private LifetimeService lifetimeService;
-	private DeadlineListService mutedChatsListService, mentionOnlyChatsListService;
-	private MessageService messageService;
-	private ContactService contactService;
-	private View fragmentView;
-
-	private BroadcastReceiver pushTokenResetBroadcastReceiver;
-
-	private boolean pushServicesInstalled;
-
-	/**
-	 * This activity result launcher is needed to open the settings to disable hibernation.
-	 * Unfortunately the intent cannot be called with {@code startActivity} even if the results are
-	 * not needed.
-	 */
-	private final ActivityResultLauncher<Intent> activityResultLauncher = registerForActivityResult(new ActivityResultContracts.StartActivityForResult(), ignored -> {
-		// results are ignored
-	});
-
-	private final ActivityResultLauncher<String> readPhoneStatePermissionLauncher = registerForActivityResult(new ActivityResultContracts.RequestPermission(), isGranted -> {
-		if (isGranted) {
-			updateReadPhoneStatePermissionPref();
-		} else {
-			Context context = getContext();
-			if (context != null) {
-				ConfigUtils.showPermissionRationale(context, fragmentView, R.string.read_phone_state_short_message);
-			}
-		}
-	});
-
-	@Override
-	protected void initializePreferences() {
-		if (!requiredInstances()) {
-			return;
-		}
-
-		PreferenceScreen preferenceScreen = getPref("pref_key_troubleshooting");
-
-		sharedPreferences = getPreferenceManager().getSharedPreferences();
-		pushServicesInstalled = PushService.servicesInstalled(getContext());
-
-		pushTokenResetBroadcastReceiver = new BroadcastReceiver() {
-			// register listener for gcm registration result
-			@Override
-			public void onReceive(Context context, Intent intent) {
-				DialogUtil.dismissDialog(getParentFragmentManager(), DIALOG_TAG_PUSH_REGISTER, true);
-
-				String message;
-				if (intent.getBooleanExtra(PushUtil.EXTRA_REGISTRATION_ERROR_BROADCAST, false)) {
-					message = getString(R.string.token_register_failed);
-				} else if (intent.getBooleanExtra(PushUtil.EXTRA_CLEAR_TOKEN, false)) {
-					message = getString(R.string.push_token_cleared);
-				} else {
-					message = getString(R.string.push_reset_text);
-				}
-				SimpleStringAlertDialog.newInstance(-1, message).show(getParentFragmentManager(), DIALOG_TAG_PUSH_RESULT);
-			}
-		};
-
-		threemaPushTwoStatePreference = getPref(getResources().getString(R.string.preferences__threema_push_switch));
-		threemaPushTwoStatePreference.setOnPreferenceChangeListener(new Preference.OnPreferenceChangeListener() {
-			public boolean onPreferenceChange(@NonNull Preference preference, Object newValue) {
-				boolean newCheckedValue = newValue.equals(true);
-				if (((TwoStatePreference) preference).isChecked() != newCheckedValue) {
-					if (newCheckedValue) {
-						if (pushServicesInstalled) {
-							GenericAlertDialog dialog = GenericAlertDialog.newInstance(
-								R.string.prefs_title_threema_push_switch,
-								R.string.push_disable_text,
-								R.string.continue_anyway,
-								R.string.cancel
-							);
-							dialog.setTargetFragment(SettingsTroubleshootingFragment.this, 0);
-							dialog.show(getParentFragmentManager(), DIALOG_TAG_REALLY_ENABLE_THREEMA_PUSH);
-							return false;
-						}
-						return true;
-					} else {
-						if (!pushServicesInstalled) {
-							Toast.makeText(getContext(), R.string.play_services_not_installed_unable_to_use_push, Toast.LENGTH_SHORT).show();
-							return false;
-						}
-					}
-				}
-				return true;
-			}
-		});
-
-		messageLogPreference = getPref(getResources().getString(R.string.preferences__message_log_switch));
-		messageLogPreference.setOnPreferenceChangeListener(new Preference.OnPreferenceChangeListener() {
-			@Override
-			public boolean onPreferenceChange(@NonNull Preference preference, Object newValue) {
-				boolean newCheckedValue = newValue.equals(true);
-
-				DebugLogFileBackend.setEnabled(newCheckedValue);
-				if (newCheckedValue) {
-					ThreemaApplication.logVersion();
-				}
-
-				return true;
-			}
-		});
-
-		PreferenceCategory loggingCategory = getPref("pref_key_logging");
-		Preference sendLogPreference = getPref(getResources().getString(R.string.preferences__sendlog));
-		Preference exportLogPreference = getPref(getResources().getString(R.string.preferences__exportlog));
-
-		// Do not show send log preference on on prem builds
-		if (ConfigUtils.isOnPremBuild()) {
-			loggingCategory.removePreference(sendLogPreference);
-
-			// Show share options
-			exportLogPreference.setOnPreferenceClickListener(new Preference.OnPreferenceClickListener() {
-				@Override
-				public boolean onPreferenceClick(@NonNull Preference preference) {
-					ShareUtil.shareLogfile(requireContext(), fileService);
-					return true;
-				}
-			});
-		} else {
-			loggingCategory.removePreference(exportLogPreference);
-			sendLogPreference.setOnPreferenceClickListener(new Preference.OnPreferenceClickListener() {
-				@Override
-				public boolean onPreferenceClick(@NonNull Preference preference) {
-					prepareSendLogfile();
-					return true;
-				}
-			});
-		}
-
-		Preference resetPushPreference = getPref(getResources().getString(R.string.preferences__reset_push));
-		resetPushPreference.setOnPreferenceClickListener(new Preference.OnPreferenceClickListener() {
-			@Override
-			public boolean onPreferenceClick(@NonNull Preference preference) {
-				if (pushServicesInstalled) {
-					PushUtil.clearPushTokenSentDate(getActivity());
-					PushUtil.enqueuePushTokenUpdate(getContext(), false, true);
-					GenericProgressDialog.newInstance(R.string.push_reset_title, R.string.please_wait).showNow(getParentFragmentManager(), DIALOG_TAG_PUSH_REGISTER);
-				}
-				return true;
-			}
-		});
-
-		Preference wallpaperDeletePreferences = getPref(getResources().getString(R.string.preferences__remove_wallpapers));
-		wallpaperDeletePreferences.setOnPreferenceClickListener(new Preference.OnPreferenceClickListener() {
-			@Override
-			public boolean onPreferenceClick(@NonNull Preference preference) {
-				GenericAlertDialog dialog = GenericAlertDialog.newInstance(R.string.prefs_title_remove_wallpapers,
-					R.string.really_remove_wallpapers,
-					R.string.ok,
-					R.string.cancel);
-
-				dialog.setTargetFragment(SettingsTroubleshootingFragment.this, 0);
-				dialog.show(getParentFragmentManager(), DIALOG_TAG_REMOVE_WALLPAPERS);
-				return false;
-			}
-		});
-
-		Preference ringtoneResetPreferences = getPref(getResources().getString(R.string.preferences__reset_ringtones));
-		ringtoneResetPreferences.setOnPreferenceClickListener(new Preference.OnPreferenceClickListener() {
-			@Override
-			public boolean onPreferenceClick(@NonNull Preference preference) {
-				GenericAlertDialog dialog = GenericAlertDialog.newInstance(R.string.prefs_title_reset_ringtones,
-					R.string.really_reset_ringtones,
-					R.string.ok,
-					R.string.cancel);
-
-				dialog.setTargetFragment(SettingsTroubleshootingFragment.this, 0);
-				dialog.show(getParentFragmentManager(), DIALOG_TAG_RESET_RINGTONES);
-				return false;
-			}
-		});
-
-		ipv6Preferences = getPref(getResources().getString(R.string.preferences__ipv6_preferred));
-		ipv6Preferences.setOnPreferenceChangeListener(new Preference.OnPreferenceChangeListener() {
-			public boolean onPreferenceChange(@NonNull Preference preference, Object newValue) {
-
-				boolean newCheckedValue = newValue.equals(true);
-				boolean oldCheckedValue = ((TwoStatePreference) preference).isChecked();
-				if (oldCheckedValue != newCheckedValue) {
-					// value has changed
-					GenericAlertDialog dialog = GenericAlertDialog.newInstance(R.string.prefs_title_ipv6_preferred,
-						R.string.ipv6_requires_restart,
-						R.string.ipv6_restart_now,
-						R.string.cancel);
-
-					dialog.setTargetFragment(SettingsTroubleshootingFragment.this, 0);
-					dialog.setData(oldCheckedValue);
-					dialog.show(getParentFragmentManager(), DIALOG_TAG_IPV6_APP_RESTART);
-					return false;
-				}
-				return true;
-			}
-		});
-
-		Preference powerManagerPrefs = getPref(getResources().getString(R.string.preferences__powermanager_workarounds));
-		if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {
-			powerManagerPrefs.setOnPreferenceClickListener(new Preference.OnPreferenceClickListener() {
-				@Override
-				public boolean onPreferenceClick(@NonNull Preference preference) {
-					if (PowermanagerUtil.hasPowerManagerOption(SettingsTroubleshootingFragment.this.getActivity())) {
-						GenericAlertDialog dialog = GenericAlertDialog.newInstance(R.string.disable_powermanager_title,
-							String.format(getString(R.string.disable_powermanager_explain), getString(R.string.app_name)),
-							R.string.next,
-							R.string.cancel);
-
-						dialog.setTargetFragment(SettingsTroubleshootingFragment.this, 0);
-						dialog.show(getParentFragmentManager(), DIALOG_TAG_POWERMANAGER_WORKAROUNDS);
-					} else {
-						disableAutostart();
-					}
-					return true;
-				}
-			});
-
-			Preference backgroundDataPrefs = getPref(getResources().getString(R.string.preferences__background_data));
-			if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.N) {
-				backgroundDataPrefs.setOnPreferenceClickListener(new Preference.OnPreferenceClickListener() {
-					@TargetApi(Build.VERSION_CODES.N)
-					@Override
-					public boolean onPreferenceClick(@NonNull Preference preference) {
-						Intent intent = new Intent(Settings.ACTION_IGNORE_BACKGROUND_DATA_RESTRICTIONS_SETTINGS);
-						intent.setData(Uri.parse("package:" + BuildConfig.APPLICATION_ID));
-
-						try {
-							startActivity(intent);
-						} catch (ActivityNotFoundException e) {
-							// safety net for incomplete android implementations
-						}
-						return true;
-					}
-				});
-			} else {
-				PreferenceCategory preferenceCategory = getPref("pref_key_fix_device");
-				preferenceCategory.removePreference(backgroundDataPrefs);
-			}
-
-			updatePowerManagerPrefs();
-		} else {
-			PreferenceCategory preferenceCategory = getPref("pref_key_fix_device");
-			preferenceScreen.removePreference(preferenceCategory);
-		}
-
-		final Context context = getContext();
-		if (context != null) {
-			updateHibernationPref(context);
-		} else {
-			try {
-				Preference hibernationPref = getPref(getString(R.string.preferences__hibernation_mode));
-				preferenceScreen.removePreference(hibernationPref);
-			} catch (IllegalArgumentException e) {
-				logger.debug("Unable to remove prefs");
-			}
-		}
-
-		DropDownPreference echoCancelPreference = getPref(getResources().getString(R.string.preferences__voip_echocancel));
-		int echoCancelIndex = preferenceService.getAECMode().equals("sw") ? 1 : 0;
-		final String[] echoCancelArray = getResources().getStringArray(R.array.list_echocancel);
-		final List<String> echoCancelValuesArrayList = Arrays.asList(getResources().getStringArray(R.array.list_echocancel_values));
-
-		echoCancelPreference.setSummary(echoCancelArray[echoCancelIndex]);
-		echoCancelPreference.setOnPreferenceChangeListener(new Preference.OnPreferenceChangeListener() {
-			public boolean onPreferenceChange(@NonNull Preference preference, Object newValue) {
-				preference.setSummary(echoCancelArray[echoCancelValuesArrayList.indexOf(newValue.toString())]);
-				return true;
-			}
-		});
-
-		final Preference webrtcDebugPreference = getPref(getResources().getString(R.string.preferences__webrtc_debug));
-		webrtcDebugPreference.setOnPreferenceClickListener(preference -> {
-			Intent intent = new Intent(getActivity(), WebRTCDebugActivity.class);
-			requireActivity().startActivity(intent);
-			return true;
-		});
-
-		final DropDownPreference videoCodecPreference = findPreference(getResources().getString(R.string.preferences__voip_video_codec));
-		assert videoCodecPreference != null;
-		final String[] videoCodecListDescription = getResources().getStringArray(R.array.list_video_codec);
-		final List<String> videoCodecValuesList = Arrays.asList(getResources().getStringArray(R.array.list_video_codec_values));
-
-		videoCodecPreference.setSummaryProvider((SummaryProvider<DropDownPreference>) preference -> {
-			CharSequence value = preference.getEntry().toString();
-			if (TextUtils.isEmpty(value)) {
-				return videoCodecListDescription[videoCodecValuesList.indexOf(PreferenceService.VIDEO_CODEC_HW)];
-			}
-			return value;
-		});
-
-		final Preference webclientDebugPreference = getPref(getResources().getString(R.string.preferences__webclient_debug));
-		webclientDebugPreference.setOnPreferenceClickListener(preference -> {
-			Intent intent = new Intent(getActivity(), WebDiagnosticsActivity.class);
-			requireActivity().startActivity(intent);
-			return true;
-		});
-
-		if (ConfigUtils.isWorkRestricted() || ConfigUtils.isBlackBerry()) {
-			Boolean value;
-			if (ConfigUtils.isBlackBerry()) {
-				value = true;
-			} else {
-				value = AppRestrictionUtil.getBooleanRestriction(getString(R.string.restriction__disable_calls));
-			}
-
-			if (value != null && value) {
-				PreferenceCategory preferenceCategory = findPreference("pref_key_voip");
-				if (preferenceCategory != null) {
-					preferenceScreen.removePreference(preferenceCategory);
-				}
-			}
-		}
-
-		if (BuildFlavor.forceThreemaPush()) {
-			PreferenceCategory preferenceCategory = findPreference("pref_key_workarounds");
-			if (preferenceCategory != null) {
-				preferenceScreen.removePreference(preferenceCategory);
-			}
-		}
-	}
-
-	@Override
-	public void onResume() {
-		super.onResume();
-
-		updateReadPhoneStatePermissionPref();
-
-		final Context context = getContext();
-		if (context != null) {
-			updateHibernationPref(context);
-		}
-	}
-
-	private void updateReadPhoneStatePermissionPref() {
-		Context context = getContext();
-
-		Preference phonePref = getPrefOrNull(R.string.preferences__grant_read_phone_state_permission);
-		if (phonePref == null) {
-			// This preference is not available if th_disable_calls is set to true
-			return;
-		}
-		if (context != null && ContextCompat.checkSelfPermission(context, Manifest.permission.READ_PHONE_STATE) == PackageManager.PERMISSION_GRANTED) {
-			phonePref.setEnabled(false);
-		} else {
-			phonePref.setEnabled(true);
-			phonePref.setOnPreferenceClickListener(preference -> {
-				Activity activity = getActivity();
-				if (activity == null) {
-					return false;
-				}
-				ConfigUtils.requestReadPhonePermission(activity, readPhoneStatePermissionLauncher);
-				return true;
-			});
-		}
-	}
-
-	/**
-	 * Update the hibernation preference depending on the system settings and android version.
-	 *
-	 * If hibernation is available and can be applied to Threema, the preference is shown and redirects
-	 * the users to the system setting. If hibernation is available on the device but Threema is excluded,
-	 * the preference is shown but disabled. If hibernation is not available on the device, the preference
-	 * isn't shown at all.
-	 *
-	 * @param context the context is needed to read the hibernation setting and to open system settings
-	 */
-	private void updateHibernationPref(@NonNull Context context) {
-		if (Build.VERSION.SDK_INT < Build.VERSION_CODES.N) {
-			// "fix device" settings are not present on older Android versions
-			return;
-		}
-
-		PreferenceCategory fixDeviceCategory = getPref("pref_key_fix_device");
-		final Preference hibernationPref = getPrefOrNull(getString(R.string.preferences__hibernation_mode));
-		if (hibernationPref == null) {
-			return;
-		}
-
-		// Set summary depending on sdk version to match the exact description in settings
-		// Note that on API 31 and 32 the hibernation setting is called differently (even though it is activated!)
-		if (Build.VERSION.SDK_INT <= 32) {
-			hibernationPref.setSummary(R.string.prefs_summary_hibernation_api_32);
-		}
-
-		// Handle the current state of hibernation
-		final ListenableFuture<Integer> future = PackageManagerCompat.getUnusedAppRestrictionsStatus(context);
-		Futures.addCallback(future, new FutureCallback<>() {
-			@Override
-			public void onSuccess(Integer result) {
-				switch (result) {
-					case UnusedAppRestrictionsConstants.DISABLED:
-						// Only Android S and newer have the hibernation mode
-						if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.S) {
-							// Disable hibernation preference if hibernation is explicitly disabled
-							hibernationPref.setEnabled(false);
-							break;
-						}
-						// fall through
-					case UnusedAppRestrictionsConstants.ERROR:
-						// fall through
-					case UnusedAppRestrictionsConstants.FEATURE_NOT_AVAILABLE:
-						// fall through
-					case UnusedAppRestrictionsConstants.API_30_BACKPORT:
-						// fall through
-					case UnusedAppRestrictionsConstants.API_30:
-						// Don't show the hibernation preference when hibernation is not available
-						fixDeviceCategory.removePreference(hibernationPref);
-						break;
-					case UnusedAppRestrictionsConstants.API_31:
-						// In this case hibernation is possible and can be disabled in settings
-						hibernationPref.setEnabled(true);
-						hibernationPref.setOnPreferenceClickListener(preference -> {
-							Intent intent = IntentCompat.createManageUnusedAppRestrictionsIntent(context, context.getPackageName());
-							activityResultLauncher.launch(intent);
-							return true;
-						});
-						break;
-				}
-			}
-
-			@Override
-			public void onFailure(@NonNull Throwable t) {
-				logger.error("Could not get hibernation status", t);
-				fixDeviceCategory.removePreference(hibernationPref);
-			}
-		}, ContextCompat.getMainExecutor(context));
-	}
-
-	private void updatePowerManagerPrefs() {
-		if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {
-			getPref(getResources().getString(R.string.preferences__powermanager_workarounds)).setEnabled(PowermanagerUtil.needsFixing(getActivity()));
-		}
-	}
-
-	final protected boolean requiredInstances() {
-		if (!this.checkInstances()) {
-			this.instantiate();
-		}
-		return this.checkInstances();
-	}
-
-	protected boolean checkInstances() {
-		return TestUtil.required(
-			this.wallpaperService,
-			this.lifetimeService,
-			this.preferenceService,
-			this.fileService,
-			this.userService,
-			this.ringtoneService,
-			this.mutedChatsListService,
-			this.messageService,
-			this.contactService
-		);
-	}
-
-	protected void instantiate() {
-		ServiceManager serviceManager = ThreemaApplication.getServiceManager();
-		if (serviceManager != null) {
-			try {
-				this.wallpaperService = serviceManager.getWallpaperService();
-				this.lifetimeService = serviceManager.getLifetimeService();
-				this.preferenceService = serviceManager.getPreferenceService();
-				this.fileService = serviceManager.getFileService();
-				this.userService = serviceManager.getUserService();
-				this.ringtoneService = serviceManager.getRingtoneService();
-				this.mutedChatsListService = serviceManager.getMutedChatsListService();
-				this.mentionOnlyChatsListService = serviceManager.getMentionOnlyChatsListService();
-				this.messageService = serviceManager.getMessageService();
-				this.contactService = serviceManager.getContactService();
-				this.notificationService = serviceManager.getNotificationService();
-			} catch (Exception e) {
-				logger.error("Exception", e);
-			}
-		}
-	}
-
-	@Override
-	public void onViewCreated(@NonNull View view, Bundle savedInstanceState) {
-		this.fragmentView = view;
-		super.onViewCreated(view, savedInstanceState);
-	}
-
-	@Override
-	public void onYes(String tag, Object data) {
-		switch (tag) {
-			case DIALOG_TAG_REMOVE_WALLPAPERS:
-				wallpaperService.removeAll(getActivity(), false);
-				preferenceService.setCustomWallpaperEnabled(false);
-				break;
-			case DIALOG_TAG_RESET_RINGTONES:
-				ringtoneService.resetRingtones(requireActivity().getApplicationContext());
-				mutedChatsListService.clear();
-				mentionOnlyChatsListService.clear();
-				notificationService.deleteNotificationChannels();
-				notificationService.createNotificationChannels();
-				if (ConfigUtils.isWorkBuild()) {
-					preferenceService.setAfterWorkDNDEnabled(false);
-				}
-				Toast.makeText(requireActivity().getApplicationContext(), getString(R.string.reset_ringtones_confirm), Toast.LENGTH_SHORT).show();
-				ListenerManager.conversationListeners.handle(new ListenerManager.HandleListener<ConversationListener>() {
-					@Override
-					public void handle(ConversationListener listener) {
-						listener.onModifiedAll();
-					}
-				});
-				break;
-			case DIALOG_TAG_IPV6_APP_RESTART:
-				ipv6Preferences.setChecked(!(boolean) data);
-				new Handler().postDelayed(() -> RuntimeUtil.runOnUiThread(() -> System.exit(0)), 700);
-				break;
-			case DIALOG_TAG_AUTOSTART_WORKAROUNDS:
-				PowermanagerUtil.callAutostartManager(this);
-				break;
-			case DIALOG_TAG_POWERMANAGER_WORKAROUNDS:
-				PowermanagerUtil.callPowerManager(this);
-				break;
-			case DIALOG_TAG_REALLY_ENABLE_THREEMA_PUSH:
-				requestDisableBatteryOptimizations(
-					getString(R.string.threema_push),
-					R.string.cancel,
-					REQUEST_ID_DISABLE_BATTERY_OPTIMIZATIONS
-				);
-				break;
-		}
-	}
-
-	private void disableAutostart() {
-		if (PowermanagerUtil.hasAutostartOption(getActivity())) {
-			GenericAlertDialog dialog = GenericAlertDialog.newInstance(R.string.disable_autostart_title,
-				String.format(getString(R.string.disable_autostart_explain), getString(R.string.app_name)),
-				R.string.next,
-				R.string.cancel);
-
-			dialog.setTargetFragment(SettingsTroubleshootingFragment.this, 0);
-			dialog.show(getParentFragmentManager(), DIALOG_TAG_AUTOSTART_WORKAROUNDS);
-		} else {
-			requestDisableBatteryOptimizations(getString(R.string.app_name), R.string.cancel, REQUEST_ID_DISABLE_BATTERY_OPTIMIZATIONS_HUAWEI);
-		}
-	}
-
-	@Override
-	public void onStart() {
-		super.onStart();
-
-		sharedPreferences.registerOnSharedPreferenceChangeListener(this);
-		LocalBroadcastManager.getInstance(requireActivity()).registerReceiver(pushTokenResetBroadcastReceiver,
-			new IntentFilter(ThreemaApplication.INTENT_PUSH_REGISTRATION_COMPLETE));
-	}
-
-	@Override
-	public void onStop() {
-		sharedPreferences.unregisterOnSharedPreferenceChangeListener(this);
-		LocalBroadcastManager.getInstance(requireActivity()).unregisterReceiver(pushTokenResetBroadcastReceiver);
-
-		DialogUtil.dismissDialog(getParentFragmentManager(), DIALOG_TAG_PUSH_REGISTER, true);
-
-		super.onStop();
-	}
-
-	@Override
-	public void onSharedPreferenceChanged(SharedPreferences sharedPreferences, String key) {
-		if (BuildFlavor.forceThreemaPush()) {
-			return;
-		}
-
-		if (key.equals(getString(R.string.preferences__threema_push_switch))) {
-			boolean newValue = sharedPreferences.getBoolean(getString(R.string.preferences__threema_push_switch), false);
-
-			if (!isAdded()) {
-				return;
-			}
-
-			if (pushServicesInstalled) {
-				// remove token silently
-				PushUtil.enqueuePushTokenUpdate(getContext(), newValue, false);
-			}
-
-			if (newValue) {
-				if (ThreemaPushService.tryStart(logger, ThreemaApplication.getAppContext())) {
-					Toast.makeText(getContext(), R.string.threema_push_activated, Toast.LENGTH_LONG).show();
-				} else {
-					logger.info("Unable to activate threema push");
-					threemaPushTwoStatePreference.setChecked(false);
-				}
-			} else {
-				requireActivity().stopService(new Intent(getActivity(), ThreemaPushService.class));
-			}
-		}
-	}
-
-	private void prepareSendLogfile() {
-		TextEntryDialog dialog = TextEntryDialog.newInstance(R.string.prefs_sendlog_summary,
-			R.string.enter_description,
-			R.string.send,
-			R.string.cancel,
-			5,
-			3000,
-			1);
-		dialog.setTargetFragment(this, 0);
-		dialog.show(getParentFragmentManager(), DIALOG_TAG_SENDLOG);
-	}
-
-
-	@SuppressLint("StaticFieldLeak")
-	public void sendLogFileToSupport(final String caption) {
-		new AsyncTask<Void, Void, Exception>() {
-
-			@Override
-			protected void onPreExecute() {
-				GenericProgressDialog.newInstance(R.string.preparing_messages, R.string.please_wait).show(getParentFragmentManager(), DIALOG_TAG_SENDLOG);
-			}
-
-			@Override
-			protected Exception doInBackground(Void... params) {
-				File zipFile = DebugLogFileBackend.getZipFile(fileService);
-
-				try {
-					final ContactModel contactModel = contactService.getOrCreateByIdentity(
-						THREEMA_SUPPORT_IDENTITY, true);
-
-					MessageReceiver receiver = contactService.createReceiver(contactModel);
-
-					messageService.sendText(caption +
-						"\n-- \n" +
-						ConfigUtils.getSupportDeviceInfo(getActivity()) + "\n" +
-						getVersionString() + "\n" +
-						userService.getIdentity(), receiver);
-
-					MediaItem mediaItem = new MediaItem(Uri.fromFile(zipFile), MediaItem.TYPE_FILE);
-					mediaItem.setFilename(zipFile.getName());
-					mediaItem.setMimeType(MimeUtil.MIME_TYPE_ZIP);
-
-					messageService.sendMediaAsync(Collections.singletonList(mediaItem),
-						Collections.singletonList(receiver), new MessageServiceImpl.SendResultListener() {
-							@Override
-							public void onError(String errorMessage) {
-								RuntimeUtil.runOnUiThread(() -> Toast.makeText(getContext(), R.string.an_error_occurred_during_send, Toast.LENGTH_LONG).show());
-							}
-
-							@Override
-							public void onCompleted() {
-								RuntimeUtil.runOnUiThread(() -> Toast.makeText(getContext(), R.string.message_sent, Toast.LENGTH_LONG).show());
-							}
-						});
-				} catch (Exception e) {
-					return e;
-				}
-				return null;
-			}
-
-			@Override
-			protected void onPostExecute(Exception exception) {
-				if (isAdded()) {
-					DialogUtil.dismissDialog(getParentFragmentManager(), DIALOG_TAG_SENDLOG, true);
-
-					if (exception != null) {
-						Toast.makeText(requireActivity().getApplicationContext(), R.string.an_error_occurred, Toast.LENGTH_LONG).show();
-					} else {
-						Toast.makeText(requireActivity().getApplicationContext(), R.string.message_sent, Toast.LENGTH_LONG).show();
-					}
-				}
-			}
-		}.execute();
-	}
-
-	@Override
-	public void onActivityResult(int requestCode, int resultCode, Intent data) {
-		switch (requestCode) {
-			case REQUEST_ID_DISABLE_BATTERY_OPTIMIZATIONS:
-				threemaPushTwoStatePreference.setChecked(resultCode == Activity.RESULT_OK);
-				break;
-			case REQUEST_ID_DISABLE_BATTERY_OPTIMIZATIONS_HUAWEI:
-				updatePowerManagerPrefs();
-				break;
-			case RESULT_DISABLE_POWERMANAGER:
-				disableAutostart();
-				updatePowerManagerPrefs();
-				break;
-			case RESULT_DISABLE_AUTOSTART:
-				requestDisableBatteryOptimizations(getString(R.string.app_name), R.string.cancel, REQUEST_ID_DISABLE_BATTERY_OPTIMIZATIONS_HUAWEI);
-				updatePowerManagerPrefs();
-				break;
-			default:
-				super.onActivityResult(requestCode, resultCode, data);
-				break;
-		}
-	}
-
-	@NonNull
-	private String getVersionString() {
-		StringBuilder builder = new StringBuilder();
-		builder.append(ConfigUtils.getAppVersion(requireActivity()));
-		if (BuildConfig.DEBUG) {
-			builder.append(" (Commit ");
-			builder.append(BuildConfig.GIT_HASH);
-			builder.append(")");
-		}
-		return builder.toString();
-	}
-
-	/**
-	 * Request disabling of battery optimizations.
-	 *
-	 * @param name The name of the component. This will be used in messages like
-	 *             "Battery optimizations prevent X from working properly".
-	 */
-	private void requestDisableBatteryOptimizations(@NonNull String name, int label, int requestId) {
-		final Intent intent = new Intent(getActivity(), DisableBatteryOptimizationsActivity.class);
-		intent.putExtra(DisableBatteryOptimizationsActivity.EXTRA_NAME, name);
-		intent.putExtra(DisableBatteryOptimizationsActivity.EXTRA_CANCEL_LABEL, label);
-		startActivityForResult(intent, requestId);
-	}
-
-	@Override
-	public void onRequestPermissionsResult(int requestCode,
-	                                       @NonNull String[] permissions, @NonNull int[] grantResults) {
-		boolean result = (grantResults.length > 0 && grantResults[0] == PackageManager.PERMISSION_GRANTED);
-
-		switch (requestCode) {
-			case PERMISSION_REQUEST_MESSAGE_LOG:
-				DebugLogFileBackend.setEnabled(result);
-				messageLogPreference.setChecked(result);
-				break;
-			case PERMISSION_REQUEST_SEND_LOG:
-				if (result) {
-					prepareSendLogfile();
-				}
-				break;
-		}
-	}
-
-	@Override
-	public void onYes(String tag, String text) {
-		sendLogFileToSupport(text);
-	}
-
-	@Override
-	public void onNo(String tag) {
-	}
-
-	@Override
-	public void onNo(String tag, Object data) {
-		if (DIALOG_TAG_IPV6_APP_RESTART.equals(tag)) {
-			boolean oldValue = (boolean) data;
-			ipv6Preferences.setChecked(oldValue);
-		}
-	}
-
-	@Override
-	public void onNeutral(String tag) {
-	}
-
-	@Override
-	public void onCancel(String tag, Object object) {
-	}
-
-	@Override
-	protected int getPreferenceTitleResource() {
-		return R.string.prefs_troubleshooting;
-	}
-
-	@Override
-	public int getPreferenceResource() {
-		return R.xml.preference_troubleshooting;
-	}
-}
diff --git a/app/src/main/java/ch/threema/app/preference/ThreemaPreferenceFragment.kt b/app/src/main/java/ch/threema/app/preference/ThreemaPreferenceFragment.kt
index 4394358e..44b92eb5 100644
--- a/app/src/main/java/ch/threema/app/preference/ThreemaPreferenceFragment.kt
+++ b/app/src/main/java/ch/threema/app/preference/ThreemaPreferenceFragment.kt
@@ -21,9 +21,20 @@
 
 package ch.threema.app.preference
 
+import android.annotation.SuppressLint
+import android.os.Build
 import android.os.Bundle
+import android.util.TypedValue
+import android.view.View
+import android.widget.TextView
 import androidx.annotation.StringRes
 import androidx.annotation.XmlRes
+import androidx.appcompat.app.ActionBar
+import androidx.appcompat.app.AppCompatActivity
+import androidx.core.content.ContextCompat
+import androidx.core.widget.NestedScrollView
+import androidx.fragment.app.DialogFragment
+import androidx.preference.MultiSelectListPreference
 import androidx.preference.Preference
 import androidx.preference.PreferenceFragmentCompat
 import ch.threema.app.R
@@ -31,31 +42,66 @@ import ch.threema.app.ThreemaApplication
 import ch.threema.app.services.*
 import ch.threema.app.services.license.LicenseService
 import ch.threema.app.utils.ConfigUtils
+import ch.threema.app.utils.ConnectionIndicatorUtil
+import ch.threema.app.utils.RuntimeUtil
 import ch.threema.base.utils.LoggingUtil
+import ch.threema.domain.protocol.csp.connection.ConnectionState
+import ch.threema.domain.protocol.csp.connection.ConnectionStateListener
+import ch.threema.domain.protocol.csp.connection.ThreemaConnection
+import com.google.android.material.appbar.AppBarLayout
+import com.google.android.material.appbar.MaterialToolbar
+import java.net.InetSocketAddress
 
 private val logger = LoggingUtil.getThreemaLogger("ThreemaPreferenceFragment")
 
 /**
  * This fragment provides some tool bar functionality and manages loading the resources.
  */
-abstract class ThreemaPreferenceFragment : PreferenceFragmentCompat() {
+@SuppressLint("NewApi")
+abstract class ThreemaPreferenceFragment : PreferenceFragmentCompat(), ConnectionStateListener {
+    private var colorTransparent = 0
+    private var initialized = false
+
+    var settingsScrollView: NestedScrollView? = null
+    var appBar: AppBarLayout? = null
+    var toolbar: MaterialToolbar? = null
+    var toolbarTitle: TextView? = null
+    var title: TextView? = null
+    var connectionIndicator: View? = null
+    var threemaConnection: ThreemaConnection? = null
 
     override fun onCreatePreferences(savedInstanceState: Bundle?, rootKey: String?) {
+        initialized = true
+
         setPreferencesFromResource(getPreferenceResource(), rootKey)
 
         initializePreferences()
     }
 
     override fun onResume() {
+        threemaConnection?.let {
+            it.addConnectionStateListener(this)
+            val connectionState: ConnectionState = it.getConnectionState()
+            ConnectionIndicatorUtil.getInstance().updateConnectionIndicator(connectionIndicator, connectionState)
+
+        }
+
         super.onResume()
 
-        activity.also {
-            if (it is SettingsActivity) {
-                it.setActionBarTitle(if (ConfigUtils.isTabletLayout()) R.string.menu_settings else getPreferenceTitleResource())
+        activity.apply {
+            if (this is SettingsActivity) {
+                setActionBarTitle(if (ConfigUtils.isTabletLayout()) R.string.menu_settings else getPreferenceTitleResource())
             }
         }
     }
 
+   @SuppressLint("WrongThread")
+   override fun onPause() {
+       threemaConnection?.removeConnectionStateListener(this)
+
+       super.onPause()
+    }
+
     /**
      * This method must be overridden to provide the action bar title of the preference category.
      */
@@ -175,4 +221,124 @@ abstract class ThreemaPreferenceFragment : PreferenceFragmentCompat() {
         throw IllegalArgumentException("No preference '$pref' found")
     }
 
+    override fun onCreate(savedInstanceState: Bundle?) {
+        super.onCreate(savedInstanceState)
+
+        try {
+            threemaConnection = ThreemaApplication.getServiceManager()?.getConnection()
+        } catch (e: java.lang.Exception) {
+            // ignore
+        }
+    }
+
+    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {
+        super.onViewCreated(view, savedInstanceState)
+
+        settingsScrollView = view.findViewById(R.id.settings_contents_view)
+        toolbar = view.findViewById(R.id.toolbar)
+        toolbarTitle = view.findViewById(R.id.toolbar_title)
+        title = view.findViewById(R.id.title_text_view)
+        connectionIndicator = view.findViewById(R.id.connection_indicator)
+        appBar = view.findViewById(R.id.appbar)
+        appBar?.setLiftable(true)
+
+        setTitle(getPreferenceTitleResource())
+
+        colorTransparent = ContextCompat.getColor(requireContext(), android.R.color.transparent)
+
+        (activity as AppCompatActivity?)!!.setSupportActionBar(toolbar)
+        val ab: ActionBar? = (activity as AppCompatActivity?)!!.supportActionBar
+
+        if (ab != null) {
+            if (!ConfigUtils.isTabletLayout() || this is SettingsSummaryFragment) {
+                ab.setDisplayHomeAsUpEnabled(true)
+                toolbar?.setNavigationOnClickListener {
+                    if (requireActivity().supportFragmentManager.backStackEntryCount > 0) {
+                        requireActivity().supportFragmentManager.popBackStack()
+                    } else {
+                        requireActivity().finish();
+                    }
+                }
+            } else {
+                toolbar?.visibility = View.INVISIBLE
+            }
+        }
+
+        settingsScrollView?.let {
+            if (initialized) {
+                it.post {
+                    it.scrollTo(0, 0)
+                }
+            }
+            initialized = false
+            toolbarTitle?.alpha = 0f
+            if (Build.VERSION.SDK_INT >= 24 && !ConfigUtils.isTabletLayout()) {
+                it.setOnScrollChangeListener { _, _, _, _, _ ->
+                    setToolbarColor()
+                }
+            }
+        }
+
+        listView?.let {
+            it.setPadding(listView.paddingLeft, listView.paddingTop, listView.paddingRight, listView.paddingBottom +
+                    TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP, 48F, context?.resources?.displayMetrics).toInt()
+            )
+            it.clipToPadding = false;
+        }
+    }
+
+    private fun setToolbarColor() {
+        val titleLocation = IntArray(2)
+        title?.let {
+            it.getLocationInWindow(titleLocation)
+            val toolbarLocation = IntArray(2)
+            toolbar?.let { materialToolbar ->
+                materialToolbar.getLocationInWindow(toolbarLocation)
+                val currentTitleTop = titleLocation[1] + it.paddingTop;
+
+                val titleFadeOutStart = toolbarLocation[1] + materialToolbar.height + (it.paddingTop / 2);
+                val titleFadeOutEnd = toolbarLocation[1] + materialToolbar.height - it.height + it.paddingTop + it.paddingBottom + (it.paddingTop / 4)
+
+                val toolbarFadeInStart = titleFadeOutEnd
+                val toolbarFadeInEnd = toolbarFadeInStart - (materialToolbar.height / 2)
+
+                val titleAlpha = 1F - ((titleFadeOutStart - currentTitleTop).toFloat() / (titleFadeOutStart - titleFadeOutEnd).toFloat())
+                val toolbarAlpha = (toolbarFadeInStart - currentTitleTop).toFloat() /  (toolbarFadeInStart - toolbarFadeInEnd).toFloat()
+                it.alpha = titleAlpha
+                toolbarTitle?.alpha = toolbarAlpha
+
+                appBar?.isLifted = titleLocation[1] <= materialToolbar.height
+            }
+        }
+    }
+
+    open fun setTitle(title: CharSequence?) {
+        this.title?.text = title
+        toolbarTitle?.text = title
+    }
+
+    open fun setTitle(stringRes: Int) {
+        title?.setText(stringRes)
+        toolbarTitle?.setText(stringRes)
+    }
+
+    /**
+     * Hack to style MultiSelectPreferences as Material Dialogs
+     */
+    override fun onDisplayPreferenceDialog(preference: Preference) {
+        if (preference is MultiSelectListPreference) {
+            val dialogFragment: DialogFragment = MaterialMultiSelectListPreference()
+            val bundle = Bundle(1)
+            bundle.putString("key", preference.getKey())
+            dialogFragment.arguments = bundle
+            dialogFragment.setTargetFragment(this, 0)
+            dialogFragment.show(parentFragmentManager, "androidx.preference.PreferenceFragment.DIALOG")
+        } else {
+            super.onDisplayPreferenceDialog(preference)
+        }
+    }
+
+    override fun updateConnectionState(connectionState: ConnectionState?, socketAddress: InetSocketAddress?) {
+        RuntimeUtil.runOnUiThread { ConnectionIndicatorUtil.getInstance().updateConnectionIndicator(connectionIndicator, connectionState) }
+    }
 }
diff --git a/app/src/main/java/ch/threema/app/processors/MessageAckProcessor.java b/app/src/main/java/ch/threema/app/processors/MessageAckProcessor.java
index 43d16312..c6071e9f 100644
--- a/app/src/main/java/ch/threema/app/processors/MessageAckProcessor.java
+++ b/app/src/main/java/ch/threema/app/processors/MessageAckProcessor.java
@@ -23,6 +23,7 @@ package ch.threema.app.processors;
 
 import org.slf4j.Logger;
 
+import java.util.Date;
 import java.util.LinkedList;
 import java.util.List;
 
@@ -32,6 +33,7 @@ import ch.threema.base.utils.LoggingUtil;
 import ch.threema.domain.models.MessageId;
 import ch.threema.domain.models.QueueMessageId;
 import ch.threema.domain.protocol.csp.connection.MessageAckListener;
+import ch.threema.storage.models.AbstractMessageModel;
 import ch.threema.storage.models.MessageState;
 
 /**
@@ -51,6 +53,7 @@ public class MessageAckProcessor implements MessageAckListener {
 
 	@Override
 	public void processAck(@NonNull QueueMessageId queueMessageId) {
+		final long ackReceivedAt = new Date().getTime();
 		logger.info(
 			"Processing server ack for message ID {} from {}",
 			queueMessageId.getMessageId(),
@@ -65,11 +68,16 @@ public class MessageAckProcessor implements MessageAckListener {
 		}
 
 		if (this.messageService != null) {
-			this.messageService.updateMessageStateForOutgoingMessage(
+			final AbstractMessageModel updatedMessage = this.messageService.updateMessageStateForOutgoingMessage(
 				queueMessageId.getMessageId(),
 				MessageState.SENT,
-				null
+				null,
+				queueMessageId.getRecipientId()
 			);
+			if (updatedMessage != null && updatedMessage.getCreatedAt() != null) {
+				long elapsedMs = ackReceivedAt - updatedMessage.getCreatedAt().getTime();
+				logger.info("Outgoing message acknowledged RTT: {}ms", elapsedMs);
+			}
 		}
 	}
 
diff --git a/app/src/main/java/ch/threema/app/processors/MessageProcessor.java b/app/src/main/java/ch/threema/app/processors/MessageProcessor.java
index f0105b8e..aad43f95 100644
--- a/app/src/main/java/ch/threema/app/processors/MessageProcessor.java
+++ b/app/src/main/java/ch/threema/app/processors/MessageProcessor.java
@@ -32,6 +32,7 @@ import java.util.ArrayList;
 import java.util.Iterator;
 import java.util.List;
 
+import ch.threema.app.exceptions.NotAllowedException;
 import ch.threema.app.services.ContactService;
 import ch.threema.app.services.FileService;
 import ch.threema.app.services.GroupService;
@@ -49,6 +50,7 @@ import ch.threema.app.voip.groupcall.GroupCallManager;
 import ch.threema.app.voip.services.VoipStateService;
 import ch.threema.base.utils.LoggingUtil;
 import ch.threema.base.utils.Utils;
+import ch.threema.domain.models.Contact;
 import ch.threema.domain.models.MessageId;
 import ch.threema.domain.protocol.csp.ProtocolDefines;
 import ch.threema.domain.protocol.csp.coders.MessageBox;
@@ -58,9 +60,9 @@ import ch.threema.domain.protocol.csp.fs.ForwardSecurityMessageProcessor;
 import ch.threema.domain.protocol.csp.messages.AbstractGroupMessage;
 import ch.threema.domain.protocol.csp.messages.AbstractMessage;
 import ch.threema.domain.protocol.csp.messages.BadMessageException;
-import ch.threema.domain.protocol.csp.messages.ContactDeletePhotoMessage;
-import ch.threema.domain.protocol.csp.messages.ContactRequestPhotoMessage;
-import ch.threema.domain.protocol.csp.messages.ContactSetPhotoMessage;
+import ch.threema.domain.protocol.csp.messages.ContactDeleteProfilePictureMessage;
+import ch.threema.domain.protocol.csp.messages.ContactRequestProfilePictureMessage;
+import ch.threema.domain.protocol.csp.messages.ContactSetProfilePictureMessage;
 import ch.threema.domain.protocol.csp.messages.DeliveryReceiptMessage;
 import ch.threema.domain.protocol.csp.messages.GroupCreateMessage;
 import ch.threema.domain.protocol.csp.messages.GroupDeletePhotoMessage;
@@ -84,10 +86,12 @@ import ch.threema.domain.protocol.csp.messages.voip.VoipICECandidatesMessage;
 import ch.threema.domain.protocol.csp.messages.voip.VoipMessage;
 import ch.threema.domain.stores.ContactStore;
 import ch.threema.domain.stores.IdentityStoreInterface;
-import ch.threema.storage.models.GroupModel;
 import ch.threema.storage.models.MessageState;
 import ch.threema.storage.models.ServerMessageModel;
 
+import static ch.threema.app.services.GroupService.CommonGroupReceiveStepsResult.SUCCESS;
+import static ch.threema.app.services.GroupService.CommonGroupReceiveStepsResult.SYNC_REQUEST_SENT;
+
 public class MessageProcessor implements MessageProcessorInterface {
 	private static final Logger logger = LoggingUtil.getThreemaLogger("MessageProcessor");
 
@@ -143,6 +147,7 @@ public class MessageProcessor implements MessageProcessorInterface {
 		this.groupCallManager = groupCallManager;
 	}
 
+	@NonNull
 	@Override
 	@WorkerThread
 	public ProcessIncomingResult processIncomingMessage(MessageBox boxmsg) {
@@ -158,12 +163,6 @@ public class MessageProcessor implements MessageProcessorInterface {
 			MessageCoder messageCoder = new MessageCoder( this.contactStore, this.identityStore);
 			msg = messageCoder.decode(boxmsg, fetchKeyIfMissing);
 
-			if (msg == null) {
-				logger.warn("Message {} from {} error: decodeFromBox failed",
-					boxmsg.getMessageId(), boxmsg.getFromIdentity());
-				return ProcessIncomingResult.failed();
-			}
-
 			if (logger.isInfoEnabled()) {
 				logger.info(
 					"Incoming message {} from {} to {} (type {})",
@@ -179,33 +178,42 @@ public class MessageProcessor implements MessageProcessorInterface {
 				if (this.blackListService != null && this.blackListService.has(msg.getFromIdentity())) {
 					logger.debug("Direct message from {}: Contact blacklisted. Ignoring", msg.getFromIdentity());
 					//ignore message of blacklisted member
-					return ProcessIncomingResult.ignore();
+					return ProcessIncomingResult.processed(msg.getType());
 				}
 			}
 
 			this.contactService.setActive(msg.getFromIdentity());
 
-			if (msg instanceof TypingIndicatorMessage) {
-				return processTypingIndicatorMessage((TypingIndicatorMessage) msg);
-			} else if (msg instanceof DeliveryReceiptMessage) {
-				return processDeliveryReceiptMessage((DeliveryReceiptMessage)msg);
-			} else if (msg instanceof GroupDeliveryReceiptMessage) {
-				return processGroupDeliveryReceiptMessage((GroupDeliveryReceiptMessage)msg);
-			} else if (msg instanceof ForwardSecurityEnvelopeMessage) {
+			if (msg instanceof ForwardSecurityEnvelopeMessage) {
 				if (!ConfigUtils.isForwardSecurityEnabled()) {
 					logger.debug("PFS is disabled in build");
-					return ProcessIncomingResult.ignore();
+					return ProcessIncomingResult.processed(msg.getType());
 				}
 
 				// Decapsulate PFS message
-				AbstractMessage decapMessage = forwardSecurityMessageProcessor.processEnvelopeMessage(this.contactService.getByIdentity(msg.getFromIdentity()), (ForwardSecurityEnvelopeMessage) msg);
+				final Contact contact = this.contactService.getByIdentity(msg.getFromIdentity());
+				if (contact == null) {
+					logger.debug("Ignoring FS message from unknown identity {}", msg.getFromIdentity());
+					return ProcessIncomingResult.processed();
+				}
+				AbstractMessage decapMessage = forwardSecurityMessageProcessor.processEnvelopeMessage(contact, (ForwardSecurityEnvelopeMessage) msg);
 				if (decapMessage != null) {
 					// Replace current abstract message with decapsulated version
 					msg = decapMessage;
 				} else {
 					// Control message processed; nothing left to do
-					return ProcessIncomingResult.ignore();
+					return ProcessIncomingResult.processed();
 				}
+			} else {
+				forwardSecurityMessageProcessor.warnIfMessageWithoutForwardSecurityReceived(msg);
+			}
+
+			if (msg instanceof TypingIndicatorMessage) {
+				return processTypingIndicatorMessage((TypingIndicatorMessage) msg);
+			} else if (msg instanceof DeliveryReceiptMessage) {
+				return processDeliveryReceiptMessage((DeliveryReceiptMessage)msg);
+			} else if (msg instanceof GroupDeliveryReceiptMessage) {
+				return processGroupDeliveryReceiptMessage((GroupDeliveryReceiptMessage)msg);
 			}
 
 			/* send delivery receipt (but not for non-queued messages or delivery receipts) */
@@ -221,7 +229,7 @@ public class MessageProcessor implements MessageProcessorInterface {
 					)
 				) {
 					logger.info("Message {} discarded - from hidden contact with block unknown enabled", boxmsg.getMessageId());
-					return ProcessIncomingResult.ignore();
+					return ProcessIncomingResult.processed(msg.getType());
 				}
 
 				switch(this.processAbstractMessage(msg)) {
@@ -231,21 +239,21 @@ public class MessageProcessor implements MessageProcessorInterface {
 					case FAILED:
 						return ProcessIncomingResult.failed();
 					case IGNORED:
-						return ProcessIncomingResult.ignore();
+						return ProcessIncomingResult.processed(msg.getType());
 				}
 			}
 
-			return ProcessIncomingResult.ok(msg);
+			return ProcessIncomingResult.processed(msg.getType());
 
 		} catch (MissingPublicKeyException e) {
 			if(this.preferenceService.isBlockUnknown()) {
 				//its ok, return true and save nothing
-				return ProcessIncomingResult.ignore();
+				return ProcessIncomingResult.processed();
 			}
 
 			if(this.blackListService != null && this.blackListService.has(boxmsg.getFromIdentity())) {
 				//its ok, a black listed identity, save NOTHING
-				return ProcessIncomingResult.ignore();
+				return ProcessIncomingResult.processed();
 			}
 
 			logger.error("Missing public key", e);
@@ -253,11 +261,8 @@ public class MessageProcessor implements MessageProcessorInterface {
 
 		} catch (BadMessageException e) {
 			logger.error("Bad message", e);
-			if (e.shouldDrop()) {
-				logger.warn("Message {} error: invalid - dropping msg.", boxmsg.getMessageId());
-				return ProcessIncomingResult.ignore();
-			}
-			return ProcessIncomingResult.failed();
+			logger.warn("Message {} error: invalid - dropping msg.", boxmsg.getMessageId());
+			return ProcessIncomingResult.processed();
 
 		} catch (Exception e) {
 			logger.error("Unknown exception while processing BoxedMessage", e);
@@ -265,14 +270,13 @@ public class MessageProcessor implements MessageProcessorInterface {
 		}
 	}
 
-	private ProcessIncomingResult processTypingIndicatorMessage(TypingIndicatorMessage msg) {
+	private ProcessIncomingResult processTypingIndicatorMessage(@NonNull TypingIndicatorMessage msg) {
 		if (this.contactService.getByIdentity(msg.getFromIdentity()) != null) {
 			this.contactService.setIsTyping(msg.getFromIdentity(), msg.isTyping());
-			return ProcessIncomingResult.ok(msg);
 		} else {
 			logger.debug("Ignoring typing indicator message from unknown identity {}", msg.getFromIdentity());
-			return ProcessIncomingResult.ignore();
 		}
+		return ProcessIncomingResult.processed(msg.getType());
 	}
 
 	private ProcessIncomingResult processDeliveryReceiptMessage(@NonNull DeliveryReceiptMessage msg) {
@@ -302,11 +306,10 @@ public class MessageProcessor implements MessageProcessorInterface {
 				logger.info("Message {}: delivery receipt for {} (state = {})", msg.getMessageId(), msgId, state);
 				this.messageService.updateMessageState(msgId, state, msg);
 			}
-			return ProcessIncomingResult.ok(msg);
 		} else {
 			logger.warn("Message {} error: unknown delivery receipt type", msg.getMessageId());
 		}
-		return ProcessIncomingResult.ignore();
+		return ProcessIncomingResult.processed(msg.getType());
 	}
 
 	private ProcessIncomingResult processGroupDeliveryReceiptMessage(@NonNull GroupDeliveryReceiptMessage msg) {
@@ -323,15 +326,23 @@ public class MessageProcessor implements MessageProcessorInterface {
 				break;
 		}
 		if (state != null) {
+			if (groupService.runCommonGroupReceiveSteps(msg) != SUCCESS) {
+				// If the common group receive steps did not succeed, ignore this delivery receipt
+				return ProcessIncomingResult.processed(msg.getType());
+			}
 			for (MessageId msgId : msg.getReceiptMessageIds()) {
 				logger.info("Message {}: group delivery receipt for {} (state = {})", msg.getMessageId(), msgId, state);
 				this.messageService.updateGroupMessageState(msgId, state, msg);
 			}
-			return ProcessIncomingResult.ok(msg);
 		} else {
 			logger.warn("Message {} error: unknown or unsupported delivery receipt type", msg.getMessageId());
 		}
-		return ProcessIncomingResult.ignore();
+		return ProcessIncomingResult.processed(msg.getType());
+	}
+
+	private boolean processBallotVoteInterface(BallotVoteInterface msg) throws NotAllowedException {
+		BallotVoteResult r = this.ballotService.vote(msg);
+		return r != null && r.isSuccess();
 	}
 
 	/**
@@ -360,11 +371,6 @@ public class MessageProcessor implements MessageProcessorInterface {
 
 			boolean processingSuccessful = false;
 
-			if(msg instanceof BallotVoteInterface) {
-				BallotVoteResult r = this.ballotService.vote((BallotVoteInterface) msg);
-				return (r != null && r.isSuccess()) ? ProcessingResult.SUCCESS : ProcessingResult.FAILED;
-			}
-
 			if(msg instanceof AbstractGroupMessage) {
 				if(msg instanceof GroupCreateMessage) {
 					//new group or sync it!
@@ -396,13 +402,25 @@ public class MessageProcessor implements MessageProcessorInterface {
 					processingSuccessful = result.success();
 				}
 				else if(msg instanceof GroupRenameMessage) {
-					processingSuccessful = this.groupService.renameGroup((GroupRenameMessage)msg);
+					if (groupService.runCommonGroupReceiveSteps((AbstractGroupMessage) msg) == SUCCESS) {
+						processingSuccessful = this.groupService.renameGroup((GroupRenameMessage)msg);
+					} else {
+						return ProcessingResult.IGNORED;
+					}
 				}
 				else if(msg instanceof GroupSetPhotoMessage) {
-					processingSuccessful = this.groupService.updateGroupPhoto((GroupSetPhotoMessage) msg);
+					if (groupService.runCommonGroupReceiveSteps((AbstractGroupMessage) msg) == SUCCESS) {
+						processingSuccessful = this.groupService.updateGroupPhoto((GroupSetPhotoMessage) msg);
+					} else {
+						return ProcessingResult.IGNORED;
+					}
 				}
 				else if(msg instanceof GroupDeletePhotoMessage) {
-					processingSuccessful = this.groupService.deleteGroupPhoto((GroupDeletePhotoMessage) msg);
+					if (groupService.runCommonGroupReceiveSteps((AbstractGroupMessage) msg) == SUCCESS) {
+						processingSuccessful = this.groupService.deleteGroupPhoto((GroupDeletePhotoMessage) msg);
+					} else {
+						return ProcessingResult.IGNORED;
+					}
 				}
 				else if(msg instanceof GroupLeaveMessage) {
 					processingSuccessful = this.groupService.removeMemberFromGroup((GroupLeaveMessage) msg);
@@ -411,35 +429,30 @@ public class MessageProcessor implements MessageProcessorInterface {
 					processingSuccessful = this.groupService.processRequestSync((GroupRequestSyncMessage) msg);
 				}
 				else if (msg instanceof GroupCallControlMessage) {
-					processingSuccessful = groupCallManager.handleControlMessage((GroupCallControlMessage) msg);
-				}
-				else {
-					GroupModel groupModel = this.groupService.getGroup((AbstractGroupMessage)msg);
-
-					//group model not found
-					if(groupModel == null
-							//or i am not a member of this group
-							|| !this.groupService.isGroupMember(groupModel)) {
-						//if the request sync process ok, ack the message
-						if(this.groupService.requestSync((AbstractGroupMessage)msg, true)) {
-							//save message in cache
-							synchronized (this.pendingMessages) {
-								this.pendingMessages.add(msg);
-							}
-
-							return ProcessingResult.SUCCESS;
-						}
-						return ProcessingResult.FAILED;
+					if (groupService.runCommonGroupReceiveSteps((AbstractGroupMessage) msg) == SUCCESS) {
+						processingSuccessful = groupCallManager.handleControlMessage((GroupCallControlMessage) msg);
+					} else {
+						return ProcessingResult.IGNORED;
 					}
-					else if(groupModel.isDeleted()) {
-						//send leave message
-						this.groupService.sendLeave((AbstractGroupMessage)msg);
-
-						//ack every time!
-						return ProcessingResult.SUCCESS;
+				}
+				else if (msg instanceof BallotVoteInterface) {
+					if (groupService.runCommonGroupReceiveSteps((AbstractGroupMessage) msg) == SUCCESS) {
+						processingSuccessful = processBallotVoteInterface((BallotVoteInterface) msg);
+					} else {
+						return ProcessingResult.IGNORED;
 					}
-					else {
+				}
+				else {
+					GroupService.CommonGroupReceiveStepsResult result = groupService.runCommonGroupReceiveSteps((AbstractGroupMessage) msg);
+					if (result == SUCCESS) {
 						processingSuccessful = this.messageService.processIncomingGroupMessage((AbstractGroupMessage) msg);
+					} else if (result == SYNC_REQUEST_SENT) {
+						synchronized (pendingMessages) {
+							pendingMessages.add(msg);
+						}
+						processingSuccessful = true;
+					} else {
+						return ProcessingResult.IGNORED;
 					}
 				}
 			}
@@ -449,14 +462,14 @@ public class MessageProcessor implements MessageProcessorInterface {
 			else if (msg instanceof GroupJoinResponseMessage) {
 				return this.groupJoinResponseService.process((GroupJoinResponseMessage) msg);
 			}
-			else if (msg instanceof ContactSetPhotoMessage) {
-				processingSuccessful = this.contactService.updateContactPhoto((ContactSetPhotoMessage) msg);
+			else if (msg instanceof ContactSetProfilePictureMessage) {
+				processingSuccessful = this.contactService.updateProfilePicture((ContactSetProfilePictureMessage) msg);
 			}
-			else if (msg instanceof ContactDeletePhotoMessage) {
-				processingSuccessful = this.contactService.deleteContactPhoto((ContactDeletePhotoMessage) msg);
+			else if (msg instanceof ContactDeleteProfilePictureMessage) {
+				processingSuccessful = this.contactService.deleteProfilePicture((ContactDeleteProfilePictureMessage) msg);
 			}
-			else if (msg instanceof ContactRequestPhotoMessage) {
-				processingSuccessful = this.contactService.requestContactPhoto((ContactRequestPhotoMessage) msg);
+			else if (msg instanceof ContactRequestProfilePictureMessage) {
+				processingSuccessful = this.contactService.requestProfilePicture((ContactRequestProfilePictureMessage) msg);
 			} else if (msg instanceof VoipMessage) {
 				if (ConfigUtils.isCallsEnabled()) {
 					/* as soon as we get a voip message, unhide the contact */
@@ -480,6 +493,8 @@ public class MessageProcessor implements MessageProcessorInterface {
 					logger.debug("Ignoring VoIP related message, since calls are disabled");
 					return ProcessingResult.SUCCESS;
 				}
+			} else if (msg instanceof BallotVoteInterface) {
+				processingSuccessful = processBallotVoteInterface((BallotVoteInterface) msg);
 			} else {
 				processingSuccessful = this.messageService.processIncomingContactMessage(msg);
 			}
@@ -493,7 +508,7 @@ public class MessageProcessor implements MessageProcessorInterface {
 		}
 		catch (BadMessageException e) {
 			logger.warn("Bad message exception", e);
-			return e.shouldDrop() ? ProcessingResult.IGNORED : ProcessingResult.FAILED;
+			return ProcessingResult.IGNORED;
 		}
 		catch (Exception e) {
 			logger.error("Unknown exception", e);
diff --git a/app/src/main/java/ch/threema/app/qrscanner/activity/BaseQrScannerActivity.java b/app/src/main/java/ch/threema/app/qrscanner/activity/BaseQrScannerActivity.java
index dd1dc418..89fa6f37 100644
--- a/app/src/main/java/ch/threema/app/qrscanner/activity/BaseQrScannerActivity.java
+++ b/app/src/main/java/ch/threema/app/qrscanner/activity/BaseQrScannerActivity.java
@@ -82,10 +82,6 @@ public class BaseQrScannerActivity extends AppCompatActivity implements
 	public void onCreate(@Nullable Bundle savedInstanceState) {
 		super.onCreate(savedInstanceState);
 
-		if (ConfigUtils.getAppTheme(this) == ConfigUtils.THEME_DARK) {
-			setTheme(R.style.Theme_Threema_Translucent_Dark);
-		}
-
 		if (ConfigUtils.requestCameraPermissions(this, null, PERMISSION_REQUEST_CAMERA)) {
 			launchScanner();
 		}
diff --git a/app/src/main/java/ch/threema/app/receivers/CancelResendMessagesBroadcastReceiver.kt b/app/src/main/java/ch/threema/app/receivers/CancelResendMessagesBroadcastReceiver.kt
new file mode 100644
index 00000000..eb809efe
--- /dev/null
+++ b/app/src/main/java/ch/threema/app/receivers/CancelResendMessagesBroadcastReceiver.kt
@@ -0,0 +1,45 @@
+/*  _____ _
+ * |_   _| |_  _ _ ___ ___ _ __  __ _
+ *   | | | ' \| '_/ -_) -_) '  \/ _` |_
+ *   |_| |_||_|_| \___\___|_|_|_\__,_(_)
+ *
+ * Threema for Android
+ * Copyright (c) 2023 Threema GmbH
+ *
+ * This program is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU Affero General Public License, version 3,
+ * as published by the Free Software Foundation.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+ * GNU Affero General Public License for more details.
+ *
+ * You should have received a copy of the GNU Affero General Public License
+ * along with this program. If not, see <https://www.gnu.org/licenses/>.
+ */
+
+package ch.threema.app.receivers
+
+import android.content.Context
+import android.content.Intent
+import ch.threema.app.managers.ListenerManager
+import ch.threema.app.utils.IntentDataUtil
+
+/**
+ * Receive the message models that could not be sent when the notification has been explicitly
+ * canceled.
+ */
+class CancelResendMessagesBroadcastReceiver : ActionBroadcastReceiver() {
+
+    override fun onReceive(context: Context, intent: Intent) {
+        // It is sufficient to trigger the listener. If the home activity (that manages resending
+        // the messages) is not available, this event can be dismissed anyway.
+        IntentDataUtil.getAbstractMessageModels(intent, messageService).forEach { messageModel ->
+            ListenerManager.messageListeners.handle {
+                it.onResendDismissed(messageModel)
+            }
+        }
+    }
+
+}
diff --git a/app/src/main/java/ch/threema/app/receivers/ShortcutAddedReceiver.kt b/app/src/main/java/ch/threema/app/receivers/ShortcutAddedReceiver.kt
new file mode 100644
index 00000000..183c4870
--- /dev/null
+++ b/app/src/main/java/ch/threema/app/receivers/ShortcutAddedReceiver.kt
@@ -0,0 +1,40 @@
+/*  _____ _
+ * |_   _| |_  _ _ ___ ___ _ __  __ _
+ *   | | | ' \| '_/ -_) -_) '  \/ _` |_
+ *   |_| |_||_|_| \___\___|_|_|_\__,_(_)
+ *
+ * Threema for Android
+ * Copyright (c) 2023 Threema GmbH
+ *
+ * This program is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU Affero General Public License, version 3,
+ * as published by the Free Software Foundation.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+ * GNU Affero General Public License for more details.
+ *
+ * You should have received a copy of the GNU Affero General Public License
+ * along with this program. If not, see <https://www.gnu.org/licenses/>.
+ */
+
+package ch.threema.app.receivers
+
+import android.content.BroadcastReceiver
+import android.content.Context
+import android.content.Intent
+import android.widget.Toast
+import ch.threema.app.R
+import ch.threema.base.utils.LoggingUtil
+
+class ShortcutAddedReceiver : BroadcastReceiver() {
+    override fun onReceive(context: Context, intent: Intent) {
+        Toast.makeText(context, R.string.add_shortcut_success, Toast.LENGTH_LONG).show()
+        logger.info("Shortcut successfully added to launcher")
+    }
+
+    companion object {
+        private val logger = LoggingUtil.getThreemaLogger("ShortcutAddedReceiver")
+    }
+}
diff --git a/app/src/main/java/ch/threema/app/routines/ReadMessagesRoutine.java b/app/src/main/java/ch/threema/app/routines/ReadMessagesRoutine.java
index d26bf846..5d7f57d3 100644
--- a/app/src/main/java/ch/threema/app/routines/ReadMessagesRoutine.java
+++ b/app/src/main/java/ch/threema/app/routines/ReadMessagesRoutine.java
@@ -41,16 +41,15 @@ public class ReadMessagesRoutine implements Runnable {
 
 	private final List<AbstractMessageModel> messages;
 	private final MessageService messageService;
-	private NotificationService notificationService;
+	private final NotificationService notificationService;
 
-	private List<OnFinished> onFinished = new ArrayList<>();
+	private final List<OnFinished> onFinished = new ArrayList<>();
 
 	public interface OnFinished {
 		void finished(boolean success);
 	}
 
 	public ReadMessagesRoutine(List<AbstractMessageModel> messages, MessageService messageService, NotificationService notificationService) {
-
 		this.messages = messages;
 		this.messageService = messageService;
 		this.notificationService = notificationService;
@@ -110,9 +109,8 @@ public class ReadMessagesRoutine implements Runnable {
 
 	}
 
-	public ReadMessagesRoutine addOnFinished(OnFinished onFinished) {
+	public void addOnFinished(OnFinished onFinished) {
 		this.onFinished.add(onFinished);
-		return this;
 	}
 
 	public void removeOnFinished(OnFinished onFinished) {
diff --git a/app/src/main/java/ch/threema/app/routines/UpdateAppLogoRoutine.java b/app/src/main/java/ch/threema/app/routines/UpdateAppLogoRoutine.java
index 715a0a77..4295784b 100644
--- a/app/src/main/java/ch/threema/app/routines/UpdateAppLogoRoutine.java
+++ b/app/src/main/java/ch/threema/app/routines/UpdateAppLogoRoutine.java
@@ -21,6 +21,9 @@
 
 package ch.threema.app.routines;
 
+import androidx.annotation.NonNull;
+import androidx.annotation.Nullable;
+
 import org.slf4j.Logger;
 
 import java.io.File;
@@ -33,12 +36,9 @@ import java.util.Date;
 
 import javax.net.ssl.HttpsURLConnection;
 
-import androidx.annotation.NonNull;
-import androidx.annotation.Nullable;
 import ch.threema.app.services.FileService;
 import ch.threema.app.services.PreferenceService;
 import ch.threema.app.utils.ConfigUtils;
-import ch.threema.app.utils.ConfigUtils.AppTheme;
 import ch.threema.app.utils.FileUtil;
 import ch.threema.app.utils.TestUtil;
 import ch.threema.base.utils.LoggingUtil;
@@ -87,18 +87,18 @@ public class UpdateAppLogoRoutine implements Runnable {
 		this.running = false;
 	}
 
-	private void setLogo(@NonNull String url, @NonNull File file, @NonNull Date expires, @AppTheme int theme) {
+	private void setLogo(@NonNull String url, @NonNull File file, @NonNull Date expires, @ConfigUtils.AppThemeSetting String theme) {
 		this.fileService.saveAppLogo(file, theme);
 		this.preferenceService.setAppLogo(url, theme);
 		this.preferenceService.setAppLogoExpiresAt(expires, theme);
 	}
 
-	private void clearLogo(@AppTheme int theme) {
+	private void clearLogo(@ConfigUtils.AppThemeSetting String theme) {
 		this.fileService.saveAppLogo(null, theme);
 		this.preferenceService.clearAppLogo(theme);
 	}
 
-	private void downloadLogo(@Nullable String urlString, @AppTheme int theme) {
+	private void downloadLogo(@Nullable String urlString, @ConfigUtils.AppThemeSetting String theme) {
 
 		logger.debug("Logo download forced = " + forceUpdate);
 
diff --git a/app/src/main/java/ch/threema/app/services/ActivityService.java b/app/src/main/java/ch/threema/app/services/ActivityService.java
index 171570d6..debe3699 100644
--- a/app/src/main/java/ch/threema/app/services/ActivityService.java
+++ b/app/src/main/java/ch/threema/app/services/ActivityService.java
@@ -122,7 +122,6 @@ public class ActivityService {
 	}
 
 	private boolean timeLocking() {
-		logger.debug("timeLocking");
 		if(this.lockAppService.isLockingEnabled()) {
 			if(!this.lockAppService.isLocked()) {
 				this.lockAppService.resetLockTimer(true);
diff --git a/app/src/main/java/ch/threema/app/services/AppRestrictionService.java b/app/src/main/java/ch/threema/app/services/AppRestrictionService.java
index 2c29ac15..33193276 100644
--- a/app/src/main/java/ch/threema/app/services/AppRestrictionService.java
+++ b/app/src/main/java/ch/threema/app/services/AppRestrictionService.java
@@ -30,12 +30,18 @@ import org.json.JSONException;
 import org.json.JSONObject;
 import org.slf4j.Logger;
 
+import java.util.Arrays;
+import java.util.HashMap;
 import java.util.Iterator;
+import java.util.List;
 import java.util.Map;
+import java.util.Objects;
+import java.util.Set;
 
 import androidx.annotation.NonNull;
 import androidx.annotation.Nullable;
 import androidx.annotation.WorkerThread;
+import ch.threema.app.R;
 import ch.threema.app.ThreemaApplication;
 import ch.threema.app.services.license.UserCredentials;
 import ch.threema.app.utils.RuntimeUtil;
@@ -44,6 +50,8 @@ import ch.threema.base.utils.LoggingUtil;
 import ch.threema.domain.protocol.api.APIConnector;
 import ch.threema.domain.protocol.api.work.WorkData;
 import ch.threema.domain.protocol.api.work.WorkMDMSettings;
+import java8.util.stream.Collectors;
+import java8.util.stream.StreamSupport;
 
 /**
  * Hold all Work App Restrictions
@@ -52,24 +60,40 @@ public class AppRestrictionService {
 	private static final Logger logger = LoggingUtil.getThreemaLogger("AppRestrictionService");
 
 	private Bundle appRestrictions;
+
+	/**
+	 * Always make sure, that only parameters allowed for the threema MDM are stored in these settings.
+ 	 */
 	private volatile WorkMDMSettings workMDMSettings;
 	private boolean hasExternalMDMRestrictions;
 	private static final String PREFERENCE_KEY = "wrk_app_restriction";
 
+	// List of mdm restrictions that shall be ignored when provided by the threema mdm
+	private static final List<Integer> EXTERNAL_MDM_ONLY_RESTRICTIONS_IDS = Arrays.asList(
+		R.string.restriction__id_backup,
+		R.string.restriction__id_backup_password,
+		R.string.restriction__safe_password,
+		R.string.restriction__license_username,
+		R.string.restriction__license_password
+	);
+	private Set<String> externalMdmOnlyRestrictions;
+
+	AppRestrictionService() {}
+
 	/**
 	 * Save the given WorkMDMSettings and reload the AppRestrictions
 	 */
-	public boolean storeWorkMDMSettings(final WorkMDMSettings settings) {
-		if (this.workMDMSettings != settings) {
+	public void storeWorkMDMSettings(@NonNull final WorkMDMSettings settings) {
+		if (!Objects.equals(this.workMDMSettings, settings)) {
 			if (ThreemaApplication.getServiceManager() != null
 					&& ThreemaApplication.getServiceManager().getPreferenceStore() != null) {
+				logger.debug("Store work mdm settings");
 				ThreemaApplication.getServiceManager().getPreferenceStore()
 						.save(PREFERENCE_KEY, convert(settings), true);
-				this.workMDMSettings = settings;
+				this.workMDMSettings = filterWorkMdmSettings(settings);
 				this.reload();
 			}
 		}
-		return true;
 	}
 
 	/**
@@ -84,7 +108,7 @@ public class AppRestrictionService {
 						.getJSONObject(PREFERENCE_KEY, true);
 
 				if (object != null) {
-					this.workMDMSettings = this.convert(object);
+					this.workMDMSettings = filterWorkMdmSettings(convert(object));
 				}
 			}
 		}
@@ -113,6 +137,40 @@ public class AppRestrictionService {
 		return mdmSource.length() > 0 ? mdmSource.toString() : null;
 	}
 
+	/**
+	 * Create a copy of the WorkMDMSettings with parameters removed that are not available for the threema mdm.
+	 * This is to prevent invalid parameters from a malicious threema mdm server.
+	 */
+	@NonNull
+	private WorkMDMSettings filterWorkMdmSettings(@NonNull WorkMDMSettings unfilteredSettings) {
+		Set<String> nonWorkMdmSettings = getExternalMdmOnlyRestrictions();
+		WorkMDMSettings filteredSettings = new WorkMDMSettings();
+		filteredSettings.parameters = new HashMap<>();
+		if (unfilteredSettings.parameters != null) {
+			filteredSettings.override = unfilteredSettings.override;
+			for (Map.Entry<String, Object> entry : unfilteredSettings.parameters.entrySet()) {
+				if (!nonWorkMdmSettings.contains(entry.getKey())) {
+					filteredSettings.parameters.put(entry.getKey(), entry.getValue());
+				} else {
+					logger.warn("Non work mdm restriction in WorkMDMSettings: {}", entry.getKey());
+				}
+			}
+		}
+		return filteredSettings;
+	}
+
+	private Set<String> getExternalMdmOnlyRestrictions() {
+		synchronized (EXTERNAL_MDM_ONLY_RESTRICTIONS_IDS) {
+			Context context = ThreemaApplication.getAppContext();
+			if (externalMdmOnlyRestrictions == null) {
+				externalMdmOnlyRestrictions = StreamSupport.stream(EXTERNAL_MDM_ONLY_RESTRICTIONS_IDS)
+					.map(context::getString)
+					.collect(Collectors.toSet());
+			}
+		}
+		return externalMdmOnlyRestrictions;
+	}
+
 	/**
 	 * Determine if this app is under control of Threema MDM and has at least one parameter set
 	 * @return true if Threema MDM is active
@@ -133,11 +191,11 @@ public class AppRestrictionService {
 	 * Fetch the MDM Settings
 	 */
 	@WorkerThread
-	public boolean fetchAndStoreWorkMDMSettings(APIConnector apiConnector,
+	public void fetchAndStoreWorkMDMSettings(APIConnector apiConnector,
 	                                                    UserCredentials credentials) throws Exception {
 		// Verify notnull instances
 		if (apiConnector == null || credentials == null) {
-			return false;
+			return;
 		}
 
 		if (RuntimeUtil.isOnUiThread()) {
@@ -150,7 +208,7 @@ public class AppRestrictionService {
 				credentials.password,
 				new String[]{});
 
-		return null != result && this.storeWorkMDMSettings(result.mdm);
+		this.storeWorkMDMSettings(result.mdm);
 	}
 
 	/**
diff --git a/app/src/main/java/ch/threema/app/services/ContactService.java b/app/src/main/java/ch/threema/app/services/ContactService.java
index 36c90c76..41ea21c5 100644
--- a/app/src/main/java/ch/threema/app/services/ContactService.java
+++ b/app/src/main/java/ch/threema/app/services/ContactService.java
@@ -21,27 +21,24 @@
 
 package ch.threema.app.services;
 
-import android.graphics.Bitmap;
-
 import androidx.annotation.NonNull;
 import androidx.annotation.Nullable;
 import androidx.annotation.WorkerThread;
 
 import java.io.File;
-import java.io.IOException;
 import java.util.List;
 
 import ch.threema.app.exceptions.EntryAlreadyExistsException;
 import ch.threema.app.exceptions.InvalidEntryException;
 import ch.threema.app.exceptions.PolicyViolationException;
 import ch.threema.app.messagereceiver.ContactMessageReceiver;
-import ch.threema.base.ThreemaException;
+import ch.threema.domain.fs.DHSession;
 import ch.threema.domain.models.VerificationLevel;
 import ch.threema.domain.protocol.api.work.WorkContact;
 import ch.threema.domain.protocol.csp.messages.AbstractMessage;
-import ch.threema.domain.protocol.csp.messages.ContactDeletePhotoMessage;
-import ch.threema.domain.protocol.csp.messages.ContactRequestPhotoMessage;
-import ch.threema.domain.protocol.csp.messages.ContactSetPhotoMessage;
+import ch.threema.domain.protocol.csp.messages.ContactDeleteProfilePictureMessage;
+import ch.threema.domain.protocol.csp.messages.ContactRequestProfilePictureMessage;
+import ch.threema.domain.protocol.csp.messages.ContactSetProfilePictureMessage;
 import ch.threema.storage.models.ContactModel;
 import ch.threema.storage.models.access.AccessModel;
 import java8.util.function.Consumer;
@@ -58,6 +55,86 @@ public interface ContactService extends AvatarService<ContactModel> {
 		boolean process(ContactModel contactModel);
 	}
 
+	class ProfilePictureUploadData {
+		public byte[] bitmapArray;
+		public byte[] blobId;
+		public byte[] encryptionKey;
+		public int size;
+	}
+
+	class ForwardSecuritySessionState {
+		private enum ForwardSecurityState {
+			NO_SESSION,
+			UNSUPPORTED_BY_REMOTE,
+			L20,
+			R20,
+			R24,
+			RL44,
+		}
+
+		private final ForwardSecurityState forwardSecurityState;
+		private final DHSession.DHVersions currentDHVersions;
+
+		private ForwardSecuritySessionState(@NonNull ForwardSecurityState forwardSecurityState) {
+			this(forwardSecurityState, null);
+		}
+
+		private ForwardSecuritySessionState(
+			@NonNull ForwardSecurityState forwardSecurityState,
+			@Nullable DHSession.DHVersions currentDHVersions
+		) {
+			this.forwardSecurityState = forwardSecurityState;
+			this.currentDHVersions = currentDHVersions;
+		}
+
+		protected static ForwardSecuritySessionState noSession() {
+			return new ForwardSecuritySessionState(ForwardSecurityState.NO_SESSION);
+		}
+
+		protected static ForwardSecuritySessionState unsupportedByRemote() {
+			return new ForwardSecuritySessionState(ForwardSecurityState.UNSUPPORTED_BY_REMOTE);
+		}
+
+		protected static ForwardSecuritySessionState fromDHState(
+			@NonNull DHSession.State state,
+			@Nullable DHSession.DHVersions dhVersions
+		) {
+			switch (state) {
+				case L20:
+					return new ForwardSecuritySessionState(ForwardSecurityState.L20, dhVersions);
+				case R20:
+					return new ForwardSecuritySessionState(ForwardSecurityState.R20, dhVersions);
+				case R24:
+					return new ForwardSecuritySessionState(ForwardSecurityState.R24, dhVersions);
+				case RL44:
+					return new ForwardSecuritySessionState(ForwardSecurityState.RL44, dhVersions);
+				default:
+					throw new IllegalStateException("No such dh state: " + state);
+			}
+		}
+
+		@NonNull
+		@Override
+		public String toString() {
+			switch (forwardSecurityState) {
+				case NO_SESSION:
+					return "No session";
+				case L20:
+					return "L20 " + currentDHVersions;
+				case R20:
+					return "R20 " + currentDHVersions;
+				case R24:
+					return "R24 " + currentDHVersions;
+				case RL44:
+					return "RL44 " + currentDHVersions;
+				case UNSUPPORTED_BY_REMOTE:
+					return "Unsupported by remote";
+				default:
+					return "Unknown state";
+			}
+		}
+	}
+
 	interface Filter {
 
 		/**
@@ -227,6 +304,14 @@ public interface ContactService extends AvatarService<ContactModel> {
 	void setIsTyping(String identity, boolean isTyping) ;
 	boolean isTyping(String identity);
 
+	/**
+	 * Send a typing indicator if the preferences do not prevent that.
+	 *
+	 * @param toIdentity the identity that should receive the typing indicator
+	 * @param isTyping   whether the user is typing or not
+	 */
+	void sendTypingIndicator(String toIdentity, boolean isTyping);
+
 	void setActive(String identity);
 
 	int updateContactVerification(String identity, byte[] publicKey);
@@ -276,10 +361,27 @@ public interface ContactService extends AvatarService<ContactModel> {
 	boolean setAvatar(ContactModel contactModel, byte[] avatar) throws Exception;
 	boolean removeAvatar(ContactModel contactModel);
 
-	ContactServiceImpl.ContactPhotoUploadResult uploadContactPhoto(Bitmap picture) throws IOException, ThreemaException;
-	boolean updateContactPhoto(ContactSetPhotoMessage msg);
-	boolean deleteContactPhoto(ContactDeletePhotoMessage msg);
-	boolean requestContactPhoto(ContactRequestPhotoMessage msg);
+	/**
+	 * Check whether the app settings allow the profile picture to be sent to the contact. Note that
+	 * this method does <b>not</b> check whether the contact is a gateway ID or ECHOECHO.
+	 *
+	 * @return {@code true} if the profile picture could be sent, {@code false} otherwise
+	 */
+	boolean isContactAllowedToReceiveProfilePicture(@NonNull ContactModel contactModel);
+
+	/**
+	 * Upload the current profile picture if it hasn't been uploaded recently and get the most
+	 * recent contact profile picture upload data.
+	 *
+	 * @return the most recent profile picture upload data. If the upload failed or the last stored
+	 * data could not be read, the returned data contains null as blob ID. If there is no profile
+	 * picture set, the blob ID is {@link ContactModel#NO_PROFILE_PICTURE_BLOB_ID}.
+	 */
+	@NonNull
+	ProfilePictureUploadData getUpdatedProfilePictureUploadData();
+	boolean updateProfilePicture(ContactSetProfilePictureMessage msg);
+	boolean deleteProfilePicture(ContactDeleteProfilePictureMessage msg);
+	boolean requestProfilePicture(ContactRequestProfilePictureMessage msg);
 
 	ContactModel createContactModelByIdentity(String identity) throws InvalidEntryException;
 
@@ -289,9 +391,17 @@ public interface ContactService extends AvatarService<ContactModel> {
 	String getAndroidContactLookupUriString(ContactModel contactModel);
 	@Nullable ContactModel addWorkContact(@NonNull WorkContact workContact, @Nullable List<ContactModel> existingWorkContacts);
 	void createWorkContact(@NonNull String identity);
-	void setForwardSecurityState(@NonNull ContactModel contactModel, @ContactModel.ForwardSecurityState int state);
 
 	@WorkerThread
 	boolean resetReceiptsSettings();
 	void reportSpam(@NonNull ContactModel spammerContactModel, @Nullable Consumer<Void> onSuccess, @Nullable Consumer<String> onFailure);
+
+	/**
+	 * Get the forward security state of a given contact.
+	 *
+	 * @return the forward security state of a given contact
+	 */
+	@Nullable
+	ForwardSecuritySessionState getForwardSecurityState(@NonNull ContactModel contactModel);
+
 }
diff --git a/app/src/main/java/ch/threema/app/services/ContactServiceImpl.java b/app/src/main/java/ch/threema/app/services/ContactServiceImpl.java
index a5860be6..08929522 100644
--- a/app/src/main/java/ch/threema/app/services/ContactServiceImpl.java
+++ b/app/src/main/java/ch/threema/app/services/ContactServiceImpl.java
@@ -24,6 +24,7 @@ package ch.threema.app.services;
 import android.Manifest;
 import android.content.Context;
 import android.content.pm.PackageManager;
+import android.database.Cursor;
 import android.graphics.Bitmap;
 import android.net.Uri;
 import android.os.Build;
@@ -31,9 +32,15 @@ import android.provider.ContactsContract;
 import android.text.format.DateUtils;
 import android.widget.ImageView;
 
-import com.neilalexander.jnacl.NaCl;
+import androidx.annotation.AnyThread;
+import androidx.annotation.ColorInt;
+import androidx.annotation.NonNull;
+import androidx.annotation.Nullable;
+import androidx.annotation.UiThread;
+import androidx.annotation.WorkerThread;
+import androidx.core.content.ContextCompat;
 
-import net.sqlcipher.Cursor;
+import com.neilalexander.jnacl.NaCl;
 
 import org.slf4j.Logger;
 
@@ -53,13 +60,6 @@ import java.util.Map;
 import java.util.Timer;
 import java.util.TimerTask;
 
-import androidx.annotation.AnyThread;
-import androidx.annotation.ColorInt;
-import androidx.annotation.NonNull;
-import androidx.annotation.Nullable;
-import androidx.annotation.UiThread;
-import androidx.annotation.WorkerThread;
-import androidx.core.content.ContextCompat;
 import ch.threema.app.BuildConfig;
 import ch.threema.app.R;
 import ch.threema.app.ThreemaApplication;
@@ -92,6 +92,7 @@ import ch.threema.app.utils.TestUtil;
 import ch.threema.base.ThreemaException;
 import ch.threema.base.utils.Base32;
 import ch.threema.base.utils.LoggingUtil;
+import ch.threema.domain.fs.DHSession;
 import ch.threema.domain.models.Contact;
 import ch.threema.domain.models.IdentityType;
 import ch.threema.domain.models.VerificationLevel;
@@ -104,9 +105,9 @@ import ch.threema.domain.protocol.csp.ProtocolDefines;
 import ch.threema.domain.protocol.csp.connection.MessageQueue;
 import ch.threema.domain.protocol.csp.fs.ForwardSecurityMessageProcessor;
 import ch.threema.domain.protocol.csp.messages.AbstractMessage;
-import ch.threema.domain.protocol.csp.messages.ContactDeletePhotoMessage;
-import ch.threema.domain.protocol.csp.messages.ContactRequestPhotoMessage;
-import ch.threema.domain.protocol.csp.messages.ContactSetPhotoMessage;
+import ch.threema.domain.protocol.csp.messages.ContactDeleteProfilePictureMessage;
+import ch.threema.domain.protocol.csp.messages.ContactRequestProfilePictureMessage;
+import ch.threema.domain.protocol.csp.messages.ContactSetProfilePictureMessage;
 import ch.threema.domain.stores.DHSessionStoreException;
 import ch.threema.domain.stores.DHSessionStoreInterface;
 import ch.threema.localcrypto.MasterKeyLockedException;
@@ -168,13 +169,6 @@ public class ContactServiceImpl implements ContactService {
 		}
 	};
 
-	static class ContactPhotoUploadResult {
-		public byte[] bitmapArray;
-		public byte[] blobId;
-		public byte[] encryptionKey;
-		public int size;
-	}
-
 	public ContactServiceImpl(
 		Context context,
 		DatabaseContactStore contactStore,
@@ -538,7 +532,7 @@ public class ContactServiceImpl implements ContactService {
 
 			@Override
 			public boolean apply(@NonNull ContactModel type) {
-				return ContactUtil.canReceiveProfilePics(type);
+				return !ContactUtil.isEchoEchoOrChannelContact(type);
 			}
 		});
 	}
@@ -659,6 +653,38 @@ public class ContactServiceImpl implements ContactService {
 		}
 	}
 
+	@Override
+	public void sendTypingIndicator(String toIdentity, boolean isTyping) {
+		ContactModel contactModel = getByIdentity(toIdentity);
+		if (contactModel == null) {
+			logger.error("Cannot send typing indicator");
+			return;
+		}
+
+		boolean sendTypingIndicator;
+		switch (contactModel.getTypingIndicators()) {
+			case ContactModel.SEND:
+				sendTypingIndicator = true;
+				break;
+			case ContactModel.DONT_SEND:
+				sendTypingIndicator = false;
+				break;
+			default:
+				sendTypingIndicator = preferenceService.isTypingIndicator();
+				break;
+		}
+
+		if (!sendTypingIndicator) {
+			return;
+		}
+
+		try {
+			createReceiver(contactModel).sendTypingIndicatorMessage(isTyping);
+		} catch (ThreemaException e) {
+			logger.error("Could not send typing indicator", e);
+		}
+	}
+
 	@Override
 	public void setActive(String identity) {
 		final ContactModel contact = this.getByIdentity(identity);
@@ -779,8 +805,6 @@ public class ContactServiceImpl implements ContactService {
 			try {
 				DHSessionStoreInterface dhSessionStore = serviceManager.getDHSessionStore();
 				dhSessionStore.deleteAllDHSessions(userService.getIdentity(), model.getIdentity());
-			} catch (MasterKeyLockedException e) {
-				logger.error("Could not get DH session store", e);
 			} catch (DHSessionStoreException e) {
 				logger.error("Could not delete all DH sessions");
 			}
@@ -1113,8 +1137,9 @@ public class ContactServiceImpl implements ContactService {
 		this.clearAvatarCache(contactModel);
 
 		if (this.userService.isMe(contactModel.getIdentity())) {
-			// Update last profile picture change date
-			this.preferenceService.setProfilePicLastUpdate(new Date());
+			// Update last profile picture upload date
+			this.preferenceService.setProfilePicUploadDate(new Date(0));
+			this.preferenceService.setProfilePicUploadData(null);
 
 			// Notify listeners
 			ListenerManager.profileListeners.handle(ProfileListener::onAvatarChanged);
@@ -1133,9 +1158,6 @@ public class ContactServiceImpl implements ContactService {
 
 				// Notify listeners
 				if (this.userService.isMe(contactModel.getIdentity())) {
-					// Update last profile picture change date
-					this.preferenceService.setProfilePicLastUpdate(new Date());
-
 					ListenerManager.profileListeners.handle(ProfileListener::onAvatarRemoved);
 				}
 				ListenerManager.contactListeners.handle(listener -> listener.onAvatarChanged(contactModel));
@@ -1147,37 +1169,74 @@ public class ContactServiceImpl implements ContactService {
 	}
 
 	@Override
-	public ContactPhotoUploadResult uploadContactPhoto(Bitmap picture) throws IOException, ThreemaException {
+	@NonNull
+	public ProfilePictureUploadData getUpdatedProfilePictureUploadData() {
+		Bitmap contactPhoto = getMyProfilePicture();
+		if (contactPhoto == null) {
+			// If there is no profile picture set, then return empty upload data with an empty
+			// byte array as blob ID.
+			ProfilePictureUploadData data = new ProfilePictureUploadData();
+			data.blobId = ContactModel.NO_PROFILE_PICTURE_BLOB_ID;
+			return data;
+		}
+
 		/* only upload blob every 7 days */
-		Date uploadDeadline = new Date(preferenceService.getProfilePicUploadDate() + DateUtils.WEEK_IN_MILLIS);
+		Date uploadDeadline = new Date(preferenceService.getProfilePicUploadDate() + ContactUtil.PROFILE_PICTURE_BLOB_CACHE_DURATION);
 		Date now = new Date();
 
-		ContactPhotoUploadResult result = new ContactPhotoUploadResult();
-
 		if (now.after(uploadDeadline)) {
 			logger.info("Uploading profile picture blob");
 
-			SecureRandom rnd = new SecureRandom();
-			result.encryptionKey = new byte[NaCl.SYMMKEYBYTES];
-			rnd.nextBytes(result.encryptionKey);
+			ProfilePictureUploadData data = uploadContactPhoto(contactPhoto);
 
-			result.bitmapArray = BitmapUtil.bitmapToJpegByteArray(picture);
-			byte[] imageData = NaCl.symmetricEncryptData(result.bitmapArray, result.encryptionKey, ProtocolDefines.CONTACT_PHOTO_NONCE);
-			BlobUploader blobUploader = this.apiService.createUploader(imageData);
-			result.blobId = blobUploader.upload();
-			result.size = imageData.length;
+			if (data == null) {
+				return new ProfilePictureUploadData();
+			}
 
 			preferenceService.setProfilePicUploadDate(now);
-			preferenceService.setProfilePicUploadData(result);
+			preferenceService.setProfilePicUploadData(data);
+
+			return data;
 		} else {
-			result = preferenceService.getProfilePicUploadData(result);
+			ProfilePictureUploadData data = preferenceService.getProfilePicUploadData();
+			if (data != null) {
+				return data;
+			} else {
+				return new ProfilePictureUploadData();
+			}
 		}
-		return result;
+	}
+
+	@Nullable
+	private Bitmap getMyProfilePicture() {
+		ContactModel myContactModel = getByIdentity(getMe().getIdentity());
+		return getAvatar(myContactModel, true, false);
+	}
+
+	@Nullable
+	private ProfilePictureUploadData uploadContactPhoto(@NonNull Bitmap contactPhoto) {
+		ProfilePictureUploadData data = new ProfilePictureUploadData();
+
+		SecureRandom rnd = new SecureRandom();
+		data.encryptionKey = new byte[NaCl.SYMMKEYBYTES];
+		rnd.nextBytes(data.encryptionKey);
+
+		data.bitmapArray = BitmapUtil.bitmapToJpegByteArray(contactPhoto);
+		byte[] imageData = NaCl.symmetricEncryptData(data.bitmapArray, data.encryptionKey, ProtocolDefines.CONTACT_PHOTO_NONCE);
+		try {
+			BlobUploader blobUploader = this.apiService.createUploader(imageData);
+			data.blobId = blobUploader.upload();
+		} catch (ThreemaException | IOException e) {
+			logger.error("Could not upload contact photo", e);
+			return null;
+		}
+		data.size = imageData.length;
+		return data;
 	}
 
 
 	@Override
-	public boolean updateContactPhoto(ContactSetPhotoMessage msg) {
+	public boolean updateProfilePicture(ContactSetProfilePictureMessage msg) {
 		final ContactModel contactModel = this.getContact(msg);
 
 		if (contactModel != null) {
@@ -1210,7 +1269,7 @@ public class ContactServiceImpl implements ContactService {
 	}
 
 	@Override
-	public boolean deleteContactPhoto(ContactDeletePhotoMessage msg) {
+	public boolean deleteProfilePicture(ContactDeleteProfilePictureMessage msg) {
 		final ContactModel contactModel = this.getContact(msg);
 
 		if (contactModel != null) {
@@ -1224,18 +1283,31 @@ public class ContactServiceImpl implements ContactService {
 	}
 
 	@Override
-	public boolean requestContactPhoto(ContactRequestPhotoMessage msg) {
+	public boolean requestProfilePicture(ContactRequestProfilePictureMessage msg) {
 		final ContactModel contactModel = this.getContact(msg);
 
 		if (contactModel != null) {
 			logger.info("Received request to re-send profile pic by {}", msg.getFromIdentity());
 
-			contactModel.setProfilePicSentDate(new Date(0));
-			save(contactModel);
+			resetContactPhotoSentState(contactModel);
 		}
 		return true;
 	}
 
+	private void resetContactPhotoSentState(@NonNull ContactModel contactModel) {
+		// Note that setting the blob id to null also triggers a delete-profile-picture message to
+		// be sent again in case there is no profile picture set.
+		contactModel.setProfilePicBlobID(null);
+		save(contactModel);
+	}
+
+	@Override
+	public boolean isContactAllowedToReceiveProfilePicture(@NonNull ContactModel contactModel) {
+		int profilePicRelease = preferenceService.getProfilePicRelease();
+		return profilePicRelease == PreferenceService.PROFILEPIC_RELEASE_EVERYONE ||
+			(profilePicRelease == PreferenceService.PROFILEPIC_RELEASE_SOME && profilePicRecipientsService.has(contactModel.getIdentity()));
+	}
+
 	@Override
 	public ContactModel createContactModelByIdentity(String identity) throws InvalidEntryException {
 		if (identity == null || identity.length() != ProtocolDefines.IDENTITY_LEN) {
@@ -1292,7 +1364,7 @@ public class ContactServiceImpl implements ContactService {
 				if (userService.isMe(contactModel.getIdentity())) {
 					return false;
 				}
-				return contactModel.getIdentityType() == IdentityType.NORMAL && ContactUtil.canReceiveProfilePics(contactModel);
+				return contactModel.getIdentityType() == IdentityType.NORMAL && !ContactUtil.isEchoEchoOrChannelContact(contactModel);
 			} else {
 				return contactModel.getIdentityType() == IdentityType.WORK;
 			}
@@ -1310,6 +1382,9 @@ public class ContactServiceImpl implements ContactService {
 		}
 
 		save(contact);
+
+		// delete share target shortcut as name is different
+		ShortcutUtil.deleteShareTargetShortcut(getUniqueIdString(contact));
 	}
 
 	/**
@@ -1413,12 +1488,6 @@ public class ContactServiceImpl implements ContactService {
 		}
 	}
 
-	@Override
-	public void setForwardSecurityState(@NonNull ContactModel contactModel, @ContactModel.ForwardSecurityState int state) {
-		contactModel.setForwardSecurityState(state);
-		this.save(contactModel);
-	}
-
 	@Override
 	@WorkerThread
 	public boolean resetReceiptsSettings() {
@@ -1486,4 +1555,25 @@ public class ContactServiceImpl implements ContactService {
 			}
 		}).start();
 	}
+
+	@Nullable
+	@Override
+	public ForwardSecuritySessionState getForwardSecurityState(@NonNull ContactModel contactModel) {
+		if (!ThreemaFeature.canForwardSecurity(contactModel.getFeatureMask())) {
+			return ForwardSecuritySessionState.unsupportedByRemote();
+		}
+		try {
+			DHSession session = ThreemaApplication.requireServiceManager().getDHSessionStore()
+				.getBestDHSession(userService.getIdentity(), contactModel.getIdentity());
+			if (session == null) {
+				return ForwardSecuritySessionState.noSession();
+			}
+			DHSession.State dhState = session.getState();
+			DHSession.DHVersions dhVersions = session.getCurrent4DHVersions();
+			return ForwardSecuritySessionState.fromDHState(dhState, dhVersions);
+		} catch (Exception e) {
+			logger.error("Could not get forward security state", e);
+			return null;
+		}
+	}
 }
diff --git a/app/src/main/java/ch/threema/app/services/ConversationService.java b/app/src/main/java/ch/threema/app/services/ConversationService.java
index 741d12ff..3e8857fb 100644
--- a/app/src/main/java/ch/threema/app/services/ConversationService.java
+++ b/app/src/main/java/ch/threema/app/services/ConversationService.java
@@ -96,6 +96,11 @@ public interface ConversationService {
 	 */
 	ConversationModel refresh(@NonNull MessageReceiver receiverModel);
 
+	/**
+	 * update the tags
+	 */
+	void updateTags();
+
 	/**
 	 * re-sort conversations
 	 */
diff --git a/app/src/main/java/ch/threema/app/services/ConversationServiceImpl.java b/app/src/main/java/ch/threema/app/services/ConversationServiceImpl.java
index 06510d1f..bfb42035 100644
--- a/app/src/main/java/ch/threema/app/services/ConversationServiceImpl.java
+++ b/app/src/main/java/ch/threema/app/services/ConversationServiceImpl.java
@@ -21,17 +21,21 @@
 
 package ch.threema.app.services;
 
+import android.content.Context;
+
 import androidx.annotation.NonNull;
 import androidx.annotation.Nullable;
 
-import net.sqlcipher.Cursor;
+import android.database.Cursor;
 
 import org.slf4j.Logger;
 
 import java.util.ArrayList;
 import java.util.Collections;
 import java.util.Comparator;
+import java.util.HashSet;
 import java.util.List;
+import java.util.Set;
 
 import ch.threema.app.collections.Functional;
 import ch.threema.app.collections.IPredicateNonNull;
@@ -60,6 +64,7 @@ import ch.threema.storage.models.TagModel;
 public class ConversationServiceImpl implements ConversationService {
 	private static final Logger logger = LoggingUtil.getThreemaLogger("ConversationServiceImpl");
 
+	private final Context context;
 	private final List<ConversationModel> conversationCache;
 	private final ConversationTagService conversationTagService;
 	private final DatabaseServiceNew databaseServiceNew;
@@ -69,7 +74,9 @@ public class ConversationServiceImpl implements ConversationService {
 	private final MessageService messageService;
 	private final DeadlineListService hiddenChatsListService;
 	private boolean initAllLoaded = false;
-	private final TagModel starTag;
+	private final TagModel unreadTagModel;
+	private final @NonNull String pinTag;
+	private final @NonNull String unreadTag;
 
 	static class ConversationResult {
 		public final int messageId;
@@ -85,14 +92,16 @@ public class ConversationServiceImpl implements ConversationService {
 
 
 	public ConversationServiceImpl(
+			Context context,
 			CacheService cacheService,
 			DatabaseServiceNew databaseServiceNew,
 			ContactService contactService,
 			GroupService groupService,
 			DistributionListService distributionListService,
 			MessageService messageService,
-			DeadlineListService hiddenChatsListService,
+			@NonNull DeadlineListService hiddenChatsListService,
 			ConversationTagService conversationTagService) {
+		this.context = context;
 		this.databaseServiceNew = databaseServiceNew;
 		this.contactService = contactService;
 		this.groupService = groupService;
@@ -102,7 +111,11 @@ public class ConversationServiceImpl implements ConversationService {
 		this.conversationCache = cacheService.getConversationModelCache();
 		this.conversationTagService = conversationTagService;
 
-		this.starTag = conversationTagService.getTagModel(ConversationTagServiceImpl.FIXED_TAG_PIN);
+		TagModel pinTagModel = conversationTagService.getTagModel(ConversationTagServiceImpl.FIXED_TAG_PIN);
+		this.pinTag = pinTagModel != null ? pinTagModel.getTag() : "";
+
+		this.unreadTagModel = conversationTagService.getTagModel(ConversationTagServiceImpl.FIXED_TAG_UNREAD);
+		this.unreadTag = unreadTagModel != null ? unreadTagModel.getTag() : "";
 	}
 
 	@Override
@@ -120,7 +133,7 @@ public class ConversationServiceImpl implements ConversationService {
 			if (this.conversationCache.size() == 0) {
 
 				logger.debug("start selecting");
-				for(ConversationModelParser parser: new ConversationModelParser[] {
+				for(ConversationModelParser<?, ?, ?> parser: new ConversationModelParser<?, ?, ?>[] {
 						new ContactConversationModelParser(),
 						new GroupConversationModelParser(),
 						new DistributionListConversationModelParser()
@@ -128,6 +141,8 @@ public class ConversationServiceImpl implements ConversationService {
 					parser.processAll();
 				}
 
+				this.updateTags();
+
 				logger.debug("selection finished");
 				this.initAllLoaded = true;
 			}
@@ -202,7 +217,7 @@ public class ConversationServiceImpl implements ConversationService {
 			}
 		}
 
-		return this.conversationCache;
+		return new ArrayList<>(this.conversationCache);
 	}
 
 	@Override
@@ -278,15 +293,31 @@ public class ConversationServiceImpl implements ConversationService {
 	}
 
 	@Override
-	public void sort() {
-		List<String> taggedConversationUids = new ArrayList<>();
+	public void updateTags() {
+		if (this.conversationCache == null) {
+			return;
+		}
+
+		Set<String> pinTaggedUids = new HashSet<>();
+		Set<String> unreadTaggedUids = new HashSet<>();
 		for (ConversationTagModel tagModel : conversationTagService.getAll()) {
-			if (tagModel.getTag().equals(starTag.getTag())) {
-				taggedConversationUids.add(tagModel.getConversationUid());
+			if (pinTag.equals(tagModel.getTag())) {
+				pinTaggedUids.add(tagModel.getConversationUid());
+			} else if (unreadTag.equals(tagModel.getTag())) {
+				unreadTaggedUids.add(tagModel.getConversationUid());
+			}
+		}
+
+		synchronized (conversationCache) {
+			for (ConversationModel conversationModel : conversationCache) {
+				conversationModel.setIsPinTagged(pinTaggedUids.contains(conversationModel.getUid()));
+				conversationModel.setIsUnreadTagged(unreadTaggedUids.contains(conversationModel.getUid()));
 			}
 		}
+	}
 
-		int size = taggedConversationUids.size();
+	@Override
+	public void sort() {
 
 		synchronized (this.conversationCache) {
 			Collections.sort(this.conversationCache, new Comparator<ConversationModel>() {
@@ -296,15 +327,11 @@ public class ConversationServiceImpl implements ConversationService {
 						return 0;
 					}
 
-					if (size > 0) {
-						boolean tagged1 = taggedConversationUids.contains(conversationModel.getUid());
-						boolean tagged2 = taggedConversationUids.contains(conversationModel2.getUid());
+					boolean tagged1 = conversationModel.isPinTagged();
+					boolean tagged2 = conversationModel2.isPinTagged();
 
-						return tagged1 == tagged2 ? conversationModel2.getSortDate().compareTo(conversationModel.getSortDate()) :
-							tagged2 ? 1 : -1;
-					} else {
-						return conversationModel2.getSortDate().compareTo(conversationModel.getSortDate());
-					}
+					return tagged1 == tagged2 ? conversationModel2.getSortDate().compareTo(conversationModel.getSortDate()) :
+						tagged2 ? 1 : -1;
 				}
 			});
 
@@ -738,8 +765,10 @@ public class ConversationServiceImpl implements ConversationService {
 				return null;
 			}
 
-			if((model.getLatestMessage() == null
-					|| model.getLatestMessage().getId() < modifiedMessageModel.getId())) {
+			if ((model.getLatestMessage() == null
+				|| model.getLatestMessage().getId() < modifiedMessageModel.getId())
+				&& !modifiedMessageModel.isStatusMessage()
+			) {
 				//set this message as latest message
 				model.setLatestMessage(modifiedMessageModel);
 				//increase message count
@@ -749,6 +778,7 @@ public class ConversationServiceImpl implements ConversationService {
 			if(model.getReceiver() != null && MessageUtil.isUnread(model.getLatestMessage())) {
 				//update unread count
 				model.setUnreadCount(model.getReceiver().getUnreadMessagesCount());
+				conversationTagService.unTag(model, unreadTagModel);
 			}
 			else {
 				if (model.getLatestMessage() == null) {
@@ -857,6 +887,7 @@ public class ConversationServiceImpl implements ConversationService {
 					"INNER JOIN contacts c ON c.identity = m.identity " +
 					"WHERE m.isSaved = 1 " +
 					"AND c.isArchived = " + (archived ? "1 " : "0 ") +
+					"AND m.isStatusMessage = 0 " +
 					"GROUP BY m.identity");
 		}
 
@@ -870,7 +901,7 @@ public class ConversationServiceImpl implements ConversationService {
 			if (contactModel != null) {
 				final ContactMessageReceiver receiver = contactService.createReceiver(contactModel);
 				if(conversationModel == null) {
-					conversationModel = new ConversationModel(receiver);
+					conversationModel = new ConversationModel(context, receiver);
 					if (addToCache && !contactModel.isArchived()) {
 						synchronized (conversationCache) {
 							conversationCache.add(conversationModel);
@@ -922,7 +953,7 @@ public class ConversationServiceImpl implements ConversationService {
 			if (groupModel != null) {
 
 				if(conversationModel == null) {
-					conversationModel = new ConversationModel(receiver);
+					conversationModel = new ConversationModel(context, receiver);
 					if (addToCache && !groupModel.isArchived()) {
 						synchronized (conversationCache) {
 							conversationCache.add(conversationModel);
@@ -1003,7 +1034,7 @@ public class ConversationServiceImpl implements ConversationService {
 			if (distributionListModel != null) {
 
 				if(conversationModel == null) {
-					conversationModel = new ConversationModel(receiver);
+					conversationModel = new ConversationModel(context, receiver);
 					if (addToCache && !distributionListModel.isArchived() && !distributionListModel.isHidden()) {
 						synchronized (conversationCache) {
 							conversationCache.add(conversationModel);
@@ -1117,13 +1148,10 @@ public class ConversationServiceImpl implements ConversationService {
 			if (conversationModel.isGroupConversation() || conversationModel.isDistributionListConversation()) {
 				// do not remove groups and distribution list conversations from cache as they should still be accessible in message list
 				conversationModel.setMessageCount(0);
-			}
-			else {
-				if (conversationModel.getMessageCount() == 1) {
-					// remove model from cache completely
-					synchronized (this.conversationCache) {
-						this.conversationCache.remove(conversationModel);
-					}
+			} else {
+				// remove model from cache completely
+				synchronized (this.conversationCache) {
+					this.conversationCache.remove(conversationModel);
 				}
 			}
 		}
diff --git a/app/src/main/java/ch/threema/app/services/ConversationTagService.java b/app/src/main/java/ch/threema/app/services/ConversationTagService.java
index 877e088f..8b236cd0 100644
--- a/app/src/main/java/ch/threema/app/services/ConversationTagService.java
+++ b/app/src/main/java/ch/threema/app/services/ConversationTagService.java
@@ -21,10 +21,12 @@
 
 package ch.threema.app.services;
 
-import java.util.List;
-
 import androidx.annotation.NonNull;
 import androidx.annotation.Nullable;
+import androidx.annotation.WorkerThread;
+
+import java.util.List;
+
 import ch.threema.storage.models.ConversationModel;
 import ch.threema.storage.models.ConversationTagModel;
 import ch.threema.storage.models.TagModel;
@@ -53,7 +55,7 @@ public interface ConversationTagService {
 	/**
 	 * Untag the {@link ConversationModel} with the given {@link TagModel}
 	 */
-	boolean unTag(@Nullable ConversationModel conversation, @Nullable TagModel tagModel);
+	@WorkerThread boolean unTag(@Nullable ConversationModel conversation, @Nullable TagModel tagModel);
 
 	/**
 	 * Toggle the {@link TagModel} of the {@link ConversationModel}
diff --git a/app/src/main/java/ch/threema/app/services/ConversationTagServiceImpl.java b/app/src/main/java/ch/threema/app/services/ConversationTagServiceImpl.java
index cd595d59..22550d7f 100644
--- a/app/src/main/java/ch/threema/app/services/ConversationTagServiceImpl.java
+++ b/app/src/main/java/ch/threema/app/services/ConversationTagServiceImpl.java
@@ -21,11 +21,13 @@
 
 package ch.threema.app.services;
 
+import androidx.annotation.NonNull;
+import androidx.annotation.Nullable;
+import androidx.annotation.WorkerThread;
+
 import java.util.ArrayList;
 import java.util.List;
 
-import androidx.annotation.NonNull;
-import androidx.annotation.Nullable;
 import ch.threema.app.R;
 import ch.threema.app.listeners.ConversationListener;
 import ch.threema.app.managers.ListenerManager;
@@ -93,6 +95,7 @@ public class ConversationTagServiceImpl implements ConversationTagService {
 	}
 
 	@Override
+	@WorkerThread
 	public boolean unTag(@Nullable ConversationModel conversation, @Nullable TagModel tagModel) {
 		if (conversation != null && tagModel != null) {
 			if (this.isTaggedWith(conversation, tagModel)) {
diff --git a/app/src/main/java/ch/threema/app/services/DownloadServiceImpl.java b/app/src/main/java/ch/threema/app/services/DownloadServiceImpl.java
index d2e7f023..147cb7db 100644
--- a/app/src/main/java/ch/threema/app/services/DownloadServiceImpl.java
+++ b/app/src/main/java/ch/threema/app/services/DownloadServiceImpl.java
@@ -35,6 +35,7 @@ import java.io.FileInputStream;
 import java.io.FileOutputStream;
 import java.util.ArrayList;
 import java.util.Arrays;
+import java.util.List;
 
 import androidx.annotation.NonNull;
 import androidx.annotation.Nullable;
@@ -69,14 +70,14 @@ public class DownloadServiceImpl implements DownloadService {
 		}
 	}
 
-	private @Nullable ArrayList<Download> getDownloadsByMessageModelId(int messageModelId) {
+	private @NonNull List<Download> getDownloadsByMessageModelId(int messageModelId) {
 		ArrayList<Download> matchingDownloads = new ArrayList<>();
 		for (Download download: this.downloads) {
 			if (download.messageModelId == messageModelId) {
 				matchingDownloads.add(download);
 			}
 		}
-		return matchingDownloads.size() > 0 ? matchingDownloads : null;
+		return matchingDownloads;
 	}
 
 	private @Nullable Download getDownloadByBlobId(@NonNull byte[] blobId) {
@@ -100,8 +101,8 @@ public class DownloadServiceImpl implements DownloadService {
 
 	private boolean removeDownloadByMessageModelId(int messageModelId, boolean cancel) {
 		synchronized (this.downloads) {
-			ArrayList<Download> matchingDownloads = getDownloadsByMessageModelId(messageModelId);
-			if (matchingDownloads != null) {
+			List<Download> matchingDownloads = getDownloadsByMessageModelId(messageModelId);
+			if (!matchingDownloads.isEmpty()) {
 				for (Download download: matchingDownloads) {
 					logger.info("Blob {} remove downloader for message {}. Cancel = {}",
 						Utils.byteArrayToHexString(download.blobId),
@@ -201,14 +202,15 @@ public class DownloadServiceImpl implements DownloadService {
 										logger.info("Blob {} scheduled for marking as downloaded", blobIdHex);
 										try {
 											new Thread(() -> {
+												Download download;
 												synchronized (this.downloads) {
-													Download download = getDownloadByBlobId(blobId);
-													if (download != null) {
-														if (download.blobLoader != null) {
-															download.blobLoader.markAsDone(download.blobId);
-														}
-														logger.info("Blob {} marked as downloaded", blobIdHex);
+													download = getDownloadByBlobId(blobId);
+												}
+												if (download != null) {
+													if (download.blobLoader != null) {
+														download.blobLoader.markAsDone(download.blobId);
 													}
+													logger.info("Blob {} marked as downloaded", blobIdHex);
 												}
 											}, "MarkAsDownThread").start();
 										} catch (Exception ignored) {
@@ -277,7 +279,7 @@ public class DownloadServiceImpl implements DownloadService {
 	@Override
 	public boolean isDownloading(int messageModelId) {
 		synchronized (this.downloads) {
-			return getDownloadsByMessageModelId(messageModelId) != null;
+			return !getDownloadsByMessageModelId(messageModelId).isEmpty();
 		}
 	}
 
diff --git a/app/src/main/java/ch/threema/app/services/FileService.java b/app/src/main/java/ch/threema/app/services/FileService.java
index 062c75f9..2510a342 100644
--- a/app/src/main/java/ch/threema/app/services/FileService.java
+++ b/app/src/main/java/ch/threema/app/services/FileService.java
@@ -26,6 +26,12 @@ import android.graphics.Bitmap;
 import android.net.Uri;
 import android.view.View;
 
+import androidx.annotation.ColorInt;
+import androidx.annotation.NonNull;
+import androidx.annotation.Nullable;
+import androidx.annotation.WorkerThread;
+import androidx.appcompat.app.AppCompatActivity;
+
 import java.io.File;
 import java.io.IOException;
 import java.io.InputStream;
@@ -35,13 +41,9 @@ import java.util.concurrent.CopyOnWriteArrayList;
 
 import javax.crypto.CipherInputStream;
 
-import androidx.annotation.NonNull;
-import androidx.annotation.Nullable;
-import androidx.annotation.WorkerThread;
-import androidx.appcompat.app.AppCompatActivity;
 import ch.threema.app.cache.ThumbnailCache;
 import ch.threema.app.messagereceiver.MessageReceiver;
-import ch.threema.app.utils.ConfigUtils.AppTheme;
+import ch.threema.app.utils.ConfigUtils;
 import ch.threema.base.ThreemaException;
 import ch.threema.localcrypto.MasterKeyLockedException;
 import ch.threema.storage.models.AbstractMessageModel;
@@ -96,6 +98,8 @@ public interface FileService {
 	 */
 	File getTempPath();
 
+	File getIntTmpPath();
+
 	File getExtTmpPath();
 
 	/**
@@ -311,7 +315,7 @@ public interface FileService {
 	/**
 	 * return the "default" thumbnail
 	 */
-	Bitmap getDefaultMessageThumbnailBitmap(Context context, AbstractMessageModel messageModel, ThumbnailCache thumbnailCache, String mimeType, boolean returnNullIfNotCached);
+	Bitmap getDefaultMessageThumbnailBitmap(Context context, AbstractMessageModel messageModel, ThumbnailCache thumbnailCache, String mimeType, boolean returnNullIfNotCached, @ColorInt int tintColor);
 
 	/**
 	 * clear directory
@@ -353,8 +357,8 @@ public interface FileService {
 
 	void saveMedia(final AppCompatActivity activity, final View feedbackView, final CopyOnWriteArrayList<AbstractMessageModel> selectedMessages, boolean quiet);
 
-	void saveAppLogo(File logo, @AppTheme int theme);
-	File getAppLogo(@AppTheme int theme);
+	void saveAppLogo(File logo, @ConfigUtils.AppThemeSetting String theme);
+	File getAppLogo(@ConfigUtils.AppThemeSetting String theme);
 
 	@NonNull
 	Uri getTempShareFileUri(@NonNull Bitmap bitmap) throws IOException;
diff --git a/app/src/main/java/ch/threema/app/services/FileServiceImpl.java b/app/src/main/java/ch/threema/app/services/FileServiceImpl.java
index 491e2aae..7b8824f9 100644
--- a/app/src/main/java/ch/threema/app/services/FileServiceImpl.java
+++ b/app/src/main/java/ch/threema/app/services/FileServiceImpl.java
@@ -32,7 +32,6 @@ import android.content.SharedPreferences;
 import android.database.Cursor;
 import android.graphics.Bitmap;
 import android.graphics.BitmapFactory;
-import android.graphics.Color;
 import android.net.Uri;
 import android.os.AsyncTask;
 import android.os.Build;
@@ -44,6 +43,7 @@ import android.view.View;
 import android.webkit.MimeTypeMap;
 import android.widget.Toast;
 
+import androidx.annotation.ColorInt;
 import androidx.annotation.MainThread;
 import androidx.annotation.NonNull;
 import androidx.annotation.Nullable;
@@ -95,7 +95,6 @@ import ch.threema.app.ui.SingleToast;
 import ch.threema.app.utils.AndroidContactUtil;
 import ch.threema.app.utils.BitmapUtil;
 import ch.threema.app.utils.ConfigUtils;
-import ch.threema.app.utils.ConfigUtils.AppTheme;
 import ch.threema.app.utils.DialogUtil;
 import ch.threema.app.utils.FileUtil;
 import ch.threema.app.utils.IconUtil;
@@ -362,6 +361,16 @@ public class FileServiceImpl implements FileService {
 		return context.getCacheDir();
 	}
 
+	@Override
+	public File getIntTmpPath() {
+		File intTmpPath = new File(context.getFilesDir(), "tmp");
+
+		if (!intTmpPath.exists()) {
+			intTmpPath.mkdirs();
+		}
+		return intTmpPath;
+	}
+
 	@Override
 	public File getExtTmpPath() {
 		File extTmpPath = new File(context.getExternalFilesDir(null), "tmp");
@@ -404,7 +413,7 @@ public class FileServiceImpl implements FileService {
 			return;
 		}
 
-		Date thresholdDate = new Date(System.currentTimeMillis() - (15 * DateUtils.MINUTE_IN_MILLIS));
+		Date thresholdDate = new Date(System.currentTimeMillis() - (2 * DateUtils.HOUR_IN_MILLIS));
 
 		// this will crash if path is not a directory
 		try {
@@ -440,6 +449,7 @@ public class FileServiceImpl implements FileService {
 		logger.debug("Cleaning temp files");
 
 		cleanDirectory(getTempPath(), null);
+		cleanDirectory(getIntTmpPath(), null);
 		cleanDirectory(getExtTmpPath(), new Runnable() {
 			@Override
 			public void run() {
@@ -596,7 +606,7 @@ public class FileServiceImpl implements FileService {
 		if (is != null) {
 			FileOutputStream fos = null;
 			try {
-				File decrypted = new File(ConfigUtils.useContentUris() ? this.getTempPath() : this.getExtTmpPath(), messageModel.getApiMessageId() + "-" + filename);
+				File decrypted = new File(this.getTempPath(), messageModel.getApiMessageId() + "-" + filename);
 				fos = new FileOutputStream(decrypted);
 
 				IOUtils.copy(is, fos);
@@ -685,15 +695,18 @@ public class FileServiceImpl implements FileService {
 				} catch (Exception e) {
 					logger.error("Exception", e);
 				}
-				if (!TestUtil.empty(extension)) {
+				if (!TestUtil.empty(extension) && !"bin".equals(extension)) {
 					return "." + extension;
 				} else {
 					if (messageModel.getFileData().getFileName() != null) {
-						extension = MimeTypeMap.getFileExtensionFromUrl(messageModel.getFileData().getFileName());
-						if (!TestUtil.empty(extension)) {
-							return "." + extension;
+						String guessedExtension = MimeTypeMap.getFileExtensionFromUrl(messageModel.getFileData().getFileName());
+						if (!TestUtil.empty(guessedExtension)) {
+							return "." + guessedExtension;
 						}
 					}
+					if (!TestUtil.empty(extension)) {
+						return "." + extension;
+					}
 					return null;
 				}
 			default:
@@ -1230,7 +1243,8 @@ public class FileServiceImpl implements FileService {
 	}
 
 	@Override
-	public Bitmap getDefaultMessageThumbnailBitmap(Context context, AbstractMessageModel messageModel, ThumbnailCache thumbnailCache, String mimeType, boolean returnNullIfNotCached) {
+	@WorkerThread
+	public Bitmap getDefaultMessageThumbnailBitmap(Context context, AbstractMessageModel messageModel, ThumbnailCache thumbnailCache, String mimeType, boolean returnNullIfNotCached, @ColorInt int tintColor) {
 		if (thumbnailCache != null) {
 			Bitmap cached = thumbnailCache.get(messageModel.getId());
 			if (cached != null && !cached.isRecycled()) {
@@ -1247,7 +1261,7 @@ public class FileServiceImpl implements FileService {
 
 		Bitmap thumbnailBitmap = null;
 		if (icon != 0) {
-			thumbnailBitmap = BitmapUtil.getBitmapFromVectorDrawable(AppCompatResources.getDrawable(context, icon), Color.WHITE);
+			thumbnailBitmap = BitmapUtil.getBitmapFromVectorDrawable(AppCompatResources.getDrawable(context, icon), tintColor);
 		}
 
 		if (thumbnailBitmap != null && thumbnailCache != null) {
@@ -1311,7 +1325,7 @@ public class FileServiceImpl implements FileService {
 			if (srcFile != null && srcFile.exists()) {
 				String destFilePrefix = FileUtil.getMediaFilenamePrefix(messageModel);
 				String destFileExtension = getMediaFileExtension(messageModel);
-				File destFile = copyUriToTempFile(Uri.fromFile(srcFile), destFilePrefix, destFileExtension, !ConfigUtils.useContentUris());
+				File destFile = copyUriToTempFile(Uri.fromFile(srcFile), destFilePrefix, destFileExtension, false);
 
 				String filename = null;
 				if (messageModel.getType() == MessageType.FILE) {
@@ -1334,13 +1348,7 @@ public class FileServiceImpl implements FileService {
 	public Uri getShareFileUri(@NonNull File destFile, @Nullable String filename) {
 		if (destFile != null) {
 			// see https://code.google.com/p/android/issues/detail?id=76683
-			if (ConfigUtils.useContentUris()) {
-				/* content uri */
-				return NamedFileProvider.getUriForFile(ThreemaApplication.getAppContext(), ThreemaApplication.getAppContext().getPackageName() + ".fileprovider", destFile, filename);
-			} else {
-				/* file uri */
-				return Uri.fromFile(destFile);
-			}
+			return NamedFileProvider.getUriForFile(ThreemaApplication.getAppContext(), ThreemaApplication.getAppContext().getPackageName() + ".fileprovider", destFile, filename);
 		}
 		return null;
 	}
@@ -1538,7 +1546,7 @@ public class FileServiceImpl implements FileService {
 	}
 
 	@Override
-	public void saveAppLogo(File logo, @AppTheme int theme) {
+	public void saveAppLogo(File logo, @ConfigUtils.AppThemeSetting String theme) {
 		File existingLogo = this.getAppLogo(theme);
 		if(logo == null || !logo.exists()) {
 			//remove existing icon
@@ -1555,10 +1563,10 @@ public class FileServiceImpl implements FileService {
 	}
 
 	@Override
-	public File getAppLogo(@AppTheme int theme) {
+	public File getAppLogo(@ConfigUtils.AppThemeSetting String theme) {
 		String key = "light";
 
-		if(theme == ConfigUtils.THEME_DARK) {
+		if(ConfigUtils.THEME_DARK.equals(theme)) {
 			key = "dark";
 		}
 		return new File(getAppDataPathAbsolute(),"appicon_" + key + ".png");
diff --git a/app/src/main/java/ch/threema/app/services/GroupMessagingServiceImpl.java b/app/src/main/java/ch/threema/app/services/GroupMessagingServiceImpl.java
index fa45c51c..df9d0221 100644
--- a/app/src/main/java/ch/threema/app/services/GroupMessagingServiceImpl.java
+++ b/app/src/main/java/ch/threema/app/services/GroupMessagingServiceImpl.java
@@ -165,22 +165,22 @@ public class GroupMessagingServiceImpl implements GroupMessagingService {
 		// Enqueue every message
 		int enqueuedMessagesCount = 0;
 		for (AbstractGroupMessage groupMessage : pendingGroupMessages) {
+			if (groupMessage == null) {
+				logger.info("Cannot send group message because it is null");
+				continue;
+			}
 			logger.debug("Sending group message {}", groupMessage);
 			final MessageBox messageBox = this.messageQueue.enqueue(groupMessage);
-			if (messageBox == null) {
-				logger.info("Failed to enqueue group message to {}", groupMessage.getToIdentity());
-			} else {
-				enqueuedMessagesCount++;
-				if (logger.isDebugEnabled()) {
-					logger.debug(
-						"Outgoing group message ID {} from {} to {}",
-						messageBox.getMessageId(),
-						messageBox.getFromIdentity(),
-						messageBox.getToIdentity()
-					);
-					logger.debug("  Nonce: {}", Utils.byteArrayToHexString(messageBox.getNonce()));
-					logger.debug("  Data: {}", Utils.byteArrayToHexString(messageBox.getBox()));
-				}
+			enqueuedMessagesCount++;
+			logger.info(
+				"Enqueue group message {} of type {} to {}",
+				messageBox.getMessageId(),
+				Utils.byteToHex((byte) groupMessage.getType(), true, true),
+				messageBox.getToIdentity()
+			);
+			if (logger.isDebugEnabled()) {
+				logger.debug("  Nonce: {}", Utils.byteArrayToHexString(messageBox.getNonce()));
+				logger.debug("  Data: {}", Utils.byteArrayToHexString(messageBox.getBox()));
 			}
 		}
 
diff --git a/app/src/main/java/ch/threema/app/services/GroupService.java b/app/src/main/java/ch/threema/app/services/GroupService.java
index 2ec82212..6472cae1 100644
--- a/app/src/main/java/ch/threema/app/services/GroupService.java
+++ b/app/src/main/java/ch/threema/app/services/GroupService.java
@@ -94,15 +94,48 @@ public interface GroupService extends AvatarService<GroupModel> {
 		}
 	}
 
+	/**
+	 * The result of the common group receive steps.
+	 */
+	enum CommonGroupReceiveStepsResult {
+		/**
+		 * The common group receive steps succeeded.
+		 */
+		SUCCESS,
+
+		/**
+		 * The common group receive steps triggered a group sync request.
+		 */
+		SYNC_REQUEST_SENT,
+
+		/**
+		 * The message should be discarded.
+		 */
+		DISCARD_MESSAGE,
+	}
+
 	@Nullable GroupModel getById(int intExtra);
 
 	GroupModel getGroup(AbstractGroupMessage message) throws SQLException;
 
-	boolean requestSync(AbstractGroupMessage msg, boolean leaveIfMine);
+	/**
+	 * Run the common group receive steps. Note that we cache messages that have triggered a group
+	 * sync request to process them after we received the group setup message. The cached messages
+	 * should never be processed before running the common group receive steps successfully. To be
+	 * able to implement this behavior, we have {@link CommonGroupReceiveStepsResult#SYNC_REQUEST_SENT}
+	 * that is returned when a message could be cached.
+	 *
+	 * @param message the received message
+	 * @return {@link CommonGroupReceiveStepsResult#SUCCESS} if the steps completed successfully,
+	 * {@link CommonGroupReceiveStepsResult#SYNC_REQUEST_SENT} if a group sync request has been
+	 * sent, and {@link CommonGroupReceiveStepsResult#DISCARD_MESSAGE} if the steps failed and the
+	 * message should be discarded.
+	 */
+	CommonGroupReceiveStepsResult runCommonGroupReceiveSteps(AbstractGroupMessage message);
 
-	int requestSync(String groupCreator, GroupId groupId) throws ThreemaException;
+	boolean requestSync(AbstractGroupMessage msg);
 
-	boolean sendLeave(AbstractGroupMessage msg);
+	int requestSync(String groupCreator, GroupId groupId) throws ThreemaException;
 
 	GroupCreateMessageResult processGroupCreateMessage(GroupCreateMessage groupCreateMessage);
 
@@ -172,7 +205,7 @@ public interface GroupService extends AvatarService<GroupModel> {
 	 * @param groupModel Group model of the group
 	 * @return String array of identities (i.e. Threema IDs)
 	 */
-	@NonNull String[] getGroupIdentities(GroupModel groupModel);
+	@NonNull String[] getGroupIdentities(@NonNull GroupModel groupModel);
 	GroupMemberModel getGroupMember(GroupModel groupModel, String identity);
 	List<GroupMemberModel> getGroupMembers(GroupModel groupModel);
 
@@ -186,7 +219,7 @@ public interface GroupService extends AvatarService<GroupModel> {
 	GroupMessageReceiver createReceiver(GroupModel groupModel);
 
 	boolean isGroupOwner(GroupModel groupModel);
-	boolean isGroupMember(GroupModel groupModel);
+	boolean isGroupMember(@NonNull GroupModel groupModel);
 
 	GroupModel getByApiGroupIdAndCreator(@NonNull GroupId apiGroupId, @NonNull String creatorIdentity);
 
diff --git a/app/src/main/java/ch/threema/app/services/GroupServiceImpl.java b/app/src/main/java/ch/threema/app/services/GroupServiceImpl.java
index 9ee29f53..b743a62f 100644
--- a/app/src/main/java/ch/threema/app/services/GroupServiceImpl.java
+++ b/app/src/main/java/ch/threema/app/services/GroupServiceImpl.java
@@ -30,6 +30,11 @@ import android.text.format.DateUtils;
 import android.util.SparseArray;
 import android.widget.ImageView;
 
+import androidx.annotation.AnyThread;
+import androidx.annotation.ColorInt;
+import androidx.annotation.NonNull;
+import androidx.annotation.Nullable;
+
 import com.neilalexander.jnacl.NaCl;
 
 import org.apache.commons.io.IOUtils;
@@ -52,10 +57,6 @@ import java.util.List;
 import java.util.Map;
 import java.util.UUID;
 
-import androidx.annotation.AnyThread;
-import androidx.annotation.ColorInt;
-import androidx.annotation.NonNull;
-import androidx.annotation.Nullable;
 import ch.threema.app.BuildConfig;
 import ch.threema.app.R;
 import ch.threema.app.ThreemaApplication;
@@ -392,20 +393,65 @@ public class GroupServiceImpl implements GroupService {
 		return model;
 	}
 
+	@Override
+	public CommonGroupReceiveStepsResult runCommonGroupReceiveSteps(AbstractGroupMessage message) {
+		// 1. Look up the group
+		final GroupModel groupModel = getGroup(message);
+
+		// 2. Check if the group could be found
+		if (groupModel == null) {
+			if (TestUtil.compare(message.getGroupCreator(), userService.getIdentity())) {
+				// 1. If the user is the creator of the group (as alleged by received message),
+				// discard the received message and abort these steps
+				logger.info("Could not find group with me as creator");
+				return CommonGroupReceiveStepsResult.DISCARD_MESSAGE;
+			}
+			// 2. Send a group-sync-request to the group creator and cache the received message for
+			// processing after receiving the group-sync.
+			boolean syncSent = requestSync(message);
+			if (!syncSent) {
+				logger.warn("Got message for an unknown group and sync could not be sent");
+				return CommonGroupReceiveStepsResult.DISCARD_MESSAGE;
+			}
+			return CommonGroupReceiveStepsResult.SYNC_REQUEST_SENT;
+		}
+
+		// 3. Check if the group is left
+		if (!isGroupMember(groupModel)) {
+			if (isGroupOwner(groupModel)) {
+				// 1. If the user is the creator, send a group-setup with an empty
+				// members list back to the sender and discard the received message.
+				sendEmptySync(groupModel, message.getFromIdentity());
+				logger.info("Got a message in a left group where I am the creator");
+				return CommonGroupReceiveStepsResult.DISCARD_MESSAGE;
+			}
+			// 2. Send a group leave to the sender and discard the received message
+			sendLeaveToSender(message);
+			logger.info("Got a message in a left group");
+			return CommonGroupReceiveStepsResult.DISCARD_MESSAGE;
+		}
+
+		// 4. If the sender is not a member of the group and the user is the creator of the group,
+		// send a group-setup with an empty members list back to the sender and discard the received
+		// message.
+		if (!isGroupMember(groupModel, message.getFromIdentity())) {
+			if (isGroupOwner(groupModel)) {
+				sendEmptySync(groupModel, message.getFromIdentity());
+			}
+			logger.info("Got a message in a group from a sender that is not a member");
+			return CommonGroupReceiveStepsResult.DISCARD_MESSAGE;
+		}
+
+		return CommonGroupReceiveStepsResult.SUCCESS;
+	}
 
 	@Override
-	public boolean requestSync(AbstractGroupMessage msg, boolean leaveIfMine) {
+	public boolean requestSync(AbstractGroupMessage msg) {
 		if(msg != null) {
 
-			//do not send a request to myself
+			// Do not send a request to myself
 			if(TestUtil.compare(msg.getGroupCreator(), this.userService.getIdentity())) {
-				if(leaveIfMine) {
-					//auto leave
-					this.sendLeave(msg);
-				}
-				else {
-					return false;
-				}
+				return false;
 			}
 
 			try {
@@ -481,15 +527,13 @@ public class GroupServiceImpl implements GroupService {
 		);
 	}
 
-	@Override
-	public boolean sendLeave(AbstractGroupMessage msg) {
-		if(msg != null) {
+	private void sendLeaveToSender(AbstractGroupMessage msg) {
+		if (msg != null) {
 			try {
-				//send a leave to the creator!!
 				this.groupMessagingService.sendMessage(
 					msg.getApiGroupId(),
 					msg.getGroupCreator(),
-					new String[]{ msg.getFromIdentity(), msg.getGroupCreator() },
+					new String[]{msg.getFromIdentity()},
 					messageId -> {
 						final GroupLeaveMessage groupLeaveMessage = new GroupLeaveMessage();
 						groupLeaveMessage.setMessageId(messageId);
@@ -497,14 +541,10 @@ public class GroupServiceImpl implements GroupService {
 					},
 					null
 				);
-
-				return true;
 			} catch (ThreemaException e) {
 				logger.error("Exception", e);
 			}
-
 		}
-		return false;
 	}
 
 	@Override
@@ -629,7 +669,7 @@ public class GroupServiceImpl implements GroupService {
 		if (isNewGroup && this.blackListService != null && this.blackListService.has(groupCreateMessage.getFromIdentity())) {
 			logger.info("GroupCreateMessage {}: Received group create from blocked ID. Sending leave.", groupCreateMessage.getMessageId());
 
-			sendLeave(groupCreateMessage);
+			sendLeaveToSender(groupCreateMessage);
 
 			result.success = true;
 			return result;
@@ -1198,6 +1238,9 @@ public class GroupServiceImpl implements GroupService {
 
 		// Send rename message to group members if group owner
 		sendGroupRenameToIdentitiesIfOwner(group, getGroupIdentities(group));
+
+		// delete share target shortcut as name is different
+		ShortcutUtil.deleteShareTargetShortcut(getUniqueIdString(group.getId()));
 	}
 
 	private void sendGroupRenameToIdentitiesIfOwner(@NonNull GroupModel groupModel, @NonNull String[] identities) throws ThreemaException {
@@ -1344,7 +1387,7 @@ public class GroupServiceImpl implements GroupService {
 
 	@NonNull
 	@Override
-	public String[] getGroupIdentities(GroupModel groupModel) {
+	public String[] getGroupIdentities(@NonNull GroupModel groupModel) {
 		synchronized (this.groupIdentityCache) {
 			String[] existingIdentities = this.groupIdentityCache.get(groupModel.getId());
 			if(existingIdentities != null) {
@@ -1363,7 +1406,7 @@ public class GroupServiceImpl implements GroupService {
 		}
 	}
 
-	private boolean isGroupMember(GroupModel groupModel, String identity) {
+	private boolean isGroupMember(@NonNull GroupModel groupModel, String identity) {
 		if (!TestUtil.empty(identity)) {
 			for (String existingIdentity : this.getGroupIdentities(groupModel)) {
 				if (TestUtil.compare(existingIdentity, identity)) {
@@ -1375,7 +1418,7 @@ public class GroupServiceImpl implements GroupService {
 	}
 
 	@Override
-	public boolean isGroupMember(GroupModel groupModel) {
+	public boolean isGroupMember(@NonNull GroupModel groupModel) {
 		return isGroupMember(groupModel, userService.getIdentity());
 	}
 
diff --git a/app/src/main/java/ch/threema/app/services/MessageSendingService.java b/app/src/main/java/ch/threema/app/services/MessageSendingService.java
index 96e8fa4f..abf8eafb 100644
--- a/app/src/main/java/ch/threema/app/services/MessageSendingService.java
+++ b/app/src/main/java/ch/threema/app/services/MessageSendingService.java
@@ -22,6 +22,7 @@
 package ch.threema.app.services;
 
 import androidx.annotation.NonNull;
+
 import ch.threema.app.messagereceiver.MessageReceiver;
 import ch.threema.storage.models.AbstractMessageModel;
 
@@ -42,4 +43,5 @@ public interface MessageSendingService {
 	}
 
 	void addToQueue(MessageSendingProcess process);
+	void abort(String messageUid);
 }
diff --git a/app/src/main/java/ch/threema/app/services/MessageSendingServiceExponentialBackOff.java b/app/src/main/java/ch/threema/app/services/MessageSendingServiceExponentialBackOff.java
index 1a316bf4..99862067 100644
--- a/app/src/main/java/ch/threema/app/services/MessageSendingServiceExponentialBackOff.java
+++ b/app/src/main/java/ch/threema/app/services/MessageSendingServiceExponentialBackOff.java
@@ -23,6 +23,9 @@ package ch.threema.app.services;
 
 import org.slf4j.Logger;
 
+import java.util.HashMap;
+import java.util.concurrent.Future;
+
 import ch.threema.app.utils.ExponentialBackOffUtil;
 import ch.threema.base.utils.LoggingUtil;
 
@@ -30,6 +33,7 @@ public class MessageSendingServiceExponentialBackOff implements MessageSendingSe
 	private static final Logger logger = LoggingUtil.getThreemaLogger("MessageSendingServiceExponentialBackOff");
 
 	private final MessageSendingServiceState messageSendingServiceState;
+	private final HashMap<String, Future<?>> backoffFutures = new HashMap<>();
 
 	public MessageSendingServiceExponentialBackOff(MessageSendingServiceState messageSendingServiceState) {
 		this.messageSendingServiceState = messageSendingServiceState;
@@ -37,7 +41,8 @@ public class MessageSendingServiceExponentialBackOff implements MessageSendingSe
 
 	@Override
 	public void addToQueue(final MessageSendingProcess process) {
-		ExponentialBackOffUtil.getInstance().run(new ExponentialBackOffUtil.BackOffRunnable() {
+		logger.debug("{} Add message to queue", process.getMessageModel().getUid());
+		Future<?> backoffFuture = ExponentialBackOffUtil.getInstance().run(new ExponentialBackOffUtil.BackOffRunnable() {
 			@Override
 			public void run(int currentRetry) throws Exception {
 				try {
@@ -51,13 +56,43 @@ public class MessageSendingServiceExponentialBackOff implements MessageSendingSe
 
 			@Override
 			public void finished(int currentRetry) {
+				synchronized (backoffFutures) {
+					backoffFutures.remove(process.getMessageModel().getUid());
+				}
+				logger.debug("{} Exponential backoff finished successfully", process.getMessageModel().getUid());
+
 				messageSendingServiceState.processingFinished(process.getMessageModel(), process.getReceiver());
 			}
 
 			@Override
 			public void exception(Exception e, int currentRetry) {
+				synchronized (backoffFutures) {
+					backoffFutures.remove(process.getMessageModel().getUid());
+				}
+				logger.debug("{} Exponential backoff failed", process.getMessageModel().getUid());
+
 				messageSendingServiceState.processingFailed(process.getMessageModel(), process.getReceiver());
 			}
-		}, 5);
+		}, 5, process.getMessageModel().getUid());
+
+		if (backoffFuture != null) {
+			synchronized (backoffFutures) {
+				backoffFutures.put(process.getMessageModel().getUid(), backoffFuture);
+			}
+		}
+	}
+
+	@Override
+	public void abort(String messageUid) {
+		synchronized (backoffFutures) {
+			Future<?> backoffFuture = backoffFutures.get(messageUid);
+			if (backoffFuture != null) {
+				if (!backoffFuture.isCancelled() && !backoffFuture.isDone()) {
+					logger.debug("{} Cancelling backoff", messageUid);
+					backoffFuture.cancel(true);
+				}
+				backoffFutures.remove(messageUid);
+			}
+		}
 	}
 }
diff --git a/app/src/main/java/ch/threema/app/services/MessageService.java b/app/src/main/java/ch/threema/app/services/MessageService.java
index bb1525cf..27372319 100644
--- a/app/src/main/java/ch/threema/app/services/MessageService.java
+++ b/app/src/main/java/ch/threema/app/services/MessageService.java
@@ -162,7 +162,22 @@ public interface MessageService {
 	@WorkerThread
 	boolean sendUserAcknowledgement(@NonNull AbstractMessageModel messageModel, boolean markAsRead);
 
-	boolean sendProfilePicture(MessageReceiver[] messageReceivers);
+	/**
+	 * Send the profile picture to the receiver of the message if the conditions are met to send it.
+	 *
+	 * @param message the message that may trigger sending the profile picture
+	 */
+	void executeProfilePictureDistribution(@NonNull AbstractMessage message);
+
+	/**
+	 * Send the profile picture to the given contact. This method does not check if it should send
+	 * the profile picture according to the user profile distribution rules. If there is no profile
+	 * picture set, then a contact delete photo message is sent.
+	 *
+	 * @param contactModel the contact the photo is sent to
+	 * @return true if the profile picture has been sent successfully, false otherwise
+	 */
+	boolean sendProfilePicture(@NonNull ContactModel contactModel);
 
 	void resendMessage(AbstractMessageModel messageModel, MessageReceiver receiver, CompletionHandler completionHandler) throws Exception;
 
@@ -173,7 +188,7 @@ public interface MessageService {
 
 	void updateMessageState(@NonNull final MessageId apiMessageId, MessageState state, @NonNull DeliveryReceiptMessage stateMessage);
 	void updateGroupMessageState(@NonNull final MessageId apiMessageId, @NonNull MessageState state, @NonNull GroupDeliveryReceiptMessage stateMessage);
-	void updateMessageStateForOutgoingMessage(final MessageId apiMessageId, MessageState state, Date stateDate);
+	@Nullable AbstractMessageModel updateMessageStateForOutgoingMessage(@NonNull final MessageId apiMessageId, @NonNull MessageState state, @Nullable Date stateDate, @NonNull String recipientIdentity);
 	boolean markAsRead(AbstractMessageModel message, boolean silent) throws ThreemaException;
 
 	@WorkerThread
@@ -219,7 +234,6 @@ public interface MessageService {
 	void save(AbstractMessageModel messageModel);
 
 	void markConversationAsRead(MessageReceiver messageReceiver, NotificationService notificationService);
-	void markMessageAsRead(AbstractMessageModel abstractMessageModel, NotificationService notificationService);
 
 	/**
 	 * count all message records (normal, group and distribution lists)
@@ -230,7 +244,7 @@ public interface MessageService {
 	boolean viewMediaMessage(Context context, AbstractMessageModel model, Uri uri);
 	boolean shareTextMessage(Context context, AbstractMessageModel model);
 	AbstractMessageModel getMessageModelFromId(int id, String type);
-	@Nullable AbstractMessageModel getMessageModelByApiMessageId(String id, @MessageReceiver.MessageReceiverType int type);
+	@Nullable AbstractMessageModel getMessageModelByApiMessageIdAndReceiver(@Nullable String id, @NonNull MessageReceiver messageReceiver);
 
 	void cancelVideoTranscoding(AbstractMessageModel messageModel);
 
diff --git a/app/src/main/java/ch/threema/app/services/MessageServiceImpl.java b/app/src/main/java/ch/threema/app/services/MessageServiceImpl.java
index 16f44316..ae055851 100644
--- a/app/src/main/java/ch/threema/app/services/MessageServiceImpl.java
+++ b/app/src/main/java/ch/threema/app/services/MessageServiceImpl.java
@@ -21,6 +21,21 @@
 
 package ch.threema.app.services;
 
+import static ch.threema.app.ThreemaApplication.MAX_BLOB_SIZE;
+import static ch.threema.app.ThreemaApplication.MAX_BLOB_SIZE_MB;
+import static ch.threema.app.services.PreferenceService.ImageScale_DEFAULT;
+import static ch.threema.app.ui.MediaItem.TIME_UNDEFINED;
+import static ch.threema.app.ui.MediaItem.TYPE_FILE;
+import static ch.threema.app.ui.MediaItem.TYPE_GIF;
+import static ch.threema.app.ui.MediaItem.TYPE_IMAGE;
+import static ch.threema.app.ui.MediaItem.TYPE_IMAGE_CAM;
+import static ch.threema.app.ui.MediaItem.TYPE_LOCATION;
+import static ch.threema.app.ui.MediaItem.TYPE_TEXT;
+import static ch.threema.app.ui.MediaItem.TYPE_VIDEO;
+import static ch.threema.app.ui.MediaItem.TYPE_VIDEO_CAM;
+import static ch.threema.app.ui.MediaItem.TYPE_VOICEMESSAGE;
+import static ch.threema.domain.protocol.csp.messages.file.FileData.RENDERING_STICKER;
+
 import android.annotation.SuppressLint;
 import android.app.Activity;
 import android.content.ActivityNotFoundException;
@@ -71,11 +86,9 @@ import java.util.Collection;
 import java.util.Collections;
 import java.util.Date;
 import java.util.HashMap;
-import java.util.HashSet;
 import java.util.Iterator;
 import java.util.List;
 import java.util.Map;
-import java.util.Set;
 import java.util.concurrent.CopyOnWriteArrayList;
 
 import javax.crypto.CipherInputStream;
@@ -90,6 +103,7 @@ import ch.threema.app.exceptions.NotAllowedException;
 import ch.threema.app.exceptions.TranscodeCanceledException;
 import ch.threema.app.managers.ListenerManager;
 import ch.threema.app.messagereceiver.ContactMessageReceiver;
+import ch.threema.app.messagereceiver.DistributionListMessageReceiver;
 import ch.threema.app.messagereceiver.GroupMessageReceiver;
 import ch.threema.app.messagereceiver.MessageReceiver;
 import ch.threema.app.processors.MessageAckProcessor;
@@ -130,7 +144,6 @@ import ch.threema.domain.models.GroupId;
 import ch.threema.domain.models.MessageId;
 import ch.threema.domain.protocol.blob.BlobUploader;
 import ch.threema.domain.protocol.csp.ProtocolDefines;
-import ch.threema.domain.protocol.csp.coders.MessageBox;
 import ch.threema.domain.protocol.csp.connection.MessageQueue;
 import ch.threema.domain.protocol.csp.connection.MessageTooLongException;
 import ch.threema.domain.protocol.csp.fs.ForwardSecurityMessageProcessor;
@@ -142,9 +155,6 @@ import ch.threema.domain.protocol.csp.messages.BoxImageMessage;
 import ch.threema.domain.protocol.csp.messages.BoxLocationMessage;
 import ch.threema.domain.protocol.csp.messages.BoxTextMessage;
 import ch.threema.domain.protocol.csp.messages.BoxVideoMessage;
-import ch.threema.domain.protocol.csp.messages.ContactDeletePhotoMessage;
-import ch.threema.domain.protocol.csp.messages.ContactRequestPhotoMessage;
-import ch.threema.domain.protocol.csp.messages.ContactSetPhotoMessage;
 import ch.threema.domain.protocol.csp.messages.DeliveryReceiptMessage;
 import ch.threema.domain.protocol.csp.messages.GroupAudioMessage;
 import ch.threema.domain.protocol.csp.messages.GroupDeliveryReceiptMessage;
@@ -189,22 +199,6 @@ import ch.threema.storage.models.data.status.ForwardSecurityStatusDataModel;
 import ch.threema.storage.models.data.status.GroupCallStatusDataModel;
 import ch.threema.storage.models.data.status.VoipStatusDataModel;
 
-import static ch.threema.app.ThreemaApplication.MAX_BLOB_SIZE;
-import static ch.threema.app.ThreemaApplication.MAX_BLOB_SIZE_MB;
-import static ch.threema.app.services.PreferenceService.ImageScale_DEFAULT;
-import static ch.threema.app.ui.MediaItem.TIME_UNDEFINED;
-import static ch.threema.app.ui.MediaItem.TYPE_FILE;
-import static ch.threema.app.ui.MediaItem.TYPE_GIF;
-import static ch.threema.app.ui.MediaItem.TYPE_IMAGE;
-import static ch.threema.app.ui.MediaItem.TYPE_IMAGE_CAM;
-import static ch.threema.app.ui.MediaItem.TYPE_LOCATION;
-import static ch.threema.app.ui.MediaItem.TYPE_TEXT;
-import static ch.threema.app.ui.MediaItem.TYPE_VIDEO;
-import static ch.threema.app.ui.MediaItem.TYPE_VIDEO_CAM;
-import static ch.threema.app.ui.MediaItem.TYPE_VOICEMESSAGE;
-import static ch.threema.domain.protocol.csp.messages.file.FileData.RENDERING_STICKER;
-import static ch.threema.storage.models.data.status.ForwardSecurityStatusDataModel.ForwardSecurityStatusType.MESSAGE_WITHOUT_FORWARD_SECURITY;
-
 public class MessageServiceImpl implements MessageService {
 	private static final Logger logger = LoggingUtil.getThreemaLogger("MessageServiceImpl");
 
@@ -421,7 +415,7 @@ public class MessageServiceImpl implements MessageService {
 
 		final AbstractMessageModel model = receiver.createLocalModel(
 			MessageType.FORWARD_SECURITY_STATUS,
-			MessageContentsType.GROUP_CALL_STATUS,
+			MessageContentsType.FORWARD_SECURITY_STATUS,
 			new Date()
 		);
 		model.setOutbox(false);
@@ -567,163 +561,139 @@ public class MessageServiceImpl implements MessageService {
 		return messageModel;
 	}
 
-	/**
-	 * Add provided contact to a list of contacts
-	 * - if it never received our profile picture
-	 * - if our profile pic was updated since it last received it
-	 *
-	 * @param contacts List of contacts to add "contact" to if it should receive the profile picture
-	 * @param contact ContactModel to examine
-	 * @param lastUpdated Date our profile pic was last updated
-	 * @return updated contacts
-	 */
-	private Set<ContactModel> addProfilePicRecipient(Set<ContactModel> contacts, ContactModel contact, UserService userService, @Nullable Date lastUpdated) {
-		if (contact != null && lastUpdated != null) {
-			String identity = contact.getIdentity();
-			if (!userService.getIdentity().equals(identity)) {
-				if (preferenceService.getProfilePicRelease() == PreferenceService.PROFILEPIC_RELEASE_EVERYONE ||
-						(preferenceService.getProfilePicRelease() == PreferenceService.PROFILEPIC_RELEASE_SOME &&
-						profilePicRecipientsService.has(identity))) {
-					Date profilePicSentDate = contact.getProfilePicSentDate();
-
-					if (profilePicSentDate == null || lastUpdated.after(profilePicSentDate)) {
-						contacts.add(contact);
-					}
-				}
-			}
-		}
-		return contacts;
-	}
-
 	@Override
-	public boolean sendProfilePicture(MessageReceiver[] messageReceivers) {
-		if (messageReceivers.length > 0) {
-			UserService userService;
-			try {
-				userService = ThreemaApplication.requireServiceManager().getUserService();
-				if (userService == null) {
-					return false;
-				}
-			} catch (Exception e) {
-				return false;
-			}
+	public void executeProfilePictureDistribution(@NonNull AbstractMessage message) {
+		// Step 1: abort if message does not allow user profile distribution
+		if (!message.allowUserProfileDistribution()) {
+			return;
+		}
 
-			Date lastUpdated = preferenceService.getProfilePicLastUpdate();
+		String toIdentity = message.getToIdentity();
 
-			// create array of receivers that need an update
-			Set<ContactModel> outdatedContacts = new HashSet<>();
-			Set<ContactModel> restoredContacts = new HashSet<>();
+		ContactModel contactModel = contactService.getByIdentity(toIdentity);
+		if (contactModel == null) {
+			logger.warn("Cannot send profile picture: ");
+			return;
+		}
 
-			for (MessageReceiver messageReceiver : messageReceivers) {
-				if (messageReceiver instanceof ContactMessageReceiver) {
-					ContactModel contactModel = ((ContactMessageReceiver) messageReceiver).getContact();
-					if (contactModel.isRestored()) {
-						restoredContacts.add(contactModel);
-					}
+		// Step 2: abort if the contact's id is ECHOECHO or a Gateway ID
+		if (ContactUtil.isEchoEchoOrChannelContact(contactModel)) {
+			logger.info("Contact {} should not receive the profile picture", toIdentity);
+			return;
+		}
 
-					if (!ContactUtil.canReceiveProfilePics(contactModel)) {
-						continue;
-					}
-					outdatedContacts = addProfilePicRecipient(outdatedContacts, contactModel, userService, lastUpdated);
-				} else if (messageReceiver instanceof GroupMessageReceiver) {
-					GroupModel groupModel = ((GroupMessageReceiver) messageReceiver).getGroup();
-					if (groupModel != null) {
-						for (ContactModel contactModel : groupService.getMembers(groupModel)) {
-							if (contactModel.isRestored()) {
-								restoredContacts.add(contactModel);
-							}
-							outdatedContacts = addProfilePicRecipient(outdatedContacts, contactModel, userService, lastUpdated);
-						}
-					}
-				}
+		// If the contact has been restored, send a photo request message and mark contact as not
+		// restored if successful. Don't do this for ECHOECHO or channel IDs.
+		if (contactModel.isRestored()) {
+			if (sendContactRequestPhotoMessage(contactModel)) {
+				contactModel.setIsRestored(false);
+				contactService.save(contactModel);
 			}
+		}
 
-			if (restoredContacts.size() > 0) {
-				/* as the other party doesn't know that we restored his contact from a backup we send him a request profile photo
-				 * message causing him to re-send the profile pic at his earliest convenience, i.e. accompanying a regular message
-				 * */
-				for (ContactModel contactModel : restoredContacts) {
-					final String identity = contactModel.getIdentity();
-					final boolean isEchoecho = ThreemaApplication.ECHO_USER_IDENTITY.equals(identity);
-					final boolean isGatewayId = ContactUtil.isChannelContact(identity);
-					if (isEchoecho || isGatewayId) {
-						// Don't send profile picture requests to ECHOECHO or to gateway IDs
-						continue;
-					}
-					ContactRequestPhotoMessage msg = new ContactRequestPhotoMessage();
-					msg.setToIdentity(identity);
-
-					logger.info("Enqueue request profile picture message ID {} to {}", msg.getMessageId(), msg.getToIdentity());
-					MessageBox messageBox = null;
-					try {
-						messageBox = messageQueue.enqueue(msg);
-					} catch (ThreemaException e) {
-						logger.error("Failed to enqueue profile picture request message", e);
-					}
+		// Step 3: abort the contact should not receive the profile picture according to settings
+		if (!contactService.isContactAllowedToReceiveProfilePicture(contactModel)) {
+			logger.info("Contact {} should not receive the profile picture", toIdentity);
+			return;
+		}
 
-					if (messageBox != null) {
-						contactModel.setIsRestored(false);
-						contactService.save(contactModel);
-					}
-				}
-			}
+		// Step 4: upload profile picture to blob server if no valid cached blob id exists
+		ContactService.ProfilePictureUploadData data = contactService.getUpdatedProfilePictureUploadData();
+		if (data.blobId == null) {
+			logger.warn("Blob ID is null; abort profile picture distribution");
+			return;
+		}
 
-			if (preferenceService.getProfilePicRelease() != PreferenceService.PROFILEPIC_RELEASE_NOBODY) {
-				if (outdatedContacts.size() > 0) {
-					String tag = "sendProfileImageMessage";
-					logger.info(tag + ": start");
+		// Step 5: If the currently cached blob ID equals the blob ID that was most recently
+		// distributed to the contact, abort these steps
+		if (Arrays.equals(data.blobId, contactModel.getProfilePicBlobID())) {
+			logger.debug("Contact {} already has the latest profile picture", toIdentity);
+			return;
+		}
 
-					ContactModel myContactModel = contactService.getByIdentity(userService.getIdentity());
-					Bitmap image = contactService.getAvatar(myContactModel, true, false);
+		// Step 6 and 7: Send a set-profile-picture message to the contact using the cached blob ID
+		// and store the blob ID as the most recently used blob ID for this contact
+		if (data.blobId != ContactModel.NO_PROFILE_PICTURE_BLOB_ID) {
+			if (!sendContactSetProfilePictureMessage(data, contactModel)) {
+				logger.warn("Could not enqueue set profile picture message");
+				return;
+			}
+		} else {
+			if (!sendContactDeleteProfilePictureMessage(contactModel)) {
+				logger.warn("Could not enqueue delete profile picture message");
+				return;
+			}
+		}
 
-					if (image != null) {
-						try {
-							ContactServiceImpl.ContactPhotoUploadResult result = contactService.uploadContactPhoto(image);
+		logger.info("Profile picture successfully sent to {}", toIdentity);
+	}
 
-							for (ContactModel contactModel : outdatedContacts) {
-								ContactSetPhotoMessage msg = new ContactSetPhotoMessage();
-								msg.setBlobId(result.blobId);
-								msg.setEncryptionKey(result.encryptionKey);
-								msg.setSize(result.size);
-								msg.setToIdentity(contactModel.getIdentity());
+	@Override
+	public boolean sendProfilePicture(@NonNull ContactModel contactModel) {
+		ContactService.ProfilePictureUploadData data = contactService.getUpdatedProfilePictureUploadData();
+		if (data.blobId == null) {
+			logger.warn("Blob ID is null; cannot send profile picture");
+			return false;
+		}
 
-								logger.info("Enqueue profile picture message ID {} to {}", msg.getMessageId(), msg.getToIdentity());
-								MessageBox messageBox = messageQueue.enqueue(msg);
+		if (Arrays.equals(data.blobId, ContactModel.NO_PROFILE_PICTURE_BLOB_ID)) {
+			return sendContactDeleteProfilePictureMessage(contactModel);
+		} else {
+			return sendContactSetProfilePictureMessage(data, contactModel);
+		}
+	}
 
-								if (messageBox != null) {
-									contactModel.setProfilePicSentDate(new Date());
-									contactService.save(contactModel);
-								}
-							}
-						} catch (Exception e) {
-							logger.error("Exception", e);
-						}
-					} else {
-						// local avatar has been removed - send a Delete Photo message
-						for (ContactModel contactModel : outdatedContacts) {
-							ContactDeletePhotoMessage msg = new ContactDeletePhotoMessage();
-							msg.setToIdentity(contactModel.getIdentity());
-
-							logger.info("Enqueue remove profile picture message ID {} to {}", msg.getMessageId(), msg.getToIdentity());
-							try {
-								MessageBox messageBox = messageQueue.enqueue(msg);
-								if (messageBox != null) {
-									contactModel.setProfilePicSentDate(new Date());
-									contactService.save(contactModel);
-								}
-							} catch (ThreemaException e) {
-								logger.error("Exception", e);
-							}
-						}
-					}
-				}
-			}
+	/**
+	 * Send a set-profile-picture message to the given contact using the given upload data. This
+	 * method also updates the most recently used blob ID for the contact.
+	 *
+	 * @return true if the set-profile-picture message has been sent successfully, false otherwise
+	 */
+	private boolean sendContactSetProfilePictureMessage(@NonNull ContactService.ProfilePictureUploadData data, @NonNull ContactModel contactModel) {
+		try {
+			contactService.createReceiver(contactModel).sendSetProfilePictureMessage(data);
+			// Store blob ID to contact
+			contactModel.setProfilePicBlobID(data.blobId);
+			contactService.save(contactModel);
+			return true;
+		} catch (ThreemaException e) {
+			logger.error("Could not enqueue profile picture message", e);
 		}
+		return false;
+	}
 
-		//invalid image
+	/**
+	 * Send a delete-profile-picture message to the given contact using the given upload data. This
+	 * method also updates the most recently used blob ID for the contact.
+	 *
+	 * @return true if the delete-profile-picture message has been sent successfully, false otherwise
+	 */
+	private boolean sendContactDeleteProfilePictureMessage(@NonNull ContactModel contactModel) {
+		logger.info("Send delete profile picture message to {}", contactModel.getIdentity());
+		try {
+			contactService.createReceiver(contactModel).sendDeleteProfilePictureMessage();
+			// If the delete photo message was sent successfully, store empty byte array as the
+			// most recently sent blob ID.
+			contactModel.setProfilePicBlobID(ContactModel.NO_PROFILE_PICTURE_BLOB_ID);
+			contactService.save(contactModel);
+			return true;
+		} catch (ThreemaException e) {
+			logger.error("Exception", e);
+		}
 		return false;
 	}
 
+	private boolean sendContactRequestPhotoMessage(@NonNull ContactModel contactModel) {
+		logger.info("Send request profile picture message to {}", contactModel.getIdentity());
+		try {
+			contactService.createReceiver(contactModel).sendRequestProfilePictureMessage();
+			return true;
+		} catch (ThreemaException e) {
+			logger.error("Failed to enqueue profile picture request message", e);
+			return false;
+		}
+	}
+
 	@Override
 	@WorkerThread
 	public void resendMessage(@NonNull AbstractMessageModel messageModel, @NonNull MessageReceiver receiver, CompletionHandler completionHandler) throws Exception {
@@ -983,24 +953,26 @@ public class MessageServiceImpl implements MessageService {
 		return false;
 	}
 
-	private void sendDeliveryReceipts(@NonNull AbstractMessageModel messageModel, int type) throws ThreemaException {
+	private boolean sendDeliveryReceipts(@NonNull AbstractMessageModel messageModel, int type) throws ThreemaException {
 		if (messageModel instanceof GroupMessageModel) {
-			sendGroupDeliveryReceipt((GroupMessageModel) messageModel, type);
+			return sendGroupDeliveryReceipt((GroupMessageModel) messageModel, type);
 		} else {
-			sendDeliveryReceipt(messageModel, type);
+			return sendDeliveryReceipt(messageModel, type);
 		}
 	}
 
-	private void sendDeliveryReceipt(@NonNull AbstractMessageModel messageModel, int type) throws ThreemaException {
-		DeliveryReceiptMessage receipt = new DeliveryReceiptMessage();
-		receipt.setReceiptType(type);
+	private boolean sendDeliveryReceipt(@NonNull AbstractMessageModel messageModel, int type) throws ThreemaException {
+		ContactModel contactModel = contactService.getByIdentity(messageModel.getIdentity());
+		if (contactModel == null) {
+			logger.error("Cannot get contact {} for sending the delivery receipt", messageModel.getIdentity());
+			return false;
+		}
 
-		receipt.setReceiptMessageIds(new MessageId[]{MessageId.fromString(messageModel.getApiMessageId())});
-		receipt.setFromIdentity(identityStore.getIdentity());
-		receipt.setToIdentity(messageModel.getIdentity());
-		logger.info("Enqueue delivery receipt ({}) message ID {} to {} for message ID {}",
-			type, receipt.getMessageId(), receipt.getToIdentity(), receipt.getReceiptMessageIds()[0]);
-		messageQueue.enqueue(receipt);
+		contactService.createReceiver(contactModel).sendDeliveryReceipt(
+			type,
+			new MessageId[]{MessageId.fromString(messageModel.getApiMessageId())}
+		);
+		return true;
 	}
 
 	/**
@@ -1009,11 +981,11 @@ public class MessageServiceImpl implements MessageService {
 	 * @param receiptType Type of receipt (currently only ACK and DEC are supported for groups)
 	 * @throws ThreemaException
 	 */
-	private void sendGroupDeliveryReceipt(@NonNull GroupMessageModel messageModel, int receiptType) throws ThreemaException {
+	private boolean sendGroupDeliveryReceipt(@NonNull GroupMessageModel messageModel, int receiptType) throws ThreemaException {
 		GroupModel groupModel = groupService.getById(messageModel.getGroupId());
 		if (groupModel == null) {
 			logger.info("Unable to find group for message ID {}", messageModel.getApiMessageId());
-			return;
+			return false;
 		}
 
 		String[] memberIdentities = groupService.getGroupIdentities(groupModel);
@@ -1031,6 +1003,7 @@ public class MessageServiceImpl implements MessageService {
 				messageQueue.enqueue(receipt);
 			}
 		}
+		return true;
 	}
 
 	private boolean sendQuickReaction(@NonNull AbstractMessageModel messageModel, boolean markAsRead, int receiptType, @NonNull MessageState newMessageState) {
@@ -1039,7 +1012,10 @@ public class MessageServiceImpl implements MessageService {
 				markAsRead(messageModel, true);
 			}
 
-			sendDeliveryReceipts(messageModel, receiptType);
+			if (!sendDeliveryReceipts(messageModel, receiptType)) {
+				logger.error("Failed to send delivery receipt");
+				return false;
+			}
 			messageModel.setState(newMessageState);
 
 			if (messageModel instanceof GroupMessageModel && identityStore != null && identityStore.getIdentity() != null) {
@@ -1117,13 +1093,14 @@ public class MessageServiceImpl implements MessageService {
 		return null;
 	}
 
-	private AbstractMessageModel getAbstractMessageModelByApiIdAndOutbox(final MessageId apiMessageId) {
+	private AbstractMessageModel getAbstractMessageModelByApiIdAndOutbox(final MessageId apiMessageId, @NonNull String recipientIdentity) {
 		//contact message cache
 		synchronized (contactMessageCache) {
 			AbstractMessageModel messageModel = Functional.select(contactMessageCache, m -> m.getApiMessageId() != null
-					&& m.getApiMessageId().equals(apiMessageId.toString())
-					&& m.isOutbox());
-			if(messageModel != null) {
+				&& m.getApiMessageId().equals(apiMessageId.toString())
+				&& recipientIdentity.equals(m.getIdentity())
+				&& m.isOutbox());
+			if (messageModel != null) {
 				return messageModel;
 			}
 		}
@@ -1131,24 +1108,27 @@ public class MessageServiceImpl implements MessageService {
 		//group message cache
 		synchronized (groupMessageCache) {
 			AbstractMessageModel messageModel = Functional.select(groupMessageCache, m -> m.getApiMessageId() != null
-					&& m.getApiMessageId().equals(apiMessageId.toString())
-					&& m.isOutbox());
+				&& m.getApiMessageId().equals(apiMessageId.toString())
+				&& recipientIdentity.equals(m.getIdentity())
+				&& m.isOutbox());
 
-			if(messageModel != null) {
+			if (messageModel != null) {
 				return messageModel;
 			}
 		}
 
-		MessageModel contactMessageModel = databaseServiceNew.getMessageModelFactory().getByApiMessageIdAndIsOutbox(
+		MessageModel contactMessageModel = databaseServiceNew.getMessageModelFactory().getByApiMessageIdAndIdentityAndIsOutbox(
 				apiMessageId,
+				recipientIdentity,
 				true);
 		if(contactMessageModel != null) {
 			cache(contactMessageModel);
 			return contactMessageModel;
 		}
 
-		GroupMessageModel groupMessageModel = databaseServiceNew.getGroupMessageModelFactory().getByApiMessageIdAndIsOutbox(
+		GroupMessageModel groupMessageModel = databaseServiceNew.getGroupMessageModelFactory().getByApiMessageIdAndIdentityAndIsOutbox(
 				apiMessageId,
+				recipientIdentity,
 				true);
 		if(groupMessageModel != null) {
 			cache(groupMessageModel);
@@ -1204,14 +1184,17 @@ public class MessageServiceImpl implements MessageService {
 	 * @param apiMessageId API Message ID of message to update
 	 * @param state New state
 	 * @param stateDate Date of state change
+	 * @param recipientIdentity the identity of the message's recipient
+	 * @return the message that was updated, if any
 	 */
 	@Override
-	public void updateMessageStateForOutgoingMessage(
+	public @Nullable AbstractMessageModel updateMessageStateForOutgoingMessage(
 		@NonNull MessageId apiMessageId,
 		@NonNull MessageState state,
-		@Nullable Date stateDate
+		@Nullable Date stateDate,
+		@NonNull String recipientIdentity
 	) {
-		final AbstractMessageModel messageModel = getAbstractMessageModelByApiIdAndOutbox(apiMessageId);
+		final AbstractMessageModel messageModel = getAbstractMessageModelByApiIdAndOutbox(apiMessageId, recipientIdentity);
 		if (messageModel == null) {
 			//try to select a group message
 			GroupMessagePendingMessageIdModel groupMessagePendingMessageIdModel = databaseServiceNew
@@ -1223,6 +1206,7 @@ public class MessageServiceImpl implements MessageService {
 		} else {
 			updateMessageState(messageModel, state, stateDate);
 		}
+		return messageModel;
 	}
 
 	private void updateMessageState(
@@ -1342,16 +1326,14 @@ public class MessageServiceImpl implements MessageService {
 
 			saved = true;
 
-			if (sendDeliveryReceipt) {
-				DeliveryReceiptMessage receipt = new DeliveryReceiptMessage();
-				receipt.setReceiptType(ProtocolDefines.DELIVERYRECEIPT_MSGREAD);
+			if (sendDeliveryReceipt && contactModel != null) {
+				contactService.createReceiver(contactModel).sendDeliveryReceipt(
+					ProtocolDefines.DELIVERYRECEIPT_MSGREAD,
+					new MessageId[]{MessageId.fromString(message.getApiMessageId())}
+				);
 
-				receipt.setReceiptMessageIds(new MessageId[]{MessageId.fromString(message.getApiMessageId())});
-				receipt.setFromIdentity(identityStore.getIdentity());
-				receipt.setToIdentity(message.getIdentity());
-				logger.info("Enqueue delivery receipt (read) message ID {} for message ID {} from {}",
-					receipt.getMessageId(), receipt.getReceiptMessageIds()[0], receipt.getToIdentity());
-				messageQueue.enqueue(receipt);
+				logger.info("Enqueue delivery receipt (read) message for message ID {} from {}",
+					message.getApiMessageId(), contactModel.getIdentity());
 			}
 		}
 
@@ -1374,18 +1356,20 @@ public class MessageServiceImpl implements MessageService {
 			saved = true;
 
 			if (BuildConfig.SEND_CONSUMED_DELIVERY_RECEIPTS) {
+				ContactModel contactModel = contactService.getByIdentity(message.getIdentity());
 				if (preferenceService.isReadReceipts()
 					&& message instanceof MessageModel
-					&& !((message.getMessageFlags() & ProtocolDefines.MESSAGE_FLAG_NO_DELIVERY_RECEIPTS) == ProtocolDefines.MESSAGE_FLAG_NO_DELIVERY_RECEIPTS)) {
-					DeliveryReceiptMessage receipt = new DeliveryReceiptMessage();
-					receipt.setReceiptType(ProtocolDefines.DELIVERYRECEIPT_MSGCONSUMED);
-
-					receipt.setReceiptMessageIds(new MessageId[]{MessageId.fromString(message.getApiMessageId())});
-					receipt.setFromIdentity(identityStore.getIdentity());
-					receipt.setToIdentity(message.getIdentity());
-					logger.info("Enqueue delivery receipt (consumed) message ID {} for message ID {} from {}",
-						receipt.getMessageId(), receipt.getReceiptMessageIds()[0], receipt.getToIdentity());
-					messageQueue.enqueue(receipt);
+					&& (message.getMessageFlags() & ProtocolDefines.MESSAGE_FLAG_NO_DELIVERY_RECEIPTS) != ProtocolDefines.MESSAGE_FLAG_NO_DELIVERY_RECEIPTS
+					&& contactModel != null
+				) {
+					contactService.createReceiver(contactModel).sendDeliveryReceipt(
+						ProtocolDefines.DELIVERYRECEIPT_MSGCONSUMED,
+						new MessageId[]{MessageId.fromString(message.getApiMessageId())}
+					);
+					logger.info("Enqueue delivery receipt (consumed) message for message ID {} from {}",
+						message.getApiMessageId(),
+						contactModel.getIdentity()
+					);
 				}
 			}
 
@@ -1518,40 +1502,6 @@ public class MessageServiceImpl implements MessageService {
 			}
 		}
 
-		if (ConfigUtils.isForwardSecurityEnabled() && !(message instanceof DeliveryReceiptMessage)) {
-			ContactModel senderContact = contactService.getByIdentity(message.getFromIdentity());
-			if (senderContact != null) {
-				ContactMessageReceiver receiver = contactService.createReceiver(senderContact);
-
-				if (message.getForwardSecurityMode() == null || message.getForwardSecurityMode() == ForwardSecurityMode.NONE) {
-					// Check if this contact has sent FS messages before. Warn the user if this is the case.
-					if (fsmp.hasContactUsedForwardSecurity(senderContact)) {
-						if (senderContact.getForwardSecurityState() == ContactModel.FS_ON) {
-							contactService.setForwardSecurityState(senderContact, ContactModel.FS_OFF);
-							createForwardSecurityStatus(
-								receiver,
-								MESSAGE_WITHOUT_FORWARD_SECURITY,
-								0,
-								null
-							);
-						}
-					}
-				} else if (message.getForwardSecurityMode() == ForwardSecurityMode.FOURDH) {
-					if (senderContact.getForwardSecurityState() == ContactModel.FS_OFF) {
-						contactService.setForwardSecurityState(senderContact, ContactModel.FS_ON);
-						createForwardSecurityStatus(
-							receiver,
-							senderContact.isForwardSecurityEnabled() ?
-							ForwardSecurityStatusDataModel.ForwardSecurityStatusType.FORWARD_SECURITY_ESTABLISHED:
-							ForwardSecurityStatusDataModel.ForwardSecurityStatusType.FORWARD_SECURITY_ESTABLISHED_RX,
-							0,
-							null
-						);
-					}
-				}
-			}
-		}
-
 		// Handle message depending on subtype
 		final Class<? extends AbstractMessage> messageClass = message.getClass();
 		if (messageClass.equals(BoxTextMessage.class)) {
@@ -1592,14 +1542,15 @@ public class MessageServiceImpl implements MessageService {
 
 			//send msgreceived
 			if (!message.flagNoDeliveryReceipts()) {
-				DeliveryReceiptMessage receipt = new DeliveryReceiptMessage();
-				receipt.setReceiptType(ProtocolDefines.DELIVERYRECEIPT_MSGRECEIVED);
-				receipt.setReceiptMessageIds(new MessageId[]{message.getMessageId()});
-				receipt.setFromIdentity(identityStore.getIdentity());
-				receipt.setToIdentity(message.getFromIdentity());
-				logger.info("Enqueue delivery receipt (delivered) message ID {} for message ID {} from {}",
-					receipt.getMessageId(), receipt.getReceiptMessageIds()[0], receipt.getToIdentity());
-				messageQueue.enqueue(receipt);
+				ContactModel contactModel = contactService.getByIdentity(message.getFromIdentity());
+				if (contactModel != null) {
+					contactService.createReceiver(contactModel).sendDeliveryReceipt(
+						ProtocolDefines.DELIVERYRECEIPT_MSGRECEIVED,
+						new MessageId[]{message.getMessageId()}
+					);
+					logger.info("Enqueue delivery receipt (delivered) message for message ID {} from {}",
+						message.getMessageId(), contactModel.getIdentity());
+				}
 			}
 
 			logger.info("processIncomingContactMessage: {} SUCCESS - Message ID = {}", message.getMessageId(), messageModel.getId());
@@ -1638,20 +1589,6 @@ public class MessageServiceImpl implements MessageService {
 			return true;
 		}
 
-		if(groupService.getGroupMember(groupModel, message.getFromIdentity()) == null) {
-			// we received a group message from a user that is not or no longer part of the group
-			if(groupService.isGroupOwner(groupModel)) {
-				// send empty group create to the user if i am the group administrator
-				groupService.sendEmptySync(groupModel, message.getFromIdentity());
-			}
-			else {
-				// otherwise request a sync
-				groupService.requestSync(message, false);
-			}
-			logger.error("GroupMessage {}: error: contact is not in my group list", message.getMessageId());
-			return true;
-		}
-
 		// reset archived status
 		groupService.setIsArchived(groupModel, false);
 
@@ -1697,6 +1634,10 @@ public class MessageServiceImpl implements MessageService {
 		}
 		else if (message.getClass().equals(GroupBallotCreateMessage.class)) {
 			messageModel = saveGroupMessage((GroupBallotCreateMessage) message, messageModel);
+			// This is only used for debugging
+			if (ConfigUtils.isTestBuild()) {
+				logger.info("Processed GroupBallotCreateMessage {}", ((GroupBallotCreateMessage) message).getRawBallotData());
+			}
 		}
 		else if(message.getClass().equals(GroupFileMessage.class)) {
 			messageModel = saveGroupMessage((GroupFileMessage) message, messageModel);
@@ -2037,6 +1978,10 @@ public class MessageServiceImpl implements MessageService {
 			messageModel.setFileData(fileDataModel);
 			messageModel.setForwardSecurityMode(message.getForwardSecurityMode());
 
+			// Set the message model as saved in case the app gets killed while downloading the
+			// thumbnail. Due to forward security the message can not be processed twice anyway.
+			messageModel.setSaved(true);
+
 			//create the record
 			receiver.saveLocalModel(messageModel);
 		}
@@ -2575,6 +2520,12 @@ public class MessageServiceImpl implements MessageService {
 	@WorkerThread
 	private MessageModel saveBoxMessage(BoxLocationMessage message, MessageModel messageModel) {
 		ContactModel contactModel = contactService.getByIdentity(message.getFromIdentity());
+
+		if (contactModel == null) {
+			logger.error("Could not save a location message from an unknown contact");
+			return null;
+		}
+
 		ContactMessageReceiver r = contactService.createReceiver(contactModel);
 		if (messageModel == null) {
 			messageModel = r.createLocalModel(MessageType.LOCATION, MessageContentsType.LOCATION, message.getDate());
@@ -2584,6 +2535,22 @@ public class MessageServiceImpl implements MessageService {
 			messageModel.setOutbox(false);
 		}
 
+		messageModel.setIdentity(contactModel.getIdentity());
+		messageModel.setForwardSecurityMode(message.getForwardSecurityMode());
+		messageModel.setSaved(true);
+
+		messageModel.setLocationData(new LocationDataModel(
+			message.getLatitude(),
+			message.getLongitude(),
+			(long) message.getAccuracy(),
+			null,
+			message.getPoiName()
+		));
+
+		// We save the message model already here to ensure it is in the database in case the app
+		// gets killed before resolving the address.
+		databaseServiceNew.getMessageModelFactory().create(messageModel);
+
 		String address = message.getPoiAddress();
 		if (TestUtil.empty(address)) {
 			try {
@@ -2592,21 +2559,18 @@ public class MessageServiceImpl implements MessageService {
 				logger.error("Exception", e);
 				//do not show this error!
 			}
-		}
 
-		messageModel.setLocationData(new LocationDataModel(
+			messageModel.setLocationData(new LocationDataModel(
 				message.getLatitude(),
 				message.getLongitude(),
 				(long) message.getAccuracy(),
 				address,
 				message.getPoiName()
-		));
-		messageModel.setIdentity(contactModel.getIdentity());
-		messageModel.setForwardSecurityMode(message.getForwardSecurityMode());
+			));
 
-		messageModel.setSaved(true);
-		//create the record
-		databaseServiceNew.getMessageModelFactory().create(messageModel);
+			// Update the record
+			databaseServiceNew.getMessageModelFactory().update(messageModel);
+		}
 
 		fireOnNewMessage(messageModel);
 
@@ -2810,14 +2774,24 @@ public class MessageServiceImpl implements MessageService {
 		return model;
 	}
 
-	private @Nullable MessageModel getContactMessageModel(@NonNull final String apiMessageId) {
+	private @Nullable MessageModel getContactMessageModel(
+		@NonNull final String apiMessageId,
+		@NonNull ContactMessageReceiver messageReceiver
+	) {
 		MessageModel model;
 		synchronized (contactMessageCache) {
-			model = Functional.select(contactMessageCache, messageModel -> apiMessageId.equals(messageModel.getApiMessageId()));
+			model = Functional.select(
+				contactMessageCache,
+				messageModel -> apiMessageId.equals(messageModel.getApiMessageId())
+					&& messageReceiver.getContact().getIdentity().equals(messageModel.getIdentity())
+			);
 		}
 		if (model == null) {
 			try {
-				model = databaseServiceNew.getMessageModelFactory().getByApiMessageId(new MessageId(Utils.hexStringToByteArray(apiMessageId)));
+				model = databaseServiceNew.getMessageModelFactory().getByApiMessageIdAndIdentity(
+					new MessageId(Utils.hexStringToByteArray(apiMessageId)),
+					messageReceiver.getContact().getIdentity()
+				);
 				if (model != null) {
 					synchronized (contactMessageCache) {
 						contactMessageCache.add(model);
@@ -2844,13 +2818,21 @@ public class MessageServiceImpl implements MessageService {
 		}
 	}
 
-	private GroupMessageModel getGroupMessageModel(@NonNull final String apiMessageId) {
+	private GroupMessageModel getGroupMessageModel(
+		@NonNull final String apiMessageId,
+		@NonNull GroupMessageReceiver messageReceiver
+	) {
+		int groupId = messageReceiver.getGroup().getId();
 		synchronized (groupMessageCache) {
-			GroupMessageModel model = Functional.select(groupMessageCache, messageModel -> apiMessageId.equals(messageModel.getApiMessageId()));
+			GroupMessageModel model = Functional.select(
+				groupMessageCache,
+				messageModel -> apiMessageId.equals(messageModel.getApiMessageId())
+					&& groupId == messageModel.getGroupId()
+			);
 
 			if (model == null) {
 				try {
-					model = databaseServiceNew.getGroupMessageModelFactory().getByApiMessageId(new MessageId(Utils.hexStringToByteArray(apiMessageId)));
+					model = databaseServiceNew.getGroupMessageModelFactory().getByApiMessageIdAndGroupId(new MessageId(Utils.hexStringToByteArray(apiMessageId)), groupId);
 					if (model != null) {
 						groupMessageCache.add(model);
 					}
@@ -2868,12 +2850,6 @@ public class MessageServiceImpl implements MessageService {
 		);
 	}
 
-	private DistributionListMessageModel getDistributionListMessageModel(String apiMessageId) {
-		return databaseServiceNew.getDistributionListMessageModelFactory().getByApiMessageId(
-				apiMessageId
-		);
-	}
-
 	private void fireOnNewMessage(final AbstractMessageModel messageModel) {
 
 		if(appLockService.isLocked()) {
@@ -3427,6 +3403,9 @@ public class MessageServiceImpl implements MessageService {
 			} catch (ActivityNotFoundException e) {
 				// make sure Toast runs in UI thread
 				RuntimeUtil.runOnUiThread(() -> Toast.makeText(context, R.string.no_activity_for_mime_type, Toast.LENGTH_SHORT).show());
+			} catch (SecurityException e) {
+				logger.error("Error firing ACTION_VIEW intent", e);
+				RuntimeUtil.runOnUiThread(() -> Toast.makeText(context, context.getString(R.string.no_activity_for_mime_type) + " " + e.getMessage(), Toast.LENGTH_SHORT).show());
 			}
 		}
 		return false;
@@ -3515,21 +3494,14 @@ public class MessageServiceImpl implements MessageService {
 
 			if (unreadMessages != null && unreadMessages.size() > 0) {
 				//do not run on a own thread, create a new thread outside!
-				(new ReadMessagesRoutine(unreadMessages, this, notificationService)).run();
+				new ReadMessagesRoutine(unreadMessages, this, notificationService).run();
 			}
+			notificationService.cancel(messageReceiver);
 		} catch (SQLException e) {
 			logger.error("Exception", e);
 		}
 	}
 
-	@Override
-	public void markMessageAsRead(AbstractMessageModel abstractMessageModel, NotificationService notificationService) {
-		List<AbstractMessageModel> messages = new ArrayList<>();
-		messages.add(abstractMessageModel);
-
-		new Thread(new ReadMessagesRoutine(messages, this, notificationService)).start();
-	}
-
 	@Override
 	public AbstractMessageModel getMessageModelFromId(int id, String type) {
 		if (id != 0 && !TestUtil.empty(type)) {
@@ -3546,14 +3518,19 @@ public class MessageServiceImpl implements MessageService {
 
 	@Override
 	@Nullable
-	public AbstractMessageModel getMessageModelByApiMessageId(String apiMessageId, @MessageReceiver.MessageReceiverType int type) {
+	public AbstractMessageModel getMessageModelByApiMessageIdAndReceiver(
+		@Nullable String apiMessageId,
+		@NonNull MessageReceiver messageReceiver
+	) {
 		if (apiMessageId != null) {
-			if (type == MessageReceiver.Type_CONTACT) {
-				return getContactMessageModel(apiMessageId);
-			} else if (type == MessageReceiver.Type_GROUP) {
-				return getGroupMessageModel(apiMessageId);
-			} else if (type == MessageReceiver.Type_DISTRIBUTION_LIST) {
-				return getDistributionListMessageModel(apiMessageId);
+			if (messageReceiver instanceof ContactMessageReceiver) {
+				return getContactMessageModel(apiMessageId, (ContactMessageReceiver) messageReceiver);
+			} else if (messageReceiver instanceof  GroupMessageReceiver) {
+				return getGroupMessageModel(apiMessageId, (GroupMessageReceiver) messageReceiver);
+			} else if (messageReceiver instanceof DistributionListMessageReceiver) {
+				// We cannot return a message model with a certain api message id for distribution
+				// lists, because the api message id is null for all distribution list messages
+				return null;
 			}
 		}
 		return null;
@@ -3634,6 +3611,9 @@ public class MessageServiceImpl implements MessageService {
 	public void cancelMessageUpload(AbstractMessageModel messageModel) {
 		updateMessageState(messageModel, MessageState.SENDFAILED, null);
 
+		if (messageSendingService != null) {
+			messageSendingService.abort(messageModel.getUid());
+		}
 		removeSendMachine(messageModel);
 		cancelUploader(messageModel);
 	}
@@ -3663,7 +3643,6 @@ public class MessageServiceImpl implements MessageService {
 
 			//remove from instances
 			synchronized (sendMachineInstances) {
-
 				for(Iterator<Map.Entry<String, SendMachine>> it = sendMachineInstances.entrySet().iterator(); it.hasNext(); ) {
 					Map.Entry<String, SendMachine> entry = it.next();
 					if(entry.getValue() == sendMachine) {
@@ -3944,7 +3923,6 @@ public class MessageServiceImpl implements MessageService {
 
 		if (failedCounter == 0) {
 			logger.info("sendMedia: Successfully queued.");
-			sendProfilePicture(resolvedReceivers);
 			if (sendResultListener != null) {
 				sendResultListener.onCompleted();
 			}
@@ -4586,7 +4564,7 @@ public class MessageServiceImpl implements MessageService {
 
 			File outputFile;
 			try {
-				outputFile = fileService.createTempFile(".trans", ".mp4", !ConfigUtils.useContentUris());
+				outputFile = fileService.createTempFile(".trans", ".mp4", false);
 			} catch (IOException e) {
 				logger.error("Unable to open temp file");
 				// skip this MediaItem
diff --git a/app/src/main/java/ch/threema/app/services/NotificationService.java b/app/src/main/java/ch/threema/app/services/NotificationService.java
index 4e8eb465..fb8b7a7c 100644
--- a/app/src/main/java/ch/threema/app/services/NotificationService.java
+++ b/app/src/main/java/ch/threema/app/services/NotificationService.java
@@ -69,6 +69,7 @@ public interface NotificationService {
 	String NOTIFICATION_CHANNEL_GROUP_JOIN_REQUEST = "jreq";
 	String NOTIFICATION_CHANNEL_THREEMA_PUSH = "tpush";
 	String NOTIFICATION_CHANNEL_GROUP_CALL = "gcall"; // virtual notification channel used by wrapper
+	String NOTIFICATION_CHANNEL_VOICE_MSG_PLAYER = "vmp";
 
 	// TODO(ANDR-2065): temporary - remove after beta
 	String NOTIFICATION_CHANNEL_GROUP_CALL_OLD = "gca";
diff --git a/app/src/main/java/ch/threema/app/services/NotificationServiceImpl.java b/app/src/main/java/ch/threema/app/services/NotificationServiceImpl.java
index 10f8fa15..38086e0f 100644
--- a/app/src/main/java/ch/threema/app/services/NotificationServiceImpl.java
+++ b/app/src/main/java/ch/threema/app/services/NotificationServiceImpl.java
@@ -21,6 +21,18 @@
 
 package ch.threema.app.services;
 
+import static android.provider.Settings.System.DEFAULT_NOTIFICATION_URI;
+import static android.provider.Settings.System.DEFAULT_RINGTONE_URI;
+import static androidx.core.app.NotificationCompat.MessagingStyle.MAXIMUM_RETAINED_MESSAGES;
+import static ch.threema.app.ThreemaApplication.WORK_SYNC_NOTIFICATION_ID;
+import static ch.threema.app.backuprestore.csv.RestoreService.RESTORE_COMPLETION_NOTIFICATION_ID;
+import static ch.threema.app.notifications.NotificationBuilderWrapper.VIBRATE_PATTERN_GROUP_CALL;
+import static ch.threema.app.utils.IntentDataUtil.PENDING_INTENT_FLAG_IMMUTABLE;
+import static ch.threema.app.voip.services.VoipCallService.EXTRA_ACTIVITY_MODE;
+import static ch.threema.app.voip.services.VoipCallService.EXTRA_CALL_ID;
+import static ch.threema.app.voip.services.VoipCallService.EXTRA_CONTACT_IDENTITY;
+import static ch.threema.app.voip.services.VoipCallService.EXTRA_IS_INITIATOR;
+
 import android.annotation.SuppressLint;
 import android.annotation.TargetApi;
 import android.app.Activity;
@@ -92,6 +104,7 @@ import ch.threema.app.messagereceiver.ContactMessageReceiver;
 import ch.threema.app.messagereceiver.GroupMessageReceiver;
 import ch.threema.app.messagereceiver.MessageReceiver;
 import ch.threema.app.notifications.NotificationBuilderWrapper;
+import ch.threema.app.receivers.CancelResendMessagesBroadcastReceiver;
 import ch.threema.app.receivers.ReSendMessagesBroadcastReceiver;
 import ch.threema.app.utils.ConfigUtils;
 import ch.threema.app.utils.DNDUtil;
@@ -117,18 +130,6 @@ import ch.threema.storage.models.group.IncomingGroupJoinRequestModel;
 import ch.threema.storage.models.group.OutgoingGroupJoinRequestModel;
 import java8.util.stream.StreamSupport;
 
-import static android.provider.Settings.System.DEFAULT_NOTIFICATION_URI;
-import static android.provider.Settings.System.DEFAULT_RINGTONE_URI;
-import static androidx.core.app.NotificationCompat.MessagingStyle.MAXIMUM_RETAINED_MESSAGES;
-import static ch.threema.app.ThreemaApplication.WORK_SYNC_NOTIFICATION_ID;
-import static ch.threema.app.backuprestore.csv.RestoreService.RESTORE_COMPLETION_NOTIFICATION_ID;
-import static ch.threema.app.notifications.NotificationBuilderWrapper.VIBRATE_PATTERN_GROUP_CALL;
-import static ch.threema.app.utils.IntentDataUtil.PENDING_INTENT_FLAG_IMMUTABLE;
-import static ch.threema.app.voip.services.VoipCallService.EXTRA_ACTIVITY_MODE;
-import static ch.threema.app.voip.services.VoipCallService.EXTRA_CALL_ID;
-import static ch.threema.app.voip.services.VoipCallService.EXTRA_CONTACT_IDENTITY;
-import static ch.threema.app.voip.services.VoipCallService.EXTRA_IS_INITIATOR;
-
 public class NotificationServiceImpl implements NotificationService {
 	private static final Logger logger = LoggingUtil.getThreemaLogger("NotificationServiceImpl");
 	private static final long NOTIFY_AGAIN_TIMEOUT = 30 * DateUtils.SECOND_IN_MILLIS;
@@ -196,9 +197,8 @@ public class NotificationServiceImpl implements NotificationService {
 			return this;
 		}
 
-		public NotificationSchemaImpl setRingerMode(int ringerMode) {
+		private void setRingerMode(int ringerMode) {
 			this.ringerMode = ringerMode;
-			return this;
 		}
 
 		public NotificationSchemaImpl setVibrate(boolean vibrate) {
@@ -462,7 +462,7 @@ public class NotificationServiceImpl implements NotificationService {
 			.setContentTitle(context.getString(R.string.group_call))
 			.setContentText(context.getString(R.string.voip_gc_notification_new_call_public))
 			.setSmallIcon(R.drawable.ic_group_call)
-			.setColor(context.getResources().getColor(R.color.accent_light));
+			.setColor(context.getResources().getColor(R.color.md_theme_light_primary));
 
 		// private version of the notification
 		NotificationCompat.Builder builder = new NotificationBuilderWrapper(context, NOTIFICATION_CHANNEL_GROUP_CALL, notificationSchema, publicBuilder)
@@ -475,7 +475,7 @@ public class NotificationServiceImpl implements NotificationService {
 			.setLocalOnly(true)
 			.setCategory(NotificationCompat.CATEGORY_SOCIAL)
 			.setPriority(NotificationCompat.PRIORITY_HIGH)
-			.setColor(ResourcesCompat.getColor(context.getResources(), R.color.accent_light, context.getTheme()))
+			.setColor(ResourcesCompat.getColor(context.getResources(), R.color.md_theme_light_primary, context.getTheme()))
 			.setVisibility(NotificationCompat.VISIBILITY_PRIVATE)
 			.setPublicVersion(publicBuilder.build())
 			.setSound(preferenceService.getGroupCallRingtone(), AudioManager.STREAM_VOICE_CALL)
@@ -522,6 +522,11 @@ public class NotificationServiceImpl implements NotificationService {
 			return;
 		}
 
+		if (preferenceService != null && preferenceService.getWizardRunning()) {
+			logger.debug("Wizard in progress. Notification suppressed.");
+			return;
+		}
+
 		synchronized (this.conversationNotifications) {
 			//check if current receiver is the receiver of the group
 			if(this.visibleConversationReceiver != null &&
@@ -694,7 +699,7 @@ public class NotificationServiceImpl implements NotificationService {
 						.setContentTitle(summaryText)
 						.setContentText(context.getString(R.string.notification_hidden_text))
 						.setSmallIcon(R.drawable.ic_notification_small)
-						.setColor(context.getResources().getColor(R.color.accent_light))
+						.setColor(context.getResources().getColor(R.color.md_theme_light_primary))
 						.setOnlyAlertOnce(onlyAlertOnce);
 
 				// private version
@@ -704,7 +709,7 @@ public class NotificationServiceImpl implements NotificationService {
 								.setTicker(tickerText)
 								.setSmallIcon(R.drawable.ic_notification_small)
 								.setLargeIcon(newestGroup.getAvatar())
-								.setColor(context.getResources().getColor(R.color.accent_light))
+								.setColor(context.getResources().getColor(R.color.md_theme_light_primary))
 								.setGroup(newestGroup.getGroupUid())
 								.setGroupSummary(false)
 								.setOnlyAlertOnce(onlyAlertOnce)
@@ -782,7 +787,7 @@ public class NotificationServiceImpl implements NotificationService {
 								.setContentText(unreadConversationsCount > 1 ? summaryText : singleMessageText)
 								.setTicker(tickerText)
 								.setLargeIcon(summaryAvatar)
-								.setColor(context.getResources().getColor(R.color.accent_light))
+								.setColor(context.getResources().getColor(R.color.md_theme_light_primary))
 								.setNumber(unreadMessagesCount)
 								.setGroup(GROUP_KEY_MESSAGES)
 								// https://code.google.com/p/android/issues/detail?id=219876
@@ -1164,7 +1169,7 @@ public class NotificationServiceImpl implements NotificationService {
 		builder.extend(new NotificationCompat.CarExtender()
 				.setLargeIcon(newestGroup.getAvatar())
 				.setUnreadConversation(unreadConvBuilder.build())
-				.setColor(context.getResources().getColor(R.color.accent_light)));
+				.setColor(context.getResources().getColor(R.color.md_theme_light_primary)));
 	}
 
 	@Override
@@ -1186,6 +1191,11 @@ public class NotificationServiceImpl implements NotificationService {
 
 	@Override
 	public void cancelConversationNotification(final String... uids) {
+		if (uids == null) {
+			logger.warn("Unique id array must not be null! Ignoring.");
+			return;
+		}
+		logger.info("Cancel {} conversation notifications", uids.length);
 		synchronized (this.conversationNotifications) {
 			for(final String uid: uids) {
 				ConversationNotification conversationNotification = Functional.select(this.conversationNotifications, new IPredicateNonNull<ConversationNotification>() {
@@ -1196,12 +1206,15 @@ public class NotificationServiceImpl implements NotificationService {
 				});
 
 				if(conversationNotification != null) {
+					logger.info("Cancel notification {}", uid);
 					conversationNotifications.remove(conversationNotification);
 					cancelAndDestroyConversationNotification(conversationNotification);
 
 					if (ConfigUtils.canDoGroupedNotifications()) {
 						notificationManagerCompat.cancel(conversationNotification.getGroup().getNotificationId());
 					}
+				} else {
+					logger.info("Notification {} not found", uid);
 				}
 			}
 
@@ -1221,6 +1234,7 @@ public class NotificationServiceImpl implements NotificationService {
 
 	private void cancelAndDestroyConversationNotification(ConversationNotification conversationNotification) {
 		if(conversationNotification != null) {
+			logger.info("Cancel notification {}", conversationNotification.getUid());
 			//remove wearable
 			cancel(conversationNotification.getGroup().getNotificationId());
 			conversationNotification.destroy();
@@ -1281,14 +1295,14 @@ public class NotificationServiceImpl implements NotificationService {
 										.setContentTitle(summaryText)
 										.setContentText(context.getString(R.string.notification_hidden_text))
 										.setSmallIcon(R.drawable.ic_notification_small)
-										.setColor(context.getResources().getColor(R.color.accent_light));
+										.setColor(context.getResources().getColor(R.color.md_theme_light_primary));
 
 								builder = new NotificationBuilderWrapper(context, NOTIFICATION_CHANNEL_CHAT_UPDATE, null, publicBuilder)
 												.setContentTitle(group.getName())
 												.setContentText(singleMessageText)
 												.setSmallIcon(R.drawable.ic_notification_small)
 												.setLargeIcon(group.getAvatar())
-												.setColor(context.getResources().getColor(R.color.accent_light))
+												.setColor(context.getResources().getColor(R.color.md_theme_light_primary))
 												.setGroup(group.getGroupUid())
 												.setGroupSummary(false)
 												.setVisibility(NotificationCompat.VISIBILITY_PRIVATE);
@@ -1399,7 +1413,7 @@ public class NotificationServiceImpl implements NotificationService {
 									.setContentTitle(contentTitle)
 									.setContentText(unreadMessagesCount > 1 ? summaryText : singleMessageText)
 									.setLargeIcon(avatar)
-									.setColor(context.getResources().getColor(R.color.accent_light))
+									.setColor(context.getResources().getColor(R.color.md_theme_light_primary))
 									.setNumber(unreadMessagesCount)
 									.setGroup(GROUP_KEY_MESSAGES)
 									.setOnlyAlertOnce(false);
@@ -1787,6 +1801,16 @@ public class NotificationServiceImpl implements NotificationService {
 			NotificationCompat.WearableExtender wearableExtender = new NotificationCompat.WearableExtender();
 			wearableExtender.addAction(tryAgainAction);
 
+			Intent cancelIntent = new Intent(context, CancelResendMessagesBroadcastReceiver.class);
+			IntentDataUtil.appendMultipleMessageTypes(failedMessages, cancelIntent);
+
+			PendingIntent cancelSendingMessages = PendingIntent.getBroadcast(
+				context,
+				ThreemaApplication.UNSENT_MESSAGE_NOTIFICATION_ID,
+				cancelIntent,
+				this.pendingIntentFlags
+			);
+
 			String content = ConfigUtils.getSafeQuantityString(context, R.plurals.sending_message_failed, num, num);
 
 			if (isFSKeyMismatch) {
@@ -1805,6 +1829,7 @@ public class NotificationServiceImpl implements NotificationService {
 						.setContentTitle(this.context.getString(R.string.app_name))
 						.setContentText(content)
 						.setStyle(new NotificationCompat.BigTextStyle().bigText(content))
+						.setDeleteIntent(cancelSendingMessages)
 						.addAction(R.drawable.ic_refresh_white_24dp, context.getString(R.string.try_again), sendPendingIntent);
 
 			this.notify(ThreemaApplication.UNSENT_MESSAGE_NOTIFICATION_ID, builder, null, NOTIFICATION_CHANNEL_ALERT);
@@ -2203,5 +2228,4 @@ public class NotificationServiceImpl implements NotificationService {
 
 		this.notify(requestIdNonce, notifBuilder, null, NOTIFICATION_CHANNEL_GROUP_JOIN_REQUEST);
 	}
-
 }
diff --git a/app/src/main/java/ch/threema/app/services/PreferenceService.java b/app/src/main/java/ch/threema/app/services/PreferenceService.java
index a7f58a98..4bb90972 100644
--- a/app/src/main/java/ch/threema/app/services/PreferenceService.java
+++ b/app/src/main/java/ch/threema/app/services/PreferenceService.java
@@ -37,13 +37,13 @@ import java.util.List;
 import java.util.Set;
 
 import ch.threema.app.threemasafe.ThreemaSafeServerInfo;
-import ch.threema.app.utils.ConfigUtils.AppTheme;
+import ch.threema.app.utils.ConfigUtils;
 import ch.threema.domain.protocol.api.work.WorkDirectoryCategory;
 import ch.threema.domain.protocol.api.work.WorkOrganization;
 
 public interface PreferenceService {
 
-    @Retention(RetentionPolicy.SOURCE)
+	@Retention(RetentionPolicy.SOURCE)
 	@IntDef({ImageScale_DEFAULT, ImageScale_SMALL, ImageScale_MEDIUM, ImageScale_LARGE, ImageScale_XLARGE, ImageScale_ORIGINAL, ImageScale_SEND_AS_FILE})
 	@interface ImageScale {}
 	int ImageScale_DEFAULT = -1;
@@ -62,9 +62,6 @@ public interface PreferenceService {
 	int VideoSize_ORIGINAL = 2;
 	int VideoSize_SEND_AS_FILE = 3;
 
-	int Theme_LIGHT = 0;
-	int Theme_DARK = 1;
-
 	int EmojiStyle_DEFAULT = 0;
 	int EmojiStyle_ANDROID = 1;
 
@@ -272,7 +269,7 @@ public interface PreferenceService {
 
 	void setFileSendInfoShown(boolean shown);
 
-	int getTheme();
+	int getAppThemeValue();
 
 	int getEmojiStyle();
 
@@ -298,9 +295,9 @@ public interface PreferenceService {
 
 	void setBlockUnkown(Boolean booleanPreset);
 
-	void setAppLogoExpiresAt(Date expiresAt, int theme);
+	void setAppLogoExpiresAt(Date expiresAt, @ConfigUtils.AppThemeSetting String theme);
 
-	Date getAppLogoExpiresAt(int theme);
+	Date getAppLogoExpiresAt(@ConfigUtils.AppThemeSetting String theme);
 
 	boolean isPrivateChatsHidden();
 
@@ -336,10 +333,10 @@ public interface PreferenceService {
 
 	HashMap<String,String> getQuoteDrafts();
 
-	void setAppLogo(@NonNull String url, @AppTheme int theme);
-	void clearAppLogo(@AppTheme int theme);
+	void setAppLogo(@NonNull String url, @ConfigUtils.AppThemeSetting String theme);
+	void clearAppLogo(@ConfigUtils.AppThemeSetting String theme);
 	void clearAppLogos();
-	@Nullable String getAppLogo(@AppTheme int theme);
+	@Nullable String getAppLogo(@ConfigUtils.AppThemeSetting String theme);
 
 	void setCustomSupportUrl(String supportUrl);
 	String getCustomSupportUrl();
@@ -360,17 +357,21 @@ public interface PreferenceService {
 
 	void setProfilePicRelease(int value);
 
-	Date getProfilePicLastUpdate();
-
-	void setProfilePicLastUpdate(Date date);
-
 	long getProfilePicUploadDate();
 
 	void setProfilePicUploadDate(Date date);
 
-	void setProfilePicUploadData(ContactServiceImpl.ContactPhotoUploadResult result);
+	void setProfilePicUploadData(@Nullable ContactService.ProfilePictureUploadData data);
 
-	ContactServiceImpl.ContactPhotoUploadResult getProfilePicUploadData(ContactServiceImpl.ContactPhotoUploadResult result);
+	/**
+	 * Get the stored profile picture upload data. Note that the returned data does not include the
+	 * bitmap array of the profile picture.
+	 *
+	 * @return the stored profile picture upload data or null if there is no stored data or an error
+	 * occurred while reading the data
+	 */
+	@Nullable
+	ContactService.ProfilePictureUploadData getProfilePicUploadData();
 
 	boolean getProfilePicReceive();
 
@@ -558,4 +559,7 @@ public interface PreferenceService {
 
 	boolean isGroupCallSendInitEnabled();
 	boolean skipGroupCallCreateDelay();
+
+	long getBackupWarningDismissedTime();
+	void setBackupWarningDismissedTime(long time);
 }
diff --git a/app/src/main/java/ch/threema/app/services/PreferenceServiceImpl.java b/app/src/main/java/ch/threema/app/services/PreferenceServiceImpl.java
index 198eaf3a..d981f7a1 100644
--- a/app/src/main/java/ch/threema/app/services/PreferenceServiceImpl.java
+++ b/app/src/main/java/ch/threema/app/services/PreferenceServiceImpl.java
@@ -53,7 +53,6 @@ import ch.threema.app.stores.PreferenceStoreInterface;
 import ch.threema.app.threemasafe.ThreemaSafeMDMConfig;
 import ch.threema.app.threemasafe.ThreemaSafeServerInfo;
 import ch.threema.app.utils.ConfigUtils;
-import ch.threema.app.utils.ConfigUtils.AppTheme;
 import ch.threema.app.utils.TestUtil;
 import ch.threema.base.utils.Base64;
 import ch.threema.base.utils.LoggingUtil;
@@ -731,19 +730,19 @@ public class PreferenceServiceImpl implements PreferenceService {
 	}
 
 	@Override
-	public int getTheme() {
+	public int getAppThemeValue() {
 		String theme = this.preferenceStore.getString(this.getKeyName(R.string.preferences__theme));
 		if (theme != null && theme.length() > 0) {
-			return Integer.valueOf(theme);
+			return Integer.parseInt(theme);
 		}
-		return Theme_LIGHT;
+		return Integer.parseInt(BuildConfig.DEFAULT_APP_THEME);
 	}
 
 	@Override
 	public int getEmojiStyle() {
 		String theme = this.preferenceStore.getString(this.getKeyName(R.string.preferences__emoji_style));
 		if (theme != null && theme.length() > 0) {
-			if (Integer.valueOf(theme) == 1) {
+			if (Integer.parseInt(theme) == 1) {
 				return EmojiStyle_ANDROID;
 			}
 		}
@@ -807,17 +806,17 @@ public class PreferenceServiceImpl implements PreferenceService {
 	}
 
 	@Override
-	public void setAppLogoExpiresAt(Date expiresAt, int theme) {
+	public void setAppLogoExpiresAt(Date expiresAt, @ConfigUtils.AppThemeSetting String theme) {
 		this.preferenceStore.save(this.getKeyName(
-			theme == ConfigUtils.THEME_DARK ?
+			ConfigUtils.THEME_DARK.equals(theme) ?
 				R.string.preferences__app_logo_dark_expires_at :
 				R.string.preferences__app_logo_light_expires_at), expiresAt);
 	}
 
 	@Override
-	public Date getAppLogoExpiresAt(int theme) {
+	public Date getAppLogoExpiresAt(@ConfigUtils.AppThemeSetting String theme) {
 		return this.preferenceStore.getDate(this.getKeyName(
-			theme == ConfigUtils.THEME_DARK ?
+			ConfigUtils.THEME_DARK.equals(theme) ?
 				R.string.preferences__app_logo_dark_expires_at :
 				R.string.preferences__app_logo_light_expires_at));
 	}
@@ -899,20 +898,20 @@ public class PreferenceServiceImpl implements PreferenceService {
 	}
 
 	private @NonNull
-	String getAppLogoKey(@AppTheme int theme) {
-		if (theme == ConfigUtils.THEME_DARK) {
+	String getAppLogoKey(@ConfigUtils.AppThemeSetting String theme) {
+		if (ConfigUtils.THEME_DARK.equals(theme)) {
 			return this.getKeyName(R.string.preferences__app_logo_dark_url);
 		}
 		return this.getKeyName(R.string.preferences__app_logo_light_url);
 	}
 
 	@Override
-	public void setAppLogo(@NonNull String url, @AppTheme int theme) {
+	public void setAppLogo(@NonNull String url, @ConfigUtils.AppThemeSetting String theme) {
 		this.preferenceStore.save(this.getAppLogoKey(theme), url, true);
 	}
 
 	@Override
-	public void clearAppLogo(@AppTheme int theme) {
+	public void clearAppLogo(@ConfigUtils.AppThemeSetting String theme) {
 		this.preferenceStore.remove(this.getAppLogoKey(theme));
 	}
 
@@ -924,7 +923,7 @@ public class PreferenceServiceImpl implements PreferenceService {
 
 	@Override
 	@Nullable
-	public String getAppLogo(@AppTheme int theme) {
+	public String getAppLogo(@ConfigUtils.AppThemeSetting String theme) {
 		return this.preferenceStore.getString(this.getAppLogoKey(theme), true);
 	}
 
@@ -989,18 +988,6 @@ public class PreferenceServiceImpl implements PreferenceService {
 		this.preferenceStore.save(this.getKeyName(R.string.preferences__profile_pic_release), value);
 	}
 
-	@Override
-	public Date getProfilePicLastUpdate() {
-		return this.preferenceStore.getDate(this.getKeyName(R.string.preferences__profile_pic_last_update));
-	}
-
-	@Override
-	public void setProfilePicLastUpdate(Date date) {
-		// reset upload date
-		setProfilePicUploadDate(new Date(0L));
-		this.preferenceStore.save(this.getKeyName(R.string.preferences__profile_pic_last_update), date);
-	}
-
 	@Override
 	public long getProfilePicUploadDate() {
 		return this.preferenceStore.getDateAsLong(this.getKeyName(R.string.preferences__profile_pic_upload_date));
@@ -1012,33 +999,40 @@ public class PreferenceServiceImpl implements PreferenceService {
 	}
 
 	@Override
-	public void setProfilePicUploadData(ContactServiceImpl.ContactPhotoUploadResult result) {
-		JSONObject toStore = new JSONObject();
+	public void setProfilePicUploadData(@Nullable ContactService.ProfilePictureUploadData result) {
+		JSONObject toStore = null;
 
-		try {
-			toStore.put(CONTACT_PHOTO_BLOB_ID, Base64.encodeBytes(result.blobId));
-			toStore.put(CONTACT_PHOTO_ENCRYPTION_KEY, Base64.encodeBytes(result.encryptionKey));
-			toStore.put(CONTACT_PHOTO_SIZE, result.size);
-		} catch (Exception e) {
-			logger.error("Exception", e);
+		if (result != null) {
+			toStore = new JSONObject();
+			try {
+				toStore.put(CONTACT_PHOTO_BLOB_ID, Base64.encodeBytes(result.blobId));
+				toStore.put(CONTACT_PHOTO_ENCRYPTION_KEY, Base64.encodeBytes(result.encryptionKey));
+				toStore.put(CONTACT_PHOTO_SIZE, result.size);
+			} catch (Exception e) {
+				logger.error("Exception", e);
+			}
 		}
 
 		this.preferenceStore.save(this.getKeyName(R.string.preferences__profile_pic_upload_data), toStore, true);
 	}
 
 	@Override
-	public ContactServiceImpl.ContactPhotoUploadResult getProfilePicUploadData(ContactServiceImpl.ContactPhotoUploadResult result) {
+	@Nullable
+	public ContactService.ProfilePictureUploadData getProfilePicUploadData() {
 		JSONObject fromStore = this.preferenceStore.getJSONObject(this.getKeyName(R.string.preferences__profile_pic_upload_data), true);
 		if (fromStore != null) {
 			try {
-				result.blobId = Base64.decode(fromStore.getString(CONTACT_PHOTO_BLOB_ID));
-				result.encryptionKey = Base64.decode(fromStore.getString(CONTACT_PHOTO_ENCRYPTION_KEY));
-				result.size = fromStore.getInt(CONTACT_PHOTO_SIZE);
+				ContactService.ProfilePictureUploadData data = new ContactService.ProfilePictureUploadData();
+				data.blobId = Base64.decode(fromStore.getString(CONTACT_PHOTO_BLOB_ID));
+				data.encryptionKey = Base64.decode(fromStore.getString(CONTACT_PHOTO_ENCRYPTION_KEY));
+				data.size = fromStore.getInt(CONTACT_PHOTO_SIZE);
+				return data;
 			} catch (Exception e) {
 				logger.error("Exception", e);
+				return null;
 			}
 		}
-		return result;
+		return null;
 	}
 
 	@Override
@@ -1078,7 +1072,7 @@ public class PreferenceServiceImpl implements PreferenceService {
 
 	@Override
 	public boolean isVoipEnabled() {
-		return this.preferenceStore.getBoolean(this.getKeyName(R.string.preferences__voip_enable)) && !ConfigUtils.isBlackBerry();
+		return this.preferenceStore.getBoolean(this.getKeyName(R.string.preferences__voip_enable));
 	}
 
 	@Override
@@ -1625,4 +1619,14 @@ public class PreferenceServiceImpl implements PreferenceService {
 	public boolean skipGroupCallCreateDelay() {
 		return ConfigUtils.isTestBuild() && this.preferenceStore.getBoolean(this.getKeyName(R.string.preferences__group_call_skip_delay), false);
 	}
+
+	@Override
+	public long getBackupWarningDismissedTime() {
+		return this.preferenceStore.getLong(this.getKeyName(R.string.preferences__backup_warning_dismissed_time));
+	}
+
+	@Override
+	public void setBackupWarningDismissedTime(long time) {
+		this.preferenceStore.save(this.getKeyName(R.string.preferences__backup_warning_dismissed_time), time);
+	}
 }
diff --git a/app/src/main/java/ch/threema/app/services/RestrictBackgroundChangedService.java b/app/src/main/java/ch/threema/app/services/RestrictBackgroundChangedService.java
deleted file mode 100644
index 7f56dcfb..00000000
--- a/app/src/main/java/ch/threema/app/services/RestrictBackgroundChangedService.java
+++ /dev/null
@@ -1,73 +0,0 @@
-/*  _____ _
- * |_   _| |_  _ _ ___ ___ _ __  __ _
- *   | | | ' \| '_/ -_) -_) '  \/ _` |_
- *   |_| |_||_|_| \___\___|_|_|_\__,_(_)
- *
- * Threema for Android
- * Copyright (c) 2017-2023 Threema GmbH
- *
- * This program is free software: you can redistribute it and/or modify
- * it under the terms of the GNU Affero General Public License, version 3,
- * as published by the Free Software Foundation.
- *
- * This program is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
- * GNU Affero General Public License for more details.
- *
- * You should have received a copy of the GNU Affero General Public License
- * along with this program. If not, see <https://www.gnu.org/licenses/>.
- */
-
-package ch.threema.app.services;
-
-import android.annotation.TargetApi;
-import android.content.Context;
-import android.content.Intent;
-import android.net.ConnectivityManager;
-import android.os.Build;
-
-import androidx.annotation.NonNull;
-import androidx.core.app.FixedJobIntentService;
-import ch.threema.app.ThreemaApplication;
-import ch.threema.app.managers.ServiceManager;
-
-@TargetApi(Build.VERSION_CODES.N)
-public class RestrictBackgroundChangedService extends FixedJobIntentService {
-
-	private static final int JOB_ID = 2003;
-
-	public static void enqueueWork(Context context, Intent work) {
-		enqueueWork(context, RestrictBackgroundChangedService.class, JOB_ID, work);
-	}
-
-	@Override
-	protected void onHandleWork(@NonNull Intent intent) {
-		ConnectivityManager connMgr = (ConnectivityManager) getSystemService(Context.CONNECTIVITY_SERVICE);
-		if (connMgr != null) {
-
-			ServiceManager serviceManager = ThreemaApplication.getServiceManager();
-			if (serviceManager != null) {
-				NotificationService notificationService = serviceManager.getNotificationService();
-
-				if (notificationService != null) {
-					switch (connMgr.getRestrictBackgroundStatus()) {
-						case android.net.ConnectivityManager.RESTRICT_BACKGROUND_STATUS_ENABLED:
-							// Background data usage is blocked for this app. Wherever possible,
-							// the app should also use less data in the foreground.
-							notificationService.showNetworkBlockedNotification(false);
-							break;
-						case android.net.ConnectivityManager.RESTRICT_BACKGROUND_STATUS_DISABLED:
-							// Data Saver is disabled. Since the device is connected to a
-							// metered network, the app should use less data wherever possible.
-						case android.net.ConnectivityManager.RESTRICT_BACKGROUND_STATUS_WHITELISTED:
-							// The app is whitelisted. Wherever possible,
-							// the app should use less data in the foreground and background.
-							notificationService.cancelNetworkBlockedNotification();
-							break;
-					}
-				}
-			}
-		}
-	}
-}
diff --git a/app/src/main/java/ch/threema/app/services/RingtoneServiceImpl.java b/app/src/main/java/ch/threema/app/services/RingtoneServiceImpl.java
index 907001a7..d4bd9f7a 100644
--- a/app/src/main/java/ch/threema/app/services/RingtoneServiceImpl.java
+++ b/app/src/main/java/ch/threema/app/services/RingtoneServiceImpl.java
@@ -33,7 +33,7 @@ import ch.threema.app.utils.RingtoneUtil;
 import ch.threema.app.utils.TestUtil;
 
 public class RingtoneServiceImpl implements RingtoneService {
-	private PreferenceService preferenceService;
+	private final PreferenceService preferenceService;
 	private HashMap<String, String> ringtones;
 
 	public RingtoneServiceImpl(PreferenceService preferenceService) {
@@ -56,9 +56,7 @@ public class RingtoneServiceImpl implements RingtoneService {
 		}
 
 		if (ringtoneUri != null && RingtoneManager.isDefault(ringtoneUri)) {
-			if (ringtones.containsKey(uniqueId)) {
-				ringtones.remove(uniqueId);
-			}
+			ringtones.remove(uniqueId);
 		} else {
 			ringtones.put(uniqueId, ringtone);
 		}
@@ -139,7 +137,7 @@ public class RingtoneServiceImpl implements RingtoneService {
 
 	private boolean hasNoRingtone(String uniqueId) {
 		Uri ringtone = getRingtoneFromUniqueId(uniqueId);
-		return (ringtone == null || ringtone.toString() == null || ringtone.toString().equals("null"));
+		return (ringtone == null || ringtone.toString().equals("null"));
 	}
 
 	@Override
@@ -154,7 +152,7 @@ public class RingtoneServiceImpl implements RingtoneService {
 				defaultRingtone = getDefaultContactRingtone();
 				selectedRingtone = getContactRingtone(uniqueId);
 			}
-			return !(defaultRingtone != null && selectedRingtone != null && defaultRingtone.equals(selectedRingtone)) && hasNoRingtone(uniqueId);
+			return !(defaultRingtone != null && defaultRingtone.equals(selectedRingtone)) && hasNoRingtone(uniqueId);
 		}
 		return false;
 	}
diff --git a/app/src/main/java/ch/threema/app/services/SensorServiceImpl.java b/app/src/main/java/ch/threema/app/services/SensorServiceImpl.java
index dc99a56a..e5723eff 100644
--- a/app/src/main/java/ch/threema/app/services/SensorServiceImpl.java
+++ b/app/src/main/java/ch/threema/app/services/SensorServiceImpl.java
@@ -174,7 +174,7 @@ public class SensorServiceImpl implements SensorService, SensorEventListener {
 			z = (z / norm_Of_g);
 			int inclination = (int) Math.round(Math.toDegrees(Math.acos(z)));
 
-			isFlatOnTable = (inclination < 20 || inclination > 160);
+			isFlatOnTable = (inclination < 45 || inclination > 135);
 		}
 	}
 
diff --git a/app/src/main/java/ch/threema/app/services/ThreemaPushService.kt b/app/src/main/java/ch/threema/app/services/ThreemaPushService.kt
index 8fa07ba9..520117a5 100644
--- a/app/src/main/java/ch/threema/app/services/ThreemaPushService.kt
+++ b/app/src/main/java/ch/threema/app/services/ThreemaPushService.kt
@@ -221,9 +221,12 @@ class ThreemaPushService : Service() {
                     val intent = Intent(appContext, ThreemaPushService::class.java)
                     intent.action = SessionAndroidService.ACTION_START
                     callerLogger.info("Starting ThreemaPushService")
-                    ContextCompat.startForegroundService(appContext, intent)
-
-                    return true
+                    try {
+                        ContextCompat.startForegroundService(appContext, intent)
+                        return true
+                    } catch (e: Exception) {
+                        logger.error("Unable to start foreground service", e)
+                    }
                 }
             }
             return false
diff --git a/app/src/main/java/ch/threema/app/services/UserService.java b/app/src/main/java/ch/threema/app/services/UserService.java
index f9db936e..ada08648 100644
--- a/app/src/main/java/ch/threema/app/services/UserService.java
+++ b/app/src/main/java/ch/threema/app/services/UserService.java
@@ -105,15 +105,6 @@ public interface UserService {
 	 */
 	@Nullable String setPublicNickname(String publicNickname);
 
-	/**
-	 * Handle a typing change.
-	 *
-	 * @param toIdentity
-	 * @param isTyping
-	 * @return whether a is typing message was enqueued.
-	 */
-	boolean isTyping(String toIdentity, boolean isTyping);
-
 	boolean restoreIdentity(String backupString, String password) throws Exception;
 
 	boolean restoreIdentity(String identity, byte[] privateKey, byte[] publicKey) throws Exception;
diff --git a/app/src/main/java/ch/threema/app/services/UserServiceImpl.java b/app/src/main/java/ch/threema/app/services/UserServiceImpl.java
index 0edadca9..51585b0b 100644
--- a/app/src/main/java/ch/threema/app/services/UserServiceImpl.java
+++ b/app/src/main/java/ch/threema/app/services/UserServiceImpl.java
@@ -22,7 +22,6 @@
 package ch.threema.app.services;
 
 import static ch.threema.app.ThreemaApplication.PHONE_LINKED_PLACEHOLDER;
-import static ch.threema.app.ThreemaApplication.getServiceManager;
 
 import android.accounts.Account;
 import android.accounts.AccountManager;
@@ -71,9 +70,7 @@ import ch.threema.domain.protocol.api.APIConnector;
 import ch.threema.domain.protocol.api.CreateIdentityRequestDataInterface;
 import ch.threema.domain.protocol.csp.ProtocolDefines;
 import ch.threema.domain.protocol.csp.connection.MessageQueue;
-import ch.threema.domain.protocol.csp.messages.TypingIndicatorMessage;
 import ch.threema.domain.stores.IdentityStoreInterface;
-import ch.threema.storage.models.ContactModel;
 
 /**
  * This service class handle all user actions (db/identity....)
@@ -86,7 +83,6 @@ public class UserServiceImpl implements UserService, CreateIdentityRequestDataIn
 	private final IdentityStore identityStore;
 	private final APIConnector apiConnector;
 	private final LocaleService localeService;
-	private final MessageQueue messageQueue;
 	private final PreferenceService preferenceService;
 	private String policyResponseData;
 	private String policySignature;
@@ -100,13 +96,11 @@ public class UserServiceImpl implements UserService, CreateIdentityRequestDataIn
 		LocaleService localeService,
 		APIConnector apiConnector,
 		IdentityStore identityStore,
-		MessageQueue messageQueue,
 		PreferenceService preferenceService
 	) {
 		this.context = context;
 		this.preferenceStore = preferenceStore;
 		this.localeService = localeService;
-		this.messageQueue = messageQueue;
 		this.identityStore = identityStore;
 		this.apiConnector = apiConnector;
 		this.preferenceService = preferenceService;
@@ -485,47 +479,6 @@ public class UserServiceImpl implements UserService, CreateIdentityRequestDataIn
 		return LocaleUtil.getLanguage();
 	}
 
-	@Override
-	public boolean isTyping(String toIdentity, boolean isTyping) {
-		boolean canSendIsTyping = this.preferenceService.isTypingIndicator();
-
-		ContactModel contactModel = null;
-		try {
-			if (getServiceManager() != null) {
-				contactModel = getServiceManager().getContactService().getByIdentity(toIdentity);
-			}
-		} catch (Exception e) {
-			logger.error("Can't get ContactService for isTyping", e);
-		}
-		if (contactModel != null) {
-			if (canSendIsTyping) {
-				if (contactModel.getTypingIndicators() == ContactModel.DONT_SEND) {
-					canSendIsTyping = false;
-				}
-			} else {
-				if (contactModel.getTypingIndicators() == ContactModel.SEND) {
-					canSendIsTyping = true;
-				}
-			}
-		}
-
-		if (!canSendIsTyping) {
-			return false;
-		}
-
-		final TypingIndicatorMessage msg = new TypingIndicatorMessage();
-		msg.setTyping(isTyping);
-		msg.setFromIdentity(this.getIdentity());
-		msg.setToIdentity(toIdentity);
-
-		try {
-			return this.messageQueue.enqueue(msg) != null;
-		} catch (ThreemaException e) {
-			logger.error("Exception", e);
-		}
-		return false;
-	}
-
 	@Override
 	public boolean restoreIdentity(final String backupString, final String password) throws Exception {
 		final IdentityBackupDecoder identityBackupDecoder = new IdentityBackupDecoder(backupString);
diff --git a/app/src/main/java/ch/threema/app/services/VoiceMessagePlayerService.kt b/app/src/main/java/ch/threema/app/services/VoiceMessagePlayerService.kt
new file mode 100644
index 00000000..ae9f428d
--- /dev/null
+++ b/app/src/main/java/ch/threema/app/services/VoiceMessagePlayerService.kt
@@ -0,0 +1,303 @@
+/*  _____ _
+ * |_   _| |_  _ _ ___ ___ _ __  __ _
+ *   | | | ' \| '_/ -_) -_) '  \/ _` |_
+ *   |_| |_||_|_| \___\___|_|_|_\__,_(_)
+ *
+ * Threema for Android
+ * Copyright (c) 2023 Threema GmbH
+ *
+ * This program is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU Affero General Public License, version 3,
+ * as published by the Free Software Foundation.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+ * GNU Affero General Public License for more details.
+ *
+ * You should have received a copy of the GNU Affero General Public License
+ * along with this program. If not, see <https://www.gnu.org/licenses/>.
+ */
+
+package ch.threema.app.services
+
+import android.Manifest
+import android.annotation.SuppressLint
+import android.app.NotificationChannel
+import android.app.NotificationManager
+import android.app.PendingIntent
+import android.app.PendingIntent.*
+import android.content.Context
+import android.content.Intent
+import android.media.AudioManager
+import android.media.AudioManager.OnAudioFocusChangeListener
+import android.net.Uri
+import android.os.Build
+import android.widget.Toast
+import android.widget.Toast.LENGTH_LONG
+import androidx.core.app.NotificationCompat
+import androidx.core.app.NotificationManagerCompat
+import androidx.core.content.res.ResourcesCompat
+import androidx.media3.common.*
+import androidx.media3.exoplayer.DefaultRenderersFactory
+import androidx.media3.exoplayer.DefaultLoadControl
+import androidx.media3.exoplayer.ExoPlayer
+import androidx.media3.exoplayer.audio.AudioSink
+import androidx.media3.session.*
+import androidx.media3.session.MediaSession.Callback
+import ch.threema.app.R
+import ch.threema.app.ThreemaApplication
+import ch.threema.app.listeners.SensorListener
+import ch.threema.app.listeners.SensorListener.keyIsNear
+import ch.threema.app.services.NotificationService.NOTIFICATION_CHANNEL_VOICE_MSG_PLAYER
+import ch.threema.app.utils.ConfigUtils
+import ch.threema.app.voicemessage.SamsungQuirkAudioSink
+import ch.threema.base.utils.LoggingUtil
+import com.google.common.util.concurrent.Futures
+import com.google.common.util.concurrent.ListenableFuture
+
+@androidx.annotation.OptIn(androidx.media3.common.util.UnstableApi::class)
+class VoiceMessagePlayerService : MediaSessionService(), SensorListener, OnAudioFocusChangeListener {
+    private val logger = LoggingUtil.getThreemaLogger(TAG)
+
+    private lateinit var player: ExoPlayer
+    private lateinit var mediaSession: MediaSession
+    private lateinit var audioManager: AudioManager
+
+    private var sensorService: SensorService? = null
+    private var preferenceService: PreferenceService? = null
+    private var hasAudioFocus = false
+
+    companion object {
+        private const val TAG = "VoiceMessagePlayerService"
+        private const val NOTIFICATION_ID = 59843
+        private const val CHANNEL_ID = "voice_message_player_service"
+    }
+
+    override fun onCreate() {
+        super.onCreate()
+
+        ThreemaApplication.getServiceManager()?.let {
+            this.sensorService = it.sensorService
+            this.preferenceService = it.preferenceService
+        }
+
+        audioManager = getSystemService(AUDIO_SERVICE) as AudioManager
+
+        val mediaNotificationProvider = DefaultMediaNotificationProvider.Builder(this)
+            .setChannelName(R.string.notification_channel_voice_message_player)
+            .setChannelId(NOTIFICATION_CHANNEL_VOICE_MSG_PLAYER)
+            .build()
+        mediaNotificationProvider.setSmallIcon(R.drawable.ic_notification_small)
+        setMediaNotificationProvider(mediaNotificationProvider)
+
+        initializeSessionAndPlayer()
+        setListener(MediaSessionServiceListener())
+    }
+
+    override fun onUpdateNotification(session: MediaSession, startInForegroundRequired: Boolean) {
+        if (player.playbackState == Player.STATE_ENDED && !startInForegroundRequired) {
+            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.N) {
+                stopForeground(STOP_FOREGROUND_REMOVE)
+            } else {
+                stopForeground(true)
+            }
+        } else {
+            super.onUpdateNotification(session, startInForegroundRequired)
+        }
+    }
+
+    override fun onGetSession(controllerInfo: MediaSession.ControllerInfo): MediaSession {
+        return mediaSession
+    }
+
+    override fun onTaskRemoved(rootIntent: Intent?) {
+        if (!player.playWhenReady) {
+            stopSelf()
+        }
+    }
+
+    override fun onDestroy() {
+        preferenceService?.let {
+            if (it.isUseProximitySensor) {
+                sensorService?.unregisterSensors(TAG)
+            }
+        }
+        releaseAudioFocus()
+        player.release()
+        mediaSession.release()
+        clearListener()
+        super.onDestroy()
+    }
+
+    private fun initializeSessionAndPlayer() {
+        player = ExoPlayer.Builder(this)
+                .setRenderersFactory(SamsungQuirkRenderersFactory(this))
+                .setAudioAttributes(getRegularAudioAttributes(), false)
+                .setWakeMode(C.WAKE_MODE_LOCAL)
+                .setLoadControl(
+                        DefaultLoadControl.Builder()
+                                .setBufferDurationsMs(Integer.MAX_VALUE, Integer.MAX_VALUE, Integer.MAX_VALUE, Integer.MAX_VALUE)
+                                .build()
+                )
+                .build()
+
+        preferenceService?.let {
+            if (it.isUseProximitySensor) {
+                player.addListener(object : Player.Listener {
+                    override fun onIsPlayingChanged(isPlaying: Boolean) {
+                        logger.debug("onIsPlayingChanged {}", isPlaying)
+                        if (isPlaying) {
+                            sensorService?.registerSensors(TAG, this@VoiceMessagePlayerService)
+                            requestAudioFocus()
+                        } else {
+                            sensorService?.unregisterSensors(TAG)
+                            releaseAudioFocus()
+                        }
+                    }
+                })
+            }
+        }
+
+        val mediaSessionCallback = (object : Callback {
+            override fun onAddMediaItems(mediaSession: MediaSession, controller: MediaSession.ControllerInfo, mediaItems: MutableList<MediaItem>): ListenableFuture<MutableList<MediaItem>> {
+                val resolvedMediaItems = mutableListOf<MediaItem>()
+                for (mediaItem in mediaItems) {
+                    val resolvedMediaItem = MediaItem.Builder()
+                            .setUri(Uri.parse(mediaItem.mediaId))
+                            .setMediaId(mediaItem.mediaId)
+                            .setMediaMetadata(mediaItem.mediaMetadata)
+                            .build()
+                    resolvedMediaItems.add(resolvedMediaItem)
+                }
+                return Futures.immediateFuture(resolvedMediaItems)
+            }
+        })
+
+        mediaSession =
+                MediaSession.Builder(this, player)
+                        .setCallback(mediaSessionCallback)
+                        .setSessionActivity(getSessionActivityPendingIntent())
+                        .build()
+    }
+
+    private fun getSessionActivityPendingIntent(): PendingIntent {
+        val intent = packageManager
+                .getLaunchIntentForPackage(packageName)
+                ?.setPackage(null)
+                ?.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK or Intent.FLAG_ACTIVITY_RESET_TASK_IF_NEEDED)
+
+        val immutableFlag = if (Build.VERSION.SDK_INT >= 23) FLAG_IMMUTABLE else 0
+        return getActivity(this, 0, intent, immutableFlag or FLAG_UPDATE_CURRENT)
+    }
+
+    private inner class MediaSessionServiceListener : Listener {
+
+        /**
+         * This method is only required to be implemented on Android 12 or above when an attempt is made
+         * by a media controller to resume playback when the {@link MediaSessionService} is in the
+         * background.
+         */
+        override fun onForegroundServiceStartNotAllowedException() {
+            @SuppressLint("MissingPermission")
+            if (ConfigUtils.isPermissionGranted(this@VoiceMessagePlayerService, Manifest.permission.POST_NOTIFICATIONS)) {
+                val notificationManagerCompat = NotificationManagerCompat.from(this@VoiceMessagePlayerService)
+                ensureNotificationChannel(notificationManagerCompat)
+                val builder =
+                        NotificationCompat.Builder(this@VoiceMessagePlayerService, CHANNEL_ID)
+                                .setContentIntent(getSessionActivityPendingIntent())
+                                .setSmallIcon(R.drawable.ic_notification_small)
+                                .setColor(ResourcesCompat.getColor(resources, R.color.md_theme_light_primary, theme))
+                                .setContentTitle(getString(R.string.vm_fg_service_not_allowed))
+                                .setStyle(
+                                        NotificationCompat.BigTextStyle().bigText(getString(R.string.vm_fg_service_not_allowed_explain))
+                                )
+                                .setPriority(NotificationCompat.PRIORITY_DEFAULT)
+                                .setAutoCancel(true)
+
+                notificationManagerCompat.notify(NOTIFICATION_ID, builder.build())
+            } else {
+                Toast.makeText(this@VoiceMessagePlayerService, R.string.notifications_disabled_title, LENGTH_LONG).show()
+            }
+        }
+    }
+
+    private fun ensureNotificationChannel(notificationManagerCompat: NotificationManagerCompat) {
+        if (Build.VERSION.SDK_INT < 26 || notificationManagerCompat.getNotificationChannel(CHANNEL_ID) != null) {
+            return
+        }
+
+        val channel =
+                NotificationChannel(
+                        CHANNEL_ID,
+                        getString(R.string.vm_fg_service_not_allowed),
+                        NotificationManager.IMPORTANCE_DEFAULT
+                )
+        notificationManagerCompat.createNotificationChannel(channel)
+    }
+
+    override fun onSensorChanged(key: String?, value: Boolean) {
+        if (keyIsNear == key) {
+            if (value) {
+                player.setAudioAttributes(getEarpieceAudioAttributes(), false)
+            } else {
+                player.setAudioAttributes(getRegularAudioAttributes(), false)
+            }
+        }
+    }
+
+    private fun requestAudioFocus() {
+        if (!hasAudioFocus) {
+            audioManager.requestAudioFocus(
+                this,
+                AudioManager.STREAM_MUSIC,
+                AudioManager.AUDIOFOCUS_GAIN_TRANSIENT_EXCLUSIVE
+            )
+            hasAudioFocus = true
+        }
+    }
+
+    private fun releaseAudioFocus() {
+        audioManager.abandonAudioFocus(this)
+        hasAudioFocus = false
+    }
+
+    override fun onAudioFocusChange(focusChange: Int) {
+        when (focusChange) {
+            AudioManager.AUDIOFOCUS_GAIN -> {
+                player.volume = 1.0f
+            }
+            AudioManager.AUDIOFOCUS_LOSS -> {
+                player.pause()
+            }
+            AudioManager.AUDIOFOCUS_LOSS_TRANSIENT -> {
+                player.pause()
+            }
+            AudioManager.AUDIOFOCUS_LOSS_TRANSIENT_CAN_DUCK -> {
+                player.volume = 0.2f
+            }
+        }
+    }
+
+    private fun getRegularAudioAttributes() : AudioAttributes {
+        return AudioAttributes.Builder()
+            .setUsage(C.USAGE_MEDIA)
+            .setContentType(C.AUDIO_CONTENT_TYPE_MUSIC)
+            .setAllowedCapturePolicy(C.ALLOW_CAPTURE_BY_NONE)
+            .build()
+    }
+
+    private fun getEarpieceAudioAttributes() : AudioAttributes {
+        return AudioAttributes.Builder()
+            .setUsage(C.USAGE_VOICE_COMMUNICATION)
+            .setContentType(C.AUDIO_CONTENT_TYPE_SPEECH)
+            .setAllowedCapturePolicy(C.ALLOW_CAPTURE_BY_NONE)
+            .build()
+    }
+
+    class SamsungQuirkRenderersFactory(val context: Context) : DefaultRenderersFactory(context) {
+        override fun buildAudioSink(context: Context, enableFloatOutput: Boolean, enableAudioTrackPlaybackParams: Boolean, enableOffload: Boolean): AudioSink {
+            return SamsungQuirkAudioSink(context, enableFloatOutput, enableAudioTrackPlaybackParams, enableOffload)
+        }
+    }
+}
diff --git a/app/src/main/java/ch/threema/app/services/WallpaperService.java b/app/src/main/java/ch/threema/app/services/WallpaperService.java
index 1b91c6e4..d16513f6 100644
--- a/app/src/main/java/ch/threema/app/services/WallpaperService.java
+++ b/app/src/main/java/ch/threema/app/services/WallpaperService.java
@@ -29,6 +29,7 @@ import androidx.activity.result.ActivityResultLauncher;
 import androidx.annotation.NonNull;
 import androidx.annotation.Nullable;
 import androidx.fragment.app.Fragment;
+
 import ch.threema.app.messagereceiver.MessageReceiver;
 import kotlin.jvm.functions.Function0;
 
@@ -37,7 +38,7 @@ public interface WallpaperService {
 	ActivityResultLauncher<Intent> getWallpaperActivityResultLauncher(@NonNull Fragment fragment, @Nullable Runnable onResultAction, @Nullable Function0<MessageReceiver> getMessageReceiver);
 	boolean removeWallpaper(MessageReceiver messageReceiver);
 	void removeWallpaper(String uniqueIdString);
-	boolean setupWallpaperBitmap(MessageReceiver messageReceiver, ImageView wallpaperView, boolean landscape);
+	boolean setupWallpaperBitmap(MessageReceiver messageReceiver, ImageView wallpaperView, boolean landscape, boolean isTheDarkside);
 	boolean hasGalleryWallpaper(MessageReceiver messageReceiver);
 	void selectWallpaper(@NonNull Fragment fragment, @NonNull ActivityResultLauncher<Intent> fileSelectionLauncher, @Nullable MessageReceiver messageReceiver, @Nullable Runnable onSuccess);
 	void removeAll(Context context, boolean silent);
diff --git a/app/src/main/java/ch/threema/app/services/WallpaperServiceImpl.java b/app/src/main/java/ch/threema/app/services/WallpaperServiceImpl.java
index dda51c63..8c2396a4 100644
--- a/app/src/main/java/ch/threema/app/services/WallpaperServiceImpl.java
+++ b/app/src/main/java/ch/threema/app/services/WallpaperServiceImpl.java
@@ -21,6 +21,9 @@
 
 package ch.threema.app.services;
 
+import static android.app.Activity.RESULT_OK;
+import static android.provider.MediaStore.MEDIA_IGNORE_FILENAME;
+
 import android.annotation.SuppressLint;
 import android.app.Activity;
 import android.content.Context;
@@ -38,6 +41,14 @@ import android.view.Window;
 import android.widget.ImageView;
 import android.widget.Toast;
 
+import androidx.activity.result.ActivityResultLauncher;
+import androidx.activity.result.contract.ActivityResultContracts;
+import androidx.annotation.AnyThread;
+import androidx.annotation.NonNull;
+import androidx.annotation.Nullable;
+import androidx.annotation.UiThread;
+import androidx.fragment.app.Fragment;
+
 import org.apache.commons.io.FileUtils;
 import org.apache.commons.io.IOUtils;
 import org.slf4j.Logger;
@@ -52,13 +63,6 @@ import java.util.concurrent.ExecutionException;
 
 import javax.crypto.CipherInputStream;
 
-import androidx.activity.result.ActivityResultLauncher;
-import androidx.activity.result.contract.ActivityResultContracts;
-import androidx.annotation.AnyThread;
-import androidx.annotation.NonNull;
-import androidx.annotation.Nullable;
-import androidx.annotation.UiThread;
-import androidx.fragment.app.Fragment;
 import ch.threema.app.R;
 import ch.threema.app.activities.CropImageActivity;
 import ch.threema.app.dialogs.BottomSheetAbstractDialog;
@@ -79,9 +83,6 @@ import java8.util.concurrent.CompletableFuture;
 import java8.util.function.Supplier;
 import kotlin.jvm.functions.Function0;
 
-import static android.app.Activity.RESULT_OK;
-import static android.provider.MediaStore.MEDIA_IGNORE_FILENAME;
-
 public class WallpaperServiceImpl implements WallpaperService {
 	private static final Logger logger = LoggingUtil.getThreemaLogger("WallpaperServiceImpl");
 
@@ -161,7 +162,7 @@ public class WallpaperServiceImpl implements WallpaperService {
 	}
 
 	@AnyThread
-	private CompletableFuture<Bitmap> getWallpaperBitmap(MessageReceiver messageReceiver, boolean landscape) {
+	private CompletableFuture<Bitmap> getWallpaperBitmap(MessageReceiver messageReceiver, boolean landscape, final boolean isTheDarkside) {
 		return CompletableFuture.supplyAsync(new Supplier<Bitmap>() {
 			@Override
 			public Bitmap get() {
@@ -189,7 +190,7 @@ public class WallpaperServiceImpl implements WallpaperService {
 				if (bitmap == null && preferenceService.isCustomWallpaperEnabled()) {
 					path = fileService.getGlobalWallpaperFilePath();
 					if (!TestUtil.empty(path)) {
-						try (FileInputStream fis = new FileInputStream(new File(path)); CipherInputStream cis = masterKey.getCipherInputStream(fis)) {
+						try (FileInputStream fis = new FileInputStream(path); CipherInputStream cis = masterKey.getCipherInputStream(fis)) {
 							bitmap = BitmapFactory.decodeStream(cis, null, options);
 						} catch (Exception e) {
 							//
@@ -206,8 +207,7 @@ public class WallpaperServiceImpl implements WallpaperService {
 					noptions.inPreferredConfig = Bitmap.Config.ALPHA_8;
 					noptions.inSampleSize = 1;
 
-					int resource = ConfigUtils.getAppTheme(context) == ConfigUtils.THEME_DARK ?
-						R.drawable.wallpaper_dark : R.drawable.wallpaper_light;
+					int resource = isTheDarkside ? R.drawable.wallpaper_dark : R.drawable.wallpaper_light;
 					try {
 						bitmap = BitmapFactory.decodeResource(context.getResources(), resource, noptions);
 					} catch (Exception e) {
@@ -241,12 +241,12 @@ public class WallpaperServiceImpl implements WallpaperService {
 
 	@Override
 	@UiThread
-	public boolean setupWallpaperBitmap(MessageReceiver messageReceiver, ImageView wallpaperView, boolean landscape) {
+	public boolean setupWallpaperBitmap(MessageReceiver messageReceiver, ImageView wallpaperView, boolean landscape, boolean isTheDarkside) {
 		if (TestUtil.required(messageReceiver, wallpaperView)) {
 			Bitmap bitmap = null;
 			try {
 				if (!hasEmptyWallpaper(messageReceiver).get()) {
-					bitmap = getWallpaperBitmap(messageReceiver, landscape).get();
+					bitmap = getWallpaperBitmap(messageReceiver, landscape, isTheDarkside).get();
 				}
 				return setImageView(wallpaperView, bitmap);
 			} catch (InterruptedException e) {
diff --git a/app/src/main/java/ch/threema/app/services/ballot/BallotService.java b/app/src/main/java/ch/threema/app/services/ballot/BallotService.java
index 73d98c47..f15aa7a2 100644
--- a/app/src/main/java/ch/threema/app/services/ballot/BallotService.java
+++ b/app/src/main/java/ch/threema/app/services/ballot/BallotService.java
@@ -21,11 +21,12 @@
 
 package ch.threema.app.services.ballot;
 
+import androidx.annotation.NonNull;
+import androidx.annotation.Nullable;
+
 import java.util.List;
 import java.util.Map;
 
-import androidx.annotation.NonNull;
-import androidx.annotation.Nullable;
 import ch.threema.app.exceptions.NotAllowedException;
 import ch.threema.app.listeners.BallotListener;
 import ch.threema.app.managers.ListenerManager;
@@ -46,7 +47,7 @@ import ch.threema.storage.models.ballot.LinkBallotModel;
 public interface BallotService {
 
 	interface BallotFilter {
-		MessageReceiver getReceiver();
+		MessageReceiver<?> getReceiver();
 		BallotModel.State[] getStates();
 		default String createdOrNotVotedByIdentity() {
 			return null;
@@ -85,7 +86,7 @@ public interface BallotService {
 	List<BallotModel> getBallots(BallotFilter filter) throws NotAllowedException;
 	long countBallots(BallotFilter filter);
 
-	boolean belongsToMe(Integer ballotModelId, MessageReceiver messageReceiver) throws NotAllowedException;
+	boolean belongsToMe(Integer ballotModelId, MessageReceiver<?> messageReceiver) throws NotAllowedException;
 
 	/**
 	 * Create / Update ballot from createMessage
@@ -96,17 +97,17 @@ public interface BallotService {
 	@NonNull BallotUpdateResult update(BallotCreateInterface createMessage) throws ThreemaException, BadMessageException;
 	boolean update(BallotModel ballotModel);
 
-	BallotPublishResult publish(MessageReceiver messageReceiver, BallotModel ballotModel,
+	BallotPublishResult publish(MessageReceiver<?> messageReceiver, BallotModel ballotModel,
 								AbstractMessageModel abstractMessageModel) throws NotAllowedException, MessageTooLongException;
 
-	BallotPublishResult publish(MessageReceiver messageReceiver,
+	BallotPublishResult publish(MessageReceiver<?> messageReceiver,
 	                            BallotModel ballotModel,
 	                            AbstractMessageModel abstractMessageModel,
 	                            String receivingIdentity) throws NotAllowedException, MessageTooLongException;
 
 	LinkBallotModel getLinkedBallotModel(BallotModel ballotModel) throws NotAllowedException;
 	boolean remove(BallotModel ballotModel) throws NotAllowedException;
-	boolean remove(MessageReceiver receiver);
+	boolean remove(MessageReceiver<?> receiver);
 
 	/*
 	choice stuff
@@ -124,12 +125,12 @@ public interface BallotService {
 	 * return the count of votings depending on the ballot properties
 	 */
 	int getVotingCount(BallotChoiceModel choiceModel);
-	boolean removeVotes(MessageReceiver receiver, String identity);
+	boolean removeVotes(MessageReceiver<?> receiver, String identity);
 
 	@NonNull List<String> getVotedParticipants(Integer ballotModelId);
 	@NonNull List<String> getPendingParticipants(Integer ballotModelId);
 	@NonNull String[] getParticipants(Integer ballotModelId);
-	@NonNull String[] getParticipants(MessageReceiver messageReceiver);
+	@NonNull String[] getParticipants(MessageReceiver<?> messageReceiver);
 
 	boolean hasVoted(Integer ballotModelId, String fromIdentity);
 
@@ -143,7 +144,7 @@ public interface BallotService {
 	 */
 	List<BallotVoteModel> getBallotVotes(Integer ballotModelId) throws NotAllowedException;
 
-	MessageReceiver getReceiver(BallotModel ballotModel);
+	MessageReceiver<?> getReceiver(BallotModel ballotModel);
 
 	BallotMatrixData getMatrixData(int ballotModelId);
 
diff --git a/app/src/main/java/ch/threema/app/services/ballot/BallotServiceImpl.java b/app/src/main/java/ch/threema/app/services/ballot/BallotServiceImpl.java
index 766da577..4c62c140 100644
--- a/app/src/main/java/ch/threema/app/services/ballot/BallotServiceImpl.java
+++ b/app/src/main/java/ch/threema/app/services/ballot/BallotServiceImpl.java
@@ -355,14 +355,14 @@ public class BallotServiceImpl implements BallotService {
 
 		if (existingModel != null) {
 			if (data.getDisplayType().ordinal() != existingModel.getDisplayType().ordinal()) {
-				throw new BadMessageException("Ballot display mode not allowed to change. Discarding message", true);
+				throw new BadMessageException("Ballot display mode not allowed to change. Discarding message");
 			}
 			if (data.getState() == BallotData.State.CLOSED) {
 				ballotModel = existingModel;
 				toState = BallotModel.State.CLOSED;
 			}
 			else {
-				throw new BadMessageException("Ballot with same ID already exists. Discarding message.", true);
+				throw new BadMessageException("Ballot with same ID already exists. Discarding message.");
 			}
 		} else {
 			if (data.getState() != BallotData.State.CLOSED) {
@@ -373,7 +373,7 @@ public class BallotServiceImpl implements BallotService {
 				ballotModel.setLastViewedAt(null);
 				toState = BallotModel.State.OPEN;
 			} else {
-				throw new BadMessageException("New ballot with closed state requested. Discarding message.", true);
+				throw new BadMessageException("New ballot with closed state requested. Discarding message.");
 			}
 		}
 
diff --git a/app/src/main/java/ch/threema/app/services/license/LicenseServiceThreema.java b/app/src/main/java/ch/threema/app/services/license/LicenseServiceThreema.java
index f9a72789..7caf0991 100644
--- a/app/src/main/java/ch/threema/app/services/license/LicenseServiceThreema.java
+++ b/app/src/main/java/ch/threema/app/services/license/LicenseServiceThreema.java
@@ -28,7 +28,7 @@ import ch.threema.domain.protocol.api.APIConnector;
 abstract public class  LicenseServiceThreema<T extends LicenseService.Credentials>  implements LicenseService<T> {
 	protected final APIConnector apiConnector;
 	protected final PreferenceService preferenceService;
-	private String deviceId;
+	private final String deviceId;
 	private String updateMessage;
 	private String updateUrl;
 	private boolean updateMessageShown;     /* not the best place to track this... */
diff --git a/app/src/main/java/ch/threema/app/services/messageplayer/AudioMessagePlayer.java b/app/src/main/java/ch/threema/app/services/messageplayer/AudioMessagePlayer.java
index 1b5eb57b..d3a505ea 100644
--- a/app/src/main/java/ch/threema/app/services/messageplayer/AudioMessagePlayer.java
+++ b/app/src/main/java/ch/threema/app/services/messageplayer/AudioMessagePlayer.java
@@ -21,35 +21,39 @@
 
 package ch.threema.app.services.messageplayer;
 
-import static android.media.AudioManager.STREAM_MUSIC;
+import static android.text.format.DateUtils.SECOND_IN_MILLIS;
+import static androidx.media3.common.C.TIME_UNSET;
+import static ch.threema.app.ThreemaApplication.getAppContext;
 
-import android.Manifest;
 import android.content.Context;
-import android.content.pm.PackageManager;
-import android.media.AudioAttributes;
-import android.media.AudioManager;
-import android.media.MediaPlayer;
+import android.graphics.Bitmap;
 import android.net.Uri;
-import android.os.Build;
 
-import androidx.core.content.ContextCompat;
+import androidx.annotation.NonNull;
+import androidx.annotation.Nullable;
+import androidx.media3.common.MediaItem;
+import androidx.media3.common.MediaMetadata;
+import androidx.media3.common.Player;
+import androidx.media3.session.MediaController;
+
+import com.google.common.util.concurrent.ListenableFuture;
 
 import org.slf4j.Logger;
 
 import java.io.File;
+import java.util.Map;
+import java.util.concurrent.ExecutionException;
 
 import ch.threema.app.R;
-import ch.threema.app.ThreemaApplication;
-import ch.threema.app.listeners.SensorListener;
 import ch.threema.app.managers.ListenerManager;
 import ch.threema.app.messagereceiver.MessageReceiver;
+import ch.threema.app.services.DeadlineListService;
 import ch.threema.app.services.FileService;
 import ch.threema.app.services.MessageService;
 import ch.threema.app.services.PreferenceService;
-import ch.threema.app.services.SensorService;
-import ch.threema.app.utils.MediaPlayerStateWrapper;
+import ch.threema.app.utils.BitmapUtil;
+import ch.threema.app.utils.LocaleUtil;
 import ch.threema.app.utils.RuntimeUtil;
-import ch.threema.app.utils.SoundUtil;
 import ch.threema.base.utils.LoggingUtil;
 import ch.threema.logging.ThreemaLogger;
 import ch.threema.storage.models.AbstractMessageModel;
@@ -58,58 +62,88 @@ import ch.threema.storage.models.data.media.AudioDataModel;
 import ch.threema.storage.models.data.media.FileDataModel;
 import ch.threema.storage.models.data.media.MediaMessageDataInterface;
 
-public class AudioMessagePlayer extends MessagePlayer implements AudioManager.OnAudioFocusChangeListener, SensorListener {
+public class AudioMessagePlayer extends MessagePlayer {
 	private final Logger logger = LoggingUtil.getThreemaLogger("AudioMessagePlayer");
 
-	private static final int SEEKBAR_UPDATE_FREQUENCY = 100;
-	private MediaPlayerStateWrapper mediaPlayer;
+	private static final int SEEKBAR_UPDATE_FREQUENCY = 50;
 	private File decryptedFile = null;
-	private int duration = 0;
-	private int position = 0;
+	private Uri decryptedFileUri = null;
+	private int duration = 0; // duration in milliseconds
+	private int position = 0; // position in milliseconds
 	private Thread mediaPositionListener;
-	private final AudioManager audioManager;
-	private int streamType = STREAM_MUSIC;
-	private int audioStreamType = STREAM_MUSIC;
 	private final PreferenceService preferenceService;
-	private final SensorService sensorService;
 	private final FileService fileService;
-	private final boolean micPermission;
+	private final DeadlineListService hiddenChatsListService;
+	private final ListenableFuture<MediaController> mediaControllerFuture;
 
 	protected AudioMessagePlayer(Context context,
-	                             MessageService messageService,
-	                             FileService fileService,
-	                             PreferenceService preferenceService,
-	                             MessageReceiver messageReceiver,
-	                             AbstractMessageModel messageModel) {
+								 MessageService messageService,
+								 FileService fileService,
+								 PreferenceService preferenceService,
+								 DeadlineListService hiddenChatsListService,
+								 MessageReceiver<?> messageReceiver,
+								 ListenableFuture<MediaController> mediaControllerFuture,
+								 AbstractMessageModel messageModel) {
 		super(context, messageService, fileService, messageReceiver, messageModel);
 
 		this.preferenceService = preferenceService;
-		this.audioManager = (AudioManager) getContext().getSystemService(Context.AUDIO_SERVICE);
-		this.sensorService = ThreemaApplication.getServiceManager().getSensorService();
 		this.fileService = fileService;
-		this.mediaPlayer = null;
-		this.micPermission = ContextCompat.checkSelfPermission(context, Manifest.permission.RECORD_AUDIO) == PackageManager.PERMISSION_GRANTED;
+		this.hiddenChatsListService = hiddenChatsListService;
+		this.mediaControllerFuture = mediaControllerFuture;
 
-		String UID = messageModel.getUid();
-		logger.info("New MediaPlayer instance: {}", UID);
+		logger.info("New AudioMediaPlayer instance: {}", messageModel.getId());
 
-		// Set logger prefix
 		if (logger instanceof ThreemaLogger) {
-			((ThreemaLogger) logger).setPrefix(String.valueOf(UID));
+			((ThreemaLogger) logger).setPrefix(String.valueOf(messageModel.getId()));
 		}
 	}
 
-	/**
-	 * Get default volume level. Reduce level if mic permission has not been granted.
-	 * Workaround for Android bug that causes the OS to play extra loud through earpiece.
-	 * @return volume level
-	 */
-	private float getDefaultVolumeLevel() {
-		if (streamType ==  AudioManager.STREAM_VOICE_CALL) {
-			return micPermission ? 0.7f : 0.1f;
+	private final Player.Listener playerListener = new Player.Listener() {
+			@Override
+			public void onIsLoadingChanged(boolean isLoading) {
+				logger.debug(isLoading ? "@ onLoading" : "@ onLoaded");
+			}
+
+			@Override
+			public void onIsPlayingChanged(boolean isPlaying) {
+				MediaController mediaController = getMediaController();
+				if (mediaController != null) {
+					if (isPlaying) {
+						logger.debug("@ onPlay");
+						makeResume(SOURCE_UI_TOGGLE);
+					} else if (mediaController.getPlaybackState() != Player.STATE_ENDED && playerMediaMatchesControllerMedia()) {
+						logger.debug("@ onPause");
+						makePause(SOURCE_UI_TOGGLE);
+					}
+				}
+			}
+
+		@Override
+		public void onPlaybackStateChanged(int playbackState) {
+			if (playbackState == Player.STATE_ENDED) {
+				logger.debug("@ onStopped");
+				AudioMessagePlayer.super.stop();
+				ListenerManager.messagePlayerListener.handle(listener -> listener.onAudioPlayEnded(getMessageModel()));
+			} else if (playbackState == Player.STATE_READY) {
+				logger.debug("@ onReady");
+				markAsConsumed();
+				prepared();
+			}
 		}
-		return 1.0f;
-	}
+
+		@Override
+		public void onPositionDiscontinuity(@NonNull Player.PositionInfo oldPosition, @NonNull Player.PositionInfo newPosition, int reason) {
+			if (reason == Player.DISCONTINUITY_REASON_SEEK) {
+				logger.debug("@ onSeekEnded {} {} {}", reason, oldPosition.positionMs, newPosition.positionMs);
+
+				// seek ended
+				if (oldPosition != newPosition) {
+					position = (int) newPosition.positionMs;
+					onSeekCompleted();
+				}
+			}
+		}
+	};
 
 	@Override
 	public MediaMessageDataInterface getData() {
@@ -131,238 +165,197 @@ public class AudioMessagePlayer extends MessagePlayer implements AudioManager.On
 		return messageModel;
 	}
 
-	private AudioAttributes getAudioAttributes(int stream) {
-		if (stream == AudioManager.STREAM_VOICE_CALL) {
-			return SoundUtil.getAudioAttributesForUsage(AudioAttributes.USAGE_VOICE_COMMUNICATION);
-		} else {
-			return SoundUtil.getAudioAttributesForUsage(AudioAttributes.USAGE_MEDIA);
-		}
-	}
-
-	private void open(File decryptedFile, final boolean resume) {
+	@Override
+	protected void open(File decryptedFile) {
 		this.decryptedFile = decryptedFile;
-		final Uri uri = fileService.getShareFileUri(decryptedFile, null);
+		this.decryptedFileUri = fileService.getShareFileUri(decryptedFile, null);
 		this.position = 0;
+		this.duration = 0;
 
-		logger.debug("open uri = {}", uri);
+		logger.debug("open uri = {}", decryptedFileUri);
 
-		if (mediaPlayer != null) {
-			logger.debug("stopping existing player {}", Thread.currentThread().getId());
+		MediaController mediaController = getMediaController();
+		if (mediaController != null) {
 
-			if (resume && isPlaying()) {
-				position = mediaPlayer.getCurrentPosition();
+			String displayName;
+			Bitmap artworkBitmap = null;
+			if (!this.preferenceService.isShowMessagePreview() || this.hiddenChatsListService.has(currentMessageReceiver.getUniqueIdString())) {
+				displayName = getContext().getString(R.string.notification_channel_voice_message_player);
+			} else {
+				displayName = currentMessageReceiver.getDisplayName();
+				artworkBitmap = currentMessageReceiver.getAvatar();
 			}
-			releasePlayer();
-			abandonFocus(resume);
-		}
 
-		logger.debug("starting new player {}", Thread.currentThread().getId());
-		mediaPlayer = new MediaPlayerStateWrapper();
-
-		try {
-			logger.debug("starting prepare - streamType = {}", streamType);
-			setOutputStream(streamType);
-			mediaPlayer.setDataSource(getContext(), uri);
-			mediaPlayer.prepare();
-			prepared(mediaPlayer, resume);
-			markAsConsumed();
-		} catch (Exception e) {
-			if (e instanceof IllegalArgumentException) {
-				showError(getContext().getString(R.string.file_is_not_audio));
+			MediaMetadata.Builder metadataBuilder = new MediaMetadata.Builder()
+				.setTitle(displayName)
+				.setArtist(getContext().getString(R.string.voice_message_from,
+						LocaleUtil.formatTimeStampStringAbsolute(getAppContext(), getMessageModel().getCreatedAt().getTime())));
+
+			if (artworkBitmap != null) {
+				metadataBuilder.setArtworkData(BitmapUtil.bitmapToByteArray(artworkBitmap, Bitmap.CompressFormat.JPEG, 80), MediaMetadata.PICTURE_TYPE_FRONT_COVER);
 			}
-			logger.error("Could not prepare media player", e);
-			stop();
-		}
-	}
 
-	private void setOutputStream(int streamType) {
-		if (Build.VERSION.SDK_INT > Build.VERSION_CODES.M) {
-			mediaPlayer.setAudioAttributes(getAudioAttributes(streamType));
-		} else {
-			mediaPlayer.setAudioStreamType(streamType);
-		}
+			final MediaItem mediaItem = new MediaItem.Builder()
+				.setMediaMetadata(metadataBuilder.build())
+				.setMediaId(decryptedFileUri.toString())
+				.setUri(decryptedFileUri)
+				.build();
 
-		logger.info("Speakerphone state = {} newStreamType = {}",
-			this.audioManager.isSpeakerphoneOn(), streamType);
+			// cleanup old media player instance
+			if (this.mediaPositionListener != null) {
+				this.mediaPositionListener.interrupt();
+			}
+			mediaController.stop();
+			mediaController.removeListener(playerListener);
+			mediaController.clearMediaItems();
 
-		this.audioManager.setSpeakerphoneOn(false);
-/*
-		if (streamType == STREAM_VOICE_CALL) {
-			this.audioManager.setBluetoothScoOn(false);
-			this.audioManager.setSpeakerphoneOn(false);
-		} else {
-			this.audioManager.setSpeakerphoneOn(true);
+			// add new item and prepare
+			mediaController.addMediaItem(mediaItem);
+			mediaController.setPlayWhenReady(false);
+			mediaController.addListener(playerListener);
+			mediaController.prepare();
 		}
-*/	}
-
-	@Override
-	protected void open(File decryptedFile) {
-		open(decryptedFile, false);
 	}
 
 	/**
-	 * called, after the media player was prepared
+	 * called after the media player was prepared
 	 */
-	private void prepared(MediaPlayerStateWrapper mp, final boolean resume) {
+	private void prepared() {
 		logger.debug("prepared");
 
-		//do not play if state is changed! (not playing)
-		if (this.getState() != State_PLAYING) {
-			logger.debug("not in playing state");
+		MediaController mediaController = getMediaController();
+		if (mediaController == null) {
 			return;
 		}
 
-		if (mp != this.mediaPlayer) {
-			//another mediaplayer
+		if (!playerMediaMatchesControllerMedia()) {
+			// another media player
 			logger.debug("another player instance");
 			return;
 		}
 
-		duration = mediaPlayer.getDuration();
-
-		if (duration == 0) {
+		final long longDuration = mediaController.getDuration();
+		duration = (int) longDuration;
+		if (longDuration == TIME_UNSET) {
 			MediaMessageDataInterface d = this.getData();
 			if (d instanceof AudioDataModel) {
-				duration = ((AudioDataModel) d).getDuration();
+				duration = (int) (((AudioDataModel) d).getDuration() * SECOND_IN_MILLIS);
 			} else if (d instanceof FileDataModel) {
-				duration = (int) ((FileDataModel) d).getDurationSeconds();
+				duration = (int) (((FileDataModel) d).getDurationSeconds() * SECOND_IN_MILLIS);
 			}
 		}
 		logger.debug("duration = {}", duration);
 
-		if (this.position >= 0) {
-			this.mediaPlayer.setOnSeekCompleteListener(mp1 -> onSeekCompleted(resume));
-			this.mediaPlayer.seekTo(this.position);
+		if (this.position > mediaController.getCurrentPosition()) {
+			mediaController.seekTo(this.position);
 		} else {
-			onSeekCompleted(resume);
+			onSeekCompleted();
 		}
 	}
 
-	private void onSeekCompleted(final boolean resume) {
+	private void onSeekCompleted() {
 		logger.debug("play from position {}", this.position);
 
-		this.mediaPlayer.setOnSeekCompleteListener(null);
+		MediaController mediaController = getMediaController();
+		if (mediaController != null) {
 
-		if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {
 			float audioPlaybackSpeed = preferenceService.getAudioPlaybackSpeed();
-			float newPlaybackSpeed = mediaPlayer.setPlaybackSpeed(audioPlaybackSpeed);
+			mediaController.setPlaybackSpeed(audioPlaybackSpeed);
+
+			float newPlaybackSpeed = mediaController.getPlaybackParameters().speed;
 
 			if (audioPlaybackSpeed != newPlaybackSpeed) {
 				preferenceService.setAudioPlaybackSpeed(newPlaybackSpeed);
 			}
-		}
 
-		if (requestFocus(resume)) {
-			logger.debug("request focus done");
+			mediaController.play();
 
-			if (this.mediaPlayer != null) {
-				this.mediaPlayer.setVolume(getDefaultVolumeLevel(), getDefaultVolumeLevel());
-				this.mediaPlayer.start();
-				initPositionListener(true);
-			}
+			initPositionListener();
 		}
 	}
 
-	private void initPositionListener(boolean hard) {
-		logger.debug("initPositionListener hard = {}", hard);
-
-		if (!hard && this.mediaPositionListener != null && this.mediaPositionListener.isAlive()) {
-			return;
-		}
+	private void initPositionListener() {
+		logger.debug("initPositionListener");
 
 		if (this.mediaPositionListener != null) {
 			this.mediaPositionListener.interrupt();
 		}
 
-		this.mediaPositionListener = new Thread(new Runnable() {
-			@Override
-			public void run() {
-				boolean cont = true;
-				while (cont) {
-					try {
-						cont = false;
-						Thread.sleep(SEEKBAR_UPDATE_FREQUENCY);
-
-						if (mediaPlayer != null && getState() == State_PLAYING && isPlaying()) {
-							int newposition = mediaPlayer.getCurrentPosition();
-							if (newposition > position) {
-								position = newposition;
+		this.mediaPositionListener = new Thread(() -> {
+			logger.debug("initPositionListener Thread started");
+
+			boolean cont = true;
+			while (cont) {
+				try {
+					Thread.sleep(SEEKBAR_UPDATE_FREQUENCY);
+
+					RuntimeUtil.runOnUiThread(() -> {
+						MediaController mediaController = getMediaController();
+						if (mediaController != null && mediaController.isConnected() && mediaController.isPlaying()) {
+							int newPosition = (int) mediaController.getCurrentPosition();
+							if (newPosition > position) {
+								position = newPosition;
+								this.updatePlayState();
 							}
-							AudioMessagePlayer.this.updatePlayState();
-							cont = !Thread.interrupted();
 						}
-					} catch (Exception e) {
-						cont = false;
-					}
+					});
+
+					cont = !Thread.interrupted();
+				} catch (Exception e) {
+					cont = false;
 				}
 			}
+			logger.debug("initPositionListener Thread ended");
 		});
-
 		this.mediaPositionListener.start();
+	}
 
-		//reset old listeners
-		this.mediaPlayer.setStateListener(null);
-		//configure new one
-		this.mediaPlayer.setStateListener(new MediaPlayerStateWrapper.StateListener() {
-			@Override
-			public void onCompletion(MediaPlayer mp) {
-				stop();
-				ListenerManager.messagePlayerListener.handle(listener -> listener.onAudioPlayEnded(getMessageModel()));
-			}
-
-			@Override
-			public void onPrepared(MediaPlayer mp) {
-			}
-		});
+	@Override
+	public void pause(int source) {
+		MediaController mediaController = getMediaController();
+		if (mediaController != null && playerMediaMatchesControllerMedia()) {
+			mediaController.pause();
+		}
 	}
 
 	@Override
 	protected void makePause(int source) {
 		logger.info("makePause with source {}", source);
+		this.state = State_PAUSE;
+		synchronized (this.playbackListeners) {
+			for (Map.Entry<String, PlaybackListener> l : this.playbackListeners.entrySet()) {
+				l.getValue().onPause(
+					getMessageModel()
+				);
+			}
+		}
+	}
 
-		if (source != SOURCE_LIFECYCLE) {
-			if (this.mediaPlayer != null) {
-				playerPause();
-				if (this.getState() != State_INTERRUPTED_PLAY) {
-					abandonFocus(false);
+	@Override
+	protected void play(final boolean autoPlay) {
+		logger.debug("play");
+		if (this.state == State_PAUSE) {
+			MediaController mediaController = getMediaController();
+			if (mediaController != null) {
+				if (playerMediaMatchesControllerMedia()) {
+					mediaController.play();
+				} else {
+					open(decryptedFile);
 				}
 			}
-		} else {
-			// the app has been put to the background
-			if (preferenceService.isUseProximitySensor()) {
-				sensorService.unregisterSensors(this.getMessageModel().getUid());
-			}
-			if (audioStreamType != STREAM_MUSIC) {
-				ListenerManager.messagePlayerListener.handle(listener -> listener.onAudioStreamChanged(STREAM_MUSIC));
-				changeAudioOutput(STREAM_MUSIC);
-				audioStreamType = STREAM_MUSIC;
-			}
+			return;
 		}
+
+		super.play(autoPlay);
 	}
 
 	@Override
 	protected void makeResume(int source) {
-		logger.debug("makeResume");
-
-		if (source != SOURCE_LIFECYCLE) {
-			if (this.mediaPlayer != null) {
-				if (this.duration > 0 && !isPlaying()) {
-					if (requestFocus(false)) {
-						playerStart();
-						initPositionListener(true);
-					}
-				}
-			} else {
-				this.stop();
-				this.open();
-			}
-		} else {
-			// the app was brought to the foreground
-			if (this.mediaPlayer != null) {
-				initPositionListener(false);
-				if (preferenceService.isUseProximitySensor()) {
-					sensorService.registerSensors(this.getMessageModel().getUid(), this);
-				}
+		logger.info("makeResume with source {} state (should be != 5) {}", source, state);
+		this.state = State_PLAYING;
+		synchronized (this.playbackListeners) {
+			for (Map.Entry<String, PlaybackListener> l : this.playbackListeners.entrySet()) {
+				l.getValue().onPlay(getMessageModel(), false);
 			}
 		}
 	}
@@ -376,48 +369,54 @@ public class AudioMessagePlayer extends MessagePlayer implements AudioManager.On
 			mediaPositionListener = null;
 		}
 
-		if (mediaPlayer != null) {
-
-			try {
-				logger.debug("stop");
-				mediaPlayer.stop();
-			} catch (Exception e) {
-				logger.error("Could not stop media player", e);
-			}
-
-			try {
-				logger.debug("reset");
-				mediaPlayer.reset();
-			} catch (Exception e) {
-				logger.error("Could not reset media player", e);
+		MediaController mediaController = getMediaController();
+		if (mediaController != null) {
+			if (playerMediaMatchesControllerMedia()) {
+				logger.debug("mediaController stopped and cleared");
+				mediaController.stop();
+				mediaController.clearMediaItems();
+				this.position = 0;
+				this.duration = 0;
+			} else {
+				mediaController.removeListener(playerListener);
+				synchronized (this.playbackListeners) {
+					for (Map.Entry<String, PlaybackListener> l : this.playbackListeners.entrySet()) {
+						l.getValue().onStop(getMessageModel());
+					}
+				}
 			}
+		}
+	}
 
-			try {
-				logger.debug("release");
-				mediaPlayer.release();
-				mediaPlayer = null;
-			} catch (Exception e) {
-				logger.error("Could not release media player", e);
+	private boolean playerMediaMatchesControllerMedia() {
+		if (decryptedFile != null && decryptedFileUri != null) {
+			MediaController mediaController = getMediaController();
+			if (mediaController != null && mediaController.getMediaItemCount() > 0) {
+				return decryptedFileUri.toString().equals(mediaController.getMediaItemAt(0).mediaId);
 			}
 		}
-		logger.debug("Player released");
+		return false;
 	}
 
 	@Override
 	public boolean stop() {
-		logger.debug("Stop player called from stop() {}", Thread.currentThread().getId());
-		releasePlayer();
-		abandonFocus(false);
-
-		return super.stop();
+		if (!playerMediaMatchesControllerMedia()) {
+			logger.debug("stop");
+			super.stop();
+			releasePlayer();
+		}
+		return true;
 	}
 
 	@Override
-	public float togglePlaybackSpeed() {
-		float newSpeed = 1f;
+	public float togglePlaybackSpeed(float preferenceSpeed) {
+		float currentSpeed = preferenceSpeed;
+		MediaController mediaController = getMediaController();
+		if (mediaController != null) {
+			currentSpeed = mediaController.getPlaybackParameters().speed;
+		}
 
-		if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M && mediaPlayer != null) {
-			float currentSpeed = mediaPlayer.getPlaybackSpeed();
+		float newSpeed = 1f;
 
 			if (currentSpeed == 1f) {
 				newSpeed = 1.5f;
@@ -427,166 +426,49 @@ public class AudioMessagePlayer extends MessagePlayer implements AudioManager.On
 				newSpeed = 0.5f;
 			}
 
-			if (mediaPlayer != null && mediaPlayer.isPlaying()) {
-				newSpeed = mediaPlayer.setPlaybackSpeed(newSpeed);
-			}
+		if (mediaController != null) {
+			mediaController.setPlaybackSpeed(newSpeed);
 		}
-
 		preferenceService.setAudioPlaybackSpeed(newSpeed);
 		return newSpeed;
 	}
 
 	@Override
 	public void seekTo(int pos) {
-		logger.debug("seekTo");
-
 		if (pos >= 0) {
-			if (this.mediaPlayer != null) {
-				this.mediaPlayer.seekTo(pos);
-				this.position = this.mediaPlayer.getCurrentPosition();
+			MediaController mediaController = getMediaController();
+			if (mediaController != null && playerMediaMatchesControllerMedia()) {
+				mediaController.seekTo(pos);
 			}
-			this.updatePlayState();
 		}
 	}
 
 	@Override
 	public int getDuration() {
-		if (this.mediaPlayer != null) {
-			return this.duration;
-		}
-		return 0;
+		return this.duration;
 	}
 
 	@Override
 	public int getPosition() {
-		if (this.getState() == State_PLAYING || this.getState() == State_PAUSE || this.getState() == State_INTERRUPTED_PLAY) {
+		if (this.getState() == State_PLAYING || this.getState() == State_PAUSE) {
 			return this.position;
 		}
-
 		return 0;
 	}
 
-	private void changeAudioOutput(int streamType) {
-		logger.debug("changeAudioOutput");
-
-		this.streamType = streamType;
-		if (this.mediaPlayer != null && isPlaying()) {
-			if (this.decryptedFile != null) {
-				this.open(this.decryptedFile, true);
-			} else {
-				logger.debug("decrypted file not available");
-			}
-		}
-	}
-
-	@Override
-	public void onAudioFocusChange(int focusChange) {
-		switch (focusChange) {
-			case AudioManager.AUDIOFOCUS_GAIN:
-				// resume playback
-				logger.debug("AUDIOFOCUS_GAIN");
-				this.resume(SOURCE_AUDIOFOCUS);
-				if (mediaPlayer != null) {
-					mediaPlayer.setVolume(getDefaultVolumeLevel(), getDefaultVolumeLevel());
-				}
-				break;
-
-			case AudioManager.AUDIOFOCUS_LOSS:
-				// Lost focus for an unbounded amount of time: stop playback and release media player
-				logger.debug("AUDIOFOCUS_LOSS");
-				this.stop();
-				break;
-
-			case AudioManager.AUDIOFOCUS_LOSS_TRANSIENT:
-				// Lost focus for a short time, but we have to stop
-				// playback. We don't release the media player because playback
-				// is likely to resume
-				logger.info("AUDIOFOCUS_LOSS_TRANSIENT");
-				this.pause(true, SOURCE_AUDIOFOCUS);
-				break;
-
-			case AudioManager.AUDIOFOCUS_LOSS_TRANSIENT_CAN_DUCK:
-				// Lost focus for a short time, but it's ok to keep playing
-				// at an attenuated level
-				logger.debug("AUDIOFOCUS_LOSS_TRANSIENT_CAN_DUCK");
-				if (mediaPlayer != null) {
-					mediaPlayer.setVolume(0.2f, 0.2f);
-				}
-				break;
-		}
-	}
-
-	private boolean requestFocus(boolean resume) {
-		logger.debug("requestFocus resume = {} streamType = {}", resume, streamType);
-
-		if (audioManager.requestAudioFocus(this, this.streamType, AudioManager.AUDIOFOCUS_GAIN_TRANSIENT) == AudioManager.AUDIOFOCUS_REQUEST_GRANTED) {
-			if (preferenceService.isUseProximitySensor() && !resume) {
-				sensorService.registerSensors(this.getMessageModel().getUid(), this);
-			}
-			return true;
-		} else {
-			logger.debug("Focus request not granted");
-		}
-		return false;
-	}
-
-	private void abandonFocus(boolean resume) {
-		logger.debug("abandonFocus resume = {}", resume);
-		if (!resume) {
-			audioManager.abandonAudioFocus(this);
-			if (preferenceService.isUseProximitySensor()) {
-				sensorService.unregisterSensors(this.getMessageModel().getUid());
-				ListenerManager.messagePlayerListener.handle(listener -> listener.onAudioStreamChanged(STREAM_MUSIC));
-			}
-		}
-	}
-
-	@Override
-	public void onSensorChanged(String key, boolean value) {
-		logger.info("SensorService onSensorChanged: {}", value);
-
-		RuntimeUtil.runOnUiThread(new Runnable() {
-			@Override
-			public void run() {
-				if (key.equals(SensorListener.keyIsNear)) {
-
-					int newStreamType = value ?
-							AudioManager.STREAM_VOICE_CALL :
-							AudioManager.STREAM_MUSIC;
-
-					if (newStreamType != audioStreamType) {
-						logger.info("New Audio stream: {}", newStreamType);
-
-						ListenerManager.messagePlayerListener.handle(listener -> listener.onAudioStreamChanged(newStreamType));
-						changeAudioOutput(newStreamType);
-
-						audioStreamType = newStreamType;
-					}
-				}
+	@Nullable
+	public MediaController getMediaController() {
+		if (mediaControllerFuture.isDone()) {
+			try {
+				return mediaControllerFuture.get();
+			} catch (ExecutionException e) {
+				logger.error("Media Controller exception", e);
+			} catch (InterruptedException e) {
+				logger.error("Media Controller interrupted exception", e);
+				Thread.currentThread().interrupt();
 			}
-		});
-	}
-
-	private boolean isPlaying() {
-		boolean isPlaying = false;
-
-		if (this.mediaPlayer != null) {
-			isPlaying = this.mediaPlayer.isPlaying();
-		}
-
-		return isPlaying;
-	}
-
-	private void playerStart() {
-		if (this.mediaPlayer != null) {
-			this.mediaPlayer.start();
-		}
-	}
-
-	private void playerPause() {
-		if (this.mediaPlayer != null) {
-			this.mediaPlayer.pause();
 		}
+		return null;
 	}
 }
 
diff --git a/app/src/main/java/ch/threema/app/services/messageplayer/FileMessagePlayer.java b/app/src/main/java/ch/threema/app/services/messageplayer/FileMessagePlayer.java
index 86fce18f..1ca9e683 100644
--- a/app/src/main/java/ch/threema/app/services/messageplayer/FileMessagePlayer.java
+++ b/app/src/main/java/ch/threema/app/services/messageplayer/FileMessagePlayer.java
@@ -31,7 +31,6 @@ import ch.threema.app.activities.ThreemaActivity;
 import ch.threema.app.messagereceiver.MessageReceiver;
 import ch.threema.app.services.FileService;
 import ch.threema.app.services.MessageService;
-import ch.threema.app.utils.AnimationUtil;
 import ch.threema.app.utils.FileUtil;
 import ch.threema.app.utils.IntentDataUtil;
 import ch.threema.app.utils.RuntimeUtil;
@@ -72,7 +71,7 @@ public class FileMessagePlayer extends MessagePlayer {
 						IntentDataUtil.append(getMessageModel(), intent);
 						intent.putExtra(MediaViewerActivity.EXTRA_ID_IMMEDIATE_PLAY, true);
 						intent.putExtra(MediaViewerActivity.EXTRA_ID_REVERSE_ORDER, true);
-						AnimationUtil.startActivityForResult(currentActivityRef.get(), null, intent, ThreemaActivity.ACTIVITY_ID_MEDIA_VIEWER);
+						currentActivityRef.get().startActivityForResult(intent, ThreemaActivity.ACTIVITY_ID_MEDIA_VIEWER);
 					}
 				});
 				// don't call super - the gallery will handle the decryption
diff --git a/app/src/main/java/ch/threema/app/services/messageplayer/GifMessagePlayer.java b/app/src/main/java/ch/threema/app/services/messageplayer/GifMessagePlayer.java
index c26db296..2d41fab9 100644
--- a/app/src/main/java/ch/threema/app/services/messageplayer/GifMessagePlayer.java
+++ b/app/src/main/java/ch/threema/app/services/messageplayer/GifMessagePlayer.java
@@ -37,7 +37,6 @@ import ch.threema.app.messagereceiver.MessageReceiver;
 import ch.threema.app.services.FileService;
 import ch.threema.app.services.MessageService;
 import ch.threema.app.services.PreferenceService;
-import ch.threema.app.utils.AnimationUtil;
 import ch.threema.app.utils.ImageViewUtil;
 import ch.threema.app.utils.IntentDataUtil;
 import ch.threema.app.utils.RuntimeUtil;
@@ -145,7 +144,7 @@ public class GifMessagePlayer extends MessagePlayer {
 				Intent intent = new Intent(getContext(), MediaViewerActivity.class);
 				IntentDataUtil.append(getMessageModel(), intent);
 				intent.putExtra(MediaViewerActivity.EXTRA_ID_REVERSE_ORDER, true);
-				AnimationUtil.startActivityForResult(currentActivityRef.get(), null, intent, ThreemaActivity.ACTIVITY_ID_MEDIA_VIEWER);
+				currentActivityRef.get().startActivityForResult(intent, ThreemaActivity.ACTIVITY_ID_MEDIA_VIEWER);
 			}
 		});
 	}
diff --git a/app/src/main/java/ch/threema/app/services/messageplayer/MessagePlayer.java b/app/src/main/java/ch/threema/app/services/messageplayer/MessagePlayer.java
index 85b965f4..6efb2757 100644
--- a/app/src/main/java/ch/threema/app/services/messageplayer/MessagePlayer.java
+++ b/app/src/main/java/ch/threema/app/services/messageplayer/MessagePlayer.java
@@ -21,10 +21,17 @@
 
 package ch.threema.app.services.messageplayer;
 
+import static ch.threema.domain.protocol.csp.messages.file.FileData.RENDERING_MEDIA;
+
 import android.app.Activity;
 import android.content.Context;
 import android.os.AsyncTask;
 
+import androidx.annotation.AnyThread;
+import androidx.annotation.MainThread;
+import androidx.annotation.Nullable;
+import androidx.annotation.WorkerThread;
+
 import org.slf4j.Logger;
 
 import java.io.File;
@@ -34,10 +41,6 @@ import java.util.Iterator;
 import java.util.Map;
 import java.util.concurrent.RejectedExecutionException;
 
-import androidx.annotation.AnyThread;
-import androidx.annotation.MainThread;
-import androidx.annotation.Nullable;
-import androidx.annotation.WorkerThread;
 import ch.threema.app.R;
 import ch.threema.app.messagereceiver.MessageReceiver;
 import ch.threema.app.services.FileService;
@@ -45,14 +48,12 @@ import ch.threema.app.services.MessageService;
 import ch.threema.app.utils.FileUtil;
 import ch.threema.app.utils.RuntimeUtil;
 import ch.threema.app.utils.TestUtil;
-import ch.threema.base.ThreemaException;
 import ch.threema.base.ProgressListener;
+import ch.threema.base.ThreemaException;
 import ch.threema.base.utils.LoggingUtil;
 import ch.threema.storage.models.AbstractMessageModel;
 import ch.threema.storage.models.data.media.MediaMessageDataInterface;
 
-import static ch.threema.domain.protocol.csp.messages.file.FileData.RENDERING_MEDIA;
-
 public abstract class MessagePlayer {
 	private static final Logger logger = LoggingUtil.getThreemaLogger("MessagePlayer");
 
@@ -70,16 +71,16 @@ public abstract class MessagePlayer {
 	private int transcodeProgress = 0;
 
 	protected WeakReference<Activity> currentActivityRef;
-	protected MessageReceiver currentMessageReceiver;
+	protected MessageReceiver<?> currentMessageReceiver;
 
 	public final static int State_NONE = 0;
 	public final static int State_DOWNLOADING = 1;
 	public final static int State_DOWNLOADED = 2;
 	public final static int State_DECRYPTING = 3;
 	public final static int State_DECRYPTED = 4;
+	public final static int State_STOPPED = 4;
 	public final static int State_PLAYING = 5;
 	public final static int State_PAUSE = 6;
-	public final static int State_INTERRUPTED_PLAY = 7; // eg. when call comes in or phone rotates
 
 	public interface DownloadListener {
 		@AnyThread default void onStart(AbstractMessageModel messageModel) { }
@@ -117,12 +118,12 @@ public abstract class MessagePlayer {
 	private final Map<String, PlayerListener> playerListeners = new HashMap<>();
 	private final Map<String, DownloadListener> downloadListeners = new HashMap<>();
 	private final Map<String, DecryptionListener> decryptingListeners = new HashMap<>();
-	private final Map<String, PlaybackListener> playbackListeners = new HashMap<>();
+	protected final Map<String, PlaybackListener> playbackListeners = new HashMap<>();
 	private final Map<String, TranscodeListener> transcodeListeners = new HashMap<>();
 	private final MessageService messageService;
 	private final FileService fileService;
 	private final AbstractMessageModel messageModel;
-	private final MessageReceiver messageReceiver;
+	private final MessageReceiver<?> messageReceiver;
 	protected int state = State_NONE;
 
 	private class DecryptTask extends AsyncTask<Boolean, Void, File> {
@@ -164,7 +165,7 @@ public abstract class MessagePlayer {
 			File file = null;
 			autoPlay = params[0];
 
-			logger.debug("decrypt doInBackground");
+			logger.debug("decrypt doInBackground {}", messageModel.getId());
 
 			try {
 				file = fileService.getDecryptedMessageFile(messageModel);
@@ -181,11 +182,11 @@ public abstract class MessagePlayer {
 			if (file != null && file.exists() && !isCancelled()) {
 				state = State_DECRYPTED;
 				decryptedFile = file;
-				logger.debug("decrypt end");
+				logger.debug("decrypt end {}", messageModel.getId());
 			} else {
 				state = State_DOWNLOADED;
 				decryptedFile = null;
-				logger.debug("decrypt failed");
+				logger.debug("decrypt failed {}", messageModel.getId());
 			}
 
 			synchronized (decryptingListeners) {
@@ -196,7 +197,7 @@ public abstract class MessagePlayer {
 			}
 
 			if (state == State_DECRYPTED) {
-				logger.debug("open");
+				logger.debug("open after decrypt {}", messageModel.getId());
 
 				if (currentActivityRef != null && currentActivityRef.get() != null && isReceiverMatch(currentMessageReceiver) && !isCancelled()) {
 					state = State_PLAYING;
@@ -266,7 +267,7 @@ public abstract class MessagePlayer {
 
 	public boolean stop() {
 		logger.debug("stop");
-		if(this.state == State_PLAYING || this.state == State_INTERRUPTED_PLAY) {
+		if(this.state == State_PLAYING) {
 			this.state = State_DECRYPTED;
 			synchronized (this.playbackListeners) {
 				for (Map.Entry<String, PlaybackListener> l : this.playbackListeners.entrySet()) {
@@ -294,19 +295,19 @@ public abstract class MessagePlayer {
 
 		boolean result = this.stop();
 		if(this.state == State_DOWNLOADING) {
-			this.messageService.cancelMessageDownload(this.getMessageModel());
+			RuntimeUtil.runOnWorkerThread(() -> this.messageService.cancelMessageDownload(this.getMessageModel()));
 			this.state = State_NONE;
 		}
 
 		return result;
 	}
 
-	public boolean toggle() {
-		logger.debug("toggle");
+	public boolean togglePlayPause() {
+		logger.debug("togglePlayPause");
 
 		switch (this.state) {
 			case State_PLAYING:
-				this.pause(false, SOURCE_UI_TOGGLE);
+				this.pause(SOURCE_UI_TOGGLE);
 				break;
 			case State_DOWNLOADING:
 			case State_DECRYPTING:
@@ -318,14 +319,14 @@ public abstract class MessagePlayer {
 		return true;
 	}
 
-	public void pause(boolean forced) {
-		pause(forced, SOURCE_UNDEFINED);
+	public void pause() {
+		pause(SOURCE_UNDEFINED);
 	}
 
-	public void pause(boolean forced, int source) {
+	public void pause(int source) {
 		logger.debug("pause. source = " + source + " state = " + this.state);
-		if(this.state == State_PLAYING || this.state == State_INTERRUPTED_PLAY) {
-			this.state = forced ? State_INTERRUPTED_PLAY : State_PAUSE;
+		if(this.state == State_PLAYING) {
+			this.state = State_PAUSE;
 			this.makePause(source);
 			synchronized (this.playbackListeners) {
 				for (Map.Entry<String, PlaybackListener> l : this.playbackListeners.entrySet()) {
@@ -371,7 +372,7 @@ public abstract class MessagePlayer {
 		return false;
 	}
 
-	public float togglePlaybackSpeed() {
+	public float togglePlaybackSpeed(float currentSpeed) {
 		return 1f;
 	}
 
@@ -436,7 +437,7 @@ public abstract class MessagePlayer {
 
 	public void removeListeners() {
 		synchronized (this.playbackListeners) {
-			Iterator iterator = this.playbackListeners.entrySet().iterator();
+			Iterator<Map.Entry<String, PlaybackListener>> iterator = this.playbackListeners.entrySet().iterator();
 			while (iterator.hasNext()) {
 				iterator.next();
 				iterator.remove();
@@ -444,7 +445,7 @@ public abstract class MessagePlayer {
 		}
 
 		synchronized (this.playerListeners) {
-			Iterator iterator = this.playerListeners.entrySet().iterator();
+			Iterator<Map.Entry<String, PlayerListener>> iterator = this.playerListeners.entrySet().iterator();
 			while (iterator.hasNext()) {
 				iterator.next();
 				iterator.remove();
@@ -452,7 +453,7 @@ public abstract class MessagePlayer {
 		}
 
 		synchronized (this.downloadListeners) {
-			Iterator iterator = this.downloadListeners.entrySet().iterator();
+			Iterator<Map.Entry<String, DownloadListener>> iterator = this.downloadListeners.entrySet().iterator();
 			while (iterator.hasNext()) {
 				iterator.next();
 				iterator.remove();
@@ -460,7 +461,7 @@ public abstract class MessagePlayer {
 		}
 
 		synchronized (this.decryptingListeners) {
-			Iterator iterator = this.decryptingListeners.entrySet().iterator();
+			Iterator<Map.Entry<String, DecryptionListener>> iterator = this.decryptingListeners.entrySet().iterator();
 			while (iterator.hasNext()) {
 				iterator.next();
 				iterator.remove();
@@ -468,7 +469,7 @@ public abstract class MessagePlayer {
 		}
 
 		synchronized (this.transcodeListeners) {
-			Iterator iterator = this.transcodeListeners.entrySet().iterator();
+			Iterator<Map.Entry<String, TranscodeListener>> iterator = this.transcodeListeners.entrySet().iterator();
 			while (iterator.hasNext()) {
 				iterator.next();
 				iterator.remove();
@@ -482,10 +483,18 @@ public abstract class MessagePlayer {
 	abstract protected void makePause(int source);
 	abstract protected void makeResume(int source);
 	abstract public void seekTo(int pos);
+	/**
+	 * Get duration of media that is currently loaded/playing
+	 * @return duration in milliseconds
+	 */
 	abstract public int getDuration();
+	/**
+	 * Get current position of media that is currently playing
+	 * @return position in milliseconds
+	 */
 	abstract public int getPosition();
 
-	final public int getState() {
+	public int getState() {
 		return this.state;
 	}
 
@@ -499,22 +508,11 @@ public abstract class MessagePlayer {
 
 	public void resume(int source) {
 		logger.debug("resume");
-
-		if(this.state == State_INTERRUPTED_PLAY) {
-			this.state = State_PLAYING;
-			this.makeResume(source);
-
-			synchronized (this.playbackListeners) {
-				for (Map.Entry<String, PlaybackListener> l : this.playbackListeners.entrySet()) {
-					l.getValue().onPlay(messageModel, this.isAutoPlayed);
-				}
-			}
-		}
 	}
 
 	protected void play(final boolean autoPlay) {
 		logger.debug("play");
-		if(this.state == State_PAUSE || this.state == State_INTERRUPTED_PLAY) {
+		if(this.state == State_PAUSE) {
 			this.state = State_PLAYING;
 			this.makeResume(SOURCE_UI_TOGGLE);
 
@@ -613,7 +611,7 @@ public abstract class MessagePlayer {
 			for (Map.Entry<String, PlaybackListener> l : this.playbackListeners.entrySet()) {
 				l.getValue().onStatusUpdate(
 						this.messageModel,
-						getPosition()
+					(int) getPosition()
 				);
 			}
 		}
diff --git a/app/src/main/java/ch/threema/app/services/messageplayer/MessagePlayerService.java b/app/src/main/java/ch/threema/app/services/messageplayer/MessagePlayerService.java
index d593e69f..6bb2258a 100644
--- a/app/src/main/java/ch/threema/app/services/messageplayer/MessagePlayerService.java
+++ b/app/src/main/java/ch/threema/app/services/messageplayer/MessagePlayerService.java
@@ -25,16 +25,20 @@ import android.app.Activity;
 
 import androidx.annotation.NonNull;
 import androidx.annotation.Nullable;
+import androidx.media3.session.MediaController;
+
+import com.google.common.util.concurrent.ListenableFuture;
+
 import ch.threema.app.messagereceiver.MessageReceiver;
 import ch.threema.storage.models.AbstractMessageModel;
 
 public interface MessagePlayerService {
-	MessagePlayer createPlayer(AbstractMessageModel m, Activity activity, MessageReceiver messageReceiver);
+	MessagePlayer createPlayer(AbstractMessageModel m, Activity activity, MessageReceiver<?> messageReceiver, @Nullable ListenableFuture<MediaController> mediaControllerFuture);
 
 	void release();
 	void stopAll();
 	void pauseAll(int source);
-	void resumeAll(Activity activity, MessageReceiver messageReceiver, int source);
+	void resumeAll(Activity activity, MessageReceiver<?> messageReceiver, int source);
 
 	void setTranscodeProgress(@NonNull AbstractMessageModel messageModel, int progress);
 	void setTranscodeStart(@NonNull AbstractMessageModel messageModel);
diff --git a/app/src/main/java/ch/threema/app/services/messageplayer/MessagePlayerServiceImpl.java b/app/src/main/java/ch/threema/app/services/messageplayer/MessagePlayerServiceImpl.java
index c5362d31..9a3fac16 100644
--- a/app/src/main/java/ch/threema/app/services/messageplayer/MessagePlayerServiceImpl.java
+++ b/app/src/main/java/ch/threema/app/services/messageplayer/MessagePlayerServiceImpl.java
@@ -24,15 +24,20 @@ package ch.threema.app.services.messageplayer;
 import android.app.Activity;
 import android.content.Context;
 
+import androidx.annotation.NonNull;
+import androidx.annotation.Nullable;
+import androidx.media3.session.MediaController;
+
+import com.google.common.util.concurrent.ListenableFuture;
+
 import org.slf4j.Logger;
 
 import java.util.HashMap;
 import java.util.Iterator;
 import java.util.Map;
 
-import androidx.annotation.NonNull;
-import androidx.annotation.Nullable;
 import ch.threema.app.messagereceiver.MessageReceiver;
+import ch.threema.app.services.DeadlineListService;
 import ch.threema.app.services.FileService;
 import ch.threema.app.services.MessageService;
 import ch.threema.app.services.PreferenceService;
@@ -45,72 +50,78 @@ import ch.threema.storage.models.MessageType;
 public class MessagePlayerServiceImpl implements MessagePlayerService {
 	private static final Logger logger = LoggingUtil.getThreemaLogger("MessagePlayerServiceImpl");
 
-	private final Map<String, MessagePlayer> messagePlayers = new HashMap<>();
+	private final Map<Integer, MessagePlayer> messagePlayers = new HashMap<>();
 	private final Context context;
 	private final MessageService messageService;
 	private final FileService fileService;
 	private final PreferenceService preferenceService;
+	private final DeadlineListService hiddenChatsListService;
 
-	public MessagePlayerServiceImpl(Context context, MessageService messageService, FileService fileService, PreferenceService preferenceService) {
+	public MessagePlayerServiceImpl(Context context, MessageService messageService, FileService fileService, PreferenceService preferenceService, DeadlineListService hiddenChatsListService) {
 		this.context = context;
 		this.messageService = messageService;
 		this.fileService = fileService;
 		this.preferenceService = preferenceService;
+		this.hiddenChatsListService = hiddenChatsListService;
 	}
 
 	@Override
-	public MessagePlayer createPlayer(AbstractMessageModel m, Activity activity, MessageReceiver messageReceiver) {
-		String key = m.getUid();
+	public MessagePlayer createPlayer(AbstractMessageModel messageModel, Activity activity, MessageReceiver<?> messageReceiver, ListenableFuture<MediaController> mediaControllerFuture) {
+		int key = messageModel.getId();
 		MessagePlayer o = null;
 
 		synchronized (this.messagePlayers) {
 			o = this.messagePlayers.get(key);
 
 			if (o == null) {
-				if (m.getType() == MessageType.IMAGE) {
+				if (messageModel.getType() == MessageType.IMAGE) {
 					o = new ImageMessagePlayer(
 							this.context,
 							this.messageService,
 							this.fileService,
 							messageReceiver,
-							m
+							messageModel
 					);
-				} else if (m.getType() == MessageType.VOICEMESSAGE) {
+				} else if (messageModel.getType() == MessageType.VOICEMESSAGE) {
 					o = new AudioMessagePlayer(
 							this.context,
 							this.messageService,
 							this.fileService,
 							this.preferenceService,
+							this.hiddenChatsListService,
 							messageReceiver,
-							m
+							mediaControllerFuture,
+							messageModel
 					);
-				} else if (m.getType() == MessageType.VIDEO) {
+				} else if (messageModel.getType() == MessageType.VIDEO) {
 					o = new VideoMessagePlayer(
 							this.context,
 							this.messageService,
 							this.fileService,
 							messageReceiver,
-							m
+							messageModel
 					);
-				} else if (m.getType() == MessageType.FILE) {
-					if (MimeUtil.isGifFile(m.getFileData().getMimeType())) {
+				} else if (messageModel.getType() == MessageType.FILE) {
+					if (MimeUtil.isGifFile(messageModel.getFileData().getMimeType())) {
 						o = new GifMessagePlayer(
 							this.context,
 							this.messageService,
 							this.fileService,
 							this.preferenceService,
 							messageReceiver,
-							m
+							messageModel
 						);
-					} else if (MimeUtil.isAudioFile(m.getFileData().getMimeType())
-							&& m.getFileData().getRenderingType() == FileData.RENDERING_MEDIA) {
+					} else if (MimeUtil.isAudioFile(messageModel.getFileData().getMimeType())
+							&& messageModel.getFileData().getRenderingType() == FileData.RENDERING_MEDIA) {
 						o = new AudioMessagePlayer(
 							this.context,
 							this.messageService,
 							this.fileService,
 							this.preferenceService,
+							this.hiddenChatsListService,
 							messageReceiver,
-							m
+							mediaControllerFuture,
+							messageModel
 						);
 					} else {
 						o = new FileMessagePlayer(
@@ -118,21 +129,22 @@ public class MessagePlayerServiceImpl implements MessagePlayerService {
 								this.messageService,
 								this.fileService,
 								messageReceiver,
-								m
+								messageModel
 						);
 					}
 				}
 				logger.debug("creating new player " + key);
 			} else {
 				// make sure data model is updated as its status may have changed after the player has been created
-				if (m.getType() == MessageType.VOICEMESSAGE) {
-					o.setData(m.getAudioData());
+				if (messageModel.getType() == MessageType.VOICEMESSAGE) {
+					o.setData(messageModel.getAudioData());
 				}
-				if (m.getType() == MessageType.FILE &&
-					MimeUtil.isAudioFile(m.getFileData().getMimeType())	&&
-					m.getFileData().getRenderingType() == FileData.RENDERING_MEDIA) {
-					o.setData(m.getFileData());
+				if (messageModel.getType() == MessageType.FILE &&
+					MimeUtil.isAudioFile(messageModel.getFileData().getMimeType())	&&
+					messageModel.getFileData().getRenderingType() == FileData.RENDERING_MEDIA) {
+					o.setData(messageModel.getFileData());
 				}
+				logger.debug("recycling existing player " + key);
 			}
 			if (o != null) {
 				if (activity != null) {
@@ -177,10 +189,10 @@ public class MessagePlayerServiceImpl implements MessagePlayerService {
 	private void stopOtherPlayers(AbstractMessageModel messageModel) {
 		logger.debug("stopOtherPlayers");
 		synchronized (this.messagePlayers) {
-			for (Map.Entry<String, MessagePlayer> entry : messagePlayers.entrySet()) {
-				if (!entry.getKey().equals(messageModel.getUid())) {
+			for (Map.Entry<Integer, MessagePlayer> entry : messagePlayers.entrySet()) {
+				if (!entry.getKey().equals(messageModel.getId())) {
 					if (!(entry.getValue() instanceof GifMessagePlayer)) {
-						logger.debug("stopping player " + entry.getKey());
+						logger.debug("maybe stopping player {} if not running ", entry.getKey());
 
 						entry.getValue().stop();
 					}
@@ -194,10 +206,10 @@ public class MessagePlayerServiceImpl implements MessagePlayerService {
 	public void release() {
 		logger.debug("release all players");
 		synchronized (this.messagePlayers) {
-			Iterator iterator = messagePlayers.entrySet().iterator();
+			Iterator<Map.Entry<Integer, MessagePlayer>> iterator = messagePlayers.entrySet().iterator();
 			while (iterator.hasNext()) {
-				Map.Entry pair = (Map.Entry) iterator.next();
-				MessagePlayer mp = (MessagePlayer) pair.getValue();
+				Map.Entry<Integer, MessagePlayer> pair = iterator.next();
+				MessagePlayer mp = pair.getValue();
 				mp.stop();
 				if (mp.release()) {
 					iterator.remove();
@@ -216,7 +228,7 @@ public class MessagePlayerServiceImpl implements MessagePlayerService {
 	public void stopAll() {
 		logger.debug("stop all players");
 		synchronized (this.messagePlayers) {
-			for (Map.Entry<String, MessagePlayer> entry : messagePlayers.entrySet()) {
+			for (Map.Entry<Integer, MessagePlayer> entry : messagePlayers.entrySet()) {
 				entry.getValue().stop();
 			}
 		}
@@ -226,8 +238,8 @@ public class MessagePlayerServiceImpl implements MessagePlayerService {
 	public void pauseAll(int source) {
 		logger.debug("pause all players");
 		synchronized (this.messagePlayers) {
-			for (Map.Entry<String, MessagePlayer> entry : messagePlayers.entrySet()) {
-				entry.getValue().pause(true, source);
+			for (Map.Entry<Integer, MessagePlayer> entry : messagePlayers.entrySet()) {
+				entry.getValue().pause(source);
 			}
 		}
 	}
@@ -236,7 +248,7 @@ public class MessagePlayerServiceImpl implements MessagePlayerService {
 	public void resumeAll(Activity activity, MessageReceiver messageReceiver, int source) {
 		logger.debug("resume all players");
 		synchronized (this.messagePlayers) {
-			for (Map.Entry<String, MessagePlayer> entry : messagePlayers.entrySet()) {
+			for (Map.Entry<Integer, MessagePlayer> entry : messagePlayers.entrySet()) {
 				// re-attach message players to current activity
 				if (entry.getValue().isReceiverMatch(messageReceiver)) {
 					entry.getValue().setCurrentActivity(activity, messageReceiver);
@@ -251,8 +263,8 @@ public class MessagePlayerServiceImpl implements MessagePlayerService {
 	@Override
 	public void setTranscodeProgress(@NonNull AbstractMessageModel messageModel, int progress) {
 		synchronized (this.messagePlayers) {
-			for (Map.Entry<String, MessagePlayer> entry : messagePlayers.entrySet()) {
-				if (entry.getKey().equals(messageModel.getUid())) {
+			for (Map.Entry<Integer, MessagePlayer> entry : messagePlayers.entrySet()) {
+				if (entry.getKey().equals(messageModel.getId())) {
 					entry.getValue().setTranscodeProgress(progress);
 					return;
 				}
@@ -263,8 +275,8 @@ public class MessagePlayerServiceImpl implements MessagePlayerService {
 	@Override
 	public void setTranscodeStart(@NonNull AbstractMessageModel messageModel) {
 		synchronized (this.messagePlayers) {
-			for (Map.Entry<String, MessagePlayer> entry : messagePlayers.entrySet()) {
-				if (entry.getKey().equals(messageModel.getUid())) {
+			for (Map.Entry<Integer, MessagePlayer> entry : messagePlayers.entrySet()) {
+				if (entry.getKey().equals(messageModel.getId())) {
 					entry.getValue().setTranscodeStart();
 					return;
 				}
@@ -275,8 +287,8 @@ public class MessagePlayerServiceImpl implements MessagePlayerService {
 	@Override
 	public void setTranscodeFinished(@NonNull AbstractMessageModel messageModel, boolean success, @Nullable String message) {
 		synchronized (this.messagePlayers) {
-			for (Map.Entry<String, MessagePlayer> entry : messagePlayers.entrySet()) {
-				if (entry.getKey().equals(messageModel.getUid())) {
+			for (Map.Entry<Integer, MessagePlayer> entry : messagePlayers.entrySet()) {
+				if (entry.getKey().equals(messageModel.getId())) {
 					entry.getValue().setTranscodeFinished(success, message);
 					return;
 				}
diff --git a/app/src/main/java/ch/threema/app/services/messageplayer/VideoMessagePlayer.java b/app/src/main/java/ch/threema/app/services/messageplayer/VideoMessagePlayer.java
index 5f35a268..08456683 100644
--- a/app/src/main/java/ch/threema/app/services/messageplayer/VideoMessagePlayer.java
+++ b/app/src/main/java/ch/threema/app/services/messageplayer/VideoMessagePlayer.java
@@ -31,7 +31,6 @@ import ch.threema.app.activities.ThreemaActivity;
 import ch.threema.app.messagereceiver.MessageReceiver;
 import ch.threema.app.services.FileService;
 import ch.threema.app.services.MessageService;
-import ch.threema.app.utils.AnimationUtil;
 import ch.threema.app.utils.IntentDataUtil;
 import ch.threema.app.utils.RuntimeUtil;
 import ch.threema.storage.models.AbstractMessageModel;
@@ -65,7 +64,7 @@ public class VideoMessagePlayer extends MessagePlayer {
 					IntentDataUtil.append(getMessageModel(), intent);
 					intent.putExtra(MediaViewerActivity.EXTRA_ID_IMMEDIATE_PLAY, true);
 					intent.putExtra(MediaViewerActivity.EXTRA_ID_REVERSE_ORDER, true);
-					AnimationUtil.startActivityForResult(currentActivityRef.get(), null, intent, ThreemaActivity.ACTIVITY_ID_MEDIA_VIEWER);
+					currentActivityRef.get().startActivityForResult(intent, ThreemaActivity.ACTIVITY_ID_MEDIA_VIEWER);
 				}
 			});
 		}
diff --git a/app/src/main/java/ch/threema/app/services/systemupdate/FSDatabaseUpgradeToVersion2.kt b/app/src/main/java/ch/threema/app/services/systemupdate/FSDatabaseUpgradeToVersion2.kt
new file mode 100644
index 00000000..8f2de5b8
--- /dev/null
+++ b/app/src/main/java/ch/threema/app/services/systemupdate/FSDatabaseUpgradeToVersion2.kt
@@ -0,0 +1,46 @@
+/*  _____ _
+ * |_   _| |_  _ _ ___ ___ _ __  __ _
+ *   | | | ' \| '_/ -_) -_) '  \/ _` |_
+ *   |_| |_||_|_| \___\___|_|_|_\__,_(_)
+ *
+ * Threema for Android
+ * Copyright (c) 2023 Threema GmbH
+ *
+ * This program is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU Affero General Public License, version 3,
+ * as published by the Free Software Foundation.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+ * GNU Affero General Public License for more details.
+ *
+ * You should have received a copy of the GNU Affero General Public License
+ * along with this program. If not, see <https://www.gnu.org/licenses/>.
+ */
+
+package ch.threema.app.services.systemupdate
+
+import ch.threema.app.services.UpdateSystemService
+import net.zetetic.database.sqlcipher.SQLiteDatabase
+
+internal class FSDatabaseUpgradeToVersion2(
+    private val sqLiteDatabase: SQLiteDatabase
+): UpdateToVersion(), UpdateSystemService.SystemUpdate {
+
+    companion object {
+        const val VERSION = 2
+    }
+
+    override fun runASync() = true
+
+    override fun runDirectly(): Boolean {
+        // Create negotiated version column with default value 0x0100 (Version 1.0)
+        if (!this.fieldExist(sqLiteDatabase, "session", "negotiatedVersion")) {
+            sqLiteDatabase.rawExecSQL("ALTER TABLE session ADD COLUMN negotiatedVersion INTEGER DEFAULT 256")
+        }
+        return true
+    }
+
+    override fun getText() = "Version $VERSION (add negotiated version column)"
+}
diff --git a/app/src/main/java/ch/threema/app/services/systemupdate/FSDatabaseUpgradeToVersion3.kt b/app/src/main/java/ch/threema/app/services/systemupdate/FSDatabaseUpgradeToVersion3.kt
new file mode 100644
index 00000000..189a08a1
--- /dev/null
+++ b/app/src/main/java/ch/threema/app/services/systemupdate/FSDatabaseUpgradeToVersion3.kt
@@ -0,0 +1,46 @@
+/*  _____ _
+ * |_   _| |_  _ _ ___ ___ _ __  __ _
+ *   | | | ' \| '_/ -_) -_) '  \/ _` |_
+ *   |_| |_||_|_| \___\___|_|_|_\__,_(_)
+ *
+ * Threema for Android
+ * Copyright (c) 2023 Threema GmbH
+ *
+ * This program is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU Affero General Public License, version 3,
+ * as published by the Free Software Foundation.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+ * GNU Affero General Public License for more details.
+ *
+ * You should have received a copy of the GNU Affero General Public License
+ * along with this program. If not, see <https://www.gnu.org/licenses/>.
+ */
+
+package ch.threema.app.services.systemupdate
+
+import ch.threema.app.services.UpdateSystemService
+import net.zetetic.database.sqlcipher.SQLiteDatabase
+
+internal class FSDatabaseUpgradeToVersion3(
+    private val sqLiteDatabase: SQLiteDatabase
+): UpdateToVersion(), UpdateSystemService.SystemUpdate {
+
+    companion object {
+        const val VERSION = 3
+    }
+
+    override fun runASync() = true
+
+    override fun runDirectly(): Boolean {
+        // Create remote 4DH version column with default value 0x0100 (Version 1.0)
+        if (!this.fieldExist(sqLiteDatabase, "session", "peerCurrentVersion_4dh")) {
+            sqLiteDatabase.rawExecSQL("ALTER TABLE session ADD COLUMN peerCurrentVersion_4dh INTEGER DEFAULT 256")
+        }
+        return true
+    }
+
+    override fun getText() = "Version $VERSION (add yet another version column)"
+}
diff --git a/app/src/main/java/ch/threema/app/services/systemupdate/SystemUpdateToVersion10.java b/app/src/main/java/ch/threema/app/services/systemupdate/SystemUpdateToVersion10.java
index fed70e44..24b117a5 100644
--- a/app/src/main/java/ch/threema/app/services/systemupdate/SystemUpdateToVersion10.java
+++ b/app/src/main/java/ch/threema/app/services/systemupdate/SystemUpdateToVersion10.java
@@ -23,7 +23,7 @@ package ch.threema.app.services.systemupdate;
 
 import androidx.annotation.NonNull;
 
-import net.sqlcipher.database.SQLiteDatabase;
+import net.zetetic.database.sqlcipher.SQLiteDatabase;
 
 import java.util.Arrays;
 
diff --git a/app/src/main/java/ch/threema/app/services/systemupdate/SystemUpdateToVersion11.java b/app/src/main/java/ch/threema/app/services/systemupdate/SystemUpdateToVersion11.java
index d5c04117..fb0c8624 100644
--- a/app/src/main/java/ch/threema/app/services/systemupdate/SystemUpdateToVersion11.java
+++ b/app/src/main/java/ch/threema/app/services/systemupdate/SystemUpdateToVersion11.java
@@ -23,7 +23,7 @@ package ch.threema.app.services.systemupdate;
 
 import androidx.annotation.NonNull;
 
-import net.sqlcipher.database.SQLiteDatabase;
+import net.zetetic.database.sqlcipher.SQLiteDatabase;
 
 import java.util.Arrays;
 
diff --git a/app/src/main/java/ch/threema/app/services/systemupdate/SystemUpdateToVersion12.java b/app/src/main/java/ch/threema/app/services/systemupdate/SystemUpdateToVersion12.java
index 7a0ab30a..63380ce1 100644
--- a/app/src/main/java/ch/threema/app/services/systemupdate/SystemUpdateToVersion12.java
+++ b/app/src/main/java/ch/threema/app/services/systemupdate/SystemUpdateToVersion12.java
@@ -23,7 +23,7 @@ package ch.threema.app.services.systemupdate;
 
 import android.content.Context;
 
-import net.sqlcipher.database.SQLiteDatabase;
+import net.zetetic.database.sqlcipher.SQLiteDatabase;
 
 import org.slf4j.Logger;
 
diff --git a/app/src/main/java/ch/threema/app/services/systemupdate/SystemUpdateToVersion13.java b/app/src/main/java/ch/threema/app/services/systemupdate/SystemUpdateToVersion13.java
index 2f7ec2d4..97b3758e 100644
--- a/app/src/main/java/ch/threema/app/services/systemupdate/SystemUpdateToVersion13.java
+++ b/app/src/main/java/ch/threema/app/services/systemupdate/SystemUpdateToVersion13.java
@@ -21,7 +21,7 @@
 
 package ch.threema.app.services.systemupdate;
 
-import net.sqlcipher.database.SQLiteDatabase;
+import net.zetetic.database.sqlcipher.SQLiteDatabase;
 
 import java.util.Arrays;
 
diff --git a/app/src/main/java/ch/threema/app/services/systemupdate/SystemUpdateToVersion15.java b/app/src/main/java/ch/threema/app/services/systemupdate/SystemUpdateToVersion15.java
index 2c2f6596..61f90fde 100644
--- a/app/src/main/java/ch/threema/app/services/systemupdate/SystemUpdateToVersion15.java
+++ b/app/src/main/java/ch/threema/app/services/systemupdate/SystemUpdateToVersion15.java
@@ -21,7 +21,7 @@
 
 package ch.threema.app.services.systemupdate;
 
-import net.sqlcipher.database.SQLiteDatabase;
+import net.zetetic.database.sqlcipher.SQLiteDatabase;
 
 import java.sql.SQLException;
 
diff --git a/app/src/main/java/ch/threema/app/services/systemupdate/SystemUpdateToVersion16.java b/app/src/main/java/ch/threema/app/services/systemupdate/SystemUpdateToVersion16.java
index 79f002b0..1fce18fa 100644
--- a/app/src/main/java/ch/threema/app/services/systemupdate/SystemUpdateToVersion16.java
+++ b/app/src/main/java/ch/threema/app/services/systemupdate/SystemUpdateToVersion16.java
@@ -21,7 +21,7 @@
 
 package ch.threema.app.services.systemupdate;
 
-import net.sqlcipher.database.SQLiteDatabase;
+import net.zetetic.database.sqlcipher.SQLiteDatabase;
 
 import java.util.Arrays;
 
diff --git a/app/src/main/java/ch/threema/app/services/systemupdate/SystemUpdateToVersion17.java b/app/src/main/java/ch/threema/app/services/systemupdate/SystemUpdateToVersion17.java
index 37672e67..f7b9ac55 100644
--- a/app/src/main/java/ch/threema/app/services/systemupdate/SystemUpdateToVersion17.java
+++ b/app/src/main/java/ch/threema/app/services/systemupdate/SystemUpdateToVersion17.java
@@ -21,7 +21,7 @@
 
 package ch.threema.app.services.systemupdate;
 
-import net.sqlcipher.database.SQLiteDatabase;
+import net.zetetic.database.sqlcipher.SQLiteDatabase;
 
 import ch.threema.app.services.UpdateSystemService;
 
diff --git a/app/src/main/java/ch/threema/app/services/systemupdate/SystemUpdateToVersion19.java b/app/src/main/java/ch/threema/app/services/systemupdate/SystemUpdateToVersion19.java
index ff6b27ca..57e9c6fb 100644
--- a/app/src/main/java/ch/threema/app/services/systemupdate/SystemUpdateToVersion19.java
+++ b/app/src/main/java/ch/threema/app/services/systemupdate/SystemUpdateToVersion19.java
@@ -23,7 +23,7 @@ package ch.threema.app.services.systemupdate;
 
 import androidx.annotation.NonNull;
 
-import net.sqlcipher.database.SQLiteDatabase;
+import net.zetetic.database.sqlcipher.SQLiteDatabase;
 
 import java.util.Arrays;
 
diff --git a/app/src/main/java/ch/threema/app/services/systemupdate/SystemUpdateToVersion20.java b/app/src/main/java/ch/threema/app/services/systemupdate/SystemUpdateToVersion20.java
index 68aa9723..f8e17a66 100644
--- a/app/src/main/java/ch/threema/app/services/systemupdate/SystemUpdateToVersion20.java
+++ b/app/src/main/java/ch/threema/app/services/systemupdate/SystemUpdateToVersion20.java
@@ -23,7 +23,7 @@ package ch.threema.app.services.systemupdate;
 
 import androidx.annotation.NonNull;
 
-import net.sqlcipher.database.SQLiteDatabase;
+import net.zetetic.database.sqlcipher.SQLiteDatabase;
 
 import java.util.Arrays;
 
diff --git a/app/src/main/java/ch/threema/app/services/systemupdate/SystemUpdateToVersion21.java b/app/src/main/java/ch/threema/app/services/systemupdate/SystemUpdateToVersion21.java
index 1c712cad..9d6b37d2 100644
--- a/app/src/main/java/ch/threema/app/services/systemupdate/SystemUpdateToVersion21.java
+++ b/app/src/main/java/ch/threema/app/services/systemupdate/SystemUpdateToVersion21.java
@@ -21,7 +21,7 @@
 
 package ch.threema.app.services.systemupdate;
 
-import net.sqlcipher.database.SQLiteDatabase;
+import net.zetetic.database.sqlcipher.SQLiteDatabase;
 
 import java.sql.SQLException;
 
diff --git a/app/src/main/java/ch/threema/app/services/systemupdate/SystemUpdateToVersion24.java b/app/src/main/java/ch/threema/app/services/systemupdate/SystemUpdateToVersion24.java
index 524de0a3..5bff0a38 100644
--- a/app/src/main/java/ch/threema/app/services/systemupdate/SystemUpdateToVersion24.java
+++ b/app/src/main/java/ch/threema/app/services/systemupdate/SystemUpdateToVersion24.java
@@ -23,7 +23,7 @@ package ch.threema.app.services.systemupdate;
 
 import androidx.annotation.NonNull;
 
-import net.sqlcipher.database.SQLiteDatabase;
+import net.zetetic.database.sqlcipher.SQLiteDatabase;
 
 import java.util.Arrays;
 import java.util.Date;
diff --git a/app/src/main/java/ch/threema/app/services/systemupdate/SystemUpdateToVersion25.java b/app/src/main/java/ch/threema/app/services/systemupdate/SystemUpdateToVersion25.java
index 6af9bd4c..991763f4 100644
--- a/app/src/main/java/ch/threema/app/services/systemupdate/SystemUpdateToVersion25.java
+++ b/app/src/main/java/ch/threema/app/services/systemupdate/SystemUpdateToVersion25.java
@@ -21,7 +21,7 @@
 
 package ch.threema.app.services.systemupdate;
 
-import net.sqlcipher.database.SQLiteDatabase;
+import net.zetetic.database.sqlcipher.SQLiteDatabase;
 
 import java.sql.SQLException;
 
diff --git a/app/src/main/java/ch/threema/app/services/systemupdate/SystemUpdateToVersion27.java b/app/src/main/java/ch/threema/app/services/systemupdate/SystemUpdateToVersion27.java
index 46fda962..eab4ac20 100644
--- a/app/src/main/java/ch/threema/app/services/systemupdate/SystemUpdateToVersion27.java
+++ b/app/src/main/java/ch/threema/app/services/systemupdate/SystemUpdateToVersion27.java
@@ -21,7 +21,7 @@
 
 package ch.threema.app.services.systemupdate;
 
-import net.sqlcipher.database.SQLiteDatabase;
+import net.zetetic.database.sqlcipher.SQLiteDatabase;
 
 import ch.threema.app.services.UpdateSystemService;
 
diff --git a/app/src/main/java/ch/threema/app/services/systemupdate/SystemUpdateToVersion28.java b/app/src/main/java/ch/threema/app/services/systemupdate/SystemUpdateToVersion28.java
index ab3b1d49..3efef195 100644
--- a/app/src/main/java/ch/threema/app/services/systemupdate/SystemUpdateToVersion28.java
+++ b/app/src/main/java/ch/threema/app/services/systemupdate/SystemUpdateToVersion28.java
@@ -21,7 +21,7 @@
 
 package ch.threema.app.services.systemupdate;
 
-import net.sqlcipher.database.SQLiteDatabase;
+import net.zetetic.database.sqlcipher.SQLiteDatabase;
 
 import ch.threema.app.services.UpdateSystemService;
 
diff --git a/app/src/main/java/ch/threema/app/services/systemupdate/SystemUpdateToVersion32.java b/app/src/main/java/ch/threema/app/services/systemupdate/SystemUpdateToVersion32.java
index c5bc3084..6e491979 100644
--- a/app/src/main/java/ch/threema/app/services/systemupdate/SystemUpdateToVersion32.java
+++ b/app/src/main/java/ch/threema/app/services/systemupdate/SystemUpdateToVersion32.java
@@ -21,7 +21,7 @@
 
 package ch.threema.app.services.systemupdate;
 
-import net.sqlcipher.database.SQLiteDatabase;
+import net.zetetic.database.sqlcipher.SQLiteDatabase;
 
 import ch.threema.app.services.UpdateSystemService;
 
diff --git a/app/src/main/java/ch/threema/app/services/systemupdate/SystemUpdateToVersion33.java b/app/src/main/java/ch/threema/app/services/systemupdate/SystemUpdateToVersion33.java
index 9a0b8c13..51429f33 100644
--- a/app/src/main/java/ch/threema/app/services/systemupdate/SystemUpdateToVersion33.java
+++ b/app/src/main/java/ch/threema/app/services/systemupdate/SystemUpdateToVersion33.java
@@ -21,7 +21,7 @@
 
 package ch.threema.app.services.systemupdate;
 
-import net.sqlcipher.database.SQLiteDatabase;
+import net.zetetic.database.sqlcipher.SQLiteDatabase;
 
 import java.sql.SQLException;
 
diff --git a/app/src/main/java/ch/threema/app/services/systemupdate/SystemUpdateToVersion34.java b/app/src/main/java/ch/threema/app/services/systemupdate/SystemUpdateToVersion34.java
index 3947d59b..0507d65b 100644
--- a/app/src/main/java/ch/threema/app/services/systemupdate/SystemUpdateToVersion34.java
+++ b/app/src/main/java/ch/threema/app/services/systemupdate/SystemUpdateToVersion34.java
@@ -21,7 +21,7 @@
 
 package ch.threema.app.services.systemupdate;
 
-import net.sqlcipher.database.SQLiteDatabase;
+import net.zetetic.database.sqlcipher.SQLiteDatabase;
 
 import java.sql.SQLException;
 
diff --git a/app/src/main/java/ch/threema/app/services/systemupdate/SystemUpdateToVersion35.java b/app/src/main/java/ch/threema/app/services/systemupdate/SystemUpdateToVersion35.java
index f4f000d1..d2048b16 100644
--- a/app/src/main/java/ch/threema/app/services/systemupdate/SystemUpdateToVersion35.java
+++ b/app/src/main/java/ch/threema/app/services/systemupdate/SystemUpdateToVersion35.java
@@ -21,7 +21,7 @@
 
 package ch.threema.app.services.systemupdate;
 
-import net.sqlcipher.database.SQLiteDatabase;
+import net.zetetic.database.sqlcipher.SQLiteDatabase;
 
 import java.sql.SQLException;
 
diff --git a/app/src/main/java/ch/threema/app/services/systemupdate/SystemUpdateToVersion36.java b/app/src/main/java/ch/threema/app/services/systemupdate/SystemUpdateToVersion36.java
index 3d3f344c..2d838b37 100644
--- a/app/src/main/java/ch/threema/app/services/systemupdate/SystemUpdateToVersion36.java
+++ b/app/src/main/java/ch/threema/app/services/systemupdate/SystemUpdateToVersion36.java
@@ -21,7 +21,7 @@
 
 package ch.threema.app.services.systemupdate;
 
-import net.sqlcipher.database.SQLiteDatabase;
+import net.zetetic.database.sqlcipher.SQLiteDatabase;
 
 import java.sql.SQLException;
 
diff --git a/app/src/main/java/ch/threema/app/services/systemupdate/SystemUpdateToVersion37.java b/app/src/main/java/ch/threema/app/services/systemupdate/SystemUpdateToVersion37.java
index 8ddff35f..96460156 100644
--- a/app/src/main/java/ch/threema/app/services/systemupdate/SystemUpdateToVersion37.java
+++ b/app/src/main/java/ch/threema/app/services/systemupdate/SystemUpdateToVersion37.java
@@ -21,7 +21,7 @@
 
 package ch.threema.app.services.systemupdate;
 
-import net.sqlcipher.database.SQLiteDatabase;
+import net.zetetic.database.sqlcipher.SQLiteDatabase;
 
 import java.sql.SQLException;
 
diff --git a/app/src/main/java/ch/threema/app/services/systemupdate/SystemUpdateToVersion38.java b/app/src/main/java/ch/threema/app/services/systemupdate/SystemUpdateToVersion38.java
index 05b6597e..124be541 100644
--- a/app/src/main/java/ch/threema/app/services/systemupdate/SystemUpdateToVersion38.java
+++ b/app/src/main/java/ch/threema/app/services/systemupdate/SystemUpdateToVersion38.java
@@ -21,8 +21,8 @@
 
 package ch.threema.app.services.systemupdate;
 
-import net.sqlcipher.Cursor;
-import net.sqlcipher.database.SQLiteDatabase;
+import android.database.Cursor;
+import net.zetetic.database.sqlcipher.SQLiteDatabase;
 
 import org.slf4j.Logger;
 
diff --git a/app/src/main/java/ch/threema/app/services/systemupdate/SystemUpdateToVersion4.java b/app/src/main/java/ch/threema/app/services/systemupdate/SystemUpdateToVersion4.java
index 6fa2ab9c..c56299d7 100644
--- a/app/src/main/java/ch/threema/app/services/systemupdate/SystemUpdateToVersion4.java
+++ b/app/src/main/java/ch/threema/app/services/systemupdate/SystemUpdateToVersion4.java
@@ -23,7 +23,7 @@ package ch.threema.app.services.systemupdate;
 
 import androidx.annotation.NonNull;
 
-import net.sqlcipher.database.SQLiteDatabase;
+import net.zetetic.database.sqlcipher.SQLiteDatabase;
 
 import java.util.Arrays;
 
diff --git a/app/src/main/java/ch/threema/app/services/systemupdate/SystemUpdateToVersion40.java b/app/src/main/java/ch/threema/app/services/systemupdate/SystemUpdateToVersion40.java
index 814abc95..4c8ad5c4 100644
--- a/app/src/main/java/ch/threema/app/services/systemupdate/SystemUpdateToVersion40.java
+++ b/app/src/main/java/ch/threema/app/services/systemupdate/SystemUpdateToVersion40.java
@@ -21,7 +21,7 @@
 
 package ch.threema.app.services.systemupdate;
 
-import net.sqlcipher.database.SQLiteDatabase;
+import net.zetetic.database.sqlcipher.SQLiteDatabase;
 
 import java.sql.SQLException;
 
diff --git a/app/src/main/java/ch/threema/app/services/systemupdate/SystemUpdateToVersion41.java b/app/src/main/java/ch/threema/app/services/systemupdate/SystemUpdateToVersion41.java
index 83877eb7..a51ce20c 100644
--- a/app/src/main/java/ch/threema/app/services/systemupdate/SystemUpdateToVersion41.java
+++ b/app/src/main/java/ch/threema/app/services/systemupdate/SystemUpdateToVersion41.java
@@ -21,7 +21,7 @@
 
 package ch.threema.app.services.systemupdate;
 
-import net.sqlcipher.database.SQLiteDatabase;
+import net.zetetic.database.sqlcipher.SQLiteDatabase;
 
 import java.sql.SQLException;
 
@@ -42,9 +42,8 @@ public class SystemUpdateToVersion41 extends UpdateToVersion implements UpdateSy
 
 	@Override
 	public boolean runDirectly() throws SQLException {
-		if (!this.fieldExist(this.sqLiteDatabase, ContactModel.TABLE, ContactModel.COLUMN_PROFILE_PIC_SENT_DATE)) {
-			sqLiteDatabase.rawExecSQL("ALTER TABLE " + ContactModel.TABLE
-					+ " ADD COLUMN " + ContactModel.COLUMN_PROFILE_PIC_SENT_DATE + " BIGINT DEFAULT 0");
+		if (!this.fieldExist(this.sqLiteDatabase, "contacts", "profilePicSent")) {
+			sqLiteDatabase.rawExecSQL("ALTER TABLE contacts ADD COLUMN profilePicSent BIGINT DEFAULT 0");
 		}
 		return true;
 	}
diff --git a/app/src/main/java/ch/threema/app/services/systemupdate/SystemUpdateToVersion42.java b/app/src/main/java/ch/threema/app/services/systemupdate/SystemUpdateToVersion42.java
index cc7d0438..9803b2bf 100644
--- a/app/src/main/java/ch/threema/app/services/systemupdate/SystemUpdateToVersion42.java
+++ b/app/src/main/java/ch/threema/app/services/systemupdate/SystemUpdateToVersion42.java
@@ -21,8 +21,8 @@
 
 package ch.threema.app.services.systemupdate;
 
-import net.sqlcipher.Cursor;
-import net.sqlcipher.database.SQLiteDatabase;
+import android.database.Cursor;
+import net.zetetic.database.sqlcipher.SQLiteDatabase;
 
 import org.slf4j.Logger;
 
diff --git a/app/src/main/java/ch/threema/app/services/systemupdate/SystemUpdateToVersion43.java b/app/src/main/java/ch/threema/app/services/systemupdate/SystemUpdateToVersion43.java
index 4f957a6e..557a4794 100644
--- a/app/src/main/java/ch/threema/app/services/systemupdate/SystemUpdateToVersion43.java
+++ b/app/src/main/java/ch/threema/app/services/systemupdate/SystemUpdateToVersion43.java
@@ -21,8 +21,8 @@
 
 package ch.threema.app.services.systemupdate;
 
-import net.sqlcipher.Cursor;
-import net.sqlcipher.database.SQLiteDatabase;
+import android.database.Cursor;
+import net.zetetic.database.sqlcipher.SQLiteDatabase;
 
 import org.slf4j.Logger;
 
diff --git a/app/src/main/java/ch/threema/app/services/systemupdate/SystemUpdateToVersion44.java b/app/src/main/java/ch/threema/app/services/systemupdate/SystemUpdateToVersion44.java
index 263838e3..ee0b978b 100644
--- a/app/src/main/java/ch/threema/app/services/systemupdate/SystemUpdateToVersion44.java
+++ b/app/src/main/java/ch/threema/app/services/systemupdate/SystemUpdateToVersion44.java
@@ -21,7 +21,7 @@
 
 package ch.threema.app.services.systemupdate;
 
-import net.sqlcipher.database.SQLiteDatabase;
+import net.zetetic.database.sqlcipher.SQLiteDatabase;
 
 import java.sql.SQLException;
 
diff --git a/app/src/main/java/ch/threema/app/services/systemupdate/SystemUpdateToVersion45.java b/app/src/main/java/ch/threema/app/services/systemupdate/SystemUpdateToVersion45.java
index 42882e35..589b7406 100644
--- a/app/src/main/java/ch/threema/app/services/systemupdate/SystemUpdateToVersion45.java
+++ b/app/src/main/java/ch/threema/app/services/systemupdate/SystemUpdateToVersion45.java
@@ -21,7 +21,7 @@
 
 package ch.threema.app.services.systemupdate;
 
-import net.sqlcipher.database.SQLiteDatabase;
+import net.zetetic.database.sqlcipher.SQLiteDatabase;
 
 import java.sql.SQLException;
 
diff --git a/app/src/main/java/ch/threema/app/services/systemupdate/SystemUpdateToVersion47.java b/app/src/main/java/ch/threema/app/services/systemupdate/SystemUpdateToVersion47.java
index b26128e0..015f4365 100644
--- a/app/src/main/java/ch/threema/app/services/systemupdate/SystemUpdateToVersion47.java
+++ b/app/src/main/java/ch/threema/app/services/systemupdate/SystemUpdateToVersion47.java
@@ -21,7 +21,7 @@
 
 package ch.threema.app.services.systemupdate;
 
-import net.sqlcipher.database.SQLiteDatabase;
+import net.zetetic.database.sqlcipher.SQLiteDatabase;
 
 import java.sql.SQLException;
 
diff --git a/app/src/main/java/ch/threema/app/services/systemupdate/SystemUpdateToVersion49.java b/app/src/main/java/ch/threema/app/services/systemupdate/SystemUpdateToVersion49.java
index 6f42b312..be5c8281 100644
--- a/app/src/main/java/ch/threema/app/services/systemupdate/SystemUpdateToVersion49.java
+++ b/app/src/main/java/ch/threema/app/services/systemupdate/SystemUpdateToVersion49.java
@@ -21,7 +21,7 @@
 
 package ch.threema.app.services.systemupdate;
 
-import net.sqlcipher.database.SQLiteDatabase;
+import net.zetetic.database.sqlcipher.SQLiteDatabase;
 
 import java.sql.SQLException;
 
diff --git a/app/src/main/java/ch/threema/app/services/systemupdate/SystemUpdateToVersion50.java b/app/src/main/java/ch/threema/app/services/systemupdate/SystemUpdateToVersion50.java
index 04f42388..11abd52c 100644
--- a/app/src/main/java/ch/threema/app/services/systemupdate/SystemUpdateToVersion50.java
+++ b/app/src/main/java/ch/threema/app/services/systemupdate/SystemUpdateToVersion50.java
@@ -21,7 +21,7 @@
 
 package ch.threema.app.services.systemupdate;
 
-import net.sqlcipher.database.SQLiteDatabase;
+import net.zetetic.database.sqlcipher.SQLiteDatabase;
 
 import java.sql.SQLException;
 
diff --git a/app/src/main/java/ch/threema/app/services/systemupdate/SystemUpdateToVersion51.java b/app/src/main/java/ch/threema/app/services/systemupdate/SystemUpdateToVersion51.java
index 920820a6..1d28dea4 100644
--- a/app/src/main/java/ch/threema/app/services/systemupdate/SystemUpdateToVersion51.java
+++ b/app/src/main/java/ch/threema/app/services/systemupdate/SystemUpdateToVersion51.java
@@ -21,7 +21,7 @@
 
 package ch.threema.app.services.systemupdate;
 
-import net.sqlcipher.database.SQLiteDatabase;
+import net.zetetic.database.sqlcipher.SQLiteDatabase;
 
 import java.sql.SQLException;
 
diff --git a/app/src/main/java/ch/threema/app/services/systemupdate/SystemUpdateToVersion52.java b/app/src/main/java/ch/threema/app/services/systemupdate/SystemUpdateToVersion52.java
index 089185e3..45c6c726 100644
--- a/app/src/main/java/ch/threema/app/services/systemupdate/SystemUpdateToVersion52.java
+++ b/app/src/main/java/ch/threema/app/services/systemupdate/SystemUpdateToVersion52.java
@@ -21,7 +21,7 @@
 
 package ch.threema.app.services.systemupdate;
 
-import net.sqlcipher.database.SQLiteDatabase;
+import net.zetetic.database.sqlcipher.SQLiteDatabase;
 
 import java.sql.SQLException;
 
diff --git a/app/src/main/java/ch/threema/app/services/systemupdate/SystemUpdateToVersion56.java b/app/src/main/java/ch/threema/app/services/systemupdate/SystemUpdateToVersion56.java
index 1fcf1a89..fdbce8a2 100644
--- a/app/src/main/java/ch/threema/app/services/systemupdate/SystemUpdateToVersion56.java
+++ b/app/src/main/java/ch/threema/app/services/systemupdate/SystemUpdateToVersion56.java
@@ -21,7 +21,7 @@
 
 package ch.threema.app.services.systemupdate;
 
-import net.sqlcipher.database.SQLiteDatabase;
+import net.zetetic.database.sqlcipher.SQLiteDatabase;
 
 import org.slf4j.Logger;
 
diff --git a/app/src/main/java/ch/threema/app/services/systemupdate/SystemUpdateToVersion58.java b/app/src/main/java/ch/threema/app/services/systemupdate/SystemUpdateToVersion58.java
index 9de50a12..41ce7921 100644
--- a/app/src/main/java/ch/threema/app/services/systemupdate/SystemUpdateToVersion58.java
+++ b/app/src/main/java/ch/threema/app/services/systemupdate/SystemUpdateToVersion58.java
@@ -21,7 +21,7 @@
 
 package ch.threema.app.services.systemupdate;
 
-import net.sqlcipher.database.SQLiteDatabase;
+import net.zetetic.database.sqlcipher.SQLiteDatabase;
 
 import java.sql.SQLException;
 
diff --git a/app/src/main/java/ch/threema/app/services/systemupdate/SystemUpdateToVersion59.java b/app/src/main/java/ch/threema/app/services/systemupdate/SystemUpdateToVersion59.java
index 27177661..1a7e3c3b 100644
--- a/app/src/main/java/ch/threema/app/services/systemupdate/SystemUpdateToVersion59.java
+++ b/app/src/main/java/ch/threema/app/services/systemupdate/SystemUpdateToVersion59.java
@@ -21,7 +21,7 @@
 
 package ch.threema.app.services.systemupdate;
 
-import net.sqlcipher.database.SQLiteDatabase;
+import net.zetetic.database.sqlcipher.SQLiteDatabase;
 import java.sql.SQLException;
 import ch.threema.app.services.UpdateSystemService;
 
diff --git a/app/src/main/java/ch/threema/app/services/systemupdate/SystemUpdateToVersion6.java b/app/src/main/java/ch/threema/app/services/systemupdate/SystemUpdateToVersion6.java
index 342d0af1..ba9c5a4f 100644
--- a/app/src/main/java/ch/threema/app/services/systemupdate/SystemUpdateToVersion6.java
+++ b/app/src/main/java/ch/threema/app/services/systemupdate/SystemUpdateToVersion6.java
@@ -26,7 +26,7 @@ import android.accounts.AccountManager;
 import android.content.Context;
 import android.database.Cursor;
 
-import net.sqlcipher.database.SQLiteDatabase;
+import net.zetetic.database.sqlcipher.SQLiteDatabase;
 
 import java.util.Arrays;
 import java.util.HashSet;
diff --git a/app/src/main/java/ch/threema/app/services/systemupdate/SystemUpdateToVersion60.java b/app/src/main/java/ch/threema/app/services/systemupdate/SystemUpdateToVersion60.java
index fa8491c3..60eb8681 100644
--- a/app/src/main/java/ch/threema/app/services/systemupdate/SystemUpdateToVersion60.java
+++ b/app/src/main/java/ch/threema/app/services/systemupdate/SystemUpdateToVersion60.java
@@ -21,7 +21,7 @@
 
 package ch.threema.app.services.systemupdate;
 
-import net.sqlcipher.database.SQLiteDatabase;
+import net.zetetic.database.sqlcipher.SQLiteDatabase;
 
 import java.sql.SQLException;
 
diff --git a/app/src/main/java/ch/threema/app/services/systemupdate/SystemUpdateToVersion61.java b/app/src/main/java/ch/threema/app/services/systemupdate/SystemUpdateToVersion61.java
index 20414a6b..ca89b847 100644
--- a/app/src/main/java/ch/threema/app/services/systemupdate/SystemUpdateToVersion61.java
+++ b/app/src/main/java/ch/threema/app/services/systemupdate/SystemUpdateToVersion61.java
@@ -21,8 +21,8 @@
 
 package ch.threema.app.services.systemupdate;
 
-import net.sqlcipher.Cursor;
-import net.sqlcipher.database.SQLiteDatabase;
+import android.database.Cursor;
+import net.zetetic.database.sqlcipher.SQLiteDatabase;
 
 import java.sql.SQLException;
 
diff --git a/app/src/main/java/ch/threema/app/services/systemupdate/SystemUpdateToVersion62.java b/app/src/main/java/ch/threema/app/services/systemupdate/SystemUpdateToVersion62.java
index bcc3a578..1f540135 100644
--- a/app/src/main/java/ch/threema/app/services/systemupdate/SystemUpdateToVersion62.java
+++ b/app/src/main/java/ch/threema/app/services/systemupdate/SystemUpdateToVersion62.java
@@ -21,7 +21,7 @@
 
 package ch.threema.app.services.systemupdate;
 
-import net.sqlcipher.database.SQLiteDatabase;
+import net.zetetic.database.sqlcipher.SQLiteDatabase;
 
 import java.sql.SQLException;
 
diff --git a/app/src/main/java/ch/threema/app/services/systemupdate/SystemUpdateToVersion63.java b/app/src/main/java/ch/threema/app/services/systemupdate/SystemUpdateToVersion63.java
index e1376443..2b5fa422 100644
--- a/app/src/main/java/ch/threema/app/services/systemupdate/SystemUpdateToVersion63.java
+++ b/app/src/main/java/ch/threema/app/services/systemupdate/SystemUpdateToVersion63.java
@@ -30,7 +30,6 @@ import java.io.File;
 import java.sql.SQLException;
 
 import ch.threema.app.services.UpdateSystemService;
-import ch.threema.app.utils.ConfigUtils;
 import ch.threema.base.utils.LoggingUtil;
 
 public class SystemUpdateToVersion63 extends UpdateToVersion implements UpdateSystemService.SystemUpdate {
@@ -51,9 +50,7 @@ public class SystemUpdateToVersion63 extends UpdateToVersion implements UpdateSy
 		// delete obsolete temporary dirs
 		deleteDir(new File(context.getFilesDir(), "tmp"));
 		deleteDir(new File(context.getExternalFilesDir(null), "data.blob"));
-		if (ConfigUtils.useContentUris()) {
-			deleteDir(new File(context.getExternalFilesDir(null), "tmp"));
-		}
+		deleteDir(new File(context.getExternalFilesDir(null), "tmp"));
 
 		return true;
 	}
diff --git a/app/src/main/java/ch/threema/app/services/systemupdate/SystemUpdateToVersion65.java b/app/src/main/java/ch/threema/app/services/systemupdate/SystemUpdateToVersion65.java
index 084077c9..0ada2ae5 100644
--- a/app/src/main/java/ch/threema/app/services/systemupdate/SystemUpdateToVersion65.java
+++ b/app/src/main/java/ch/threema/app/services/systemupdate/SystemUpdateToVersion65.java
@@ -21,7 +21,7 @@
 
 package ch.threema.app.services.systemupdate;
 
-import net.sqlcipher.database.SQLiteDatabase;
+import net.zetetic.database.sqlcipher.SQLiteDatabase;
 
 import ch.threema.app.services.UpdateSystemService;
 import ch.threema.storage.DatabaseServiceNew;
diff --git a/app/src/main/java/ch/threema/app/services/systemupdate/SystemUpdateToVersion67.java b/app/src/main/java/ch/threema/app/services/systemupdate/SystemUpdateToVersion67.java
index d7b58fc6..c2581e55 100644
--- a/app/src/main/java/ch/threema/app/services/systemupdate/SystemUpdateToVersion67.java
+++ b/app/src/main/java/ch/threema/app/services/systemupdate/SystemUpdateToVersion67.java
@@ -21,7 +21,7 @@
 
 package ch.threema.app.services.systemupdate;
 
-import net.sqlcipher.database.SQLiteDatabase;
+import net.zetetic.database.sqlcipher.SQLiteDatabase;
 
 import java.sql.SQLException;
 
diff --git a/app/src/main/java/ch/threema/app/services/systemupdate/SystemUpdateToVersion68.java b/app/src/main/java/ch/threema/app/services/systemupdate/SystemUpdateToVersion68.java
index 082e4adc..45e2c55b 100644
--- a/app/src/main/java/ch/threema/app/services/systemupdate/SystemUpdateToVersion68.java
+++ b/app/src/main/java/ch/threema/app/services/systemupdate/SystemUpdateToVersion68.java
@@ -21,7 +21,7 @@
 
 package ch.threema.app.services.systemupdate;
 
-import net.sqlcipher.database.SQLiteDatabase;
+import net.zetetic.database.sqlcipher.SQLiteDatabase;
 
 import java.sql.SQLException;
 
diff --git a/app/src/main/java/ch/threema/app/services/systemupdate/SystemUpdateToVersion69.java b/app/src/main/java/ch/threema/app/services/systemupdate/SystemUpdateToVersion69.java
index 6117bdfe..c43d6283 100644
--- a/app/src/main/java/ch/threema/app/services/systemupdate/SystemUpdateToVersion69.java
+++ b/app/src/main/java/ch/threema/app/services/systemupdate/SystemUpdateToVersion69.java
@@ -21,7 +21,7 @@
 
 package ch.threema.app.services.systemupdate;
 
-import net.sqlcipher.database.SQLiteDatabase;
+import net.zetetic.database.sqlcipher.SQLiteDatabase;
 
 import ch.threema.app.services.UpdateSystemService;
 import ch.threema.storage.DatabaseServiceNew;
diff --git a/app/src/main/java/ch/threema/app/services/systemupdate/SystemUpdateToVersion7.java b/app/src/main/java/ch/threema/app/services/systemupdate/SystemUpdateToVersion7.java
index 7f526e8c..b10bd511 100644
--- a/app/src/main/java/ch/threema/app/services/systemupdate/SystemUpdateToVersion7.java
+++ b/app/src/main/java/ch/threema/app/services/systemupdate/SystemUpdateToVersion7.java
@@ -24,7 +24,7 @@ package ch.threema.app.services.systemupdate;
 import android.database.Cursor;
 import android.os.Environment;
 
-import net.sqlcipher.database.SQLiteDatabase;
+import net.zetetic.database.sqlcipher.SQLiteDatabase;
 
 import org.slf4j.Logger;
 
diff --git a/app/src/main/java/ch/threema/app/services/systemupdate/SystemUpdateToVersion70.java b/app/src/main/java/ch/threema/app/services/systemupdate/SystemUpdateToVersion70.java
index 9dea1361..6cb31af7 100644
--- a/app/src/main/java/ch/threema/app/services/systemupdate/SystemUpdateToVersion70.java
+++ b/app/src/main/java/ch/threema/app/services/systemupdate/SystemUpdateToVersion70.java
@@ -21,7 +21,7 @@
 
 package ch.threema.app.services.systemupdate;
 
-import net.sqlcipher.database.SQLiteDatabase;
+import net.zetetic.database.sqlcipher.SQLiteDatabase;
 
 import java.sql.SQLException;
 import java.util.Arrays;
diff --git a/app/src/main/java/ch/threema/app/services/systemupdate/SystemUpdateToVersion71.java b/app/src/main/java/ch/threema/app/services/systemupdate/SystemUpdateToVersion71.java
index 4931372b..25574da6 100644
--- a/app/src/main/java/ch/threema/app/services/systemupdate/SystemUpdateToVersion71.java
+++ b/app/src/main/java/ch/threema/app/services/systemupdate/SystemUpdateToVersion71.java
@@ -21,7 +21,7 @@
 
 package ch.threema.app.services.systemupdate;
 
-import net.sqlcipher.database.SQLiteDatabase;
+import net.zetetic.database.sqlcipher.SQLiteDatabase;
 
 import java.sql.SQLException;
 
diff --git a/app/src/main/java/ch/threema/app/services/systemupdate/SystemUpdateToVersion72.java b/app/src/main/java/ch/threema/app/services/systemupdate/SystemUpdateToVersion72.java
index 675de4b3..db6bde1e 100644
--- a/app/src/main/java/ch/threema/app/services/systemupdate/SystemUpdateToVersion72.java
+++ b/app/src/main/java/ch/threema/app/services/systemupdate/SystemUpdateToVersion72.java
@@ -21,7 +21,7 @@
 
 package ch.threema.app.services.systemupdate;
 
-import net.sqlcipher.database.SQLiteDatabase;
+import net.zetetic.database.sqlcipher.SQLiteDatabase;
 
 import org.slf4j.Logger;
 
diff --git a/app/src/main/java/ch/threema/app/services/systemupdate/SystemUpdateToVersion73.java b/app/src/main/java/ch/threema/app/services/systemupdate/SystemUpdateToVersion73.java
index 0caac2a1..2de38c85 100644
--- a/app/src/main/java/ch/threema/app/services/systemupdate/SystemUpdateToVersion73.java
+++ b/app/src/main/java/ch/threema/app/services/systemupdate/SystemUpdateToVersion73.java
@@ -21,7 +21,7 @@
 
 package ch.threema.app.services.systemupdate;
 
-import net.sqlcipher.database.SQLiteDatabase;
+import net.zetetic.database.sqlcipher.SQLiteDatabase;
 
 import java.sql.SQLException;
 
@@ -44,13 +44,11 @@ public class SystemUpdateToVersion73 extends UpdateToVersion implements UpdateSy
 
 	@Override
 	public boolean runDirectly() throws SQLException {
-		if (!this.fieldExist(this.sqLiteDatabase, MessageModel.TABLE, AbstractMessageModel.COLUMN_FORWARD_SECURITY_MODE)) {
-			sqLiteDatabase.rawExecSQL("ALTER TABLE " + MessageModel.TABLE + " ADD COLUMN " +
-				AbstractMessageModel.COLUMN_FORWARD_SECURITY_MODE + " TINYINT DEFAULT 0");
+		if (!this.fieldExist(this.sqLiteDatabase, "message", "forwardSecurityMode")) {
+			sqLiteDatabase.rawExecSQL("ALTER TABLE message ADD COLUMN forwardSecurityMode TINYINT DEFAULT 0");
 		}
-		if (!this.fieldExist(this.sqLiteDatabase, ContactModel.TABLE, ContactModel.COLUMN_FORWARD_SECURITY_ENABLED)) {
-			sqLiteDatabase.rawExecSQL("ALTER TABLE " + ContactModel.TABLE + " ADD COLUMN " +
-				ContactModel.COLUMN_FORWARD_SECURITY_ENABLED + " TINYINT DEFAULT 0");
+		if (!this.fieldExist(this.sqLiteDatabase, "contacts", "forwardSecurityEnabled")) {
+			sqLiteDatabase.rawExecSQL("ALTER TABLE contacts ADD COLUMN forwardSecurityEnabled TINYINT DEFAULT 0");
 		}
 
 		return true;
diff --git a/app/src/main/java/ch/threema/app/services/systemupdate/SystemUpdateToVersion74.java b/app/src/main/java/ch/threema/app/services/systemupdate/SystemUpdateToVersion74.java
index 3786a272..e6ff6536 100644
--- a/app/src/main/java/ch/threema/app/services/systemupdate/SystemUpdateToVersion74.java
+++ b/app/src/main/java/ch/threema/app/services/systemupdate/SystemUpdateToVersion74.java
@@ -21,7 +21,7 @@
 
 package ch.threema.app.services.systemupdate;
 
-import net.sqlcipher.database.SQLiteDatabase;
+import net.zetetic.database.sqlcipher.SQLiteDatabase;
 
 import java.sql.SQLException;
 
diff --git a/app/src/main/java/ch/threema/app/services/systemupdate/SystemUpdateToVersion75.java b/app/src/main/java/ch/threema/app/services/systemupdate/SystemUpdateToVersion75.java
index 28f3c408..a0290db7 100644
--- a/app/src/main/java/ch/threema/app/services/systemupdate/SystemUpdateToVersion75.java
+++ b/app/src/main/java/ch/threema/app/services/systemupdate/SystemUpdateToVersion75.java
@@ -21,7 +21,7 @@
 
 package ch.threema.app.services.systemupdate;
 
-import net.sqlcipher.database.SQLiteDatabase;
+import net.zetetic.database.sqlcipher.SQLiteDatabase;
 import java.sql.SQLException;
 import ch.threema.app.services.UpdateSystemService;
 
diff --git a/app/src/main/java/ch/threema/app/services/systemupdate/SystemUpdateToVersion76.java b/app/src/main/java/ch/threema/app/services/systemupdate/SystemUpdateToVersion76.java
index 0d25906c..10d199ee 100644
--- a/app/src/main/java/ch/threema/app/services/systemupdate/SystemUpdateToVersion76.java
+++ b/app/src/main/java/ch/threema/app/services/systemupdate/SystemUpdateToVersion76.java
@@ -21,7 +21,7 @@
 
 package ch.threema.app.services.systemupdate;
 
-import net.sqlcipher.database.SQLiteDatabase;
+import net.zetetic.database.sqlcipher.SQLiteDatabase;
 
 import java.sql.SQLException;
 
diff --git a/app/src/main/java/ch/threema/app/services/systemupdate/SystemUpdateToVersion77.kt b/app/src/main/java/ch/threema/app/services/systemupdate/SystemUpdateToVersion77.kt
index b8500c32..8697db53 100644
--- a/app/src/main/java/ch/threema/app/services/systemupdate/SystemUpdateToVersion77.kt
+++ b/app/src/main/java/ch/threema/app/services/systemupdate/SystemUpdateToVersion77.kt
@@ -22,7 +22,7 @@
 package ch.threema.app.services.systemupdate
 
 import ch.threema.app.services.UpdateSystemService
-import net.sqlcipher.database.SQLiteDatabase
+import net.zetetic.database.sqlcipher.SQLiteDatabase
 
 internal class SystemUpdateToVersion77(
     private val sqLiteDatabase: SQLiteDatabase
diff --git a/app/src/main/java/ch/threema/app/services/systemupdate/SystemUpdateToVersion78.kt b/app/src/main/java/ch/threema/app/services/systemupdate/SystemUpdateToVersion78.kt
index fb28c2e0..ce4e2630 100644
--- a/app/src/main/java/ch/threema/app/services/systemupdate/SystemUpdateToVersion78.kt
+++ b/app/src/main/java/ch/threema/app/services/systemupdate/SystemUpdateToVersion78.kt
@@ -22,7 +22,7 @@
 package ch.threema.app.services.systemupdate
 
 import ch.threema.app.services.UpdateSystemService
-import net.sqlcipher.database.SQLiteDatabase
+import net.zetetic.database.sqlcipher.SQLiteDatabase
 
 internal class SystemUpdateToVersion78(
     private val sqLiteDatabase: SQLiteDatabase
diff --git a/app/src/main/java/ch/threema/app/services/systemupdate/SystemUpdateToVersion79.kt b/app/src/main/java/ch/threema/app/services/systemupdate/SystemUpdateToVersion79.kt
index 1662222d..8ec57809 100644
--- a/app/src/main/java/ch/threema/app/services/systemupdate/SystemUpdateToVersion79.kt
+++ b/app/src/main/java/ch/threema/app/services/systemupdate/SystemUpdateToVersion79.kt
@@ -22,7 +22,7 @@
 package ch.threema.app.services.systemupdate
 
 import ch.threema.app.services.UpdateSystemService
-import net.sqlcipher.database.SQLiteDatabase
+import net.zetetic.database.sqlcipher.SQLiteDatabase
 
 internal class SystemUpdateToVersion79(
     private val sqLiteDatabase: SQLiteDatabase
diff --git a/app/src/main/java/ch/threema/app/services/systemupdate/SystemUpdateToVersion8.java b/app/src/main/java/ch/threema/app/services/systemupdate/SystemUpdateToVersion8.java
index 66b379cd..666a6f61 100644
--- a/app/src/main/java/ch/threema/app/services/systemupdate/SystemUpdateToVersion8.java
+++ b/app/src/main/java/ch/threema/app/services/systemupdate/SystemUpdateToVersion8.java
@@ -21,7 +21,7 @@
 
 package ch.threema.app.services.systemupdate;
 
-import net.sqlcipher.database.SQLiteDatabase;
+import net.zetetic.database.sqlcipher.SQLiteDatabase;
 
 import java.sql.SQLException;
 
diff --git a/app/src/main/java/ch/threema/app/services/systemupdate/SystemUpdateToVersion80.kt b/app/src/main/java/ch/threema/app/services/systemupdate/SystemUpdateToVersion80.kt
index 6a78033b..02e5f6de 100644
--- a/app/src/main/java/ch/threema/app/services/systemupdate/SystemUpdateToVersion80.kt
+++ b/app/src/main/java/ch/threema/app/services/systemupdate/SystemUpdateToVersion80.kt
@@ -22,7 +22,7 @@
 package ch.threema.app.services.systemupdate
 
 import ch.threema.app.services.UpdateSystemService
-import net.sqlcipher.database.SQLiteDatabase
+import net.zetetic.database.sqlcipher.SQLiteDatabase
 
 internal class SystemUpdateToVersion80(
     private val sqLiteDatabase: SQLiteDatabase
diff --git a/app/src/main/java/ch/threema/app/services/systemupdate/SystemUpdateToVersion81.kt b/app/src/main/java/ch/threema/app/services/systemupdate/SystemUpdateToVersion81.kt
index f397514b..26509dcf 100644
--- a/app/src/main/java/ch/threema/app/services/systemupdate/SystemUpdateToVersion81.kt
+++ b/app/src/main/java/ch/threema/app/services/systemupdate/SystemUpdateToVersion81.kt
@@ -22,7 +22,7 @@
 package ch.threema.app.services.systemupdate
 
 import ch.threema.app.services.UpdateSystemService
-import net.sqlcipher.database.SQLiteDatabase
+import net.zetetic.database.sqlcipher.SQLiteDatabase
 
 internal class SystemUpdateToVersion81(
     private val sqLiteDatabase: SQLiteDatabase
diff --git a/app/src/main/java/ch/threema/app/utils/SMSUtil.java b/app/src/main/java/ch/threema/app/services/systemupdate/SystemUpdateToVersion82.kt
similarity index 50%
rename from app/src/main/java/ch/threema/app/utils/SMSUtil.java
rename to app/src/main/java/ch/threema/app/services/systemupdate/SystemUpdateToVersion82.kt
index 899541ac..46baa8a7 100644
--- a/app/src/main/java/ch/threema/app/utils/SMSUtil.java
+++ b/app/src/main/java/ch/threema/app/services/systemupdate/SystemUpdateToVersion82.kt
@@ -4,7 +4,7 @@
  *   |_| |_||_|_| \___\___|_|_|_\__,_(_)
  *
  * Threema for Android
- * Copyright (c) 2013-2023 Threema GmbH
+ * Copyright (c) 2023 Threema GmbH
  *
  * This program is free software: you can redistribute it and/or modify
  * it under the terms of the GNU Affero General Public License, version 3,
@@ -19,33 +19,25 @@
  * along with this program. If not, see <https://www.gnu.org/licenses/>.
  */
 
-package ch.threema.app.utils;
+package ch.threema.app.services.systemupdate
 
-import android.telephony.SmsMessage;
+import ch.threema.app.services.UpdateSystemService
+import net.zetetic.database.sqlcipher.SQLiteDatabase
 
-import java.util.regex.Matcher;
-import java.util.regex.Pattern;
+internal class SystemUpdateToVersion82(
+    private val sqLiteDatabase: SQLiteDatabase
+) : UpdateToVersion(), UpdateSystemService.SystemUpdate {
+    companion object {
+        const val VERSION = 82
+    }
 
-public abstract class SMSUtil {
+    override fun runASync() = true
 
-	/**
-	 * Parse a cursor and create a threema sms if the sender is "threema" and the code in the body
-	 *
-	 * @param smsMessage
-	 * @return
-	 */
-	public static String getCodeFromMessage(SmsMessage smsMessage) {
-		String body = smsMessage.getDisplayMessageBody();
+    override fun runDirectly(): Boolean {
+        sqLiteDatabase.rawExecSQL("ALTER TABLE `contacts` ADD COLUMN `profilePicBlobID` BLOB DEFAULT NULL")
+        sqLiteDatabase.rawExecSQL("ALTER TABLE `contacts` DROP COLUMN `profilePicSent`")
+        return true
+    }
 
-		Pattern codePattern = Pattern.compile(".*https://myid.threema.ch/l/vm\\?code=(\\d{6})", Pattern.CASE_INSENSITIVE);
-		Matcher m = codePattern.matcher(body);
-		if (m.find()) {
-			String code = m.group(1);
-			if(code.length() > 0) {
-				return code;
-			}
-		}
-
-		return null;
-	}
+    override fun getText() = "version $VERSION (Profile Picture Blob ID)"
 }
diff --git a/app/src/main/java/ch/threema/app/services/systemupdate/SystemUpdateToVersion83.kt b/app/src/main/java/ch/threema/app/services/systemupdate/SystemUpdateToVersion83.kt
new file mode 100644
index 00000000..9b06e12d
--- /dev/null
+++ b/app/src/main/java/ch/threema/app/services/systemupdate/SystemUpdateToVersion83.kt
@@ -0,0 +1,63 @@
+/*  _____ _
+ * |_   _| |_  _ _ ___ ___ _ __  __ _
+ *   | | | ' \| '_/ -_) -_) '  \/ _` |_
+ *   |_| |_||_|_| \___\___|_|_|_\__,_(_)
+ *
+ * Threema for Android
+ * Copyright (c) 2023 Threema GmbH
+ *
+ * This program is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU Affero General Public License, version 3,
+ * as published by the Free Software Foundation.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+ * GNU Affero General Public License for more details.
+ *
+ * You should have received a copy of the GNU Affero General Public License
+ * along with this program. If not, see <https://www.gnu.org/licenses/>.
+ */
+
+package ch.threema.app.services.systemupdate
+
+import ch.threema.app.services.UpdateSystemService
+import net.zetetic.database.sqlcipher.SQLiteDatabase
+
+internal class SystemUpdateToVersion83(
+    private val sqLiteDatabase: SQLiteDatabase
+) : UpdateToVersion(), UpdateSystemService.SystemUpdate {
+    companion object {
+        const val VERSION = 83
+    }
+
+    override fun runASync() = true
+
+    override fun runDirectly(): Boolean {
+        val tmpTableName = "group_call_tmp"
+        sqLiteDatabase.execSQL("ALTER TABLE `group_call` RENAME TO `$tmpTableName`")
+
+        sqLiteDatabase.execSQL(
+            "CREATE TABLE `group_call` (" +
+                    "`callId` TEXT PRIMARY KEY NOT NULL, " +
+                    "`groupId` INTEGER NOT NULL, " +
+                    "`sfuBaseUrl` TEXT NOT NULL, " +
+                    "`gck` TEXT NOT NULL, " +
+                    "`protocolVersion` INTEGER NOT NULL, " +
+                    "`startedAt` BIGINT NOT NULL, " +
+                    "`processedAt` BIGINT NOT NULL)"
+        )
+
+        sqLiteDatabase.execSQL(
+            "INSERT INTO `group_call` " +
+                    "SELECT callId, groupId, sfuBaseUrl, gck, protocolVersion, startedAt, startedAt as processedAt " +
+                    "FROM `$tmpTableName`"
+        )
+
+        sqLiteDatabase.execSQL("DROP TABLE `$tmpTableName`")
+
+        return true
+    }
+
+    override fun getText() = "version $VERSION (add group call start processed at timestamp)"
+}
diff --git a/app/src/main/java/ch/threema/app/services/systemupdate/SystemUpdateToVersion84.kt b/app/src/main/java/ch/threema/app/services/systemupdate/SystemUpdateToVersion84.kt
new file mode 100644
index 00000000..058a1b05
--- /dev/null
+++ b/app/src/main/java/ch/threema/app/services/systemupdate/SystemUpdateToVersion84.kt
@@ -0,0 +1,44 @@
+/*  _____ _
+ * |_   _| |_  _ _ ___ ___ _ __  __ _
+ *   | | | ' \| '_/ -_) -_) '  \/ _` |_
+ *   |_| |_||_|_| \___\___|_|_|_\__,_(_)
+ *
+ * Threema for Android
+ * Copyright (c) 2023 Threema GmbH
+ *
+ * This program is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU Affero General Public License, version 3,
+ * as published by the Free Software Foundation.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+ * GNU Affero General Public License for more details.
+ *
+ * You should have received a copy of the GNU Affero General Public License
+ * along with this program. If not, see <https://www.gnu.org/licenses/>.
+ */
+
+package ch.threema.app.services.systemupdate
+
+import ch.threema.app.services.UpdateSystemService
+import net.zetetic.database.sqlcipher.SQLiteDatabase
+
+internal class SystemUpdateToVersion84(
+    private val sqLiteDatabase: SQLiteDatabase
+) : UpdateToVersion(), UpdateSystemService.SystemUpdate {
+    companion object {
+        const val VERSION = 84
+    }
+
+    override fun runASync() = true
+
+    override fun runDirectly(): Boolean {
+        if (this.fieldExist(sqLiteDatabase, "contacts", "forwardSecurityEnabled")) {
+            sqLiteDatabase.rawExecSQL("ALTER TABLE `contacts` DROP COLUMN `forwardSecurityEnabled`")
+        }
+        return true
+    }
+
+    override fun getText() = "version $VERSION (remove forward security enabled field)"
+}
diff --git a/app/src/main/java/ch/threema/app/services/systemupdate/SystemUpdateToVersion9.java b/app/src/main/java/ch/threema/app/services/systemupdate/SystemUpdateToVersion9.java
index 9253d36c..02abd6f2 100644
--- a/app/src/main/java/ch/threema/app/services/systemupdate/SystemUpdateToVersion9.java
+++ b/app/src/main/java/ch/threema/app/services/systemupdate/SystemUpdateToVersion9.java
@@ -23,7 +23,7 @@ package ch.threema.app.services.systemupdate;
 
 import androidx.annotation.NonNull;
 
-import net.sqlcipher.database.SQLiteDatabase;
+import net.zetetic.database.sqlcipher.SQLiteDatabase;
 
 import java.util.Arrays;
 
diff --git a/app/src/main/java/ch/threema/app/services/systemupdate/UpdateToVersion.java b/app/src/main/java/ch/threema/app/services/systemupdate/UpdateToVersion.java
index 848e8e0b..1f2576b5 100644
--- a/app/src/main/java/ch/threema/app/services/systemupdate/UpdateToVersion.java
+++ b/app/src/main/java/ch/threema/app/services/systemupdate/UpdateToVersion.java
@@ -23,8 +23,8 @@ package ch.threema.app.services.systemupdate;
 
 import androidx.annotation.NonNull;
 
-import net.sqlcipher.Cursor;
-import net.sqlcipher.database.SQLiteDatabase;
+import android.database.Cursor;
+import net.zetetic.database.sqlcipher.SQLiteDatabase;
 
 import org.slf4j.Logger;
 
diff --git a/app/src/main/java/ch/threema/app/stores/DatabaseContactStore.java b/app/src/main/java/ch/threema/app/stores/DatabaseContactStore.java
index d85f3172..9f556700 100644
--- a/app/src/main/java/ch/threema/app/stores/DatabaseContactStore.java
+++ b/app/src/main/java/ch/threema/app/stores/DatabaseContactStore.java
@@ -40,12 +40,17 @@ import ch.threema.app.utils.SynchronizeContactsUtil;
 import ch.threema.app.utils.TestUtil;
 import ch.threema.base.ThreemaException;
 import ch.threema.base.utils.LoggingUtil;
+import ch.threema.domain.fs.DHSession;
 import ch.threema.domain.models.Contact;
 import ch.threema.domain.models.IdentityState;
 import ch.threema.domain.models.VerificationLevel;
 import ch.threema.domain.protocol.ThreemaFeature;
 import ch.threema.domain.protocol.api.APIConnector;
 import ch.threema.domain.stores.ContactStore;
+import ch.threema.domain.stores.DHSessionStoreException;
+import ch.threema.domain.stores.DHSessionStoreInterface;
+import ch.threema.domain.stores.IdentityStoreInterface;
+import ch.threema.protobuf.csp.e2e.fs.Terminate;
 import ch.threema.storage.DatabaseServiceNew;
 import ch.threema.storage.factories.ContactModelFactory;
 import ch.threema.storage.models.ContactModel;
@@ -58,19 +63,25 @@ import ch.threema.storage.models.data.status.ForwardSecurityStatusDataModel;
 public class DatabaseContactStore implements ContactStore {
 	private static final Logger logger = LoggingUtil.getThreemaLogger("DatabaseContactStore");
 
-	private final APIConnector apiConnector;
-	private final PreferenceService preferenceService;
-	private final DatabaseServiceNew databaseServiceNew;
-	private final IdListService blackListService;
-	private final IdListService excludeListService;
+	private final @NonNull IdentityStoreInterface identityStore;
+	private final @NonNull DHSessionStoreInterface fsSessions;
+	private final @NonNull APIConnector apiConnector;
+	private final @NonNull PreferenceService preferenceService;
+	private final @NonNull DatabaseServiceNew databaseServiceNew;
+	private final @NonNull IdListService blackListService;
+	private final @NonNull IdListService excludeListService;
 
 	public DatabaseContactStore(
-		APIConnector apiConnector,
-		PreferenceService preferenceService,
-		DatabaseServiceNew databaseServiceNew,
-		IdListService blackListService,
-		IdListService excludeListService
+		@NonNull IdentityStoreInterface identityStore,
+		@NonNull DHSessionStoreInterface fsSessions,
+		@NonNull APIConnector apiConnector,
+		@NonNull PreferenceService preferenceService,
+		@NonNull DatabaseServiceNew databaseServiceNew,
+		@NonNull IdListService blackListService,
+		@NonNull IdListService excludeListService
 	) {
+		this.identityStore = identityStore;
+		this.fsSessions = fsSessions;
 		this.apiConnector = apiConnector;
 		this.preferenceService = preferenceService;
 		this.databaseServiceNew = databaseServiceNew;
@@ -206,15 +217,27 @@ public class DatabaseContactStore implements ContactStore {
 				logger.debug("do not save unmodified contact");
 				return;
 			}
-			if (ThreemaFeature.canForwardSecurity(existingModel.getFeatureMask()) && !ThreemaFeature.canForwardSecurity(contactModel.getFeatureMask())) {
-				logger.info("Forward security feature has been downgraded for contact {}", contactModel.getIdentity());
-				if (existingModel.isForwardSecurityEnabled()) {
-					// If forward security was enabled for this contact, create a status message that
-					// forward security has been disabled for this contact due to a downgrade.
-					createForwardSecurityDowngradedStatus(contactModel);
 
-					// Disable forward security for this contact
-					contactModel.setForwardSecurityEnabled(false);
+			// Only warn about an FS feature mask downgrade if an FS session existed.
+			DHSession fsSession = null;
+			try {
+				fsSession = fsSessions.getBestDHSession(identityStore.getIdentity(), contact.getIdentity());
+			} catch (DHSessionStoreException exception) {
+				logger.error("Unable to determine best DH session", exception);
+			}
+			if (fsSession != null && !ThreemaFeature.canForwardSecurity(contactModel.getFeatureMask())) {
+				logger.info("Forward security feature has been downgraded for contact {}", contactModel.getIdentity());
+				// Create a status message that forward security has been disabled for this contact
+				// due to a downgrade.
+				createForwardSecurityDowngradedStatus(contactModel);
+
+				// Clear and terminate all sessions with that contact
+				ServiceManager serviceManager = ThreemaApplication.getServiceManager();
+				if (serviceManager != null) {
+					serviceManager.getForwardSecurityMessageProcessor().clearAndTerminateAllSessions(
+						contact,
+						Terminate.Cause.DISABLED_BY_REMOTE
+					);
 				}
 			}
 		}
diff --git a/app/src/main/java/ch/threema/app/stores/PreferenceStore.java b/app/src/main/java/ch/threema/app/stores/PreferenceStore.java
index 4231ec45..f1d897ed 100644
--- a/app/src/main/java/ch/threema/app/stores/PreferenceStore.java
+++ b/app/src/main/java/ch/threema/app/stores/PreferenceStore.java
@@ -524,7 +524,7 @@ public class PreferenceStore implements PreferenceStoreInterface {
 				return null;
 			}
 		} else {
-			return this.sharedPreferences.getLong(key, 0);
+			return this.sharedPreferences.getLong(key, 0L);
 		}
 	}
 
diff --git a/app/src/main/java/ch/threema/app/threemasafe/BackupThreemaSafeFragment.java b/app/src/main/java/ch/threema/app/threemasafe/BackupThreemaSafeFragment.java
index 0d3fbcd0..b17d4672 100644
--- a/app/src/main/java/ch/threema/app/threemasafe/BackupThreemaSafeFragment.java
+++ b/app/src/main/java/ch/threema/app/threemasafe/BackupThreemaSafeFragment.java
@@ -35,14 +35,15 @@ import android.widget.FrameLayout;
 import android.widget.TextView;
 import android.widget.Toast;
 
-import com.google.android.material.floatingactionbutton.ExtendedFloatingActionButton;
-
-import org.slf4j.Logger;
-
 import androidx.annotation.NonNull;
 import androidx.annotation.Nullable;
 import androidx.annotation.UiThread;
 import androidx.fragment.app.Fragment;
+
+import com.google.android.material.floatingactionbutton.ExtendedFloatingActionButton;
+
+import org.slf4j.Logger;
+
 import ch.threema.app.R;
 import ch.threema.app.ThreemaApplication;
 import ch.threema.app.dialogs.GenericAlertDialog;
@@ -141,14 +142,10 @@ public class BackupThreemaSafeFragment extends Fragment implements GenericAlertD
 			explainLayout = fragmentView.findViewById(R.id.explain_layout);
 
 			floatingActionButton = fragmentView.findViewById(R.id.floating);
-			floatingActionButton.setOnClickListener(new View.OnClickListener() {
-				@Override
-				public void onClick(View v) {
-					if (preferenceService.getThreemaSafeEnabled()) {
-						threemaSafeService.unscheduleUpload();
-						threemaSafeService.scheduleUpload();
-						threemaSafeService.uploadNow(getContext(), true);
-					}
+			floatingActionButton.setOnClickListener(v -> {
+				if (preferenceService.getThreemaSafeEnabled()) {
+					threemaSafeService.uploadNow(true);
+					threemaSafeService.reschedulePeriodicUpload();
 				}
 			});
 
@@ -157,7 +154,7 @@ public class BackupThreemaSafeFragment extends Fragment implements GenericAlertD
 				@Override
 				public void onClick(View v) {
 					if (preferenceService.getThreemaSafeEnabled()) {
-						threemaSafeService.unscheduleUpload();
+						threemaSafeService.unschedulePeriodicUpload();
 						Intent intent = new Intent(getActivity(), ThreemaSafeConfigureActivity.class);
 						intent.putExtra(EXTRA_CHANGE_PASSWORD, true);
 						startActivityForResult(intent, REQUEST_CODE_SAFE_CHANGE_PASSWORD);
@@ -170,7 +167,7 @@ public class BackupThreemaSafeFragment extends Fragment implements GenericAlertD
 				@Override
 				public void onCheckedChanged(CompoundButton buttonView, boolean isChecked) {
 					if (buttonView.isShown()) {
-						logger.debug("*** onCheckedChanged buttonView " + buttonView.isChecked() + " isChecked " + isChecked);
+						logger.debug("*** onCheckedChanged buttonView {} isChecked {}", buttonView.isChecked(), isChecked);
 						if (isChecked) {
 							startActivityForResult(new Intent(getActivity(), ThreemaSafeConfigureActivity.class), REQUEST_CODE_SAFE_CONFIGURE);
 						} else {
@@ -238,7 +235,7 @@ public class BackupThreemaSafeFragment extends Fragment implements GenericAlertD
 					backupResult.setTextColor(getResources().getColor(R.color.material_red));
 				} else {
 					backupResult.setText("-");
-					backupResult.setTextColor(ConfigUtils.getPrimaryColor());
+					backupResult.setTextColor(ConfigUtils.getColorFromAttribute(getContext(), R.attr.colorOnBackground));
 				}
 				changePasswordButton.setVisibility(View.INVISIBLE);
 			}
diff --git a/app/src/main/java/ch/threema/app/threemasafe/ThreemaSafeAdvancedDialog.java b/app/src/main/java/ch/threema/app/threemasafe/ThreemaSafeAdvancedDialog.java
index 0acacc64..b9da047d 100644
--- a/app/src/main/java/ch/threema/app/threemasafe/ThreemaSafeAdvancedDialog.java
+++ b/app/src/main/java/ch/threema/app/threemasafe/ThreemaSafeAdvancedDialog.java
@@ -34,11 +34,12 @@ import android.widget.EditText;
 import android.widget.LinearLayout;
 import android.widget.Toast;
 
-import com.google.android.material.dialog.MaterialAlertDialogBuilder;
-
 import androidx.appcompat.app.AlertDialog;
 import androidx.appcompat.app.AppCompatDialog;
-import androidx.appcompat.widget.SwitchCompat;
+
+import com.google.android.material.dialog.MaterialAlertDialogBuilder;
+import com.google.android.material.materialswitch.MaterialSwitch;
+
 import ch.threema.app.R;
 import ch.threema.app.ThreemaApplication;
 import ch.threema.app.dialogs.GenericProgressDialog;
@@ -67,7 +68,7 @@ public class ThreemaSafeAdvancedDialog extends ThreemaDialogFragment implements
 	private Button positiveButton;
 	private EditText serverUrlEditText, usernameEditText, passwordEditText;
 	private LinearLayout serverContainer;
-	private SwitchCompat defaultServerSwitch;
+	private MaterialSwitch defaultServerSwitch;
 
 	public static ThreemaSafeAdvancedDialog newInstance(ThreemaSafeServerInfo serverInfo, boolean plainStyle) {
 		ThreemaSafeAdvancedDialog dialog = new ThreemaSafeAdvancedDialog();
diff --git a/app/src/main/java/ch/threema/app/threemasafe/ThreemaSafeConfigureActivity.java b/app/src/main/java/ch/threema/app/threemasafe/ThreemaSafeConfigureActivity.java
index d7e75692..f0fb220e 100644
--- a/app/src/main/java/ch/threema/app/threemasafe/ThreemaSafeConfigureActivity.java
+++ b/app/src/main/java/ch/threema/app/threemasafe/ThreemaSafeConfigureActivity.java
@@ -253,7 +253,7 @@ public class ThreemaSafeConfigureActivity extends ThreemaToolbarActivity impleme
 		threemaSafeService.storeMasterKey(masterkey);
 		preferenceService.setThreemaSafeServerInfo(serverInfo);
 		threemaSafeService.setEnabled(true);
-		threemaSafeService.uploadNow(this, true);
+		threemaSafeService.uploadNow(true);
 
 		if (updatePasswordOnly) {
 			Toast.makeText(ThreemaApplication.getAppContext(), R.string.safe_password_updated, Toast.LENGTH_LONG).show();
diff --git a/app/src/main/java/ch/threema/app/threemasafe/ThreemaSafeService.java b/app/src/main/java/ch/threema/app/threemasafe/ThreemaSafeService.java
index 62219544..d0cf3038 100644
--- a/app/src/main/java/ch/threema/app/threemasafe/ThreemaSafeService.java
+++ b/app/src/main/java/ch/threema/app/threemasafe/ThreemaSafeService.java
@@ -22,7 +22,6 @@
 package ch.threema.app.threemasafe;
 
 import android.app.Activity;
-import android.content.Context;
 import android.text.format.DateUtils;
 
 import java.io.IOException;
@@ -80,16 +79,64 @@ public interface ThreemaSafeService {
 
 	ThreemaSafeServerTestResponse testServer(ThreemaSafeServerInfo serverInfo) throws ThreemaException;
 
-	boolean scheduleUpload();
+	/**
+	 * Schedules the Threema Safe backup to run periodically. There is an initial delay of one
+	 * period, therefore the backup is not run immediately after calling this. This does not replace
+	 * existing periodic Threema Safe backup work. Therefore the periodic execution cycle is not
+	 * affected by this method. However, if the schedule period changes, this call cancels the
+	 * currently scheduled upload and schedules a new upload with the new schedule period and again
+	 * an initial delay.
+	 *
+	 * Periodic Threema Safe backups are only uploaded if they are different than the last
+	 * successful backup.
+	 *
+	 * @return {@code true} if the backup has been scheduled successfully, {@code false} otherwise
+	 */
+	boolean schedulePeriodicUpload();
 
-	void unscheduleUpload();
+	/**
+	 * Reschedule the Threema Safe backup to run with an initial delay of one period from now on.
+	 * Existing periodic work is canceled.
+	 *
+	 * @return {@code true} if the backup has been rescheduled successfully, {@code false} otherwise
+	 */
+	boolean reschedulePeriodicUpload();
 
-	boolean isUploadDue();
+	/**
+	 * Cancel the periodic Threema Safe work.
+	 */
+	void unschedulePeriodicUpload();
 
+	/**
+	 * Enable or disable the Threema Safe backup. If the backup is being enabled, then this method
+	 * schedules the periodic work. See {@link #schedulePeriodicUpload()} for more details. If the backup is
+	 * being disabled, {@link #unschedulePeriodicUpload()} is also called.
+	 *
+	 * @param enabled {@code true} if the backup should be enabled, {@code false} otherwise
+	 */
 	void setEnabled(boolean enabled);
 
-	void uploadNow(Context context, boolean force);
+	/**
+	 * Create a one time work request to create and upload a Threema Safe backup. This method
+	 * cancels already enqueued one time work requests. If a periodic work request is scheduled, it
+	 * gets rescheduled, so that the schedule period is still met.
+	 *
+	 * @param force If set to {@code true}, the backup is created even if the last backup was
+	 *              created within the last 24 hours or there are no new changes since the last
+	 *              backup. See {@link #createBackup(boolean)} for more details.
+	 */
+	void uploadNow(boolean force);
 
+	/**
+	 * Create and upload a Threema Safe backup.
+	 *
+	 * @param force If set to {@code true}, the backup is created and uploaded in any case. If this
+	 *              is {@code false}, then the backup is only uploaded if it is different than the
+	 *              last Threema Safe backup or the last backup is older than half of the server's
+	 *              retention time. The grace time of 23 hours is only respected when this parameter
+	 *              is {@code false}.
+	 * @throws ThreemaSafeUploadException If an error occurs with the backup or the connection.
+	 */
 	void createBackup(boolean force) throws ThreemaSafeUploadException;
 
 	void deleteBackup() throws ThreemaException;
diff --git a/app/src/main/java/ch/threema/app/threemasafe/ThreemaSafeServiceImpl.java b/app/src/main/java/ch/threema/app/threemasafe/ThreemaSafeServiceImpl.java
index 9944ddbc..1c85dead 100644
--- a/app/src/main/java/ch/threema/app/threemasafe/ThreemaSafeServiceImpl.java
+++ b/app/src/main/java/ch/threema/app/threemasafe/ThreemaSafeServiceImpl.java
@@ -22,13 +22,14 @@
 package ch.threema.app.threemasafe;
 
 import android.app.Activity;
-import android.content.ContentValues;
 import android.content.Context;
 import android.content.Intent;
 import android.graphics.Bitmap;
+import android.hardware.display.DisplayManager;
 import android.text.TextUtils;
 import android.text.format.DateUtils;
-import android.util.Pair;
+import android.view.Display;
+import android.view.WindowManager;
 import android.widget.Toast;
 
 import androidx.annotation.NonNull;
@@ -64,7 +65,6 @@ import java.util.Arrays;
 import java.util.Date;
 import java.util.HashMap;
 import java.util.LinkedList;
-import java.util.List;
 import java.util.Locale;
 import java.util.Map;
 import java.util.zip.Deflater;
@@ -97,7 +97,6 @@ import ch.threema.app.utils.StringConversionUtil;
 import ch.threema.app.utils.TestUtil;
 import ch.threema.app.utils.WorkManagerUtil;
 import ch.threema.app.workers.ThreemaSafeUploadWorker;
-import ch.threema.base.Result;
 import ch.threema.base.ThreemaException;
 import ch.threema.base.utils.Base64;
 import ch.threema.base.utils.LoggingUtil;
@@ -108,24 +107,18 @@ import ch.threema.domain.models.VerificationLevel;
 import ch.threema.domain.protocol.ProtocolStrings;
 import ch.threema.domain.protocol.api.APIConnector;
 import ch.threema.domain.protocol.csp.ProtocolDefines;
-import ch.threema.domain.protocol.csp.messages.group.GroupInviteToken;
 import ch.threema.storage.DatabaseServiceNew;
 import ch.threema.storage.factories.ContactModelFactory;
 import ch.threema.storage.factories.DistributionListMemberModelFactory;
-import ch.threema.storage.factories.GroupInviteModelFactory;
 import ch.threema.storage.factories.GroupMemberModelFactory;
 import ch.threema.storage.factories.GroupModelFactory;
-import ch.threema.storage.factories.IncomingGroupJoinRequestModelFactory;
-import ch.threema.storage.factories.OutgoingGroupJoinRequestModelFactory;
 import ch.threema.storage.models.ContactModel;
 import ch.threema.storage.models.DistributionListMemberModel;
 import ch.threema.storage.models.DistributionListModel;
 import ch.threema.storage.models.GroupMemberModel;
 import ch.threema.storage.models.GroupModel;
-import ch.threema.storage.models.group.GroupInviteModel;
-import ch.threema.storage.models.group.IncomingGroupJoinRequestModel;
-import ch.threema.storage.models.group.OutgoingGroupJoinRequestModel;
 
+import static android.view.Display.DEFAULT_DISPLAY;
 import static ch.threema.app.ThreemaApplication.WORKER_PERIODIC_THREEMA_SAFE_UPLOAD;
 import static ch.threema.app.ThreemaApplication.WORKER_THREEMA_SAFE_UPLOAD;
 import static ch.threema.app.services.PreferenceService.PROFILEPIC_RELEASE_EVERYONE;
@@ -203,33 +196,6 @@ public class ThreemaSafeServiceImpl implements ThreemaSafeService {
 	private static final String TAG_SAFE_GROUP_DELETED = "deleted";
 	private static final String TAG_SAFE_GROUP_PRIVATE = "private";
 
-	private static final String TAG_SAFE_GROUP_LINKS = "links";
-	private static final String TAG_SAFE_GROUP_LINK_ID = "id";
-	private static final String TAG_SAFE_GROUP_LINK_GROUP_ID = "linkedGroupId";
-	private static final String TAG_SAFE_GROUP_LINK_DEFAULT = "defaultFlag";
-	private static final String TAG_SAFE_GROUP_LINK_TOKEN = "token";
-	private static final String TAG_SAFE_GROUP_LINK_GROUP_NAME = "groupName";
-	private static final String TAG_SAFE_GROUP_LINK_NAME = "link_name";
-	private static final String TAG_SAFE_GROUP_LINK_CONFIRMATION = "confirmationFlag";
-	private static final String TAG_SAFE_GROUP_LINK_EXPIRATION_DATE = "expirationDate";
-	private static final String TAG_SAFE_GROUP_LINK_DELETED = "invalidFlag";
-
-	private static final String TAG_SAFE_INCOMING_GROUP_REQUESTS = "incomingRequests";
-	private static final String TAG_SAFE_INCOMING_REQUEST_SOURCE_LINK_ID = "linkId";
-	private static final String TAG_SAFE_INCOMING_REQUEST_MESSAGE = "sourceLink";
-	private static final String TAG_SAFE_INCOMING_REQUEST_REQUESTER_ID = "requesterId";
-	private static final String TAG_SAFE_INCOMING_REQUEST_TIME = "requestTime";
-	private static final String TAG_SAFE_INCOMING_REQUEST_STATUS = "status";
-
-	private static final String TAG_SAFE_OUTGOING_GROUP_REQUESTS = "outgoingRequests";
-	private static final String TAG_SAFE_OUTGOING_REQUEST_SOURCE_LINK_TOKEN = "token";
-	private static final String TAG_SAFE_OUTGOING_REQUEST_GROUP_NAME = "groupName";
-	private static final String TAG_SAFE_OUTGOING_REQUEST_GROUP_API_ID = "groupApiId";
-	private static final String TAG_SAFE_OUTGOING_REQUEST_MESSAGE = "message";
-	private static final String TAG_SAFE_OUTGOING_REQUEST_ADMIN_IDENTITY = "admin";
-	private static final String TAG_SAFE_OUTGOING_REQUEST_TIME = "time";
-	private static final String TAG_SAFE_OUTGOING_REQUEST_STATUS = "status";
-
 	private static final String TAG_SAFE_DISTRIBUTIONLISTS = "distributionlists";
 	private static final String TAG_SAFE_DISTRIBUTIONLIST_ID = "id";
 	private static final String TAG_SAFE_DISTRIBUTIONLIST_NAME = "name";
@@ -400,45 +366,27 @@ public class ThreemaSafeServiceImpl implements ThreemaSafeService {
 	}
 
 	@Override
-	public boolean scheduleUpload() {
-		if (preferenceService.getThreemaSafeEnabled()) {
-			logger.info("Scheduling Threema Safe upload");
-
-			try {
-				// schedule the start of the service every 24 hours
-				WorkManager workManager = WorkManager.getInstance(ThreemaApplication.getAppContext());
-				PeriodicWorkRequest workRequest = ThreemaSafeUploadWorker.Companion.buildPeriodicWorkRequest(SCHEDULE_PERIOD);
-				workManager.enqueueUniquePeriodicWork(WORKER_PERIODIC_THREEMA_SAFE_UPLOAD,
-					WorkManagerUtil.shouldScheduleNewWorkManagerInstance(workManager, WORKER_PERIODIC_THREEMA_SAFE_UPLOAD, SCHEDULE_PERIOD) ?
-						ExistingPeriodicWorkPolicy.REPLACE :
-						ExistingPeriodicWorkPolicy.KEEP,
-					workRequest);
+	public boolean schedulePeriodicUpload() {
+		logger.info("Scheduling Threema Safe upload");
+		WorkManager workManager = WorkManager.getInstance(ThreemaApplication.getAppContext());
+		boolean reschedule = WorkManagerUtil.shouldScheduleNewWorkManagerInstance(workManager, WORKER_PERIODIC_THREEMA_SAFE_UPLOAD, SCHEDULE_PERIOD);
+		return schedulePeriodicWork(reschedule);
+	}
 
-				return true;
-			} catch (IllegalStateException e) {
-				logger.error("Unable to schedule periodic safe upload", e);
-			}
-		} else {
-			logger.info("Threema Safe disabled");
-		}
-		return false;
+	@Override
+	public boolean reschedulePeriodicUpload() {
+		logger.info("Rescheduling Threema Safe upload");
+		return schedulePeriodicWork(true);
 	}
 
 	@Override
-	public void unscheduleUpload() {
+	public void unschedulePeriodicUpload() {
 		logger.info("Unscheduling Threema Safe upload");
 
 		WorkManager workManager = WorkManager.getInstance(ThreemaApplication.getAppContext());
 		workManager.cancelUniqueWork(WORKER_PERIODIC_THREEMA_SAFE_UPLOAD);
 	}
 
-	@Override
-	public boolean isUploadDue() {
-		return (preferenceService != null &&
-			preferenceService.getThreemaSafeEnabled() &&
-			System.currentTimeMillis() - preferenceService.getThreemaSafeUploadDate().getTime() > ThreemaSafeService.SCHEDULE_PERIOD);
-	}
-
 	@Override
 	public void setEnabled(boolean enabled) {
 		if (ConfigUtils.isWorkRestricted() && ThreemaSafeMDMConfig.getInstance().isBackupDisabled()) {
@@ -447,10 +395,10 @@ public class ThreemaSafeServiceImpl implements ThreemaSafeService {
 
 		preferenceService.setThreemaSafeEnabled(enabled);
 		if (enabled) {
-			scheduleUpload();
+			schedulePeriodicUpload();
 		} else {
 			// disable Safe
-			unscheduleUpload();
+			unschedulePeriodicUpload();
 			preferenceService.setThreemaSafeEnabled(false);
 			preferenceService.setThreemaSafeMasterKey(new byte[0]);
 			preferenceService.setThreemaSafeServerInfo(null);
@@ -462,10 +410,19 @@ public class ThreemaSafeServiceImpl implements ThreemaSafeService {
 	}
 
 	@Override
-	public void uploadNow(Context context, boolean force) {
+	public void uploadNow(boolean force) {
 		try {
-			OneTimeWorkRequest workRequest = ThreemaSafeUploadWorker.Companion.buildOneTimeWorkRequest(true);
-			WorkManager.getInstance(ThreemaApplication.getAppContext()).enqueueUniqueWork(WORKER_THREEMA_SAFE_UPLOAD, ExistingWorkPolicy.REPLACE, workRequest);
+			WorkManager workManager = WorkManager.getInstance(ThreemaApplication.getAppContext());
+
+			// If the periodic safe upload is scheduled, we can reschedule it so that it does not
+			// get executed within the next schedule period.
+			if (WorkManagerUtil.isWorkManagerInstanceScheduled(workManager, WORKER_PERIODIC_THREEMA_SAFE_UPLOAD)) {
+				reschedulePeriodicUpload();
+			}
+
+			// Upload the threema safe once
+			OneTimeWorkRequest workRequest = ThreemaSafeUploadWorker.Companion.buildOneTimeWorkRequest(force);
+			workManager.enqueueUniqueWork(WORKER_THREEMA_SAFE_UPLOAD, ExistingWorkPolicy.REPLACE, workRequest);
 		} catch (IllegalStateException e) {
 			logger.error("Unable to schedule safe upload one time work", e);
 		}
@@ -573,10 +530,24 @@ public class ThreemaSafeServiceImpl implements ThreemaSafeService {
 		}
 
 		if (force) {
-			RuntimeUtil.runOnUiThread(() -> Toast.makeText(context, R.string.threema_safe_upload_successful, Toast.LENGTH_LONG).show());
+			RuntimeUtil.runOnUiThread(() -> {
+				Context windowContext = context;
+				if (android.os.Build.VERSION.SDK_INT >= android.os.Build.VERSION_CODES.R) {
+					final DisplayManager dm;
+					dm = context.getSystemService(DisplayManager.class);
+					final Display primaryDisplay = dm.getDisplay(DEFAULT_DISPLAY);
+					try {
+						windowContext = context.createDisplayContext(primaryDisplay)
+							.createWindowContext(WindowManager.LayoutParams.TYPE_APPLICATION_OVERLAY, null);
+					} catch (SecurityException e) {
+						logger.error("Unable to create WindowContext for Toast", e);
+					}
+				}
+				Toast.makeText(windowContext, R.string.threema_safe_upload_successful, Toast.LENGTH_LONG).show();
+			});
 		}
 
-		logger.info(context.getString(R.string.threema_safe_upload_successful));
+		logger.info("Threema Safe backup successfully created and uploaded");
 	}
 
 	@Override
@@ -695,6 +666,30 @@ public class ThreemaSafeServiceImpl implements ThreemaSafeService {
 		ThreemaSafeMDMConfig.getInstance().saveConfig(preferenceService);
 	}
 
+	private boolean schedulePeriodicWork(boolean reschedule) {
+		if (preferenceService.getThreemaSafeEnabled()) {
+			ExistingPeriodicWorkPolicy policy = reschedule ? ExistingPeriodicWorkPolicy.CANCEL_AND_REENQUEUE : ExistingPeriodicWorkPolicy.KEEP;
+
+			try {
+				// Schedule the start of the worker every 24 hours
+				WorkManager workManager = WorkManager.getInstance(ThreemaApplication.getAppContext());
+				PeriodicWorkRequest workRequest = ThreemaSafeUploadWorker.Companion.buildPeriodicWorkRequest(SCHEDULE_PERIOD);
+				workManager.enqueueUniquePeriodicWork(
+					WORKER_PERIODIC_THREEMA_SAFE_UPLOAD,
+					policy,
+					workRequest
+				);
+
+				return true;
+			} catch (IllegalStateException e) {
+				logger.error("Unable to schedule periodic safe upload", e);
+			}
+		} else {
+			logger.info("Threema Safe disabled");
+		}
+		return false;
+	}
+
 	private void restoreJson(String identity, String json) throws ThreemaException {
 		JSONObject jsonObject;
 
@@ -736,30 +731,7 @@ public class ThreemaSafeServiceImpl implements ThreemaSafeService {
 			// no distribution lists - ignore and continue
 		}
 
-		// Careful! incoming requests have to be restored before group links to update the foreign keys to the restored group link db index ids
-		if (ConfigUtils.isTestBuild()) {
-			try {
-				restoreIncomingGroupRequests(jsonObject.getJSONArray(TAG_SAFE_INCOMING_GROUP_REQUESTS));
-			} catch (JSONException e) {
-				logger.info("No incoming group requests to restore from Threema Safe");
-				// no incoming group requests - ignore and continue
-			}
-
-			try {
-				restoreOutgoingGroupRequests(jsonObject.getJSONArray(TAG_SAFE_OUTGOING_GROUP_REQUESTS));
-			} catch (JSONException e) {
-				logger.info("No outgoing group requests to restore from Threema Safe");
-				// no outgoing group request - ignore and continue
-			}
-
-			try {
-				logger.info("safe try parse group links");
-				restoreGroupLinks(jsonObject.getJSONArray(TAG_SAFE_GROUP_LINKS));
-			} catch (JSONException e) {
-				logger.info("No group links to restore from Threema Safe");
-				// no group links - ignore and continue
-			}
-		}
+		// TODO(ANDR-2296): Restore group invites
 	}
 
 	private void restoreUser(String identity, JSONObject user) throws ThreemaException, IOException, JSONException {
@@ -1043,107 +1015,6 @@ public class ThreemaSafeServiceImpl implements ThreemaSafeService {
 		}
 	}
 
-	private void restoreGroupLinks(JSONArray groupLinks) {
-		if (groupLinks == null) return;
-		if (databaseServiceNew == null) return;
-
-		GroupInviteModelFactory groupInviteModelFactory = databaseServiceNew.getGroupInviteModelFactory();
-
-		List<Pair<Integer, Integer>> updateGroupInviteIDForeigntKeysToRequests = new ArrayList<>();
-		for (int i = 0; i < groupLinks.length(); i++) {
-			try {
-				JSONObject groupLink = groupLinks.getJSONObject(i);
-				GroupInviteModel.Builder groupInviteModel = new GroupInviteModel.Builder()
-					.withId(-1)
-					.withInviteName(groupLink.getString(TAG_SAFE_GROUP_LINK_NAME))
-					.withGroupName(groupLink.getString(TAG_SAFE_GROUP_LINK_GROUP_NAME))
-					.withToken(GroupInviteToken.fromHexString(groupLink.getString(TAG_SAFE_GROUP_LINK_TOKEN)))
-					.withManualConfirmation(groupLink.getBoolean(TAG_SAFE_GROUP_LINK_CONFIRMATION))
-					.withGroupApiId(new GroupId(groupLink.getString(TAG_SAFE_GROUP_LINK_GROUP_ID)))
-					.setIsInvalidated(groupLink.getBoolean(TAG_SAFE_GROUP_LINK_DELETED))
-					.setIsDefault(groupLink.getBoolean(TAG_SAFE_GROUP_LINK_DEFAULT));
-
-				long optionalDateLong = groupLink.optLong(TAG_SAFE_GROUP_LINK_EXPIRATION_DATE);
-				if (optionalDateLong != 0) {
-					groupInviteModel.withExpirationDate(new Date(optionalDateLong));
-				}
-
-				Result<GroupInviteModel, Exception> insertResult = groupInviteModelFactory.insert(groupInviteModel.build());
-				if (insertResult.isSuccess()) {
-					updateGroupInviteIDForeigntKeysToRequests.add(new Pair(groupLink.getInt(TAG_SAFE_GROUP_LINK_ID), insertResult.getValue().getId()));
-				}
-			}
-			catch (JSONException | NullPointerException
-				| GroupInviteToken.InvalidGroupInviteTokenException
-				| GroupInviteModel.MissingRequiredArgumentsException e) {
-				// log and continue
-				logger.error("Exception, could not restore group link ", e);
-			}
-		}
-		// update the new db index id references on incoming requests as they are likely not the same on the new device -> make sure incoming requests are restored first!
-		updateGroupInviteForeignKeyForIncomingRequests(updateGroupInviteIDForeigntKeysToRequests);
-	}
-
-	private void restoreIncomingGroupRequests(JSONArray incomingRequests) {
-		if (incomingRequests == null) return;
-		if (databaseServiceNew == null) return;
-
-		IncomingGroupJoinRequestModelFactory incomingGroupJoinRequestModelFactory = databaseServiceNew.getIncomingGroupJoinRequestModelFactory();
-
-		for (int i = 0; i < incomingRequests.length(); i++) {
-			try {
-				JSONObject incomingRequest = incomingRequests.getJSONObject(i);
-				IncomingGroupJoinRequestModel incomingGroupJoinRequestModel = new IncomingGroupJoinRequestModel.Builder()
-					.withGroupInviteId(incomingRequest.getInt(TAG_SAFE_INCOMING_REQUEST_SOURCE_LINK_ID))
-					.withMessage(incomingRequest.getString(TAG_SAFE_INCOMING_REQUEST_MESSAGE))
-					.withRequestingIdentity(incomingRequest.getString(TAG_SAFE_INCOMING_REQUEST_REQUESTER_ID))
-					.withRequestTime(new Date(incomingRequest.getLong(TAG_SAFE_INCOMING_REQUEST_TIME)))
-					.withResponseStatus(IncomingGroupJoinRequestModel.ResponseStatus.fromString(incomingRequest.getString(TAG_SAFE_INCOMING_REQUEST_STATUS)))
-					.build();
-
-				incomingGroupJoinRequestModelFactory.insert(incomingGroupJoinRequestModel);
-
-			}
-			catch (JSONException | NullPointerException e) {
-				// log and continue
-				logger.error("Exception, could not restore incoming group request ", e);
-			}
-		}
-	}
-
-	private void restoreOutgoingGroupRequests(JSONArray outgoingRequests) {
-		if (outgoingRequests == null) return;
-		if (databaseServiceNew == null) return;
-
-		OutgoingGroupJoinRequestModelFactory outgoingGroupJoinRequestModelFactory = databaseServiceNew.getOutgoingGroupJoinRequestModelFactory();
-
-		for (int i = 0; i < outgoingRequests.length(); i++) {
-			try {
-				JSONObject outgoingRequest = outgoingRequests.getJSONObject(i);
-
-				//in case the request was rejected and we can link to a group
-				String optionalGroupApiId = outgoingRequest.getString(TAG_SAFE_OUTGOING_REQUEST_GROUP_API_ID);
-
-				OutgoingGroupJoinRequestModel outgoingGroupJoinRequestModel = new OutgoingGroupJoinRequestModel(
-					-1,
-					outgoingRequest.getString(TAG_SAFE_OUTGOING_REQUEST_SOURCE_LINK_TOKEN),
-					outgoingRequest.getString(TAG_SAFE_OUTGOING_REQUEST_GROUP_NAME),
-					outgoingRequest.getString(TAG_SAFE_OUTGOING_REQUEST_MESSAGE),
-					outgoingRequest.getString(TAG_SAFE_OUTGOING_REQUEST_ADMIN_IDENTITY),
-					new Date(outgoingRequest.getLong(TAG_SAFE_OUTGOING_REQUEST_TIME)),
-					OutgoingGroupJoinRequestModel.Status.fromString(outgoingRequest.getString(TAG_SAFE_OUTGOING_REQUEST_STATUS)),
-					!optionalGroupApiId.equals("0") ? new GroupId(optionalGroupApiId) : null
-				);
-
-				outgoingGroupJoinRequestModelFactory.insert(outgoingGroupJoinRequestModel);
-			}
-			catch (JSONException | NullPointerException e) {
-				// log and continue
-				logger.error("Exception, could not restore outgoing group request ", e);
-			}
-		}
-	}
-
 	private void restoreDistributionlists(JSONArray distributionlists) {
 		if (distributionlists == null) return;
 		if (databaseServiceNew == null) return;
@@ -1260,20 +1131,6 @@ public class ThreemaSafeServiceImpl implements ThreemaSafeService {
 		return null;
 	}
 
-	private void updateGroupInviteForeignKeyForIncomingRequests(List<Pair<Integer, Integer>> updateGroupInviteIDForeigntKeysToRequests) {
-		IncomingGroupJoinRequestModelFactory incomingGroupJoinRequestModelFactory = databaseServiceNew.getIncomingGroupJoinRequestModelFactory();
-		for (Pair updateIdFromTo : updateGroupInviteIDForeigntKeysToRequests) {
-			List<IncomingGroupJoinRequestModel> linkedIncomingRequestForGroupInvite = incomingGroupJoinRequestModelFactory.getByGroupInvite((int) updateIdFromTo.first);
-			for (IncomingGroupJoinRequestModel incomingGroupJoinRequestModel: linkedIncomingRequestForGroupInvite) {
-				ContentValues updateValues = new ContentValues();
-				updateValues.put(IncomingGroupJoinRequestModel.COLUMN_GROUP_INVITE, (int) updateIdFromTo.second);
-				incomingGroupJoinRequestModelFactory.update(
-					incomingGroupJoinRequestModel.getId(),
-					updateValues);
-			}
-		}
-	}
-
 	@Override
 	public void launchForcedPasswordDialog(Activity activity, boolean openHomeActivity) {
 		// ask user for a new password
@@ -1511,108 +1368,6 @@ public class ThreemaSafeServiceImpl implements ThreemaSafeService {
 		return groupsArray;
 	}
 
-	private JSONObject getGroupLink(GroupInviteModel groupInviteModel) throws JSONException {
-		JSONObject groupLink = new JSONObject();
-
-		if (groupInviteModel.getExpirationDate() != null) {
-			groupLink.put(TAG_SAFE_GROUP_LINK_EXPIRATION_DATE, groupInviteModel.getExpirationDate().getTime());
-		} else {
-			groupLink.put(TAG_SAFE_GROUP_LINK_EXPIRATION_DATE, 0);
-		}
-
-		groupLink.put(TAG_SAFE_GROUP_LINK_ID, groupInviteModel.getId());
-		groupLink.put(TAG_SAFE_GROUP_LINK_NAME, groupInviteModel.getInviteName());
-		groupLink.put(TAG_SAFE_GROUP_LINK_GROUP_NAME, groupInviteModel.getOriginalGroupName());
-		groupLink.put(TAG_SAFE_GROUP_LINK_CONFIRMATION, groupInviteModel.getManualConfirmation());
-		groupLink.put(TAG_SAFE_GROUP_LINK_TOKEN, groupInviteModel.getToken());
-		groupLink.put(TAG_SAFE_GROUP_LINK_GROUP_ID, groupInviteModel.getGroupApiId());
-		groupLink.put(TAG_SAFE_GROUP_LINK_DEFAULT, groupInviteModel.isDefault());
-		groupLink.put(TAG_SAFE_GROUP_LINK_DELETED, groupInviteModel.isInvalidated());
-
-		return groupLink;
-	}
-
-	private JSONArray getGroupLinks() throws JSONException {
-		final GroupInviteModelFactory groupInviteModelFactory;
-		try {
-			groupInviteModelFactory = databaseServiceNew.getGroupInviteModelFactory();
-		} catch (Exception e) {
-			logger.error("Exception", e);
-			return null;
-		}
-
-		JSONArray groupLinksArray = new JSONArray();
-		for (final GroupInviteModel groupInviteModel : groupInviteModelFactory.getAll()) {
-			groupLinksArray.put(getGroupLink(groupInviteModel));
-		}
-		return groupLinksArray;
-	}
-
-	private JSONObject getIncomingGroupJoinRequest(IncomingGroupJoinRequestModel incomingGroupJoinRequestModel) throws JSONException {
-		JSONObject incomingGroupRequest = new JSONObject();
-
-		incomingGroupRequest.put(TAG_SAFE_INCOMING_REQUEST_SOURCE_LINK_ID, incomingGroupJoinRequestModel.getGroupInviteId());
-		incomingGroupRequest.put(TAG_SAFE_INCOMING_REQUEST_MESSAGE, incomingGroupJoinRequestModel.getMessage());
-		incomingGroupRequest.put(TAG_SAFE_INCOMING_REQUEST_REQUESTER_ID, incomingGroupJoinRequestModel.getRequestingIdentity());
-		incomingGroupRequest.put(TAG_SAFE_INCOMING_REQUEST_TIME, incomingGroupJoinRequestModel.getRequestTime().getTime());
-		incomingGroupRequest.put(TAG_SAFE_INCOMING_REQUEST_STATUS, incomingGroupJoinRequestModel.getResponseStatus());
-
-		return incomingGroupRequest;
-	}
-
-	private JSONArray getIncomingGroupRequests() throws JSONException {
-		final IncomingGroupJoinRequestModelFactory incomingGroupJoinRequestModelFactory;
-		try {
-			incomingGroupJoinRequestModelFactory = databaseServiceNew.getIncomingGroupJoinRequestModelFactory();
-		} catch (Exception e) {
-			logger.error("Exception", e);
-			return null;
-		}
-
-		JSONArray groupRequestsArray = new JSONArray();
-		for (final IncomingGroupJoinRequestModel incomingGroupJoinRequestModel : incomingGroupJoinRequestModelFactory.getAll()) {
-			groupRequestsArray.put(getIncomingGroupJoinRequest(incomingGroupJoinRequestModel));
-		}
-
-		return groupRequestsArray;
-	}
-
-	private JSONObject getOutgoingGroupRequest(OutgoingGroupJoinRequestModel outgoingGroupJoinRequestModel) throws JSONException {
-		JSONObject outgoingJoinRequest = new JSONObject();
-
-		if (outgoingGroupJoinRequestModel.getGroupApiId() != null) {
-			outgoingJoinRequest.put(TAG_SAFE_OUTGOING_REQUEST_GROUP_API_ID, outgoingGroupJoinRequestModel.getGroupApiId().toString());
-		} else {
-			outgoingJoinRequest.put(TAG_SAFE_OUTGOING_REQUEST_GROUP_API_ID, 0);
-		}
-
-		outgoingJoinRequest.put(TAG_SAFE_OUTGOING_REQUEST_GROUP_NAME, outgoingGroupJoinRequestModel.getGroupName());
-		outgoingJoinRequest.put(TAG_SAFE_OUTGOING_REQUEST_ADMIN_IDENTITY, outgoingGroupJoinRequestModel.getAdminIdentity());
-		outgoingJoinRequest.put(TAG_SAFE_OUTGOING_REQUEST_MESSAGE, outgoingGroupJoinRequestModel.getMessage());
-		outgoingJoinRequest.put(TAG_SAFE_OUTGOING_REQUEST_SOURCE_LINK_TOKEN, outgoingGroupJoinRequestModel.getInviteToken());
-		outgoingJoinRequest.put(TAG_SAFE_OUTGOING_REQUEST_TIME, outgoingGroupJoinRequestModel.getRequestTime().getTime());
-		outgoingJoinRequest.put(TAG_SAFE_OUTGOING_REQUEST_STATUS, outgoingGroupJoinRequestModel.getStatus());
-
-		return outgoingJoinRequest;
-	}
-
-	private JSONArray getOutgoingGroupRequests()  throws JSONException {
-		final OutgoingGroupJoinRequestModelFactory outgoingGroupJoinRequestModelFactory;
-		try {
-			outgoingGroupJoinRequestModelFactory = databaseServiceNew.getOutgoingGroupJoinRequestModelFactory();
-		} catch (Exception e) {
-			logger.error("Exception", e);
-			return null;
-		}
-
-		JSONArray outgoingGroupRequests = new JSONArray();
-		for (final OutgoingGroupJoinRequestModel outgoingGroupJoinRequestModel : outgoingGroupJoinRequestModelFactory.getAll()) {
-			outgoingGroupRequests.put(getOutgoingGroupRequest(outgoingGroupJoinRequestModel));
-		}
-
-		return outgoingGroupRequests;
-	}
-
 	private JSONArray getDistributionlistMembers(String[] distributionlistMembers) {
 		JSONArray membersArray = new JSONArray();
 
@@ -1626,7 +1381,7 @@ public class ThreemaSafeServiceImpl implements ThreemaSafeService {
 	private JSONObject getDistributionlist(DistributionListService distributionListService, DistributionListModel distributionListModel) throws JSONException {
 		JSONObject distributionlist = new JSONObject();
 
-		distributionlist.put(TAG_SAFE_DISTRIBUTIONLIST_ID, Utils.byteArrayToHexString(Utils.longToByteArray(distributionListModel.getId())));
+		distributionlist.put(TAG_SAFE_DISTRIBUTIONLIST_ID, Utils.byteArrayToHexString(Utils.longToByteArrayBigEndian(distributionListModel.getId())));
 		distributionlist.put(TAG_SAFE_DISTRIBUTIONLIST_NAME, distributionListModel.getName());
 		if (distributionListModel.getCreatedAt() != null) {
 			distributionlist.put(TAG_SAFE_DISTRIBUTIONLIST_CREATED_AT, Utils.getUnsignedTimestamp(distributionListModel.getCreatedAt()));
@@ -1851,12 +1606,7 @@ public class ThreemaSafeServiceImpl implements ThreemaSafeService {
 			jsonObject.put(TAG_SAFE_GROUPS, getGroups());
 			jsonObject.put(TAG_SAFE_DISTRIBUTIONLISTS, getDistributionlists());
 			jsonObject.put(TAG_SAFE_SETTINGS, getSettings());
-			if (ConfigUtils.isTestBuild()) {
-				jsonObject.put(TAG_SAFE_GROUP_LINKS, getGroupLinks());
-				jsonObject.put(TAG_SAFE_INCOMING_GROUP_REQUESTS, getIncomingGroupRequests());
-				jsonObject.put(TAG_SAFE_OUTGOING_GROUP_REQUESTS, getOutgoingGroupRequests());
-			}
-
+			// TODO(ANDR-2296): Store group invites in backup
 			return jsonObject.toString(BuildConfig.DEBUG ? 4 : 0);
 
 		} catch (JSONException e) {
diff --git a/app/src/main/java/ch/threema/app/ui/AudioProgressBarView.kt b/app/src/main/java/ch/threema/app/ui/AudioProgressBarView.kt
index 10bf6e8e..3dfc6e00 100644
--- a/app/src/main/java/ch/threema/app/ui/AudioProgressBarView.kt
+++ b/app/src/main/java/ch/threema/app/ui/AudioProgressBarView.kt
@@ -22,10 +22,21 @@
 package ch.threema.app.ui
 
 import android.content.Context
-import android.graphics.*
+import android.content.res.ColorStateList
+import android.graphics.Bitmap
+import android.graphics.Canvas
+import android.graphics.Color
+import android.graphics.Paint
+import android.graphics.PorterDuff
+import android.graphics.PorterDuffColorFilter
+import android.graphics.Rect
+import android.graphics.RectF
+import android.os.Build
 import android.util.AttributeSet
+import android.view.View
 import android.view.ViewGroup
 import android.view.animation.DecelerateInterpolator
+import androidx.core.content.ContextCompat
 import androidx.core.graphics.applyCanvas
 import androidx.transition.ChangeClipBounds
 import androidx.transition.Transition
@@ -33,6 +44,7 @@ import androidx.transition.TransitionManager
 import ch.threema.app.R
 import ch.threema.app.ThreemaApplication
 import ch.threema.app.cache.ThumbnailCache
+import ch.threema.app.utils.ConfigUtils
 import ch.threema.app.utils.RuntimeUtil
 import ch.threema.base.utils.LoggingUtil
 import ch.threema.storage.models.AbstractMessageModel
@@ -47,10 +59,12 @@ class AudioProgressBarView : androidx.appcompat.widget.AppCompatSeekBar, AudioWa
     private var spaceWidth: Int = 3
     private var barMinHeight = 4
     private var halfBarMinHeight = 2F
+    private var state = 0
 
-    var barColor = Color.TRANSPARENT
+    private lateinit var barColor: ColorStateList
     var barColorActivated = Color.TRANSPARENT
     private lateinit var barPaint: Paint
+    private lateinit var barPaintChecked: Paint
     private lateinit var barPaintActivated: Paint
     private var viewWidth: Int = 0
     private var viewHeight: Int = 0
@@ -79,6 +93,7 @@ class AudioProgressBarView : androidx.appcompat.widget.AppCompatSeekBar, AudioWa
     }
 
     fun init(attrs: AttributeSet?) {
+        barColor = ContextCompat.getColorStateList(context, R.color.bubble_text_colorstatelist)!!
         val typedArray = context.theme.obtainStyledAttributes(attrs, R.styleable.AudioProgressBarView, 0, 0)
 
         with(typedArray) {
@@ -87,14 +102,28 @@ class AudioProgressBarView : androidx.appcompat.widget.AppCompatSeekBar, AudioWa
             spaceWidth = getDimensionPixelSize(R.styleable.AudioProgressBarView_spaceWidth, spaceWidth)
             barMinHeight = getDimensionPixelSize(R.styleable.AudioProgressBarView_barMinHeight, barMinHeight)
             halfBarMinHeight = barMinHeight / 2F
-            barColor = getColor(R.styleable.AudioProgressBarView_barColor, barColor)
+            barColor = getColorStateList(R.styleable.AudioProgressBarView_barColor)!!
             barColorActivated = getColor(R.styleable.AudioProgressBarView_barColorActivated, barColorActivated)
             recycle()
         }
 
         barPaint = Paint().apply {
             isAntiAlias = true
-            color = barColor
+            color = if (Build.VERSION.SDK_INT >= 23) {
+                barColor.defaultColor
+            } else {
+                ConfigUtils.getColorFromAttribute(context, R.attr.colorOnBackground)
+            }
+        }
+
+        barPaintChecked = Paint().apply {
+            isAntiAlias = true
+            val checkedColor: Int = if (Build.VERSION.SDK_INT >= 23) {
+                barColor.getColorForState(intArrayOf(android.R.attr.state_activated), barColor.defaultColor)
+            } else {
+                ConfigUtils.getColorFromAttribute(context, R.attr.colorOnPrimary)
+            }
+            colorFilter = PorterDuffColorFilter(checkedColor, PorterDuff.Mode.SRC_IN)
         }
 
         barPaintActivated = Paint().apply {
@@ -105,6 +134,8 @@ class AudioProgressBarView : androidx.appcompat.widget.AppCompatSeekBar, AudioWa
         changeBounds.duration = 800
         changeBounds.interpolator = DecelerateInterpolator()
         changeBounds.addTarget(this)
+
+        visibility = View.INVISIBLE
     }
 
     override fun onLayout(changed: Boolean, left: Int, top: Int, right: Int, bottom: Int) {
@@ -136,18 +167,28 @@ class AudioProgressBarView : androidx.appcompat.widget.AppCompatSeekBar, AudioWa
         }
 
         if (drawBitmap != null) {
-            canvas.apply {
-                save()
-                clipRect((viewWidth * progress / max), 0, viewWidth, viewHeight)
-                drawBitmap(drawBitmap, 0F, 0F, barPaint)
-                restore()
-            }
+            if (state == 1) {
+                canvas.apply {
+                    save()
+                    clipRect(0, 0, viewWidth, viewHeight)
+                    drawBitmap(drawBitmap, 0F, 0F, barPaintChecked)
+                    restore()
+                }
 
-            canvas.apply {
-                save()
-                clipRect(0, 0, (viewWidth * progress / max), viewHeight)
-                drawBitmap(drawBitmap, 0F, 0F, barPaintActivated)
-                restore()
+            } else {
+                canvas.apply {
+                    save()
+                    clipRect((viewWidth * progress / max), 0, viewWidth, viewHeight)
+                    drawBitmap(drawBitmap, 0F, 0F, barPaint)
+                    restore()
+                }
+
+                canvas.apply {
+                    save()
+                    clipRect(0, 0, (viewWidth * progress / max), viewHeight)
+                    drawBitmap(drawBitmap, 0F, 0F, barPaintActivated)
+                    restore()
+                }
             }
         }
         super.onDraw(canvas)
@@ -238,6 +279,16 @@ class AudioProgressBarView : androidx.appcompat.widget.AppCompatSeekBar, AudioWa
         super.onDetachedFromWindow()
     }
 
+
+    override fun onCreateDrawableState(extraSpace: Int): IntArray {
+        val drawableState = super.onCreateDrawableState(extraSpace)
+
+        if (::barPaint.isInitialized) {
+            state = if (drawableState.contains(android.R.attr.state_activated)) 1 else 0
+        }
+        return drawableState
+    }
+
     fun setMessageModel(newMessageModel: AbstractMessageModel?, thumbnailCache: ThumbnailCache<Any>?) {
         if (newMessageModel == null) {
             return
@@ -266,6 +317,7 @@ class AudioProgressBarView : androidx.appcompat.widget.AppCompatSeekBar, AudioWa
             waveBitmap = cachedBitmap
 
             postInvalidate()
+            visibility = VISIBLE
         } else {
             waveFormTask?.let {
                 if (it.getMessageId() == newMessageModel.id) {
diff --git a/app/src/main/java/ch/threema/app/ui/AutoFitTextureView.java b/app/src/main/java/ch/threema/app/ui/AutoFitTextureView.java
deleted file mode 100644
index 0950a8cc..00000000
--- a/app/src/main/java/ch/threema/app/ui/AutoFitTextureView.java
+++ /dev/null
@@ -1,96 +0,0 @@
-/*  _____ _
- * |_   _| |_  _ _ ___ ___ _ __  __ _
- *   | | | ' \| '_/ -_) -_) '  \/ _` |_
- *   |_| |_||_|_| \___\___|_|_|_\__,_(_)
- *
- * Threema for Android
- * Copyright (c) 2019-2023 Threema GmbH
- *
- * This program is free software: you can redistribute it and/or modify
- * it under the terms of the GNU Affero General Public License, version 3,
- * as published by the Free Software Foundation.
- *
- * This program is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
- * GNU Affero General Public License for more details.
- *
- * You should have received a copy of the GNU Affero General Public License
- * along with this program. If not, see <https://www.gnu.org/licenses/>.
- */
-
-/*
- * Copyright 2014 The Android Open Source Project
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *       http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package ch.threema.app.ui;
-
-import android.content.Context;
-import android.util.AttributeSet;
-import android.view.TextureView;
-
-/**
- * A {@link TextureView} that can be adjusted to a specified aspect ratio.
- */
-public class AutoFitTextureView extends TextureView {
-
-	private int mRatioWidth = 0;
-	private int mRatioHeight = 0;
-
-	public AutoFitTextureView(Context context) {
-		this(context, null);
-	}
-
-	public AutoFitTextureView(Context context, AttributeSet attrs) {
-		this(context, attrs, 0);
-	}
-
-	public AutoFitTextureView(Context context, AttributeSet attrs, int defStyle) {
-		super(context, attrs, defStyle);
-	}
-
-	/**
-	 * Sets the aspect ratio for this view. The size of the view will be measured based on the ratio
-	 * calculated from the parameters. Note that the actual sizes of parameters don't matter, that
-	 * is, calling setAspectRatio(2, 3) and setAspectRatio(4, 6) make the same result.
-	 *
-	 * @param width  Relative horizontal size
-	 * @param height Relative vertical size
-	 */
-	public void setAspectRatio(int width, int height) {
-		if (width < 0 || height < 0) {
-			throw new IllegalArgumentException("Size cannot be negative.");
-		}
-		mRatioWidth = width;
-		mRatioHeight = height;
-		requestLayout();
-	}
-
-	@Override
-	protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {
-		super.onMeasure(widthMeasureSpec, heightMeasureSpec);
-		int width = MeasureSpec.getSize(widthMeasureSpec);
-		int height = MeasureSpec.getSize(heightMeasureSpec);
-		if (0 == mRatioWidth || 0 == mRatioHeight) {
-			setMeasuredDimension(width, height);
-		} else {
-			if (width < height * mRatioWidth / mRatioHeight) {
-				setMeasuredDimension(width, width * mRatioHeight / mRatioWidth);
-			} else {
-				setMeasuredDimension(height * mRatioWidth / mRatioHeight, height);
-			}
-		}
-	}
-}
diff --git a/app/src/main/java/ch/threema/app/ui/AvatarEditView.java b/app/src/main/java/ch/threema/app/ui/AvatarEditView.java
index 5426c84a..35941ab0 100644
--- a/app/src/main/java/ch/threema/app/ui/AvatarEditView.java
+++ b/app/src/main/java/ch/threema/app/ui/AvatarEditView.java
@@ -37,6 +37,7 @@ import android.net.Uri;
 import android.os.AsyncTask;
 import android.os.Build;
 import android.provider.MediaStore;
+import android.provider.Settings;
 import android.util.AttributeSet;
 import android.view.LayoutInflater;
 import android.view.MenuInflater;
@@ -44,10 +45,12 @@ import android.view.MenuItem;
 import android.view.View;
 import android.widget.FrameLayout;
 import android.widget.ImageView;
+import android.widget.Toast;
 
 import androidx.annotation.IntDef;
 import androidx.annotation.NonNull;
 import androidx.annotation.Nullable;
+import androidx.annotation.RequiresApi;
 import androidx.annotation.UiThread;
 import androidx.annotation.WorkerThread;
 import androidx.appcompat.app.AppCompatActivity;
@@ -57,6 +60,7 @@ import androidx.appcompat.view.menu.MenuPopupHelper;
 import androidx.core.app.ActivityCompat;
 import androidx.core.content.ContextCompat;
 import androidx.fragment.app.Fragment;
+import androidx.fragment.app.FragmentManager;
 import androidx.lifecycle.DefaultLifecycleObserver;
 import androidx.lifecycle.LifecycleOwner;
 import androidx.lifecycle.ViewModelProvider;
@@ -76,6 +80,7 @@ import java.util.concurrent.Executors;
 import ch.threema.app.R;
 import ch.threema.app.ThreemaApplication;
 import ch.threema.app.activities.CropImageActivity;
+import ch.threema.app.dialogs.GenericAlertDialog;
 import ch.threema.app.glide.AvatarOptions;
 import ch.threema.app.listeners.ContactListener;
 import ch.threema.app.managers.ListenerManager;
@@ -101,6 +106,7 @@ public class AvatarEditView extends FrameLayout implements DefaultLifecycleObser
 	private static final int REQUEST_CODE_CAMERA_PERMISSION = 43321;
 	private static final int REQUEST_CODE_CAMERA = 43322;
 	private static final int REQUEST_CODE_CROP = 43323;
+	private static final String DIALOG_TAG_SAMSUNG_FIX = "samsung_fix";
 	private ContactService contactService;
 	private GroupService groupService;
 	private FileService fileService;
@@ -381,7 +387,7 @@ public class AvatarEditView extends FrameLayout implements DefaultLifecycleObser
 		MenuBuilder menuBuilder = new MenuBuilder(getContext());
 		new MenuInflater(getContext()).inflate(R.menu.view_avatar_edit, menuBuilder);
 
-		ConfigUtils.themeMenu(menuBuilder, ConfigUtils.getColorFromAttribute(getContext(), R.attr.textColorSecondary));
+		ConfigUtils.tintMenu(menuBuilder, ConfigUtils.getColorFromAttribute(getContext(), R.attr.colorOnSurface));
 
 		if (!hasAvatar()) {
 			menuBuilder.removeItem(R.id.menu_remove_picture);
@@ -410,7 +416,7 @@ public class AvatarEditView extends FrameLayout implements DefaultLifecycleObser
 			}
 		});
 
-		Context wrapper = new ContextThemeWrapper(getContext(), ConfigUtils.getAppTheme(getContext()) == ConfigUtils.THEME_DARK ? R.style.AppBaseTheme_Dark : R.style.AppBaseTheme);
+		Context wrapper = new ContextThemeWrapper(getContext(), R.style.AppBaseTheme);
 		MenuPopupHelper optionsMenu = new MenuPopupHelper(wrapper, menuBuilder, avatarEditOverlay);
 		optionsMenu.setForceShowIcon(true);
 		optionsMenu.show();
@@ -428,8 +434,8 @@ public class AvatarEditView extends FrameLayout implements DefaultLifecycleObser
 
 			@Override
 			protected void onPostExecute(Bitmap bitmap) {
-				ImagePopup detailPopup = new ImagePopup(getContext(), parent, R.layout.popup_image_nomargin);
-				detailPopup.show(AvatarEditView.this, bitmap, null);
+				ImagePopup detailPopup = new ImagePopup(getContext(), parent);
+				detailPopup.show(AvatarEditView.this, bitmap);
 			}
 		}.execute();
 
@@ -497,7 +503,7 @@ public class AvatarEditView extends FrameLayout implements DefaultLifecycleObser
 
 	private void openCamera() {
 		try {
-			avatarData.setCameraFile(fileService.createTempFile(".camera", ".jpg", !ConfigUtils.useContentUris()));
+			avatarData.setCameraFile(fileService.createTempFile(".camera", ".jpg", false));
 			FileUtil.getCameraFile(getActivity(), getFragment(), avatarData.getCameraFile(), REQUEST_CODE_CAMERA, fileService, true);
 		} catch (Exception e) {
 			logger.error("Exception", e);
@@ -548,7 +554,7 @@ public class AvatarEditView extends FrameLayout implements DefaultLifecycleObser
 					// return from image picker
 					if (intent != null && intent.getData() != null) {
 						try {
-							avatarData.setCameraFile(fileService.createTempFile(".camera", ".jpg", !ConfigUtils.useContentUris()));
+							avatarData.setCameraFile(fileService.createTempFile(".camera", ".jpg", false));
 							try (InputStream is = getActivity().getContentResolver().openInputStream(intent.getData());
 							    FileOutputStream fos = new FileOutputStream(avatarData.getCameraFile())) {
 								if (is != null) {
@@ -556,6 +562,10 @@ public class AvatarEditView extends FrameLayout implements DefaultLifecycleObser
 								} else {
 									throw new Exception("Unable to open input stream");
 								}
+							} catch (SecurityException e) {
+								logger.error("Unable to open file selected in picker", e);
+								startSamsungPermissionFixFlow();
+								break;
 							}
 							doCrop(avatarData.getCameraFile());
 						} catch (Exception e) {
@@ -619,6 +629,46 @@ public class AvatarEditView extends FrameLayout implements DefaultLifecycleObser
 		}
 	}
 
+	/**
+	 * Sams*ng forgot to enable the "all files access" permission for the com.android.externalstorage content provider
+	 * This flow guides users to the system setting allowing them to enable the permission
+	 * https://issuetracker.google.com/issues/258270138
+	 */
+	private void startSamsungPermissionFixFlow() {
+		if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.R) {
+			FragmentManager fragmentManager;
+			if (getFragment() != null) {
+				fragmentManager = getFragment().getParentFragmentManager();
+			} else {
+				fragmentManager = getActivity().getSupportFragmentManager();
+			}
+			GenericAlertDialog dialog = GenericAlertDialog.newInstance(
+				R.string.prefs_workarounds,
+				getContext().getString(R.string.samsung_permission_problem_explain, getContext().getString(R.string.app_name)),
+				R.string.label_continue,
+				0);
+			dialog.setCallback((tag, data) -> continueSamsungPermissionFixFlow());
+			dialog.show(fragmentManager, DIALOG_TAG_SAMSUNG_FIX);
+		} else {
+			LongToast.makeText(getContext(), R.string.permission_storage_required, Toast.LENGTH_LONG);
+		}
+	}
+
+	@RequiresApi(api = Build.VERSION_CODES.R)
+	private void continueSamsungPermissionFixFlow() {
+		Intent intent = new Intent(Settings.ACTION_MANAGE_APP_ALL_FILES_ACCESS_PERMISSION);
+		intent.setData(Uri.parse("package:com.android.externalstorage"));
+		try {
+			if (getFragment() != null) {
+				getFragment().startActivity(intent);
+			} else {
+				getActivity().startActivity(intent);
+			}
+		} catch (Exception e) {
+			logger.error("Unable to start all files accept preference");
+		}
+	}
+
 	@WorkerThread
 	private @Nullable Bitmap getCurrentAvatarBitmap(boolean hires) {
 		if (this.avatarData.getContactModel() != null) {
@@ -653,7 +703,7 @@ public class AvatarEditView extends FrameLayout implements DefaultLifecycleObser
 			this.avatarImage.invalidate();
 		} else {
 			if (this.avatarData.getGroupModel() == null && this.avatarData.getContactModel() == null) {
-				this.avatarImage.setColorFilter(ConfigUtils.getColorFromAttribute(getContext(), R.attr.textColorSecondary), PorterDuff.Mode.SRC_IN);
+				this.avatarImage.setColorFilter(ConfigUtils.getColorFromAttribute(getContext(), R.attr.colorOnSurface), PorterDuff.Mode.SRC_IN);
 			}
 		}
 	}
diff --git a/app/src/main/java/ch/threema/app/ui/ComposeEditText.java b/app/src/main/java/ch/threema/app/ui/ComposeEditText.java
index 0d622f6f..a816a95f 100644
--- a/app/src/main/java/ch/threema/app/ui/ComposeEditText.java
+++ b/app/src/main/java/ch/threema/app/ui/ComposeEditText.java
@@ -35,12 +35,13 @@ import android.view.MotionEvent;
 import android.view.View;
 import android.view.inputmethod.EditorInfo;
 
+import androidx.annotation.NonNull;
+import androidx.annotation.Nullable;
+
 import org.slf4j.Logger;
 
 import java.util.regex.Pattern;
 
-import androidx.annotation.NonNull;
-import androidx.annotation.Nullable;
 import ch.threema.app.R;
 import ch.threema.app.ThreemaApplication;
 import ch.threema.app.activities.SendMediaActivity;
@@ -254,13 +255,13 @@ public class ComposeEditText extends EmojiEditText implements MentionSelectorPop
 	 * Dismiss the mention popup (if currently shown)
 	 */
 	public void dismissMentionPopup() {
-		if (this.mentionPopup != null) {
+		if (mentionPopup != null) {
 			try {
-				this.mentionPopup.dismiss();
+				mentionPopup.dismiss();
 			} catch(IllegalArgumentException ignored){
 				// whatever
 			} finally{
-				this.mentionPopup = null;
+				mentionPopup = null;
 			}
 		}
 	}
diff --git a/app/src/main/java/ch/threema/app/ui/ControllerView.java b/app/src/main/java/ch/threema/app/ui/ControllerView.java
index 09554e91..486829bc 100644
--- a/app/src/main/java/ch/threema/app/ui/ControllerView.java
+++ b/app/src/main/java/ch/threema/app/ui/ControllerView.java
@@ -23,31 +23,33 @@ package ch.threema.app.ui;
 
 import android.content.Context;
 import android.graphics.Bitmap;
-import android.graphics.Color;
+import android.graphics.PorterDuff;
 import android.graphics.drawable.BitmapDrawable;
 import android.util.AttributeSet;
 import android.view.LayoutInflater;
-import android.view.View;
-import android.widget.FrameLayout;
-import android.widget.ProgressBar;
+import android.widget.ImageView;
 
+import com.google.android.material.card.MaterialCardView;
 import com.google.android.material.progressindicator.CircularProgressIndicator;
+import com.google.android.material.shape.ShapeAppearanceModel;
 
 import org.slf4j.Logger;
 
+import androidx.annotation.ColorInt;
 import androidx.annotation.DrawableRes;
-import androidx.annotation.NonNull;
 import androidx.annotation.UiThread;
 import androidx.appcompat.widget.AppCompatImageView;
+
 import ch.threema.app.R;
+import ch.threema.app.utils.ConfigUtils;
 import ch.threema.base.utils.LoggingUtil;
 
-public class ControllerView extends FrameLayout {
+public class ControllerView extends MaterialCardView {
 	private static final Logger logger = LoggingUtil.getThreemaLogger("ControllerView");
 
-	private ProgressBar progressBarIndeterminate;
-	private CircularProgressIndicator progressBarDeterminate;
+	private CircularProgressIndicator progressBarIndeterminate, progressBarDeterminate;
 	private AppCompatImageView icon;
+	private @ColorInt int foregroundColor;
 	private int status, progressMax = 100;
 
 	public final static int STATUS_NONE = 0;
@@ -57,11 +59,8 @@ public class ControllerView extends FrameLayout {
 	public final static int STATUS_PLAYING = 4;
 	public final static int STATUS_READY_TO_RETRY = 5;
 	public final static int STATUS_PROGRESSING_NO_CANCEL = 6;
-	public final static int STATUS_BROKEN = 7;
 	public final static int STATUS_TRANSCODING = 8;
 
-	private OnVisibilityChangedListener visibilityChangedListener;
-
 	public ControllerView(Context context) {
 		super(context);
 		init(context);
@@ -81,6 +80,10 @@ public class ControllerView extends FrameLayout {
 		LayoutInflater inflater = (LayoutInflater) context
 				.getSystemService(Context.LAYOUT_INFLATER_SERVICE);
 		inflater.inflate(R.layout.conversation_list_item_controller_view, this);
+
+		this.setShapeAppearanceModel(ShapeAppearanceModel.builder(context, 0, R.style.ShapeAppearance_Material3_Corner_Medium).build());
+		this.setStrokeWidth(0);
+		this.foregroundColor = ConfigUtils.getColorFromAttribute(context, R.attr.colorOnBackground);
 	}
 
 	@Override
@@ -94,19 +97,6 @@ public class ControllerView extends FrameLayout {
 		setBackgroundImage(null);
 	}
 
-	@Override
-	protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {
-		super.onMeasure(widthMeasureSpec, heightMeasureSpec);
-
-		int padding = getMeasuredWidth() / 6;
-
-		icon.setPadding(padding, padding, padding, padding);
-/*
-		int size = getResources().getDimensionPixelSize(R.dimen.avatar_size_small);
-		setMeasuredDimension(size, size);
-*/
-	}
-
 	private void reset() {
 		if (getVisibility() != VISIBLE) {
 			setVisibility(VISIBLE);
@@ -125,7 +115,6 @@ public class ControllerView extends FrameLayout {
 	public void setNeutral() {
 		logger.debug("setNeutral");
 		reset();
-		icon.setVisibility(INVISIBLE);
 		status = STATUS_NONE;
 	}
 
@@ -145,16 +134,6 @@ public class ControllerView extends FrameLayout {
 		}
 	}
 
-	@UiThread
-	public void setBroken() {
-		logger.debug("setBroken");
-		if (status != STATUS_BROKEN) {
-			setImageResource(R.drawable.ic_close);
-			setContentDescription(getContext().getString(R.string.play));
-			status = STATUS_READY_TO_PLAY;
-		}
-	}
-
 	@UiThread
 	public void setPause() {
 		logger.debug("setPause");
@@ -222,14 +201,14 @@ public class ControllerView extends FrameLayout {
 
 	public void setRetry() {
 		logger.debug("setRetry");
-		setImageResource(R.drawable.ic_refresh_white_36dp);
+		setImageResource(R.drawable.outline_refresh_24);
 		setContentDescription(getContext().getString(R.string.retry));
 		status = STATUS_READY_TO_RETRY;
 	}
 
 	public void setReadyToDownload() {
 		logger.debug("setReadyToDownload");
-		setImageResource(R.drawable.ic_file_download_white_36dp);
+		setImageResource(R.drawable.outline_file_download_24);
 		setContentDescription(getContext().getString(R.string.download));
 		status = STATUS_READY_TO_DOWNLOAD;
 	}
@@ -237,42 +216,21 @@ public class ControllerView extends FrameLayout {
 	public void setImageResource(@DrawableRes int resource) {
 		logger.debug("setImageResource");
 		reset();
+		icon.setColorFilter(foregroundColor, PorterDuff.Mode.SRC_IN);
+		icon.setScaleType(ImageView.ScaleType.CENTER);
 		icon.setImageResource(resource);
-		icon.setColorFilter(Color.WHITE);
-		icon.requestLayout();
 	}
 
 	public void setBackgroundImage(Bitmap bitmap) {
 		logger.debug("setBackgroundImage");
-		if (bitmap == null) {
-			setBackgroundResource(R.drawable.circle_status_icon_color);
-		} else {
-			setBackground(new BitmapDrawable(getResources(), bitmap));
+		if (bitmap != null) {
+			icon.clearColorFilter();
+			icon.setScaleType(ImageView.ScaleType.CENTER_CROP);
+			icon.setImageDrawable(new BitmapDrawable(getResources(), bitmap));
 		}
 	}
 
 	public int getStatus() {
 		return status;
 	}
-
-	@Override
-	public void setVisibility(int visibility) {
-		super.setVisibility(visibility);
-	}
-
-	protected void onVisibilityChanged(@NonNull View view, int visibility) {
-		super.onVisibilityChanged(view, visibility);
-
-		if (visibilityChangedListener != null) {
-			visibilityChangedListener.visibilityChanged(visibility);
-		}
-	}
-
-	public void setVisibilityListener(OnVisibilityChangedListener listener) {
-		this.visibilityChangedListener = listener;
-	}
-
-	public interface OnVisibilityChangedListener {
-		void visibilityChanged(int visibility);
-	}
 }
diff --git a/app/src/main/java/ch/threema/app/ui/CountBoxView.java b/app/src/main/java/ch/threema/app/ui/CountBoxView.java
deleted file mode 100644
index 84695f18..00000000
--- a/app/src/main/java/ch/threema/app/ui/CountBoxView.java
+++ /dev/null
@@ -1,104 +0,0 @@
-/*  _____ _
- * |_   _| |_  _ _ ___ ___ _ __  __ _
- *   | | | ' \| '_/ -_) -_) '  \/ _` |_
- *   |_| |_||_|_| \___\___|_|_|_\__,_(_)
- *
- * Threema for Android
- * Copyright (c) 2014-2023 Threema GmbH
- *
- * This program is free software: you can redistribute it and/or modify
- * it under the terms of the GNU Affero General Public License, version 3,
- * as published by the Free Software Foundation.
- *
- * This program is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
- * GNU Affero General Public License for more details.
- *
- * You should have received a copy of the GNU Affero General Public License
- * along with this program. If not, see <https://www.gnu.org/licenses/>.
- */
-
-package ch.threema.app.ui;
-
-import android.content.Context;
-import android.content.res.TypedArray;
-import android.graphics.Typeface;
-import android.text.TextUtils;
-import android.util.AttributeSet;
-import android.util.TypedValue;
-
-import ch.threema.app.R;
-
-public class CountBoxView extends androidx.appcompat.widget.AppCompatTextView {
-
-	public CountBoxView(Context context) {
-		super(context);
-		init(context, null);
-	}
-
-	public CountBoxView(Context context, AttributeSet attrs) {
-		super(context, attrs);
-		init(context, attrs);
-	}
-
-	public CountBoxView(Context context, AttributeSet attrs, int defStyle) {
-		super(context, attrs, defStyle);
-		init(context, attrs);
-	}
-
-	private void init(Context context, final AttributeSet attrs) {
-
-		int paddingPx = context.getResources().getDimensionPixelSize(R.dimen.count_box_padding);
-		float textSize = 0;
-		int backgroundRes = R.drawable.count_box_background;
-
-		if (attrs != null) {
-			TypedArray a = context.obtainStyledAttributes(attrs, R.styleable.CountBoxView);
-
-			if (a != null) {
-				final int N = a.getIndexCount();
-				for (int i = 0; i < N; ++i) {
-					int attr = a.getIndex(i);
-					switch (attr) {
-						case R.styleable.CountBoxView_textSizeOverride:
-							textSize = a.getDimensionPixelSize(R.styleable.CountBoxView_textSizeOverride, 0);
-							break;
-						case R.styleable.CountBoxView_backgroundOverride:
-						 	backgroundRes = a.getResourceId(R.styleable.CountBoxView_backgroundOverride, R.drawable.count_box_background);
-							break;
-						case R.styleable.CountBoxView_paddingOverride:
-							paddingPx = a.getDimensionPixelSize(R.styleable.CountBoxView_paddingOverride, paddingPx);
-							break;
-						default:
-							break;
-					}
-				}
-				a.recycle();
-			}
-		}
-
-		this.setPadding(paddingPx, 0, paddingPx, 0);
-		this.setSingleLine(true);
-		this.setEllipsize(TextUtils.TruncateAt.MARQUEE);
-		if(!this.isInEditMode()) {
-			if (textSize > 0) {
-				this.setTextSize(TypedValue.COMPLEX_UNIT_PX, textSize);
-			} else {
-				this.setTextAppearance(context, android.R.style.TextAppearance_Small);
-			}
-		}
-		this.setTypeface(Typeface.DEFAULT_BOLD);
-		this.setTextColor(getResources().getColor(android.R.color.white));
-		this.setBackgroundResource(backgroundRes);
-	}
-
-	@Override
-	protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {
-		super.onMeasure(widthMeasureSpec, heightMeasureSpec);
-
-		if (getMeasuredWidth() < getMeasuredHeight()) {
-			setMeasuredDimension(getMeasuredHeight(), getMeasuredHeight());
-		}
-	}
-}
diff --git a/app/src/main/java/ch/threema/app/ui/DirectoryDataSource.java b/app/src/main/java/ch/threema/app/ui/DirectoryDataSource.java
index 73d663de..9d20e86c 100644
--- a/app/src/main/java/ch/threema/app/ui/DirectoryDataSource.java
+++ b/app/src/main/java/ch/threema/app/ui/DirectoryDataSource.java
@@ -25,13 +25,14 @@ import android.annotation.SuppressLint;
 import android.os.AsyncTask;
 import android.widget.Toast;
 
+import androidx.annotation.NonNull;
+import androidx.paging.PageKeyedDataSource;
+
 import org.slf4j.Logger;
 
 import java.util.ArrayList;
 import java.util.List;
 
-import androidx.annotation.NonNull;
-import androidx.paging.PageKeyedDataSource;
 import ch.threema.app.ThreemaApplication;
 import ch.threema.app.managers.ServiceManager;
 import ch.threema.app.services.PreferenceService;
@@ -196,6 +197,9 @@ public class DirectoryDataSource extends PageKeyedDataSource<WorkDirectory, Work
 				if (workDirectory != null) {
 					logger.debug("Fetch results {}", workDirectory.workContacts);
 					callback.onResult(workDirectory.workContacts, workDirectory, workDirectory);
+				} else {
+					logger.debug("Empty fetch result");
+					callback.onResult(new ArrayList<>(), null, null);
 				}
 			}
 		}.execute();
diff --git a/app/src/main/java/ch/threema/app/ui/EmptyProgressView.java b/app/src/main/java/ch/threema/app/ui/EmptyProgressView.java
deleted file mode 100644
index 715759c3..00000000
--- a/app/src/main/java/ch/threema/app/ui/EmptyProgressView.java
+++ /dev/null
@@ -1,62 +0,0 @@
-/*  _____ _
- * |_   _| |_  _ _ ___ ___ _ __  __ _
- *   | | | ' \| '_/ -_) -_) '  \/ _` |_
- *   |_| |_||_|_| \___\___|_|_|_\__,_(_)
- *
- * Threema for Android
- * Copyright (c) 2014-2023 Threema GmbH
- *
- * This program is free software: you can redistribute it and/or modify
- * it under the terms of the GNU Affero General Public License, version 3,
- * as published by the Free Software Foundation.
- *
- * This program is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
- * GNU Affero General Public License for more details.
- *
- * You should have received a copy of the GNU Affero General Public License
- * along with this program. If not, see <https://www.gnu.org/licenses/>.
- */
-
-package ch.threema.app.ui;
-
-import android.content.Context;
-import android.util.AttributeSet;
-import android.util.TypedValue;
-import android.view.Gravity;
-import android.view.LayoutInflater;
-import android.view.View;
-import android.view.ViewGroup;
-import android.widget.LinearLayout;
-import android.widget.ListView;
-
-import ch.threema.app.R;
-
-public class EmptyProgressView extends LinearLayout {
-	public EmptyProgressView(Context context) {
-		this(context, null, 0);
-	}
-
-	public EmptyProgressView(Context context, AttributeSet attrs) {
-		this(context, attrs, 0);
-	}
-
-	public EmptyProgressView(Context context, int parentOffset) {
-		this(context, null, parentOffset);
-	}
-
-	public EmptyProgressView(Context context, AttributeSet attrs, int parentOffset) {
-		super(context, attrs);
-
-		setOrientation(LinearLayout.VERTICAL);
-		setGravity(Gravity.CENTER);
-		int paddingPx = (int) TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP, 10, context.getResources().getDisplayMetrics());
-		setPadding(paddingPx, parentOffset, paddingPx, 0);
-		setLayoutParams(new ListView.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT,
-				ViewGroup.LayoutParams.MATCH_PARENT));
-
-		LayoutInflater.from(context).inflate(R.layout.view_empty_progress, this, true);
-		setVisibility(View.GONE);
-	}
-}
diff --git a/app/src/main/java/ch/threema/app/ui/EmptyView.java b/app/src/main/java/ch/threema/app/ui/EmptyView.java
index 489ef069..f9539763 100644
--- a/app/src/main/java/ch/threema/app/ui/EmptyView.java
+++ b/app/src/main/java/ch/threema/app/ui/EmptyView.java
@@ -34,6 +34,7 @@ import android.widget.TextView;
 
 import androidx.annotation.ColorInt;
 import androidx.annotation.ColorRes;
+
 import ch.threema.app.R;
 
 public class EmptyView extends LinearLayout {
@@ -56,7 +57,7 @@ public class EmptyView extends LinearLayout {
 
 		setOrientation(LinearLayout.VERTICAL);
 		setGravity(Gravity.CENTER);
-		int paddingPx = (int) TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP, 10, context.getResources().getDisplayMetrics());
+		int paddingPx = (int) TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP, 16, context.getResources().getDisplayMetrics());
 		setPadding(paddingPx, parentOffset, paddingPx, 0);
 		setLayoutParams(new ListView.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT,
 				ViewGroup.LayoutParams.MATCH_PARENT));
diff --git a/app/src/main/java/ch/threema/app/ui/FastScrollGridView.java b/app/src/main/java/ch/threema/app/ui/FastScrollGridView.java
deleted file mode 100644
index 9535e8b5..00000000
--- a/app/src/main/java/ch/threema/app/ui/FastScrollGridView.java
+++ /dev/null
@@ -1,79 +0,0 @@
-/*  _____ _
- * |_   _| |_  _ _ ___ ___ _ __  __ _
- *   | | | ' \| '_/ -_) -_) '  \/ _` |_
- *   |_| |_||_|_| \___\___|_|_|_\__,_(_)
- *
- * Threema for Android
- * Copyright (c) 2013-2023 Threema GmbH
- *
- * This program is free software: you can redistribute it and/or modify
- * it under the terms of the GNU Affero General Public License, version 3,
- * as published by the Free Software Foundation.
- *
- * This program is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
- * GNU Affero General Public License for more details.
- *
- * You should have received a copy of the GNU Affero General Public License
- * along with this program. If not, see <https://www.gnu.org/licenses/>.
- */
-
-package ch.threema.app.ui;
-
-import android.content.Context;
-import android.os.Handler;
-import android.util.AttributeSet;
-import android.widget.AbsListView;
-import android.widget.GridView;
-
-import androidx.appcompat.view.ContextThemeWrapper;
-import ch.threema.app.R;
-import ch.threema.app.utils.RuntimeUtil;
-
-/**
- * This class fixes two bugs in the Android framework
- * - android:fastScrollStyle attribute ignored for GridViews
- * - android:fastScrollAlwaysVisible="false" never ever showing fastscroll
- */
-
-public class FastScrollGridView extends GridView implements AbsListView.OnScrollListener {
-	private ScrollListener scrollListener;
-	private int lastFirstVisibleItem = -1;
-	private final Handler fastScrollRemoveHandler = new Handler();
-	private final Runnable fastScrollRemoveTask = () -> RuntimeUtil.runOnUiThread(() -> setFastScrollAlwaysVisible(false));
-
-	public FastScrollGridView(Context context, AttributeSet attrs) {
-		super(new ContextThemeWrapper(context, R.style.Threema_MediaGallery_FastScroll), attrs);
-		setOnScrollListener(this);
-	}
-
-	@Override
-	public void onScrollStateChanged(AbsListView view, int scrollState) {
-		if (scrollState == SCROLL_STATE_IDLE) {
-			fastScrollRemoveHandler.removeCallbacks(fastScrollRemoveTask);
-			fastScrollRemoveHandler.postDelayed(fastScrollRemoveTask, 1000);
-		} else if (scrollState == SCROLL_STATE_TOUCH_SCROLL) {
-			fastScrollRemoveHandler.removeCallbacks(fastScrollRemoveTask);
-			setFastScrollAlwaysVisible(true);
-		}
-	}
-
-	@Override
-	public void onScroll(AbsListView view, int firstVisibleItem, int visibleItemCount, int totalItemCount) {
-		if (firstVisibleItem != this.lastFirstVisibleItem) {
-			if (this.scrollListener != null) {
-				this.scrollListener.onScroll(firstVisibleItem);
-			}
-			this.lastFirstVisibleItem = firstVisibleItem;
-		}
-	}
-
-	public void setScrollListener(ScrollListener scrollListener) {
-		this.scrollListener = scrollListener;
-	}
-
-	public interface ScrollListener {
-		void onScroll(int firstVisibleItem);
-	}
-}
diff --git a/app/src/main/java/ch/threema/app/ui/GridRecyclerView.java b/app/src/main/java/ch/threema/app/ui/GridRecyclerView.java
deleted file mode 100644
index de906463..00000000
--- a/app/src/main/java/ch/threema/app/ui/GridRecyclerView.java
+++ /dev/null
@@ -1,78 +0,0 @@
-/*  _____ _
- * |_   _| |_  _ _ ___ ___ _ __  __ _
- *   | | | ' \| '_/ -_) -_) '  \/ _` |_
- *   |_| |_||_|_| \___\___|_|_|_\__,_(_)
- *
- * Threema for Android
- * Copyright (c) 2020-2023 Threema GmbH
- *
- * This program is free software: you can redistribute it and/or modify
- * it under the terms of the GNU Affero General Public License, version 3,
- * as published by the Free Software Foundation.
- *
- * This program is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
- * GNU Affero General Public License for more details.
- *
- * You should have received a copy of the GNU Affero General Public License
- * along with this program. If not, see <https://www.gnu.org/licenses/>.
- */
-
-package ch.threema.app.ui;
-
-import android.content.Context;
-import android.util.AttributeSet;
-import android.view.View;
-import android.view.ViewGroup;
-import android.view.animation.GridLayoutAnimationController;
-
-import androidx.recyclerview.widget.GridLayoutManager;
-import androidx.recyclerview.widget.RecyclerView;
-
-public class GridRecyclerView extends RecyclerView {
-
-	public GridRecyclerView(Context context) { super(context); }
-
-	public GridRecyclerView(Context context, AttributeSet attrs) { super(context, attrs); }
-
-	public GridRecyclerView(Context context, AttributeSet attrs, int defStyle) { super(context, attrs, defStyle); }
-
-	@Override
-	protected void attachLayoutAnimationParameters(View child, ViewGroup.LayoutParams params,
-	                                               int index, int count) {
-		final LayoutManager layoutManager = getLayoutManager();
-		if (getAdapter() != null && layoutManager instanceof GridLayoutManager){
-
-			GridLayoutAnimationController.AnimationParameters animationParams =
-				(GridLayoutAnimationController.AnimationParameters) params.layoutAnimationParameters;
-
-			if (animationParams == null) {
-				// If there are no animation parameters, create new once and attach them to
-				// the LayoutParams.
-				animationParams = new GridLayoutAnimationController.AnimationParameters();
-				params.layoutAnimationParameters = animationParams;
-			}
-
-			// Next we are updating the parameters
-
-			// Set the number of items in the RecyclerView and the index of this item
-			animationParams.count = count;
-			animationParams.index = index;
-
-			// Calculate the number of columns and rows in the grid
-			final int columns = ((GridLayoutManager) layoutManager).getSpanCount();
-			animationParams.columnsCount = columns;
-			animationParams.rowsCount = count / columns;
-
-			// Calculate the column/row position in the grid
-			final int invertedIndex = count - 1 - index;
-			animationParams.column = columns - 1 - (invertedIndex % columns);
-			animationParams.row = animationParams.rowsCount - 1 - invertedIndex / columns;
-
-		} else {
-			// Proceed as normal if using another type of LayoutManager
-			super.attachLayoutAnimationParameters(child, params, index, count);
-		}
-	}
-}
diff --git a/app/src/main/java/ch/threema/app/ui/IdentityPopup.java b/app/src/main/java/ch/threema/app/ui/IdentityPopup.java
index 9dde905b..dd233954 100644
--- a/app/src/main/java/ch/threema/app/ui/IdentityPopup.java
+++ b/app/src/main/java/ch/threema/app/ui/IdentityPopup.java
@@ -22,6 +22,8 @@
 package ch.threema.app.ui;
 
 import android.app.Activity;
+import android.content.ClipData;
+import android.content.ClipboardManager;
 import android.content.Context;
 import android.content.Intent;
 import android.graphics.Bitmap;
@@ -35,13 +37,15 @@ import android.widget.FrameLayout;
 import android.widget.ImageView;
 import android.widget.PopupWindow;
 import android.widget.TextView;
+import android.widget.Toast;
 
-import com.google.android.material.chip.Chip;
+import androidx.constraintlayout.widget.Group;
+
+import com.google.android.material.button.MaterialButton;
+import com.google.android.material.materialswitch.MaterialSwitch;
 
 import java.lang.ref.WeakReference;
 
-import androidx.appcompat.widget.SwitchCompat;
-import androidx.constraintlayout.widget.Group;
 import ch.threema.app.R;
 import ch.threema.app.ThreemaApplication;
 import ch.threema.app.activities.AddContactActivity;
@@ -67,7 +71,7 @@ public class IdentityPopup extends DimmingPopupWindow {
 	private WeakReference<Activity> activityRef = new WeakReference<>(null);
 	private ImageView qrCodeView;
 	private QRCodeService qrCodeService;
-	private SwitchCompat webEnableView;
+	private MaterialSwitch webEnableView;
 	private SessionService sessionService;
 	private int animationCenterX, animationCenterY;
 	private ProfileButtonListener profileButtonListener;
@@ -111,7 +115,7 @@ public class IdentityPopup extends DimmingPopupWindow {
 		this.webEnableView = popupLayout.findViewById(R.id.web_enable);
 		popupLayout.findViewById(R.id.web_label).setOnClickListener(v -> {
 			Intent intent = new Intent(context, SessionsActivity.class);
-			AnimationUtil.startActivity(activityRef.get(), v, intent);
+			activityRef.get().startActivity(intent);
 			dismiss();
 		});
 
@@ -123,6 +127,15 @@ public class IdentityPopup extends DimmingPopupWindow {
 
 		textView.setText(userService.getIdentity());
 		textView.setContentDescription(context.getString(R.string.my_id) + " " + userService.getIdentity());
+		textView.setOnLongClickListener(v -> {
+			ClipboardManager clipboard = (ClipboardManager) context.getSystemService(Context.CLIPBOARD_SERVICE);
+			ClipData clip = ClipData.newPlainText(null, userService.getIdentity());
+			clipboard.setPrimaryClip(clip);
+
+			Toast.makeText(context, R.string.contact_details_id_copied, Toast.LENGTH_SHORT).show();
+
+			return true;
+		});
 
 		setContentView(popupLayout);
 		setInputMethodMode(PopupWindow.INPUT_METHOD_NOT_NEEDED);
@@ -136,10 +149,10 @@ public class IdentityPopup extends DimmingPopupWindow {
 
 		popupLayout.setOnClickListener(v -> dismiss());
 
-		Chip scanButton = popupLayout.findViewById(R.id.scan_button);
+		MaterialButton scanButton = popupLayout.findViewById(R.id.scan_button);
 		scanButton.setOnClickListener(v -> scanQR());
 
-		Chip profileButton = popupLayout.findViewById(R.id.profile_button);
+		MaterialButton profileButton = popupLayout.findViewById(R.id.profile_button);
 		profileButton.setOnClickListener(v -> {
 			dismiss();
 			this.profileButtonListener.onClicked();
@@ -150,7 +163,7 @@ public class IdentityPopup extends DimmingPopupWindow {
 		}
 
 		if (webControls != null && webEnableView != null) {
-			if (AppRestrictionUtil.isWebDisabled(context) || ConfigUtils.isBlackBerry()) {
+			if (AppRestrictionUtil.isWebDisabled(context)) {
 				// Webclient is disabled, hide UI elements
 				webEnableView.setEnabled(false);
 				webControls.setVisibility(View.GONE);
@@ -169,7 +182,6 @@ public class IdentityPopup extends DimmingPopupWindow {
 			intent.putExtra(AddContactActivity.EXTRA_ADD_BY_QR, true);
 			if (activityRef.get() != null) {
 				activityRef.get().startActivity(intent);
-				activityRef.get().overridePendingTransition(R.anim.fast_fade_in, R.anim.fast_fade_out);
 			}
 		}
 	}
@@ -189,7 +201,7 @@ public class IdentityPopup extends DimmingPopupWindow {
 		this.profileButtonListener = profileButtonListener;
 
 		int offsetY = activity.getResources().getDimensionPixelSize(R.dimen.navigation_icon_size) / 2;
-		int offsetX = activity.getResources().getDimensionPixelSize(R.dimen.identity_popup_arrow_margin_left) + (activity.getResources().getDimensionPixelSize(R.dimen.identity_popup_arrow_width) / 2);
+		int offsetX = activity.getResources().getDimensionPixelSize(R.dimen.identity_popup_arrow_inset_left) + (activity.getResources().getDimensionPixelSize(R.dimen.identity_popup_arrow_width) / 2);
 
 		animationCenterX = offsetX;
 		animationCenterY = 0;
@@ -204,7 +216,7 @@ public class IdentityPopup extends DimmingPopupWindow {
 		bitmapDrawable.setFilterBitmap(false);
 
 		this.qrCodeView.setImageDrawable(bitmapDrawable);
-		if (ConfigUtils.getAppTheme(context) == ConfigUtils.THEME_DARK) {
+		if (ConfigUtils.isTheDarkSide(context)) {
 			ConfigUtils.invertColors(this.qrCodeView);
 		}
 
diff --git a/app/src/main/java/ch/threema/app/ui/ImagePopup.java b/app/src/main/java/ch/threema/app/ui/ImagePopup.java
index 2f40a9be..10a7c2dc 100644
--- a/app/src/main/java/ch/threema/app/ui/ImagePopup.java
+++ b/app/src/main/java/ch/threema/app/ui/ImagePopup.java
@@ -23,13 +23,16 @@ package ch.threema.app.ui;
 
 import android.content.Context;
 import android.graphics.Bitmap;
-import android.graphics.Matrix;
 import android.graphics.drawable.BitmapDrawable;
 import android.view.Gravity;
 import android.view.LayoutInflater;
 import android.view.View;
-import android.view.ViewGroup;
 import android.view.ViewTreeObserver;
+import android.view.animation.AlphaAnimation;
+import android.view.animation.Animation;
+import android.view.animation.AnimationSet;
+import android.view.animation.DecelerateInterpolator;
+import android.view.animation.ScaleAnimation;
 import android.widget.ImageView;
 import android.widget.LinearLayout;
 import android.widget.PopupWindow;
@@ -43,59 +46,26 @@ import ch.threema.app.R;
 import ch.threema.app.utils.AnimationUtil;
 
 public class ImagePopup extends DimmingPopupWindow {
-
 	private ImageView imageView;
-	private TextView filenameTextView, dateTextView;
 	private View topLayout;
 	private View parentView;
-
 	final int[] location = new int[2];
 
-
-	public ImagePopup(Context context, View parentView, int screenWidth, int screenHeight) {
-		super(context);
-		init(context, parentView, screenWidth, screenHeight, 0, 0);
-	}
-
-	public ImagePopup(Context context, View parentView, int screenWidth, int screenHeight, int innerBorder) {
+	public ImagePopup(Context context, @NonNull View parentView) {
 		super(context);
-		init(context, parentView, screenWidth, screenHeight, innerBorder, 0);
+		init(context, parentView, parentView.getWidth(), parentView.getHeight());
 	}
 
-	public ImagePopup(Context context, @NonNull View parentView, @LayoutRes int layout) {
-		super(context);
-		init(context, parentView, parentView.getWidth(), parentView.getHeight(), 0, layout);
-	}
-
-	private void init(Context context, View parentView, int screenWidth, int screenHeight, int innerBorder, @LayoutRes int layout) {
+	private void init(Context context, View parentView, int screenWidth, int screenHeight) {
 		this.parentView = parentView;
 
-		LayoutInflater layoutInflater = (LayoutInflater) context.getSystemService(Context.LAYOUT_INFLATER_SERVICE);
-		if (layout == 0) {
-			topLayout = layoutInflater.inflate(R.layout.popup_image, null, true);
-		} else {
-			topLayout = layoutInflater.inflate(layout, null, true);
-		}
+		topLayout = LayoutInflater.from(context).inflate(R.layout.popup_image_nomargin, null, true);
 
 		this.imageView = topLayout.findViewById(R.id.image_view);
-		this.filenameTextView = topLayout.findViewById(R.id.filename_view);
-		this.dateTextView = topLayout.findViewById(R.id.date_view);
 
 		int borderSize = context.getResources().getDimensionPixelSize(R.dimen.image_popup_screen_border_width);
 		setContentView(topLayout);
 
-		if (innerBorder != 0) {
-			ViewGroup.MarginLayoutParams marginParams = (ViewGroup.MarginLayoutParams) imageView.getLayoutParams();
-			marginParams.setMargins(innerBorder, innerBorder, innerBorder, innerBorder);
-			imageView.setLayoutParams(marginParams);
-
-			marginParams = (ViewGroup.MarginLayoutParams) filenameTextView.getLayoutParams();
-			marginParams.setMargins(innerBorder, innerBorder -
-					context.getResources().getDimensionPixelSize(R.dimen.image_popup_text_size) -
-					context.getResources().getDimensionPixelSize(R.dimen.image_popup_text_margin_bottom), 0, 0);
-			filenameTextView.setLayoutParams(marginParams);
-		}
-
 		if (screenHeight > screenWidth) {
 			// portrait
 			setWidth(screenWidth - borderSize);
@@ -107,65 +77,39 @@ public class ImagePopup extends DimmingPopupWindow {
 		}
 		setBackgroundDrawable(new BitmapDrawable());
 		setAnimationStyle(0);
-		if (!(this.topLayout instanceof MaterialCardView)) {
-			setElevation(10);
-		}
+		setElevation(0);
 		setInputMethodMode(PopupWindow.INPUT_METHOD_NOT_NEEDED);
 	}
 
-	public void show(final View view, Bitmap bitmap, String title) {
+	public void show(@NonNull final View sourceView, @NonNull Bitmap bitmap) {
 		this.imageView.setImageBitmap(bitmap);
-		show(view, title, true);
-	}
-
-	public void show(final View view, BitmapDrawable bitmapDrawable, String title, boolean animated) {
-		this.imageView.setImageDrawable(bitmapDrawable);
-		show(view, title, animated);
-	}
-
-	private void show(final View view, String title, final boolean animated) {
-		if (this.filenameTextView != null) {
-			this.filenameTextView.setText(title != null ? title : "");
-		}
-		if (this.dateTextView != null) {
-			this.dateTextView.setText("");
-		}
 
 		showAtLocation(parentView, Gravity.CENTER, 0, 0);
 		dimBackground();
-		if (animated) {
-			getContentView().getViewTreeObserver().addOnGlobalLayoutListener(new ViewTreeObserver.OnGlobalLayoutListener() {
+		getContentView().getViewTreeObserver().addOnGlobalLayoutListener(new ViewTreeObserver.OnGlobalLayoutListener() {
 			@Override
 			public void onGlobalLayout() {
-				getContentView().getViewTreeObserver().removeGlobalOnLayoutListener(this);
+				getContentView().getViewTreeObserver().removeOnGlobalLayoutListener(this);
+				AnimationUtil.getViewCenter(sourceView, getContentView(), location);
 
-					AnimationUtil.getViewCenter(view, getContentView(), location);
-					AnimationUtil.popupAnimateIn(getContentView());
-				}
-			});
-		}
+				AnimationSet animation = new AnimationSet(true);
+				Animation scale = new ScaleAnimation(0.0f, 1.0f, 0.0f, 1.0f, Animation.ABSOLUTE, location[0], Animation.ABSOLUTE, location[1]);
+				Animation fade = new AlphaAnimation(0.0f, 1.0f);
 
-		topLayout.setOnClickListener(new View.OnClickListener() {
-			@Override
-			public void onClick(View v) {
-				dismiss();
+				animation.addAnimation(scale);
+				animation.addAnimation(fade);
+				animation.setInterpolator(new DecelerateInterpolator());
+				animation.setDuration(150);
+
+				getContentView().startAnimation(animation);
 			}
 		});
+
+		topLayout.setOnClickListener(v -> dismiss());
 	}
 
 	@Override
 	public void dismiss() {
-		AnimationUtil.popupAnimateOut(getContentView(), new Runnable() {
-			@Override
-			public void run() {
-				ImagePopup.super.dismiss();
-			}
-		});
-	}
-
-	private Bitmap rotateBitmap(Bitmap source, float angle) {
-		Matrix matrix = new Matrix();
-		matrix.postRotate(angle);
-		return Bitmap.createBitmap(source, 0, 0, source.getWidth(), source.getHeight(), matrix, true);
+		AnimationUtil.popupAnimateOut(getContentView(), ImagePopup.super::dismiss);
 	}
 }
diff --git a/app/src/main/java/ch/threema/app/ui/LinearLayoutBehavior.java b/app/src/main/java/ch/threema/app/ui/LinearLayoutBehavior.java
index 1e893367..96c19228 100644
--- a/app/src/main/java/ch/threema/app/ui/LinearLayoutBehavior.java
+++ b/app/src/main/java/ch/threema/app/ui/LinearLayoutBehavior.java
@@ -26,11 +26,12 @@ import android.util.AttributeSet;
 import android.view.View;
 import android.widget.LinearLayout;
 
+import androidx.coordinatorlayout.widget.CoordinatorLayout;
+
 import com.google.android.material.snackbar.Snackbar;
 
 import org.slf4j.Logger;
 
-import androidx.coordinatorlayout.widget.CoordinatorLayout;
 import ch.threema.base.utils.LoggingUtil;
 
 public class LinearLayoutBehavior extends CoordinatorLayout.Behavior<LinearLayout> {
@@ -42,26 +43,19 @@ public class LinearLayoutBehavior extends CoordinatorLayout.Behavior<LinearLayou
 
 	@Override
 	public boolean layoutDependsOn(CoordinatorLayout parent, LinearLayout child, View dependency) {
-
 		return dependency instanceof Snackbar.SnackbarLayout;
 	}
 
 	@Override
 	public boolean onDependentViewChanged(CoordinatorLayout parent, LinearLayout child, View dependency) {
-		logger.debug("onDependentViewChanged");
-
 		float translationY = Math.min(0, dependency.getTranslationY() - dependency.getHeight());
 		child.setTranslationY(translationY);
 
-		logger.debug("TranslationY: " + translationY);
-
 		return true;
 	}
 
 	@Override
 	public void onDependentViewRemoved(CoordinatorLayout parent, LinearLayout child, View dependency) {
-		logger.debug("onDependentViewRemoved");
-
 		child.setTranslationY(0);
 	}
 }
diff --git a/app/src/main/java/ch/threema/app/ui/ListViewSwipeListener.java b/app/src/main/java/ch/threema/app/ui/ListViewTouchSwipeListener.java
similarity index 80%
rename from app/src/main/java/ch/threema/app/ui/ListViewSwipeListener.java
rename to app/src/main/java/ch/threema/app/ui/ListViewTouchSwipeListener.java
index 2761071e..dcc08786 100644
--- a/app/src/main/java/ch/threema/app/ui/ListViewSwipeListener.java
+++ b/app/src/main/java/ch/threema/app/ui/ListViewTouchSwipeListener.java
@@ -42,20 +42,19 @@ import android.animation.AnimatorListenerAdapter;
 import android.animation.ObjectAnimator;
 import android.annotation.SuppressLint;
 import android.graphics.Rect;
+import android.os.SystemClock;
 import android.view.MotionEvent;
 import android.view.View;
 import android.view.ViewConfiguration;
-import android.widget.AbsListView;
 import android.widget.ImageView;
 import android.widget.ListView;
 
 import org.slf4j.Logger;
 
 import ch.threema.app.R;
-import ch.threema.app.ThreemaApplication;
 import ch.threema.base.utils.LoggingUtil;
 
-public class ListViewSwipeListener implements View.OnTouchListener {
+public class ListViewTouchSwipeListener implements View.OnTouchListener {
 	private static final Logger logger = LoggingUtil.getThreemaLogger("ListViewSwipeListener");
 
 	// Cached ViewConfiguration and system-wide constant values
@@ -71,43 +70,35 @@ public class ListViewSwipeListener implements View.OnTouchListener {
 	private float mDownX;
 	private float mDownY;
 	private boolean mSwiping;
+	private boolean mHasSwipeStarted = false;
 	private int mSwipingSlop;
 	private int mDownPosition;
 	private View mDownView;
 	private boolean mPaused;
 	private ImageView quoteIcon;
-	private int bubbleInset;
+	private long mOnDownTime;
+	private boolean isRelayDownEvent;
+	private Runnable relayLongClickRunnable;
 
 	public interface DismissCallbacks {
 		boolean canSwipe(int position);
 		void onSwiped(int position);
 	}
 
-	public ListViewSwipeListener(ListView listView, DismissCallbacks callbacks) {
+	public ListViewTouchSwipeListener(ListView listView, DismissCallbacks callbacks) {
 		ViewConfiguration vc = ViewConfiguration.get(listView.getContext());
 		mSlop = vc.getScaledTouchSlop();
 		mAnimationTime = listView.getContext().getResources().getInteger(
 			android.R.integer.config_shortAnimTime);
 		mListView = listView;
 		mCallbacks = callbacks;
-		bubbleInset = ThreemaApplication.getAppContext().getResources().getDimensionPixelSize(R.dimen.chat_bubble_opposite_inset);
 	}
 
 	public void setEnabled(boolean enabled) {
 		mPaused = !enabled;
-	}
-
-	public AbsListView.OnScrollListener makeScrollListener() {
-		return new AbsListView.OnScrollListener() {
-			@Override
-			public void onScrollStateChanged(AbsListView absListView, int scrollState) {
-				setEnabled(scrollState != AbsListView.OnScrollListener.SCROLL_STATE_TOUCH_SCROLL);
-			}
-
-			@Override
-			public void onScroll(AbsListView absListView, int i, int i1, int i2) {
-			}
-		};
+		if (!enabled && mDownView != null) {
+			mDownView.removeCallbacks(relayLongClickRunnable);
+		}
 	}
 
 	@SuppressLint("ClickableViewAccessibility")
@@ -121,6 +112,12 @@ public class ListViewSwipeListener implements View.OnTouchListener {
 			case MotionEvent.ACTION_DOWN: {
 				logger.debug("*** ACTION_DOWN");
 
+				mOnDownTime = SystemClock.uptimeMillis();
+				if (isRelayDownEvent) {
+					isRelayDownEvent = false;
+					return false;
+				}
+
 				if (mPaused) {
 					return false;
 				}
@@ -148,10 +145,8 @@ public class ListViewSwipeListener implements View.OnTouchListener {
 					mDownPosition = mListView.getPositionForView(mDownView);
 					if (!mCallbacks.canSwipe(mDownPosition)) {
 						mDownView = null;
+						return false;
 					} else {
-						/*
-						quoteIcon = mDownView.findViewById(R.id.quote_icon);
-						*/
 						quoteIcon = null;
 
 						View messageBlock = mDownView.findViewById(R.id.message_block);
@@ -160,14 +155,25 @@ public class ListViewSwipeListener implements View.OnTouchListener {
 							mViewWidth = messageBlock.getWidth();
 						}
 					}
+				} else {
+					return false;
 				}
-				return false;
+
+				// delay long click handling
+				relayLongClickRunnable = () -> relayOnDownEvent(view);
+				mDownView.postDelayed(relayLongClickRunnable, 100);
+
+				return true;
 			}
 
 			case MotionEvent.ACTION_CANCEL: {
 				logger.debug("*** ACTION_CANCEL");
 
-				if (mDownView != null && mSwiping) {
+				if (mDownView == null) {
+					break;
+				}
+
+				if (mSwiping) {
 					// cancel
 					mDownView.animate()
 						.translationX(0)
@@ -175,12 +181,10 @@ public class ListViewSwipeListener implements View.OnTouchListener {
 						.setDuration(mAnimationTime)
 						.setListener(null);
 				}
-				mDownX = 0;
-				mDownY = 0;
-				mDownView = null;
-				mDownPosition = ListView.INVALID_POSITION;
-				mSwiping = false;
-				setQuoteIconVisibility(View.GONE);
+
+				mDownView.removeCallbacks(relayLongClickRunnable);
+				resetSwipeStates();
+
 				break;
 			}
 
@@ -208,15 +212,16 @@ public class ListViewSwipeListener implements View.OnTouchListener {
 							.translationX(0)
 							.setDuration(mAnimationTime)
 							.setListener(null);
+
+						if (!mHasSwipeStarted) {
+							// single click
+							mDownView.removeCallbacks(relayLongClickRunnable);
+							relayOnDownEvent(view);
+						}
 					}
+					resetSwipeStates();
 				}
-				mDownX = 0;
-				mDownY = 0;
-				mDownView = null;
-				mDownPosition = ListView.INVALID_POSITION;
-				mSwiping = false;
-				setQuoteIconVisibility(View.GONE);
-				break;
+				return false;
 			}
 
 			case MotionEvent.ACTION_MOVE: {
@@ -252,15 +257,29 @@ public class ListViewSwipeListener implements View.OnTouchListener {
 				}
 
 				if (mSwiping) {
+					mDownView.removeCallbacks(relayLongClickRunnable);
+					mHasSwipeStarted = true;
 					mDownView.setTranslationX(deltaX - mSwipingSlop);
-					return true;
 				}
-				break;
+				return true;
 			}
 		}
 		return false;
 	}
 
+	private void relayOnDownEvent(View view) {
+		isRelayDownEvent = true;
+		view.dispatchTouchEvent(
+			MotionEvent.obtain(
+				mOnDownTime,
+				SystemClock.uptimeMillis(),
+				MotionEvent.ACTION_DOWN,
+				mDownX,
+				mDownY,
+				0)
+		);
+	}
+
 	private void setQuoteIconVisibility(int visibility) {
 		if (quoteIcon != null) {
 			if (quoteIcon.getVisibility() != visibility) {
@@ -273,4 +292,14 @@ public class ListViewSwipeListener implements View.OnTouchListener {
 			}
 		}
 	}
+
+	private void resetSwipeStates() {
+		mDownX = 0;
+		mDownY = 0;
+		mDownView = null;
+		mDownPosition = ListView.INVALID_POSITION;
+		mSwiping = false;
+		mHasSwipeStarted = false;
+		setQuoteIconVisibility(View.GONE);
+	}
 }
diff --git a/app/src/main/java/ch/threema/app/ui/LongToast.kt b/app/src/main/java/ch/threema/app/ui/LongToast.kt
new file mode 100644
index 00000000..b4202a0b
--- /dev/null
+++ b/app/src/main/java/ch/threema/app/ui/LongToast.kt
@@ -0,0 +1,78 @@
+/*  _____ _
+ * |_   _| |_  _ _ ___ ___ _ __  __ _
+ *   | | | ' \| '_/ -_) -_) '  \/ _` |_
+ *   |_| |_||_|_| \___\___|_|_|_\__,_(_)
+ *
+ * Threema for Android
+ * Copyright (c) 2023 Threema GmbH
+ *
+ * This program is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU Affero General Public License, version 3,
+ * as published by the Free Software Foundation.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+ * GNU Affero General Public License for more details.
+ *
+ * You should have received a copy of the GNU Affero General Public License
+ * along with this program. If not, see <https://www.gnu.org/licenses/>.
+ */
+
+package ch.threema.app.ui
+
+import android.annotation.SuppressLint
+import android.app.ActivityManager
+import android.content.Context
+import android.os.Build
+import android.view.LayoutInflater
+import android.view.View
+import android.widget.TextView
+import android.widget.Toast
+import androidx.annotation.StringRes
+import ch.threema.app.R
+
+/**
+ * A version of Toast that allows for more than two lines of text which can be too restrictive depending on the language.
+ * NOTE: If the app is backgrounded, a regular toast (limited to the usual two lines) will be shown instead.
+ * Don't use this from Services - it's useless
+ */
+object LongToast {
+    @SuppressLint("InflateParams")
+    @JvmStatic
+    fun makeText(
+        context: Context?,
+        text: CharSequence?,
+        duration: Int
+    ): Toast {
+        return if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.S && isAppInForeground()) {
+            val longToastView: View = LayoutInflater.from(context).inflate(R.layout.toast_long, null)
+            val longToastTextView = longToastView.findViewById<TextView>(R.id.toast_text)
+            longToastTextView.text = text
+            val longToast = Toast(context)
+            longToast.view = longToastView
+            longToast.duration = duration
+            longToast
+        } else {
+            Toast.makeText(context, text, duration)
+        }
+    }
+
+    @JvmStatic
+    fun makeText(
+        context: Context,
+        @StringRes textRes: Int,
+        duration: Int
+    ): Toast {
+        return makeText(context, context.getString(textRes), duration)
+    }
+
+    private fun isAppInForeground(
+    ) : Boolean {
+        val appProcessInfo = ActivityManager.RunningAppProcessInfo();
+        ActivityManager.getMyMemoryState(appProcessInfo);
+        return appProcessInfo.importance == ActivityManager.RunningAppProcessInfo.IMPORTANCE_FOREGROUND ||
+                appProcessInfo.importance == ActivityManager.RunningAppProcessInfo.IMPORTANCE_VISIBLE
+    }
+}
+
diff --git a/app/src/main/java/ch/threema/app/ui/MarkupTextWatcher.java b/app/src/main/java/ch/threema/app/ui/MarkupTextWatcher.java
index 8fb9f930..9fb029ca 100644
--- a/app/src/main/java/ch/threema/app/ui/MarkupTextWatcher.java
+++ b/app/src/main/java/ch/threema/app/ui/MarkupTextWatcher.java
@@ -36,7 +36,6 @@ import androidx.annotation.ColorInt;
 import ch.threema.app.R;
 import ch.threema.app.emojis.EmojiMarkupUtil;
 import ch.threema.app.emojis.MarkupParser;
-import ch.threema.app.utils.ConfigUtils;
 
 public class MarkupTextWatcher implements TextWatcher {
 	private final EditText editText;
@@ -51,7 +50,7 @@ public class MarkupTextWatcher implements TextWatcher {
 		editText = editor;
 		editText.addTextChangedListener(this);
 
-		markerColor = ConfigUtils.getColorFromAttribute(context, R.attr.markup_marker_color);
+		markerColor = context.getResources().getColor(R.color.markup_marker_color);
 		markupCharPattern = Pattern.compile(MarkupParser.MARKUP_CHAR_PATTERN);
 	}
 
diff --git a/app/src/main/java/ch/threema/app/ui/MediaItem.java b/app/src/main/java/ch/threema/app/ui/MediaItem.java
index 22479e5f..11f4e0e9 100644
--- a/app/src/main/java/ch/threema/app/ui/MediaItem.java
+++ b/app/src/main/java/ch/threema/app/ui/MediaItem.java
@@ -23,9 +23,13 @@ package ch.threema.app.ui;
 
 import static ch.threema.app.services.PreferenceService.ImageScale_DEFAULT;
 import static ch.threema.app.services.PreferenceService.VideoSize_DEFAULT;
+import static ch.threema.app.utils.BitmapUtil.FLIP_HORIZONTAL;
+import static ch.threema.app.utils.BitmapUtil.FLIP_NONE;
+import static ch.threema.app.utils.BitmapUtil.FLIP_VERTICAL;
 
 import android.content.Context;
 import android.content.Intent;
+import android.graphics.Matrix;
 import android.net.Uri;
 import android.os.Parcel;
 import android.os.Parcelable;
@@ -55,13 +59,12 @@ public class MediaItem implements Parcelable {
 	@MediaType private int type;
 	private Uri originalUri; // Uri of original media item before creating a local copy
 	private Uri uri;
-	private int rotation; // Rotation in Degrees
+	private Orientation orientation;
 	private int exifRotation;
 	private long durationMs;
 	private String caption;
 	private long startTimeMs;
 	private long endTimeMs;
-	@BitmapUtil.FlipType private int flip;
 	@BitmapUtil.FlipType private int exifFlip;
 	private String mimeType;
 	@FileData.RenderingType int renderingType;
@@ -89,6 +92,110 @@ public class MediaItem implements Parcelable {
 
 	public static final long TIME_UNDEFINED = Long.MIN_VALUE;
 
+	public static class Orientation {
+		private int rotation;
+		private int flip;
+
+		public static Orientation getMixedOrientation(@NonNull Orientation first, @NonNull Orientation second) {
+			int mixedRotation = first.getRotation() + second.getRotation();
+			int mixedFlip = FLIP_NONE;
+			mixedFlip |= first.isHorizontalFlip() ^ second.isHorizontalFlip() ? FLIP_HORIZONTAL : FLIP_NONE;
+			mixedFlip |= first.isVerticalFlip() ^ second.isVerticalFlip() ? FLIP_VERTICAL : FLIP_NONE;
+			return new Orientation(mixedRotation, mixedFlip);
+		}
+
+		public Orientation() {
+			this(0, FLIP_NONE);
+		}
+
+		public Orientation(int rotation, int flip) {
+			this.rotation = rotation;
+			this.flip = flip;
+		}
+
+		public int getRotation() {
+			return rotation;
+		}
+
+		public void setRotation(int rotation) {
+			this.rotation = rotation;
+			clampRotation();
+		}
+
+		public void rotateBy(int degrees) {
+			this.rotation += degrees;
+			clampRotation();
+		}
+
+		public int getFlip() {
+			return flip;
+		}
+
+		public void setFlip(int flip) {
+			this.flip = flip;
+		}
+
+		public void flip() {
+			int currentFlip = flip;
+			if (getRotation() == 90 || getRotation() == 270) {
+				if ((currentFlip & FLIP_VERTICAL) == FLIP_VERTICAL) {
+					// clear vertical flag
+					currentFlip &= ~FLIP_VERTICAL;
+				} else {
+					currentFlip |= FLIP_VERTICAL;
+				}
+			} else {
+				if ((currentFlip & FLIP_HORIZONTAL) == FLIP_HORIZONTAL) {
+					// clear horizontal flag
+					currentFlip &= ~FLIP_HORIZONTAL;
+				} else {
+					currentFlip |= FLIP_HORIZONTAL;
+				}
+			}
+			flip = currentFlip;
+		}
+
+		public Orientation getInverse() {
+			Orientation inverse = new Orientation(-rotation, FLIP_NONE);
+			if (rotation == 90 || rotation == 270) {
+				inverse.flip |= isVerticalFlip() ? FLIP_HORIZONTAL : FLIP_NONE;
+				inverse.flip |= isHorizontalFlip() ? FLIP_VERTICAL : FLIP_NONE;
+			} else {
+				inverse.flip = flip;
+			}
+			return inverse;
+		}
+
+		/**
+		 * Get the transformation matrix based on rotation and flip.
+		 */
+		@NonNull
+		public Matrix getTransformationMatrix() {
+			Matrix matrix = new Matrix();
+			boolean flipHorizontal = (getFlip() & FLIP_HORIZONTAL) == FLIP_HORIZONTAL;
+			boolean flipVertical = (getFlip() & FLIP_VERTICAL) == FLIP_VERTICAL;
+			matrix.postScale(flipHorizontal ? -1 : 1, flipVertical ? -1 : 1);
+			matrix.postRotate(getRotation());
+			return matrix;
+		}
+
+		public boolean isHorizontalFlip() {
+			return (flip & FLIP_HORIZONTAL) == FLIP_HORIZONTAL;
+		}
+
+		public boolean isVerticalFlip() {
+			return (flip & FLIP_VERTICAL) == FLIP_VERTICAL;
+		}
+
+		private void clampRotation() {
+			rotation %= 360;
+			if (rotation < 0) {
+				rotation += 360;
+			}
+		}
+
+	}
+
 	public static ArrayList<MediaItem> getFromUris(List<Uri> uris, Context context) {
 		return getFromUris(uris, context, false);
 	}
@@ -167,13 +274,12 @@ public class MediaItem implements Parcelable {
 	}
 
 	private void init() {
-		this.rotation = 0;
+		this.orientation = new Orientation();
 		this.exifRotation = 0;
 		this.durationMs = 0;
 		this.caption = null;
 		this.startTimeMs = 0;
 		this.endTimeMs = TIME_UNDEFINED;
-		this.flip = BitmapUtil.FLIP_NONE;
 		this.exifFlip = BitmapUtil.FLIP_NONE;
 		this.mimeType = MimeUtil.MIME_TYPE_DEFAULT;
 		this.renderingType = FileData.RENDERING_MEDIA;
@@ -186,15 +292,16 @@ public class MediaItem implements Parcelable {
 
 
 	public MediaItem(Parcel in) {
+		orientation = new Orientation();
 		type = in.readInt();
 		uri = in.readParcelable(Uri.class.getClassLoader());
-		rotation = in.readInt();
+		orientation.rotation = in.readInt();
 		exifRotation = in.readInt();
 		durationMs = in.readLong();
 		caption = in.readString();
 		startTimeMs = in.readLong();
 		endTimeMs = in.readLong();
-		flip = in.readInt();
+		orientation.flip = in.readInt();
 		exifFlip = in.readInt();
 		mimeType = in.readString();
 		renderingType = in.readInt();
@@ -210,13 +317,13 @@ public class MediaItem implements Parcelable {
 	public void writeToParcel(Parcel dest, int flags) {
 		dest.writeInt(type);
 		dest.writeParcelable(uri, flags);
-		dest.writeInt(rotation);
+		dest.writeInt(orientation.rotation);
 		dest.writeInt(exifRotation);
 		dest.writeLong(durationMs);
 		dest.writeString(caption);
 		dest.writeLong(startTimeMs);
 		dest.writeLong(endTimeMs);
-		dest.writeInt(flip);
+		dest.writeInt(orientation.flip);
 		dest.writeInt(exifFlip);
 		dest.writeString(mimeType);
 		dest.writeInt(renderingType);
@@ -263,11 +370,11 @@ public class MediaItem implements Parcelable {
 	}
 
 	public int getRotation() {
-		return rotation;
+		return orientation.getRotation();
 	}
 
 	public void setRotation(int rotation) {
-		this.rotation = rotation;
+		this.orientation.setRotation(rotation);
 	}
 
 	public int getExifRotation() {
@@ -336,12 +443,20 @@ public class MediaItem implements Parcelable {
 		this.endTimeMs = endTimeMs;
 	}
 
+	public Orientation getOrientation() {
+		return orientation;
+	}
+
 	public int getFlip() {
-		return flip;
+		return orientation.getFlip();
 	}
 
 	public void setFlip(int flip) {
-		this.flip = flip;
+		this.orientation.setFlip(flip);
+	}
+
+	public void flip() {
+		orientation.flip();
 	}
 
 	@BitmapUtil.FlipType
@@ -462,7 +577,7 @@ public class MediaItem implements Parcelable {
 	 */
 	public boolean hasChanges() {
 		if (type == TYPE_IMAGE) {
-			return isEdited() || rotation != 0 || flip != BitmapUtil.FLIP_NONE;
+			return isEdited() || orientation.getRotation() != 0 || orientation.getFlip() != BitmapUtil.FLIP_NONE;
 		} else if (type == TYPE_VIDEO) {
 			return needsTrimming() || muted;
 		} else {
diff --git a/app/src/main/java/ch/threema/app/ui/MentionSelectorPopup.java b/app/src/main/java/ch/threema/app/ui/MentionSelectorPopup.java
index 27c643d4..18a301c5 100644
--- a/app/src/main/java/ch/threema/app/ui/MentionSelectorPopup.java
+++ b/app/src/main/java/ch/threema/app/ui/MentionSelectorPopup.java
@@ -31,9 +31,9 @@ import android.text.TextWatcher;
 import android.view.Gravity;
 import android.view.LayoutInflater;
 import android.view.View;
+import android.view.ViewGroup;
 import android.view.ViewTreeObserver;
 import android.view.WindowManager;
-import android.widget.LinearLayout;
 import android.widget.PopupWindow;
 
 import androidx.annotation.NonNull;
@@ -41,6 +41,8 @@ import androidx.annotation.Nullable;
 import androidx.recyclerview.widget.LinearLayoutManager;
 import androidx.recyclerview.widget.RecyclerView;
 
+import com.google.android.material.card.MaterialCardView;
+
 import java.util.Collections;
 import java.util.List;
 
@@ -158,7 +160,7 @@ public class MentionSelectorPopup extends PopupWindow implements MentionSelector
 		this.allContactModel.setState(ContactModel.State.ACTIVE);
 
 		LayoutInflater layoutInflater = (LayoutInflater) context.getSystemService(Context.LAYOUT_INFLATER_SERVICE);
-		LinearLayout popupLayout = (LinearLayout) layoutInflater.inflate(R.layout.popup_mention_selector, null, false);
+		MaterialCardView popupLayout = (MaterialCardView) layoutInflater.inflate(R.layout.popup_mention_selector, null, false);
 
 		setContentView(popupLayout);
 		setInputMethodMode(PopupWindow.INPUT_METHOD_NOT_NEEDED);
@@ -167,6 +169,8 @@ public class MentionSelectorPopup extends PopupWindow implements MentionSelector
 		setTouchable(true);
 		setOutsideTouchable(false);
 		setBackgroundDrawable(new ColorDrawable(Color.TRANSPARENT));
+		setWindowLayoutMode(ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.WRAP_CONTENT);
+		setHeight(1);
 
 		this.recyclerView = popupLayout.findViewById(R.id.group_members_list);
 
@@ -195,15 +199,14 @@ public class MentionSelectorPopup extends PopupWindow implements MentionSelector
 		int[] coordinates = getPositionCoordinates(activity, boundary != null ? boundary : editText);
 
 		int popupX = 0;
-		int popupY = coordinates[1];
+		int popupY = coordinates[1] + context.getResources().getDimensionPixelSize(R.dimen.compose_bottom_panel_padding_vertical);
 
 		this.editText = editText;
 		editText.setLocked(true);
 		editText.addTextChangedListener(textWatcher);
 		this.filterStart = editText.getSelectionStart();
 
-		this.viewableSpaceHeight = coordinates[2];
-		this.dividersHeight = 2 * context.getResources().getDimensionPixelSize(R.dimen.list_divider_height);
+		this.viewableSpaceHeight = coordinates[2] - context.getResources().getDimensionPixelSize(R.dimen.compose_bottom_panel_padding_vertical);
 
 		this.setWidth(activity.getWindowManager().getDefaultDisplay().getWidth());
 		this.setHeight(this.viewableSpaceHeight);
@@ -226,7 +229,7 @@ public class MentionSelectorPopup extends PopupWindow implements MentionSelector
 	private void updateRecyclerViewDimensions() {
 		int maxHeight = context.getResources().getDimensionPixelSize(R.dimen.group_detail_list_item_size) * this.mentionAdapter.getItemCount();
 
-		this.recyclerView.getLayoutParams().height = Math.min(maxHeight, viewableSpaceHeight - dividersHeight);
+		this.recyclerView.getLayoutParams().height = Math.min(maxHeight, viewableSpaceHeight);
 		this.recyclerView.requestLayout();
 	}
 
diff --git a/app/src/main/java/ch/threema/app/ui/OngoingCallNoticeView.kt b/app/src/main/java/ch/threema/app/ui/OngoingCallNoticeView.kt
index a34b995c..52e7295a 100644
--- a/app/src/main/java/ch/threema/app/ui/OngoingCallNoticeView.kt
+++ b/app/src/main/java/ch/threema/app/ui/OngoingCallNoticeView.kt
@@ -23,8 +23,6 @@ package ch.threema.app.ui
 
 import android.content.Context
 import android.content.Intent
-import android.content.res.ColorStateList
-import android.os.Build
 import android.util.AttributeSet
 import android.view.LayoutInflater
 import android.view.View
@@ -39,13 +37,14 @@ import androidx.appcompat.content.res.AppCompatResources
 import androidx.lifecycle.DefaultLifecycleObserver
 import ch.threema.app.R
 import ch.threema.app.utils.ConfigUtils
+import ch.threema.app.utils.getRunningSince
 import ch.threema.app.voip.activities.CallActivity
 import ch.threema.app.voip.activities.GroupCallActivity
 import ch.threema.app.voip.groupcall.GroupCallDescription
 import ch.threema.app.voip.groupcall.LocalGroupId
 import ch.threema.app.voip.services.VoipCallService
-import com.google.android.material.chip.Chip
 import ch.threema.base.utils.LoggingUtil
+import com.google.android.material.button.MaterialButton
 
 private val logger = LoggingUtil.getThreemaLogger("OngoingCallNoticeView")
 
@@ -58,12 +57,12 @@ enum class OngoingCallNoticeMode {
 class OngoingCallNoticeView : LinearLayout, DefaultLifecycleObserver {
 	private var operationMode: OngoingCallNoticeMode? = null
 	private var groupId: LocalGroupId? = null
-	private lateinit var actionButton: Chip
+	private lateinit var actionButton: MaterialButton
 	private lateinit var callContainer: RelativeLayout
 	private lateinit var chronometer: Chronometer
 	private lateinit var callText: TextView
 	private lateinit var participantsText: TextView
-	private lateinit var callDurationDivider: TextView
+	private lateinit var ongoingCallDivider: View
 
 	constructor(context: Context) : super(context) {
 		init()
@@ -101,7 +100,7 @@ class OngoingCallNoticeView : LinearLayout, DefaultLifecycleObserver {
 		post {
 			val participantsCount = call.callState?.participants?.size ?: 0
 			setupGroupCallActions(call)
-			show(call.getRunningSince(), mode, participantsCount)
+			show(getRunningSince(call, context), mode, participantsCount)
 		}
 	}
 
@@ -117,43 +116,32 @@ class OngoingCallNoticeView : LinearLayout, DefaultLifecycleObserver {
 	}
 
 	@UiThread
-	private fun show(startTime: Long?, mode: OngoingCallNoticeMode, participantCount: Int = 0) {
+	private fun show(startTime: Long, mode: OngoingCallNoticeMode, participantCount: Int = 0) {
 		setOperationMode(mode, participantCount)
-		startTime?.let {
-			chronometer.base = it
-			chronometer.start()
-		}
+		chronometer.visibility = VISIBLE
+		chronometer.base = startTime
+		chronometer.start()
 		visibility = View.VISIBLE
 	}
 
 	private fun setOperationMode(mode: OngoingCallNoticeMode, participantCount: Int) {
 		operationMode = mode
 
-		if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {
-			actionButton.setTextAppearance(R.style.TextAppearance_Chip_ChatNotice)
-		}
-
 		when (mode) {
 			OngoingCallNoticeMode.MODE_VOIP -> {
 				callContainer.isClickable = true
 				callContainer.isFocusable = true
 				actionButton.text = context.getString(R.string.voip_hangup)
-				actionButton.chipBackgroundColor = getDangerousBackgroundColor()
-				actionButton.setTextColor(getDangerousTextColor())
-				actionButton.chipIcon = AppCompatResources.getDrawable(context, R.drawable.ic_call_end_outline)
-				actionButton.chipIconTint = getDangerousTextColor()
+				actionButton.icon = AppCompatResources.getDrawable(context, R.drawable.ic_call_end_outline)
 				callText.setText(R.string.call_ongoing)
 				participantsText.visibility = GONE
-				callDurationDivider.visibility = GONE
+				ongoingCallDivider.visibility = GONE
 			}
 			OngoingCallNoticeMode.MODE_GROUP_CALL_JOINED -> {
 				callContainer.isClickable = false
 				callContainer.isFocusable = false
 				actionButton.text = context.getString(R.string.voip_gc_open_call)
-				actionButton.chipBackgroundColor = getBackgroundColorGroupCall()
-				actionButton.setTextColor(getTextColorGroupCall())
-				actionButton.chipIcon = AppCompatResources.getDrawable(context, R.drawable.ic_group_call)
-				actionButton.chipIconTint = getTextColorGroupCall()
+				actionButton.icon = AppCompatResources.getDrawable(context, R.drawable.ic_group_call)
 				callText.setText(R.string.voip_gc_in_call)
 				setParticipantsText(participantCount)
 			}
@@ -161,10 +149,7 @@ class OngoingCallNoticeView : LinearLayout, DefaultLifecycleObserver {
 				callContainer.isClickable = false
 				callContainer.isFocusable = false
 				actionButton.text = context.getString(R.string.voip_gc_join_call)
-				actionButton.chipBackgroundColor = getBackgroundColorGroupCall()
-				actionButton.setTextColor(getTextColorGroupCall())
-				actionButton.chipIcon = AppCompatResources.getDrawable(context, R.drawable.ic_outline_login_24)
-				actionButton.chipIconTint = getTextColorGroupCall()
+				actionButton.icon = AppCompatResources.getDrawable(context, R.drawable.ic_outline_login_24)
 				callText.setText(R.string.voip_gc_ongoing_call)
 				setParticipantsText(participantCount)
 			}
@@ -178,7 +163,7 @@ class OngoingCallNoticeView : LinearLayout, DefaultLifecycleObserver {
 		callText = findViewById(R.id.call_text)
 		chronometer = findViewById(R.id.call_duration)
 		participantsText = findViewById(R.id.participants_count)
-		callDurationDivider = findViewById(R.id.ongoing_call_divider)
+		ongoingCallDivider = findViewById(R.id.ongoing_call_divider)
 	}
 
 	private fun init() {
@@ -187,25 +172,7 @@ class OngoingCallNoticeView : LinearLayout, DefaultLifecycleObserver {
 		}
 		(context as AppCompatActivity).lifecycle.addObserver(this)
 		val inflater = context.getSystemService(Context.LAYOUT_INFLATER_SERVICE) as LayoutInflater
-		inflater.inflate(R.layout.view_ongoing_call_notice, this)
-	}
-
-	private fun getBackgroundColorGroupCall(): ColorStateList {
-		val backgroundColor = ColorStateList.valueOf(resources.getColor(R.color.group_call_accent))
-		return backgroundColor.withAlpha(0x1a)
-	}
-
-	private fun getTextColorGroupCall(): ColorStateList {
-		return ColorStateList.valueOf(resources.getColor(R.color.group_call_accent))
-	}
-
-	private fun getDangerousTextColor(): ColorStateList {
-		return ColorStateList.valueOf(resources.getColor(R.color.material_red))
-	}
-
-	private fun getDangerousBackgroundColor(): ColorStateList {
-		val backgroundColor = ColorStateList.valueOf(resources.getColor(R.color.material_red))
-		return backgroundColor.withAlpha(0x1a)
+		inflater.inflate(R.layout.notice_ongoing_call, this)
 	}
 
 	private fun voipContainerAction() {
@@ -273,10 +240,10 @@ class OngoingCallNoticeView : LinearLayout, DefaultLifecycleObserver {
 				participantCount
 			)
 			participantsText.visibility = VISIBLE
-			callDurationDivider.visibility = VISIBLE
+			ongoingCallDivider.visibility = VISIBLE
 		} else {
 			participantsText.visibility = GONE
-			callDurationDivider.visibility = GONE
+			ongoingCallDivider.visibility = GONE
 		}
 	}
 }
diff --git a/app/src/main/java/ch/threema/app/ui/OpenBallotNoticeView.java b/app/src/main/java/ch/threema/app/ui/OpenBallotNoticeView.java
index 0b1a6e42..2d5fdd5e 100644
--- a/app/src/main/java/ch/threema/app/ui/OpenBallotNoticeView.java
+++ b/app/src/main/java/ch/threema/app/ui/OpenBallotNoticeView.java
@@ -49,7 +49,6 @@ import androidx.appcompat.view.ContextThemeWrapper;
 import androidx.appcompat.view.menu.MenuBuilder;
 import androidx.appcompat.view.menu.MenuPopupHelper;
 import androidx.constraintlayout.widget.ConstraintLayout;
-import androidx.core.content.ContextCompat;
 import androidx.fragment.app.FragmentManager;
 import androidx.lifecycle.DefaultLifecycleObserver;
 import androidx.lifecycle.LifecycleOwner;
@@ -93,7 +92,7 @@ import ch.threema.storage.models.ballot.BallotModel;
 public class OpenBallotNoticeView extends ConstraintLayout implements DefaultLifecycleObserver {
 	private static final Logger logger = LoggingUtil.getThreemaLogger("OpenBallotNoticeView");
 	private static final int MAX_BALLOTS_SHOWN = 20;
-	private static final int MAX_BALLOT_TITLE_LENGTH = 25;
+	private static final int MAX_BALLOT_TITLE_LENGTH = 20;
 	private ChipGroup chipGroup;
 	private final List<BallotChipHolder> shownBallots = new LinkedList<>();
 	private BallotService ballotService;
@@ -101,8 +100,9 @@ public class OpenBallotNoticeView extends ConstraintLayout implements DefaultLif
 	private PreferenceService preferenceService;
 	private ContactService contactService;
 	private String identity;
-	private MessageReceiver messageReceiver;
+	private MessageReceiver<?> messageReceiver;
 	private int numOpenBallots;
+	private OnCloseClickedListener onCloseClickedListener;
 
 	private final BallotVoteListener ballotVoteListener = new BallotVoteListener() {
 		@Override
@@ -203,7 +203,13 @@ public class OpenBallotNoticeView extends ConstraintLayout implements DefaultLif
 		}
 
 		LayoutInflater inflater = (LayoutInflater) context.getSystemService(Context.LAYOUT_INFLATER_SERVICE);
-		inflater.inflate(R.layout.view_open_ballots, this);
+		inflater.inflate(R.layout.notice_open_ballots, this);
+
+		findViewById(R.id.button_cancel).setOnClickListener(v -> {
+			if (onCloseClickedListener != null) {
+				onCloseClickedListener.onCloseClicked();
+			}
+		});
 
 		identity = userService.getIdentity();
 	}
@@ -251,7 +257,7 @@ public class OpenBallotNoticeView extends ConstraintLayout implements DefaultLif
 				try {
 					return ballotService.getBallots(new BallotService.BallotFilter() {
 						@Override
-						public MessageReceiver getReceiver() {
+						public MessageReceiver<?> getReceiver() {
 							return messageReceiver;
 						}
 
@@ -284,12 +290,6 @@ public class OpenBallotNoticeView extends ConstraintLayout implements DefaultLif
 					return;
 				}
 
-				// If there aren't any chips, then add the first chip that explains that this view
-				// shows open ballots
-				if (shownBallots.isEmpty()) {
-					chipGroup.addView(createFirstChip());
-				}
-
 				int numBallotsShown = 0;
 				for (int i = 0; i < ballotModels.size(); i++) {
 					if (shownBallots.size() > i) {
@@ -325,7 +325,7 @@ public class OpenBallotNoticeView extends ConstraintLayout implements DefaultLif
 		}.execute();
 	}
 
-	public void setMessageReceiver(@NonNull MessageReceiver messageReceiver) {
+	public void setMessageReceiver(@NonNull MessageReceiver<?> messageReceiver) {
 		this.messageReceiver = messageReceiver;
 		updateBallotDisplay();
 	}
@@ -353,33 +353,13 @@ public class OpenBallotNoticeView extends ConstraintLayout implements DefaultLif
 		ListenerManager.ballotListeners.remove(this.ballotListener);
 	}
 
-	@NonNull
-	private Chip createFirstChip() {
-		Chip firstChip = new Chip(getContext());
-		ChipDrawable firstChipDrawable = ChipDrawable.createFromAttributes(getContext(),
-			null,
-			0,
-			R.style.Chip_ChatNotice_Overview_Intro);
-		firstChip.setChipDrawable(firstChipDrawable);
-		if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {
-			firstChip.setTextAppearance(R.style.TextAppearance_Chip_ChatNotice);
-		} else {
-			firstChip.setTextSize(14);
-		}
-		firstChip.setTextColor(ConfigUtils.getColorFromAttribute(getContext(), R.attr.text_color_openNotice));
-		firstChip.setChipBackgroundColor(ColorStateList.valueOf(ConfigUtils.getColorFromAttribute(getContext(), R.attr.background_openNotice)));
-		firstChip.setText(R.string.ballot_open);
-		firstChip.setClickable(false);
-		return firstChip;
-	}
-
 	@SuppressLint("RestrictedApi")
 	public void onChipClick(@NonNull View v, @Nullable BallotModel ballotModel, boolean isVoteComplete) {
 		if (ballotModel != null) {
 			MenuBuilder menuBuilder = new MenuBuilder(getContext());
 			new MenuInflater(getContext()).inflate(R.menu.chip_open_ballots, menuBuilder);
 
-			ConfigUtils.themeMenu(menuBuilder, ConfigUtils.getColorFromAttribute(getContext(), R.attr.textColorSecondary));
+			ConfigUtils.tintMenu(menuBuilder, ConfigUtils.getColorFromAttribute(getContext(), R.attr.colorOnSurface));
 
 			if (BallotUtil.canViewMatrix(ballotModel, identity)) {
 				menuBuilder.findItem(R.id.menu_ballot_results).setTitle(ballotModel.getState() == BallotModel.State.CLOSED ? R.string.ballot_result_final : R.string.ballot_result_intermediate);
@@ -397,12 +377,12 @@ public class OpenBallotNoticeView extends ConstraintLayout implements DefaultLif
 				} else {
 					highlightItem = menuBuilder.findItem(R.id.menu_ballot_vote);
 				}
-				highlightColor = ConfigUtils.getColorFromAttribute(getContext(), R.attr.colorAccent);
+				highlightColor = ConfigUtils.getColorFromAttribute(getContext(), R.attr.colorPrimary);
 			}
 			SpannableString s = new SpannableString(highlightItem.getTitle());
 			s.setSpan(new ForegroundColorSpan(highlightColor), 0, s.length(), 0);
 			highlightItem.setTitle(s);
-			ConfigUtils.themeMenuItem(highlightItem, highlightColor);
+			ConfigUtils.tintMenuItem(highlightItem, highlightColor);
 
 			menuBuilder.setCallback(new MenuBuilder.Callback() {
 				@Override
@@ -434,7 +414,7 @@ public class OpenBallotNoticeView extends ConstraintLayout implements DefaultLif
 				menuBuilder.removeItem(R.id.menu_ballot_close);
 			}
 
-			Context wrapper = new ContextThemeWrapper(getContext(), ConfigUtils.getAppTheme(getContext()) == ConfigUtils.THEME_DARK ? R.style.AppBaseTheme_Dark : R.style.AppBaseTheme);
+			Context wrapper = new ContextThemeWrapper(getContext(), R.style.AppBaseTheme);
 			MenuPopupHelper optionsMenu = new MenuPopupHelper(wrapper, menuBuilder, v);
 			optionsMenu.setForceShowIcon(true);
 			optionsMenu.show();
@@ -487,6 +467,10 @@ public class OpenBallotNoticeView extends ConstraintLayout implements DefaultLif
 		return (AppCompatActivity) getContext();
 	}
 
+	public void setOnCloseClickedListener(OnCloseClickedListener listener) {
+		onCloseClickedListener = listener;
+	}
+
 	private class BallotChipHolder {
 		@NonNull
 		private BallotModel ballot;
@@ -535,11 +519,11 @@ public class OpenBallotNoticeView extends ConstraintLayout implements DefaultLif
 			ChipDrawable chipDrawable = ChipDrawable.createFromAttributes(getContext(),
 				null,
 				0,
-				R.style.Chip_ChatNotice_Overview);
+				R.style.Threema_Chip_ChatNotice_Overview);
 			ballotChip.setChipDrawable(chipDrawable);
 
 			if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {
-				ballotChip.setTextAppearance(R.style.TextAppearance_Chip_ChatNotice);
+				ballotChip.setTextAppearance(R.style.Threema_TextAppearance_Chip_ChatNotice);
 			} else {
 				ballotChip.setTextSize(14);
 			}
@@ -644,21 +628,11 @@ public class OpenBallotNoticeView extends ConstraintLayout implements DefaultLif
 
 			if (isMine && voters == participants) {
 				// all votes are in
-				if (ConfigUtils.getAppTheme(getContext()) == ConfigUtils.THEME_DARK) {
-					foregroundColor = ColorStateList.valueOf(ConfigUtils.getColorFromAttribute(getContext(), R.attr.textColorSecondary));
-					backgroundColor = ColorStateList.valueOf(ContextCompat.getColor(getContext(), R.color.material_red));
-				} else {
-					foregroundColor = ColorStateList.valueOf(ContextCompat.getColor(getContext(), R.color.material_red));
-					backgroundColor = foregroundColor.withAlpha(getResources().getInteger(R.integer.chip_alpha));
-				}
+				foregroundColor = ColorStateList.valueOf(ConfigUtils.getColorFromAttribute(getContext(), R.attr.colorOnSecondaryContainer));
+				backgroundColor = ColorStateList.valueOf(ConfigUtils.getColorFromAttribute(getContext(), R.attr.colorSecondaryContainer));
 			} else {
-				if (ConfigUtils.getAppTheme(getContext()) == ConfigUtils.THEME_DARK) {
-					foregroundColor = ColorStateList.valueOf(ConfigUtils.getColorFromAttribute(getContext(), R.attr.textColorPrimary));
-					backgroundColor = ColorStateList.valueOf(ConfigUtils.getColorFromAttribute(getContext(), R.attr.colorAccent));
-				} else {
-					foregroundColor = ColorStateList.valueOf(ConfigUtils.getColorFromAttribute(getContext(), R.attr.colorAccent));
-					backgroundColor = foregroundColor.withAlpha(getResources().getInteger(R.integer.chip_alpha));
-				}
+				foregroundColor = ColorStateList.valueOf(ConfigUtils.getColorFromAttribute(getContext(), R.attr.colorOnPrimaryContainer));
+				backgroundColor = ColorStateList.valueOf(ConfigUtils.getColorFromAttribute(getContext(), R.attr.colorPrimaryContainer));
 			}
 
 			chip.setTextColor(foregroundColor);
@@ -666,4 +640,7 @@ public class OpenBallotNoticeView extends ConstraintLayout implements DefaultLif
 		}
 	}
 
+	public interface OnCloseClickedListener {
+		void onCloseClicked();
+	}
 }
diff --git a/app/src/main/java/ch/threema/app/ui/PaintView.java b/app/src/main/java/ch/threema/app/ui/PaintView.java
index 90714e84..764936a4 100644
--- a/app/src/main/java/ch/threema/app/ui/PaintView.java
+++ b/app/src/main/java/ch/threema/app/ui/PaintView.java
@@ -31,12 +31,12 @@ import android.util.AttributeSet;
 import android.view.MotionEvent;
 import android.view.View;
 
+import androidx.core.view.ViewCompat;
+
 import java.util.ArrayList;
 import java.util.Collections;
 import java.util.List;
 
-import androidx.core.view.ViewCompat;
-
 public class PaintView extends View {
 	private float mX, mY;
 	private int currentColor, currentStrokeWidth, currentWidth, currentHeight;
@@ -45,8 +45,8 @@ public class PaintView extends View {
 	private TouchListener onTouchListener;
 	private final List<Rect> drawingRect = Collections.singletonList(new Rect());
 
-	private ArrayList<Path> paths = new ArrayList<>();
-	private ArrayList<Paint> paints = new ArrayList<>();
+	private final ArrayList<Path> paths = new ArrayList<>();
+	private final ArrayList<Paint> paints = new ArrayList<>();
 
 	public PaintView(Context context) {
 		super(context);
@@ -243,6 +243,16 @@ public class PaintView extends View {
 		}
 	}
 
+	public void flip() {
+		Matrix flipMatrix = new Matrix();
+		flipMatrix.setScale(-1, 1);
+		flipMatrix.postTranslate(getWidth(), 0);
+
+		for (Path path : paths) {
+			path.transform(flipMatrix);
+		}
+	}
+
 	public void setColor(int color) {
 		currentColor = color;
 	}
diff --git a/app/src/main/java/ch/threema/app/ui/PermissionIconView.kt b/app/src/main/java/ch/threema/app/ui/PermissionIconView.kt
new file mode 100644
index 00000000..8193bcb6
--- /dev/null
+++ b/app/src/main/java/ch/threema/app/ui/PermissionIconView.kt
@@ -0,0 +1,166 @@
+/*  _____ _
+ * |_   _| |_  _ _ ___ ___ _ __  __ _
+ *   | | | ' \| '_/ -_) -_) '  \/ _` |_
+ *   |_| |_||_|_| \___\___|_|_|_\__,_(_)
+ *
+ * Threema for Android
+ * Copyright (c) 2023 Threema GmbH
+ *
+ * This program is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU Affero General Public License, version 3,
+ * as published by the Free Software Foundation.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+ * GNU Affero General Public License for more details.
+ *
+ * You should have received a copy of the GNU Affero General Public License
+ * along with this program. If not, see <https://www.gnu.org/licenses/>.
+ */
+
+package ch.threema.app.ui
+
+import android.content.Context
+import android.graphics.Rect
+import android.util.AttributeSet
+import android.view.LayoutInflater
+import android.view.View
+import android.view.ViewTreeObserver.OnGlobalLayoutListener
+import android.widget.FrameLayout
+import android.widget.ImageView
+import androidx.annotation.DrawableRes
+import androidx.core.content.ContextCompat
+import ch.threema.app.R
+import com.google.android.material.badge.BadgeDrawable
+
+class PermissionIconView : FrameLayout {
+
+    /**
+     * This indicates the state
+     */
+    enum class PermissionIconState {
+        /**
+         * The permission has been granted. In this state, there is no further action required by
+         * the user for this permission.
+         */
+        GRANTED,
+
+        /**
+         * The permission is optional and the user decided to deny it. There is no further action
+         * required by the user.
+         */
+        OPTIONAL_AND_DENIED,
+
+        /**
+         * The permission is either not granted but required, or the user did not yet decide to
+         * grant or deny the optional permission. For optional permissions we need an action from
+         * the user to grant or deny the permission. For required permission we need the user to
+         * grant the permission.
+         */
+        REQUIRED_OR_UNDECIDED,
+    }
+
+    private val iconView: ImageView
+    private val badge: BadgeDrawable
+
+    constructor(context: Context) : super(context)
+
+    constructor(context: Context, attrs: AttributeSet?) : super(context, attrs)
+
+    constructor(context: Context, attrs: AttributeSet?, defStyleAttr: Int) : super(
+        context,
+        attrs,
+        defStyleAttr
+    )
+
+    init {
+        val inflater = context.getSystemService(Context.LAYOUT_INFLATER_SERVICE) as LayoutInflater
+        inflater.inflate(R.layout.view_permission_icon, this)
+
+        iconView = findViewById(R.id.permission_icon_view)
+
+        badge = initializeBadge()
+    }
+
+    /**
+     * Set the view highlighted. Only one view should be highlighted at the same time. The
+     * highlighted view is shown larger than the other views.
+     */
+    fun setHighlighted(isHighlighted: Boolean, animate: Boolean) {
+        val duration = if (animate) { resources.getInteger(android.R.integer.config_mediumAnimTime).toLong() } else { 0L }
+        if (isHighlighted) {
+            animate()
+                .scaleX(1.5f)
+                .scaleY(1.5f)
+                .alpha(1f)
+                .setDuration(duration)
+                .start()
+        } else {
+            animate()
+                .scaleX(1f)
+                .scaleY(1f)
+                .alpha(0.5f)
+                .setDuration(duration)
+                .start()
+        }
+    }
+
+    /**
+     * Update the badge depending on the state.
+     */
+    fun updateBadge(state: PermissionIconState) {
+        badge.backgroundColor = ContextCompat.getColor(
+            context,
+            when (state) {
+                PermissionIconState.GRANTED -> R.color.material_green
+                PermissionIconState.OPTIONAL_AND_DENIED -> R.color.material_orange
+                PermissionIconState.REQUIRED_OR_UNDECIDED -> R.color.material_red
+            }
+        )
+    }
+
+    /**
+     * Set the permission icon.
+     */
+    fun setIcon(@DrawableRes icon: Int) {
+        this.iconView.setImageResource(icon)
+    }
+
+    private fun initializeBadge(): BadgeDrawable {
+        val backgroundFrame = findViewById<FrameLayout>(R.id.background_frame)
+
+        val badge = BadgeDrawable.create(context)
+        badge.badgeGravity = BadgeDrawable.TOP_END
+        badge.backgroundColor = ContextCompat.getColor(context, R.color.material_red)
+        badge.setVisible(true, true)
+
+        doOnGlobalLayout {
+            // Set position of back to the foreground of the background frame. From API 23 this
+            // could also be set to the background image.
+            badge.bounds = backgroundFrame.getDrawingRect()
+            badge.updateBadgeCoordinates(backgroundFrame)
+            backgroundFrame.foreground = badge
+        }
+
+        return badge
+    }
+
+    private fun doOnGlobalLayout(action: () -> Unit) {
+        viewTreeObserver.addOnGlobalLayoutListener(object : OnGlobalLayoutListener {
+            override fun onGlobalLayout() {
+                action()
+                viewTreeObserver.removeOnGlobalLayoutListener(this)
+            }
+        })
+    }
+}
+
+/**
+ * Return the visible drawing bounds of the view.
+ */
+private fun View.getDrawingRect(): Rect {
+    val rect = Rect()
+    this.getDrawingRect(rect)
+    return rect
+}
diff --git a/app/src/main/java/ch/threema/app/ui/QRCodePopup.java b/app/src/main/java/ch/threema/app/ui/QRCodePopup.java
index 522736e6..c0b738a4 100644
--- a/app/src/main/java/ch/threema/app/ui/QRCodePopup.java
+++ b/app/src/main/java/ch/threema/app/ui/QRCodePopup.java
@@ -37,11 +37,14 @@ import android.view.animation.ScaleAnimation;
 import android.widget.ImageView;
 import android.widget.PopupWindow;
 
-import org.slf4j.Logger;
-
 import androidx.annotation.NonNull;
 import androidx.lifecycle.DefaultLifecycleObserver;
 import androidx.lifecycle.LifecycleOwner;
+
+import com.google.android.material.card.MaterialCardView;
+
+import org.slf4j.Logger;
+
 import ch.threema.app.R;
 import ch.threema.app.ThreemaApplication;
 import ch.threema.app.services.QRCodeServiceImpl;
@@ -55,6 +58,7 @@ public class QRCodePopup extends DimmingPopupWindow implements DefaultLifecycleO
 	private ImageView imageView;
 	private View topLayout;
 	private View parentView;
+	private MaterialCardView containerView;
 
 	private final int[] location = new int[2];
 
@@ -74,6 +78,7 @@ public class QRCodePopup extends DimmingPopupWindow implements DefaultLifecycleO
 		LayoutInflater layoutInflater = (LayoutInflater) context.getSystemService(Context.LAYOUT_INFLATER_SERVICE);
 		topLayout =  layoutInflater.inflate(R.layout.popup_qrcode, null, true);
 
+		this.containerView = topLayout.findViewById(R.id.qr_popup_container);
 		this.imageView = topLayout.findViewById(R.id.image_view);
 
 		// border around popup contents
@@ -92,7 +97,7 @@ public class QRCodePopup extends DimmingPopupWindow implements DefaultLifecycleO
 		}
 		setBackgroundDrawable(new BitmapDrawable());
 		setAnimationStyle(0);
-		setElevation(10);
+		setElevation(0);
 		setInputMethodMode(PopupWindow.INPUT_METHOD_NOT_NEEDED);
 	}
 
@@ -120,13 +125,14 @@ public class QRCodePopup extends DimmingPopupWindow implements DefaultLifecycleO
 		bitmapDrawable.setFilterBitmap(false);
 
 		this.imageView.setImageDrawable(bitmapDrawable);
+		this.containerView.setStrokeColor(borderColor);
 		showAtLocation(parentView, Gravity.CENTER, 0, 0);
 		dimBackground();
 
 		getContentView().getViewTreeObserver().addOnGlobalLayoutListener(new ViewTreeObserver.OnGlobalLayoutListener() {
 			@Override
 			public void onGlobalLayout() {
-				getContentView().getViewTreeObserver().removeGlobalOnLayoutListener(this);
+				getContentView().getViewTreeObserver().removeOnGlobalLayoutListener(this);
 
 				AnimationUtil.getViewCenter(sourceView, getContentView(), location);
 
@@ -143,22 +149,12 @@ public class QRCodePopup extends DimmingPopupWindow implements DefaultLifecycleO
 			}
 		});
 
-		topLayout.setOnClickListener(new View.OnClickListener() {
-			@Override
-			public void onClick(View v) {
-				dismiss();
-			}
-		});
+		topLayout.setOnClickListener(v -> dismiss());
 	}
 
 	@Override
 	public void dismiss() {
-		AnimationUtil.popupAnimateOut(getContentView(), new Runnable() {
-			@Override
-			public void run() {
-				QRCodePopup.super.dismiss();
-			}
-		});
+		AnimationUtil.popupAnimateOut(getContentView(), QRCodePopup.super::dismiss);
 	}
 
 	/**
diff --git a/app/src/main/java/ch/threema/app/ui/ReportSpamView.kt b/app/src/main/java/ch/threema/app/ui/ReportSpamView.kt
index 6cab23fd..53209fde 100644
--- a/app/src/main/java/ch/threema/app/ui/ReportSpamView.kt
+++ b/app/src/main/java/ch/threema/app/ui/ReportSpamView.kt
@@ -32,7 +32,7 @@ import ch.threema.app.R
 import ch.threema.app.dialogs.TextWithCheckboxDialog
 import ch.threema.app.utils.NameUtil
 import ch.threema.storage.models.ContactModel
-import com.google.android.material.chip.Chip
+import com.google.android.material.button.MaterialButton
 
 class ReportSpamView : ConstraintLayout, DefaultLifecycleObserver {
     private var listener: OnReportButtonClickListener? = null
@@ -56,7 +56,7 @@ class ReportSpamView : ConstraintLayout, DefaultLifecycleObserver {
         }
         activity.lifecycle.addObserver(this)
         val inflater = context.getSystemService(Context.LAYOUT_INFLATER_SERVICE) as LayoutInflater
-        inflater.inflate(R.layout.view_report_spam, this)
+        inflater.inflate(R.layout.notice_report_spam, this)
     }
 
     fun setListener(listener: OnReportButtonClickListener?) {
@@ -80,8 +80,8 @@ class ReportSpamView : ConstraintLayout, DefaultLifecycleObserver {
 
     override fun onFinishInflate() {
         super.onFinishInflate()
-        val reportChip: Chip = findViewById(R.id.chip_report_spam)
-        reportChip.setOnClickListener {
+        val reportButton: MaterialButton = findViewById(R.id.button_report_spam)
+        reportButton.setOnClickListener {
             val dialog = TextWithCheckboxDialog.newInstance(context.getString(R.string.spam_report_dialog_title, NameUtil.getDisplayNameOrNickname(contactModel, true)), R.string.spam_report_dialog_explain,
                     R.string.spam_report_dialog_block_checkbox, R.string.spam_report_short, R.string.cancel)
             dialog.setCallback { _: String?, _: Any?, checked: Boolean -> listener!!.onReportSpamClicked(contactModel!!, checked) }
diff --git a/app/src/main/java/ch/threema/app/ui/ScrollButtonManager.kt b/app/src/main/java/ch/threema/app/ui/ScrollButtonManager.kt
new file mode 100644
index 00000000..287102a4
--- /dev/null
+++ b/app/src/main/java/ch/threema/app/ui/ScrollButtonManager.kt
@@ -0,0 +1,100 @@
+/*  _____ _
+ * |_   _| |_  _ _ ___ ___ _ __  __ _
+ *   | | | ' \| '_/ -_) -_) '  \/ _` |_
+ *   |_| |_||_|_| \___\___|_|_|_\__,_(_)
+ *
+ * Threema for Android
+ * Copyright (c) 2023 Threema GmbH
+ *
+ * This program is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU Affero General Public License, version 3,
+ * as published by the Free Software Foundation.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+ * GNU Affero General Public License for more details.
+ *
+ * You should have received a copy of the GNU Affero General Public License
+ * along with this program. If not, see <https://www.gnu.org/licenses/>.
+ */
+
+package ch.threema.app.ui
+
+import android.os.Handler
+import android.view.View
+import android.widget.FrameLayout
+import ch.threema.app.utils.AnimationUtil
+import ch.threema.app.utils.RuntimeUtil
+import com.google.android.material.badge.BadgeDrawable
+import com.google.android.material.button.MaterialButton
+
+/**
+ * This class manages the quick scroll buttons in a conversation and their timeouts; it also makes sure only one type is shown at once
+ */
+class ScrollButtonManager(private val upButton: MaterialButton, private val downButton: FrameLayout, private val downBadgeDrawable: BadgeDrawable) {
+    private val buttonHandler = Handler()
+    private val buttonTask = Runnable {
+        RuntimeUtil.runOnUiThread {
+            hideAllButtons()
+        }
+    }
+
+    /**
+     * Show a button of requested type and a badge if a count is provided. Hide other buttons.
+     */
+    fun showButton(type: Int, count: Int) {
+        buttonHandler.removeCallbacks(buttonTask)
+        when (type) {
+            TYPE_UP -> {
+                downButton.visibility = View.GONE
+                downBadgeDrawable.isVisible = false
+                if (upButton.visibility != View.VISIBLE) {
+                    AnimationUtil.setFadingVisibility(upButton, View.VISIBLE)
+                }
+            }
+            TYPE_DOWN -> {
+                upButton.visibility = View.GONE
+                if (downButton.visibility != View.VISIBLE || downBadgeDrawable.number != count) {
+                    AnimationUtil.setFadingVisibility(downButton, View.VISIBLE)
+                    downButton.post {
+                        if (count > 0) {
+                            downBadgeDrawable.number = count
+                            downBadgeDrawable.isVisible = true
+                        } else {
+                            downBadgeDrawable.isVisible = false
+                        }
+                    }
+                }
+            }
+            else -> {}
+        }
+        if (count <= 0) {
+            buttonHandler.postDelayed(buttonTask, SCROLLBUTTON_VIEW_TIMEOUT)
+        }
+    }
+
+    fun hideButton(type: Int) {
+        buttonHandler.removeCallbacks(buttonTask)
+        when (type) {
+            TYPE_UP -> if (upButton.visibility != View.GONE) {
+                AnimationUtil.setFadingVisibility(upButton, View.GONE)
+            }
+            TYPE_DOWN -> if (downButton.visibility != View.GONE) {
+                    AnimationUtil.setFadingVisibility(downButton, View.GONE)
+            }
+            else -> {}
+        }
+    }
+
+    fun hideAllButtons() {
+        hideButton(TYPE_DOWN)
+        hideButton(TYPE_UP)
+    }
+
+    companion object {
+        const val SCROLLBUTTON_VIEW_TIMEOUT = 3000L
+        const val TYPE_UP = 1
+        const val TYPE_DOWN = 2
+    }
+}
diff --git a/app/src/main/java/ch/threema/app/ui/SendButton.java b/app/src/main/java/ch/threema/app/ui/SendButton.java
index d0485eae..4f9c70c1 100644
--- a/app/src/main/java/ch/threema/app/ui/SendButton.java
+++ b/app/src/main/java/ch/threema/app/ui/SendButton.java
@@ -22,8 +22,6 @@
 package ch.threema.app.ui;
 
 import android.content.Context;
-import android.content.res.Resources;
-import android.content.res.TypedArray;
 import android.graphics.drawable.Drawable;
 import android.graphics.drawable.TransitionDrawable;
 import android.util.AttributeSet;
@@ -33,8 +31,8 @@ import android.widget.FrameLayout;
 import androidx.appcompat.widget.AppCompatImageView;
 import androidx.core.content.ContextCompat;
 import androidx.core.content.res.ResourcesCompat;
+
 import ch.threema.app.R;
-import ch.threema.app.utils.ConfigUtils;
 
 public class SendButton extends FrameLayout {
 	private static final int STATE_SEND = 1;
@@ -69,21 +67,8 @@ public class SendButton extends FrameLayout {
 
 		this.context = context;
 
-		int theme = ConfigUtils.getAppTheme(context);
-
-		if (attrs != null) {
-			TypedArray a = getContext().obtainStyledAttributes(attrs, R.styleable.SendButton, 0, 0);
-
-			if (a != null) {
-				theme = a.getInt(R.styleable.SendButton_buttonTheme, theme);
-				a.recycle();
-			}
-		}
-
-		Resources.Theme resolvedTheme = getResources().newTheme();
-		resolvedTheme.applyStyle(theme == ConfigUtils.THEME_DARK ? R.style.Theme_Threema_WithToolbar_Dark : R.style.Theme_Threema_WithToolbar, true);
-		this.backgroundEnabled = ResourcesCompat.getDrawable(getResources(), R.drawable.ic_circle_send, resolvedTheme);
-		this.backgroundDisabled = ResourcesCompat.getDrawable(getResources(), R.drawable.ic_circle_send_disabled, null);
+		this.backgroundEnabled = ResourcesCompat.getDrawable(getResources(), R.drawable.ic_circle_send, context.getTheme());
+		this.backgroundDisabled = ResourcesCompat.getDrawable(getResources(), R.drawable.ic_circle_send_disabled, context.getTheme());
 	}
 
 	@Override
diff --git a/app/src/main/java/ch/threema/app/ui/SilentSwitchCompat.java b/app/src/main/java/ch/threema/app/ui/SilentSwitchCompat.java
index 0b566630..bbdf9f45 100644
--- a/app/src/main/java/ch/threema/app/ui/SilentSwitchCompat.java
+++ b/app/src/main/java/ch/threema/app/ui/SilentSwitchCompat.java
@@ -25,14 +25,15 @@ import android.content.Context;
 import android.util.AttributeSet;
 import android.widget.TextView;
 
-import androidx.appcompat.widget.SwitchCompat;
+import com.google.android.material.materialswitch.MaterialSwitch;
+
 import ch.threema.app.R;
 
 /**
  *  Add setCheckedSilent() to Switch to prevent listener from firing when there's no user interaction
  */
 
-public class SilentSwitchCompat extends SwitchCompat {
+public class SilentSwitchCompat extends MaterialSwitch {
 	private OnCheckedChangeListener listener = null;
 	private TextView label = null;
 
diff --git a/app/src/main/java/ch/threema/app/ui/SquareImageView.java b/app/src/main/java/ch/threema/app/ui/SquareImageView.java
index 7b981b0a..015ab865 100644
--- a/app/src/main/java/ch/threema/app/ui/SquareImageView.java
+++ b/app/src/main/java/ch/threema/app/ui/SquareImageView.java
@@ -26,26 +26,21 @@ import android.util.AttributeSet;
 
 import com.google.android.material.imageview.ShapeableImageView;
 
-public class SquareImageView extends ShapeableImageView
-{
-	public SquareImageView(Context context)
-	{
+public class SquareImageView extends ShapeableImageView {
+	public SquareImageView(Context context)	{
 		super(context);
 	}
 
-	public SquareImageView(Context context, AttributeSet attrs)
-	{
+	public SquareImageView(Context context, AttributeSet attrs) {
 		super(context, attrs);
 	}
 
-	public SquareImageView(Context context, AttributeSet attrs, int defStyle)
-	{
+	public SquareImageView(Context context, AttributeSet attrs, int defStyle) {
 		super(context, attrs, defStyle);
 	}
 
 	@Override
-	protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec)
-	{
+	protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {
 		super.onMeasure(widthMeasureSpec, heightMeasureSpec);
 		setMeasuredDimension(getMeasuredWidth(), getMeasuredWidth());
 	}
diff --git a/app/src/main/java/ch/threema/app/ui/SquareLinearLayout.java b/app/src/main/java/ch/threema/app/ui/SquareLinearLayout.java
deleted file mode 100644
index 6ace8d1b..00000000
--- a/app/src/main/java/ch/threema/app/ui/SquareLinearLayout.java
+++ /dev/null
@@ -1,47 +0,0 @@
-/*  _____ _
- * |_   _| |_  _ _ ___ ___ _ __  __ _
- *   | | | ' \| '_/ -_) -_) '  \/ _` |_
- *   |_| |_||_|_| \___\___|_|_|_\__,_(_)
- *
- * Threema for Android
- * Copyright (c) 2020-2023 Threema GmbH
- *
- * This program is free software: you can redistribute it and/or modify
- * it under the terms of the GNU Affero General Public License, version 3,
- * as published by the Free Software Foundation.
- *
- * This program is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
- * GNU Affero General Public License for more details.
- *
- * You should have received a copy of the GNU Affero General Public License
- * along with this program. If not, see <https://www.gnu.org/licenses/>.
- */
-
-package ch.threema.app.ui;
-
-import android.content.Context;
-import android.util.AttributeSet;
-import android.widget.LinearLayout;
-
-public class SquareLinearLayout extends LinearLayout {
-	public SquareLinearLayout(Context context) {
-		super(context);
-	}
-
-	public SquareLinearLayout(Context context, AttributeSet attrs) {
-		super(context, attrs);
-	}
-
-	public SquareLinearLayout(Context context, AttributeSet attrs, int defStyle) {
-		super(context, attrs, defStyle);
-	}
-
-	@Override
-	protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec)
-	{
-		super.onMeasure(widthMeasureSpec, heightMeasureSpec);
-		setMeasuredDimension(getMeasuredWidth(), getMeasuredWidth());
-	}
-}
diff --git a/app/src/main/java/ch/threema/app/ui/ThumbDatePopupBackground.kt b/app/src/main/java/ch/threema/app/ui/ThumbDatePopupBackground.kt
new file mode 100644
index 00000000..f4a61157
--- /dev/null
+++ b/app/src/main/java/ch/threema/app/ui/ThumbDatePopupBackground.kt
@@ -0,0 +1,133 @@
+/*  _____ _
+ * |_   _| |_  _ _ ___ ___ _ __  __ _
+ *   | | | ' \| '_/ -_) -_) '  \/ _` |_
+ *   |_| |_||_|_| \___\___|_|_|_\__,_(_)
+ *
+ * Threema for Android
+ * Copyright (c) 2023 Threema GmbH
+ *
+ * This program is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU Affero General Public License, version 3,
+ * as published by the Free Software Foundation.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+ * GNU Affero General Public License for more details.
+ *
+ * You should have received a copy of the GNU Affero General Public License
+ * along with this program. If not, see <https://www.gnu.org/licenses/>.
+ */
+
+package ch.threema.app.ui
+
+import android.content.Context
+import android.graphics.*
+import android.graphics.drawable.Drawable
+import android.os.Build
+import android.view.View
+import androidx.core.graphics.drawable.DrawableCompat
+import ch.threema.app.R
+import ch.threema.app.utils.ConfigUtils
+import kotlin.math.sqrt
+
+internal class ThumbDatePopupBackground(context: Context) : Drawable() {
+    private val paint: Paint = Paint()
+    private val paddingStart: Int
+    private val paddingEnd: Int
+    private val paddingTopBottom: Int
+    private val path = Path()
+    private val tempMatrix = Matrix()
+
+    init {
+        paint.isAntiAlias = true
+        paint.color = ConfigUtils.getColorFromAttribute(context, R.attr.colorSecondaryContainer)
+        paint.style = Paint.Style.FILL
+        paddingStart = context.resources.getDimensionPixelSize(R.dimen.thumb_date_popup_padding_start);
+        paddingEnd = context.resources.getDimensionPixelSize(R.dimen.thumb_date_popup_padding_end);
+        paddingTopBottom = context.resources.getDimensionPixelSize(R.dimen.thumb_date_popup_padding_top_bottom);
+    }
+
+    override fun draw(canvas: Canvas) {
+        canvas.drawPath(path, paint)
+    }
+
+    override fun onLayoutDirectionChanged(layoutDirection: Int): Boolean {
+        updatePath()
+        return true
+    }
+
+    override fun setAlpha(alpha: Int) {}
+    override fun setColorFilter(colorFilter: ColorFilter?) {}
+    override fun isAutoMirrored(): Boolean {
+        return true
+    }
+
+    private fun needMirroring(): Boolean {
+        return DrawableCompat.getLayoutDirection(this) == View.LAYOUT_DIRECTION_RTL
+    }
+
+    @Deprecated("Deprecated in Java")
+    override fun getOpacity(): Int {
+        return PixelFormat.TRANSLUCENT
+    }
+
+    override fun onBoundsChange(bounds: Rect) {
+        updatePath()
+    }
+
+    private fun updatePath() {
+        path.reset()
+        val bounds = bounds
+        var width = bounds.width().toFloat()
+        val height = bounds.height().toFloat()
+        val r = height / 2
+        val sqrt2 = sqrt(2.0).toFloat()
+        // Ensure we are convex.
+        width = (r + sqrt2 * r).coerceAtLeast(width)
+        val o1X = width - sqrt2 * r
+
+        pathArcTo(path, r, r, r, 90f, 180f)
+        pathArcTo(path, o1X, r, r, -90f, 45f)
+        pathArcTo(path, o1X, r, r, -45f, 90f)
+        pathArcTo(path, o1X, r, r, 45f, 45f)
+        path.close()
+        if (needMirroring()) {
+            tempMatrix.setScale(-1f, 1f, width / 2, 0f)
+        } else {
+            tempMatrix.reset()
+        }
+        tempMatrix.postTranslate(bounds.left.toFloat(), bounds.top.toFloat())
+        path.transform(tempMatrix)
+    }
+
+    private fun pathArcTo(
+        path: Path, centerX: Float, centerY: Float, radius: Float,
+        startAngle: Float, sweepAngle: Float
+    ) {
+        path.arcTo(
+            centerX - radius, centerY - radius, centerX + radius, centerY + radius,
+            startAngle, sweepAngle, false
+        )
+    }
+
+    override fun getPadding(padding: Rect): Boolean {
+        if (needMirroring()) {
+            padding[paddingEnd, paddingTopBottom, paddingStart] = paddingTopBottom
+        } else {
+            padding[paddingStart, paddingTopBottom, paddingEnd] = paddingTopBottom
+        }
+        return true
+    }
+
+    override fun getOutline(outline: Outline) {
+        if (Build.VERSION.SDK_INT < Build.VERSION_CODES.Q && !path.isConvex) {
+            // The outline path must be convex before Q, but we may run into floating point error
+            // caused by calculation involving sqrt(2) or OEM implementation difference, so in this
+            // case we just omit the shadow instead of crashing.
+            super.getOutline(outline)
+            return
+        }
+        outline.setConvexPath(path)
+    }
+}
diff --git a/app/src/main/java/ch/threema/app/ui/TooltipPopup.java b/app/src/main/java/ch/threema/app/ui/TooltipPopup.java
index a8623093..109291cf 100644
--- a/app/src/main/java/ch/threema/app/ui/TooltipPopup.java
+++ b/app/src/main/java/ch/threema/app/ui/TooltipPopup.java
@@ -31,16 +31,19 @@ import android.view.Gravity;
 import android.view.LayoutInflater;
 import android.view.View;
 import android.view.WindowManager;
+import android.widget.FrameLayout;
 import android.widget.ImageView;
-import android.widget.LinearLayout;
 import android.widget.PopupWindow;
 
+import androidx.annotation.DrawableRes;
 import androidx.annotation.LayoutRes;
 import androidx.annotation.NonNull;
 import androidx.lifecycle.DefaultLifecycleObserver;
 import androidx.lifecycle.LifecycleOwner;
 import androidx.preference.PreferenceManager;
 
+import com.google.android.material.card.MaterialCardView;
+
 import ch.threema.app.R;
 import ch.threema.app.emojis.EmojiTextView;
 import ch.threema.app.utils.ConfigUtils;
@@ -53,12 +56,15 @@ public class TooltipPopup extends PopupWindow implements DefaultLifecycleObserve
 	public static final int ALIGN_ABOVE_ANCHOR_ARROW_RIGHT = 4;
 
 	private final Context context;
+	private View popupLayout;
 	private EmojiTextView textView;
 	private final String preferenceString;
 	private Handler timeoutHandler;
 	private final Runnable dismissRunnable = () -> dismiss(false);
 
-	public TooltipPopup(Context context, int preferenceKey, @LayoutRes int layoutResource, LifecycleOwner lifecycleOwner) {
+	private @DrawableRes int icon = 0;
+
+	public TooltipPopup(Context context, int preferenceKey, LifecycleOwner lifecycleOwner) {
 		super(context);
 
 		if (lifecycleOwner != null) {
@@ -72,10 +78,10 @@ public class TooltipPopup extends PopupWindow implements DefaultLifecycleObserve
 		}
 		this.context = context;
 
-		init(context, layoutResource, null);
+		init(context, null);
 	}
 
-	public TooltipPopup(Context context, int preferenceKey, @LayoutRes int layoutResource, LifecycleOwner lifecycleOwner, Intent launchIntent) {
+	public TooltipPopup(Context context, int preferenceKey, LifecycleOwner lifecycleOwner, Intent launchIntent, @DrawableRes int icon) {
 		super(context);
 
 		if (lifecycleOwner != null) {
@@ -88,26 +94,15 @@ public class TooltipPopup extends PopupWindow implements DefaultLifecycleObserve
 			this.preferenceString = context.getString(preferenceKey);
 		}
 		this.context = context;
+		this.icon = icon;
 
-		init(context, layoutResource, launchIntent);
-	}
-
-	public TooltipPopup(Context context, String preferenceString, @LayoutRes int layoutResource) {
-		super(context);
-		this.preferenceString = preferenceString;
-		this.context = context;
-
-		if (isDismissed(context, preferenceString)) {
-			return;
-		}
-
-		init(context, layoutResource, null);
+		init(context, launchIntent);
 	}
 
-	private void init(Context context, int layoutResource, Intent launchIntent) {
+	private void init(Context context, Intent launchIntent) {
 		LayoutInflater layoutInflater = (LayoutInflater) context.getSystemService(Context.LAYOUT_INFLATER_SERVICE);
-		LinearLayout popupLayout = (LinearLayout) layoutInflater.inflate(layoutResource, null, false);
 
+		this.popupLayout = layoutInflater.inflate(R.layout.popup_tooltip, null, false);
 		this.textView = popupLayout.findViewById(R.id.label);
 
 		setContentView(popupLayout);
@@ -129,7 +124,7 @@ public class TooltipPopup extends PopupWindow implements DefaultLifecycleObserve
 			}
 		});
 
-		ImageView closeButton = popupLayout.findViewById(R.id.close_button);
+		View closeButton = popupLayout.findViewById(R.id.close_button);
 		if (closeButton != null) {
 			if (preferenceString == null) {
 				closeButton.setVisibility(View.GONE);
@@ -175,89 +170,83 @@ public class TooltipPopup extends PopupWindow implements DefaultLifecycleObserve
 		this.dismiss();
 	}
 
-	public void show(Activity activity, final View anchor, String text, int align) {
-		show(activity, anchor, text, align, 0);
-	}
-
-	public void show(Activity activity, final View anchor, String text, int align, int timeoutMs) {
-		if (isDismissed(context, preferenceString)) {
-			return;
-		}
-
-		int[] originLocation = {0, 0};
-		anchor.getLocationInWindow(originLocation);
-
-		show(activity, anchor, text, align, originLocation, timeoutMs);
-	}
-
+	/**
+	 * Show a tooltip at the specified location pointing to a specified anchor view
+	 * @param activity Activity context
+	 * @param anchor Anchor / parent view to of this tooltip
+	 * @param text Text to show in tooltip
+	 * @param align Where to align the tooltip and where the arrow should be shown
+	 * @param originLocation The location on screen where the tip of the arrow should point to
+	 * @param timeoutMs How long the tooltip should be shown until it fades out
+	 */
 	public void show(Activity activity, final View anchor, String text, int align, int[] originLocation, int timeoutMs) {
 		if (isDismissed(context, preferenceString)) {
 			return;
 		}
 
-		int popupX;
-		int popupY;
-
 		this.textView.setText(text);
 
 		int screenHeight = activity.getWindowManager().getDefaultDisplay().getHeight();
 		int screenWidth = activity.getWindowManager().getDefaultDisplay().getWidth();
 		int maxWidth = context.getResources().getDimensionPixelSize(R.dimen.tooltip_max_width);
+		int arrowInset = context.getResources().getDimensionPixelSize(R.dimen.tooltip_popup_arrow_inset);
+		int marginOnOtherEdge = context.getResources().getDimensionPixelSize(R.dimen.tooltip_margin_on_other_edge);
+		int arrowOffset = (context.getResources().getDimensionPixelSize(R.dimen.identity_popup_arrow_width) / 2) + arrowInset;
+		int popupX, popupY, popupWidth, anchorGravity, contentGravity;
 
 		if (align == ALIGN_ABOVE_ANCHOR_ARROW_LEFT) {
-			popupX = originLocation[0];
+			this.popupLayout.findViewById(R.id.arrow_bottom_left).setVisibility(View.VISIBLE);
+			popupX = Math.max(0, originLocation[0] - arrowOffset); // left edge of popup
 			popupY = screenHeight - originLocation[1] + ConfigUtils.getNavigationBarHeight(activity);
-			int marginRight = context.getResources().getDimensionPixelSize(R.dimen.tooltip_margin_right);
-			this.setWidth(Math.min(screenWidth - marginRight - popupX, maxWidth));
-			if (activity.isFinishing() || activity.isDestroyed()) {
-				return;
-			}
-			try {
-				showAtLocation(anchor, Gravity.LEFT | Gravity.BOTTOM, popupX, popupY);
-			} catch (WindowManager.BadTokenException e) {
-				return;
-			}
+			popupWidth = Math.min(screenWidth - popupX - marginOnOtherEdge, maxWidth);
+			anchorGravity = Gravity.LEFT | Gravity.BOTTOM;
+			contentGravity = Gravity.LEFT;
 		} else if (align == ALIGN_ABOVE_ANCHOR_ARROW_RIGHT) {
-			popupX = originLocation[0] + anchor.getWidth();
+			this.popupLayout.findViewById(R.id.arrow_bottom_right).setVisibility(View.VISIBLE);
+			popupX = Math.min(screenWidth, originLocation[0] + arrowOffset);
 			popupY = screenHeight - originLocation[1] + ConfigUtils.getNavigationBarHeight(activity);
-			int marginLeft = context.getResources().getDimensionPixelSize(R.dimen.tooltip_margin_right);
-			int popupWidth = Math.min(popupX - marginLeft, maxWidth);
-			this.setWidth(popupWidth);
-			if (activity.isFinishing() || activity.isDestroyed()) {
-				return;
-			}
-			try {
-				showAtLocation(anchor, Gravity.LEFT | Gravity.BOTTOM, popupX - popupWidth, popupY);
-			} catch (WindowManager.BadTokenException e) {
-				return;
-			}
+			popupWidth = Math.min(popupX - marginOnOtherEdge, maxWidth);
+			popupX -= popupWidth;
+			anchorGravity = Gravity.LEFT | Gravity.BOTTOM;
+			contentGravity = Gravity.RIGHT;
+		} else if (align == ALIGN_BELOW_ANCHOR_ARROW_LEFT) {
+			this.popupLayout.findViewById(R.id.arrow_top_left).setVisibility(View.VISIBLE);
+			popupX = Math.max(0, originLocation[0] - arrowOffset); // left edge of popup
+			popupY = originLocation[1];
+			popupWidth = Math.min(screenWidth - popupX - marginOnOtherEdge, maxWidth);
+			anchorGravity = Gravity.LEFT | Gravity.TOP;
+			contentGravity = Gravity.LEFT;
+		} else { // arrow right
+			this.popupLayout.findViewById(R.id.arrow_top_right).setVisibility(View.VISIBLE);
+			popupX = Math.min(screenWidth, originLocation[0] + arrowOffset); // right edge of popup
+			popupY = originLocation[1];
+			popupWidth = Math.min(popupX - marginOnOtherEdge, maxWidth);
+			popupX -= popupWidth;
+			anchorGravity = Gravity.LEFT | Gravity.TOP;
+			contentGravity = Gravity.RIGHT;
+		}
+
+		this.setWidth(popupWidth);
+		MaterialCardView contentLayout = this.popupLayout.findViewById(R.id.content);
+		FrameLayout.LayoutParams params = (FrameLayout.LayoutParams) contentLayout.getLayoutParams();
+		params.gravity = contentGravity;
+		contentLayout.setLayoutParams(params);
+
+		if (activity.isFinishing() || activity.isDestroyed()) {
+			return;
+		}
+		try {
+			showAtLocation(anchor, anchorGravity, popupX, popupY);
+		} catch (WindowManager.BadTokenException e) {
+			return;
+		}
+
+		ImageView iconView = this.popupLayout.findViewById(R.id.icon);
+		if (icon != 0) {
+			iconView.setImageResource(icon);
+			iconView.setVisibility(View.VISIBLE);
 		} else {
-			int marginOnOtherEdge = context.getResources().getDimensionPixelSize(R.dimen.tooltip_margin_right);
-			int arrowOffset = context.getResources().getDimensionPixelSize(R.dimen.tooltip_arrow_offset);
-			int popupWidth;
-
-			if (align == ALIGN_BELOW_ANCHOR_ARROW_LEFT) {
-				popupX = originLocation[0] - arrowOffset;
-				popupY = originLocation[1];
-				popupWidth = Math.min(screenWidth - popupX - marginOnOtherEdge, maxWidth);
-			} else {
-				popupX = originLocation[0] + anchor.getWidth() - arrowOffset;
-				popupY = originLocation[1] + anchor.getHeight();
-				popupWidth = Math.min(popupX - marginOnOtherEdge, maxWidth);
-			}
-			this.setWidth(popupWidth);
-			if (activity.isFinishing() || activity.isDestroyed()) {
-				return;
-			}
-			try {
-				if (align == ALIGN_BELOW_ANCHOR_ARROW_LEFT) {
-					showAtLocation(anchor, Gravity.LEFT | Gravity.TOP, popupX, popupY);
-				} else {
-					showAtLocation(anchor, Gravity.LEFT | Gravity.TOP, popupX - popupWidth, popupY);
-				}
-			} catch (WindowManager.BadTokenException e) {
-				return;
-			}
+			iconView.setVisibility(View.GONE);
 		}
 
 		if (timeoutMs > 0) {
diff --git a/app/src/main/java/ch/threema/app/ui/TranscoderView.java b/app/src/main/java/ch/threema/app/ui/TranscoderView.java
index 21f95c8c..22c83aca 100644
--- a/app/src/main/java/ch/threema/app/ui/TranscoderView.java
+++ b/app/src/main/java/ch/threema/app/ui/TranscoderView.java
@@ -28,7 +28,8 @@ import android.view.View;
 import android.view.ViewTreeObserver;
 import android.widget.FrameLayout;
 import android.widget.ImageView;
-import android.widget.ProgressBar;
+
+import com.google.android.material.progressindicator.LinearProgressIndicator;
 
 import org.slf4j.Logger;
 
@@ -44,7 +45,7 @@ public class TranscoderView extends FrameLayout {
 
 	public static final int PROGRESS_MAX = 100;
 
-	private ProgressBar transcodeProgress;
+	private LinearProgressIndicator transcodeProgress;
 	private AbstractMessageModel messageModel;
 	private MessageService messageService;
 
diff --git a/app/src/main/java/ch/threema/app/ui/TypingIndicatorImageView.java b/app/src/main/java/ch/threema/app/ui/TypingIndicatorImageView.java
index 9dc82618..78b379b3 100644
--- a/app/src/main/java/ch/threema/app/ui/TypingIndicatorImageView.java
+++ b/app/src/main/java/ch/threema/app/ui/TypingIndicatorImageView.java
@@ -30,6 +30,7 @@ import android.view.View;
 import androidx.annotation.NonNull;
 import androidx.vectordrawable.graphics.drawable.Animatable2Compat;
 import androidx.vectordrawable.graphics.drawable.AnimatedVectorDrawableCompat;
+
 import ch.threema.app.R;
 import ch.threema.app.utils.ConfigUtils;
 
@@ -53,7 +54,7 @@ public class TypingIndicatorImageView extends androidx.appcompat.widget.AppCompa
 
 	private void init() {
 		animatedVectorDrawableCompat = AnimatedVectorDrawableCompat.create(getContext(), R.drawable.typing_indicator);
-		animatedVectorDrawableCompat.setTint(ConfigUtils.getAppTheme(getContext()) == ConfigUtils.THEME_DARK ? Color.WHITE: Color.BLACK);
+		animatedVectorDrawableCompat.setTint(ConfigUtils.isTheDarkSide(getContext()) ? Color.WHITE: Color.BLACK);
 		setImageDrawable(animatedVectorDrawableCompat);
 	}
 
diff --git a/app/src/main/java/ch/threema/app/ui/TypingIndicatorTextWatcher.java b/app/src/main/java/ch/threema/app/ui/TypingIndicatorTextWatcher.java
index 090aba63..f8e9e08a 100644
--- a/app/src/main/java/ch/threema/app/ui/TypingIndicatorTextWatcher.java
+++ b/app/src/main/java/ch/threema/app/ui/TypingIndicatorTextWatcher.java
@@ -26,7 +26,8 @@ import android.text.Editable;
 import android.text.TextWatcher;
 import android.text.format.DateUtils;
 
-import ch.threema.app.services.UserService;
+import androidx.annotation.NonNull;
+import ch.threema.app.services.ContactService;
 import ch.threema.app.utils.TestUtil;
 import ch.threema.storage.models.ContactModel;
 
@@ -34,7 +35,8 @@ public class TypingIndicatorTextWatcher implements TextWatcher {
 
 	private static final long TYPING_SEND_TIMEOUT = 10 * DateUtils.SECOND_IN_MILLIS;
 	private final Handler typingIndicatorHandler = new Handler();
-	private final UserService userService;
+	@NonNull
+	private final ContactService contactService;
 	private final ContactModel contactModel;
 
 	private boolean isTypingSent = false;
@@ -44,13 +46,13 @@ public class TypingIndicatorTextWatcher implements TextWatcher {
 		public void run() {
 			if (isTypingSent) {
 				isTypingSent = false;
-				userService.isTyping(contactModel.getIdentity(), false);
+				contactService.sendTypingIndicator(contactModel.getIdentity(), false);
 			}
 		}
 	};
 
-	public TypingIndicatorTextWatcher(UserService userService, ContactModel contactModel) {
-		this.userService = userService;
+	public TypingIndicatorTextWatcher(@NonNull ContactService contactService, ContactModel contactModel) {
+		this.contactService = contactService;
 		this.contactModel = contactModel;
 	}
 
@@ -66,12 +68,9 @@ public class TypingIndicatorTextWatcher implements TextWatcher {
 	public void onTextChanged(CharSequence charSequence, int i, int i2, int i3) {
 		if(textHasChanged(charSequence)) {
 			if (!isTypingSent) {
-				new Thread(new Runnable() {
-					@Override
-					public void run() {
-						isTypingSent = true;
-						userService.isTyping(contactModel.getIdentity(), true);
-					}
+				new Thread(() -> {
+					isTypingSent = true;
+					contactService.sendTypingIndicator(contactModel.getIdentity(), true);
 				}).start();
 			} else {
 				//stop end typing sending handler
diff --git a/app/src/main/java/ch/threema/app/ui/VCardPropertyView.kt b/app/src/main/java/ch/threema/app/ui/VCardPropertyView.kt
index 6d7cd79b..5818f53b 100644
--- a/app/src/main/java/ch/threema/app/ui/VCardPropertyView.kt
+++ b/app/src/main/java/ch/threema/app/ui/VCardPropertyView.kt
@@ -34,7 +34,6 @@ import android.widget.FrameLayout
 import android.widget.ImageView
 import android.widget.TextView
 import androidx.annotation.DrawableRes
-import androidx.core.content.ContextCompat
 import androidx.core.graphics.drawable.RoundedBitmapDrawableFactory
 import ch.threema.app.R
 import ch.threema.app.utils.ConfigUtils
@@ -157,38 +156,13 @@ class VCardPropertyView(context: Context) : FrameLayout(context) {
         if (checkbox.isChecked) {
             iconIncluded?.let { contactPropertyIcon.setBackgroundResource(it) }
             contactPropertyPhoto.setImageDrawable(drawableIncluded)
-            contactPropertyText.setTextColor(ContextCompat.getColor(context, getPrimaryTextColor()))
-            contactPropertyType.setTextColor(ContextCompat.getColor(context, getSecondaryTextColor()))
+            contactPropertyText.setTextColor(ConfigUtils.getColorFromAttribute(context, R.attr.colorOnBackground))
+            contactPropertyType.setTextColor(ConfigUtils.getColorFromAttribute(context, R.attr.colorOnSurface))
         } else {
             iconExcluded?.let { contactPropertyIcon.setBackgroundResource(it) }
             contactPropertyPhoto.setImageDrawable(drawableExcluded)
-            contactPropertyText.setTextColor(ContextCompat.getColor(context, getTertiaryTextColor()))
-            contactPropertyType.setTextColor(ContextCompat.getColor(context, getTertiaryTextColor()))
+            contactPropertyText.setTextColor(ConfigUtils.getColorFromAttribute(context, R.attr.colorOnSurfaceVariant))
+            contactPropertyType.setTextColor(ConfigUtils.getColorFromAttribute(context, R.attr.colorOnSurfaceVariant))
         }
     }
-
-    private fun getPrimaryTextColor(): Int {
-        return if (ConfigUtils.getAppTheme(context) != ConfigUtils.THEME_DARK) {
-            R.color.text_color_primary
-        } else {
-            R.color.dark_text_color_primary
-        }
-    }
-
-    private fun getSecondaryTextColor(): Int {
-        return if (ConfigUtils.getAppTheme(context) != ConfigUtils.THEME_DARK) {
-            R.color.text_color_secondary
-        } else {
-            R.color.dark_text_color_secondary
-        }
-    }
-
-    private fun getTertiaryTextColor(): Int {
-        return if (ConfigUtils.getAppTheme(context) != ConfigUtils.THEME_DARK) {
-            R.color.text_color_tertiary
-        } else {
-            R.color.dark_text_color_tertiary
-        }
-    }
-
 }
diff --git a/app/src/main/java/ch/threema/app/ui/WorkCategorySpan.java b/app/src/main/java/ch/threema/app/ui/WorkCategorySpan.java
deleted file mode 100644
index 0c685018..00000000
--- a/app/src/main/java/ch/threema/app/ui/WorkCategorySpan.java
+++ /dev/null
@@ -1,103 +0,0 @@
-/*  _____ _
- * |_   _| |_  _ _ ___ ___ _ __  __ _
- *   | | | ' \| '_/ -_) -_) '  \/ _` |_
- *   |_| |_||_|_| \___\___|_|_|_\__,_(_)
- *
- * Threema for Android
- * Copyright (c) 2019-2023 Threema GmbH
- *
- * This program is free software: you can redistribute it and/or modify
- * it under the terms of the GNU Affero General Public License, version 3,
- * as published by the Free Software Foundation.
- *
- * This program is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
- * GNU Affero General Public License for more details.
- *
- * You should have received a copy of the GNU Affero General Public License
- * along with this program. If not, see <https://www.gnu.org/licenses/>.
- */
-
-package ch.threema.app.ui;
-
-import android.graphics.Canvas;
-import android.graphics.Paint;
-import android.graphics.RectF;
-import android.text.style.ReplacementSpan;
-
-import androidx.annotation.ColorInt;
-import androidx.annotation.NonNull;
-import androidx.annotation.Nullable;
-import ch.threema.app.R;
-import ch.threema.app.ThreemaApplication;
-import ch.threema.app.utils.TestUtil;
-
-public class WorkCategorySpan extends ReplacementSpan {
-
-	private int contentsWidth = 0;
-	private Paint backgroundPaint, closeButtonPaint;
-	@ColorInt private int textColor;
-	private static final int contentsPaddingHorizontal = ThreemaApplication.getAppContext().getResources().getDimensionPixelSize(R.dimen.work_category_padding);
-	private static final int paddingVertical = ThreemaApplication.getAppContext().getResources().getDimensionPixelSize(R.dimen.work_category_padding_vertical);
-	private static final int radius = ThreemaApplication.getAppContext().getResources().getDimensionPixelSize(R.dimen.work_category_radius);
-	private static final int closeButtonDimension = ThreemaApplication.getAppContext().getResources().getDimensionPixelSize(R.dimen.work_category_close_button_dimension);
-	private static final int closeButtonStrokeWidth = ThreemaApplication.getAppContext().getResources().getDimensionPixelSize(R.dimen.work_category_close_button_stroke_width);
-
-	public WorkCategorySpan(@ColorInt int backgroundColor, @ColorInt int textColor) {
-		super();
-
-		backgroundPaint = new Paint();
-		backgroundPaint.setStyle(Paint.Style.FILL);
-		backgroundPaint.setColor(backgroundColor);
-		backgroundPaint.setAlpha(0xff);
-
-		closeButtonPaint = new Paint();
-		closeButtonPaint.setStyle(Paint.Style.STROKE);
-		closeButtonPaint.setColor(textColor);
-		closeButtonPaint.setStrokeWidth(closeButtonStrokeWidth);
-		closeButtonPaint.setAlpha(0xff);
-
-		this.textColor = textColor;
-	}
-
-	@Override
-	public int getSize(@NonNull Paint paint, CharSequence text, int start, int end, @Nullable Paint.FontMetricsInt fm) {
-		if (!TestUtil.empty(text)) {
-			contentsWidth = (int) paint.measureText(text.subSequence(start, end).toString()) + (contentsPaddingHorizontal * 3) + closeButtonDimension;
-			return contentsWidth;
-		}
-		return 0;
-	}
-
-	@Override
-	public void draw(@NonNull Canvas canvas, CharSequence text, int start, int end, float x, int top, int y, int bottom, @NonNull Paint paint) {
-		if (!TestUtil.empty(text)) {
-			int alpha = paint.getAlpha();
-			int color = paint.getColor();
-
-			Paint.FontMetricsInt fm = paint.getFontMetricsInt();
-			float rectTop = y + fm.top - paddingVertical;
-			float rectBottom = rectTop + (fm.bottom - fm.top) + (paddingVertical * 2);
-			float rectLeft = x;
-			float rectRight = x + contentsWidth;
-
-			canvas.drawRoundRect(new RectF(rectLeft, rectTop, rectRight, rectBottom), radius, radius, backgroundPaint);
-
-			paint.setColor(this.textColor);
-			paint.setAlpha(0xFF);
-			canvas.drawText(text.subSequence(start, end).toString(), x + contentsPaddingHorizontal, y, paint);
-
-			float closeLeft = rectRight - contentsPaddingHorizontal - closeButtonDimension;
-			float closeRight = rectRight - contentsPaddingHorizontal;
-			float closeTop = rectTop + ((rectBottom - rectTop - closeButtonDimension) / 2f);
-			float closeBottom = closeTop + closeButtonDimension;
-
-			canvas.drawLine(closeLeft, closeTop, closeRight, closeBottom, closeButtonPaint);
-			canvas.drawLine(closeRight, closeTop, closeLeft, closeBottom, closeButtonPaint);
-
-			paint.setAlpha(alpha);
-			paint.setColor(color);
-		}
-	}
-}
diff --git a/app/src/main/java/ch/threema/app/ui/ZoomableExoPlayerView.java b/app/src/main/java/ch/threema/app/ui/ZoomableExoPlayerView.java
deleted file mode 100644
index 4b44f98b..00000000
--- a/app/src/main/java/ch/threema/app/ui/ZoomableExoPlayerView.java
+++ /dev/null
@@ -1,1611 +0,0 @@
-/*  _____ _
- * |_   _| |_  _ _ ___ ___ _ __  __ _
- *   | | | ' \| '_/ -_) -_) '  \/ _` |_
- *   |_| |_||_|_| \___\___|_|_|_\__,_(_)
- *
- * Threema for Android
- * Copyright (c) 2020-2023 Threema GmbH
- *
- * This program is free software: you can redistribute it and/or modify
- * it under the terms of the GNU Affero General Public License, version 3,
- * as published by the Free Software Foundation.
- *
- * This program is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
- * GNU Affero General Public License for more details.
- *
- * You should have received a copy of the GNU Affero General Public License
- * along with this program. If not, see <https://www.gnu.org/licenses/>.
- */
-
-package ch.threema.app.ui;
-
-/* This is a verbatim copy of ExoPlayer's PlayerView, however we use a ZoomableTextureView instead of the regular kind */
-
-/*
- * Copyright (C) 2016 The Android Open Source Project
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-import android.annotation.SuppressLint;
-import android.content.Context;
-import android.content.res.Resources;
-import android.content.res.TypedArray;
-import android.graphics.Bitmap;
-import android.graphics.BitmapFactory;
-import android.graphics.Matrix;
-import android.graphics.RectF;
-import android.graphics.drawable.BitmapDrawable;
-import android.graphics.drawable.Drawable;
-import android.opengl.GLSurfaceView;
-import android.os.Looper;
-import android.util.AttributeSet;
-import android.view.KeyEvent;
-import android.view.LayoutInflater;
-import android.view.MotionEvent;
-import android.view.SurfaceView;
-import android.view.TextureView;
-import android.view.View;
-import android.view.ViewGroup;
-import android.widget.FrameLayout;
-import android.widget.ImageView;
-import android.widget.TextView;
-
-import com.google.android.exoplayer2.C;
-import com.google.android.exoplayer2.MediaMetadata;
-import com.google.android.exoplayer2.PlaybackException;
-import com.google.android.exoplayer2.Player;
-import com.google.android.exoplayer2.Player.DiscontinuityReason;
-import com.google.android.exoplayer2.Timeline;
-import com.google.android.exoplayer2.Timeline.Period;
-import com.google.android.exoplayer2.Tracks;
-import com.google.android.exoplayer2.text.CueGroup;
-import com.google.android.exoplayer2.ui.AdOverlayInfo;
-import com.google.android.exoplayer2.ui.AdViewProvider;
-import com.google.android.exoplayer2.ui.AspectRatioFrameLayout;
-import com.google.android.exoplayer2.ui.AspectRatioFrameLayout.ResizeMode;
-import com.google.android.exoplayer2.ui.DefaultTimeBar;
-import com.google.android.exoplayer2.ui.PlayerControlView;
-import com.google.android.exoplayer2.ui.R;
-import com.google.android.exoplayer2.ui.StyledPlayerView;
-import com.google.android.exoplayer2.ui.SubtitleView;
-import com.google.android.exoplayer2.util.Assertions;
-import com.google.android.exoplayer2.util.ErrorMessageProvider;
-import com.google.android.exoplayer2.util.RepeatModeUtil;
-import com.google.android.exoplayer2.util.Util;
-import com.google.android.exoplayer2.video.VideoSize;
-import com.google.common.collect.ImmutableList;
-
-import java.lang.annotation.Documented;
-import java.lang.annotation.Retention;
-import java.lang.annotation.RetentionPolicy;
-import java.lang.annotation.Target;
-import java.util.ArrayList;
-import java.util.List;
-
-import androidx.annotation.IntDef;
-import androidx.annotation.Nullable;
-import androidx.annotation.RequiresApi;
-import androidx.core.content.ContextCompat;
-
-import static com.google.android.exoplayer2.Player.COMMAND_GET_TEXT;
-import static com.google.android.exoplayer2.Player.COMMAND_SET_VIDEO_SURFACE;
-import static java.lang.annotation.ElementType.TYPE_USE;
-
-/**
- * A high level view for {@link Player} media playbacks. It displays video, subtitles and album art
- * during playback, and displays playback controls using a {@link PlayerControlView}.
- *
- * <p>A PlayerView can be customized by setting attributes (or calling corresponding methods),
- * overriding drawables, overriding the view's layout file, or by specifying a custom view layout
- * file.
- *
- * <h2>Attributes</h2>
- *
- * The following attributes can be set on a PlayerView when used in a layout XML file:
- *
- * <ul>
- *   <li><b>{@code use_artwork}</b> - Whether artwork is used if available in audio streams.
- *       <ul>
- *         <li>Corresponding method: {@link #setUseArtwork(boolean)}
- *         <li>Default: {@code true}
- *       </ul>
- *   <li><b>{@code default_artwork}</b> - Default artwork to use if no artwork available in audio
- *       streams.
- *       <ul>
- *         <li>Corresponding method: {@link #setDefaultArtwork(Drawable)}
- *         <li>Default: {@code null}
- *       </ul>
- *   <li><b>{@code use_controller}</b> - Whether the playback controls can be shown.
- *       <ul>
- *         <li>Corresponding method: {@link #setUseController(boolean)}
- *         <li>Default: {@code true}
- *       </ul>
- *   <li><b>{@code hide_on_touch}</b> - Whether the playback controls are hidden by touch events.
- *       <ul>
- *         <li>Corresponding method: {@link #setControllerHideOnTouch(boolean)}
- *         <li>Default: {@code true}
- *       </ul>
- *   <li><b>{@code auto_show}</b> - Whether the playback controls are automatically shown when
- *       playback starts, pauses, ends, or fails. If set to false, the playback controls can be
- *       manually operated with {@link #showController()} and {@link #hideController()}.
- *       <ul>
- *         <li>Corresponding method: {@link #setControllerAutoShow(boolean)}
- *         <li>Default: {@code true}
- *       </ul>
- *   <li><b>{@code hide_during_ads}</b> - Whether the playback controls are hidden during ads.
- *       Controls are always shown during ads if they are enabled and the player is paused.
- *       <ul>
- *         <li>Corresponding method: {@link #setControllerHideDuringAds(boolean)}
- *         <li>Default: {@code true}
- *       </ul>
- *   <li><b>{@code show_buffering}</b> - Whether the buffering spinner is displayed when the player
- *       is buffering. Valid values are {@code never}, {@code when_playing} and {@code always}.
- *       <ul>
- *         <li>Corresponding method: {@link #setShowBuffering(int)}
- *         <li>Default: {@code never}
- *       </ul>
- *   <li><b>{@code resize_mode}</b> - Controls how video and album art is resized within the view.
- *       Valid values are {@code fit}, {@code fixed_width}, {@code fixed_height}, {@code fill} and
- *       {@code zoom}.
- *       <ul>
- *         <li>Corresponding method: {@link #setResizeMode(int)}
- *         <li>Default: {@code fit}
- *       </ul>
- *   <li><b>{@code surface_type}</b> - The type of surface view used for video playbacks. Valid
- *       values are {@code surface_view}, {@code texture_view}, {@code spherical_gl_surface_view},
- *       {@code video_decoder_gl_surface_view} and {@code none}. Using {@code none} is recommended
- *       for audio only applications, since creating the surface can be expensive. Using {@code
- *       surface_view} is recommended for video applications. Note, TextureView can only be used in
- *       a hardware accelerated window. When rendered in software, TextureView will draw nothing.
- *       <ul>
- *         <li>Corresponding method: None
- *         <li>Default: {@code surface_view}
- *       </ul>
- *   <li><b>{@code shutter_background_color}</b> - The background color of the {@code exo_shutter}
- *       view.
- *       <ul>
- *         <li>Corresponding method: {@link #setShutterBackgroundColor(int)}
- *         <li>Default: {@code unset}
- *       </ul>
- *   <li><b>{@code keep_content_on_player_reset}</b> - Whether the currently displayed video frame
- *       or media artwork is kept visible when the player is reset.
- *       <ul>
- *         <li>Corresponding method: {@link #setKeepContentOnPlayerReset(boolean)}
- *         <li>Default: {@code false}
- *       </ul>
- *   <li><b>{@code player_layout_id}</b> - Specifies the id of the layout to be inflated. See below
- *       for more details.
- *       <ul>
- *         <li>Corresponding method: None
- *         <li>Default: {@code R.layout.exo_player_view}
- *       </ul>
- *   <li><b>{@code controller_layout_id}</b> - Specifies the id of the layout resource to be
- *       inflated by the child {@link PlayerControlView}. See below for more details.
- *       <ul>
- *         <li>Corresponding method: None
- *         <li>Default: {@code R.layout.exo_player_control_view}
- *       </ul>
- *   <li>All attributes that can be set on {@link PlayerControlView} and {@link DefaultTimeBar} can
- *       also be set on a PlayerView, and will be propagated to the inflated {@link
- *       PlayerControlView} unless the layout is overridden to specify a custom {@code
- *       exo_controller} (see below).
- * </ul>
- *
- * <h2>Overriding drawables</h2>
- *
- * The drawables used by {@link PlayerControlView} (with its default layout file) can be overridden
- * by drawables with the same names defined in your application. See the {@link PlayerControlView}
- * documentation for a list of drawables that can be overridden.
- *
- * <h2>Overriding the layout file</h2>
- *
- * To customize the layout of PlayerView throughout your app, or just for certain configurations,
- * you can define {@code exo_player_view.xml} layout files in your application {@code res/layout*}
- * directories. These layouts will override the one provided by the library, and will be inflated
- * for use by PlayerView. The view identifies and binds its children by looking for the following
- * ids:
- *
- * <ul>
- *   <li><b>{@code exo_content_frame}</b> - A frame whose aspect ratio is resized based on the video
- *       or album art of the media being played, and the configured {@code resize_mode}. The video
- *       surface view is inflated into this frame as its first child.
- *       <ul>
- *         <li>Type: {@link AspectRatioFrameLayout}
- *       </ul>
- *   <li><b>{@code exo_shutter}</b> - A view that's made visible when video should be hidden. This
- *       view is typically an opaque view that covers the video surface, thereby obscuring it when
- *       visible. Obscuring the surface in this way also helps to prevent flicker at the start of
- *       playback when {@code surface_type="surface_view"}.
- *       <ul>
- *         <li>Type: {@link View}
- *       </ul>
- *   <li><b>{@code exo_buffering}</b> - A view that's made visible when the player is buffering.
- *       This view typically displays a buffering spinner or animation.
- *       <ul>
- *         <li>Type: {@link View}
- *       </ul>
- *   <li><b>{@code exo_subtitles}</b> - Displays subtitles.
- *       <ul>
- *         <li>Type: {@link SubtitleView}
- *       </ul>
- *   <li><b>{@code exo_artwork}</b> - Displays album art.
- *       <ul>
- *         <li>Type: {@link ImageView}
- *       </ul>
- *   <li><b>{@code exo_error_message}</b> - Displays an error message to the user if playback fails.
- *       <ul>
- *         <li>Type: {@link TextView}
- *       </ul>
- *   <li><b>{@code exo_controller_placeholder}</b> - A placeholder that's replaced with the inflated
- *       {@link PlayerControlView}. Ignored if an {@code exo_controller} view exists.
- *       <ul>
- *         <li>Type: {@link View}
- *       </ul>
- *   <li><b>{@code exo_controller}</b> - An already inflated {@link PlayerControlView}. Allows use
- *       of a custom extension of {@link PlayerControlView}. {@link PlayerControlView} and {@link
- *       DefaultTimeBar} attributes set on the PlayerView will not be automatically propagated
- *       through to this instance. If a view exists with this id, any {@code
- *       exo_controller_placeholder} view will be ignored.
- *       <ul>
- *         <li>Type: {@link PlayerControlView}
- *       </ul>
- *   <li><b>{@code exo_ad_overlay}</b> - A {@link FrameLayout} positioned on top of the player which
- *       is used to show ad UI (if applicable).
- *       <ul>
- *         <li>Type: {@link FrameLayout}
- *       </ul>
- *   <li><b>{@code exo_overlay}</b> - A {@link FrameLayout} positioned on top of the player which
- *       the app can access via {@link #getOverlayFrameLayout()}, provided for convenience.
- *       <ul>
- *         <li>Type: {@link FrameLayout}
- *       </ul>
- * </ul>
- *
- * <p>All child views are optional and so can be omitted if not required, however where defined they
- * must be of the expected type.
- *
- * <h2>Specifying a custom layout file</h2>
- *
- * Defining your own {@code exo_player_view.xml} is useful to customize the layout of PlayerView
- * throughout your application. It's also possible to customize the layout for a single instance in
- * a layout file. This is achieved by setting the {@code player_layout_id} attribute on a
- * PlayerView. This will cause the specified layout to be inflated instead of {@code
- * exo_player_view.xml} for only the instance on which the attribute is set.
- *
- * @deprecated Use {@link StyledPlayerView} instead.
- */
-@Deprecated
-public class ZoomableExoPlayerView extends FrameLayout implements AdViewProvider {
-
-	/**
-	 * Determines when the buffering view is shown. One of {@link #SHOW_BUFFERING_NEVER}, {@link
-	 * #SHOW_BUFFERING_WHEN_PLAYING} or {@link #SHOW_BUFFERING_ALWAYS}.
-	 */
-	@Documented
-	@Retention(RetentionPolicy.SOURCE)
-	@Target(TYPE_USE)
-	@IntDef({SHOW_BUFFERING_NEVER, SHOW_BUFFERING_WHEN_PLAYING, SHOW_BUFFERING_ALWAYS})
-	public @interface ShowBuffering {}
-	/** The buffering view is never shown. */
-	public static final int SHOW_BUFFERING_NEVER = 0;
-	/**
-	 * The buffering view is shown when the player is in the {@link Player#STATE_BUFFERING buffering}
-	 * state and {@link Player#getPlayWhenReady() playWhenReady} is {@code true}.
-	 */
-	public static final int SHOW_BUFFERING_WHEN_PLAYING = 1;
-	/**
-	 * The buffering view is always shown when the player is in the {@link Player#STATE_BUFFERING
-	 * buffering} state.
-	 */
-	public static final int SHOW_BUFFERING_ALWAYS = 2;
-
-	private static final int SURFACE_TYPE_NONE = 0;
-	private static final int SURFACE_TYPE_SURFACE_VIEW = 1;
-	private static final int SURFACE_TYPE_TEXTURE_VIEW = 2;
-	private static final int SURFACE_TYPE_SPHERICAL_GL_SURFACE_VIEW = 3;
-	private static final int SURFACE_TYPE_VIDEO_DECODER_GL_SURFACE_VIEW = 4;
-
-	private final ComponentListener componentListener;
-	@Nullable private final AspectRatioFrameLayout contentFrame;
-	@Nullable private final View shutterView;
-	@Nullable private final View surfaceView;
-	private final boolean surfaceViewIgnoresVideoAspectRatio;
-	@Nullable private final ImageView artworkView;
-	@Nullable private final SubtitleView subtitleView;
-	@Nullable private final View bufferingView;
-	@Nullable private final TextView errorMessageView;
-	@Nullable private final PlayerControlView controller;
-	@Nullable private final FrameLayout adOverlayFrameLayout;
-	@Nullable private final FrameLayout overlayFrameLayout;
-
-	@Nullable private Player player;
-	private boolean useController;
-	@Nullable private PlayerControlView.VisibilityListener controllerVisibilityListener;
-	private boolean useArtwork;
-	@Nullable private Drawable defaultArtwork;
-	private @ShowBuffering int showBuffering;
-	private boolean keepContentOnPlayerReset;
-	@Nullable private ErrorMessageProvider<? super PlaybackException> errorMessageProvider;
-	@Nullable private CharSequence customErrorMessage;
-	private int controllerShowTimeoutMs;
-	private boolean controllerAutoShow;
-	private boolean controllerHideDuringAds;
-	private boolean controllerHideOnTouch;
-	private int textureViewRotation;
-	private boolean isTouching;
-
-  public ZoomableExoPlayerView(Context context) {
-    this(context, /* attrs= */ null);
-  }
-
-  public ZoomableExoPlayerView(Context context, @Nullable AttributeSet attrs) {
-    this(context, attrs, /* defStyleAttr= */ 0);
-  }
-
-  @SuppressWarnings({"nullness:argument", "nullness:method.invocation"})
-  public ZoomableExoPlayerView(Context context, @Nullable AttributeSet attrs, int defStyleAttr) {
-    super(context, attrs, defStyleAttr);
-
-		componentListener = new ComponentListener();
-
-		if (isInEditMode()) {
-			contentFrame = null;
-			shutterView = null;
-			surfaceView = null;
-			surfaceViewIgnoresVideoAspectRatio = false;
-			artworkView = null;
-			subtitleView = null;
-			bufferingView = null;
-			errorMessageView = null;
-			controller = null;
-			adOverlayFrameLayout = null;
-			overlayFrameLayout = null;
-			ImageView logo = new ImageView(context);
-			if (Util.SDK_INT >= 23) {
-				configureEditModeLogoV23(getResources(), logo);
-			} else {
-				configureEditModeLogo(getResources(), logo);
-			}
-			addView(logo);
-			return;
-		}
-
-		boolean shutterColorSet = false;
-		int shutterColor = 0;
-		int playerLayoutId = R.layout.exo_player_view;
-		boolean useArtwork = true;
-		int defaultArtworkId = 0;
-		boolean useController = true;
-		int surfaceType = SURFACE_TYPE_SURFACE_VIEW;
-		int resizeMode = AspectRatioFrameLayout.RESIZE_MODE_FIT;
-		int controllerShowTimeoutMs = PlayerControlView.DEFAULT_SHOW_TIMEOUT_MS;
-		boolean controllerHideOnTouch = true;
-		boolean controllerAutoShow = true;
-		boolean controllerHideDuringAds = true;
-		int showBuffering = SHOW_BUFFERING_NEVER;
-		if (attrs != null) {
-			TypedArray a =
-				context
-					.getTheme()
-					.obtainStyledAttributes(
-						attrs, R.styleable.PlayerView, defStyleAttr, /* defStyleRes= */ 0);
-			try {
-				shutterColorSet = a.hasValue(R.styleable.PlayerView_shutter_background_color);
-				shutterColor = a.getColor(R.styleable.PlayerView_shutter_background_color, shutterColor);
-				playerLayoutId = a.getResourceId(R.styleable.PlayerView_player_layout_id, playerLayoutId);
-				useArtwork = a.getBoolean(R.styleable.PlayerView_use_artwork, useArtwork);
-				defaultArtworkId =
-					a.getResourceId(R.styleable.PlayerView_default_artwork, defaultArtworkId);
-				useController = a.getBoolean(R.styleable.PlayerView_use_controller, useController);
-				surfaceType = a.getInt(R.styleable.PlayerView_surface_type, surfaceType);
-				resizeMode = a.getInt(R.styleable.PlayerView_resize_mode, resizeMode);
-				controllerShowTimeoutMs =
-					a.getInt(R.styleable.PlayerView_show_timeout, controllerShowTimeoutMs);
-				controllerHideOnTouch =
-					a.getBoolean(R.styleable.PlayerView_hide_on_touch, controllerHideOnTouch);
-				controllerAutoShow = a.getBoolean(R.styleable.PlayerView_auto_show, controllerAutoShow);
-				showBuffering = a.getInteger(R.styleable.PlayerView_show_buffering, showBuffering);
-				keepContentOnPlayerReset =
-					a.getBoolean(
-						R.styleable.PlayerView_keep_content_on_player_reset, keepContentOnPlayerReset);
-				controllerHideDuringAds =
-					a.getBoolean(R.styleable.PlayerView_hide_during_ads, controllerHideDuringAds);
-			} finally {
-				a.recycle();
-			}
-		}
-
-		LayoutInflater.from(context).inflate(playerLayoutId, this);
-		setDescendantFocusability(FOCUS_AFTER_DESCENDANTS);
-
-		// Content frame.
-		contentFrame = findViewById(R.id.exo_content_frame);
-		if (contentFrame != null) {
-			setResizeModeRaw(contentFrame, resizeMode);
-		}
-
-		// Shutter view.
-		shutterView = findViewById(R.id.exo_shutter);
-		if (shutterView != null && shutterColorSet) {
-			shutterView.setBackgroundColor(shutterColor);
-		}
-
-		// Create a surface view and insert it into the content frame, if there is one.
-		boolean surfaceViewIgnoresVideoAspectRatio = false;
-		if (contentFrame != null && surfaceType != SURFACE_TYPE_NONE) {
-			ViewGroup.LayoutParams params =
-				new ViewGroup.LayoutParams(
-					ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.MATCH_PARENT);
-			switch (surfaceType) {
-				case SURFACE_TYPE_TEXTURE_VIEW:
-					// THREEMA
-					surfaceView = new ZoomableTextureView(context);
-					surfaceView.setOnClickListener(v -> performClick());
-					break;
-				case SURFACE_TYPE_SPHERICAL_GL_SURFACE_VIEW:
-					try {
-						Class<?> clazz =
-							Class.forName(
-								"com.google.android.exoplayer2.video.spherical.SphericalGLSurfaceView");
-						surfaceView = (View) clazz.getConstructor(Context.class).newInstance(context);
-					} catch (Exception e) {
-						throw new IllegalStateException(
-							"spherical_gl_surface_view requires an ExoPlayer dependency", e);
-					}
-					surfaceViewIgnoresVideoAspectRatio = true;
-					break;
-				case SURFACE_TYPE_VIDEO_DECODER_GL_SURFACE_VIEW:
-					try {
-						Class<?> clazz =
-							Class.forName("com.google.android.exoplayer2.video.VideoDecoderGLSurfaceView");
-						surfaceView = (View) clazz.getConstructor(Context.class).newInstance(context);
-					} catch (Exception e) {
-						throw new IllegalStateException(
-							"video_decoder_gl_surface_view requires an ExoPlayer dependency", e);
-					}
-					break;
-				default:
-					surfaceView = new SurfaceView(context);
-					break;
-			}
-			surfaceView.setLayoutParams(params);
-			// We don't want surfaceView to be clickable separately to the PlayerView itself, but we
-			// do want to register as an OnClickListener so that surfaceView implementations can propagate
-			// click events up to the PlayerView by calling their own performClick method.
-			surfaceView.setOnClickListener(componentListener);
-			surfaceView.setClickable(false);
-			contentFrame.addView(surfaceView, 0);
-		} else {
-			surfaceView = null;
-		}
-		this.surfaceViewIgnoresVideoAspectRatio = surfaceViewIgnoresVideoAspectRatio;
-
-		// Ad overlay frame layout.
-		adOverlayFrameLayout = findViewById(R.id.exo_ad_overlay);
-
-		// Overlay frame layout.
-		overlayFrameLayout = findViewById(R.id.exo_overlay);
-
-		// Artwork view.
-		artworkView = findViewById(R.id.exo_artwork);
-		this.useArtwork = useArtwork && artworkView != null;
-		if (defaultArtworkId != 0) {
-			defaultArtwork = ContextCompat.getDrawable(getContext(), defaultArtworkId);
-		}
-
-		// Subtitle view.
-		subtitleView = findViewById(R.id.exo_subtitles);
-		if (subtitleView != null) {
-			subtitleView.setUserDefaultStyle();
-			subtitleView.setUserDefaultTextSize();
-		}
-
-		// Buffering view.
-		bufferingView = findViewById(R.id.exo_buffering);
-		if (bufferingView != null) {
-			bufferingView.setVisibility(View.GONE);
-		}
-		this.showBuffering = showBuffering;
-
-		// Error message view.
-		errorMessageView = findViewById(R.id.exo_error_message);
-		if (errorMessageView != null) {
-			errorMessageView.setVisibility(View.GONE);
-		}
-
-		// Playback control view.
-		PlayerControlView customController = findViewById(R.id.exo_controller);
-		View controllerPlaceholder = findViewById(R.id.exo_controller_placeholder);
-		if (customController != null) {
-			this.controller = customController;
-		} else if (controllerPlaceholder != null) {
-			// Propagate attrs as playbackAttrs so that PlayerControlView's custom attributes are
-			// transferred, but standard attributes (e.g. background) are not.
-			this.controller = new PlayerControlView(context, null, 0, attrs);
-			controller.setId(R.id.exo_controller);
-			controller.setLayoutParams(controllerPlaceholder.getLayoutParams());
-			ViewGroup parent = ((ViewGroup) controllerPlaceholder.getParent());
-			int controllerIndex = parent.indexOfChild(controllerPlaceholder);
-			parent.removeView(controllerPlaceholder);
-			parent.addView(controller, controllerIndex);
-		} else {
-			this.controller = null;
-		}
-		this.controllerShowTimeoutMs = controller != null ? controllerShowTimeoutMs : 0;
-		this.controllerHideOnTouch = controllerHideOnTouch;
-		this.controllerAutoShow = controllerAutoShow;
-		this.controllerHideDuringAds = controllerHideDuringAds;
-		this.useController = useController && controller != null;
-		if (controller != null) {
-			controller.hide();
-			controller.addVisibilityListener(/* listener= */ componentListener);
-		}
-		if (useController) {
-			setClickable(true);
-		}
-		updateContentDescription();
-	}
-
-	/**
-	 * Switches the view targeted by a given {@link Player}.
-	 *
-	 * @param player The player whose target view is being switched.
-	 * @param oldPlayerView The old view to detach from the player.
-	 * @param newPlayerView The new view to attach to the player.
-	 */
-	public static void switchTargetView(
-		Player player, @Nullable ZoomableExoPlayerView oldPlayerView, @Nullable ZoomableExoPlayerView newPlayerView) {
-		if (oldPlayerView == newPlayerView) {
-			return;
-		}
-		// We attach the new view before detaching the old one because this ordering allows the player
-		// to swap directly from one surface to another, without transitioning through a state where no
-		// surface is attached. This is significantly more efficient and achieves a more seamless
-		// transition when using platform provided video decoders.
-		if (newPlayerView != null) {
-			newPlayerView.setPlayer(player);
-		}
-		if (oldPlayerView != null) {
-			oldPlayerView.setPlayer(null);
-		}
-	}
-
-	/** Returns the player currently set on this view, or null if no player is set. */
-	@Nullable
-	public Player getPlayer() {
-		return player;
-	}
-
-	/**
-	 * Sets the {@link Player} to use.
-	 *
-	 * <p>To transition a {@link Player} from targeting one view to another, it's recommended to use
-	 * {@link #switchTargetView(Player, ZoomableExoPlayerView, ZoomableExoPlayerView)} rather than this method. If you do
-	 * wish to use this method directly, be sure to attach the player to the new view <em>before</em>
-	 * calling {@code setPlayer(null)} to detach it from the old one. This ordering is significantly
-	 * more efficient and may allow for more seamless transitions.
-	 *
-	 * @param player The {@link Player} to use, or {@code null} to detach the current player. Only
-	 *     players which are accessed on the main thread are supported ({@code
-	 *     player.getApplicationLooper() == Looper.getMainLooper()}).
-	 */
-	public void setPlayer(@Nullable Player player) {
-		Assertions.checkState(Looper.myLooper() == Looper.getMainLooper());
-		Assertions.checkArgument(
-			player == null || player.getApplicationLooper() == Looper.getMainLooper());
-		if (this.player == player) {
-			return;
-		}
-		@Nullable Player oldPlayer = this.player;
-		if (oldPlayer != null) {
-			oldPlayer.removeListener(componentListener);
-			if (oldPlayer.isCommandAvailable(COMMAND_SET_VIDEO_SURFACE)) {
-				if (surfaceView instanceof TextureView) {
-					oldPlayer.clearVideoTextureView((TextureView) surfaceView);
-				} else if (surfaceView instanceof SurfaceView) {
-					oldPlayer.clearVideoSurfaceView((SurfaceView) surfaceView);
-				}
-			}
-		}
-		if (subtitleView != null) {
-			subtitleView.setCues(null);
-		}
-		this.player = player;
-		if (useController()) {
-			controller.setPlayer(player);
-		}
-		updateBuffering();
-		updateErrorMessage();
-		updateForCurrentTrackSelections(/* isNewPlayer= */ true);
-		if (player != null) {
-			if (player.isCommandAvailable(COMMAND_SET_VIDEO_SURFACE)) {
-				if (surfaceView instanceof TextureView) {
-					player.setVideoTextureView((TextureView) surfaceView);
-				} else if (surfaceView instanceof SurfaceView) {
-					player.setVideoSurfaceView((SurfaceView) surfaceView);
-				}
-				updateAspectRatio();
-			}
-			if (subtitleView != null && player.isCommandAvailable(COMMAND_GET_TEXT)) {
-				subtitleView.setCues(player.getCurrentCues().cues);
-			}
-			player.addListener(componentListener);
-			maybeShowController(false);
-		} else {
-			hideController();
-		}
-	}
-
-	@Override
-	public void setVisibility(int visibility) {
-		super.setVisibility(visibility);
-		if (surfaceView instanceof SurfaceView) {
-			// Work around https://github.com/google/ExoPlayer/issues/3160.
-			surfaceView.setVisibility(visibility);
-		}
-	}
-
-	/**
-	 * Sets the {@link ResizeMode}.
-	 *
-	 * @param resizeMode The {@link ResizeMode}.
-	 */
-	public void setResizeMode(@ResizeMode int resizeMode) {
-		Assertions.checkStateNotNull(contentFrame);
-		contentFrame.setResizeMode(resizeMode);
-	}
-
-	/** Returns the {@link ResizeMode}. */
-	public @ResizeMode int getResizeMode() {
-		Assertions.checkStateNotNull(contentFrame);
-		return contentFrame.getResizeMode();
-	}
-
-	/** Returns whether artwork is displayed if present in the media. */
-	public boolean getUseArtwork() {
-		return useArtwork;
-	}
-
-	/**
-	 * Sets whether artwork is displayed if present in the media.
-	 *
-	 * @param useArtwork Whether artwork is displayed.
-	 */
-	public void setUseArtwork(boolean useArtwork) {
-		Assertions.checkState(!useArtwork || artworkView != null);
-		if (this.useArtwork != useArtwork) {
-			this.useArtwork = useArtwork;
-			updateForCurrentTrackSelections(/* isNewPlayer= */ false);
-		}
-	}
-
-	/** Returns the default artwork to display. */
-	@Nullable
-	public Drawable getDefaultArtwork() {
-		return defaultArtwork;
-	}
-
-	/**
-	 * Sets the default artwork to display if {@code useArtwork} is {@code true} and no artwork is
-	 * present in the media.
-	 *
-	 * @param defaultArtwork the default artwork to display
-	 */
-	public void setDefaultArtwork(@Nullable Drawable defaultArtwork) {
-		if (this.defaultArtwork != defaultArtwork) {
-			this.defaultArtwork = defaultArtwork;
-			updateForCurrentTrackSelections(/* isNewPlayer= */ false);
-		}
-	}
-
-	/** Returns whether the playback controls can be shown. */
-	public boolean getUseController() {
-		return useController;
-	}
-
-	/**
-	 * Sets whether the playback controls can be shown. If set to {@code false} the playback controls
-	 * are never visible and are disconnected from the player.
-	 *
-	 * <p>This call will update whether the view is clickable. After the call, the view will be
-	 * clickable if playback controls can be shown or if the view has a registered click listener.
-	 *
-	 * @param useController Whether the playback controls can be shown.
-	 */
-	public void setUseController(boolean useController) {
-		Assertions.checkState(!useController || controller != null);
-		setClickable(useController || hasOnClickListeners());
-		if (this.useController == useController) {
-			return;
-		}
-		this.useController = useController;
-		if (useController()) {
-			controller.setPlayer(player);
-		} else if (controller != null) {
-			controller.hide();
-			controller.setPlayer(/* player= */ null);
-		}
-		updateContentDescription();
-	}
-
-	/**
-	 * Sets the background color of the {@code exo_shutter} view.
-	 *
-	 * @param color The background color.
-	 */
-	public void setShutterBackgroundColor(int color) {
-		if (shutterView != null) {
-			shutterView.setBackgroundColor(color);
-		}
-	}
-
-	/**
-	 * Sets whether the currently displayed video frame or media artwork is kept visible when the
-	 * player is reset. A player reset is defined to mean the player being re-prepared with different
-	 * media, the player transitioning to unprepared media or an empty list of media items, or the
-	 * player being replaced or cleared by calling {@link #setPlayer(Player)}.
-	 *
-	 * <p>If enabled, the currently displayed video frame or media artwork will be kept visible until
-	 * the player set on the view has been successfully prepared with new media and loaded enough of
-	 * it to have determined the available tracks. Hence enabling this option allows transitioning
-	 * from playing one piece of media to another, or from using one player instance to another,
-	 * without clearing the view's content.
-	 *
-	 * <p>If disabled, the currently displayed video frame or media artwork will be hidden as soon as
-	 * the player is reset. Note that the video frame is hidden by making {@code exo_shutter} visible.
-	 * Hence the video frame will not be hidden if using a custom layout that omits this view.
-	 *
-	 * @param keepContentOnPlayerReset Whether the currently displayed video frame or media artwork is
-	 *     kept visible when the player is reset.
-	 */
-	public void setKeepContentOnPlayerReset(boolean keepContentOnPlayerReset) {
-		if (this.keepContentOnPlayerReset != keepContentOnPlayerReset) {
-			this.keepContentOnPlayerReset = keepContentOnPlayerReset;
-			updateForCurrentTrackSelections(/* isNewPlayer= */ false);
-		}
-	}
-
-	/**
-	 * Sets whether a buffering spinner is displayed when the player is in the buffering state. The
-	 * buffering spinner is not displayed by default.
-	 *
-	 * @param showBuffering The mode that defines when the buffering spinner is displayed. One of
-	 *     {@link #SHOW_BUFFERING_NEVER}, {@link #SHOW_BUFFERING_WHEN_PLAYING} and {@link
-	 *     #SHOW_BUFFERING_ALWAYS}.
-	 */
-	public void setShowBuffering(@ShowBuffering int showBuffering) {
-		if (this.showBuffering != showBuffering) {
-			this.showBuffering = showBuffering;
-			updateBuffering();
-		}
-	}
-
-	/**
-	 * Sets the optional {@link ErrorMessageProvider}.
-	 *
-	 * @param errorMessageProvider The error message provider.
-	 */
-	public void setErrorMessageProvider(
-		@Nullable ErrorMessageProvider<? super PlaybackException> errorMessageProvider) {
-		if (this.errorMessageProvider != errorMessageProvider) {
-			this.errorMessageProvider = errorMessageProvider;
-			updateErrorMessage();
-		}
-	}
-
-	/**
-	 * Sets a custom error message to be displayed by the view. The error message will be displayed
-	 * permanently, unless it is cleared by passing {@code null} to this method.
-	 *
-	 * @param message The message to display, or {@code null} to clear a previously set message.
-	 */
-	public void setCustomErrorMessage(@Nullable CharSequence message) {
-		Assertions.checkState(errorMessageView != null);
-		customErrorMessage = message;
-		updateErrorMessage();
-	}
-
-	@Override
-	public boolean dispatchKeyEvent(KeyEvent event) {
-		if (player != null && player.isPlayingAd()) {
-			return super.dispatchKeyEvent(event);
-		}
-
-		boolean isDpadKey = isDpadKey(event.getKeyCode());
-		boolean handled = false;
-		if (isDpadKey && useController() && !controller.isVisible()) {
-			// Handle the key event by showing the controller.
-			maybeShowController(true);
-			handled = true;
-		} else if (dispatchMediaKeyEvent(event) || super.dispatchKeyEvent(event)) {
-			// The key event was handled as a media key or by the super class. We should also show the
-			// controller, or extend its show timeout if already visible.
-			maybeShowController(true);
-			handled = true;
-		} else if (isDpadKey && useController()) {
-			// The key event wasn't handled, but we should extend the controller's show timeout.
-			maybeShowController(true);
-		}
-		return handled;
-	}
-
-	/**
-	 * Called to process media key events. Any {@link KeyEvent} can be passed but only media key
-	 * events will be handled. Does nothing if playback controls are disabled.
-	 *
-	 * @param event A key event.
-	 * @return Whether the key event was handled.
-	 */
-	public boolean dispatchMediaKeyEvent(KeyEvent event) {
-		return useController() && controller.dispatchMediaKeyEvent(event);
-	}
-
-	/** Returns whether the controller is currently visible. */
-	public boolean isControllerVisible() {
-		return controller != null && controller.isVisible();
-	}
-
-	/**
-	 * Shows the playback controls. Does nothing if playback controls are disabled.
-	 *
-	 * <p>The playback controls are automatically hidden during playback after {{@link
-	 * #getControllerShowTimeoutMs()}}. They are shown indefinitely when playback has not started yet,
-	 * is paused, has ended or failed.
-	 */
-	public void showController() {
-		showController(shouldShowControllerIndefinitely());
-	}
-
-	/** Hides the playback controls. Does nothing if playback controls are disabled. */
-	public void hideController() {
-		if (controller != null) {
-			controller.hide();
-		}
-	}
-
-	/**
-	 * Returns the playback controls timeout. The playback controls are automatically hidden after
-	 * this duration of time has elapsed without user input and with playback or buffering in
-	 * progress.
-	 *
-	 * @return The timeout in milliseconds. A non-positive value will cause the controller to remain
-	 *     visible indefinitely.
-	 */
-	public int getControllerShowTimeoutMs() {
-		return controllerShowTimeoutMs;
-	}
-
-	/**
-	 * Sets the playback controls timeout. The playback controls are automatically hidden after this
-	 * duration of time has elapsed without user input and with playback or buffering in progress.
-	 *
-	 * @param controllerShowTimeoutMs The timeout in milliseconds. A non-positive value will cause the
-	 *     controller to remain visible indefinitely.
-	 */
-	public void setControllerShowTimeoutMs(int controllerShowTimeoutMs) {
-		Assertions.checkStateNotNull(controller);
-		this.controllerShowTimeoutMs = controllerShowTimeoutMs;
-		if (controller.isVisible()) {
-			// Update the controller's timeout if necessary.
-			showController();
-		}
-	}
-
-	/** Returns whether the playback controls are hidden by touch events. */
-	public boolean getControllerHideOnTouch() {
-		return controllerHideOnTouch;
-	}
-
-	/**
-	 * Sets whether the playback controls are hidden by touch events.
-	 *
-	 * @param controllerHideOnTouch Whether the playback controls are hidden by touch events.
-	 */
-	public void setControllerHideOnTouch(boolean controllerHideOnTouch) {
-		Assertions.checkStateNotNull(controller);
-		this.controllerHideOnTouch = controllerHideOnTouch;
-		updateContentDescription();
-	}
-
-	/**
-	 * Returns whether the playback controls are automatically shown when playback starts, pauses,
-	 * ends, or fails. If set to false, the playback controls can be manually operated with {@link
-	 * #showController()} and {@link #hideController()}.
-	 */
-	public boolean getControllerAutoShow() {
-		return controllerAutoShow;
-	}
-
-	/**
-	 * Sets whether the playback controls are automatically shown when playback starts, pauses, ends,
-	 * or fails. If set to false, the playback controls can be manually operated with {@link
-	 * #showController()} and {@link #hideController()}.
-	 *
-	 * @param controllerAutoShow Whether the playback controls are allowed to show automatically.
-	 */
-	public void setControllerAutoShow(boolean controllerAutoShow) {
-		this.controllerAutoShow = controllerAutoShow;
-	}
-
-	/**
-	 * Sets whether the playback controls are hidden when ads are playing. Controls are always shown
-	 * during ads if they are enabled and the player is paused.
-	 *
-	 * @param controllerHideDuringAds Whether the playback controls are hidden when ads are playing.
-	 */
-	public void setControllerHideDuringAds(boolean controllerHideDuringAds) {
-		this.controllerHideDuringAds = controllerHideDuringAds;
-	}
-
-	/**
-	 * Sets the {@link PlayerControlView.VisibilityListener}.
-	 *
-	 * @param listener The listener to be notified about visibility changes, or null to remove the
-	 *     current listener.
-	 */
-	public void setControllerVisibilityListener(
-		@Nullable PlayerControlView.VisibilityListener listener) {
-		Assertions.checkStateNotNull(controller);
-		if (this.controllerVisibilityListener == listener) {
-			return;
-		}
-		if (this.controllerVisibilityListener != null) {
-			controller.removeVisibilityListener(this.controllerVisibilityListener);
-		}
-		this.controllerVisibilityListener = listener;
-		if (listener != null) {
-			controller.addVisibilityListener(listener);
-		}
-	}
-
-	/**
-	 * Sets whether the rewind button is shown.
-	 *
-	 * @param showRewindButton Whether the rewind button is shown.
-	 */
-	public void setShowRewindButton(boolean showRewindButton) {
-		Assertions.checkStateNotNull(controller);
-		controller.setShowRewindButton(showRewindButton);
-	}
-
-	/**
-	 * Sets whether the fast forward button is shown.
-	 *
-	 * @param showFastForwardButton Whether the fast forward button is shown.
-	 */
-	public void setShowFastForwardButton(boolean showFastForwardButton) {
-		Assertions.checkStateNotNull(controller);
-		controller.setShowFastForwardButton(showFastForwardButton);
-	}
-
-	/**
-	 * Sets whether the previous button is shown.
-	 *
-	 * @param showPreviousButton Whether the previous button is shown.
-	 */
-	public void setShowPreviousButton(boolean showPreviousButton) {
-		Assertions.checkStateNotNull(controller);
-		controller.setShowPreviousButton(showPreviousButton);
-	}
-
-	/**
-	 * Sets whether the next button is shown.
-	 *
-	 * @param showNextButton Whether the next button is shown.
-	 */
-	public void setShowNextButton(boolean showNextButton) {
-		Assertions.checkStateNotNull(controller);
-		controller.setShowNextButton(showNextButton);
-	}
-
-	/**
-	 * Sets which repeat toggle modes are enabled.
-	 *
-	 * @param repeatToggleModes A set of {@link RepeatModeUtil.RepeatToggleModes}.
-	 */
-	public void setRepeatToggleModes(@RepeatModeUtil.RepeatToggleModes int repeatToggleModes) {
-		Assertions.checkStateNotNull(controller);
-		controller.setRepeatToggleModes(repeatToggleModes);
-	}
-
-	/**
-	 * Sets whether the shuffle button is shown.
-	 *
-	 * @param showShuffleButton Whether the shuffle button is shown.
-	 */
-	public void setShowShuffleButton(boolean showShuffleButton) {
-		Assertions.checkStateNotNull(controller);
-		controller.setShowShuffleButton(showShuffleButton);
-	}
-
-	/**
-	 * Sets whether the time bar should show all windows, as opposed to just the current one.
-	 *
-	 * @param showMultiWindowTimeBar Whether to show all windows.
-	 */
-	public void setShowMultiWindowTimeBar(boolean showMultiWindowTimeBar) {
-		Assertions.checkStateNotNull(controller);
-		controller.setShowMultiWindowTimeBar(showMultiWindowTimeBar);
-	}
-
-	/**
-	 * Sets the millisecond positions of extra ad markers relative to the start of the window (or
-	 * timeline, if in multi-window mode) and whether each extra ad has been played or not. The
-	 * markers are shown in addition to any ad markers for ads in the player's timeline.
-	 *
-	 * @param extraAdGroupTimesMs The millisecond timestamps of the extra ad markers to show, or
-	 *     {@code null} to show no extra ad markers.
-	 * @param extraPlayedAdGroups Whether each ad has been played, or {@code null} to show no extra ad
-	 *     markers.
-	 */
-	public void setExtraAdGroupMarkers(
-		@Nullable long[] extraAdGroupTimesMs, @Nullable boolean[] extraPlayedAdGroups) {
-		Assertions.checkStateNotNull(controller);
-		controller.setExtraAdGroupMarkers(extraAdGroupTimesMs, extraPlayedAdGroups);
-	}
-
-	/**
-	 * Sets the {@link AspectRatioFrameLayout.AspectRatioListener}.
-	 *
-	 * @param listener The listener to be notified about aspect ratios changes of the video content or
-	 *     the content frame.
-	 */
-	public void setAspectRatioListener(
-		@Nullable AspectRatioFrameLayout.AspectRatioListener listener) {
-		Assertions.checkStateNotNull(contentFrame);
-		contentFrame.setAspectRatioListener(listener);
-	}
-
-	/**
-	 * Gets the view onto which video is rendered. This is a:
-	 *
-	 * <ul>
-	 *   <li>{@link SurfaceView} by default, or if the {@code surface_type} attribute is set to {@code
-	 *       surface_view}.
-	 *   <li>{@link TextureView} if {@code surface_type} is {@code texture_view}.
-	 *   <li>{@code SphericalGLSurfaceView} if {@code surface_type} is {@code
-	 *       spherical_gl_surface_view}.
-	 *   <li>{@code VideoDecoderGLSurfaceView} if {@code surface_type} is {@code
-	 *       video_decoder_gl_surface_view}.
-	 *   <li>{@code null} if {@code surface_type} is {@code none}.
-	 * </ul>
-	 *
-	 * @return The {@link SurfaceView}, {@link TextureView}, {@code SphericalGLSurfaceView}, {@code
-	 *     VideoDecoderGLSurfaceView} or {@code null}.
-	 */
-	@Nullable
-	public View getVideoSurfaceView() {
-		return surfaceView;
-	}
-
-	/**
-	 * Gets the overlay {@link FrameLayout}, which can be populated with UI elements to show on top of
-	 * the player.
-	 *
-	 * @return The overlay {@link FrameLayout}, or {@code null} if the layout has been customized and
-	 *     the overlay is not present.
-	 */
-	@Nullable
-	public FrameLayout getOverlayFrameLayout() {
-		return overlayFrameLayout;
-	}
-
-	/**
-	 * Gets the {@link SubtitleView}.
-	 *
-	 * @return The {@link SubtitleView}, or {@code null} if the layout has been customized and the
-	 *     subtitle view is not present.
-	 */
-	@Nullable
-	public SubtitleView getSubtitleView() {
-		return subtitleView;
-	}
-
-	@Override
-	public boolean performClick() {
-		toggleControllerVisibility();
-		return super.performClick();
-	}
-
-	@Override
-	public boolean onTrackballEvent(MotionEvent ev) {
-		if (!useController() || player == null) {
-			return false;
-		}
-		maybeShowController(true);
-		return true;
-	}
-
-	/**
-	 * Should be called when the player is visible to the user, if the {@code surface_type} extends
-	 * {@link GLSurfaceView}. It is the counterpart to {@link #onPause()}.
-	 *
-	 * <p>This method should typically be called in {@code Activity.onStart()}, or {@code
-	 * Activity.onResume()} for API versions &lt;= 23.
-	 */
-	public void onResume() {
-		if (surfaceView instanceof GLSurfaceView) {
-			((GLSurfaceView) surfaceView).onResume();
-		}
-	}
-
-	/**
-	 * Should be called when the player is no longer visible to the user, if the {@code surface_type}
-	 * extends {@link GLSurfaceView}. It is the counterpart to {@link #onResume()}.
-	 *
-	 * <p>This method should typically be called in {@code Activity.onStop()}, or {@code
-	 * Activity.onPause()} for API versions &lt;= 23.
-	 */
-	public void onPause() {
-		if (surfaceView instanceof GLSurfaceView) {
-			((GLSurfaceView) surfaceView).onPause();
-		}
-	}
-
-	/**
-	 * Called when there's a change in the desired aspect ratio of the content frame. The default
-	 * implementation sets the aspect ratio of the content frame to the specified value.
-	 *
-	 * @param contentFrame The content frame, or {@code null}.
-	 * @param aspectRatio The aspect ratio to apply.
-	 */
-	protected void onContentAspectRatioChanged(
-		@Nullable AspectRatioFrameLayout contentFrame, float aspectRatio) {
-		if (contentFrame != null) {
-			contentFrame.setAspectRatio(aspectRatio);
-		}
-	}
-
-	// AdsLoader.AdViewProvider implementation.
-
-	@Override
-	public ViewGroup getAdViewGroup() {
-		return Assertions.checkStateNotNull(
-			adOverlayFrameLayout, "exo_ad_overlay must be present for ad playback");
-	}
-
-	@Override
-	public List<AdOverlayInfo> getAdOverlayInfos() {
-		List<AdOverlayInfo> overlayViews = new ArrayList<>();
-		if (overlayFrameLayout != null) {
-			overlayViews.add(
-				new AdOverlayInfo(
-					overlayFrameLayout,
-					AdOverlayInfo.PURPOSE_NOT_VISIBLE,
-					/* detailedReason= */ "Transparent overlay does not impact viewability"));
-		}
-		if (controller != null) {
-			overlayViews.add(new AdOverlayInfo(controller, AdOverlayInfo.PURPOSE_CONTROLS));
-		}
-		return ImmutableList.copyOf(overlayViews);
-	}
-
-	// Internal methods.
-	private boolean useController() {
-		if (useController) {
-			Assertions.checkStateNotNull(controller);
-			return true;
-		}
-		return false;
-	}
-
-	private boolean useArtwork() {
-		if (useArtwork) {
-			Assertions.checkStateNotNull(artworkView);
-			return true;
-		}
-		return false;
-	}
-
-	private void toggleControllerVisibility() {
-		if (!useController() || player == null) {
-			return;
-		}
-		if (!controller.isVisible()) {
-			maybeShowController(true);
-		} else if (controllerHideOnTouch) {
-			controller.hide();
-		}
-	}
-
-	/** Shows the playback controls, but only if forced or shown indefinitely. */
-	private void maybeShowController(boolean isForced) {
-		if (isPlayingAd() && controllerHideDuringAds) {
-			return;
-		}
-		if (useController()) {
-			boolean wasShowingIndefinitely = controller.isVisible() && controller.getShowTimeoutMs() <= 0;
-			boolean shouldShowIndefinitely = shouldShowControllerIndefinitely();
-			if (isForced || wasShowingIndefinitely || shouldShowIndefinitely) {
-				showController(shouldShowIndefinitely);
-			}
-		}
-	}
-
-	private boolean shouldShowControllerIndefinitely() {
-		if (player == null) {
-			return true;
-		}
-		int playbackState = player.getPlaybackState();
-		return controllerAutoShow
-			&& (playbackState == Player.STATE_IDLE
-			|| playbackState == Player.STATE_ENDED
-			|| !player.getPlayWhenReady());
-	}
-
-	private void showController(boolean showIndefinitely) {
-		if (!useController()) {
-			return;
-		}
-		controller.setShowTimeoutMs(showIndefinitely ? 0 : controllerShowTimeoutMs);
-		controller.show();
-	}
-
-	private boolean isPlayingAd() {
-		return player != null && player.isPlayingAd() && player.getPlayWhenReady();
-	}
-
-	private void updateForCurrentTrackSelections(boolean isNewPlayer) {
-		@Nullable Player player = this.player;
-		if (player == null
-			|| !player.isCommandAvailable(Player.COMMAND_GET_TRACKS)
-			|| player.getCurrentTracks().isEmpty()) {
-			if (!keepContentOnPlayerReset) {
-				hideArtwork();
-				closeShutter();
-			}
-			return;
-		}
-
-		if (isNewPlayer && !keepContentOnPlayerReset) {
-			// Hide any video from the previous player.
-			closeShutter();
-		}
-		if (player.getCurrentTracks().isTypeSelected(C.TRACK_TYPE_VIDEO)) {
-			// Video enabled, so artwork must be hidden. If the shutter is closed, it will be opened
-			// in onRenderedFirstFrame().
-			hideArtwork();
-			return;
-		}
-
-		// Video disabled so the shutter must be closed.
-		closeShutter();
-		// Display artwork if enabled and available, else hide it.
-		if (useArtwork()) {
-			if (setArtworkFromMediaMetadata(player.getMediaMetadata())) {
-				return;
-			}
-			if (setDrawableArtwork(defaultArtwork)) {
-				return;
-			}
-		}
-		// Artwork disabled or unavailable.
-		hideArtwork();
-	}
-
-	private void updateAspectRatio() {
-		VideoSize videoSize = player != null ? player.getVideoSize() : VideoSize.UNKNOWN;
-		int width = videoSize.width;
-		int height = videoSize.height;
-		int unappliedRotationDegrees = videoSize.unappliedRotationDegrees;
-		float videoAspectRatio =
-			(height == 0 || width == 0) ? 0 : (width * videoSize.pixelWidthHeightRatio) / height;
-
-		if (surfaceView instanceof TextureView) {
-			// Try to apply rotation transformation when our surface is a TextureView.
-			if (videoAspectRatio > 0
-				&& (unappliedRotationDegrees == 90 || unappliedRotationDegrees == 270)) {
-				// We will apply a rotation 90/270 degree to the output texture of the TextureView.
-				// In this case, the output video's width and height will be swapped.
-				videoAspectRatio = 1 / videoAspectRatio;
-			}
-			if (textureViewRotation != 0) {
-				surfaceView.removeOnLayoutChangeListener(componentListener);
-			}
-			textureViewRotation = unappliedRotationDegrees;
-			if (textureViewRotation != 0) {
-				// The texture view's dimensions might be changed after layout step.
-				// So add an OnLayoutChangeListener to apply rotation after layout step.
-				surfaceView.addOnLayoutChangeListener(componentListener);
-			}
-			applyTextureViewRotation((TextureView) surfaceView, textureViewRotation);
-		}
-
-		onContentAspectRatioChanged(
-			contentFrame, surfaceViewIgnoresVideoAspectRatio ? 0 : videoAspectRatio);
-	}
-
-	private boolean setArtworkFromMediaMetadata(MediaMetadata mediaMetadata) {
-		if (mediaMetadata.artworkData == null) {
-			return false;
-		}
-		Bitmap bitmap =
-			BitmapFactory.decodeByteArray(
-				mediaMetadata.artworkData, /* offset= */ 0, mediaMetadata.artworkData.length);
-		return setDrawableArtwork(new BitmapDrawable(getResources(), bitmap));
-	}
-
-	private boolean setDrawableArtwork(@Nullable Drawable drawable) {
-		if (drawable != null) {
-			int drawableWidth = drawable.getIntrinsicWidth();
-			int drawableHeight = drawable.getIntrinsicHeight();
-			if (drawableWidth > 0 && drawableHeight > 0) {
-				float artworkAspectRatio = (float) drawableWidth / drawableHeight;
-				onContentAspectRatioChanged(contentFrame, artworkAspectRatio);
-				artworkView.setImageDrawable(drawable);
-				artworkView.setVisibility(VISIBLE);
-				return true;
-			}
-		}
-		return false;
-	}
-
-	private void hideArtwork() {
-		if (artworkView != null) {
-			artworkView.setImageResource(android.R.color.transparent); // Clears any bitmap reference.
-			artworkView.setVisibility(INVISIBLE);
-		}
-	}
-
-	private void closeShutter() {
-		if (shutterView != null) {
-			shutterView.setVisibility(View.VISIBLE);
-		}
-	}
-
-	private void updateBuffering() {
-		if (bufferingView != null) {
-			boolean showBufferingSpinner =
-				player != null
-					&& player.getPlaybackState() == Player.STATE_BUFFERING
-					&& (showBuffering == SHOW_BUFFERING_ALWAYS
-					|| (showBuffering == SHOW_BUFFERING_WHEN_PLAYING && player.getPlayWhenReady()));
-			bufferingView.setVisibility(showBufferingSpinner ? View.VISIBLE : View.GONE);
-		}
-	}
-
-	private void updateErrorMessage() {
-		if (errorMessageView != null) {
-			if (customErrorMessage != null) {
-				errorMessageView.setText(customErrorMessage);
-				errorMessageView.setVisibility(View.VISIBLE);
-				return;
-			}
-			@Nullable PlaybackException error = player != null ? player.getPlayerError() : null;
-			if (error != null && errorMessageProvider != null) {
-				CharSequence errorMessage = errorMessageProvider.getErrorMessage(error).second;
-				errorMessageView.setText(errorMessage);
-				errorMessageView.setVisibility(View.VISIBLE);
-			} else {
-				errorMessageView.setVisibility(View.GONE);
-			}
-		}
-	}
-
-	private void updateContentDescription() {
-		if (controller == null || !useController) {
-			setContentDescription(/* contentDescription= */ null);
-		} else if (controller.getVisibility() == View.VISIBLE) {
-			setContentDescription(
-				/* contentDescription= */ controllerHideOnTouch
-					? getResources().getString(R.string.exo_controls_hide)
-					: null);
-		} else {
-			setContentDescription(
-				/* contentDescription= */ getResources().getString(R.string.exo_controls_show));
-		}
-	}
-
-	private void updateControllerVisibility() {
-		if (isPlayingAd() && controllerHideDuringAds) {
-			hideController();
-		} else {
-			maybeShowController(false);
-		}
-	}
-
-	@RequiresApi(23)
-	private static void configureEditModeLogoV23(Resources resources, ImageView logo) {
-		logo.setImageDrawable(resources.getDrawable(R.drawable.exo_edit_mode_logo, null));
-		logo.setBackgroundColor(resources.getColor(R.color.exo_edit_mode_background_color, null));
-	}
-
-	private static void configureEditModeLogo(Resources resources, ImageView logo) {
-		logo.setImageDrawable(resources.getDrawable(R.drawable.exo_edit_mode_logo));
-		logo.setBackgroundColor(resources.getColor(R.color.exo_edit_mode_background_color));
-	}
-
-	@SuppressWarnings("ResourceType")
-	private static void setResizeModeRaw(AspectRatioFrameLayout aspectRatioFrame, int resizeMode) {
-		aspectRatioFrame.setResizeMode(resizeMode);
-	}
-
-	/** Applies a texture rotation to a {@link TextureView}. */
-	private static void applyTextureViewRotation(TextureView textureView, int textureViewRotation) {
-		Matrix transformMatrix = new Matrix();
-		float textureViewWidth = textureView.getWidth();
-		float textureViewHeight = textureView.getHeight();
-		if (textureViewWidth != 0 && textureViewHeight != 0 && textureViewRotation != 0) {
-			float pivotX = textureViewWidth / 2;
-			float pivotY = textureViewHeight / 2;
-			transformMatrix.postRotate(textureViewRotation, pivotX, pivotY);
-
-			// After rotation, scale the rotated texture to fit the TextureView size.
-			RectF originalTextureRect = new RectF(0, 0, textureViewWidth, textureViewHeight);
-			RectF rotatedTextureRect = new RectF();
-			transformMatrix.mapRect(rotatedTextureRect, originalTextureRect);
-			transformMatrix.postScale(
-				textureViewWidth / rotatedTextureRect.width(),
-				textureViewHeight / rotatedTextureRect.height(),
-				pivotX,
-				pivotY);
-		}
-		textureView.setTransform(transformMatrix);
-	}
-
-	@SuppressLint("InlinedApi")
-	private boolean isDpadKey(int keyCode) {
-		return keyCode == KeyEvent.KEYCODE_DPAD_UP
-			|| keyCode == KeyEvent.KEYCODE_DPAD_UP_RIGHT
-			|| keyCode == KeyEvent.KEYCODE_DPAD_RIGHT
-			|| keyCode == KeyEvent.KEYCODE_DPAD_DOWN_RIGHT
-			|| keyCode == KeyEvent.KEYCODE_DPAD_DOWN
-			|| keyCode == KeyEvent.KEYCODE_DPAD_DOWN_LEFT
-			|| keyCode == KeyEvent.KEYCODE_DPAD_LEFT
-			|| keyCode == KeyEvent.KEYCODE_DPAD_UP_LEFT
-			|| keyCode == KeyEvent.KEYCODE_DPAD_CENTER;
-	}
-
-	private final class ComponentListener
-		implements Player.Listener,
-		OnLayoutChangeListener,
-		OnClickListener,
-		PlayerControlView.VisibilityListener {
-
-		private final Period period;
-		private @Nullable Object lastPeriodUidWithTracks;
-
-		public ComponentListener() {
-			period = new Period();
-		}
-
-		// Player.Listener implementation
-
-		@Override
-		public void onCues(CueGroup cueGroup) {
-			if (subtitleView != null) {
-				subtitleView.setCues(cueGroup.cues);
-			}
-		}
-
-		@Override
-		public void onVideoSizeChanged(VideoSize videoSize) {
-			updateAspectRatio();
-		}
-
-		@Override
-		public void onRenderedFirstFrame() {
-			if (shutterView != null) {
-				shutterView.setVisibility(INVISIBLE);
-			}
-		}
-
-		@Override
-		public void onTracksChanged(Tracks tracks) {
-			// Suppress the update if transitioning to an unprepared period within the same window. This
-			// is necessary to avoid closing the shutter when such a transition occurs. See:
-			// https://github.com/google/ExoPlayer/issues/5507.
-			Player player = Assertions.checkNotNull(ZoomableExoPlayerView.this.player);
-			Timeline timeline = player.getCurrentTimeline();
-			if (timeline.isEmpty()) {
-				lastPeriodUidWithTracks = null;
-			} else if (!player.getCurrentTracks().isEmpty()) {
-				lastPeriodUidWithTracks =
-					timeline.getPeriod(player.getCurrentPeriodIndex(), period, /* setIds= */ true).uid;
-			} else if (lastPeriodUidWithTracks != null) {
-				int lastPeriodIndexWithTracks = timeline.getIndexOfPeriod(lastPeriodUidWithTracks);
-				if (lastPeriodIndexWithTracks != C.INDEX_UNSET) {
-					int lastWindowIndexWithTracks =
-						timeline.getPeriod(lastPeriodIndexWithTracks, period).windowIndex;
-					if (player.getCurrentMediaItemIndex() == lastWindowIndexWithTracks) {
-						// We're in the same media item. Suppress the update.
-						return;
-					}
-				}
-				lastPeriodUidWithTracks = null;
-			}
-
-			updateForCurrentTrackSelections(/* isNewPlayer= */ false);
-		}
-
-		@Override
-		public void onPlaybackStateChanged(@Player.State int playbackState) {
-			updateBuffering();
-			updateErrorMessage();
-			updateControllerVisibility();
-		}
-
-		@Override
-		public void onPlayWhenReadyChanged(
-			boolean playWhenReady, @Player.PlayWhenReadyChangeReason int reason) {
-			updateBuffering();
-			updateControllerVisibility();
-		}
-
-		@Override
-		public void onPositionDiscontinuity(
-			Player.PositionInfo oldPosition,
-			Player.PositionInfo newPosition,
-			@DiscontinuityReason int reason) {
-			if (isPlayingAd() && controllerHideDuringAds) {
-				hideController();
-			}
-		}
-
-		// OnLayoutChangeListener implementation
-
-		@Override
-		public void onLayoutChange(
-			View view,
-			int left,
-			int top,
-			int right,
-			int bottom,
-			int oldLeft,
-			int oldTop,
-			int oldRight,
-			int oldBottom) {
-			applyTextureViewRotation((TextureView) view, textureViewRotation);
-		}
-
-		// OnClickListener implementation
-
-		@Override
-		public void onClick(View view) {
-			toggleControllerVisibility();
-		}
-
-		// PlayerControlView.VisibilityListener implementation
-
-		@Override
-		public void onVisibilityChange(int visibility) {
-			updateContentDescription();
-		}
-	}
-
-
-	// THREEMA
-	@Override
-	public boolean onTouchEvent(MotionEvent event) {
-		if (!useController() || player == null) {
-			return false;
-		}
-		switch (event.getAction()) {
-			case MotionEvent.ACTION_DOWN:
-				isTouching = true;
-				return true;
-			case MotionEvent.ACTION_UP:
-				if (isTouching) {
-					isTouching = false;
-					performClick();
-					return true;
-				}
-				return false;
-			default:
-				return false;
-		}
-	}
-}
diff --git a/app/src/main/java/ch/threema/app/ui/listitemholder/ComposeMessageHolder.java b/app/src/main/java/ch/threema/app/ui/listitemholder/ComposeMessageHolder.java
index 8f8126c6..564337bc 100644
--- a/app/src/main/java/ch/threema/app/ui/listitemholder/ComposeMessageHolder.java
+++ b/app/src/main/java/ch/threema/app/ui/listitemholder/ComposeMessageHolder.java
@@ -27,7 +27,7 @@ import android.widget.FrameLayout;
 import android.widget.ImageView;
 import android.widget.TextView;
 
-import com.google.android.material.button.MaterialButton;
+import com.google.android.material.card.MaterialCardView;
 import com.google.android.material.chip.Chip;
 
 import ch.threema.app.services.messageplayer.MessagePlayer;
@@ -43,9 +43,9 @@ public class ComposeMessageHolder extends AvatarListItemHolder {
 	public TextView senderName;
 	public TextView dateView;
 	public View senderView;
-	public ImageView deliveredIndicator;
+	public ImageView deliveredIndicator, datePrefixIcon;
 	public ImageView attachmentImage;
-	public ViewGroup messageBlockView;
+	public MaterialCardView messageBlockView;
 	public ViewGroup contentView;
 	public AudioProgressBarView seekBar;
 	public View quoteBar;
@@ -53,7 +53,7 @@ public class ComposeMessageHolder extends AvatarListItemHolder {
 	public TranscoderView transcoderView;
 	public FrameLayout readOnContainer;
 	public Chip readOnButton;
-	public MaterialButton messageTypeButton;
+	public View messageTypeButton;
 	public View groupAckContainer;
 	public ImageView groupAckThumbsUpImage, groupAckThumbsDownImage;
 	public TextView groupAckThumbsUpCount, groupAckThumbsDownCount;
diff --git a/app/src/main/java/ch/threema/app/utils/AnimationUtil.java b/app/src/main/java/ch/threema/app/utils/AnimationUtil.java
index d2375ba5..925e447d 100644
--- a/app/src/main/java/ch/threema/app/utils/AnimationUtil.java
+++ b/app/src/main/java/ch/threema/app/utils/AnimationUtil.java
@@ -25,9 +25,7 @@ import android.animation.Animator;
 import android.animation.AnimatorListenerAdapter;
 import android.animation.ObjectAnimator;
 import android.animation.PropertyValuesHolder;
-import android.app.Activity;
 import android.content.Context;
-import android.content.Intent;
 import android.os.Handler;
 import android.view.View;
 import android.view.ViewAnimationUtils;
@@ -46,16 +44,15 @@ import android.view.animation.Transformation;
 import android.view.animation.TranslateAnimation;
 import android.widget.LinearLayout;
 
-import org.slf4j.Logger;
-
 import androidx.annotation.NonNull;
 import androidx.annotation.Nullable;
-import androidx.core.app.ActivityCompat;
-import androidx.core.app.ActivityOptionsCompat;
 import androidx.interpolator.view.animation.FastOutSlowInInterpolator;
 import androidx.transition.Fade;
 import androidx.transition.Transition;
 import androidx.transition.TransitionManager;
+
+import org.slf4j.Logger;
+
 import ch.threema.app.R;
 import ch.threema.base.utils.LoggingUtil;
 
@@ -155,38 +152,6 @@ public class AnimationUtil {
 		v.startAnimation(a);
 	}
 
-	public static void startActivityForResult(Activity activity, @Nullable View v, Intent intent, int requestCode) {
-		logger.debug("start activity for result " + activity + " " + intent + " " + requestCode);
-		if (activity != null) {
-			ActivityOptionsCompat options = null;
-
-			if (v != null) {
-				intent.setFlags(intent.getFlags() | Intent.FLAG_ACTIVITY_SINGLE_TOP | Intent.FLAG_ACTIVITY_CLEAR_TOP);
-				options = ActivityOptionsCompat.makeScaleUpAnimation(v, 0, 0, v.getWidth(), v.getHeight());
-			}
-
-			if (requestCode != 0) {
-				if (options != null) {
-					ActivityCompat.startActivityForResult(activity, intent, requestCode, options.toBundle());
-				} else {
-					activity.startActivityForResult(intent, requestCode);
-					activity.overridePendingTransition(R.anim.fast_fade_in, R.anim.fast_fade_out);
-				}
-			} else {
-				if (options != null) {
-					ActivityCompat.startActivity(activity, intent, options.toBundle());
-				} else {
-					activity.startActivity(intent);
-					activity.overridePendingTransition(R.anim.fast_fade_in, R.anim.fast_fade_out);
-				}
-			}
-		}
-	}
-
-	public static void startActivity(Activity activity, View v, Intent intent) {
-		startActivityForResult(activity, v, intent, 0);
-	}
-
 	public static void setupTransitions(Context context, Window window) {
 		// requestFeature() must be called before adding content
 		if (window != null && context != null) {
@@ -531,7 +496,6 @@ public class AnimationUtil {
 			Transition transition = new Fade();
 			transition.setDuration(170);
 			transition.addTarget(view);
-
 			TransitionManager.endTransitions((ViewGroup) view.getParent());
 			TransitionManager.beginDelayedTransition((ViewGroup) view.getParent(), transition);
 			view.setVisibility(visibility);
diff --git a/app/src/main/java/ch/threema/app/utils/AppRestrictionUtil.java b/app/src/main/java/ch/threema/app/utils/AppRestrictionUtil.java
index 045f864c..f75067e4 100644
--- a/app/src/main/java/ch/threema/app/utils/AppRestrictionUtil.java
+++ b/app/src/main/java/ch/threema/app/utils/AppRestrictionUtil.java
@@ -182,8 +182,7 @@ public class AppRestrictionUtil {
 
 	/**
 	 * get boolean value for restriction
-	 * @param context
-	 * @param restriction
+	 * @param restriction The resource id of the restriction name
 	 * @return true if restriction value is set to true, false otherwise or if restriction does not exist or app is not restricted
 	 */
 	public static boolean getBoolRestriction(Context context, @StringRes int restriction) {
diff --git a/app/src/main/java/ch/threema/app/utils/ColorUtil.java b/app/src/main/java/ch/threema/app/utils/ColorUtil.java
index 17ce8fb6..ca29cbeb 100644
--- a/app/src/main/java/ch/threema/app/utils/ColorUtil.java
+++ b/app/src/main/java/ch/threema/app/utils/ColorUtil.java
@@ -93,7 +93,7 @@ public class ColorUtil {
 	 * @return the gray based on the theme
 	 */
 	public int getCurrentThemeGray(Context context) {
-		if (ConfigUtils.getAppTheme(context) == ConfigUtils.THEME_DARK) {
+		if (ConfigUtils.isTheDarkSide(context)) {
 			return COLOR_GRAY_DARK;
 		} else {
 			return COLOR_GRAY_LIGHT;
diff --git a/app/src/main/java/ch/threema/app/utils/ConfigUtils.java b/app/src/main/java/ch/threema/app/utils/ConfigUtils.java
index 41cf730c..6ab4ae66 100644
--- a/app/src/main/java/ch/threema/app/utils/ConfigUtils.java
+++ b/app/src/main/java/ch/threema/app/utils/ConfigUtils.java
@@ -21,6 +21,20 @@
 
 package ch.threema.app.utils;
 
+import static android.content.res.Configuration.UI_MODE_NIGHT_YES;
+import static android.os.Build.VERSION_CODES.O_MR1;
+import static android.view.View.SYSTEM_UI_FLAG_LIGHT_NAVIGATION_BAR;
+import static android.view.View.SYSTEM_UI_FLAG_LIGHT_STATUS_BAR;
+import static android.view.WindowManager.LayoutParams.FLAG_DRAWS_SYSTEM_BAR_BACKGROUNDS;
+import static android.view.WindowManager.LayoutParams.LAYOUT_IN_DISPLAY_CUTOUT_MODE_SHORT_EDGES;
+import static androidx.appcompat.app.AppCompatDelegate.MODE_NIGHT_FOLLOW_SYSTEM;
+import static androidx.appcompat.app.AppCompatDelegate.MODE_NIGHT_NO;
+import static androidx.appcompat.app.AppCompatDelegate.MODE_NIGHT_YES;
+import static ch.threema.app.camera.CameraUtil.isInternalCameraSupported;
+import static ch.threema.app.services.NotificationService.NOTIFICATION_CHANNEL_ALERT;
+import static ch.threema.app.services.NotificationServiceImpl.APP_RESTART_NOTIFICATION_ID;
+import static ch.threema.app.utils.IntentDataUtil.PENDING_INTENT_FLAG_MUTABLE;
+
 import android.Manifest;
 import android.annotation.SuppressLint;
 import android.app.Activity;
@@ -35,7 +49,6 @@ import android.content.Context;
 import android.content.Intent;
 import android.content.OperationApplicationException;
 import android.content.SharedPreferences;
-import android.content.pm.ActivityInfo;
 import android.content.pm.PackageInfo;
 import android.content.pm.PackageManager;
 import android.content.res.Configuration;
@@ -56,43 +69,46 @@ import android.util.TypedValue;
 import android.view.Menu;
 import android.view.MenuItem;
 import android.view.SubMenu;
-import android.view.Surface;
 import android.view.View;
 import android.view.ViewGroup;
 import android.view.WindowManager;
 import android.widget.ImageView;
+import android.widget.LinearLayout;
+import android.widget.TextView;
 import android.widget.Toast;
 
 import androidx.activity.result.ActivityResultLauncher;
 import androidx.annotation.AttrRes;
 import androidx.annotation.ColorInt;
-import androidx.annotation.DrawableRes;
-import androidx.annotation.IntDef;
 import androidx.annotation.NonNull;
 import androidx.annotation.Nullable;
 import androidx.annotation.RequiresApi;
+import androidx.annotation.StringDef;
 import androidx.annotation.StringRes;
 import androidx.appcompat.app.AppCompatActivity;
-import androidx.appcompat.content.res.AppCompatResources;
+import androidx.appcompat.app.AppCompatDelegate;
 import androidx.appcompat.view.menu.MenuBuilder;
+import androidx.appcompat.widget.SearchView;
 import androidx.appcompat.widget.Toolbar;
 import androidx.core.app.ActivityCompat;
 import androidx.core.app.NotificationCompat;
 import androidx.core.content.ContextCompat;
 import androidx.core.view.MenuCompat;
+import androidx.core.view.ViewCompat;
 import androidx.fragment.app.Fragment;
-import androidx.preference.Preference;
-import androidx.preference.PreferenceGroup;
+import androidx.media3.ui.PlayerView;
 import androidx.preference.PreferenceManager;
+import androidx.work.ExistingWorkPolicy;
+import androidx.work.OneTimeWorkRequest;
+import androidx.work.WorkManager;
 
 import com.datatheorem.android.trustkit.TrustKit;
+import com.google.android.material.search.SearchBar;
 import com.google.android.material.snackbar.BaseTransientBottomBar;
 import com.google.android.material.snackbar.Snackbar;
 
 import org.slf4j.Logger;
 
-import java.lang.annotation.Retention;
-import java.lang.annotation.RetentionPolicy;
 import java.lang.reflect.Method;
 import java.util.ArrayList;
 import java.util.List;
@@ -106,8 +122,6 @@ import ch.threema.app.BuildFlavor;
 import ch.threema.app.R;
 import ch.threema.app.ThreemaApplication;
 import ch.threema.app.activities.HomeActivity;
-import ch.threema.app.backuprestore.csv.BackupService;
-import ch.threema.app.backuprestore.csv.RestoreService;
 import ch.threema.app.dialogs.SimpleStringAlertDialog;
 import ch.threema.app.exceptions.FileSystemNotPresentException;
 import ch.threema.app.managers.ServiceManager;
@@ -117,41 +131,30 @@ import ch.threema.app.services.LockAppService;
 import ch.threema.app.services.PreferenceService;
 import ch.threema.app.services.license.LicenseService;
 import ch.threema.app.threemasafe.ThreemaSafeConfigureActivity;
+import ch.threema.app.workers.RestartWorker;
 import ch.threema.base.utils.LoggingUtil;
 
-import static android.content.res.Configuration.UI_MODE_NIGHT_YES;
-import static android.view.View.SYSTEM_UI_FLAG_LIGHT_NAVIGATION_BAR;
-import static android.view.View.SYSTEM_UI_FLAG_LIGHT_STATUS_BAR;
-import static android.view.WindowManager.LayoutParams.FLAG_DRAWS_SYSTEM_BAR_BACKGROUNDS;
-import static android.view.WindowManager.LayoutParams.LAYOUT_IN_DISPLAY_CUTOUT_MODE_SHORT_EDGES;
-import static ch.threema.app.ThreemaApplication.getAppContext;
-import static ch.threema.app.camera.CameraUtil.isInternalCameraSupported;
-import static ch.threema.app.services.NotificationService.NOTIFICATION_CHANNEL_ALERT;
-import static ch.threema.app.services.NotificationServiceImpl.APP_RESTART_NOTIFICATION_ID;
-import static ch.threema.app.utils.IntentDataUtil.PENDING_INTENT_FLAG_MUTABLE;
-
 public class ConfigUtils {
 	private static final Logger logger = LoggingUtil.getThreemaLogger("ConfigUtils");
 
-	public static final int THEME_LIGHT = 0;
-	public static final int THEME_DARK = 1;
-	public static final int THEME_SYSTEM = 2;
-	public static final int THEME_NONE = -1;
 	private static final int CONTENT_PROVIDER_BATCH_SIZE = 50;
+	private static final String WORKER_RESTART_AFTER_RESTORE = "restartAfterRestore";
 
-	@Retention(RetentionPolicy.SOURCE)
-	@IntDef({THEME_LIGHT, THEME_DARK})
-	public @interface AppTheme {}
+	/* app theme settings in shared preferences */
+	@StringDef({THEME_LIGHT, THEME_DARK, THEME_FOLLOW_SYSTEM})
+	public @interface AppThemeSetting {}
+	public static final String THEME_LIGHT = "0";
+	public static final String THEME_DARK = "1";
+	public static final String THEME_FOLLOW_SYSTEM = "2";
 
 	public static final int EMOJI_DEFAULT = 0;
 	public static final int EMOJI_ANDROID = 1;
 
-	private static int appTheme = THEME_NONE;
-	private static String localeOverride = null;
-	private static Integer primaryColor = null, accentColor = null, miuiVersion = null;
+	@Deprecated private static String localeOverride = null;
+	private static Integer miuiVersion = null;
 	private static int emojiStyle = 0;
 	private static Boolean isTablet = null, isBiggerSingleEmojis = null, hasMapLibreSupport = null;
-	private static int preferredThumbnailWidth = -1, preferredAudioMessageWidth = -1;
+	private static int preferredThumbnailWidth = -1, preferredAudioMessageWidth = -1, currentDayNightMode;
 
 	private static final float[] NEGATIVE_MATRIX = {
 		-1.0f,     0,     0,    0, 255, // red
@@ -185,12 +188,6 @@ public class ConfigUtils {
 		return context.getResources().getBoolean(R.bool.is_landscape);
 	}
 
-	public static boolean isBlackBerry() {
-		String osName = System.getProperty("os.name");
-
-		return osName != null && osName.equalsIgnoreCase("qnx");
-	}
-
 	public static boolean isAmazonDevice() {
 		return (Build.MANUFACTURER.equals("Amazon"));
 	}
@@ -199,6 +196,11 @@ public class ConfigUtils {
 		return (Build.MANUFACTURER.equalsIgnoreCase("Huawei") && !Build.MODEL.contains("Nexus"));
 	}
 
+
+	public static boolean hasBrokenDeleteNotificationChannelGroup() {
+		return isHuaweiDevice() && Build.VERSION.SDK_INT == Build.VERSION_CODES.Q;
+	}
+
 	public static boolean isOnePlusDevice() {
 		return (Build.MANUFACTURER.equalsIgnoreCase("OnePlus"));
 	}
@@ -235,6 +237,11 @@ public class ConfigUtils {
 		return Build.VERSION.SDK_INT >= Build.VERSION_CODES.S && ConfigUtils.isSamsungDevice() && Build.MODEL.startsWith("SM-G97");
 	}
 
+	/* device creates distorted audio recordings with a 44.1kHz sampling rate */
+	public static boolean hasBrokenAudioRecorder() {
+		return ConfigUtils.isXiaomiDevice() && Build.MODEL.startsWith("Mi 9T");
+	}
+
 	public static boolean hasScopedStorage() {
 		return Build.VERSION.SDK_INT >= Build.VERSION_CODES.Q;
 	}
@@ -336,89 +343,113 @@ public class ConfigUtils {
 		return miuiVersion;
 	}
 
-	public static int getAppTheme(Context context) {
-		if (appTheme == THEME_NONE) {
-			appTheme = Integer.valueOf(PreferenceManager.getDefaultSharedPreferences(context).getString(context.getString(R.string.preferences__theme), "2"));
-		}
-		if (appTheme == THEME_SYSTEM) {
-			appTheme = (context.getResources().getConfiguration().uiMode & Configuration.UI_MODE_NIGHT_MASK) == UI_MODE_NIGHT_YES ? THEME_DARK : THEME_LIGHT;
-		}
-		return appTheme;
-	}
-
-	public static void setAppTheme(int theme) {
-		appTheme = theme;
-		primaryColor = null;
+	/**
+	 * Set the setting for the app wide theme and optionally save to shared prefs and apply setting to system
+	 * @param theme One of THEME_LIGHT, THEME_DARK or THEME_FOLLOW_SYSTEM
+	 */
+	public static void saveAppThemeToPrefs(@AppThemeSetting String theme, Context context) {
+		PreferenceManager.getDefaultSharedPreferences(ThreemaApplication.getAppContext()).edit().putString(ThreemaApplication.getAppContext().getString(R.string.preferences__theme), String.valueOf(theme)).apply();
+		AppCompatDelegate.setDefaultNightMode(getDayNightModeFromAppThemeSetting(theme));
+		getCurrentDayNightMode(context);
 	}
 
-	public static void resetAppTheme() {
-		appTheme = THEME_NONE;
-		primaryColor = null;
+	public static @AppThemeSetting String getAppThemeSettingFromDayNightMode(@AppCompatDelegate.NightMode int dayNightMode) {
+		switch (dayNightMode) {
+			case MODE_NIGHT_NO:
+				return THEME_LIGHT;
+			case MODE_NIGHT_YES:
+				return THEME_DARK;
+			default:
+				return THEME_FOLLOW_SYSTEM;
+		}
 	}
 
-	private static void setPrimaryColor(Context context) {
-		if (primaryColor == null) {
-			primaryColor = getColorFromAttribute(context, R.attr.textColorPrimary);
+	public static @AppCompatDelegate.NightMode int getDayNightModeFromAppThemeSetting(@AppThemeSetting String appThemeSetting) {
+		switch (appThemeSetting) {
+			case THEME_DARK:
+				return MODE_NIGHT_YES;
+			case THEME_LIGHT:
+				return MODE_NIGHT_NO;
+			default:
+				return MODE_NIGHT_FOLLOW_SYSTEM;
 		}
 	}
 
-	public static @ColorInt int getColorFromAttribute(Context context, @AttrRes int attr) {
-		TypedArray typedArray = context.getTheme().obtainStyledAttributes(new int[] { attr });
-		@ColorInt int color = typedArray.getColor(0, -1);
-
-		typedArray.recycle();
+	@SuppressLint("WrongConstant")
+	public static @AppThemeSetting String getAppThemePrefsSettings() {
+		SharedPreferences prefs = PreferenceManager.getDefaultSharedPreferences(ThreemaApplication.getAppContext());
 
-		return color;
+		// set default day/night setting depending on app type
+		@AppThemeSetting String appThemeSetting = null;
+		if (prefs != null) {
+			appThemeSetting = prefs.getString(ThreemaApplication.getAppContext().getString(R.string.preferences__theme), null);
+		}
+		if (TestUtil.empty(appThemeSetting)) {
+			// fix default setting according to app flavor
+			appThemeSetting = BuildConfig.DEFAULT_APP_THEME;
+			if (prefs != null) {
+				prefs.edit().putString(ThreemaApplication.getAppContext().getString(R.string.preferences__theme), BuildConfig.DEFAULT_APP_THEME).apply();
+			}
+		}
+		return appThemeSetting;
 	}
 
-	public static @ColorInt int getPrimaryColor() {
-		return primaryColor != null ? primaryColor : 0xFFFFFFFF;
+	public static @AppCompatDelegate.NightMode int getAppThemePrefs() {
+		return getDayNightModeFromAppThemeSetting(getAppThemePrefsSettings());
 	}
 
-	public static Drawable getThemedDrawable(Context context, @DrawableRes int resId) {
-		Drawable drawable = AppCompatResources.getDrawable(context, resId);
-
-		if (drawable != null) {
-			if (appTheme != THEME_LIGHT) {
-				setPrimaryColor(context);
+	public static boolean isTheDarkSide(@NonNull Context context) {
+		return getCurrentDayNightMode(context) == MODE_NIGHT_YES;
+	}
 
-				drawable.setColorFilter(primaryColor, PorterDuff.Mode.SRC_IN);
-				return drawable;
-			} else {
-				drawable.clearColorFilter();
-			}
+	/**
+	 * Get current day night of the system
+	 * @return Either MODE_NIGHT_NO or MODE_NIGHT_YES
+	 */
+	public static @AppCompatDelegate.NightMode int getCurrentDayNightMode(@NonNull Context context) {
+		if (context != ThreemaApplication.getAppContext()) {
+			currentDayNightMode = (context.getResources().getConfiguration().uiMode & Configuration.UI_MODE_NIGHT_MASK) == UI_MODE_NIGHT_YES ? MODE_NIGHT_YES : MODE_NIGHT_NO;
 		}
-		return drawable;
+		return currentDayNightMode;
 	}
 
-	public static void themeImageView(Context context, ImageView view) {
-		if (appTheme != THEME_LIGHT) {
-			if (context == null) {
-				return;
-			}
+	/**
+	 * Store current day/night mode.
+	 * @param dayNightMode must be either MODE_NIGHT_YES or MODE_NIGHT_NO
+	 */
+	public static void setCurrentDayNightMode(@AppCompatDelegate.NightMode int dayNightMode) {
+		currentDayNightMode = dayNightMode;
+	}
 
-			setPrimaryColor(context);
+	public static @ColorInt int getColorFromAttribute(Context context, @AttrRes int attr) {
+		TypedArray typedArray = context.getTheme().obtainStyledAttributes(new int[] { attr });
+		@ColorInt int color = typedArray.getColor(0, -1);
 
-			view.setColorFilter(primaryColor, PorterDuff.Mode.SRC_IN);
-		} else {
-			view.clearColorFilter();
-		}
+		typedArray.recycle();
+
+		return color;
 	}
 
-	public static void themeMenu(Menu menu, @ColorInt int color) {
+	/**
+	 * Tint the icons of a complete menu to the provided color. This is necessary when using MenuInflater which does not support the iconTint attribute
+	 * (SupportMenuInflater / startSupportActionMode respects iconTint)
+	 * @param menu The menu to tint
+	 * @param color The ColorInt to tint the icons
+	 */
+	public static void tintMenu(Menu menu, @ColorInt int color) {
 		for (int i = 0, size = menu.size(); i < size; i++) {
 			final MenuItem menuItem = menu.getItem(i);
-			themeMenuItem(menuItem, color);
+			tintMenuItem(menuItem, color);
 			if (menuItem.hasSubMenu()) {
 				final SubMenu subMenu = menuItem.getSubMenu();
 				for (int j = 0; j < subMenu.size(); j++) {
-					themeMenuItem(subMenu.getItem(j), color);
+					tintMenuItem(subMenu.getItem(j), color);
 				}
 			}
 		}
 	}
 
-	public static void themeMenuItem(final MenuItem menuItem, @ColorInt int color) {
+	public static void tintMenuItem(@Nullable final MenuItem menuItem, @ColorInt int color) {
 		if (menuItem != null) {
 			final Drawable drawable = menuItem.getIcon();
 			if (drawable != null) {
@@ -428,6 +459,10 @@ public class ConfigUtils {
 		}
 	}
 
+	public static void tintMenuItem(@NonNull Context context, @Nullable final MenuItem menuItem, @AttrRes int colorAttr) {
+		tintMenuItem(menuItem, getColorFromAttribute(context, colorAttr));
+	}
+
 	public static void setEmojiStyle(Context context, int newStyle) {
 		if (newStyle != -1) {
 			emojiStyle = newStyle;
@@ -552,7 +587,12 @@ public class ConfigUtils {
 	private static String getLicenceURL(Context context, @StringRes int url) {
 		String lang = LocaleUtil.getAppLanguage().startsWith("de") ? "de" : "en";
 		String version = ConfigUtils.getAppVersion(context);
-		String theme = ConfigUtils.getAppTheme(context) == ConfigUtils.THEME_DARK ? "dark" : "light";
+		boolean darkModeOverride = false;
+		if (context instanceof AppCompatActivity) {
+			darkModeOverride = ((AppCompatActivity) context).getDelegate().getLocalNightMode() == MODE_NIGHT_YES;
+		}
+
+		String theme = isTheDarkSide(context) || darkModeOverride ? "dark" : "light";
 
 		return String.format(context.getString(url), lang, version, theme);
 	}
@@ -603,23 +643,31 @@ public class ConfigUtils {
 			AlarmManager manager = (AlarmManager) context.getSystemService(Context.ALARM_SERVICE);
 			manager.set(AlarmManager.RTC, System.currentTimeMillis() + delayMs, pendingIntent);
 		} else {
-			String text = context.getString(R.string.tap_to_start, context.getString(R.string.app_name));
-
-			NotificationCompat.Builder builder =
-				new NotificationBuilderWrapper(context, NOTIFICATION_CHANNEL_ALERT, null)
-					.setSmallIcon(R.drawable.ic_notification_small)
-					.setContentTitle(eventTriggerTitle)
-					.setContentText(eventTriggerTitle)
-					.setDefaults(Notification.DEFAULT_LIGHTS | Notification.DEFAULT_VIBRATE)
-					.setColor(context.getResources().getColor(R.color.material_green))
-					.setPriority(NotificationCompat.PRIORITY_MAX)
-					.setStyle(new NotificationCompat.BigTextStyle().bigText(text))
-					.setContentIntent(pendingIntent)
-					.setAutoCancel(false);
-
-			NotificationManager notificationManager = (NotificationManager) context.getSystemService(Context.NOTIFICATION_SERVICE);
-			if (notificationManager != null) {
-				notificationManager.notify(APP_RESTART_NOTIFICATION_ID, builder.build());
+			if (eventTriggerTitle == null) {
+				// use WorkManager to restart the app in the background
+				final WorkManager workManager = WorkManager.getInstance(ThreemaApplication.getAppContext());
+				final OneTimeWorkRequest workRequest = RestartWorker.Companion.buildOneTimeWorkRequest(delayMs);
+				workManager.enqueueUniqueWork(WORKER_RESTART_AFTER_RESTORE, ExistingWorkPolicy.REPLACE, workRequest);
+			} else {
+				// use a notification to trigger restart (app in background can no longer start activities in Android 12+)
+				String text = context.getString(R.string.tap_to_start, context.getString(R.string.app_name));
+
+				NotificationCompat.Builder builder =
+					new NotificationBuilderWrapper(context, NOTIFICATION_CHANNEL_ALERT, null)
+						.setSmallIcon(R.drawable.ic_notification_small)
+						.setContentTitle(eventTriggerTitle)
+						.setContentText(eventTriggerTitle)
+						.setDefaults(Notification.DEFAULT_LIGHTS | Notification.DEFAULT_VIBRATE)
+						.setColor(context.getResources().getColor(R.color.material_green))
+						.setPriority(NotificationCompat.PRIORITY_MAX)
+						.setStyle(new NotificationCompat.BigTextStyle().bigText(text))
+						.setContentIntent(pendingIntent)
+						.setAutoCancel(false);
+
+				NotificationManager notificationManager = (NotificationManager) context.getSystemService(Context.NOTIFICATION_SERVICE);
+				if (notificationManager != null) {
+					notificationManager.notify(APP_RESTART_NOTIFICATION_ID, builder.build());
+				}
 			}
 		}
 	}
@@ -685,7 +733,7 @@ public class ConfigUtils {
 			}
 
 			try {
-				LicenseService licenseService = serviceManager.getLicenseService();
+				LicenseService<?> licenseService = serviceManager.getLicenseService();
 				if (licenseService != null) {
 					return isSerialLicensed() && licenseService.hasCredentials() && licenseService.isLicensed();
 				}
@@ -728,17 +776,9 @@ public class ConfigUtils {
 		}
 	}
 
+	@Deprecated
 	public static @ColorInt int getAccentColor(Context context) {
-		if (accentColor == null) {
-			resetAccentColor(context);
-		}
-		return accentColor;
-	}
-
-	public static void resetAccentColor(Context context) {
-		TypedArray a = context.getTheme().obtainStyledAttributes(new int[]{R.attr.colorAccent});
-		accentColor = a.getColor(0, 0);
-		a.recycle();
+		return getColorFromAttribute(context, R.attr.colorPrimary);
 	}
 
 	@Deprecated
@@ -1056,6 +1096,24 @@ public class ConfigUtils {
 		return true;
 	}
 
+	/**
+	 * Request permission required for checking for connected bluetooth devices in Android S.
+	 *
+	 * @param context            the context
+	 * @param permissionLauncher the permission launcher that is launched if the permission is not
+	 *                           granted yet
+	 */
+	@RequiresApi(api = Build.VERSION_CODES.S)
+	public static void requestBluetoothConnectPermission(
+		@NonNull Context context,
+		@NonNull ActivityResultLauncher<String> permissionLauncher
+	) {
+		final String permission = Manifest.permission.BLUETOOTH_CONNECT;
+		if (checkIfNeedsPermissionRequest(context, new String[]{permission})) {
+			permissionLauncher.launch(permission);
+		}
+	}
+
 	/**
 	 * Request all possibly required permissions of Phone group
 	 * @param activity Activity context for onRequestPermissionsResult callback
@@ -1173,96 +1231,45 @@ public class ConfigUtils {
 	}
 
 	/**
-	 * Configure activity and status bar based on user selected theme. Must be called before super.onCreate()
+	 * Configure navigation and status bar color and style of provided activity to look nice on all kinds of older android version.
+	 * Must be called before super.onCreate(). Thanks for the mess, Google.
 	 * @param activity
 	 */
-
-	public static void configureActivityTheme(Activity activity) {
-		configureActivityTheme(activity, THEME_NONE);
-	}
-
-	public static void configureActivityTheme(Activity activity, int themeOverride) {
-		int orgTheme = 0;
-
-		try {
-			orgTheme = activity.getPackageManager().getActivityInfo(activity.getComponentName(), 0).theme;
-		} catch (Exception e) {
-			logger.error("Exception", e);
-		}
-
-		int desiredTheme = themeOverride == THEME_NONE ? getAppTheme(activity) : themeOverride;
-
-		if (desiredTheme == ConfigUtils.THEME_DARK) {
-			int newTheme;
-
-			switch (orgTheme) {
-				case R.style.AppBaseTheme:
-					newTheme = R.style.AppBaseTheme_Dark;
-					break;
-				case R.style.Theme_Threema_WithToolbarAndCheck:
-					newTheme = R.style.Theme_Threema_WithToolbarAndCheck_Dark;
-					break;
-				case R.style.Theme_Threema_TransparentStatusbar:
-					newTheme = R.style.Theme_Threema_TransparentStatusbar_Dark;
-					break;
-				case R.style.Theme_Threema_Translucent:
-					newTheme = R.style.Theme_Threema_Translucent_Dark;
-					break;
-				case R.style.Theme_Threema_VoiceRecorder:
-					newTheme = R.style.Theme_Threema_VoiceRecorder_Dark;
-					break;
-				case R.style.Theme_LocationPicker:
-					newTheme = R.style.Theme_LocationPicker_Dark;
-					break;
-				case R.style.Theme_MediaAttacher:
-					newTheme = R.style.Theme_MediaAttacher_Dark;
-					break;
-				case R.style.Theme_Threema_WhatsNew:
-					newTheme = R.style.Theme_Threema_WhatsNew_Dark;
-					break;
-				case R.style.Theme_Threema_WithToolbar_NoAnim:
-					newTheme = R.style.Theme_Threema_WithToolbar_NoAnim_Dark;
-					break;
-				case R.style.Theme_Threema_BiometricUnlock:
-					newTheme = R.style.Theme_Threema_BiometricUnlock_Dark;
-					break;
-				case R.style.Theme_Threema_NoActionBar:
-				case R.style.Theme_Threema_LowProfile:
-				case R.style.Theme_Threema_Transparent_Background:
-				case R.style.Theme_Threema_MediaViewer:
-					// agnostic themes: leave them alone
-					newTheme = orgTheme;
-					break;
-				default:
-					newTheme = R.style.Theme_Threema_WithToolbar_Dark;
-					break;
-			}
-
-			if (newTheme != orgTheme) {
-				activity.setTheme(newTheme);
+	public static void configureSystemBars(Activity activity) {
+		@ColorInt int statusBarColor = getColorFromAttribute(activity, android.R.attr.colorBackground);
+		@ColorInt int navigationBarColor = statusBarColor;
+		if (Build.VERSION.SDK_INT < O_MR1) {
+			int activityTheme;
+			try {
+				activityTheme = activity.getPackageManager().getActivityInfo(activity.getComponentName(), 0).theme;
+			} catch (Exception e) {
+				logger.error("Exception", e);
+				return;
 			}
 
-			if (orgTheme != R.style.Theme_Threema_TransparentStatusbar) {
-				activity.getWindow().addFlags(FLAG_DRAWS_SYSTEM_BAR_BACKGROUNDS);
-				activity.getWindow().setStatusBarColor(Color.BLACK);
-				if (Build.VERSION.SDK_INT == Build.VERSION_CODES.M) {
-					View decorView = activity.getWindow().getDecorView();
-					decorView.setSystemUiVisibility(FLAG_DRAWS_SYSTEM_BAR_BACKGROUNDS & ~View.SYSTEM_UI_FLAG_LIGHT_STATUS_BAR);
+			if (ConfigUtils.isTheDarkSide(activity)) {
+				if (activityTheme != R.style.Theme_Threema_TransparentStatusbar) {
+					activity.getWindow().addFlags(FLAG_DRAWS_SYSTEM_BAR_BACKGROUNDS);
+					statusBarColor = Color.BLACK;
+					if (Build.VERSION.SDK_INT == Build.VERSION_CODES.M) {
+						View decorView = activity.getWindow().getDecorView();
+						decorView.setSystemUiVisibility(FLAG_DRAWS_SYSTEM_BAR_BACKGROUNDS & ~SYSTEM_UI_FLAG_LIGHT_STATUS_BAR);
+					}
 				}
-			}
-		} else {
-			if (Build.VERSION.SDK_INT < Build.VERSION_CODES.O) {
-				activity.getWindow().setNavigationBarColor(Color.BLACK);
-				if (Build.VERSION.SDK_INT <= Build.VERSION_CODES.LOLLIPOP_MR1) {
-					activity.getWindow().setStatusBarColor(Color.BLACK);
-				} else if (Build.VERSION.SDK_INT == Build.VERSION_CODES.M) {
+			} else {
+				if (Build.VERSION.SDK_INT < Build.VERSION_CODES.O) {
+					navigationBarColor = Color.BLACK;
+					if (Build.VERSION.SDK_INT <= Build.VERSION_CODES.LOLLIPOP_MR1) {
+						statusBarColor = Color.BLACK;
+					} else if (Build.VERSION.SDK_INT == Build.VERSION_CODES.M) {
+						View decorView = activity.getWindow().getDecorView();
+						decorView.setSystemUiVisibility(FLAG_DRAWS_SYSTEM_BAR_BACKGROUNDS | SYSTEM_UI_FLAG_LIGHT_STATUS_BAR);
+					}
+				} else if (activityTheme != R.style.Theme_Threema_MediaViewer && activityTheme != R.style.Theme_Threema_Transparent_Background) {
 					View decorView = activity.getWindow().getDecorView();
-					decorView.setSystemUiVisibility(FLAG_DRAWS_SYSTEM_BAR_BACKGROUNDS | SYSTEM_UI_FLAG_LIGHT_STATUS_BAR);
+					decorView.setSystemUiVisibility(FLAG_DRAWS_SYSTEM_BAR_BACKGROUNDS |
+						SYSTEM_UI_FLAG_LIGHT_NAVIGATION_BAR | SYSTEM_UI_FLAG_LIGHT_STATUS_BAR);
 				}
-			} else if (Build.VERSION.SDK_INT == Build.VERSION_CODES.O && (orgTheme != R.style.Theme_Threema_MediaViewer && orgTheme != R.style.Theme_Threema_Transparent_Background)) {
-				View decorView = activity.getWindow().getDecorView();
-				decorView.setSystemUiVisibility(FLAG_DRAWS_SYSTEM_BAR_BACKGROUNDS |
-					SYSTEM_UI_FLAG_LIGHT_NAVIGATION_BAR | SYSTEM_UI_FLAG_LIGHT_STATUS_BAR);
 			}
 		}
 
@@ -1270,36 +1277,19 @@ public class ConfigUtils {
 			WindowManager.LayoutParams params = activity.getWindow().getAttributes();
 			params.layoutInDisplayCutoutMode = LAYOUT_IN_DISPLAY_CUTOUT_MODE_SHORT_EDGES;
 		}
+
+		activity.getWindow().setStatusBarColor(statusBarColor);
+		activity.getWindow().setNavigationBarColor(navigationBarColor);
 	}
 
 	public static void configureTransparentStatusBar(AppCompatActivity activity) {
 		activity.getWindow().setStatusBarColor(activity.getResources().getColor(R.color.status_bar_detail));
 		if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {
 			activity.getWindow().getDecorView().setSystemUiVisibility(
-				activity.getWindow().getDecorView().getSystemUiVisibility() & ~View.SYSTEM_UI_FLAG_LIGHT_STATUS_BAR);
-		}
-	}
-
-	private static void tintPrefIcons(Preference preference, int color) {
-		if (preference != null) {
-			if (preference instanceof PreferenceGroup) {
-				PreferenceGroup group = ((PreferenceGroup) preference);
-				for (int i = 0; i < group.getPreferenceCount(); i++) {
-					tintPrefIcons(group.getPreference(i), color);
-				}
-			} else {
-				Drawable icon = preference.getIcon();
-				if (icon != null) {
-					icon.setColorFilter(color, PorterDuff.Mode.SRC_IN);
-				}
-			}
+				activity.getWindow().getDecorView().getSystemUiVisibility() & ~SYSTEM_UI_FLAG_LIGHT_STATUS_BAR);
 		}
 	}
 
-	public static void tintPreferencesIcons(Context context, Preference preference) {
-		tintPrefIcons(preference, getColorFromAttribute(context, R.attr.textColorSecondary));
-	}
-
 	public static int getPreferredThumbnailWidth(Context context, boolean reset) {
 		if (preferredThumbnailWidth == -1 || reset) {
 			if (context != null) {
@@ -1356,101 +1346,6 @@ public class ConfigUtils {
 		return maxSize;
 	}
 
-	public static int getCurrentScreenOrientation(Activity activity) {
-		int rotation = activity.getWindowManager().getDefaultDisplay().getRotation();
-		DisplayMetrics dm = new DisplayMetrics();
-		activity.getWindowManager().getDefaultDisplay().getMetrics(dm);
-		int width = dm.widthPixels;
-		int height = dm.heightPixels;
-		int orientation;
-		// if the device's natural orientation is portrait:
-		if ((rotation == Surface.ROTATION_0
-			|| rotation == Surface.ROTATION_180) && height > width ||
-			(rotation == Surface.ROTATION_90
-				|| rotation == Surface.ROTATION_270) && width > height) {
-			switch(rotation) {
-				case Surface.ROTATION_0:
-					orientation = ActivityInfo.SCREEN_ORIENTATION_PORTRAIT;
-					break;
-				case Surface.ROTATION_90:
-					orientation = ActivityInfo.SCREEN_ORIENTATION_LANDSCAPE;
-					break;
-				case Surface.ROTATION_180:
-					orientation =
-						ActivityInfo.SCREEN_ORIENTATION_REVERSE_PORTRAIT;
-					break;
-				case Surface.ROTATION_270:
-					orientation =
-						ActivityInfo.SCREEN_ORIENTATION_REVERSE_LANDSCAPE;
-					break;
-				default:
-					orientation = ActivityInfo.SCREEN_ORIENTATION_PORTRAIT;
-					break;
-			}
-		}
-		// if the device's natural orientation is landscape or if the device
-		// is square:
-		else {
-			switch(rotation) {
-				case Surface.ROTATION_0:
-					orientation = ActivityInfo.SCREEN_ORIENTATION_LANDSCAPE;
-					break;
-				case Surface.ROTATION_90:
-					orientation = ActivityInfo.SCREEN_ORIENTATION_PORTRAIT;
-					break;
-				case Surface.ROTATION_180:
-					orientation =
-						ActivityInfo.SCREEN_ORIENTATION_REVERSE_LANDSCAPE;
-					break;
-				case Surface.ROTATION_270:
-					orientation =
-						ActivityInfo.SCREEN_ORIENTATION_REVERSE_PORTRAIT;
-					break;
-				default:
-					orientation = ActivityInfo.SCREEN_ORIENTATION_LANDSCAPE;
-					break;
-			}
-		}
-
-		return orientation;
-	}
-
-	/**
-	 * Set app theme according to device theme if theme setting is set to "system"
-	 * @param context
-	 * @return
-	 */
-	public static boolean refreshDeviceTheme(Context context) {
-		if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.P) {
-			if (!BackupService.isRunning() && !RestoreService.isRunning()) {
-				SharedPreferences prefs = PreferenceManager.getDefaultSharedPreferences(getAppContext());
-				int themeIndex = Integer.parseInt(prefs.getString(context.getResources().getString(R.string.preferences__theme), String.valueOf(THEME_LIGHT)));
-				if (themeIndex == THEME_SYSTEM) {
-					int newTheme = (context.getResources().getConfiguration().uiMode & Configuration.UI_MODE_NIGHT_MASK) == UI_MODE_NIGHT_YES ? THEME_DARK : THEME_LIGHT;
-					int oldTheme = ConfigUtils.getAppTheme(context);
-
-					if (oldTheme != newTheme) {
-						ConfigUtils.setAppTheme(newTheme);
-						return true;
-					}
-				}
-			}
-		}
-		return false;
-	}
-
-	/**
-	 * Request desired orientation ignoring IllegalStateException on API 26 with targetApi == 28.
-	 * Workaround for Android bug https://issuetracker.google.com/issues/68454482
-	 * @param activity activity to request orientation for
-	 * @param requestedOrientation requested orientation
-	 */
-	public static void setRequestedOrientation(@NonNull Activity activity, int requestedOrientation) {
-		try {
-			activity.setRequestedOrientation(requestedOrientation);
-		} catch (IllegalStateException ignore) {}
-	}
-
 	/**
 	 * Check if a particular app with packageName is installed on the system
 	 * @param packageName
@@ -1467,7 +1362,7 @@ public class ConfigUtils {
 
 	/**
 	 * Configure menu to display icons and dividers. Call this in onCreateOptionsMenu()
-	 * @param context Context - required for themeing, set to null if you want the icon color not to be touched
+	 * @param context Context - required for theming, set to null if you want the icon color not to be touched
 	 * @param menu Menu to configure
 	 */
 	@SuppressLint("RestrictedApi")
@@ -1481,7 +1376,7 @@ public class ConfigUtils {
 				menuBuilder.setOptionalIconsVisible(true);
 
 				if (context != null) {
-					ConfigUtils.themeMenu(menu, ConfigUtils.getColorFromAttribute(context, R.attr.textColorSecondary));
+					ConfigUtils.tintMenu(menu, ConfigUtils.getColorFromAttribute(context, R.attr.colorOnSurface));
 				}
 			}
 		} catch (Exception ignored) {}
@@ -1561,4 +1456,62 @@ public class ConfigUtils {
 		}
 		return result;
 	}
+
+	/**
+	 * Adjust padding of SearchView so that the search icon is no longer cut off
+	 * @param searchView The instance of a appcompat SearchView
+	 */
+	public static void adjustSearchViewPadding(@NonNull SearchView searchView) {
+		LinearLayout searchFrame = searchView.findViewById(R.id.search_edit_frame);
+		if (searchFrame != null) {
+			LinearLayout.LayoutParams layoutParams = (LinearLayout.LayoutParams) searchFrame.getLayoutParams();
+			if (layoutParams != null) {
+				layoutParams.setMargins(0, layoutParams.topMargin, layoutParams.rightMargin, layoutParams.bottomMargin);
+				searchFrame.setLayoutParams(layoutParams);
+			}
+			TextView searchSrcTextView = searchView.findViewById(R.id.search_src_text);
+			if (searchSrcTextView != null) {
+				searchSrcTextView.setPadding(0, 0, 0, 0);
+			}
+			searchView.setPadding(0, 0, 0, 0);
+		}
+	}
+
+	/**
+	 * Adjust the left margin of a search bar text view so that it matches the search action view's text view
+	 * @param context A context
+	 * @param searchBar The search bar
+	 */
+	public static void adjustSearchBarTextViewMargin(@NonNull Context context, @NonNull SearchBar searchBar) {
+		TextView searchBarTextView = searchBar.findViewById(R.id.search_bar_text_view);
+		if (searchBarTextView != null) {
+			try {
+				SearchBar.LayoutParams layoutParams = (SearchBar.LayoutParams) searchBarTextView.getLayoutParams();
+				layoutParams.setMargins(context.getResources().getDimensionPixelSize(R.dimen.search_bar_text_view_margin), layoutParams.topMargin, layoutParams.rightMargin, layoutParams.bottomMargin);
+				searchBarTextView.setLayoutParams(layoutParams);
+			} catch (Exception e) {
+				logger.debug("Unable to get layout params for search bar");
+			}
+		}
+	}
+
+	public static void adjustExoPlayerControllerMargins(@NonNull Context context, @NonNull PlayerView audioView) {
+		final View controllerView = audioView.findViewById(R.id.exo_bottom_bar);
+		ViewCompat.setOnApplyWindowInsetsListener(controllerView, (v, insets) -> {
+			ViewGroup.MarginLayoutParams params = (ViewGroup.MarginLayoutParams) v.getLayoutParams();
+			params.leftMargin = insets.getSystemWindowInsetLeft();
+			params.rightMargin = insets.getSystemWindowInsetRight();
+			params.bottomMargin = insets.getSystemWindowInsetBottom();
+			return insets;
+		});
+
+		final View exoTimeBar = audioView.findViewById(R.id.exo_progress);
+		ViewCompat.setOnApplyWindowInsetsListener(exoTimeBar, (v, insets) -> {
+			ViewGroup.MarginLayoutParams params = (ViewGroup.MarginLayoutParams) v.getLayoutParams();
+			params.leftMargin = insets.getSystemWindowInsetLeft();
+			params.rightMargin = insets.getSystemWindowInsetRight();
+			params.bottomMargin = insets.getSystemWindowInsetBottom() + context.getResources().getDimensionPixelSize(R.dimen.exo_styled_progress_margin_bottom);
+			return insets;
+		});
+	}
 }
diff --git a/app/src/main/java/ch/threema/app/utils/ContactUtil.java b/app/src/main/java/ch/threema/app/utils/ContactUtil.java
index 37c0b1d4..7be40b44 100644
--- a/app/src/main/java/ch/threema/app/utils/ContactUtil.java
+++ b/app/src/main/java/ch/threema/app/utils/ContactUtil.java
@@ -27,6 +27,7 @@ import android.database.Cursor;
 import android.graphics.drawable.Drawable;
 import android.provider.ContactsContract;
 import android.text.TextUtils;
+import android.text.format.DateUtils;
 
 import org.slf4j.Logger;
 
@@ -51,6 +52,8 @@ public class ContactUtil {
 
 	public static final int CHANNEL_NAME_MAX_LENGTH_BYTES = 256;
 
+	public static final long PROFILE_PICTURE_BLOB_CACHE_DURATION = DateUtils.WEEK_IN_MILLIS;
+
 	/**
 	 * check if this contact is *currently* linked to an android contact
 	 * @param contact
@@ -108,18 +111,22 @@ public class ContactUtil {
 		return identity != null && identity.startsWith("*");
 	}
 
-	public static boolean canReceiveProfilePics(ContactModel contactModel) {
+	/**
+	 * Checks whether the contact's id is ECHOECHO or a Channel ID
+	 * @return {@code true} if the contact is ECHOECHO or a channel ID, {@code false} otherwise
+	 */
+	public static boolean isEchoEchoOrChannelContact(ContactModel contactModel) {
 		return contactModel != null
-				&& !isChannelContact(contactModel)
-				&& !contactModel.getIdentity().equals(ThreemaApplication.ECHO_USER_IDENTITY);
+			&& (isChannelContact(contactModel)
+			|| ThreemaApplication.ECHO_USER_IDENTITY.equals(contactModel.getIdentity())
+		);
 	}
 
 	public static boolean canReceiveVoipMessages(ContactModel contactModel, IdListService blackListIdentityService) {
 		return contactModel != null
 				&& blackListIdentityService != null
 				&& !blackListIdentityService.has(contactModel.getIdentity())
-				&& !isChannelContact(contactModel)
-				&& !contactModel.getIdentity().equals(ThreemaApplication.ECHO_USER_IDENTITY);
+				&& !isEchoEchoOrChannelContact(contactModel);
 	}
 
 	public static boolean allowedChangeToState(ContactModel contactModel, ContactModel.State newState) {
diff --git a/app/src/main/java/ch/threema/app/utils/DialogUtil.java b/app/src/main/java/ch/threema/app/utils/DialogUtil.java
index 1be932a3..71b05341 100644
--- a/app/src/main/java/ch/threema/app/utils/DialogUtil.java
+++ b/app/src/main/java/ch/threema/app/utils/DialogUtil.java
@@ -25,11 +25,12 @@ import android.content.Context;
 import android.content.res.ColorStateList;
 import android.content.res.TypedArray;
 
-import org.slf4j.Logger;
-
 import androidx.annotation.UiThread;
 import androidx.fragment.app.DialogFragment;
 import androidx.fragment.app.FragmentManager;
+
+import org.slf4j.Logger;
+
 import ch.threema.app.R;
 import ch.threema.app.dialogs.CancelableHorizontalProgressDialog;
 import ch.threema.app.dialogs.GenericProgressDialog;
@@ -98,7 +99,7 @@ public abstract class DialogUtil {
 
 	public static ColorStateList getButtonColorStateList(Context context) {
 		// Fix for appcompat bug. Set button text color from theme
-		TypedArray a = context.getTheme().obtainStyledAttributes(new int[]{R.attr.colorAccent});
+		TypedArray a = context.getTheme().obtainStyledAttributes(new int[]{R.attr.colorPrimary});
 		int accentColor = a.getColor(0, 0);
 		a.recycle();
 
diff --git a/app/src/main/java/ch/threema/app/utils/ExponentialBackOffUtil.java b/app/src/main/java/ch/threema/app/utils/ExponentialBackOffUtil.java
index 63f42046..89dbf630 100644
--- a/app/src/main/java/ch/threema/app/utils/ExponentialBackOffUtil.java
+++ b/app/src/main/java/ch/threema/app/utils/ExponentialBackOffUtil.java
@@ -33,7 +33,7 @@ import ch.threema.base.utils.LoggingUtil;
 public class ExponentialBackOffUtil {
 	private static final Logger logger = LoggingUtil.getThreemaLogger("ExponentialBackOffUtil");
 	protected final static ExecutorService singleThreadExecutor = Executors.newSingleThreadExecutor();
-	private Random random;
+	private final Random random;
 
 	// Singleton stuff
 	private static ExponentialBackOffUtil sInstance = null;
@@ -45,7 +45,7 @@ public class ExponentialBackOffUtil {
 		return sInstance;
 	}
 
-	public ExponentialBackOffUtil() {
+	private ExponentialBackOffUtil() {
 		this.random = new Random();
 	}
 
@@ -55,32 +55,27 @@ public class ExponentialBackOffUtil {
 	 * @param exponentialBackOffCount Count of Retries
 	 * @return Future
 	 */
-	public Future run(final BackOffRunnable runnable, final int exponentialBackOffCount) {
-		return singleThreadExecutor.submit(new Runnable() {
-			@Override
-			public void run() {
+	public Future<?> run(final BackOffRunnable runnable, final int exponentialBackOffCount, final String messageUid) {
+		return singleThreadExecutor.submit(() -> {
+			try {
 				for (int n = 0; n < exponentialBackOffCount; ++n) {
-					logger.debug("run " + String.valueOf(n));
+					logger.debug("{} Starting backoff run {}", messageUid, n);
 					try {
 						runnable.run(n);
-
 						//its ok, do not retry
 						return;
 					} catch (Exception e) {
-						logger.error("Exception", e);
-						if(n >= exponentialBackOffCount-1) {
+						if (n >= exponentialBackOffCount - 1) {
 							//last
 							runnable.exception(e, n);
-						}
-						else {
-							try {
-								Thread.sleep((2 << n) * 1000 + random.nextInt(1001));
-							} catch (InterruptedException e1) {
-								//do nothing
-							}
+						} else {
+							Thread.sleep((2L << n) * 1000L + random.nextInt(1001));
 						}
 					}
 				}
+			} catch (InterruptedException ex) {
+				logger.debug("{} Exponential backoff aborted by user", messageUid);
+				runnable.exception(null, 4);
 			}
 		});
 	}
diff --git a/app/src/main/java/ch/threema/app/utils/FileUtil.java b/app/src/main/java/ch/threema/app/utils/FileUtil.java
index c95e131c..a14dc46e 100644
--- a/app/src/main/java/ch/threema/app/utils/FileUtil.java
+++ b/app/src/main/java/ch/threema/app/utils/FileUtil.java
@@ -347,12 +347,12 @@ public class FileUtil {
 			}
 			if (extension.equalsIgnoreCase("opus")) {
 				// whatsapp ogg files
-				mimeType = "audio/ogg";
+				mimeType = MimeUtil.MIME_TYPE_AUDIO_OGG;
 			} else if (extension.equalsIgnoreCase("gpx")) {
 				// https://issuetracker.google.com/issues/37120151
-				mimeType = "application/gpx+xml";
+				mimeType = MimeUtil.MIME_TYPE_GPX;
 			} else if (extension.equalsIgnoreCase("pkpass")) {
-				mimeType = "application/vnd.apple.pkpass";
+				mimeType = MimeUtil.MIME_TYPE_APPLE_PKPASS;
 			}
 		}
 		if (TestUtil.empty(mimeType)) {
@@ -534,29 +534,6 @@ public class FileUtil {
 		return data;
 	}
 
-	public static boolean isAnimGif(ContentResolver contentResolver, Uri uri) {
-		if (uri == null) {
-			return false;
-		}
-
-		byte[] buffer = new byte[4];
-		try (InputStream is = contentResolver.openInputStream(uri)) {
-			is.read(buffer);
-			return isAnimGif(buffer);
-		} catch (Exception x) {
-			logger.error("Exception", x);
-			return false;
-		}
-	}
-
-	private static boolean isAnimGif(byte[] buffer) {
-
-		return	buffer != null
-				&& buffer.length >= 4
-				&& (buffer[0] == 0x47 && buffer[1] == 0x49 &&
-				buffer[2] == 0x46 && buffer[3] == 0x38);
-	}
-
 	public static boolean isImageFile(FileDataModel fileDataModel) {
 		return fileDataModel != null && (MimeUtil.isImageFile(fileDataModel.getMimeType()));
 	}
diff --git a/app/src/main/java/ch/threema/app/utils/ForwardSecurityStatusSender.java b/app/src/main/java/ch/threema/app/utils/ForwardSecurityStatusSender.java
index 20231bb9..eec5e14e 100644
--- a/app/src/main/java/ch/threema/app/utils/ForwardSecurityStatusSender.java
+++ b/app/src/main/java/ch/threema/app/utils/ForwardSecurityStatusSender.java
@@ -27,6 +27,7 @@ import java.util.Collections;
 import java.util.List;
 
 import androidx.annotation.NonNull;
+import androidx.annotation.Nullable;
 import ch.threema.app.messagereceiver.ContactMessageReceiver;
 import ch.threema.app.routines.UpdateFeatureLevelRoutine;
 import ch.threema.app.services.ContactService;
@@ -36,12 +37,16 @@ import ch.threema.domain.fs.DHSession;
 import ch.threema.domain.fs.DHSessionId;
 import ch.threema.domain.models.Contact;
 import ch.threema.domain.models.MessageId;
+import ch.threema.domain.protocol.ThreemaFeature;
 import ch.threema.domain.protocol.api.APIConnector;
 import ch.threema.domain.protocol.csp.fs.ForwardSecurityStatusListener;
+import ch.threema.domain.protocol.csp.messages.AbstractMessage;
+import ch.threema.domain.protocol.csp.messages.fs.ForwardSecurityDataReject;
+import ch.threema.protobuf.csp.e2e.fs.Version;
 import ch.threema.storage.models.AbstractMessageModel;
 import ch.threema.storage.models.ContactModel;
 import ch.threema.storage.models.MessageType;
-import ch.threema.storage.models.data.status.ForwardSecurityStatusDataModel;
+import ch.threema.storage.models.data.status.ForwardSecurityStatusDataModel.ForwardSecurityStatusType;
 
 public class ForwardSecurityStatusSender implements ForwardSecurityStatusListener {
 	private final static Logger logger = LoggingUtil.getThreemaLogger("ForwardSecurityStatusSender");
@@ -58,144 +63,197 @@ public class ForwardSecurityStatusSender implements ForwardSecurityStatusListene
 	}
 
 	@Override
-	public void newSessionInitiated(DHSession session, Contact contact) {
-		if (debug) {
-			postStatusMessageDebug("New initiator DH session (ID " + session.getId() + ")", contact);
-		}
+	public void newSessionInitiated(@Nullable DHSession session, @NonNull Contact contact) {
+		postStatusMessageDebug(String.format("New initiator session %s", session), contact);
 	}
 
 	@Override
-	public void responderSessionEstablished(DHSession session, Contact contact, boolean existingSessionPreempted) {
-		if (debug) {
-			postStatusMessageDebug("Responder DH session established (ID " + session.getId() + ")", contact);
-		}
+	public void responderSessionEstablished(@NonNull DHSession session, @NonNull Contact contact, boolean existingSessionPreempted) {
+		postStatusMessageDebug(String.format("Responder session established %s", session), contact);
 
 		if (existingSessionPreempted) {
-			postStatusMessage(contact, ForwardSecurityStatusDataModel.ForwardSecurityStatusType.FORWARD_SECURITY_RESET);
+			postStatusMessage(contact, ForwardSecurityStatusType.FORWARD_SECURITY_RESET);
 		}
-	}
 
-	@Override
-	public void initiatorSessionEstablished(DHSession session, Contact contact) {
-		if (debug) {
-			postStatusMessageDebug("Initiator DH session established (ID " + session.getId() + ")", contact);
+		// If a new session has been established with V1.1 or higher, we display the message,
+		// that forward security has been enabled (by both participants) immediately.
+		//
+		// Rationale for local/outgoing applied version: Should be identical to remote/incoming
+		// version after initial negotiation.
+		if (session.getOutgoingAppliedVersion().getNumber() >= Version.V1_1.getNumber()) {
+			postStatusMessage(contact, ForwardSecurityStatusType.FORWARD_SECURITY_ESTABLISHED);
 		}
 	}
 
 	@Override
-	public void rejectReceived(DHSessionId sessionId, Contact contact, MessageId rejectedMessageId) {
-		if (debug) {
-			postStatusMessageDebug("Reject received for DH session (ID " + sessionId + "), message ID " + rejectedMessageId, contact);
+	public void initiatorSessionEstablished(@NonNull DHSession session, @NonNull Contact contact) {
+		postStatusMessageDebug(String.format("Initiator session established %s", session), contact);
+
+		// Rationale for local/outgoing applied version: Should be identical to remote/incoming
+		// version after initial negotiation.
+		if (session.getOutgoingAppliedVersion().getNumber() >= Version.V1_1.getNumber()) {
+			// If a new session has been established with V1.1 or higher, we display the message,
+			// that forward security has been enabled (by both participants) in this chat.
+			postStatusMessage(contact, ForwardSecurityStatusType.FORWARD_SECURITY_ESTABLISHED);
 		}
-
-		// Refresh feature mask now, in case contact downgraded to a build without PFS
-		updateFeatureMask(contact);
-
-		postStatusMessage(contact, ForwardSecurityStatusDataModel.ForwardSecurityStatusType.FORWARD_SECURITY_RESET);
 	}
 
 	@Override
-	public void sessionNotFound(DHSessionId sessionId, Contact contact) {
-		if (debug) {
-			postStatusMessageDebug("DH session not found (ID " + sessionId + ")", contact);
+	public void rejectReceived(@NonNull ForwardSecurityDataReject rejectData, @NonNull Contact contact, @Nullable DHSession session, boolean hasForwardSecuritySupport) {
+		postStatusMessageDebug(String.format(
+			"Reject received for session %s (session-id=%s, rejected-message-id=%s, cause=%s)",
+			session,
+			rejectData.getSessionId(),
+			rejectData.getRejectedApiMessageId(),
+			rejectData.getCause()
+		), contact);
+
+		// Only show status message for sessions that are known. Otherwise, all sent (and rejected) messages produce
+		// this status message, which is very verbose.
+		if (session != null) {
+			if (hasForwardSecuritySupport) {
+				postStatusMessage(contact, ForwardSecurityStatusType.FORWARD_SECURITY_RESET);
+			} else {
+				postStatusMessage(contact, ForwardSecurityStatusType.FORWARD_SECURITY_UNAVAILABLE_DOWNGRADE);
+			}
 		}
 	}
 
 	@Override
-	public void sessionBadDhState(DHSessionId sessionId, Contact contact) {
-		if (debug) {
-			postStatusMessageDebug("Bad DH session state (ID " + sessionId + ")", contact);
-		}
+	public void sessionNotFound(@Nullable DHSessionId sessionId, @NonNull Contact contact) {
+		postStatusMessageDebug(String.format("Session not found (session-id=%s)", sessionId), contact);
 	}
 
 	@Override
-	public void sessionTerminated(DHSessionId sessionId, Contact contact) {
-		if (debug) {
-			postStatusMessageDebug("DH session terminated (ID " + sessionId + ")", contact);
-		}
-
-		// Refresh feature mask now, in case contact downgraded to a build without PFS
-		updateFeatureMask(contact);
-
-		postStatusMessage(contact, ForwardSecurityStatusDataModel.ForwardSecurityStatusType.FORWARD_SECURITY_RESET);
+	public void sessionForMessageNotFound(@Nullable DHSessionId sessionId, @Nullable MessageId messageId, @NonNull Contact contact) {
+		postStatusMessageDebug(String.format("Session not found (session-id=%s, message-id=%s)", sessionId, messageId), contact);
 	}
 
 	@Override
-	public void messagesSkipped(DHSessionId sessionId, Contact contact, int numSkipped) {
-		if (debug) {
-			postStatusMessageDebug(numSkipped + " messages skipped (ID " + sessionId + ")", contact);
+	public void sessionTerminated(@Nullable DHSessionId sessionId, @NonNull Contact contact, boolean sessionUnknown, boolean hasForwardSecuritySupport) {
+		postStatusMessageDebug(String.format("Session terminated (session-id=%s)", sessionId), contact);
+
+		// Only show status message for sessions that are known. It doesn't make sense to report a terminated session
+		// we don't even know about.
+		if (!sessionUnknown) {
+			if (hasForwardSecuritySupport) {
+				postStatusMessage(contact, ForwardSecurityStatusType.FORWARD_SECURITY_RESET);
+			} else {
+				postStatusMessage(contact, ForwardSecurityStatusType.FORWARD_SECURITY_UNAVAILABLE_DOWNGRADE);
+			}
 		}
+	}
 
-		postStatusMessage(contact, ForwardSecurityStatusDataModel.ForwardSecurityStatusType.FORWARD_SECURITY_MESSAGES_SKIPPED, numSkipped);
+	@Override
+	public void messagesSkipped(@Nullable DHSessionId sessionId, @NonNull Contact contact, int numSkipped) {
+		postStatusMessageDebug(String.format("Skipped %s messages (session-id=%s)", numSkipped, sessionId), contact);
 	}
 
 	@Override
-	public void messageOutOfOrder(DHSessionId sessionId, Contact contact, MessageId messageId) {
-		if (debug) {
-			postStatusMessageDebug("Message out of order (ID " + sessionId + ")", contact);
-		}
+	public void messageOutOfOrder(@Nullable DHSessionId sessionId, @NonNull Contact contact, @Nullable MessageId messageId) {
+		postStatusMessageDebug(String.format("Message out of order (session-id=%s, message-id=%s)", sessionId, messageId), contact);
 
-		if (contact != null && messageId != null && hasLastMessageId(contact, messageId)) {
+		if (messageId != null && hasLastMessageId(contact, messageId)) {
 			// If the latest message of a contact is processed again, it cannot be decrypted again due to FS. It is very
 			// likely that the message has been processed but could not be acknowledged on the server. Therefore we do
 			// not show a warning if the message is already displayed in the chat.
 			logger.warn("The latest message with id '{}' was processed twice. Ignoring the second message.", messageId);
 			if (debug) {
-				postStatusMessageDebug(String.format("The latest message with id '%s' was processed twice.", messageId), contact);
+				postStatusMessageDebug(String.format("The latest message with was processed twice (message-id=%s)", messageId), contact);
 			}
 		} else {
-			postStatusMessage(contact, ForwardSecurityStatusDataModel.ForwardSecurityStatusType.FORWARD_SECURITY_MESSAGE_OUT_OF_ORDER);
+			postStatusMessage(contact, ForwardSecurityStatusType.FORWARD_SECURITY_MESSAGE_OUT_OF_ORDER);
 		}
 	}
 
 	@Override
-	public void messageDecryptionFailed(DHSessionId sessionId, Contact contact, MessageId failedMessageId) {
-		if (debug) {
-			postStatusMessageDebug("Message decryption failed (ID " + sessionId + "), message ID " + failedMessageId, contact);
+	public void first4DhMessageReceived(@NonNull DHSession session, @NonNull Contact contact) {
+		postStatusMessageDebug(String.format("First 4DH message received in session %s", session), contact);
+
+		// If we received a message with forward security in a session of version 1.0, then we
+		// inform that forward security has been enabled (by both participants). Note that this is
+		// only necessary for version 1.0, as forward security is enabled by default starting in
+		// version 1.1 and therefore the status is shown as soon as the session has been established
+		// TODO(ANDR-2452): Remove this status message when most of clients support 1.1 anyway
+		//
+		// Rationale for local/outgoing applied version: We expect both sides to speak the version
+		// eventually if it was offered by remote (but not yet applied).
+		if (session.getOutgoingAppliedVersion() == Version.V1_0) {
+			postStatusMessage(contact, ForwardSecurityStatusType.FORWARD_SECURITY_ESTABLISHED);
+
+			// Set the forward security state to on (only required in version 1.0)
+			ContactModel contactModel = contactService.getByIdentity(contact.getIdentity());
+			if (contactModel != null) {
+				contactService.save(contactModel.setForwardSecurityState(ContactModel.FS_ON));
+			}
 		}
 	}
 
 	@Override
-	public void first4DhMessageReceived(DHSessionId sessionId, Contact contact) {
+	public void versionsUpdated(@NonNull DHSession session, @NonNull DHSession.UpdatedVersionsSnapshot versionsSnapshot, @NonNull Contact contact) {
+		postStatusMessageDebug(String.format("Updated versions %s %s", versionsSnapshot, session), contact);
+
 		ContactModel contactModel = contactService.getByIdentity(contact.getIdentity());
-		if (contactModel != null) {
-			contactService.setForwardSecurityState(contactModel, ContactModel.FS_ON);
 
-			if (debug) {
-				postStatusMessageDebug("First 4DH message received in session (ID " + sessionId + ")", contact);
-			}
+		// If we update a session from version 1.0 to 1.1 (or newer), then we show a status message,
+		// that forward security has been enabled (by both participants). Note that this message is
+		// only shown, when no 4DH message has been received in the session with version 1.0 because
+		// the status message has already been shown at this point.
+		// TODO(ANDR-2452): Remove this status message when most of clients support 1.1 anyway
+		if (versionsSnapshot.before.local == Version.V1_0
+			&& versionsSnapshot.after.local.getNumber() >= Version.V1_1.getNumber()
+			&& contactModel != null
+			&& contactModel.getForwardSecurityState() == ContactModel.FS_OFF
+		) {
+			postStatusMessage(contact, ForwardSecurityStatusType.FORWARD_SECURITY_ESTABLISHED);
+		}
+	}
 
-			// Check if FS for sent messages is also enabled on this contact
-			if (contactModel.isForwardSecurityEnabled()) {
-				postStatusMessage(contact, ForwardSecurityStatusDataModel.ForwardSecurityStatusType.FORWARD_SECURITY_ESTABLISHED);
-			} else {
-				postStatusMessage(contact, ForwardSecurityStatusDataModel.ForwardSecurityStatusType.FORWARD_SECURITY_ESTABLISHED_RX);
+	@Override
+	public void messageWithoutFSReceived(@NonNull Contact contact, @NonNull DHSession session, @NonNull AbstractMessage message) {
+		logger.warn("Received message {} from {} without forward security of type {} despite having a session with remote/incoming minimum applied version {}",
+			message.getMessageId(),
+			contact.getIdentity(),
+			message.getClass().getSimpleName(),
+			session.getMinimumIncomingAppliedVersion()
+		);
+
+		// Rationale for local/outgoing applied version: We expect both sides to speak the version
+		// eventually if it was offered by remote (but not yet applied) and we also use it in
+		// `first4DhMessageReceived`.
+		if (session.getOutgoingAppliedVersion() == Version.V1_0) {
+			// For sessions of version 1.0 show warning only once
+			ContactModel contactModel = contactService.getByIdentity(contact.getIdentity());
+			if (contactModel != null && contactModel.getForwardSecurityState() == ContactModel.FS_ON) {
+				contactService.save(contactModel.setForwardSecurityState(ContactModel.FS_OFF));
+				postStatusMessage(contact, ForwardSecurityStatusType.MESSAGE_WITHOUT_FORWARD_SECURITY);
 			}
+		} else if (session.getOutgoingAppliedVersion().getNumber() >= Version.V1_1.getNumber()) {
+			// TODO(ANDR-2452): Do not distinguish between 1.0 and newer versions when enough
+			// clients have updated. Show this status message for every message without FS.
+
+			// For sessions with version 1.1 or newer, inform for every message without fs
+			postStatusMessage(contact, ForwardSecurityStatusType.MESSAGE_WITHOUT_FORWARD_SECURITY);
 		}
 	}
 
-	private void postStatusMessageDebug(String message, Contact contact) {
+	@Override
+	public boolean hasForwardSecuritySupport(@NonNull Contact contact) {
 		ContactModel contactModel = contactService.getByIdentity(contact.getIdentity());
-		if (contactModel != null) {
-			ContactMessageReceiver receiver = contactService.createReceiver(contactModel);
-			messageService.createForwardSecurityStatus(receiver, ForwardSecurityStatusDataModel.ForwardSecurityStatusType.STATIC_TEXT, 0, "PFS: " + message);
+		if (contactModel == null) {
+			return false;
 		}
+		return ThreemaFeature.canForwardSecurity(contactModel.getFeatureMask());
 	}
 
-	private void postStatusMessage(Contact contact, @ForwardSecurityStatusDataModel.ForwardSecurityStatusType int type) {
-		postStatusMessage(contact, type, 0);
-	}
-
-	private void postStatusMessage(Contact contact, @ForwardSecurityStatusDataModel.ForwardSecurityStatusType int type, int quantity) {
+	@Override
+	public void updateFeatureMask(@NonNull Contact contact) {
 		ContactModel contactModel = contactService.getByIdentity(contact.getIdentity());
-		if (contactModel != null) {
-			ContactMessageReceiver receiver = contactService.createReceiver(contactModel);
-			messageService.createForwardSecurityStatus(receiver, type, quantity, null);
+		if (contactModel == null) {
+			return;
 		}
-	}
 
-	private void updateFeatureMask(Contact contact) {
-		ContactModel contactModel = contactService.getByIdentity(contact.getIdentity());
+		// Force a feature mask re-fetch
 		UpdateFeatureLevelRoutine.removeTimeCache(contactModel);
 		new UpdateFeatureLevelRoutine(
 			contactService,
@@ -204,6 +262,39 @@ public class ForwardSecurityStatusSender implements ForwardSecurityStatusListene
 		).run();
 	}
 
+	@Override
+	public void postIllegalSessionState(@NonNull DHSessionId sessionId, @NonNull Contact contact) {
+		ContactModel contactModel = contactService.getByIdentity(contact.getIdentity());
+		if (contactModel == null) {
+			return;
+		}
+
+		postStatusMessage(contact, ForwardSecurityStatusType.FORWARD_SECURITY_ILLEGAL_SESSION_STATE);
+	}
+
+	private void postStatusMessageDebug(@NonNull String message, @NonNull Contact contact) {
+		if (debug) {
+			ContactModel contactModel = contactService.getByIdentity(contact.getIdentity());
+			if (contactModel != null) {
+				ContactMessageReceiver receiver = contactService.createReceiver(contactModel);
+				messageService.createForwardSecurityStatus(receiver, ForwardSecurityStatusType.STATIC_TEXT, 0, "PFS: " + message);
+			}
+		}
+		logger.info("PFS: {}", message);
+	}
+
+	private void postStatusMessage(@NonNull Contact contact, @ForwardSecurityStatusType int type) {
+		postStatusMessage(contact, type, 0);
+	}
+
+	private void postStatusMessage(@NonNull Contact contact, @ForwardSecurityStatusType int type, int quantity) {
+		ContactModel contactModel = contactService.getByIdentity(contact.getIdentity());
+		if (contactModel != null) {
+			ContactMessageReceiver receiver = contactService.createReceiver(contactModel);
+			messageService.createForwardSecurityStatus(receiver, type, quantity, null);
+		}
+	}
+
 	private boolean hasLastMessageId(@NonNull Contact contact, @NonNull MessageId messageId) {
 		ContactMessageReceiver r = contactService.createReceiver(contactService.getByIdentity(contact.getIdentity()));
 
diff --git a/app/src/main/java/ch/threema/app/utils/GroupCallUtil.kt b/app/src/main/java/ch/threema/app/utils/GroupCallUtil.kt
index 012f893e..24016e90 100644
--- a/app/src/main/java/ch/threema/app/utils/GroupCallUtil.kt
+++ b/app/src/main/java/ch/threema/app/utils/GroupCallUtil.kt
@@ -21,7 +21,10 @@
 
 package ch.threema.app.utils
 
+import android.app.Activity
 import android.content.Context
+import android.os.SystemClock
+import android.provider.Settings
 import android.widget.Toast
 import androidx.appcompat.app.AppCompatActivity
 import androidx.core.content.ContextCompat
@@ -35,6 +38,7 @@ import ch.threema.app.services.ContactService
 import ch.threema.app.services.GroupService
 import ch.threema.app.services.UserService
 import ch.threema.app.voip.activities.GroupCallActivity
+import ch.threema.app.voip.groupcall.GroupCallDescription
 import ch.threema.base.utils.LoggingUtil
 import ch.threema.domain.protocol.ThreemaFeature
 import ch.threema.domain.protocol.api.APIConnector
@@ -43,9 +47,34 @@ import ch.threema.storage.models.GroupModel
 import kotlinx.coroutines.Dispatchers
 import kotlinx.coroutines.launch
 import kotlinx.coroutines.withContext
+import java.util.*
 
 private val logger = LoggingUtil.getThreemaLogger("GroupCallUtil")
 
+/**
+ * Get the time since the group call is running. If the time on the phone is potentially wrong as it
+ * is not synchronized or the given context is null, the time since the group call start message has
+ * been processed is displayed.
+ *
+ * If the device time is synchronized and the context is not null, we assume that the time is
+ * correct and return [GroupCallDescription.getRunningSince]. Otherwise we assume a wrong device
+ * time and return [GroupCallDescription.getRunningSinceProcessed].
+ *
+ * The running time is relative to [SystemClock.elapsedRealtime].
+ *
+ * @param call    the group call description
+ * @param context the context
+ * @return the time in milliseconds since the group call has been started or processed
+ */
+fun getRunningSince(call: GroupCallDescription, context: Context?): Long {
+    val isAutoTime = context != null && Settings.Global.getInt(context.contentResolver, Settings.Global.AUTO_TIME, 0) == 1
+    return if (isAutoTime) {
+        call.getRunningSince() ?: call.getRunningSinceProcessed()
+    } else {
+        call.getRunningSinceProcessed()
+    }
+}
+
 /**
  * Initiate a group call. If necessary, fetch the feature mask of the specified contact.
  *
@@ -143,6 +172,9 @@ private fun launchActivity(context: Context, groupModel: GroupModel, otherMember
         ).show()
     }
     ContextCompat.startActivity(context, GroupCallActivity.getStartCallIntent(context, groupModel.id), null)
+    if (context is Activity) {
+        context.overridePendingTransition(R.anim.activity_open_enter, R.anim.activity_close_exit)
+    }
 }
 
 fun qualifiesForGroupCalls(groupService: GroupService, groupModel: GroupModel): Boolean {
diff --git a/app/src/main/java/ch/threema/app/utils/ImageViewUtil.java b/app/src/main/java/ch/threema/app/utils/ImageViewUtil.java
index dda232a2..41489d1b 100644
--- a/app/src/main/java/ch/threema/app/utils/ImageViewUtil.java
+++ b/app/src/main/java/ch/threema/app/utils/ImageViewUtil.java
@@ -34,6 +34,7 @@ import java.util.Objects;
 import androidx.annotation.DrawableRes;
 import androidx.annotation.NonNull;
 import androidx.annotation.Nullable;
+import androidx.core.content.ContextCompat;
 import androidx.core.content.res.ResourcesCompat;
 import androidx.core.graphics.drawable.RoundedBitmapDrawable;
 import androidx.core.graphics.drawable.RoundedBitmapDrawableFactory;
@@ -116,10 +117,10 @@ public class ImageViewUtil {
 		int height = getHeightForDrawableRatio(drawable, width);
 		Bitmap bitmap = Bitmap.createBitmap(width, height, Bitmap.Config.ARGB_8888);
 		Canvas canvas = new Canvas(bitmap);
-		int background = ConfigUtils.getColorFromAttribute(context, R.attr.bubble_thumbnail_placeholder_background);
+		int background = ContextCompat.getColor(context, R.color.bubble_thumbnail_placeholder_background);
 		canvas.drawColor(background);
 		drawable.setBounds(0, 0, canvas.getWidth(), canvas.getHeight());
-		int tint = ConfigUtils.getColorFromAttribute(context, R.attr.bubble_thumbnail_placeholder_tint);
+		int tint = ContextCompat.getColor(context, R.color.bubble_thumbnail_placeholder_tint);
 		drawable.setTint(tint);
 		drawable.draw(canvas);
 		return bitmap;
diff --git a/app/src/main/java/ch/threema/app/utils/IntentDataUtil.java b/app/src/main/java/ch/threema/app/utils/IntentDataUtil.java
index fb305dc6..ccc5d777 100644
--- a/app/src/main/java/ch/threema/app/utils/IntentDataUtil.java
+++ b/app/src/main/java/ch/threema/app/utils/IntentDataUtil.java
@@ -174,9 +174,7 @@ public class IntentDataUtil {
 		ArrayList<Integer> messageIDs = new ArrayList<>(models.size());
 		ArrayList<String> messageTypes = new ArrayList<>();
 
-		Iterator<AbstractMessageModel> iterator = models.iterator();
-		while (iterator.hasNext()) {
-			AbstractMessageModel failedMessage = iterator.next();
+		for (AbstractMessageModel failedMessage : models) {
 			messageIDs.add(failedMessage.getId());
 			messageTypes.add(failedMessage.getClass().toString());
 		}
diff --git a/app/src/main/java/ch/threema/app/utils/MediaPlayerStateWrapper.java b/app/src/main/java/ch/threema/app/utils/MediaPlayerStateWrapper.java
index 0ea42e31..165f8752 100644
--- a/app/src/main/java/ch/threema/app/utils/MediaPlayerStateWrapper.java
+++ b/app/src/main/java/ch/threema/app/utils/MediaPlayerStateWrapper.java
@@ -182,9 +182,7 @@ public class MediaPlayerStateWrapper {
 					stateListener.onPrepared(mp);
 				}
 			}
-/*			mediaPlayer.start();
-			currentState = State.STARTED;
-*/		}
+		}
 	};
 
 	private MediaPlayer.OnCompletionListener onCompletionListener = new MediaPlayer.OnCompletionListener() {
@@ -310,48 +308,4 @@ public class MediaPlayerStateWrapper {
 	public void setOnCompletionListener(MediaPlayer.OnCompletionListener onCompletionListener) {
 		mediaPlayer.setOnCompletionListener(onCompletionListener);
 	}
-
-	/**
-	 * Set desired playback speed of MediaPlayer instance (without affecting pitch)
-	 * @param audioPlaybackSpeed desired playback speed
-	 * @return new playback speed. also returns 1f if setting playback speed was unsuccessful
-	 */
-	@RequiresApi(Build.VERSION_CODES.M)
-	public float setPlaybackSpeed(float audioPlaybackSpeed) throws IllegalStateException {
-		if (EnumSet.of(State.INITIALIZED, State.PREPARED, State.STARTED, State.PAUSED, State.PLAYBACK_COMPLETE, State.ERROR).contains(
-			currentState)) {
-			if (setPlaybackParamsForSpeed(audioPlaybackSpeed)) {
-				return audioPlaybackSpeed;
-			}
-
-			// fall back to regular speed if setting the desired speed failed
-			setPlaybackParamsForSpeed(1f);
-		}
-		return 1f;
-	}
-
-	@RequiresApi(Build.VERSION_CODES.M)
-	private boolean setPlaybackParamsForSpeed(float audioPlaybackSpeed) {
-		try {
-			mediaPlayer.setPlaybackParams(mediaPlayer.getPlaybackParams().setSpeed(audioPlaybackSpeed).setPitch(1f));
-			return true;
-		} catch (IllegalArgumentException e) {
-			logger.error("Unable to set playback speed to {}", audioPlaybackSpeed, e);
-		}
-		return false;
-	}
-
-	@RequiresApi(Build.VERSION_CODES.M)
-	public float getPlaybackSpeed() {
-		try {
-			return mediaPlayer.getPlaybackParams().getSpeed();
-		} catch (IllegalStateException e) {
-			logger.error("Unable to get current playback speed", e);
-			return 1f;
-		}
-	}
-
-	public void setOnSeekCompleteListener(@Nullable MediaPlayer.OnSeekCompleteListener listener) {
-		mediaPlayer.setOnSeekCompleteListener(listener);
-	}
 }
diff --git a/app/src/main/java/ch/threema/app/utils/MessageUtil.java b/app/src/main/java/ch/threema/app/utils/MessageUtil.java
index 8e72be07..a6b9ddfe 100644
--- a/app/src/main/java/ch/threema/app/utils/MessageUtil.java
+++ b/app/src/main/java/ch/threema/app/utils/MessageUtil.java
@@ -546,7 +546,7 @@ public class MessageUtil {
 						}
 					}
 
-					return new MessageViewElement(R.drawable.ic_file_filled,
+					return new MessageViewElement(IconUtil.getMimeIcon(messageModel.getFileData().getMimeType()),
 							context.getString(R.string.file_placeholder),
 							TestUtil.empty(messageModel.getFileData().getCaption()) ?
 									messageModel.getFileData().getFileName() :
@@ -675,7 +675,7 @@ public class MessageUtil {
 									context.getString(R.string.voip_gc_call_started),
 									body,
 									null,
-									R.color.group_call_accent
+									null
 								);
 							case GroupCallStatusDataModel.STATUS_ENDED:
 								return new MessageViewElement(
@@ -683,7 +683,7 @@ public class MessageUtil {
 									context.getString(R.string.voip_gc_call_ended),
 									context.getString(R.string.voip_gc_call_ended),
 									null,
-									R.color.group_call_accent
+									null
 								);
 						}
 						break;
@@ -749,6 +749,14 @@ public class MessageUtil {
 									null,
 									null
 								);
+							case ForwardSecurityStatusDataModel.ForwardSecurityStatusType.FORWARD_SECURITY_ILLEGAL_SESSION_STATE:
+								return new MessageViewElement(
+									R.drawable.ic_baseline_key_off_24,
+									context.getString(R.string.forward_security_illegal_session_status_message),
+									context.getString(R.string.forward_security_illegal_session_status_message),
+									null,
+									null
+								);
 							default:
 								return new MessageViewElement(
 									R.drawable.ic_baseline_key_24,
diff --git a/app/src/main/java/ch/threema/app/utils/MimeUtil.java b/app/src/main/java/ch/threema/app/utils/MimeUtil.java
index bc59298e..b07b6ddf 100644
--- a/app/src/main/java/ch/threema/app/utils/MimeUtil.java
+++ b/app/src/main/java/ch/threema/app/utils/MimeUtil.java
@@ -69,6 +69,7 @@ public class MimeUtil {
 	public static final String MIME_TYPE_AUDIO_XMIDI = "audio/x-midi";
 	public static final String MIME_TYPE_AUDIO_FLAC = "audio/flac";
 	public static final String MIME_TYPE_AUDIO_XFLAC = "audio/x-flac";
+	public static final String MIME_TYPE_AUDIO_OGG = "audio/ogg";
 	public static final String MIME_TYPE_ZIP = "application/zip";
 	public static final String MIME_TYPE_PDF = "application/pdf";
 	public static final String MIME_TYPE_VCARD = "text/x-vcard";
@@ -77,6 +78,8 @@ public class MimeUtil {
 	public static final String MIME_TYPE_HTML = "text/html";
 	public static final String MIME_TYPE_DEFAULT = "application/octet-stream";
 	public static final String MIME_TYPE_EMAIL = "message/rfc822";
+	public static final String MIME_TYPE_GPX = "application/gpx+xml";
+	public static final String MIME_TYPE_APPLE_PKPASS = "application/vnd.apple.pkpass";
 
 	public static final String MIME_VIDEO = "video/";
 	public static final String MIME_AUDIO = "audio/";
diff --git a/app/src/main/java/ch/threema/app/utils/NavigationUtil.java b/app/src/main/java/ch/threema/app/utils/NavigationUtil.java
index 17aa67ba..e0eb42c0 100644
--- a/app/src/main/java/ch/threema/app/utils/NavigationUtil.java
+++ b/app/src/main/java/ch/threema/app/utils/NavigationUtil.java
@@ -24,12 +24,12 @@ package ch.threema.app.utils;
 import android.app.Activity;
 import android.content.Intent;
 
-import org.slf4j.Logger;
-
 import androidx.annotation.NonNull;
 import androidx.core.app.NavUtils;
 import androidx.core.app.TaskStackBuilder;
-import ch.threema.app.R;
+
+import org.slf4j.Logger;
+
 import ch.threema.app.activities.PinLockActivity;
 import ch.threema.base.utils.LoggingUtil;
 
@@ -44,11 +44,9 @@ public class NavigationUtil {
 			TaskStackBuilder.create(activity)
 					.addNextIntentWithParentStack(upIntent)
 					.startActivities();
-			activity.overridePendingTransition(R.anim.fast_fade_in, R.anim.fast_fade_out);
 		} else {
 			try {
 				NavUtils.navigateUpFromSameTask(activity);
-				activity.overridePendingTransition(R.anim.fast_fade_in, R.anim.fast_fade_out);
 			} catch (IllegalArgumentException e) {
 				logger.info("Missing parent activity entry in manifest for " + activity.getComponentName());
 				logger.error("Exception", e);
diff --git a/app/src/main/java/ch/threema/app/utils/PermissionUtils.kt b/app/src/main/java/ch/threema/app/utils/PermissionUtils.kt
new file mode 100644
index 00000000..2fe0210f
--- /dev/null
+++ b/app/src/main/java/ch/threema/app/utils/PermissionUtils.kt
@@ -0,0 +1,298 @@
+/*  _____ _
+ * |_   _| |_  _ _ ___ ___ _ __  __ _
+ *   | | | ' \| '_/ -_) -_) '  \/ _` |_
+ *   |_| |_||_|_| \___\___|_|_|_\__,_(_)
+ *
+ * Threema for Android
+ * Copyright (c) 2023 Threema GmbH
+ *
+ * This program is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU Affero General Public License, version 3,
+ * as published by the Free Software Foundation.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+ * GNU Affero General Public License for more details.
+ *
+ * You should have received a copy of the GNU Affero General Public License
+ * along with this program. If not, see <https://www.gnu.org/licenses/>.
+ */
+
+package ch.threema.app.utils
+
+import android.Manifest
+import android.app.Activity
+import android.content.Context
+import android.content.Intent
+import android.content.SharedPreferences
+import android.content.pm.PackageManager
+import android.os.Build
+import android.os.Parcel
+import android.os.Parcelable
+import androidx.activity.result.ActivityResultLauncher
+import androidx.annotation.DrawableRes
+import androidx.core.content.ContextCompat
+import androidx.preference.PreferenceManager
+import ch.threema.app.R
+import ch.threema.app.activities.PermissionRequestActivity
+import ch.threema.app.activities.PermissionRequestActivity.Companion.INTENT_PERMISSION_REQUESTS
+
+/**
+ * Launches the [PermissionRequestActivity] with three permissions:
+ * - Microphone (required)
+ * - Nearby Devices (optional)
+ * - Phone (optional)
+ *
+ * The given permission launcher will receive [Activity.RESULT_OK] when at least the microphone
+ * permission is given. If microphone permission is denied, then [Activity.RESULT_CANCELED] is
+ * received.
+ *
+ * @param activity           the activity that starts the permission request
+ * @param permissionLauncher the permission launcher that is triggered after the permissions are
+ *                           granted or denied
+ * @param runIfGranted       the runnable that is executed if the permissions are granted before
+ *                           the permission request activity has been started
+ */
+fun requestCallPermissions(
+    activity: Activity,
+    permissionLauncher: ActivityResultLauncher<Intent>,
+    runIfGranted: (() -> Unit)?,
+) {
+    val requests = arrayListOf(
+        PermissionRequest(
+            Permission.PERMISSION_MICROPHONE,
+            activity.getString(R.string.call_mic_permission_description),
+            R.drawable.ic_microphone_outline,
+            optional = false,
+            null,
+        ),
+        PermissionRequest(
+            Permission.PERMISSION_BLUETOOTH,
+            activity.getString(R.string.call_nearby_devices_permission_description),
+            R.drawable.ic_bluetooth,
+            optional = true,
+            activity.getString(R.string.preferences__ignore_bluetooth_permission_request),
+        ),
+        PermissionRequest(
+            Permission.PERMISSION_READ_PHONE_STATE,
+            activity.getString(R.string.call_phone_permission_description),
+            R.drawable.ic_phone_in_talk,
+            optional = true,
+            activity.getString(R.string.preferences__ignore_read_phone_state_permission_request)
+        )
+    )
+    launchForRequests(activity, permissionLauncher, runIfGranted, requests)
+}
+
+/**
+ * Launches the [PermissionRequestActivity] with three permissions:
+ * - Microphone (required)
+ * - Nearby Devices (optional)
+ * - Phone (optional)
+ *
+ * The given permission launcher will receive [Activity.RESULT_OK] when at least the microphone
+ * permission is given. If microphone permission is denied, then [Activity.RESULT_CANCELED] is
+ * received.
+ *
+ * @param activity           the activity that starts the permission request
+ * @param permissionLauncher the permission launcher that is triggered after the permissions are
+ *                           granted or denied
+ * @param runIfGranted       the runnable that is executed if the permissions are granted before
+ *                           the permission request activity has been started
+ */
+fun requestGroupCallPermissions(
+    activity: Activity,
+    permissionLauncher: ActivityResultLauncher<Intent>,
+    runIfGranted: (() -> Unit)?,
+) {
+    val requests: ArrayList<PermissionRequest> = arrayListOf(
+        PermissionRequest(
+            Permission.PERMISSION_MICROPHONE,
+            activity.getString(R.string.group_call_mic_permission_description),
+            R.drawable.ic_microphone_outline,
+            optional = false,
+            null,
+        ),
+        PermissionRequest(
+            Permission.PERMISSION_BLUETOOTH,
+            activity.getString(R.string.group_call_nearby_devices_permission_description),
+            R.drawable.ic_bluetooth,
+            optional = true,
+            activity.getString(R.string.preferences__ignore_bluetooth_permission_request),
+        ),
+        PermissionRequest(
+            Permission.PERMISSION_READ_PHONE_STATE,
+            activity.getString(R.string.group_call_phone_permission_description),
+            R.drawable.ic_phone_in_talk,
+            optional = true,
+            activity.getString(R.string.preferences__ignore_read_phone_state_permission_request)
+        )
+    )
+    requests.removeAll { !it.permission.isRequired() }
+
+    if (runIfGranted == null || permissionRequestNeeded(activity, requests)) {
+        val intent = Intent(activity, PermissionRequestActivity::class.java)
+        intent.putExtra(INTENT_PERMISSION_REQUESTS, requests)
+        permissionLauncher.launch(intent)
+    } else {
+        runIfGranted()
+    }
+}
+
+private fun launchForRequests(
+    activity: Activity,
+    permissionLauncher: ActivityResultLauncher<Intent>,
+    runIfGranted: (() -> Unit)?,
+    requests: ArrayList<PermissionRequest>,
+) {
+    // Remove not required permissions (depending on android version)
+    requests.removeAll { !it.permission.isRequired() }
+
+    if (runIfGranted == null || permissionRequestNeeded(activity, requests)) {
+        val intent = Intent(activity, PermissionRequestActivity::class.java)
+        intent.putExtra(INTENT_PERMISSION_REQUESTS, requests)
+        permissionLauncher.launch(intent)
+    } else {
+        runIfGranted()
+    }
+}
+
+/**
+ * We use this enum to specify permissions as there might be different permission strings depending
+ * on the Android version.
+ */
+enum class Permission {
+    PERMISSION_BLUETOOTH,
+    PERMISSION_CAMERA,
+    PERMISSION_MICROPHONE,
+    PERMISSION_READ_PHONE_STATE;
+
+    /**
+     * Some permissions are not required on certain API levels.
+     */
+    fun isRequired(): Boolean {
+        if (Build.VERSION.SDK_INT < Build.VERSION_CODES.M) {
+            return false
+        }
+
+        return when (this) {
+            PERMISSION_BLUETOOTH -> Build.VERSION.SDK_INT >= Build.VERSION_CODES.S
+            PERMISSION_READ_PHONE_STATE -> Build.VERSION.SDK_INT >= Build.VERSION_CODES.S
+            else -> true
+        }
+    }
+
+    /**
+     * For some cases we need different permission strings depending on the API level.
+     */
+    fun getPermissionString(): String {
+        return when (this) {
+            PERMISSION_BLUETOOTH -> if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.S) {
+                Manifest.permission.BLUETOOTH_CONNECT
+            } else {
+                Manifest.permission.BLUETOOTH
+            }
+            PERMISSION_CAMERA -> Manifest.permission.CAMERA
+            PERMISSION_MICROPHONE -> Manifest.permission.RECORD_AUDIO
+            PERMISSION_READ_PHONE_STATE -> Manifest.permission.READ_PHONE_STATE
+        }
+    }
+
+    /**
+     * Permissions may have different names depending on the API level.
+     */
+    fun getPermissionName(context: Context): String {
+        return when (this) {
+            PERMISSION_BLUETOOTH -> if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.S) {
+                context.getString(R.string.permission_nearby_devices)
+            } else {
+                context.getString(R.string.permission_bluetooth)
+            }
+            PERMISSION_CAMERA -> context.getString(R.string.permission_camera)
+            PERMISSION_MICROPHONE -> context.getString(R.string.permission_microphone)
+            PERMISSION_READ_PHONE_STATE -> context.getString(R.string.permission_read_phone_state)
+        }
+    }
+
+}
+
+/**
+ * The PermissionRequest is used to specify the permission that is requested.
+ */
+data class PermissionRequest(
+    val permission: Permission,                 // the permission that is requested
+    val description: String,                    // the explanation that is shown
+    @DrawableRes val icon: Int,                 // the icon of the permission
+    val optional: Boolean,                      // false if the permission is required
+    val permissionIgnorePreference: String?,    // the 'never-ask-again'-preference (if nonnull)
+) : Parcelable {
+
+    constructor(parcel: Parcel) : this(
+        Permission.valueOf(parcel.readString()!!),
+        parcel.readString()!!,
+        parcel.readInt(),
+        parcel.readByte().toBoolean(),
+        parcel.readString(),
+    )
+
+    override fun describeContents(): Int = 0
+
+    override fun writeToParcel(dest: Parcel, flags: Int) {
+        dest.writeString(permission.name)
+        dest.writeString(description)
+        dest.writeInt(icon)
+        dest.writeByte(optional.toByte())
+        dest.writeString(permissionIgnorePreference)
+    }
+
+    companion object CREATOR : Parcelable.Creator<PermissionRequest> {
+        override fun createFromParcel(parcel: Parcel): PermissionRequest {
+            return PermissionRequest(parcel)
+        }
+
+        override fun newArray(size: Int): Array<PermissionRequest?> {
+            return arrayOfNulls(size)
+        }
+
+        private fun Byte.toBoolean(): Boolean {
+            return this != 0.toByte()
+        }
+
+        private fun Boolean.toByte(): Byte {
+            return if (this) {
+                1.toByte()
+            } else {
+                0.toByte()
+            }
+        }
+    }
+
+    fun isGrantedOrIgnored(context: Context, preferences: SharedPreferences): Boolean {
+        val granted = ContextCompat.checkSelfPermission(
+            context,
+            permission.getPermissionString()
+        ) == PackageManager.PERMISSION_GRANTED
+        return if (granted) {
+            true
+        } else {
+            isIgnored(preferences)
+        }
+    }
+
+    private fun isIgnored(preferences: SharedPreferences): Boolean {
+        return if (permissionIgnorePreference != null) {
+            preferences.getBoolean(permissionIgnorePreference, false)
+        } else {
+            false
+        }
+    }
+}
+
+private fun permissionRequestNeeded(
+    context: Context,
+    permissionRequests: List<PermissionRequest>
+): Boolean {
+    val preferences = PreferenceManager.getDefaultSharedPreferences(context)
+    return !permissionRequests.all { it.isGrantedOrIgnored(context, preferences) }
+}
diff --git a/app/src/main/java/ch/threema/app/utils/PowermanagerUtil.java b/app/src/main/java/ch/threema/app/utils/PowermanagerUtil.java
index e0d70c00..e97b7db0 100644
--- a/app/src/main/java/ch/threema/app/utils/PowermanagerUtil.java
+++ b/app/src/main/java/ch/threema/app/utils/PowermanagerUtil.java
@@ -26,6 +26,8 @@ import android.content.Context;
 import android.content.Intent;
 import android.content.pm.PackageManager;
 import android.content.pm.ResolveInfo;
+import android.os.Build;
+import android.os.PowerManager;
 
 import org.slf4j.Logger;
 
@@ -33,9 +35,10 @@ import java.util.List;
 
 import androidx.annotation.NonNull;
 import androidx.fragment.app.Fragment;
-import ch.threema.app.activities.DisableBatteryOptimizationsActivity;
 import ch.threema.base.utils.LoggingUtil;
 
+import static android.content.Context.POWER_SERVICE;
+
 public class PowermanagerUtil {
 	private static final Logger logger = LoggingUtil.getThreemaLogger("PowermanagerUtil");
 
@@ -129,6 +132,28 @@ public class PowermanagerUtil {
 	}
 
 	public static boolean needsFixing(Context context) {
-		return !DisableBatteryOptimizationsActivity.isIgnoringBatteryOptimizations(context) || hasAutostartOption(context) || hasPowerManagerOption(context);
+		return !isIgnoringBatteryOptimizations(context) || hasAutostartOption(context) || hasPowerManagerOption(context);
+	}
+
+	/**
+	 * Try to find out whether battery optimizations are already disabled for our app.
+	 * If this fails (e.g. on devices older than Android M), `true` will be returned.
+	 */
+	public static boolean isIgnoringBatteryOptimizations(@NonNull Context context) {
+		// App is always whitelisted in unit tests
+		if (RuntimeUtil.isInTest()) {
+			return true;
+		}
+		if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {
+			final PowerManager powerManager = (PowerManager) context.getApplicationContext().getSystemService(POWER_SERVICE);
+			try {
+				return powerManager.isIgnoringBatteryOptimizations(context.getPackageName());
+			} catch (Exception e) {
+				logger.error("Exception while checking if battery optimization is disabled", e);
+				// don't care about buggy phones not implementing this API
+				return true;
+			}
+		}
+		return true;
 	}
 }
diff --git a/app/src/main/java/ch/threema/app/utils/QRScannerUtil.java b/app/src/main/java/ch/threema/app/utils/QRScannerUtil.java
index 7026f4c7..3116c716 100644
--- a/app/src/main/java/ch/threema/app/utils/QRScannerUtil.java
+++ b/app/src/main/java/ch/threema/app/utils/QRScannerUtil.java
@@ -24,10 +24,11 @@ package ch.threema.app.utils;
 import android.app.Activity;
 import android.content.Intent;
 
-import org.slf4j.Logger;
-
 import androidx.annotation.NonNull;
 import androidx.appcompat.app.AppCompatActivity;
+
+import org.slf4j.Logger;
+
 import ch.threema.app.R;
 import ch.threema.app.ThreemaApplication;
 import ch.threema.app.camera.QRScannerActivity;
@@ -72,7 +73,6 @@ public class QRScannerUtil {
 		}
 		if (activity != null) {
 			activity.startActivity(intent);
-			activity.overridePendingTransition(R.anim.fast_fade_in, R.anim.fast_fade_out);
 		}
 	}
 
diff --git a/app/src/main/java/ch/threema/app/utils/QuoteUtil.java b/app/src/main/java/ch/threema/app/utils/QuoteUtil.java
index 85f4bae2..99ed7932 100644
--- a/app/src/main/java/ch/threema/app/utils/QuoteUtil.java
+++ b/app/src/main/java/ch/threema/app/utils/QuoteUtil.java
@@ -37,6 +37,7 @@ import java.util.regex.Pattern;
 import ch.threema.app.R;
 import ch.threema.app.ThreemaApplication;
 import ch.threema.app.cache.ThumbnailCache;
+import ch.threema.app.messagereceiver.MessageReceiver;
 import ch.threema.app.messagereceiver.MessageReceiver.MessageReceiverType;
 import ch.threema.app.services.FileService;
 import ch.threema.app.services.MessageService;
@@ -77,7 +78,7 @@ public class QuoteUtil {
 	 */
 	public static @Nullable QuoteContent getQuoteContent(
 		@NonNull AbstractMessageModel messageModel,
-		@MessageReceiverType int receiverType,
+		@NonNull MessageReceiver messageReceiver,
 		boolean includeMessageModel,
 		@Nullable ThumbnailCache thumbnailCache,
 		@NonNull Context context,
@@ -87,7 +88,7 @@ public class QuoteUtil {
 	) {
 		if (messageModel.getQuotedMessageId() != null) {
 			return extractQuoteV2(
-				messageModel, receiverType, includeMessageModel, thumbnailCache,
+				messageModel, messageReceiver, includeMessageModel, thumbnailCache,
 				context, messageService, userService, fileService
 			);
 		} else {
@@ -137,7 +138,7 @@ public class QuoteUtil {
 	 */
 	static @NonNull QuoteContent extractQuoteV2(
 		@NonNull AbstractMessageModel messageModel,
-		@MessageReceiverType int receiverType,
+		MessageReceiver messageReceiver,
 		boolean includeMessageModel,
 		@Nullable ThumbnailCache thumbnailCache,
 		@NonNull Context context,
@@ -150,14 +151,14 @@ public class QuoteUtil {
 		final String placeholder;
 
 		// Retrieve message model referenced by quote
-		final AbstractMessageModel quotedMessageModel = messageService.getMessageModelByApiMessageId(
+		final AbstractMessageModel quotedMessageModel = messageService.getMessageModelByApiMessageIdAndReceiver(
 			quotedMessageId,
-			receiverType
+			messageReceiver
 		);
 
 		if (quotedMessageModel != null) {
 			boolean receiverMatch = false;
-			switch (receiverType) {
+			switch (messageReceiver.getType()) {
 				case Type_CONTACT:
 					receiverMatch = quotedMessageModel.getIdentity().equals(messageModel.getIdentity());
 					break;
@@ -188,7 +189,7 @@ public class QuoteUtil {
 						bodyText,
 						quotedMessageId,
 						includeMessageModel ? quotedMessageModel : null,
-						receiverType,
+						messageReceiver,
 						thumbnail,
 						icon
 				);
@@ -359,7 +360,7 @@ public class QuoteUtil {
 		public @Nullable String identity;
 		public @Nullable String quotedMessageId;
 		public @Nullable AbstractMessageModel quotedMessageModel;
-		public @Nullable @MessageReceiverType Integer receiverType;
+		public @Nullable MessageReceiver messageReceiver;
 		public @Nullable Bitmap thumbnail;
 		public @Nullable @DrawableRes Integer icon;
 
@@ -393,7 +394,7 @@ public class QuoteUtil {
 			@NonNull String bodyText,
 			@NonNull String quotedMessageId,
 			@Nullable AbstractMessageModel quotedMessageModel,
-			@Nullable @MessageReceiverType Integer receiverType,
+			@Nullable MessageReceiver messageReceiver,
 			@Nullable Bitmap thumbnail,
 			@Nullable @DrawableRes Integer icon
 		) {
@@ -401,7 +402,7 @@ public class QuoteUtil {
 			content.identity = identity;
 			content.quotedMessageId = quotedMessageId;
 			content.quotedMessageModel = quotedMessageModel;
-			content.receiverType = receiverType;
+			content.messageReceiver = messageReceiver;
 			content.thumbnail = thumbnail;
 			content.icon = icon;
 			return content;
diff --git a/app/src/main/java/ch/threema/app/utils/RecyclerViewUtil.java b/app/src/main/java/ch/threema/app/utils/RecyclerViewUtil.java
new file mode 100644
index 00000000..9e6ddb0c
--- /dev/null
+++ b/app/src/main/java/ch/threema/app/utils/RecyclerViewUtil.java
@@ -0,0 +1,53 @@
+/*  _____ _
+ * |_   _| |_  _ _ ___ ___ _ __  __ _
+ *   | | | ' \| '_/ -_) -_) '  \/ _` |_
+ *   |_| |_||_|_| \___\___|_|_|_\__,_(_)
+ *
+ * Threema for Android
+ * Copyright (c) 2023 Threema GmbH
+ *
+ * This program is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU Affero General Public License, version 3,
+ * as published by the Free Software Foundation.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+ * GNU Affero General Public License for more details.
+ *
+ * You should have received a copy of the GNU Affero General Public License
+ * along with this program. If not, see <https://www.gnu.org/licenses/>.
+ */
+
+package ch.threema.app.utils;
+
+import android.text.TextUtils;
+import android.util.TypedValue;
+import android.view.Gravity;
+import android.widget.FrameLayout;
+import android.widget.TextView;
+
+import androidx.core.util.Consumer;
+import ch.threema.app.R;
+import ch.threema.app.ui.ThumbDatePopupBackground;
+
+public class RecyclerViewUtil {
+	/**
+	 * Style for a popup displayed next to a thumbscroller
+	 */
+	public static final Consumer<TextView> thumbScrollerPopupStyle = popupView -> {
+		FrameLayout.LayoutParams layoutParams = (FrameLayout.LayoutParams)
+			popupView.getLayoutParams();
+		layoutParams.gravity = Gravity.CENTER;
+		layoutParams.setMarginEnd(20);
+		popupView.setLayoutParams(layoutParams);
+		popupView.setBackground(new ThumbDatePopupBackground(popupView.getContext()));
+		popupView.setElevation(6);
+		popupView.setEllipsize(TextUtils.TruncateAt.END);
+		popupView.setGravity(Gravity.CENTER);
+		popupView.setIncludeFontPadding(false);
+		popupView.setSingleLine(true);
+		popupView.setTextColor(ConfigUtils.getColorFromAttribute(popupView.getContext(), R.attr.colorOnSecondaryContainer));
+		popupView.setTextSize(TypedValue.COMPLEX_UNIT_SP, 14);
+	};
+}
diff --git a/app/src/main/java/ch/threema/app/utils/RuntimeUtil.java b/app/src/main/java/ch/threema/app/utils/RuntimeUtil.java
index bd81cf2b..60fed0c3 100644
--- a/app/src/main/java/ch/threema/app/utils/RuntimeUtil.java
+++ b/app/src/main/java/ch/threema/app/utils/RuntimeUtil.java
@@ -28,7 +28,10 @@ import android.os.Looper;
 import android.os.PowerManager;
 
 import java.util.concurrent.Executor;
+import java.util.concurrent.ExecutorService;
+import java.util.concurrent.Executors;
 
+import androidx.annotation.AnyThread;
 import androidx.annotation.NonNull;
 import androidx.annotation.UiThread;
 import ch.threema.app.BuildConfig;
@@ -37,10 +40,10 @@ public class RuntimeUtil {
 	private static Boolean isInTestMode;
 	public static Handler handler = new Handler(Looper.getMainLooper());
 
+	private static final ExecutorService workerExecutor = Executors.newCachedThreadPool();
+
 	/**
 	 * check if current running environment is a test suite
-	 *
-	 * @return
 	 */
 	public static boolean isInTest() {
 		if (isInTestMode == null) {
@@ -89,6 +92,19 @@ public class RuntimeUtil {
 		}.execute();
 	}
 
+	/**
+	 * Run a {@link Runnable} in a background worker thread.
+	 *
+	 * This method is backed by a {@link Executors#newCachedThreadPool()} that will create new threads
+	 * if needed (no thread available).
+	 *
+	 * Threads that have not been used for sixty seconds are terminated and removed from the cache.
+	 */
+	@AnyThread
+	public static void runOnWorkerThread(@NonNull final Runnable runnable) {
+		workerExecutor.execute(runnable);
+	}
+
 	/**
 	 * Run the provided runnable while holding a partial wakelock
 	 * @param context context
diff --git a/app/src/main/java/ch/threema/app/utils/ShareUtil.java b/app/src/main/java/ch/threema/app/utils/ShareUtil.java
index 8c5eda64..28db4441 100644
--- a/app/src/main/java/ch/threema/app/utils/ShareUtil.java
+++ b/app/src/main/java/ch/threema/app/utils/ShareUtil.java
@@ -21,6 +21,7 @@
 
 package ch.threema.app.utils;
 
+import android.content.ActivityNotFoundException;
 import android.content.Context;
 import android.content.Intent;
 import android.net.Uri;
@@ -55,7 +56,11 @@ public class ShareUtil {
 			shareIntent.setType("text/plain");
 			shareIntent.putExtra(Intent.EXTRA_TEXT, contactName + ": https://" + BuildConfig.contactActionUrl + "/" + identity);
 
-			ActivityCompat.startActivity(context, Intent.createChooser(shareIntent, context.getString(R.string.share_via)), null);
+			try {
+				ActivityCompat.startActivity(context, Intent.createChooser(shareIntent, context.getString(R.string.share_via)), null);
+			} catch (ActivityNotFoundException e) {
+				Toast.makeText(context, R.string.no_activity_for_mime_type, Toast.LENGTH_LONG).show();
+			}
 		}
 	}
 
diff --git a/app/src/main/java/ch/threema/app/utils/ShortcutUtil.java b/app/src/main/java/ch/threema/app/utils/ShortcutUtil.java
index 73a14812..16f7d8e0 100644
--- a/app/src/main/java/ch/threema/app/utils/ShortcutUtil.java
+++ b/app/src/main/java/ch/threema/app/utils/ShortcutUtil.java
@@ -21,6 +21,9 @@
 
 package ch.threema.app.utils;
 
+import static androidx.core.content.pm.ShortcutManagerCompat.FLAG_MATCH_PINNED;
+
+import android.app.PendingIntent;
 import android.content.ComponentName;
 import android.content.Context;
 import android.content.Intent;
@@ -73,8 +76,6 @@ import ch.threema.storage.models.AbstractMessageModel;
 import ch.threema.storage.models.ContactModel;
 import ch.threema.storage.models.ConversationModel;
 
-import static androidx.core.content.pm.ShortcutManagerCompat.FLAG_MATCH_PINNED;
-
 public final class ShortcutUtil {
 	private static final Logger logger = LoggingUtil.getThreemaLogger("ShortcutUtil");
 
@@ -89,6 +90,7 @@ public final class ShortcutUtil {
 
 	private static final String DYNAMIC_SHORTCUT_SHARE_TARGET_CATEGORY = "ch.threema.app.category.DYNAMIC_SHORTCUT_SHARE_TARGET"; // do not use BuildConfig.APPLICATION_ID
 	private static final String KEY_RECENT_UIDS = "recent_uids";
+	private static final int REQUEST_CODE_SHORTCUT_ADDED = 6311;
 
 	private static class CommonShortcutInfo {
 		Intent intent;
@@ -106,8 +108,12 @@ public final class ShortcutUtil {
 		ShortcutInfoCompat shortcutInfoCompat = getPinnedShortcutInfo(messageReceiver, type);
 
 		if (shortcutInfoCompat != null) {
-			if (ShortcutManagerCompat.requestPinShortcut(getContext(), shortcutInfoCompat, null)) {
-				Toast.makeText(getContext(), R.string.add_shortcut_success, Toast.LENGTH_SHORT).show();
+			Intent pinnedShortcutCallbackIntent = new Intent(ThreemaApplication.INTENT_ACTION_SHORTCUT_ADDED);
+			PendingIntent callback = PendingIntent.getBroadcast(getContext(), REQUEST_CODE_SHORTCUT_ADDED,
+				pinnedShortcutCallbackIntent, IntentDataUtil.PENDING_INTENT_FLAG_MUTABLE);
+
+			if (ShortcutManagerCompat.requestPinShortcut(getContext(), shortcutInfoCompat, callback.getIntentSender())) {
+				logger.info("Shortcut requested");
 			} else {
 				Toast.makeText(getContext(), R.string.add_shortcut_error, Toast.LENGTH_SHORT).show();
 				logger.info("Failed to add shortcut");
diff --git a/app/src/main/java/ch/threema/app/utils/SoundUtil.java b/app/src/main/java/ch/threema/app/utils/SoundUtil.java
index 66195c3f..58835d95 100644
--- a/app/src/main/java/ch/threema/app/utils/SoundUtil.java
+++ b/app/src/main/java/ch/threema/app/utils/SoundUtil.java
@@ -91,7 +91,7 @@ public class SoundUtil {
 	}
 
 	/**
-	 * Get audio attributes for playing a ringtone accompaigning a call notification
+	 * Get audio attributes for playing a ringtone accompanying a call notification
 	 * Android 12+ will always mute the sound when DND is on. In order to be able to play a ringtone for incoming messages from a "starred" contact when INTERRUPTION_FILTER_PRIORITY is set,
 	 * we use the private FLAG_BYPASS_INTERRUPTION_POLICY flag.
 	 * @return AudioAttributes
diff --git a/app/src/main/java/ch/threema/app/utils/StateBitmapUtil.java b/app/src/main/java/ch/threema/app/utils/StateBitmapUtil.java
index d19604eb..42d93463 100644
--- a/app/src/main/java/ch/threema/app/utils/StateBitmapUtil.java
+++ b/app/src/main/java/ch/threema/app/utils/StateBitmapUtil.java
@@ -27,6 +27,7 @@ import android.widget.ImageView;
 
 import androidx.annotation.NonNull;
 import androidx.annotation.Nullable;
+import androidx.core.content.ContextCompat;
 
 import java.util.EnumMap;
 import java.util.Map;
@@ -53,20 +54,13 @@ public class StateBitmapUtil {
 		StateBitmapUtil.instance = new StateBitmapUtil(context.getApplicationContext());
 	}
 
-	private final Context context;
 	private final Map<MessageState, Integer> messageStateBitmapResourceIds = new EnumMap<>(MessageState.class);
 	private final Map<MessageState, Integer> messageStateDescriptionMap = new EnumMap<MessageState, Integer>(MessageState.class);
-	private int regularColor;
 	private int warningColor;
 	private int ackColor;
 	private int decColor;
 
 	private StateBitmapUtil(Context context) {
-		this.context = context;
-		buildState();
-	}
-
-	private void buildState() {
 		this.messageStateBitmapResourceIds.put(MessageState.READ, R.drawable.ic_visibility_filled);
 		this.messageStateBitmapResourceIds.put(MessageState.DELIVERED, R.drawable.ic_inbox_filled);
 		this.messageStateBitmapResourceIds.put(MessageState.SENT, R.drawable.ic_mail_filled);
@@ -94,19 +88,9 @@ public class StateBitmapUtil {
 		this.ackColor = context.getResources().getColor(R.color.material_green);
 		this.decColor = context.getResources().getColor(R.color.material_orange);
 		this.warningColor = context.getResources().getColor(R.color.material_red);
-
-		this.refresh();
 	}
 
-	public void refresh() {
-		if (ConfigUtils.getAppTheme(context) != ConfigUtils.THEME_LIGHT) {
-			this.regularColor = context.getResources().getColor(R.color.dark_text_color_secondary);
-		} else {
-			this.regularColor = context.getResources().getColor(R.color.text_color_secondary);
-		}
-	}
-
-	public void setStateDrawable(AbstractMessageModel messageModel, @Nullable ImageView imageView, boolean useInverseColors) {
+	public void setStateDrawable(Context context, AbstractMessageModel messageModel, @Nullable ImageView imageView, boolean useInverseColors) {
 		if (imageView == null) {
 			return;
 		}
@@ -122,15 +106,17 @@ public class StateBitmapUtil {
 				imageView.setContentDescription(context.getString(this.messageStateDescriptionMap.get(state)));
 
 				if (state == MessageState.SENDFAILED || state == MessageState.FS_KEY_MISMATCH) {
+					imageView.setImageTintList(null);
 					imageView.setColorFilter(this.warningColor);
 				} else if (state == MessageState.USERACK) {
+					imageView.setImageTintList(null);
 					imageView.setColorFilter(this.ackColor);
 				} else if (state == MessageState.USERDEC) {
+					imageView.setImageTintList(null);
 					imageView.setColorFilter(this.decColor);
 				} else {
-					if (useInverseColors) {
-						imageView.setColorFilter(this.regularColor);
-					}
+					imageView.setColorFilter(null);
+					imageView.setImageTintList(ContextCompat.getColorStateList(context, R.color.bubble_text_colorstatelist));
 				}
 			}
 		}
diff --git a/app/src/main/java/ch/threema/app/utils/StreamUtil.java b/app/src/main/java/ch/threema/app/utils/StreamUtil.java
index a3b1360c..cc34ca81 100644
--- a/app/src/main/java/ch/threema/app/utils/StreamUtil.java
+++ b/app/src/main/java/ch/threema/app/utils/StreamUtil.java
@@ -55,9 +55,11 @@ public class StreamUtil {
 				String filePath = FileUtil.getRealPathFromURI(context, uri);
 				String appPath;
 				String tmpPath;
+				String intTmpPath;
 
 				try {
 					tmpPath = ThreemaApplication.getServiceManager().getFileService().getTempPath().getAbsolutePath();
+					intTmpPath = ThreemaApplication.getServiceManager().getFileService().getIntTmpPath().getAbsolutePath();
 					appPath = context.getApplicationInfo().dataDir;
 				} catch (Exception e) {
 					return null;
@@ -65,8 +67,8 @@ public class StreamUtil {
 
 				if (TestUtil.required(filePath, appPath, tmpPath)) {
 					// do not allow sending of files from local directories - but allow tmp dir
-					if (!filePath.startsWith(appPath) || filePath.startsWith(tmpPath)) {
-						inputStream = new FileInputStream(new File(filePath));
+					if (!filePath.startsWith(appPath) || filePath.startsWith(tmpPath) || filePath.startsWith(intTmpPath)) {
+						inputStream = new FileInputStream(filePath);
 					} else {
 						throw new FileNotFoundException("File on private directory");
 					}
diff --git a/app/src/main/java/ch/threema/app/utils/UrlUtil.kt b/app/src/main/java/ch/threema/app/utils/UrlUtil.kt
index 094446ef..780b820b 100644
--- a/app/src/main/java/ch/threema/app/utils/UrlUtil.kt
+++ b/app/src/main/java/ch/threema/app/utils/UrlUtil.kt
@@ -30,6 +30,13 @@ object UrlUtil {
 
     private val ascii: Pattern = Pattern.compile("^[\\x00-\\x7F]*$")
 
+    /**
+     * Characters that are excluded from the identifier check.
+     */
+    private val nonIdentifierExceptions = setOf(
+        Char(0x002D),   // the hyphen-minus character '-'
+    )
+
     /**
      * Sets of scripts that may be mixed without a warning.
      *
@@ -107,7 +114,8 @@ object UrlUtil {
         }
 
         // Check that every character belongs to the allowed identifiers per UTS 39
-        if (component.any { !Character.isUnicodeIdentifierPart(it) }) {
+        if (component.filter { !nonIdentifierExceptions.contains(it) }
+                .any { !Character.isUnicodeIdentifierPart(it) }) {
             return false
         }
 
diff --git a/app/src/main/java/ch/threema/app/utils/VideoUtil.java b/app/src/main/java/ch/threema/app/utils/VideoUtil.java
index 968d91d2..06039616 100644
--- a/app/src/main/java/ch/threema/app/utils/VideoUtil.java
+++ b/app/src/main/java/ch/threema/app/utils/VideoUtil.java
@@ -29,9 +29,10 @@ import android.net.Uri;
 import android.provider.MediaStore;
 
 import androidx.annotation.NonNull;
-
-import com.google.android.exoplayer2.DefaultRenderersFactory;
-import com.google.android.exoplayer2.ExoPlayer;
+import androidx.annotation.OptIn;
+import androidx.media3.common.util.UnstableApi;
+import androidx.media3.exoplayer.DefaultRenderersFactory;
+import androidx.media3.exoplayer.ExoPlayer;
 
 import org.slf4j.Logger;
 
@@ -91,6 +92,7 @@ public class VideoUtil {
 		return duration;
 	}
 
+	@OptIn(markerClass = UnstableApi.class)
 	public static ExoPlayer getExoPlayer(@NonNull Context context) {
 		DefaultRenderersFactory renderersFactory = new DefaultRenderersFactory(context);
 		renderersFactory.setEnableDecoderFallback(true);
@@ -98,6 +100,9 @@ public class VideoUtil {
 			// Workaround for https://github.com/google/ExoPlayer/issues/10021
 			renderersFactory.forceDisableMediaCodecAsynchronousQueueing();
 		}
-		return new ExoPlayer.Builder(context, renderersFactory).build();
+		return new ExoPlayer.Builder(context, renderersFactory)
+			.setSeekBackIncrementMs(5000)
+			.setSeekForwardIncrementMs(5000)
+			.build();
 	}
 }
diff --git a/app/src/main/java/ch/threema/app/utils/ViewUtil.java b/app/src/main/java/ch/threema/app/utils/ViewUtil.java
index 1a5a6d5b..3c18ec98 100644
--- a/app/src/main/java/ch/threema/app/utils/ViewUtil.java
+++ b/app/src/main/java/ch/threema/app/utils/ViewUtil.java
@@ -131,28 +131,6 @@ public class ViewUtil {
 		return true;
 	}
 
-
-	/**
-	 * Determine if the supplied coordinates are within the boundaries of the view
-	 * @param view View to check
-	 * @param x x coordinates
-	 * @param y y coordinates
-	 * @return true if coordinates are on the view, false if outside or if the view does not exist
-	 */
-	public static boolean isClickOnView(@Nullable View view, float x, float y) {
-		if (view == null) {
-			return false;
-		}
-
-		int[] locationOnScreen = new int[2];
-		view.getLocationOnScreen(locationOnScreen);
-
-		return (y >= locationOnScreen[1]
-			&& y <= (locationOnScreen[1] + view.getHeight())
-			&& x >= locationOnScreen[0]
-			&& x < (locationOnScreen[0] + view.getWidth()));
-	}
-
 	/**
 	 * Set touchModal flag of PopupWindow which is hidden on API<29
 	 * @param popupWindow PopupWindow
diff --git a/app/src/main/java/ch/threema/app/utils/WorkManagerUtil.java b/app/src/main/java/ch/threema/app/utils/WorkManagerUtil.java
index a70f3743..c239fcd0 100644
--- a/app/src/main/java/ch/threema/app/utils/WorkManagerUtil.java
+++ b/app/src/main/java/ch/threema/app/utils/WorkManagerUtil.java
@@ -27,6 +27,7 @@ import org.slf4j.Logger;
 
 import java.util.List;
 import java.util.Set;
+import java.util.concurrent.ExecutionException;
 
 import androidx.work.WorkInfo;
 import androidx.work.WorkManager;
@@ -69,4 +70,22 @@ public class WorkManagerUtil {
 		}
 		return true;
 	}
+
+	public static boolean isWorkManagerInstanceScheduled(WorkManager workManager, String tag) {
+		ListenableFuture<List<WorkInfo>> workInfos = workManager.getWorkInfosForUniqueWork(tag);
+		try {
+			List<WorkInfo> workInfoList = workInfos.get();
+			for (WorkInfo workInfo : workInfoList) {
+				WorkInfo.State state = workInfo.getState();
+				if (state == WorkInfo.State.ENQUEUED || state == WorkInfo.State.BLOCKED) {
+					return true;
+				}
+			}
+		} catch (ExecutionException | InterruptedException e) {
+			logger.error("Could not get work info", e);
+			return false;
+		}
+		return false;
+	}
+
 }
diff --git a/app/src/main/java/ch/threema/app/video/transcoder/VideoConfig.java b/app/src/main/java/ch/threema/app/video/transcoder/VideoConfig.java
index 975b013a..6d505cc3 100644
--- a/app/src/main/java/ch/threema/app/video/transcoder/VideoConfig.java
+++ b/app/src/main/java/ch/threema/app/video/transcoder/VideoConfig.java
@@ -137,10 +137,11 @@ public class VideoConfig {
 	 */
 	public static int getTargetVideoBitrate(Context context, MediaItem mediaItem, int videoSize) throws ThreemaException {
 		int originalBitrate;
-		int targetBitrate = 0;
+		int targetBitrate;
 		int preferredBitrate = getPreferredVideoBitrate(videoSize);
 
 		// do not use automatic resource management on MediaMetadataRetriever
+		//noinspection resource
 		MediaMetadataRetriever metaRetriever = new MediaMetadataRetriever();
 		try {
 			metaRetriever.setDataSource(context, mediaItem.getUri());
@@ -226,11 +227,13 @@ public class VideoConfig {
 			logger.info("Preferred bit rate is {}. Falling back to bit rate {} due to size", preferredBitrate, targetBitrate);
 		}
 
-		if (targetBitrate > preferredBitrate && preferredBitrate != BITRATE_DEFAULT) {
+		if (mediaItem.getType() != MediaItem.TYPE_VIDEO_CAM && targetBitrate > preferredBitrate && preferredBitrate != BITRATE_DEFAULT) {
+			logger.info("Target bitrate ({}) is higher than preferred bitrate ({})", targetBitrate, preferredBitrate);
 			return preferredBitrate;
 		}
 
 		if (targetBitrate != originalBitrate) {
+			logger.info("Target bitrate ({}) is not original bitrate ({})", targetBitrate, originalBitrate);
 			return targetBitrate;
 		}
 
diff --git a/app/src/main/java/ch/threema/app/voicemessage/AudioRecorder.java b/app/src/main/java/ch/threema/app/voicemessage/AudioRecorder.java
index 4c80043b..789c4422 100644
--- a/app/src/main/java/ch/threema/app/voicemessage/AudioRecorder.java
+++ b/app/src/main/java/ch/threema/app/voicemessage/AudioRecorder.java
@@ -23,7 +23,9 @@ package ch.threema.app.voicemessage;
 
 import android.content.Context;
 import android.media.MediaRecorder;
+import android.media.MicrophoneDirection;
 import android.net.Uri;
+import android.os.Build;
 
 import org.slf4j.Logger;
 
@@ -32,13 +34,10 @@ import java.io.IOException;
 import ch.threema.app.utils.FileUtil;
 import ch.threema.base.utils.LoggingUtil;
 
-import static ch.threema.app.voicemessage.VoiceRecorderActivity.DEFAULT_SAMPLING_RATE_HZ;
-
 public class AudioRecorder implements MediaRecorder.OnErrorListener, MediaRecorder.OnInfoListener {
 	private static final Logger logger = LoggingUtil.getThreemaLogger("AudioRecorder");
 
-	private Context context;
-	private MediaRecorder mediaRecorder;
+	private final Context context;
 	private OnStopListener onStopListener;
 
 	public AudioRecorder(Context context) {
@@ -47,17 +46,24 @@ public class AudioRecorder implements MediaRecorder.OnErrorListener, MediaRecord
 
 	public MediaRecorder prepare(Uri uri, int maxDuration, int samplingRate) {
 		logger.info("Preparing MediaRecorder with sampling rate {}", samplingRate);
-		mediaRecorder = new MediaRecorder();
+		MediaRecorder mediaRecorder = new MediaRecorder();
 
 		mediaRecorder.setAudioSource(MediaRecorder.AudioSource.MIC);
+		if (Build.VERSION.SDK_INT >= 30) {
+			mediaRecorder.setPrivacySensitive(true);
+		}
 		mediaRecorder.setOutputFormat(MediaRecorder.OutputFormat.MPEG_4);
 		mediaRecorder.setOutputFile(FileUtil.getRealPathFromURI(context, uri));
 		mediaRecorder.setAudioChannels(1);
 		mediaRecorder.setAudioEncoder(MediaRecorder.AudioEncoder.AAC);
 		mediaRecorder.setAudioEncodingBitRate(32000);
-		mediaRecorder.setAudioSamplingRate(samplingRate != 0 ? samplingRate : DEFAULT_SAMPLING_RATE_HZ);
+		mediaRecorder.setAudioSamplingRate(samplingRate != 0 ? samplingRate : VoiceRecorderActivity.getDefaultSamplingRate());
 		mediaRecorder.setMaxFileSize(20L*1024*1024);
 
+		if (Build.VERSION.SDK_INT >= 29) {
+			mediaRecorder.setPreferredMicrophoneDirection(MicrophoneDirection.MIC_DIRECTION_TOWARDS_USER);
+		}
+
 		mediaRecorder.setOnErrorListener(this);
 		mediaRecorder.setOnInfoListener(this);
 
diff --git a/app/src/main/java/ch/threema/app/voicemessage/SamsungQuirkAudioSink.kt b/app/src/main/java/ch/threema/app/voicemessage/SamsungQuirkAudioSink.kt
new file mode 100644
index 00000000..1dba1b11
--- /dev/null
+++ b/app/src/main/java/ch/threema/app/voicemessage/SamsungQuirkAudioSink.kt
@@ -0,0 +1,60 @@
+/*  _____ _
+ * |_   _| |_  _ _ ___ ___ _ __  __ _
+ *   | | | ' \| '_/ -_) -_) '  \/ _` |_
+ *   |_| |_||_|_| \___\___|_|_|_\__,_(_)
+ *
+ * Threema for Android
+ * Copyright (c) 2023 Threema GmbH
+ *
+ * This program is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU Affero General Public License, version 3,
+ * as published by the Free Software Foundation.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+ * GNU Affero General Public License for more details.
+ *
+ * You should have received a copy of the GNU Affero General Public License
+ * along with this program. If not, see <https://www.gnu.org/licenses/>.
+ */
+
+package ch.threema.app.voicemessage
+
+import android.content.Context
+import androidx.media3.common.util.UnstableApi
+import androidx.media3.exoplayer.audio.AudioCapabilities
+import androidx.media3.exoplayer.audio.AudioSink
+import androidx.media3.exoplayer.audio.DefaultAudioSink
+import ch.threema.base.utils.LoggingUtil
+import java.nio.ByteBuffer
+
+/**
+ * Handle audio sink error on some Samsung devices when changing AudioAttributes by retrying
+ */
+@UnstableApi
+class SamsungQuirkAudioSink(context: Context, enableFloatOutput: Boolean, enableAudioTrackPlaybackParams: Boolean, enableOffload: Boolean,
+    private val delegate: AudioSink = DefaultAudioSink.Builder()
+        .setAudioCapabilities(AudioCapabilities.getCapabilities(context))
+        .setEnableFloatOutput(enableFloatOutput)
+        .setEnableAudioTrackPlaybackParams(enableAudioTrackPlaybackParams)
+        .setOffloadMode(if (enableOffload) DefaultAudioSink.OFFLOAD_MODE_ENABLED_GAPLESS_REQUIRED else DefaultAudioSink.OFFLOAD_MODE_DISABLED)
+        .build()
+) : AudioSink by delegate {
+    private val logger = LoggingUtil.getThreemaLogger("SamsungQuirkAudioSink")
+
+    override fun handleBuffer(buffer: ByteBuffer, presentationTimeUs: Long, encodedAccessUnitCount: Int): Boolean {
+        for (i in 0..4) {
+            try {
+                return delegate.handleBuffer(buffer, presentationTimeUs, encodedAccessUnitCount)
+            } catch (e: AudioSink.InitializationException) {
+                logger.info("Unable to initialize audio sink. Try {}", i)
+                if (i >= 4) {
+                    // give up
+                    throw e
+                }
+            }
+        }
+        return false
+    }
+}
diff --git a/app/src/main/java/ch/threema/app/voicemessage/VoiceRecorderActivity.java b/app/src/main/java/ch/threema/app/voicemessage/VoiceRecorderActivity.java
index fce77315..581c1f1e 100644
--- a/app/src/main/java/ch/threema/app/voicemessage/VoiceRecorderActivity.java
+++ b/app/src/main/java/ch/threema/app/voicemessage/VoiceRecorderActivity.java
@@ -23,6 +23,7 @@ package ch.threema.app.voicemessage;
 
 import static android.Manifest.permission.BLUETOOTH_CONNECT;
 
+import android.animation.LayoutTransition;
 import android.bluetooth.BluetoothAdapter;
 import android.bluetooth.BluetoothHeadset;
 import android.content.BroadcastReceiver;
@@ -30,6 +31,7 @@ import android.content.Context;
 import android.content.Intent;
 import android.content.IntentFilter;
 import android.content.pm.PackageManager;
+import android.graphics.Color;
 import android.graphics.PorterDuff;
 import android.media.AudioManager;
 import android.media.MediaPlayer;
@@ -43,6 +45,7 @@ import android.view.View;
 import android.view.ViewGroup;
 import android.view.WindowManager;
 import android.widget.ImageView;
+import android.widget.LinearLayout;
 import android.widget.SeekBar;
 import android.widget.TextView;
 import android.widget.Toast;
@@ -51,9 +54,12 @@ import androidx.annotation.DrawableRes;
 import androidx.annotation.NonNull;
 import androidx.appcompat.app.AppCompatActivity;
 import androidx.core.app.ActivityCompat;
+import androidx.core.view.WindowCompat;
 import androidx.lifecycle.DefaultLifecycleObserver;
 import androidx.lifecycle.LifecycleOwner;
 
+import com.google.android.material.button.MaterialButton;
+
 import org.slf4j.Logger;
 
 import java.io.File;
@@ -64,13 +70,11 @@ import java.util.Locale;
 import ch.threema.app.R;
 import ch.threema.app.ThreemaApplication;
 import ch.threema.app.dialogs.GenericAlertDialog;
-import ch.threema.app.listeners.SensorListener;
 import ch.threema.app.managers.ServiceManager;
 import ch.threema.app.messagereceiver.MessageReceiver;
 import ch.threema.app.services.FileService;
 import ch.threema.app.services.MessageService;
 import ch.threema.app.services.PreferenceService;
-import ch.threema.app.services.SensorService;
 import ch.threema.app.ui.DebouncedOnClickListener;
 import ch.threema.app.ui.MediaItem;
 import ch.threema.app.utils.ConfigUtils;
@@ -79,18 +83,13 @@ import ch.threema.app.utils.MediaPlayerStateWrapper;
 import ch.threema.app.utils.MimeUtil;
 import ch.threema.base.utils.LoggingUtil;
 
-public class VoiceRecorderActivity extends AppCompatActivity implements DefaultLifecycleObserver, View.OnClickListener, AudioRecorder.OnStopListener, AudioManager.OnAudioFocusChangeListener, GenericAlertDialog.DialogClickListener, SensorListener {
+public class VoiceRecorderActivity extends AppCompatActivity implements DefaultLifecycleObserver, View.OnClickListener, AudioRecorder.OnStopListener, AudioManager.OnAudioFocusChangeListener, GenericAlertDialog.DialogClickListener {
 	private static final Logger logger = LoggingUtil.getThreemaLogger("VoiceRecorderActivity");
 
 	private static final String DIALOG_TAG_CANCEL_CONFIRM = "cc";
 	private static final String DIALOG_TAG_EXPIRED_CONFIRM = "ec";
-
 	public static final int MAX_VOICE_MESSAGE_LENGTH_MILLIS = (int) DateUtils.HOUR_IN_MILLIS;
-	private static final String SENSOR_TAG_VOICE_RECORDER = "voice";
-
-	public static final int DEFAULT_SAMPLING_RATE_HZ = 44100;
 	public static final int BLUETOOTH_SAMPLING_RATE_HZ = 8000;
-
 	public static final String VOICEMESSAGE_FILE_EXTENSION = ".aac";
 	private static final int DISCARD_CONFIRMATION_THRESHOLD_SECONDS = 10;
 	private static final int PERMISSION_REQUEST_BLUETOOTH_CONNECT = 45454;
@@ -121,10 +120,9 @@ public class VoiceRecorderActivity extends AppCompatActivity implements DefaultL
 	private AudioManager audioManager;
 	private BroadcastReceiver audioStateChangedReceiver;
 	private static int scoAudioState;
-	private MessageReceiver messageReceiver;
+	private MessageReceiver<?> messageReceiver;
 
 	private PreferenceService preferenceService;
-	private SensorService sensorService;
 	private MessageService messageService;
 	private FileService fileService;
 
@@ -146,7 +144,11 @@ public class VoiceRecorderActivity extends AppCompatActivity implements DefaultL
 	protected void onCreate(Bundle savedInstanceState) {
 		getLifecycle().addObserver(this);
 
-		ConfigUtils.configureActivityTheme(this);
+		WindowCompat.setDecorFitsSystemWindows(getWindow(), false);
+		if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.Q) {
+			getWindow().setStatusBarColor(Color.TRANSPARENT);
+			getWindow().setNavigationBarColor(Color.TRANSPARENT);
+		}
 
 		super.onCreate(savedInstanceState);
 
@@ -158,7 +160,6 @@ public class VoiceRecorderActivity extends AppCompatActivity implements DefaultL
 			ServiceManager serviceManager = ThreemaApplication.getServiceManager();
 			if (serviceManager != null) {
 				preferenceService = serviceManager.getPreferenceService();
-				sensorService = serviceManager.getSensorService();
 				messageService = serviceManager.getMessageService();
 				fileService = serviceManager.getFileService();
 			}
@@ -168,7 +169,9 @@ public class VoiceRecorderActivity extends AppCompatActivity implements DefaultL
 			return;
 		}
 
-		if (preferenceService == null || sensorService == null || messageService == null || fileService == null) {
+		getWindow().setStatusBarColor(getResources().getColor(R.color.attach_status_bar_color_collapsed));
+
+		if (preferenceService == null || messageService == null || fileService == null) {
 			logger.info("Services missing.");
 			this.finish();
 			return;
@@ -197,16 +200,19 @@ public class VoiceRecorderActivity extends AppCompatActivity implements DefaultL
 			}
 
 			try {
-				File file = fileService.createTempFile(".audio", VOICEMESSAGE_FILE_EXTENSION, false);
+				File file = File.createTempFile("voice-", VOICEMESSAGE_FILE_EXTENSION, fileService.getIntTmpPath());
 				uri = Uri.fromFile(file);
 			} catch (IOException e) {
 				logger.error("Failed to open temp file");
 				this.finish();
 			}
 
+			LinearLayout buttonLayout = findViewById(R.id.button_layout);
+			buttonLayout.getLayoutTransition().enableTransitionType(LayoutTransition.APPEARING|LayoutTransition.DISAPPEARING);
+
 			timerTextView = findViewById(R.id.timer_text);
 
-			ImageView sendButton = findViewById(R.id.send_button);
+			MaterialButton sendButton = findViewById(R.id.send_button);
 			sendButton.setOnClickListener(new DebouncedOnClickListener(1000) {
 				@Override
 				public void onDebouncedClick(View v) {
@@ -481,9 +487,9 @@ public class VoiceRecorderActivity extends AppCompatActivity implements DefaultL
 		logger.info("new audioRecorder instance {}", audioRecorder);
 		try {
 			mediaRecorder = audioRecorder.prepare(uri, MAX_VOICE_MESSAGE_LENGTH_MILLIS,
-			scoAudioState == AudioManager.SCO_AUDIO_STATE_CONNECTED ?
-			BLUETOOTH_SAMPLING_RATE_HZ :
-			DEFAULT_SAMPLING_RATE_HZ );
+				scoAudioState == AudioManager.SCO_AUDIO_STATE_CONNECTED ?
+				BLUETOOTH_SAMPLING_RATE_HZ :
+				getDefaultSamplingRate());
 			logger.info("Started recording with mediaRecorder instance {}", this.mediaRecorder);
 			if (mediaRecorder != null) {
 				startTimestamp = System.nanoTime();
@@ -504,12 +510,16 @@ public class VoiceRecorderActivity extends AppCompatActivity implements DefaultL
 		return true;
 	}
 
+	public static int getDefaultSamplingRate() {
+		return ConfigUtils.hasBrokenAudioRecorder() ? 44000 : 44100;
+	}
+
 	private int getRecordingDuration() {
 		long timeDiff = System.nanoTime() - startTimestamp - pauseDuration;
 		return (int) (timeDiff / 1000 / 1000 / 1000); // convert nanoseconds to seconds
 	}
 
-	private int stopRecording() {
+	private void stopRecording() {
 		if (status == MediaState.STATE_RECORDING || status == MediaState.STATE_PAUSED) {
 			recordingDuration = 0;
 
@@ -527,8 +537,6 @@ public class VoiceRecorderActivity extends AppCompatActivity implements DefaultL
 			stopTimer();
 		}
 		updateMediaState(MediaState.STATE_NONE);
-
-		return recordingDuration;
 	}
 
 	private void pausePlayback(){
@@ -605,9 +613,13 @@ public class VoiceRecorderActivity extends AppCompatActivity implements DefaultL
 		MediaPlayer durationCheckMediaPlayer = MediaPlayer.create(this, uri);
 		if (durationCheckMediaPlayer != null) {
 			int duration = durationCheckMediaPlayer.getDuration();
+			if (duration == 0) {
+				logger.info("Duration check returned 0");
+			}
 			durationCheckMediaPlayer.release();
 			return duration;
 		}
+		logger.info("Unable to create a media player for checking size. File already deleted by OS?");
 		return 0;
 	}
 
@@ -637,7 +649,7 @@ public class VoiceRecorderActivity extends AppCompatActivity implements DefaultL
 	@Override
 	public void finish() {
 		super.finish();
-		overridePendingTransition(0, R.anim.slide_out_left_short);
+		overridePendingTransition(R.anim.fast_fade_in, R.anim.fast_fade_out);
 	}
 
 	private void reallyCancelRecording() {
@@ -672,60 +684,53 @@ public class VoiceRecorderActivity extends AppCompatActivity implements DefaultL
 
 	@Override
 	public void onClick(View v) {
-		switch (v.getId()) {
-			case R.id.discard_button:
-				stopAndReleaseMediaPlayer(mediaPlayer);
-				if (status == MediaState.STATE_RECORDING && getRecordingDuration() >= DISCARD_CONFIRMATION_THRESHOLD_SECONDS) {
+		final int id = v.getId();
+		if (id == R.id.discard_button) {
+			stopAndReleaseMediaPlayer(mediaPlayer);
+			if (status == MediaState.STATE_RECORDING && getRecordingDuration() >= DISCARD_CONFIRMATION_THRESHOLD_SECONDS) {
+				stopRecording();
+				cancelRecording();
+			} else {
+				reallyCancelRecording();
+			}
+		} else if (id == R.id.play_button) {
+			switch (status) {
+				case STATE_NONE:
+					playRecording();
+					break;
+				case STATE_RECORDING:
 					stopRecording();
-					cancelRecording();
-				} else {
-					reallyCancelRecording();
-				}
-				break;
-			case R.id.play_button:
-				switch (status) {
-					case STATE_NONE:
-						playRecording();
-						break;
-					case STATE_RECORDING:
-						stopRecording();
-						resetTimerDisplay();
-					case STATE_PAUSED:
-						stopRecording();
-						resetTimerDisplay();
-						break;
-					case STATE_PLAYING:
-						pausePlayback();
-						break;
-					case STATE_PLAYING_PAUSED:{
-						startPlayback();
-					}
-				}
-				break;
-			case R.id.pause_button:
-				switch (status) {
-					case STATE_PAUSED:
-						resumeRecording();
-						break;
-					case STATE_RECORDING:
-						pauseMedia();
-						break;
+					resetTimerDisplay();
+				case STATE_PAUSED:
+					stopRecording();
+					resetTimerDisplay();
+					break;
+				case STATE_PLAYING:
+					pausePlayback();
+					break;
+				case STATE_PLAYING_PAUSED: {
+					startPlayback();
 				}
-				break;
-			case R.id.bluetooth_toggle:
-				try {
-					if (audioManager.isBluetoothScoOn()) {
-						audioManager.stopBluetoothSco();
-					} else {
-						audioManager.startBluetoothSco();
-					}
-				} catch (Exception ignored) {
+			}
+		} else if (id == R.id.pause_button) {
+			switch (status) {
+				case STATE_PAUSED:
+					resumeRecording();
+					break;
+				case STATE_RECORDING:
+					pauseMedia();
+					break;
+			}
+		} else if (id == R.id.bluetooth_toggle) {
+			try {
+				if (audioManager.isBluetoothScoOn()) {
+					audioManager.stopBluetoothSco();
+				} else {
+					audioManager.startBluetoothSco();
 				}
-				updateBluetoothButton();
-				break;
-			default:
-				break;
-
+			} catch (Exception ignored) {
+			}
+			updateBluetoothButton();
 		}
 	}
 
@@ -788,7 +793,6 @@ public class VoiceRecorderActivity extends AppCompatActivity implements DefaultL
 
 		switch (status) {
 			case STATE_NONE:
-				activateSensors(false);
 				pauseButton.setVisibility(View.INVISIBLE);
 				playButton.setImageResource(R.drawable.ic_play);
 				playButton.setContentDescription(getString(R.string.play));
@@ -799,15 +803,12 @@ public class VoiceRecorderActivity extends AppCompatActivity implements DefaultL
 				inhibitPinLock(false);
 				break;
 			case STATE_PLAYING:
-				activateSensors(false);
 				pauseButton.setVisibility(View.INVISIBLE);
 				seekBar.setVisibility(View.VISIBLE);
 				playButton.setImageResource(R.drawable.ic_pause);
 				playButton.setContentDescription(getString(R.string.stop));
 				recordImage.setImageResource(R.drawable.ic_play);
-				if (ConfigUtils.getAppTheme(this) == ConfigUtils.THEME_DARK) {
-					recordImage.setColorFilter(getResources().getColor(R.color.dark_text_color_primary), PorterDuff.Mode.SRC_IN);
-				}
+				recordImage.setColorFilter(ConfigUtils.getColorFromAttribute(this, R.attr.colorOnSurface), PorterDuff.Mode.SRC_IN);
 				recordImage.setVisibility(View.VISIBLE);
 				startBlinking();
 				startTimer();
@@ -815,7 +816,6 @@ public class VoiceRecorderActivity extends AppCompatActivity implements DefaultL
 				inhibitPinLock(true);
 				break;
 			case STATE_RECORDING:
-				activateSensors(true);
 				pauseButton.setImageResource(R.drawable.ic_pause);
 				pauseButton.clearColorFilter();
 				pauseButton.setVisibility(supportsPauseResume() ? View.VISIBLE : View.INVISIBLE);
@@ -830,7 +830,6 @@ public class VoiceRecorderActivity extends AppCompatActivity implements DefaultL
 				inhibitPinLock(true);
 				break;
 			case STATE_PAUSED:
-				activateSensors(false);
 				pauseButton.setImageResource(R.drawable.ic_record);
 				pauseButton.setColorFilter(getResources().getColor(R.color.material_red), PorterDuff.Mode.SRC_IN);
 				pauseButton.setVisibility(supportsPauseResume() ? View.VISIBLE : View.INVISIBLE);
@@ -843,7 +842,6 @@ public class VoiceRecorderActivity extends AppCompatActivity implements DefaultL
 				inhibitPinLock(true);
 				break;
 			case STATE_PLAYING_PAUSED:
-				activateSensors(false);
 				playButton.setImageResource(R.drawable.ic_play);
 				playButton.setContentDescription(getString(R.string.play));
 				recordImage.setVisibility(View.INVISIBLE);
@@ -932,10 +930,15 @@ public class VoiceRecorderActivity extends AppCompatActivity implements DefaultL
 	@Override
 	protected void onDestroy() {
 		logger.debug("onDestroy");
-		timeDisplayHandler.removeCallbacksAndMessages(null);
-		blinkingHandler.removeCallbacksAndMessages(null);
-		seekBarHandler.removeCallbacksAndMessages(null);
-		activateSensors(false);
+		if (timeDisplayHandler != null) {
+			timeDisplayHandler.removeCallbacksAndMessages(null);
+		}
+		if (blinkingHandler != null) {
+			blinkingHandler.removeCallbacksAndMessages(null);
+		}
+		if (seekBarHandler != null) {
+			seekBarHandler.removeCallbacksAndMessages(null);
+		}
 
 		if (isBluetoothEnabled()) {
 			logger.debug("stopBluetoothSco");
@@ -976,21 +979,6 @@ public class VoiceRecorderActivity extends AppCompatActivity implements DefaultL
 		}
 	}
 
-	private void activateSensors(boolean activate) {
-		if (preferenceService.isUseProximitySensor()) {
-			if (activate) {
-				sensorService.registerSensors(SENSOR_TAG_VOICE_RECORDER, this);
-			} else {
-				sensorService.unregisterSensors(SENSOR_TAG_VOICE_RECORDER);
-			}
-		}
-	}
-
-	@Override
-	public void onSensorChanged(String key, boolean value) {
-		logger.debug("onSensorChanged: " + value);
-	}
-
 	@Override
 	public void onRequestPermissionsResult(int requestCode, @NonNull String[] permissions, @NonNull int[] grantResults) {
 		super.onRequestPermissionsResult(requestCode, permissions, grantResults);
diff --git a/app/src/main/java/ch/threema/app/voip/activities/CallActionIntentActivity.java b/app/src/main/java/ch/threema/app/voip/activities/CallActionIntentActivity.java
index f81e3123..04a41418 100644
--- a/app/src/main/java/ch/threema/app/voip/activities/CallActionIntentActivity.java
+++ b/app/src/main/java/ch/threema/app/voip/activities/CallActionIntentActivity.java
@@ -60,17 +60,6 @@ public class CallActionIntentActivity extends ThreemaActivity {
 	private ContactService contactService;
 	private PreferenceService preferenceService;
 	private LicenseService licenseService;
-	private ContactModel contact;
-
-	private final ActivityResultLauncher<String> readPhoneStatePermissionLauncher = registerForActivityResult(new ActivityResultContracts.RequestPermission(), isGranted -> {
-		if (!isGranted && !ActivityCompat.shouldShowRequestPermissionRationale(this, Manifest.permission.READ_PHONE_STATE)) {
-			ConfigUtils.showPermissionRationale(this, null, R.string.read_phone_state_short_message);
-		} else {
-			if (!VoipUtil.initiateCall(this, contact, false, this::finish, null)) {
-				finish();
-			}
-		}
-	});
 
 	@Override
 	protected boolean checkInstances() {
@@ -113,7 +102,7 @@ public class CallActionIntentActivity extends ThreemaActivity {
 		}
 
 	//	String contactIdentity = null;
-		contact = null;
+		ContactModel contact = null;
 
 		// Validate intent
 		final Intent intent = getIntent();
@@ -148,7 +137,7 @@ public class CallActionIntentActivity extends ThreemaActivity {
 
 		logger.info("Calling {} via call intent action", contact.getIdentity());
 
-		if (!VoipUtil.initiateCall(this, contact, false, this::finish, readPhoneStatePermissionLauncher)) {
+		if (!VoipUtil.initiateCall(this, contact, false, this::finish)) {
 			finish();
 		}
 	}
diff --git a/app/src/main/java/ch/threema/app/voip/activities/CallActivity.java b/app/src/main/java/ch/threema/app/voip/activities/CallActivity.java
index 24320941..2e944627 100644
--- a/app/src/main/java/ch/threema/app/voip/activities/CallActivity.java
+++ b/app/src/main/java/ch/threema/app/voip/activities/CallActivity.java
@@ -21,6 +21,14 @@
 
 package ch.threema.app.voip.activities;
 
+import static android.view.WindowManager.LayoutParams.LAYOUT_IN_DISPLAY_CUTOUT_MODE_SHORT_EDGES;
+import static ch.threema.app.utils.ShortcutUtil.EXTRA_CALLED_FROM_SHORTCUT;
+import static ch.threema.app.voip.services.VideoContext.CAMERA_FRONT;
+import static ch.threema.app.voip.services.VoipCallService.EXTRA_ACTIVITY_MODE;
+import static ch.threema.app.voip.services.VoipStateService.VIDEO_RENDER_FLAG_INCOMING;
+import static ch.threema.app.voip.services.VoipStateService.VIDEO_RENDER_FLAG_NONE;
+import static ch.threema.app.voip.services.VoipStateService.VIDEO_RENDER_FLAG_OUTGOING;
+
 import android.Manifest;
 import android.animation.ObjectAnimator;
 import android.annotation.SuppressLint;
@@ -29,8 +37,6 @@ import android.app.Activity;
 import android.app.AppOpsManager;
 import android.app.KeyguardManager;
 import android.app.PictureInPictureParams;
-import android.bluetooth.BluetoothAdapter;
-import android.bluetooth.BluetoothProfile;
 import android.content.BroadcastReceiver;
 import android.content.Context;
 import android.content.Intent;
@@ -66,10 +72,24 @@ import android.widget.ImageView;
 import android.widget.TextView;
 import android.widget.Toast;
 
+import com.getkeepsafe.taptargetview.TapTarget;
+import com.getkeepsafe.taptargetview.TapTargetView;
+
+import org.slf4j.Logger;
+import org.webrtc.RendererCommon;
+import org.webrtc.SurfaceViewRenderer;
+
+import java.util.ArrayList;
+import java.util.Collections;
+import java.util.HashSet;
+import java.util.concurrent.ExecutionException;
+
+import androidx.activity.result.ActivityResultLauncher;
+import androidx.activity.result.contract.ActivityResultContracts;
 import androidx.annotation.AnyThread;
+import androidx.annotation.ColorInt;
 import androidx.annotation.DrawableRes;
 import androidx.annotation.IdRes;
-import androidx.annotation.IntDef;
 import androidx.annotation.NonNull;
 import androidx.annotation.Nullable;
 import androidx.annotation.RequiresApi;
@@ -77,7 +97,6 @@ import androidx.annotation.StringRes;
 import androidx.annotation.UiThread;
 import androidx.constraintlayout.widget.ConstraintLayout;
 import androidx.constraintlayout.widget.ConstraintSet;
-import androidx.core.app.ActivityCompat;
 import androidx.core.app.NotificationManagerCompat;
 import androidx.core.content.ContextCompat;
 import androidx.core.view.ViewCompat;
@@ -86,19 +105,6 @@ import androidx.localbroadcastmanager.content.LocalBroadcastManager;
 import androidx.transition.ChangeBounds;
 import androidx.transition.Transition;
 import androidx.transition.TransitionManager;
-
-import com.getkeepsafe.taptargetview.TapTarget;
-import com.getkeepsafe.taptargetview.TapTargetView;
-
-import org.slf4j.Logger;
-import org.webrtc.RendererCommon;
-import org.webrtc.SurfaceViewRenderer;
-
-import java.util.ArrayList;
-import java.util.Collections;
-import java.util.HashSet;
-import java.util.concurrent.ExecutionException;
-
 import ch.threema.app.BuildConfig;
 import ch.threema.app.R;
 import ch.threema.app.ThreemaApplication;
@@ -121,6 +127,7 @@ import ch.threema.app.services.SensorService;
 import ch.threema.app.ui.AnimatedEllipsisTextView;
 import ch.threema.app.ui.BottomSheetItem;
 import ch.threema.app.ui.DebouncedOnClickListener;
+import ch.threema.app.ui.LongToast;
 import ch.threema.app.ui.TooltipPopup;
 import ch.threema.app.utils.AnimationUtil;
 import ch.threema.app.utils.AudioDevice;
@@ -128,6 +135,7 @@ import ch.threema.app.utils.BitmapUtil;
 import ch.threema.app.utils.ConfigUtils;
 import ch.threema.app.utils.ContactUtil;
 import ch.threema.app.utils.NameUtil;
+import ch.threema.app.utils.PermissionUtilsKt;
 import ch.threema.app.utils.RuntimeUtil;
 import ch.threema.app.utils.TestUtil;
 import ch.threema.app.voip.AudioSelectorButton;
@@ -150,14 +158,6 @@ import ch.threema.localcrypto.MasterKey;
 import ch.threema.storage.models.ContactModel;
 import java8.util.concurrent.CompletableFuture;
 
-import static android.view.WindowManager.LayoutParams.LAYOUT_IN_DISPLAY_CUTOUT_MODE_SHORT_EDGES;
-import static ch.threema.app.utils.ShortcutUtil.EXTRA_CALLED_FROM_SHORTCUT;
-import static ch.threema.app.voip.services.VideoContext.CAMERA_FRONT;
-import static ch.threema.app.voip.services.VoipCallService.EXTRA_ACTIVITY_MODE;
-import static ch.threema.app.voip.services.VoipStateService.VIDEO_RENDER_FLAG_INCOMING;
-import static ch.threema.app.voip.services.VoipStateService.VIDEO_RENDER_FLAG_NONE;
-import static ch.threema.app.voip.services.VoipStateService.VIDEO_RENDER_FLAG_OUTGOING;
-
 /**
  * Activity for peer connection call setup, call waiting
  * and call view.
@@ -217,11 +217,7 @@ public class CallActivity extends ThreemaActivity implements
 	};
 
 	// Permissions
-	private final static int PERMISSION_REQUEST_RECORD_AUDIO = 9001;
 	private final static int PERMISSION_REQUEST_CAMERA = 9002;
-	private final static int PERMISSION_REQUEST_BLUETOOTH_CONNECT = 9003;
-	@IntDef({PERMISSION_REQUEST_RECORD_AUDIO, PERMISSION_REQUEST_CAMERA, PERMISSION_REQUEST_BLUETOOTH_CONNECT})
-	private @interface PermissionRequest {}
 	/**
 	 * This future resolves as soon as the microphone permission request has been answered.
 	 * It resolves to a boolean that indicates whether the permission was granted or not.
@@ -232,11 +228,16 @@ public class CallActivity extends ThreemaActivity implements
 	 * It resolves to a boolean that indicates whether the permission was granted or not.
 	 */
 	private @Nullable CompletableFuture<PermissionRequestResult> camPermissionResponse;
-	/**
-	 * This future resolves as soon as the bluetooth connect permission request has been answered.
-	 * It resolves to a boolean that indicates whether the permission was granted or not.
-	 */
-	private @Nullable CompletableFuture<PermissionRequestResult> bluetoothConnectPermissionResponse;
+
+	private final ActivityResultLauncher<Intent> permissionLauncher = registerForActivityResult(
+		new ActivityResultContracts.StartActivityForResult(),
+		result -> {
+			if (result.getResultCode() == Activity.RESULT_OK) {
+				initializeCall(getIntent());
+			} else {
+				abortWithError();
+			}
+		});
 
 	private static final String DIALOG_TAG_SELECT_AUDIO_DEVICE = "saud";
 
@@ -525,8 +526,8 @@ public class CallActivity extends ThreemaActivity implements
 											&& (voipStateService.getVideoRenderMode() & VIDEO_RENDER_FLAG_OUTGOING) != VIDEO_RENDER_FLAG_OUTGOING) {
 											int[] location = new int[2];
 											commonViews.audioSelectorButton.getLocationInWindow(location);
-											location[1] += (commonViews.audioSelectorButton.getHeight() / 5);
-											audioSelectorTooltip = new TooltipPopup(CallActivity.this, R.string.preferences__tooltip_audio_selector_hint, R.layout.popup_tooltip_bottom_right, CallActivity.this);
+											location[0] += (commonViews.audioSelectorButton.getWidth() / 2);
+											audioSelectorTooltip = new TooltipPopup(CallActivity.this, R.string.preferences__tooltip_audio_selector_hint,CallActivity.this);
 											audioSelectorTooltip.show(CallActivity.this, commonViews.audioSelectorButton, getString(R.string.tooltip_voip_enable_speakerphone), TooltipPopup.ALIGN_ABOVE_ANCHOR_ARROW_RIGHT, location, 5000);
 											audioSelectorTooltipShown = true;
 										}
@@ -545,8 +546,9 @@ public class CallActivity extends ThreemaActivity implements
 												((voipStateService.getVideoRenderMode() & VIDEO_RENDER_FLAG_OUTGOING) != VIDEO_RENDER_FLAG_OUTGOING)) {
 												int[] location = new int[2];
 												commonViews.toggleOutgoingVideoButton.getLocationInWindow(location);
-												location[1] -= (commonViews.toggleOutgoingVideoButton.getHeight() / 5);
-												toggleVideoTooltip = new TooltipPopup(CallActivity.this, 0, R.layout.popup_tooltip_top_right, CallActivity.this);
+												location[0] += (commonViews.toggleOutgoingVideoButton.getWidth() / 2);
+												location[1]	+= commonViews.toggleOutgoingVideoButton.getHeight();
+												toggleVideoTooltip = new TooltipPopup(CallActivity.this, 0, CallActivity.this);
 												toggleVideoTooltip.show(CallActivity.this, commonViews.toggleOutgoingVideoButton, getString(R.string.tooltip_voip_other_party_video_on), TooltipPopup.ALIGN_BELOW_ANCHOR_ARROW_RIGHT, location, 6000);
 												toggleVideoTooltipShown = true;
 											}
@@ -609,7 +611,7 @@ public class CallActivity extends ThreemaActivity implements
 					case ACTION_DISABLE_VIDEO:
 						logger.debug("Video disabled by peer.");
 						if ((voipStateService.getVideoRenderMode() & VIDEO_RENDER_FLAG_OUTGOING) == VIDEO_RENDER_FLAG_OUTGOING) {
-							Toast.makeText(CallActivity.this, getString(R.string.voip_peer_video_disabled), Toast.LENGTH_LONG).show();
+							LongToast.makeText(CallActivity.this, getString(R.string.voip_peer_video_disabled), Toast.LENGTH_LONG).show();
 						}
 						voipStateService.setVideoRenderMode(VIDEO_RENDER_FLAG_NONE);
 						if (commonViews != null) {
@@ -785,7 +787,7 @@ public class CallActivity extends ThreemaActivity implements
 		final MasterKey masterKey = ThreemaApplication.getMasterKey();
 		if (masterKey != null && masterKey.isLocked()) {
 			logger.warn("Cannot start call, master key is locked");
-			Toast.makeText(this, R.string.master_key_locked, Toast.LENGTH_LONG).show();
+			LongToast.makeText(this, R.string.master_key_locked, Toast.LENGTH_LONG).show();
 			finish();
 			return;
 		}
@@ -830,32 +832,12 @@ public class CallActivity extends ThreemaActivity implements
 			return;
 		}
 
-		// Check for mandatory permissions
-		logger.info("Checking for audio permission...");
-		this.micPermissionResponse = new CompletableFuture<>();
-		if (ConfigUtils.requestAudioPermissions(this, null, PERMISSION_REQUEST_RECORD_AUDIO)) {
-			this.micPermissionResponse.complete(new PermissionRequestResult(true, true));
-		}
-
 		// Initialize activity once all permissions are granted
-		this.micPermissionResponse
-			.thenAccept((result) -> {
-				if (result.isGranted()) {
-					logger.info("Audio permission granted");
-					checkBluetoothPermission();
-				} else {
-					logger.warn("Audio permission not granted");
-					Toast.makeText(CallActivity.this, R.string.permission_record_audio_required, Toast.LENGTH_LONG).show();
-					abortWithError(VoipCallAnswerData.RejectReason.DISABLED);
-				}
-			})
-			.exceptionally((e) -> {
-				if (e != null) {
-					logger.error("Error in initializeActivity", e);
-					abortWithError();
-				}
-				return null;
-			});
+		logger.info("Checking for required permissions");
+		PermissionUtilsKt.requestCallPermissions(this, permissionLauncher, () -> {
+			initializeCall(getIntent());
+			return null;
+		});
 
 		// Check reject preferences and fix them if necessary
 		if (this.preferenceService.isRejectMobileCalls()) {
@@ -870,49 +852,6 @@ public class CallActivity extends ThreemaActivity implements
 		keepAliveHandler.postDelayed(keepAliveTask, KEEP_ALIVE_DELAY);
 	}
 
-	private void checkBluetoothPermission() {
-		if (Build.VERSION.SDK_INT < Build.VERSION_CODES.S) {
-			initializeActivity(getIntent());
-			return;
-		}
-
-		try {
-			// simple check for connected headset - this still works with legacy BT permissions
-			BluetoothAdapter bluetoothAdapter = BluetoothAdapter.getDefaultAdapter();
-			if (bluetoothAdapter == null || BluetoothProfile.STATE_CONNECTED != bluetoothAdapter.getProfileConnectionState(BluetoothProfile.HEADSET)) {
-				initializeActivity(getIntent());
-				return;
-			}
-		} catch (Exception e) {
-			logger.error("Unable to get BT connection state. Android >12?", e);
-		}
-
-		this.bluetoothConnectPermissionResponse = new CompletableFuture<>();
-		if (ConfigUtils.requestBluetoothConnectPermissions(this, null, PERMISSION_REQUEST_BLUETOOTH_CONNECT, true)) {
-			this.bluetoothConnectPermissionResponse.complete(new PermissionRequestResult(true, true));
-		}
-
-		// Initialize activity once all permissions are granted
-		this.bluetoothConnectPermissionResponse
-			.thenAccept((result) -> {
-				if (result.isGranted()) {
-					logger.info("BLUETOOTH_CONNECT permission granted");
-				} else {
-					Toast.makeText(CallActivity.this, R.string.permission_bluetooth_connect_required, Toast.LENGTH_LONG).show();
-					logger.warn("BLUETOOTH_CONNECT permission not granted");
-					// simply continue without bluetooth support
-				}
-				initializeActivity(getIntent());
-			})
-			.exceptionally((e) -> {
-				if (e != null) {
-					logger.error("Error in checkBluetoothConnect", e);
-					abortWithError();
-				}
-				return null;
-			});
-	}
-
 
 	private boolean restoreState(@NonNull Intent intent, Bundle savedInstanceState) {
 		// Every valid intent must either be a call action intent,
@@ -1071,12 +1010,10 @@ public class CallActivity extends ThreemaActivity implements
 		super.onNewIntent(intent);
 		setIntent(intent);
 		if (restoreState(intent, null)) {
-			try {
-				this.initializeActivity(intent);
-			} catch (Exception e) {
-				logger.error("Error in initializeActivity", e);
-				this.abortWithError();
-			}
+			PermissionUtilsKt.requestCallPermissions(this, permissionLauncher, () -> {
+				initializeCall(intent);
+				return null;
+			});
 		} else {
 			logger.info("Unable to restore state");
 			this.abortWithError();
@@ -1268,6 +1205,21 @@ public class CallActivity extends ThreemaActivity implements
 
 	//region Activity initialization
 
+	/**
+	 * Finishes initializing the activity and aborts with error if an exception is thrown. Call this
+	 * when all required permissions are granted.
+	 *
+	 * @param intent the intent to initialize the activity
+	 */
+	private void initializeCall(Intent intent) {
+		try {
+			initializeActivity(intent);
+		} catch (Exception e) {
+			logger.error("Error in initializeActivity", e);
+			abortWithError();
+		}
+	}
+
 	/**
 	 * Initialize the activity with the specified intent.
 	 */
@@ -1276,6 +1228,13 @@ public class CallActivity extends ThreemaActivity implements
 	private void initializeActivity(final Intent intent) {
 		logger.info("Initialize activity");
 
+		if (VoipUtil.isPSTNCallOngoing(this)) {
+			LongToast.makeText(this, getString(R.string.voip_another_pstn_call), Toast.LENGTH_LONG).show();
+			abortWithError(VoipCallAnswerData.RejectReason.BUSY);
+			finish();
+			return;
+		}
+
 		final long callId = this.voipStateService.getCallState().getCallId();
 		final Boolean isInitiator = this.voipStateService.isInitiator();
 
@@ -1428,8 +1387,9 @@ public class CallActivity extends ThreemaActivity implements
 					if (navigationShown) {
 						int[] location = new int[2];
 						v.getLocationInWindow(location);
-						location[1] -= (v.getHeight() / 5);
-						TooltipPopup tooltipPopup = new TooltipPopup(CallActivity.this, 0, R.layout.popup_tooltip_top_right, CallActivity.this);
+						location[0] += (v.getWidth() / 2);
+						location[1]	+= v.getHeight();
+						TooltipPopup tooltipPopup = new TooltipPopup(CallActivity.this, 0, CallActivity.this);
 						tooltipPopup.show(CallActivity.this, v, getString(R.string.tooltip_voip_other_party_video_disabled), TooltipPopup.ALIGN_BELOW_ANCHOR_ARROW_RIGHT, location, 3000);
 					}
 					return;
@@ -1460,7 +1420,7 @@ public class CallActivity extends ThreemaActivity implements
 									VoipUtil.sendVoipBroadcast(getApplicationContext(), VoipCallService.ACTION_START_CAPTURING);
 								} else {
 									// Permission was rejected
-									Toast.makeText(CallActivity.this, R.string.permission_camera_videocall_required, Toast.LENGTH_LONG).show();
+									LongToast.makeText(CallActivity.this, R.string.permission_camera_videocall_required, Toast.LENGTH_LONG).show();
 								}
 							}
 						})
@@ -1556,17 +1516,19 @@ public class CallActivity extends ThreemaActivity implements
 
 				if (ConfigUtils.isVideoCallsEnabled()) {
 					if (preferenceService.getVideoCallToggleTooltipCount() < 1) {
+						final @ColorInt int textColor = ConfigUtils.getColorFromAttribute(this, R.attr.colorOnPrimary);
+
 						try {
 							TapTargetView.showFor(CallActivity.this,
 								TapTarget.forView(commonViews.toggleOutgoingVideoButton, getString(R.string.video_calls), getString(R.string.tooltip_voip_turn_on_camera))
-									.outerCircleColor(ConfigUtils.getAppTheme(CallActivity.this) == ConfigUtils.THEME_DARK ? R.color.dark_accent : R.color.accent_light)      // Specify a color for the outer circle
+									.outerCircleColorInt(ConfigUtils.getColorFromAttribute(this, R.attr.colorPrimary))      // Specify a color for the outer circle
 									.outerCircleAlpha(0.96f)            // Specify the alpha amount for the outer circle
 									.targetCircleColor(android.R.color.white)   // Specify a color for the target circle
 									.titleTextSize(24)                  // Specify the size (in sp) of the title text
-									.titleTextColor(android.R.color.white)      // Specify the color of the title text
+									.titleTextColorInt(textColor)      // Specify the color of the title text
 									.descriptionTextSize(18)            // Specify the size (in sp) of the description text
-									.descriptionTextColor(android.R.color.white)  // Specify the color of the description text
-									.textColor(android.R.color.white)            // Specify a color for both the title and description text
+									.descriptionTextColorInt(textColor)  // Specify the color of the description text
+									.textColorInt(textColor)            // Specify a color for both the title and description text
 									.textTypeface(Typeface.SANS_SERIF)  // Specify a typeface for the text
 									.dimColor(android.R.color.black)            // If set, will dim behind the view with 30% opacity of the given color
 									.drawShadow(true)                   // Whether to draw a drop shadow or not
@@ -1967,7 +1929,7 @@ public class CallActivity extends ThreemaActivity implements
 	@TargetApi(Build.VERSION_CODES.S)
 	@Override
 	public void onRequestPermissionsResult(
-		@PermissionRequest int requestCode,
+		int requestCode,
 		@NonNull String[] permissions,
 		@NonNull int[] grantResults
 	) {
@@ -1975,53 +1937,18 @@ public class CallActivity extends ThreemaActivity implements
 
 		if (grantResults.length > 0 && grantResults[0] == PackageManager.PERMISSION_GRANTED) {
 			// Permission was granted
-			final CompletableFuture<PermissionRequestResult> future;
-			switch (requestCode) {
-				case PERMISSION_REQUEST_RECORD_AUDIO:
-					future = this.micPermissionResponse;
-					break;
-				case PERMISSION_REQUEST_CAMERA:
-					future = this.camPermissionResponse;
-					break;
-				case PERMISSION_REQUEST_BLUETOOTH_CONNECT:
-					future = this.bluetoothConnectPermissionResponse;
-					break;
-				default:
-					future = null;
-			}
-			if (future != null) {
-				future.complete(new PermissionRequestResult(true, false));
+			if (requestCode == PERMISSION_REQUEST_CAMERA) {
+				if (this.camPermissionResponse != null) {
+					this.camPermissionResponse.complete(new PermissionRequestResult(true, false));
+				}
 			}
 		} else {
-			final String permission;
-			final CompletableFuture<PermissionRequestResult> future;
-			switch (requestCode) {
-				case PERMISSION_REQUEST_RECORD_AUDIO:
-					permission = Manifest.permission.RECORD_AUDIO;
-					future = this.micPermissionResponse;
-					break;
-				case PERMISSION_REQUEST_CAMERA:
-					permission = Manifest.permission.CAMERA;
-					future = this.camPermissionResponse;
-					break;
-				case PERMISSION_REQUEST_BLUETOOTH_CONNECT:
-					permission = Manifest.permission.BLUETOOTH_CONNECT;
-					future = this.bluetoothConnectPermissionResponse;
-					break;
-				default:
-					logger.warn("Invalid permission request code: {}", requestCode);
-					return;
-			}
-			if (!ActivityCompat.shouldShowRequestPermissionRationale(this, permission)) {
-				logger.warn("Could not start call, permission {} manually rejected", permission);
-				if (future != null) {
-					future.complete(new PermissionRequestResult(false, false));
+			if (requestCode == PERMISSION_REQUEST_CAMERA) {
+				if (this.camPermissionResponse != null) {
+					this.camPermissionResponse.complete(new PermissionRequestResult(false, false));
 				}
 			} else {
-				logger.warn("Could not get permission {}, rejected by user", permission);
-				if (future != null) {
-					future.complete(new PermissionRequestResult(false, false));
-				}
+				logger.warn("Invalid permission request code: {}", requestCode);
 			}
 		}
 	}
diff --git a/app/src/main/java/ch/threema/app/voip/activities/GroupCallActivity.kt b/app/src/main/java/ch/threema/app/voip/activities/GroupCallActivity.kt
index 43457ce6..d4b5e490 100644
--- a/app/src/main/java/ch/threema/app/voip/activities/GroupCallActivity.kt
+++ b/app/src/main/java/ch/threema/app/voip/activities/GroupCallActivity.kt
@@ -79,7 +79,6 @@ import ch.threema.storage.models.GroupModel
 import kotlinx.coroutines.*
 import java.lang.Runnable
 import java.util.*
-import kotlin.concurrent.schedule
 
 private val logger = LoggingUtil.getThreemaLogger("GroupCallActivity")!!
 
@@ -133,13 +132,13 @@ class GroupCallActivity : ThreemaActivity(), GenericAlertDialog.DialogClickListe
 		}
 	}
 
-	private val audioSettingsLauncher = registerForActivityResult(ActivityResultContracts.StartActivityForResult()
-	) {
-		if (ConfigUtils.isPermissionGranted(this, RECORD_AUDIO)) {
-			checkPhoneStateAndJoinCall()
-		} else {
-			setResult(RESULT_CANCELED)
-			finish()
+	private val permissionLauncher = registerForActivityResult(ActivityResultContracts.StartActivityForResult()) {
+		when (it.resultCode) {
+			RESULT_OK -> checkPhoneStateAndJoinCall()
+			else -> {
+				setResult(RESULT_CANCELED)
+				finish()
+			}
 		}
 	}
 
@@ -150,16 +149,6 @@ class GroupCallActivity : ThreemaActivity(), GenericAlertDialog.DialogClickListe
 		}
 	}
 
-	private val readPhoneStateSettingsLauncher = registerForActivityResult(ActivityResultContracts.RequestPermission()) {
-		if (!it && !ActivityCompat.shouldShowRequestPermissionRationale(this, READ_PHONE_STATE)) {
-			ConfigUtils.showPermissionRationale(this, findViewById(R.id.group_call_layout), R.string.read_phone_state_short_message)
-			// Finish activity when snack bar disappears (after 2750ms)
-			Timer().schedule(2750) { finish() }
-		} else {
-			joinCall()
-		}
-	}
-
 	// An actual runnable is used so it can be removed from the message queue if needed
 	private val autoRemoveInfoAndControlsRunnable = Runnable {
 		hideInfoAndControls()
@@ -255,11 +244,11 @@ class GroupCallActivity : ThreemaActivity(), GenericAlertDialog.DialogClickListe
 						&& views.buttonFlipCamera.visibility != View.VISIBLE) {
 						val location = IntArray(2)
 						views.buttonToggleCamera.getLocationInWindow(location)
-						location[1] -= views.buttonToggleCamera.height / 5
+						location[0] += (views.buttonToggleCamera.width / 2)
+						location[1] += views.buttonToggleCamera.height
 						TooltipPopup(
 							this,
 							R.string.preferences__tooltip_gc_camera,
-							R.layout.popup_tooltip_top_right,
 							this
 						).show(
 							this,
@@ -357,10 +346,6 @@ class GroupCallActivity : ThreemaActivity(), GenericAlertDialog.DialogClickListe
 		super.onRequestPermissionsResult(requestCode, permissions, grantResults)
 	}
 
-	private suspend fun requestMicrophonePermission(): Boolean = permissionRegistry.requestMicrophonePermissions().granted
-
-	private suspend fun requestBluetoothPermission(): Boolean = permissionRegistry.requestBluetoothPermission(true).granted
-
 	private fun handleIntent(intent: Intent) {
 		logger.debug("handleIntent")
 
@@ -374,7 +359,7 @@ class GroupCallActivity : ThreemaActivity(), GenericAlertDialog.DialogClickListe
 			val groupModel = groupService.getById(groupId.id)
 
 			if (groupModel != null && groupService.isGroupMember(groupModel)) {
-				checkPhoneStateAndJoinCall()
+				joinCall()
 			} else {
 				Toast.makeText(this, R.string.you_are_not_a_member_of_this_group, Toast.LENGTH_LONG).show()
 				finish()
@@ -393,51 +378,24 @@ class GroupCallActivity : ThreemaActivity(), GenericAlertDialog.DialogClickListe
 
 	private fun checkPhoneStateAndJoinCall() {
 		try {
-			if (VoipUtil.isPSTNCallOngoingRespectPreference(this, this::joinCall, readPhoneStateSettingsLauncher)) {
+			if (VoipUtil.isPSTNCallOngoing(this)) {
 				// A PSTN call is ongoing
 				SimpleStringAlertDialog.newInstance(R.string.group_call, R.string.voip_another_pstn_call)
 						.setOnDismissRunnable { finish() }
 						.show(supportFragmentManager, "err")
 			} else {
-				joinCall()
+				viewModel.joinCall(intention)
 			}
 		} catch (exception: SecurityException) {
-			logger.info("Permission not granted: {}", exception)
+			logger.error("Phone permission not granted. Starting group call anyway.", exception)
+			viewModel.joinCall(intention)
 		}
 	}
 
 	private fun joinCall() {
 		logger.debug("Joining call")
-		CoroutineScope(Dispatchers.Default).launch {
-			if (requestMicrophonePermission()) {
-				if (!requestBluetoothPermission()) {
-					withContext(Dispatchers.Main) {
-						showToast(R.string.permission_bluetooth_connect_required)
-					}
-					logger.warn("BLUETOOTH_CONNECT permission not granted")
-					// continue without bluetooth support
-				}
-				withContext(Dispatchers.Main) {
-					viewModel.joinCall(intention)
-				}
-			} else {
-				logger.info("Microphone permission denied")
-				if (!ActivityCompat.shouldShowRequestPermissionRationale(this@GroupCallActivity, RECORD_AUDIO)) {
-					// permission was permanently denied
-					withContext(Dispatchers.Main) {
-						val alert : ThreemaDialogFragment = GenericAlertDialog.newInstance(
-								R.string.group_call,
-								getString(R.string.group_call_mic_permission_rationale,
-										getString(R.string.app_name)),
-								R.string.settings,
-								R.string.cancel)
-						alert.show(this@GroupCallActivity.supportFragmentManager, DIALOG_TAG_MIC_PERMISSION_DENIED)
-					}
-				} else {
-					setResult(RESULT_CANCELED)
-					finish()
-				}
-			}
+		requestGroupCallPermissions(this, permissionLauncher) {
+			checkPhoneStateAndJoinCall()
 		}
 	}
 
@@ -924,10 +882,6 @@ class GroupCallActivity : ThreemaActivity(), GenericAlertDialog.DialogClickListe
 			cameraSettingsLauncher.launch(Intent(Settings.ACTION_APPLICATION_DETAILS_SETTINGS).apply {
 				data = Uri.fromParts("package", packageName, null)
 			})
-		} else if (DIALOG_TAG_MIC_PERMISSION_DENIED == tag) {
-			audioSettingsLauncher.launch(Intent(Settings.ACTION_APPLICATION_DETAILS_SETTINGS).apply {
-				data = Uri.fromParts("package", packageName, null)
-			})
 		}
 	}
 
diff --git a/app/src/main/java/ch/threema/app/voip/activities/WebRTCDebugActivity.java b/app/src/main/java/ch/threema/app/voip/activities/WebRTCDebugActivity.java
index d35a4122..380f386b 100644
--- a/app/src/main/java/ch/threema/app/voip/activities/WebRTCDebugActivity.java
+++ b/app/src/main/java/ch/threema/app/voip/activities/WebRTCDebugActivity.java
@@ -32,7 +32,6 @@ import android.view.View;
 import android.widget.ArrayAdapter;
 import android.widget.Button;
 import android.widget.ListView;
-import android.widget.ProgressBar;
 import android.widget.TextView;
 import android.widget.Toast;
 
@@ -52,6 +51,9 @@ import androidx.annotation.NonNull;
 import androidx.annotation.Nullable;
 import androidx.annotation.UiThread;
 import androidx.appcompat.app.ActionBar;
+
+import com.google.android.material.progressindicator.CircularProgressIndicator;
+
 import ch.threema.app.R;
 import ch.threema.app.ThreemaApplication;
 import ch.threema.app.activities.ThreemaToolbarActivity;
@@ -85,7 +87,7 @@ public class WebRTCDebugActivity extends ThreemaToolbarActivity implements PeerC
 	@NonNull private ContactService contactService;
 
 	// Views
-	@NonNull private ProgressBar progressBar;
+	@NonNull private CircularProgressIndicator progressBar;
 	@NonNull private TextView introText;
 	@NonNull private TextView doneText;
 	@Nullable private Button copyButton;
diff --git a/app/src/main/java/ch/threema/app/voip/groupcall/GroupCallDescription.kt b/app/src/main/java/ch/threema/app/voip/groupcall/GroupCallDescription.kt
index d6b74b39..9bc6d9dd 100644
--- a/app/src/main/java/ch/threema/app/voip/groupcall/GroupCallDescription.kt
+++ b/app/src/main/java/ch/threema/app/voip/groupcall/GroupCallDescription.kt
@@ -31,6 +31,7 @@ import ch.threema.base.utils.Utils
 import ch.threema.storage.models.GroupCallModel
 import com.neilalexander.jnacl.NaCl
 import java.util.*
+import kotlin.math.max
 
 private val logger = LoggingUtil.getThreemaLogger("GroupCallDescription")
 
@@ -42,6 +43,7 @@ data class GroupCallDescription(
     val callId: CallId,
     val gck: ByteArray,
     var startedAt: ULong,
+    val processedAt: ULong = startedAt,
     var maxParticipants: UInt? = null
 ) {
     private val gchk: ByteArray by lazy { gcBlake2b(NaCl.SYMMKEYBYTES, gck, SALT_GCHK) }
@@ -90,6 +92,22 @@ data class GroupCallDescription(
         }
     }
 
+    /**
+     * Get the time of this call in milliseconds since the group message has been processed.
+     * The time is relative to [SystemClock.elapsedRealtime].
+     *
+     * If [processedAt] is dated in the future, [SystemClock.elapsedRealtime] will be returned.
+     *
+     * If the device's time is potentially wrong, this method can be used instead of
+     * [getRunningSince] as it is relative to this device's time.
+     *
+     * @return The time in milliseconds since this call has been processed
+     */
+    fun getRunningSinceProcessed(): Long {
+        val duration = max(Date().time - processedAt.toLong(), 0)
+        return SystemClock.elapsedRealtime() - duration
+    }
+
     @AnyThread
     fun getGroupIdInt(): Int = groupId.id
 
@@ -101,7 +119,8 @@ data class GroupCallDescription(
             groupId.id,
             sfuBaseUrl,
             Utils.byteArrayToHexString(gck),
-            startedAt.toLong()
+            startedAt.toLong(),
+            processedAt.toLong()
         )
     }
 
@@ -188,6 +207,7 @@ fun GroupCallModel.toGroupCallDescription(): GroupCallDescription {
         CallId(Utils.hexStringToByteArray(callId)),
         Utils.hexStringToByteArray(gck),
         getStartedAtUnsigned(),
+        getProcessedAtUnsigned(),
         null
     )
 }
diff --git a/app/src/main/java/ch/threema/app/voip/groupcall/service/GroupCallService.kt b/app/src/main/java/ch/threema/app/voip/groupcall/service/GroupCallService.kt
index a3e1c9be..9a5caec6 100644
--- a/app/src/main/java/ch/threema/app/voip/groupcall/service/GroupCallService.kt
+++ b/app/src/main/java/ch/threema/app/voip/groupcall/service/GroupCallService.kt
@@ -238,7 +238,7 @@ class GroupCallService : Service() {
             .setContentText(getString(R.string.group_call))
             .setSmallIcon(R.drawable.ic_group_call)
             .setLargeIcon(getAvatar(group))
-            .setColor(ResourcesCompat.getColor(resources, R.color.accent_light, theme))
+            .setColor(ResourcesCompat.getColor(resources, R.color.md_theme_light_primary, theme))
             .setLocalOnly(true)
             .setOngoing(true)
             .setUsesChronometer(true)
diff --git a/app/src/main/java/ch/threema/app/voip/groupcall/sfu/GroupCallContext.kt b/app/src/main/java/ch/threema/app/voip/groupcall/sfu/GroupCallContext.kt
index d914ccae..3fff5d50 100644
--- a/app/src/main/java/ch/threema/app/voip/groupcall/sfu/GroupCallContext.kt
+++ b/app/src/main/java/ch/threema/app/voip/groupcall/sfu/GroupCallContext.kt
@@ -233,7 +233,7 @@ sealed class P2PContext(val pckPublic: ByteArray, val pcck: ByteArray) {
         // (https://docs.oracle.com/javase/specs/jvms/se8/html/jvms-4.html).
         // Therefore we need to swap endianness as the protocol specifies a little endian sequence number
         val swappedPcsn = EndianUtils.swapLong(currentPcsn.toLong())
-        return pcck + Utils.longToByteArray(swappedPcsn)
+        return pcck + Utils.longToByteArrayBigEndian(swappedPcsn)
     }
 }
 
diff --git a/app/src/main/java/ch/threema/app/voip/groupcall/sfu/GroupCallState.kt b/app/src/main/java/ch/threema/app/voip/groupcall/sfu/GroupCallState.kt
index 394cd22b..80b2ffc7 100644
--- a/app/src/main/java/ch/threema/app/voip/groupcall/sfu/GroupCallState.kt
+++ b/app/src/main/java/ch/threema/app/voip/groupcall/sfu/GroupCallState.kt
@@ -33,8 +33,8 @@ data class GroupCallState(
     companion object {
         fun fromProtobufBytes(bytes: ByteArray): GroupCallState {
             val state = CallState.parseFrom(bytes)
-            val participants = state.participantsMap.values
-                .map(GroupCallState::mapParticipant)
+            val participants = state.participantsMap
+                .map { (id, participant) -> mapParticipant(ParticipantId(id.toUInt()), participant) }
                 .toSet()
             return GroupCallState(
                 ParticipantId(state.stateCreatedBy.toUInt()),
@@ -43,25 +43,25 @@ data class GroupCallState(
             )
         }
 
-        private fun mapParticipant(participant: CallState.Participant): ParticipantDescription {
+        private fun mapParticipant(id: ParticipantId, participant: CallState.Participant): ParticipantDescription {
             return when {
-                participant.hasThreema() -> mapNormalParticipant(participant)
-                participant.hasGuest() -> mapGuestParticipant(participant)
+                participant.hasThreema() -> mapNormalParticipant(id, participant)
+                participant.hasGuest() -> mapGuestParticipant(id, participant)
                 else -> throw GroupCallException("Cannot map state participant")
             }
         }
 
-        private fun mapNormalParticipant(participant: CallState.Participant): NormalParticipantDescription {
+        private fun mapNormalParticipant(id: ParticipantId, participant: CallState.Participant): NormalParticipantDescription {
             return SimpleNormalParticipantDescription(
-                ParticipantId(participant.participantId.toUInt()),
+                id,
                 participant.threema.identity,
                 participant.threema.nickname
             )
         }
 
-        private fun mapGuestParticipant(participant: CallState.Participant): GuestParticipantDescription {
+        private fun mapGuestParticipant(id: ParticipantId, participant: CallState.Participant): GuestParticipantDescription {
             return SimpleGuestParticipantDescription(
-                ParticipantId(participant.participantId.toUInt()),
+                id,
                 participant.guest.name
             )
         }
@@ -75,7 +75,6 @@ data class GroupCallState(
 
         participants.forEach {
             val participant = CallState.Participant.newBuilder()
-                .setParticipantId(it.id.id.toInt())
 
             if (it is NormalParticipantDescription) {
                 val threema = CallState.Participant.Normal.newBuilder()
diff --git a/app/src/main/java/ch/threema/app/voip/services/VoipCallService.java b/app/src/main/java/ch/threema/app/voip/services/VoipCallService.java
index 80630009..712b749d 100644
--- a/app/src/main/java/ch/threema/app/voip/services/VoipCallService.java
+++ b/app/src/main/java/ch/threema/app/voip/services/VoipCallService.java
@@ -21,6 +21,12 @@
 
 package ch.threema.app.voip.services;
 
+import static ch.threema.app.ThreemaApplication.getAppContext;
+import static ch.threema.app.ThreemaApplication.getServiceManager;
+import static ch.threema.app.voip.services.VideoContext.CAMERA_BACK;
+import static ch.threema.app.voip.services.VideoContext.CAMERA_FRONT;
+import static ch.threema.app.voip.services.VoipStateService.VIDEO_RENDER_FLAG_NONE;
+
 import android.Manifest;
 import android.app.Notification;
 import android.app.NotificationManager;
@@ -45,6 +51,19 @@ import android.telephony.PhoneStateListener;
 import android.telephony.TelephonyManager;
 import android.widget.Toast;
 
+import androidx.annotation.AnyThread;
+import androidx.annotation.NonNull;
+import androidx.annotation.Nullable;
+import androidx.annotation.StringRes;
+import androidx.annotation.UiThread;
+import androidx.annotation.WorkerThread;
+import androidx.core.app.NotificationCompat;
+import androidx.core.content.ContextCompat;
+import androidx.core.util.Pair;
+import androidx.lifecycle.LifecycleService;
+import androidx.localbroadcastmanager.content.LocalBroadcastManager;
+import androidx.preference.PreferenceManager;
+
 import org.slf4j.Logger;
 import org.webrtc.CameraVideoCapturer;
 import org.webrtc.IceCandidate;
@@ -65,19 +84,6 @@ import java.util.concurrent.TimeoutException;
 import java.util.concurrent.atomic.AtomicBoolean;
 import java.util.concurrent.locks.ReentrantReadWriteLock;
 
-import androidx.annotation.AnyThread;
-import androidx.annotation.NonNull;
-import androidx.annotation.Nullable;
-import androidx.annotation.StringRes;
-import androidx.annotation.UiThread;
-import androidx.annotation.WorkerThread;
-import androidx.core.app.ActivityCompat;
-import androidx.core.app.NotificationCompat;
-import androidx.core.content.ContextCompat;
-import androidx.core.util.Pair;
-import androidx.lifecycle.LifecycleService;
-import androidx.localbroadcastmanager.content.LocalBroadcastManager;
-import androidx.preference.PreferenceManager;
 import ch.threema.annotation.SameThread;
 import ch.threema.app.BuildConfig;
 import ch.threema.app.R;
@@ -134,12 +140,6 @@ import ch.threema.storage.models.ContactModel;
 import java8.util.function.Supplier;
 import java8.util.stream.StreamSupport;
 
-import static ch.threema.app.ThreemaApplication.getAppContext;
-import static ch.threema.app.ThreemaApplication.getServiceManager;
-import static ch.threema.app.voip.services.VideoContext.CAMERA_BACK;
-import static ch.threema.app.voip.services.VideoContext.CAMERA_FRONT;
-import static ch.threema.app.voip.services.VoipStateService.VIDEO_RENDER_FLAG_NONE;
-
 /**
  * The service keeping track of VoIP call state and the corresponding WebRTC peer connection.
  */
@@ -1471,7 +1471,6 @@ public class VoipCallService extends LifecycleService implements PeerConnectionC
 				final String contactIdentity = contact.getIdentity();
 				final Boolean isInitiator = this.voipStateService.isInitiator();
 				final Integer duration = this.voipStateService.getCallDuration();
-
 				logger.info("Call is still connected, notify event listeners"); // TODO(ANDR-2441): remove eventually
 				VoipListenerManager.callEventListener.handle(listener -> {
 					if (isInitiator == null) {
@@ -2177,7 +2176,7 @@ public class VoipCallService extends LifecycleService implements PeerConnectionC
 		final NotificationCompat.Builder notificationBuilder = new NotificationBuilderWrapper(this, NotificationService.NOTIFICATION_CHANNEL_IN_CALL, null)
 				.setContentTitle(NameUtil.getDisplayNameOrNickname(contact, true))
 				.setContentText(getString(R.string.voip_title))
-				.setColor(getResources().getColor(R.color.accent_light))
+				.setColor(getResources().getColor(R.color.md_theme_light_primary))
 				.setLocalOnly(true)
 				.setOngoing(true)
 				.setUsesChronometer(true)
diff --git a/app/src/main/java/ch/threema/app/voip/services/VoipStateService.java b/app/src/main/java/ch/threema/app/voip/services/VoipStateService.java
index 04d0df4e..d0fa0b46 100644
--- a/app/src/main/java/ch/threema/app/voip/services/VoipStateService.java
+++ b/app/src/main/java/ch/threema/app/voip/services/VoipStateService.java
@@ -21,10 +21,30 @@
 
 package ch.threema.app.voip.services;
 
+import static ch.threema.app.ThreemaApplication.INCOMING_CALL_NOTIFICATION_ID;
+import static ch.threema.app.ThreemaApplication.getAppContext;
+import static ch.threema.app.notifications.NotificationBuilderWrapper.VIBRATE_PATTERN_INCOMING_CALL;
+import static ch.threema.app.notifications.NotificationBuilderWrapper.VIBRATE_PATTERN_SILENT;
+import static ch.threema.app.services.NotificationService.NOTIFICATION_CHANNEL_CALL;
+import static ch.threema.app.utils.IntentDataUtil.PENDING_INTENT_FLAG_IMMUTABLE;
+import static ch.threema.app.utils.IntentDataUtil.PENDING_INTENT_FLAG_MUTABLE;
+import static ch.threema.app.voip.activities.CallActivity.EXTRA_ACCEPT_INCOMING_CALL;
+import static ch.threema.app.voip.services.CallRejectWorkerKt.KEY_CALL_ID;
+import static ch.threema.app.voip.services.CallRejectWorkerKt.KEY_CONTACT_IDENTITY;
+import static ch.threema.app.voip.services.CallRejectWorkerKt.KEY_REJECT_REASON;
+import static ch.threema.app.voip.services.VoipCallService.ACTION_ICE_CANDIDATES;
+import static ch.threema.app.voip.services.VoipCallService.EXTRA_ACTIVITY_MODE;
+import static ch.threema.app.voip.services.VoipCallService.EXTRA_CALL_ID;
+import static ch.threema.app.voip.services.VoipCallService.EXTRA_CANCEL_WEAR;
+import static ch.threema.app.voip.services.VoipCallService.EXTRA_CANDIDATES;
+import static ch.threema.app.voip.services.VoipCallService.EXTRA_CONTACT_IDENTITY;
+import static ch.threema.app.voip.services.VoipCallService.EXTRA_IS_INITIATOR;
+
 import android.app.Notification;
 import android.app.NotificationManager;
 import android.app.PendingIntent;
 import android.content.BroadcastReceiver;
+import android.content.ComponentName;
 import android.content.Context;
 import android.content.Intent;
 import android.content.IntentFilter;
@@ -107,25 +127,6 @@ import ch.threema.domain.protocol.csp.messages.voip.features.VideoFeature;
 import ch.threema.storage.models.ContactModel;
 import java8.util.concurrent.CompletableFuture;
 
-import static ch.threema.app.ThreemaApplication.INCOMING_CALL_NOTIFICATION_ID;
-import static ch.threema.app.ThreemaApplication.getAppContext;
-import static ch.threema.app.notifications.NotificationBuilderWrapper.VIBRATE_PATTERN_INCOMING_CALL;
-import static ch.threema.app.notifications.NotificationBuilderWrapper.VIBRATE_PATTERN_SILENT;
-import static ch.threema.app.services.NotificationService.NOTIFICATION_CHANNEL_CALL;
-import static ch.threema.app.utils.IntentDataUtil.PENDING_INTENT_FLAG_IMMUTABLE;
-import static ch.threema.app.utils.IntentDataUtil.PENDING_INTENT_FLAG_MUTABLE;
-import static ch.threema.app.voip.activities.CallActivity.EXTRA_ACCEPT_INCOMING_CALL;
-import static ch.threema.app.voip.services.CallRejectWorkerKt.KEY_CALL_ID;
-import static ch.threema.app.voip.services.CallRejectWorkerKt.KEY_CONTACT_IDENTITY;
-import static ch.threema.app.voip.services.CallRejectWorkerKt.KEY_REJECT_REASON;
-import static ch.threema.app.voip.services.VoipCallService.ACTION_ICE_CANDIDATES;
-import static ch.threema.app.voip.services.VoipCallService.EXTRA_ACTIVITY_MODE;
-import static ch.threema.app.voip.services.VoipCallService.EXTRA_CALL_ID;
-import static ch.threema.app.voip.services.VoipCallService.EXTRA_CANCEL_WEAR;
-import static ch.threema.app.voip.services.VoipCallService.EXTRA_CANDIDATES;
-import static ch.threema.app.voip.services.VoipCallService.EXTRA_CONTACT_IDENTITY;
-import static ch.threema.app.voip.services.VoipCallService.EXTRA_IS_INITIATOR;
-
 /**
  * The service keeping track of VoIP call state.
  *
@@ -149,12 +150,8 @@ public class VoipStateService implements AudioManager.OnAudioFocusChangeListener
 	private final ContactService contactService;
 	private final RingtoneService ringtoneService;
 	private final PreferenceService preferenceService;
-	private final MessageService messageService;
 	private final LifetimeService lifetimeService;
 
-	// Message sending
-	private final MessageQueue messageQueue;
-
 	// App context
 	private final Context appContext;
 
@@ -210,16 +207,12 @@ public class VoipStateService implements AudioManager.OnAudioFocusChangeListener
 	public VoipStateService(ContactService contactService,
 	                        RingtoneService ringtoneService,
 	                        PreferenceService preferenceService,
-	                        MessageService messageService,
-	                        MessageQueue messageQueue,
 	                        LifetimeService lifetimeService,
 	                        final Context appContext) {
 		this.contactService = contactService;
 		this.ringtoneService = ringtoneService;
 		this.preferenceService = preferenceService;
-		this.messageService = messageService;
 		this.lifetimeService = lifetimeService;
-		this.messageQueue = messageQueue;
 		this.appContext = appContext;
 		this.candidatesCache = new HashMap<>();
 		this.notificationManagerCompat = NotificationManagerCompat.from(appContext);
@@ -329,12 +322,20 @@ public class VoipStateService implements AudioManager.OnAudioFocusChangeListener
 
 		// Ensure bluetooth media button receiver is registered when a call starts
 		if (newState.isRinging() || newState.isInitializing()) {
-			audioManager.registerMediaButtonEventReceiver(mediaButtonPendingIntent);
+			if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.S) {
+				audioManager.registerMediaButtonEventReceiver(mediaButtonPendingIntent);
+			} else {
+				audioManager.registerMediaButtonEventReceiver(new ComponentName(appContext, VoipMediaButtonReceiver.class));
+			}
 		}
 
 		// Ensure bluetooth media button receiver is deregistered when a call ends
 		if (newState.isDisconnecting() || newState.isIdle()) {
-			audioManager.unregisterMediaButtonEventReceiver(mediaButtonPendingIntent);
+			if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.S) {
+				audioManager.unregisterMediaButtonEventReceiver(mediaButtonPendingIntent);
+			} else {
+				audioManager.unregisterMediaButtonEventReceiver(new ComponentName(appContext, VoipMediaButtonReceiver.class));
+			}
 		}
 
 		long callId = oldState.getCallId();
@@ -1079,15 +1080,11 @@ public class VoipStateService implements AudioManager.OnAudioFocusChangeListener
 			callOfferData.addFeature(new VideoFeature());
 		}
 
-		final VoipCallOfferMessage voipCallOfferMessage = new VoipCallOfferMessage();
-		voipCallOfferMessage.setData(callOfferData);
-		voipCallOfferMessage.setToIdentity(receiver.getIdentity());
+		contactService.createReceiver(receiver).sendVoipCallOfferMessage(callOfferData);
 
-		this.messageQueue.enqueue(voipCallOfferMessage);
-		logCallInfo(callId, "Call offer enqueued to {}", voipCallOfferMessage.getToIdentity());
+		logCallInfo(callId, "Call offer enqueued to {}", receiver.getIdentity());
 		logCallInfo(callId, "  Offer features: {}", callOfferData.getFeatures());
 		logCallInfo(callId, "  Offer data: {}", callOfferData.getOfferData());
-		this.messageService.sendProfilePicture(new MessageReceiver[] {contactService.createReceiver(receiver)});
 	}
 
 	//region Send call messages
@@ -1204,14 +1201,10 @@ public class VoipStateService implements AudioManager.OnAudioFocusChangeListener
 			throw new IllegalArgumentException("Invalid action, missing session description or missing reject reason");
 		}
 
-		final VoipCallAnswerMessage voipCallAnswerMessage = new VoipCallAnswerMessage();
-		voipCallAnswerMessage.setData(callAnswerData);
-		voipCallAnswerMessage.setToIdentity(receiver.getIdentity());
+		contactService.createReceiver(receiver).sendVoipCallAnswerMessage(callAnswerData);
 
-		logCallInfo(callId, "Call answer enqueued to {}: {}", voipCallAnswerMessage.getToIdentity(), callAnswerData.getAction());
+		logCallInfo(callId, "Call answer enqueued to {}: {}", receiver.getIdentity(), callAnswerData.getAction());
 		logCallInfo(callId, "  Answer features: {}", callAnswerData.getFeatures());
-		messageQueue.enqueue(voipCallAnswerMessage);
-		this.messageService.sendProfilePicture(new MessageReceiver[] {contactService.createReceiver(receiver)});
 	}
 
 	/**
@@ -1239,15 +1232,11 @@ public class VoipStateService implements AudioManager.OnAudioFocusChangeListener
 		final VoipICECandidatesData voipICECandidatesData = new VoipICECandidatesData()
 			.setCallId(callId)
 			.setCandidates(candidates.toArray(new VoipICECandidatesData.Candidate[candidates.size()]));
-		final VoipICECandidatesMessage voipICECandidatesMessage = new VoipICECandidatesMessage();
-		voipICECandidatesMessage.setData(voipICECandidatesData);
-		voipICECandidatesMessage.setToIdentity(receiver.getIdentity());
 
-		// Enqueue
-		messageQueue.enqueue(voipICECandidatesMessage);
+		contactService.createReceiver(receiver).sendVoipICECandidateMessage(voipICECandidatesData);
 
 		// Log
-		logCallInfo(callId, "Call ICE candidate message enqueued to {}", voipICECandidatesMessage.getToIdentity());
+		logCallInfo(callId, "Call ICE candidate message enqueued to {}", receiver.getIdentity());
 		for (VoipICECandidatesData.Candidate candidate : Objects.requireNonNull(voipICECandidatesData.getCandidates())) {
 			logCallInfo(callId, "  Outgoing ICE candidate: {}", candidate.getCandidate());
 		}
@@ -1269,12 +1258,8 @@ public class VoipStateService implements AudioManager.OnAudioFocusChangeListener
 		final VoipCallRingingData callRingingData = new VoipCallRingingData()
 			.setCallId(callId);
 
-		final VoipCallRingingMessage msg = new VoipCallRingingMessage();
-		msg.setToIdentity(contactModel.getIdentity());
-		msg.setData(callRingingData);
-
-		messageQueue.enqueue(msg);
-		logCallInfo(callId, "Call ringing message enqueued to {}", msg.getToIdentity());
+		contactService.createReceiver(contactModel).sendVoipCallRingingMessage(callRingingData);
+		logCallInfo(callId, "Call ringing message enqueued to {}", contactModel.getIdentity());
 	}
 
 	/**
@@ -1290,18 +1275,14 @@ public class VoipStateService implements AudioManager.OnAudioFocusChangeListener
 		final VoipCallHangupData callHangupData = new VoipCallHangupData()
 			.setCallId(callId);
 
-		final VoipCallHangupMessage msg = new VoipCallHangupMessage();
-		msg.setData(callHangupData);
-		msg.setToIdentity(peerIdentity);
-
 		final Integer duration = getCallDuration();
 		final boolean outgoing = this.isInitiator() == Boolean.TRUE;
 
-		messageQueue.enqueue(msg);
+		contactService.createReceiver(contactModel).sendVoipCallHangupMessage(callHangupData);
 		logCallInfo(
 			callId,
 			"Call hangup message enqueued to {} (prevState={}, duration={})",
-			msg.getToIdentity(), state, duration
+			contactModel.getIdentity(), state, duration
 		);
 
 		// Notify the VoIP call event listener
@@ -1518,7 +1499,7 @@ public class VoipStateService implements AudioManager.OnAudioFocusChangeListener
 			// Icons and colors
 			nbuilder.setLargeIcon(avatar)
 					.setSmallIcon(R.drawable.ic_phone_locked_white_24dp)
-					.setColor(this.appContext.getResources().getColor(R.color.accent_light));
+					.setColor(this.appContext.getResources().getColor(R.color.md_theme_light_primary));
 
 			// Alerting
 			nbuilder.setPriority(NotificationCompat.PRIORITY_MAX)
@@ -1531,7 +1512,7 @@ public class VoipStateService implements AudioManager.OnAudioFocusChangeListener
 							.setContentTitle(appContext.getString(R.string.voip_notification_title))
 							.setContentText(appContext.getString(R.string.notification_hidden_text))
 							.setSmallIcon(R.drawable.ic_phone_locked_white_24dp)
-							.setColor(appContext.getResources().getColor(R.color.accent_light))
+							.setColor(appContext.getResources().getColor(R.color.md_theme_light_primary))
 							.build());
 
 			// Add identity to notification for DND priority override
@@ -1601,7 +1582,13 @@ public class VoipStateService implements AudioManager.OnAudioFocusChangeListener
 
 					@Override
 					public void onPrepared(MediaPlayer mp) {
-						ringtonePlayer.start();
+						if (ringtonePlayer != null) {
+							try {
+								ringtonePlayer.start();
+							} catch (IllegalStateException e) {
+								logger.error("Unable to play ringtone", e);
+							}
+						}
 					}
 				});
 				ringtonePlayer.setLooping(true);
diff --git a/app/src/main/java/ch/threema/app/voip/util/VoipUtil.java b/app/src/main/java/ch/threema/app/voip/util/VoipUtil.java
index 65e34ded..e3082093 100644
--- a/app/src/main/java/ch/threema/app/voip/util/VoipUtil.java
+++ b/app/src/main/java/ch/threema/app/voip/util/VoipUtil.java
@@ -41,6 +41,7 @@ import androidx.annotation.RequiresApi;
 import androidx.appcompat.app.AppCompatActivity;
 import androidx.core.app.ActivityCompat;
 import androidx.core.content.ContextCompat;
+import androidx.fragment.app.FragmentActivity;
 import androidx.fragment.app.FragmentManager;
 import androidx.localbroadcastmanager.content.LocalBroadcastManager;
 import androidx.preference.PreferenceManager;
@@ -51,6 +52,7 @@ import java.util.Collections;
 
 import ch.threema.app.R;
 import ch.threema.app.ThreemaApplication;
+import ch.threema.app.dialogs.GenericAlertDialog;
 import ch.threema.app.dialogs.GenericProgressDialog;
 import ch.threema.app.dialogs.SimpleStringAlertDialog;
 import ch.threema.app.managers.ServiceManager;
@@ -73,6 +75,7 @@ public class VoipUtil {
 	private static final Logger logger = LoggingUtil.getThreemaLogger("VoipUtil");
 
 	private static final String DIALOG_TAG_FETCHING_FEATURE_MASK = "fetchingFeatureMask";
+	private static final String DIALOG_TAG_PSTN_OUTGOING = "pstn_outgoing";
 
 	/**
 	 * Send a VoIP broadcast without any intent extras
@@ -113,46 +116,19 @@ public class VoipUtil {
 		sendVoipCommand(context, VoipCallService.class, VoipCallService.ACTION_HANGUP);
 	}
 
-
-	/**
-	 * Start a call. If necessary, fetch the feature mask of the specified contact.
-	 *
-	 * @param activity         The activity context
-	 * @param contactModel     The contact model of the peer
-	 * @param launchVideo      If {@code true}, video is launched
-	 * @param onFinishRunnable The runnable that is executed after the feature mask has been fetched
-	 * @param resultLauncher   The result launcher to request the READ_PHONE_STATE permission
-	 * @return {@code true} if the call could have been started
-	 */
-	public static boolean initiateCall(
-		@NonNull final AppCompatActivity activity,
-		@NonNull final ContactModel contactModel,
-		boolean launchVideo,
-		@Nullable Runnable onFinishRunnable,
-		@Nullable ActivityResultLauncher<String> resultLauncher
-	) {
-		SharedPreferences prefs = PreferenceManager.getDefaultSharedPreferences(activity);
-		boolean requestPermission = prefs.getBoolean(activity.getString(R.string.preferences__enable_read_phone_state_permission_request), true);
-		return initiateCall(activity, contactModel, launchVideo, onFinishRunnable, resultLauncher, requestPermission);
-	}
-
 	/**
 	 * Start a call. If necessary, fetch the feature mask of the specified contact.
 	 *
 	 * @param activity          The activity that triggered this call.
 	 * @param contactModel      The contact to call
 	 * @param onFinishRunnable
-	 * @param resultLauncher    The result launcher to request the READ_PHONE_STATE permission
-	 * @param requestPermission If true, a permission request is shown if the permission is not granted
 	 * @return true if the call could be initiated, false otherwise
 	 */
-	private static boolean initiateCall(
+	public static boolean initiateCall(
 		@NonNull final AppCompatActivity activity,
 	    @NonNull final ContactModel contactModel,
 		boolean launchVideo,
-	    @Nullable Runnable onFinishRunnable,
-		@Nullable ActivityResultLauncher<String> resultLauncher,
-		boolean requestPermission
+	    @Nullable Runnable onFinishRunnable
 	) {
 
 		final ServiceManager serviceManager = ThreemaApplication.getServiceManager();
@@ -192,27 +168,6 @@ public class VoipUtil {
 			return false;
 		}
 
-		if (requestPermission) {
-			// Ask for READ_PHONE_STATE permission (because the user did not choose to not being asked again)
-			try {
-				// If permission not granted: Displays a dialog asking for the permission and throws a SecurityException
-				if (isPSTNCallOngoingRequestPermission(activity, () -> initiateCall(activity, contactModel, launchVideo, onFinishRunnable, resultLauncher, false), resultLauncher)) {
-					// A PSTN call is ongoing
-					SimpleStringAlertDialog.newInstance(R.string.threema_call, R.string.voip_another_pstn_call).show(activity.getSupportFragmentManager(), "err");
-					return false;
-				}
-			} catch (SecurityException exception) {
-				logger.info("Permission not granted: ", exception);
-				return false;
-			}
-		} else {
-			// Don't ask for permission (user doesn't want to)
-			if (isPSTNCallOngoing(activity)) {
-				SimpleStringAlertDialog.newInstance(R.string.threema_call, R.string.voip_another_pstn_call).show(activity.getSupportFragmentManager(), "err");
-				return false;
-			}
-		}
-
 		if (!ThreemaFeature.canVoip(contactModel.getFeatureMask()) || (ConfigUtils.isVideoCallsEnabled() && !ThreemaFeature.canVideocall(contactModel.getFeatureMask()))) {
 			// 1.a Try to fetch the feature mask
 
@@ -286,72 +241,7 @@ public class VoipUtil {
 			callActivityIntent.putExtra(VoipCallService.EXTRA_LAUNCH_VIDEO, launchVideo);
 			callActivityIntent.putExtra(VoipCallService.EXTRA_CALL_ID, -1L);
 			activity.startActivity(callActivityIntent);
-			activity.overridePendingTransition(R.anim.fast_fade_in, R.anim.fast_fade_out);
-		}
-	}
-
-	/**
-	 * Check if a PSTN call is ongoing. If a permission is needed that is not given, a dialog is shown
-	 * to request the permission if the user did not deny this (previously clicked "don't show again"
-	 * option of the dialog). If this dialog is shown, this method throws an exception as the call
-	 * initialization will be triggered by the dialog with the initiateCallRunnable argument.
-	 *
-	 * @param activity the activity
-	 * @param initiateCallRunnable the runnable is only executed when a dialog should be shown (and the permission is not given to check for calls)
-	 * @param resultLauncher the result launcher is only used, when the user wants to grant the permission
-	 * @throws SecurityException if the permission is not given adn a dialog is shown
-	 * @return {@code true} if a call is ongoing
-	 */
-	public static boolean isPSTNCallOngoingRespectPreference(@NonNull Activity activity, @Nullable Runnable initiateCallRunnable, @Nullable ActivityResultLauncher<String> resultLauncher) {
-		final SharedPreferences prefs = PreferenceManager.getDefaultSharedPreferences(activity);
-		if (prefs.getBoolean(activity.getString(R.string.preferences__enable_read_phone_state_permission_request), true)) {
-			// Ask for permission if the user did not forbid that
-			return isPSTNCallOngoingRequestPermission(activity, initiateCallRunnable, resultLauncher);
-		} else {
-			// User doesn't care about the permission. Try to check for PSTN call, otherwise return false.
-			return isPSTNCallOngoing(activity);
-		}
-	}
-
-	/**
-	 * Check if a PSTN call is ongoing. If a permission is needed that is not given, a dialog is
-	 * shown to ask for the permission. If the permission is not given, a dialog requesting the
-	 * permission is shown. The call initialization is handled in this case with the initiateCallRunnable
-	 * and resultLauncher if not null.
-	 *
-	 * @param activity the activity
-	 * @param initiateCallRunnable the runnable that initiates a call without requesting the permission
-	 * @throws SecurityException if the permission is not given and a dialog is shown
-	 * @return {@code true} if a call is ongoing, {@code false} otherwise or when the state cannot be accessed
-	 */
-	private static boolean isPSTNCallOngoingRequestPermission(@NonNull Activity activity, @Nullable Runnable initiateCallRunnable, @Nullable ActivityResultLauncher<String> resultLauncher) {
-		if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.S) {
-			if (ActivityCompat.checkSelfPermission(activity, Manifest.permission.READ_PHONE_STATE) == PackageManager.PERMISSION_GRANTED) {
-				return isPSTNCallOngoingAndroidS(activity);
-			} else {
-				AlertDialog.Builder builder = new AlertDialog.Builder(activity);
-				builder.setTitle(R.string.read_phone_state_dialog_title);
-				builder.setMessage(R.string.read_phone_state_dialog_message);
-				builder.setPositiveButton(R.string.read_phone_state_dialog_allow, (dialog, which) -> ConfigUtils.requestReadPhonePermission(activity, resultLauncher));
-				builder.setNegativeButton(R.string.read_phone_state_dialog_disallow, (dialog, which) -> {
-					// User does not want to grant the permission now, so just make the call independent of the permission
-					if (initiateCallRunnable != null) {
-						initiateCallRunnable.run();
-					}
-				});
-				builder.setNeutralButton(R.string.read_phone_state_dialog_never_ask_again, (dialog, which) -> {
-					SharedPreferences prefs = PreferenceManager.getDefaultSharedPreferences(activity);
-					prefs.edit().putBoolean(activity.getString(R.string.preferences__enable_read_phone_state_permission_request), false).apply();
-					// User does not want to grant the permission, so just make the call independent of the permission
-					if (initiateCallRunnable != null) {
-						initiateCallRunnable.run();
-					}
-				});
-				builder.show();
-				throw new SecurityException("Permission READ_PHONE_STATE required to get current phone state");
-			}
-		} else {
-			return isPSTNCallOngoingPreS(activity);
+			activity.overridePendingTransition(R.anim.activity_open_enter, R.anim.activity_close_exit);
 		}
 	}
 
diff --git a/app/src/main/java/ch/threema/app/voip/viewmodel/GroupCallViewModel.kt b/app/src/main/java/ch/threema/app/voip/viewmodel/GroupCallViewModel.kt
index fc25cdbf..08c48c7b 100644
--- a/app/src/main/java/ch/threema/app/voip/viewmodel/GroupCallViewModel.kt
+++ b/app/src/main/java/ch/threema/app/voip/viewmodel/GroupCallViewModel.kt
@@ -35,6 +35,7 @@ import ch.threema.app.services.NotificationService
 import ch.threema.app.utils.AudioDevice
 import ch.threema.app.utils.BitmapUtil
 import ch.threema.app.utils.ConfigUtils
+import ch.threema.app.utils.getRunningSince
 import ch.threema.app.voip.CallAudioManager
 import ch.threema.app.voip.groupcall.*
 import ch.threema.app.voip.groupcall.sfu.*
@@ -80,14 +81,14 @@ class GroupCallViewModel(application: Application) : AndroidViewModel(applicatio
 	private val audioDevices = MutableLiveData<Set<AudioDevice>>(setOf())
 	fun getAudioDevices(): LiveData<Set<AudioDevice>> = audioDevices
 	private val selectedAudioDevice = MutableLiveData(AudioDevice.NONE)
-	fun getSelectedAudioDevice(): LiveData<AudioDevice> = Transformations
-		.distinctUntilChanged(selectedAudioDevice)
+	fun getSelectedAudioDevice(): LiveData<AudioDevice> = selectedAudioDevice
+		.distinctUntilChanged()
 
 	private var connectingState = MutableLiveData(ConnectingState.IDLE)
 	fun isConnecting(): LiveData<ConnectingState> = connectingState
 
 	private val callRunning = MutableLiveData(false)
-	fun isCallRunning(): LiveData<Boolean> = Transformations.distinctUntilChanged(callRunning)
+	fun isCallRunning(): LiveData<Boolean> = callRunning.distinctUntilChanged()
 
 	private val completableFinishEvent = CompletableDeferred<FinishEvent>()
 	val finishEvent: Deferred<FinishEvent> = completableFinishEvent
@@ -95,16 +96,16 @@ class GroupCallViewModel(application: Application) : AndroidViewModel(applicatio
 	private val eglBaseAndParticipants = MutableLiveData<Pair<EglBase, Set<Participant>>>()
 	fun getEglBaseAndParticipants(): LiveData<Pair<EglBase, Set<Participant>>> = eglBaseAndParticipants
 
-	private val participantsCount = Transformations.map(eglBaseAndParticipants) { it.second.size }
+	private val participantsCount = eglBaseAndParticipants.map { it.second.size }
 
 	private val captureStateUpdates = MutableLiveData<Unit>()
 	fun getCaptureStateUpdates(): LiveData<Unit> = captureStateUpdates
 
 	private val microphoneActive = MutableLiveData(false)
-	fun isMicrophoneActive(): LiveData<Boolean> = Transformations.distinctUntilChanged(microphoneActive)
+	fun isMicrophoneActive(): LiveData<Boolean> = microphoneActive.distinctUntilChanged()
 
 	private val cameraActive = MutableLiveData(false)
-	fun isCameraActive(): LiveData<Boolean> = Transformations.distinctUntilChanged(cameraActive)
+	fun isCameraActive(): LiveData<Boolean> = cameraActive.distinctUntilChanged()
 
 	private val cameraFlipEvents = MutableLiveData<Unit>()
 	fun getCameraFlipEvents(): LiveData<Unit> = cameraFlipEvents
@@ -138,7 +139,7 @@ class GroupCallViewModel(application: Application) : AndroidViewModel(applicatio
 	@AnyThread
 	override fun onGroupCallUpdate(call: GroupCallDescription?) {
 		logger.trace("Group call update")
-		startTime.postValue(call?.getRunningSince())
+		startTime.postValue(call?.let { getRunningSince(it, ThreemaApplication.getAppContext()) })
 	}
 
 	@UiThread
@@ -275,8 +276,8 @@ class GroupCallViewModel(application: Application) : AndroidViewModel(applicatio
 
 	@UiThread
 	private fun mapGroupModelLiveData(): LiveData<GroupModel?> {
-		val distinctGroupId = Transformations.distinctUntilChanged(groupId)
-		return Transformations.map(distinctGroupId, this::getGroupModel)
+		val distinctGroupId = groupId.distinctUntilChanged()
+		return distinctGroupId.map(this::getGroupModel)
 	}
 
 	@UiThread
@@ -398,7 +399,7 @@ class GroupCallViewModel(application: Application) : AndroidViewModel(applicatio
 	}
 
 	@UiThread
-	private fun mapTitle() = Transformations.map(group, this::getTitle)
+	private fun mapTitle() = group.map(this::getTitle)
 	@UiThread
 	private fun getTitle(groupModel: GroupModel?) = groupModel?.name ?: ""
 
diff --git a/app/src/main/java/ch/threema/app/webclient/activities/SessionsActivity.java b/app/src/main/java/ch/threema/app/webclient/activities/SessionsActivity.java
index 1fd79448..6e88438c 100644
--- a/app/src/main/java/ch/threema/app/webclient/activities/SessionsActivity.java
+++ b/app/src/main/java/ch/threema/app/webclient/activities/SessionsActivity.java
@@ -79,6 +79,7 @@ import ch.threema.app.utils.ConfigUtils;
 import ch.threema.app.utils.DialogUtil;
 import ch.threema.app.utils.IntentDataUtil;
 import ch.threema.app.utils.LogUtil;
+import ch.threema.app.utils.PowermanagerUtil;
 import ch.threema.app.utils.QRScannerUtil;
 import ch.threema.app.utils.RuntimeUtil;
 import ch.threema.app.utils.TestUtil;
@@ -187,15 +188,11 @@ public class SessionsActivity extends ThreemaToolbarActivity
 		}
 
 		private void updateView(final boolean notifyDataSetChanged) {
-			RuntimeUtil.runOnUiThread(new Runnable() {
-				@Override
-				@UiThread
-				public void run() {
-					if (notifyDataSetChanged && SessionsActivity.this.listAdapter != null) {
-						SessionsActivity.this.listAdapter.notifyDataSetChanged();
-					}
-					SessionsActivity.this.updateView();
+			RuntimeUtil.runOnUiThread(() -> {
+				if (notifyDataSetChanged && SessionsActivity.this.listAdapter != null) {
+					SessionsActivity.this.listAdapter.notifyDataSetChanged();
 				}
+				SessionsActivity.this.updateView();
 			});
 		}
 	};
@@ -237,18 +234,14 @@ public class SessionsActivity extends ThreemaToolbarActivity
 		@Override
 		@AnyThread
 		public void onRemoved(@NonNull final WebClientSessionModel model) {
-			RuntimeUtil.runOnUiThread(new Runnable() {
-				@Override
-				@UiThread
-				public void run() {
-					if (listAdapter != null) {
-						final SessionListAdapter listAdapter = SessionsActivity.this.listAdapter;
-						for (int pos = 0; pos < listAdapter.getItemCount(); pos++) {
-							if (listAdapter.getEntity(pos).getId() == model.getId()) {
-								// Remove session from list
-								SessionsActivity.this.closeAllDialogs();
-								listAdapter.deleteEntity(pos);
-							}
+			RuntimeUtil.runOnUiThread(() -> {
+				if (listAdapter != null) {
+					final SessionListAdapter listAdapter = SessionsActivity.this.listAdapter;
+					for (int pos = 0; pos < listAdapter.getItemCount(); pos++) {
+						if (listAdapter.getEntity(pos).getId() == model.getId()) {
+							// Remove session from list
+							SessionsActivity.this.closeAllDialogs();
+							listAdapter.deleteEntity(pos);
 						}
 					}
 				}
@@ -258,15 +251,12 @@ public class SessionsActivity extends ThreemaToolbarActivity
 		@Override
 		@AnyThread
 		public void onCreated(@NonNull final WebClientSessionModel model) {
-			RuntimeUtil.runOnUiThread(new Runnable() {
-				@Override
-				public void run() {
-					final SessionListAdapter listAdapter = SessionsActivity.this.listAdapter;
-					if (listAdapter != null) {
-						// Move session to top
-						SessionsActivity.this.closeAllDialogs();
-						listAdapter.addEntity(0, model);
-					}
+			RuntimeUtil.runOnUiThread(() -> {
+				final SessionListAdapter listAdapter = SessionsActivity.this.listAdapter;
+				if (listAdapter != null) {
+					// Move session to top
+					SessionsActivity.this.closeAllDialogs();
+					listAdapter.addEntity(0, model);
 				}
 			});
 		}
@@ -420,7 +410,11 @@ public class SessionsActivity extends ThreemaToolbarActivity
 				// Show wizard
 				this.startActivityForResult(new Intent(this, SessionsIntroActivity.class), REQUEST_ID_INTRO_WIZARD);
 			} else {
-				this.startBatteryOptimizationFlow();
+				if (PowermanagerUtil.isIgnoringBatteryOptimizations(this)) {
+					this.activityInitialized();
+				} else {
+					this.startBatteryOptimizationFlow();
+				}
 			}
 		}
 	}
@@ -936,22 +930,16 @@ public class SessionsActivity extends ThreemaToolbarActivity
 
 	@Override
 	public boolean onOptionsItemSelected(MenuItem item) {
-		switch (item.getItemId()) {
-			case android.R.id.home:
-				this.finish();
-				break;
-			case R.id.menu_help:
-				this.startActivity(new Intent(this, SessionsIntroActivity.class));
-				break;
-			case R.id.menu_clear_all:
-				GenericAlertDialog dialog = GenericAlertDialog.newInstance(R.string.webclient_clear_all_sessions,
-					getString(R.string.webclient_clear_all_sessions_confirm),
-					R.string.ok,
-					R.string.cancel);
-				dialog.show(getSupportFragmentManager(), DIALOG_TAG_REALLY_DELETE_ALL_SESSIONS);
-				break;
-			default:
-				break;
+		if (item.getItemId() == android.R.id.home) {
+			this.finish();
+		} else if (item.getItemId() == R.id.menu_help) {
+			this.startActivity(new Intent(this, SessionsIntroActivity.class));
+		} else if (item.getItemId() == R.id.menu_clear_all) {
+			GenericAlertDialog dialog = GenericAlertDialog.newInstance(R.string.webclient_clear_all_sessions,
+				getString(R.string.webclient_clear_all_sessions_confirm),
+				R.string.ok,
+				R.string.cancel);
+			dialog.show(getSupportFragmentManager(), DIALOG_TAG_REALLY_DELETE_ALL_SESSIONS);
 		}
 		return super.onOptionsItemSelected(item);
 	}
diff --git a/app/src/main/java/ch/threema/app/webclient/activities/WebDiagnosticsActivity.java b/app/src/main/java/ch/threema/app/webclient/activities/WebDiagnosticsActivity.java
index 3f36b95f..57fca8eb 100644
--- a/app/src/main/java/ch/threema/app/webclient/activities/WebDiagnosticsActivity.java
+++ b/app/src/main/java/ch/threema/app/webclient/activities/WebDiagnosticsActivity.java
@@ -37,10 +37,10 @@ import android.view.View;
 import android.widget.ArrayAdapter;
 import android.widget.Button;
 import android.widget.ListView;
-import android.widget.ProgressBar;
 import android.widget.TextView;
 import android.widget.Toast;
 
+import com.google.android.material.progressindicator.CircularProgressIndicator;
 import com.neovisionaries.ws.client.DualStackMode;
 import com.neovisionaries.ws.client.WebSocket;
 import com.neovisionaries.ws.client.WebSocketException;
@@ -123,7 +123,7 @@ public class WebDiagnosticsActivity extends ThreemaToolbarActivity implements Te
 	@Nullable private ContactService contactService;
 
 	// Views
-	@Nullable private ProgressBar progressBar;
+	@Nullable private CircularProgressIndicator progressBar;
 	@Nullable private TextView introText;
 	@Nullable private TextView doneText;
 	@Nullable private Button copyButton;
diff --git a/app/src/main/java/ch/threema/app/webclient/adapters/SessionListAdapter.java b/app/src/main/java/ch/threema/app/webclient/adapters/SessionListAdapter.java
index 525cdbb4..ed656001 100644
--- a/app/src/main/java/ch/threema/app/webclient/adapters/SessionListAdapter.java
+++ b/app/src/main/java/ch/threema/app/webclient/adapters/SessionListAdapter.java
@@ -27,12 +27,14 @@ import android.view.LayoutInflater;
 import android.view.View;
 import android.view.ViewGroup;
 import android.widget.ImageView;
-import android.widget.ProgressBar;
 import android.widget.TextView;
 
 import androidx.annotation.NonNull;
 import androidx.annotation.UiThread;
 import androidx.recyclerview.widget.RecyclerView;
+
+import com.google.android.material.progressindicator.CircularProgressIndicator;
+
 import ch.threema.app.R;
 import ch.threema.app.ThreemaApplication;
 import ch.threema.app.adapters.AbstractRecyclerAdapter;
@@ -58,7 +60,7 @@ public class SessionListAdapter extends AbstractRecyclerAdapter<WebClientSession
 	private static class SessionListViewHolder extends RecyclerView.ViewHolder {
 		private final TextView createDateView;
 		private final TextView lastUsageView;
-		private final ProgressBar loadingIndicator;
+		private final CircularProgressIndicator loadingIndicator;
 		private final ImageView browserIcon;
 		private final ImageView errorIcon;
 		private final TextView sessionNameView;
diff --git a/app/src/main/java/ch/threema/app/webclient/converter/Conversation.java b/app/src/main/java/ch/threema/app/webclient/converter/Conversation.java
index c0cfa8da..dbdfa6ac 100644
--- a/app/src/main/java/ch/threema/app/webclient/converter/Conversation.java
+++ b/app/src/main/java/ch/threema/app/webclient/converter/Conversation.java
@@ -113,7 +113,7 @@ public class Conversation extends Converter {
 	) throws ConversionException {
 		AbstractMessageModel message = conversation.getLatestMessage();
 		if (message != null) {
-			builder.put(field, Message.convert(message, conversation.getReceiverType(), false, Message.DETAILS_NO_QUOTE));
+			builder.put(field, Message.convert(message, conversation.getReceiver(), false, Message.DETAILS_NO_QUOTE));
 		}
 	}
 }
diff --git a/app/src/main/java/ch/threema/app/webclient/converter/Message.java b/app/src/main/java/ch/threema/app/webclient/converter/Message.java
index 404644db..62356ab0 100644
--- a/app/src/main/java/ch/threema/app/webclient/converter/Message.java
+++ b/app/src/main/java/ch/threema/app/webclient/converter/Message.java
@@ -46,7 +46,7 @@ import java.util.Map;
 
 import ch.threema.app.ThreemaApplication;
 import ch.threema.app.managers.ServiceManager;
-import ch.threema.app.messagereceiver.MessageReceiver.MessageReceiverType;
+import ch.threema.app.messagereceiver.MessageReceiver;
 import ch.threema.app.services.FileService;
 import ch.threema.app.services.MessageService;
 import ch.threema.app.services.UserService;
@@ -143,7 +143,7 @@ public class Message extends Converter {
 	 */
 	public static List<MsgpackBuilder> convert(
 		List<AbstractMessageModel> messages,
-		@MessageReceiverType int receiverType,
+		MessageReceiver messageReceiver,
 		boolean sendThumbnail
 	) throws ConversionException {
 		final List<MsgpackBuilder> builders = new ArrayList<>();
@@ -153,7 +153,7 @@ public class Message extends Converter {
 		ArrayList<AbstractMessageModel> messagesCopy = new ArrayList<>(messages);
 		Collections.reverse(messagesCopy);
 		for (AbstractMessageModel message : messagesCopy) {
-			builders.add(Message.convert(message, receiverType, sendThumbnail, DETAILS_FULL));
+			builders.add(Message.convert(message, messageReceiver, sendThumbnail, DETAILS_FULL));
 		}
 		return builders;
 	}
@@ -161,12 +161,12 @@ public class Message extends Converter {
 	/**
 	 * Converts a message model to a MsgpackObjectBuilder instance.
 	 *
-	 * @param receiverType Must be provided if `detailLevel` is `FULL`.
+	 * @param messageReceiver Must be provided if `detailLevel` is `FULL`.
 	 * @param detailLevel If set to true, then only the most important fields will be serialized.
 	 */
 	public static MsgpackObjectBuilder convert(
 		AbstractMessageModel message,
-	    @MessageReceiverType int receiverType,
+	    MessageReceiver messageReceiver,
 	    boolean sendThumbnail,
 	    @DetailLevel int detailLevel
 	) throws ConversionException {
@@ -235,7 +235,7 @@ public class Message extends Converter {
 				// should be stripped from the body.)
 				final Context context = ThreemaApplication.getAppContext();
 				final QuoteUtil.QuoteContent quoteContent = QuoteUtil.getQuoteContent(
-					message, receiverType, true, null,
+					message, messageReceiver, true, null,
 					context, messageService, userService, fileService
 				);
 
diff --git a/app/src/main/java/ch/threema/app/webclient/converter/Quote.java b/app/src/main/java/ch/threema/app/webclient/converter/Quote.java
index 0bf200d4..9a1bca09 100644
--- a/app/src/main/java/ch/threema/app/webclient/converter/Quote.java
+++ b/app/src/main/java/ch/threema/app/webclient/converter/Quote.java
@@ -42,10 +42,10 @@ public class Quote extends Converter {
 		builder.put(FIELD_TEXT, quoteContent.quotedText);
 		if (quoteContent.isQuoteV2()) {
 			builder.put(FIELD_MESSAGE_ID, quoteContent.quotedMessageId);
-			if (quoteContent.quotedMessageModel != null && quoteContent.receiverType != null) {
+			if (quoteContent.quotedMessageModel != null && quoteContent.messageReceiver != null) {
 				builder.put(FIELD_MESSAGE, Message.convert(
 					quoteContent.quotedMessageModel,
-					quoteContent.receiverType,
+					quoteContent.messageReceiver,
 					false,
 					Message.DETAILS_NO_QUOTE
 				));
diff --git a/app/src/main/java/ch/threema/app/webclient/services/instance/SessionInstanceServiceImpl.java b/app/src/main/java/ch/threema/app/webclient/services/instance/SessionInstanceServiceImpl.java
index cb2bbfd1..4f54f95f 100644
--- a/app/src/main/java/ch/threema/app/webclient/services/instance/SessionInstanceServiceImpl.java
+++ b/app/src/main/java/ch/threema/app/webclient/services/instance/SessionInstanceServiceImpl.java
@@ -473,7 +473,7 @@ public class SessionInstanceServiceImpl implements SessionInstanceService {
 			services.conversationTag
 		));
 		updateDispatcher.addReceiver(new IsTypingHandler(
-			services.user
+			services.contact
 		));
 		updateDispatcher.addReceiver(new ConnectionInfoUpdateHandler());
 		updateDispatcher.addReceiver(new ActiveConversationHandler(
diff --git a/app/src/main/java/ch/threema/app/webclient/services/instance/message/receiver/DeleteDistributionListHandler.java b/app/src/main/java/ch/threema/app/webclient/services/instance/message/receiver/DeleteDistributionListHandler.java
index 5fb44229..2d9e178c 100644
--- a/app/src/main/java/ch/threema/app/webclient/services/instance/message/receiver/DeleteDistributionListHandler.java
+++ b/app/src/main/java/ch/threema/app/webclient/services/instance/message/receiver/DeleteDistributionListHandler.java
@@ -78,7 +78,7 @@ public class DeleteDistributionListHandler extends MessageReceiver {
 			this.failed(temporaryId, Protocol.ERROR_BAD_REQUEST);
 			return;
 		}
-		final int distributionListId = Integer.parseInt(args.get(Receiver.ID).asStringValue().toString());
+		final long distributionListId = Long.parseLong(args.get(Receiver.ID).asStringValue().toString());
 
 		// Get distribution list
 		final DistributionListModel distributionListModel = this.distributionListService.getById(distributionListId);
diff --git a/app/src/main/java/ch/threema/app/webclient/services/instance/message/receiver/FileMessageCreateHandler.java b/app/src/main/java/ch/threema/app/webclient/services/instance/message/receiver/FileMessageCreateHandler.java
index ece03126..d0efbb67 100644
--- a/app/src/main/java/ch/threema/app/webclient/services/instance/message/receiver/FileMessageCreateHandler.java
+++ b/app/src/main/java/ch/threema/app/webclient/services/instance/message/receiver/FileMessageCreateHandler.java
@@ -23,6 +23,10 @@ package ch.threema.app.webclient.services.instance.message.receiver;
 
 import android.net.Uri;
 
+import androidx.annotation.AnyThread;
+import androidx.annotation.NonNull;
+import androidx.annotation.WorkerThread;
+
 import org.msgpack.value.Value;
 import org.slf4j.Logger;
 
@@ -36,16 +40,12 @@ import java.util.Collections;
 import java.util.List;
 import java.util.Map;
 
-import androidx.annotation.AnyThread;
-import androidx.annotation.NonNull;
-import androidx.annotation.WorkerThread;
 import ch.threema.app.messagereceiver.MessageReceiver;
 import ch.threema.app.services.FileService;
 import ch.threema.app.services.IdListService;
 import ch.threema.app.services.LifetimeService;
 import ch.threema.app.services.MessageService;
 import ch.threema.app.ui.MediaItem;
-import ch.threema.app.utils.ConfigUtils;
 import ch.threema.app.utils.MimeUtil;
 import ch.threema.app.webclient.Protocol;
 import ch.threema.app.webclient.services.instance.MessageDispatcher;
@@ -161,7 +161,7 @@ public class FileMessageCreateHandler extends MessageCreateHandler {
 	}
 
 	private File save(final byte[] bytes) throws IOException {
-		final File file = fileService.createTempFile("wcm", "", !ConfigUtils.useContentUris());
+		final File file = fileService.createTempFile("wcm", "", false);
 		try (
 			final FileOutputStream fileOutputStream = new FileOutputStream(file);
 			final BufferedOutputStream bufferedOutputStream = new BufferedOutputStream(fileOutputStream)
diff --git a/app/src/main/java/ch/threema/app/webclient/services/instance/message/receiver/IsTypingHandler.java b/app/src/main/java/ch/threema/app/webclient/services/instance/message/receiver/IsTypingHandler.java
index fbc1fd02..939ad682 100644
--- a/app/src/main/java/ch/threema/app/webclient/services/instance/message/receiver/IsTypingHandler.java
+++ b/app/src/main/java/ch/threema/app/webclient/services/instance/message/receiver/IsTypingHandler.java
@@ -22,6 +22,7 @@
 package ch.threema.app.webclient.services.instance.message.receiver;
 
 import androidx.annotation.AnyThread;
+import androidx.annotation.NonNull;
 import androidx.annotation.WorkerThread;
 
 import org.msgpack.core.MessagePackException;
@@ -30,7 +31,7 @@ import org.slf4j.Logger;
 
 import java.util.Map;
 
-import ch.threema.app.services.UserService;
+import ch.threema.app.services.ContactService;
 import ch.threema.app.webclient.Protocol;
 import ch.threema.app.webclient.services.instance.MessageReceiver;
 import ch.threema.base.utils.LoggingUtil;
@@ -39,12 +40,13 @@ import ch.threema.base.utils.LoggingUtil;
 public class IsTypingHandler extends MessageReceiver {
 	private static final Logger logger = LoggingUtil.getThreemaLogger("IsTypingHandler");
 
-	private final UserService userService;
+	@NonNull
+	private final ContactService contactService;
 
 	@AnyThread
-	public IsTypingHandler(UserService userService) {
+	public IsTypingHandler(@NonNull ContactService userService) {
 		super(Protocol.SUB_TYPE_TYPING);
-		this.userService = userService;
+		this.contactService = userService;
 	}
 
 	@Override
@@ -63,8 +65,7 @@ public class IsTypingHandler extends MessageReceiver {
 		});
 		boolean isTyping = data.get(Protocol.ARGUMENT_IS_TYPING).asBooleanValue().getBoolean();
 
-		// Notify user service
-		this.userService.isTyping(identity, isTyping);
+		this.contactService.sendTypingIndicator(identity, isTyping);
 	}
 
 	@Override
diff --git a/app/src/main/java/ch/threema/app/webclient/services/instance/message/receiver/MessageReadRequestHandler.java b/app/src/main/java/ch/threema/app/webclient/services/instance/message/receiver/MessageReadRequestHandler.java
index d415419c..9ddeea0d 100644
--- a/app/src/main/java/ch/threema/app/webclient/services/instance/message/receiver/MessageReadRequestHandler.java
+++ b/app/src/main/java/ch/threema/app/webclient/services/instance/message/receiver/MessageReadRequestHandler.java
@@ -26,7 +26,6 @@ import org.msgpack.value.Value;
 import org.slf4j.Logger;
 
 import java.sql.SQLException;
-import java.util.List;
 import java.util.Map;
 
 import androidx.annotation.AnyThread;
@@ -40,7 +39,6 @@ import ch.threema.app.webclient.Protocol;
 import ch.threema.app.webclient.converter.Receiver;
 import ch.threema.app.webclient.services.instance.MessageReceiver;
 import ch.threema.base.utils.LoggingUtil;
-import ch.threema.storage.models.AbstractMessageModel;
 import ch.threema.storage.models.ContactModel;
 import ch.threema.storage.models.GroupModel;
 import ch.threema.storage.models.MessageType;
@@ -139,7 +137,8 @@ public class MessageReadRequestHandler extends MessageReceiver {
 						return null;
 					}
 				};
-				(new ReadMessagesRoutine(receiver.loadMessages(filter), messageService, notificationService)).run();
+				new ReadMessagesRoutine(receiver.loadMessages(filter), messageService, notificationService).run();
+				notificationService.cancel(receiver);
 			} catch (SQLException e) {
 				logger.error("Exception", e);
 				//do nothing more
diff --git a/app/src/main/java/ch/threema/app/webclient/services/instance/message/receiver/MessageRequestHandler.java b/app/src/main/java/ch/threema/app/webclient/services/instance/message/receiver/MessageRequestHandler.java
index cc749306..86a303e8 100644
--- a/app/src/main/java/ch/threema/app/webclient/services/instance/message/receiver/MessageRequestHandler.java
+++ b/app/src/main/java/ch/threema/app/webclient/services/instance/message/receiver/MessageRequestHandler.java
@@ -134,7 +134,7 @@ public class MessageRequestHandler extends MessageReceiver {
 			}
 
 			// Convert and send messages
-			List<MsgpackBuilder> data = Message.convert(messages, receiver.getType(), true);
+			List<MsgpackBuilder> data = Message.convert(messages, receiver, true);
 			logger.debug("Sending message response");
 			this.send(this.dispatcher, data, args);
 		} catch (ConversionException e) {
diff --git a/app/src/main/java/ch/threema/app/webclient/services/instance/message/receiver/ModifyConversationHandler.java b/app/src/main/java/ch/threema/app/webclient/services/instance/message/receiver/ModifyConversationHandler.java
index dbf5a7cb..66ff4a4b 100644
--- a/app/src/main/java/ch/threema/app/webclient/services/instance/message/receiver/ModifyConversationHandler.java
+++ b/app/src/main/java/ch/threema/app/webclient/services/instance/message/receiver/ModifyConversationHandler.java
@@ -122,8 +122,10 @@ public class ModifyConversationHandler extends MessageReceiver {
 			final TagModel pinTagModel = conversationTagService.getTagModel(ConversationTagServiceImpl.FIXED_TAG_PIN);
 			if (isPinned) {
 				this.conversationTagService.tag(conversation, pinTagModel);
+				conversation.setIsPinTagged(true);
 			} else {
 				this.conversationTagService.unTag(conversation, pinTagModel);
+				conversation.setIsPinTagged(false);
 			}
 
 			// TODO: This should be done at a central location whenever the data changes.
diff --git a/app/src/main/java/ch/threema/app/webclient/services/instance/message/receiver/ModifyDistributionListHandler.java b/app/src/main/java/ch/threema/app/webclient/services/instance/message/receiver/ModifyDistributionListHandler.java
index 30852b30..8fb8b7ca 100644
--- a/app/src/main/java/ch/threema/app/webclient/services/instance/message/receiver/ModifyDistributionListHandler.java
+++ b/app/src/main/java/ch/threema/app/webclient/services/instance/message/receiver/ModifyDistributionListHandler.java
@@ -86,7 +86,7 @@ public class ModifyDistributionListHandler extends MessageReceiver {
 			this.failed(temporaryId, Protocol.ERROR_BAD_REQUEST);
 			return;
 		}
-		final int distributionListId = Integer.parseInt(args.get(Receiver.ID).asStringValue().toString());
+		final long distributionListId = Long.parseLong(args.get(Receiver.ID).asStringValue().toString());
 
 		// Get distribution list
 		final DistributionListModel distributionListModel = this.distributionListService.getById(distributionListId);
diff --git a/app/src/main/java/ch/threema/app/webclient/services/instance/message/updater/MessageUpdateHandler.java b/app/src/main/java/ch/threema/app/webclient/services/instance/message/updater/MessageUpdateHandler.java
index 9758db27..b862c13d 100644
--- a/app/src/main/java/ch/threema/app/webclient/services/instance/message/updater/MessageUpdateHandler.java
+++ b/app/src/main/java/ch/threema/app/webclient/services/instance/message/updater/MessageUpdateHandler.java
@@ -167,7 +167,7 @@ public class MessageUpdateHandler extends MessageUpdater {
 				for (AbstractMessageModel message : entry.getValue()) {
 					data.put(Message.convert(
 						message,
-						receiver.getType(),
+						receiver,
 						this.sendThumbnail(message),
 						Protocol.ARGUMENT_MODE_REMOVED.equals(mode) ? Message.DETAILS_MINIMAL : Message.DETAILS_FULL
 					));
@@ -217,6 +217,11 @@ public class MessageUpdateHandler extends MessageUpdater {
 			// Ignore
 		}
 
+		@Override
+		public void onResendDismissed(@NonNull AbstractMessageModel messageModel) {
+			// Ignore
+		}
+
 		private void dispatch(List<AbstractMessageModel> messages, @Mode String mode) {
 			handler.post(new Runnable() {
 				@Override
diff --git a/app/src/main/java/ch/threema/app/workers/RestartWorker.kt b/app/src/main/java/ch/threema/app/workers/RestartWorker.kt
new file mode 100644
index 00000000..3168d1c5
--- /dev/null
+++ b/app/src/main/java/ch/threema/app/workers/RestartWorker.kt
@@ -0,0 +1,58 @@
+/*  _____ _
+ * |_   _| |_  _ _ ___ ___ _ __  __ _
+ *   | | | ' \| '_/ -_) -_) '  \/ _` |_
+ *   |_| |_||_|_| \___\___|_|_|_\__,_(_)
+ *
+ * Threema for Android
+ * Copyright (c) 2023 Threema GmbH
+ *
+ * This program is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU Affero General Public License, version 3,
+ * as published by the Free Software Foundation.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+ * GNU Affero General Public License for more details.
+ *
+ * You should have received a copy of the GNU Affero General Public License
+ * along with this program. If not, see <https://www.gnu.org/licenses/>.
+ */
+
+package ch.threema.app.workers
+
+import android.content.Context
+import android.content.Intent
+import androidx.work.*
+import ch.threema.base.utils.LoggingUtil
+import java.util.concurrent.TimeUnit
+
+class RestartWorker(val appContext: Context, workerParameters: WorkerParameters) :
+        Worker(appContext, workerParameters) {
+
+    override fun doWork(): Result {
+        logger.debug("Scheduling restart")
+        val restartIntent: Intent? = appContext.packageManager
+                .getLaunchIntentForPackage(appContext.packageName)
+        return if (restartIntent != null) {
+            restartIntent.flags = Intent.FLAG_ACTIVITY_NEW_TASK or Intent.FLAG_ACTIVITY_CLEAR_TASK
+            appContext.startActivity(restartIntent)
+            logger.info("Restart scheduled")
+            Result.success()
+        } else {
+            logger.info("Scheduling restart failed")
+            Result.failure()
+        }
+    }
+
+    companion object {
+        fun buildOneTimeWorkRequest(delayMs: Long): OneTimeWorkRequest {
+            return OneTimeWorkRequestBuilder<RestartWorker>()
+                    .apply {
+                        setInitialDelay(delayMs, TimeUnit.MILLISECONDS)
+                    }
+                    .build()
+        }
+        private val logger = LoggingUtil.getThreemaLogger("RestartWorker")
+    }
+}
diff --git a/app/src/main/java/ch/threema/app/workers/ThreemaSafeUploadWorker.kt b/app/src/main/java/ch/threema/app/workers/ThreemaSafeUploadWorker.kt
index b18fac74..f643b74a 100644
--- a/app/src/main/java/ch/threema/app/workers/ThreemaSafeUploadWorker.kt
+++ b/app/src/main/java/ch/threema/app/workers/ThreemaSafeUploadWorker.kt
@@ -30,6 +30,7 @@ import ch.threema.app.managers.ListenerManager
 import ch.threema.app.managers.ServiceManager
 import ch.threema.app.services.PreferenceService
 import ch.threema.app.threemasafe.ThreemaSafeService
+import ch.threema.app.utils.ConfigUtils
 import ch.threema.base.utils.LoggingUtil
 import java.util.*
 import java.util.concurrent.TimeUnit
@@ -44,28 +45,41 @@ class ThreemaSafeUploadWorker(context: Context, workerParameters: WorkerParamete
     companion object {
         private const val EXTRA_FORCE_UPDATE = "FORCE_UPDATE"
 
+        /**
+         * Build a one time work request without any initial delay.
+         */
         fun buildOneTimeWorkRequest(forceUpdate: Boolean): OneTimeWorkRequest {
             val data = Data.Builder()
-                    .putBoolean(EXTRA_FORCE_UPDATE, forceUpdate)
-                    .build()
+                .putBoolean(EXTRA_FORCE_UPDATE, forceUpdate)
+                .build()
 
             return OneTimeWorkRequestBuilder<ThreemaSafeUploadWorker>()
-                    .apply { setInputData(data) }
-                    .build()
+                .apply { setInputData(data) }
+                .build()
         }
 
+        /**
+         * Build a periodic work request that runs every [schedulePeriodMs] milliseconds. The
+         * request is scheduled to first run in [schedulePeriodMs] milliseconds. Note that the
+         * schedule period is not added as tag, as these period does not change dynamically.
+         */
         fun buildPeriodicWorkRequest(schedulePeriodMs: Long): PeriodicWorkRequest {
             val data = Data.Builder()
-                    .putBoolean(EXTRA_FORCE_UPDATE, false)
-                    .build()
+                .putBoolean(EXTRA_FORCE_UPDATE, false)
+                .build()
             val constraints = Constraints.Builder()
-                    .setRequiredNetworkType(NetworkType.CONNECTED)
-                    .build()
-
-            return PeriodicWorkRequestBuilder<ThreemaSafeUploadWorker>(schedulePeriodMs, TimeUnit.MILLISECONDS)
-                    .setConstraints(constraints)
-                    .apply { setInputData(data) }
-                    .build()
+                .setRequiredNetworkType(NetworkType.CONNECTED)
+                .build()
+
+            return PeriodicWorkRequestBuilder<ThreemaSafeUploadWorker>(
+                schedulePeriodMs,
+                TimeUnit.MILLISECONDS
+            )
+                .setInitialDelay(schedulePeriodMs, TimeUnit.MILLISECONDS)
+                .setConstraints(constraints)
+                .addTag(schedulePeriodMs.toString())
+                .apply { setInputData(data) }
+                .build()
         }
     }
 
@@ -73,13 +87,18 @@ class ThreemaSafeUploadWorker(context: Context, workerParameters: WorkerParamete
         val forceUpdate: Boolean = inputData.getBoolean(EXTRA_FORCE_UPDATE, false)
         var success = true
 
-        logger.info("Uploading Threema Safe, force = {}", forceUpdate)
+        logger.info("Threema Safe upload worker started, force = {}", forceUpdate)
 
         if (serviceManager == null || threemaSafeService == null || preferenceService == null) {
             logger.info("Services not available")
             return Result.failure()
         }
 
+        if (ConfigUtils.isSerialLicensed() && !ConfigUtils.isSerialLicenseValid()) {
+            // skip upload if license was revoked or is temporarily unavailable
+            return Result.success()
+        }
+
         try {
             threemaSafeService.createBackup(forceUpdate)
             // When the backup has been successfully uploaded or does not need to be uploaded, then
@@ -96,7 +115,7 @@ class ThreemaSafeUploadWorker(context: Context, workerParameters: WorkerParamete
 
         ListenerManager.threemaSafeListeners.handle { obj: ThreemaSafeListener -> obj.onBackupStatusChanged() }
 
-        logger.info("Threema Safe upload finished. Success = {}", success)
+        logger.info("Threema Safe upload worker finished. Success = {}", success)
 
         return if (success) {
             Result.success()
diff --git a/app/src/main/java/ch/threema/storage/ColumnIndexCache.java b/app/src/main/java/ch/threema/storage/ColumnIndexCache.java
index 1e009448..938a6c3a 100644
--- a/app/src/main/java/ch/threema/storage/ColumnIndexCache.java
+++ b/app/src/main/java/ch/threema/storage/ColumnIndexCache.java
@@ -21,7 +21,7 @@
 
 package ch.threema.storage;
 
-import net.sqlcipher.Cursor;
+import android.database.Cursor;
 
 import androidx.collection.SimpleArrayMap;
 
diff --git a/app/src/main/java/ch/threema/storage/CursorHelper.java b/app/src/main/java/ch/threema/storage/CursorHelper.java
index d5df404b..b1206c6d 100644
--- a/app/src/main/java/ch/threema/storage/CursorHelper.java
+++ b/app/src/main/java/ch/threema/storage/CursorHelper.java
@@ -21,6 +21,8 @@
 
 package ch.threema.storage;
 
+import android.database.Cursor;
+
 import java.text.ParseException;
 import java.text.SimpleDateFormat;
 import java.util.Date;
@@ -35,7 +37,7 @@ import java8.util.function.Function;
  * Handling NULL Values and Support Date (as Long) fields
  */
 public class CursorHelper implements AutoCloseable {
-	private final net.sqlcipher.Cursor cursor;
+	private final Cursor cursor;
 	private final ColumnIndexCache columnIndexCache;
 	// SimpleDateFormat is not thread-safe, so give one to each thread
 	public static final ThreadLocal<SimpleDateFormat> dateAsStringFormat = new ThreadLocal<SimpleDateFormat>(){
@@ -58,7 +60,7 @@ public class CursorHelper implements AutoCloseable {
 	}
 
 
-	public CursorHelper(net.sqlcipher.Cursor cursor, ColumnIndexCache columnIndexCache) {
+	public CursorHelper(Cursor cursor, ColumnIndexCache columnIndexCache) {
 		this.cursor = cursor;
 		this.columnIndexCache = columnIndexCache;
 	}
diff --git a/app/src/main/java/ch/threema/storage/DatabaseNonceStore.java b/app/src/main/java/ch/threema/storage/DatabaseNonceStore.java
new file mode 100644
index 00000000..3bf7072b
--- /dev/null
+++ b/app/src/main/java/ch/threema/storage/DatabaseNonceStore.java
@@ -0,0 +1,218 @@
+/*  _____ _
+ * |_   _| |_  _ _ ___ ___ _ __  __ _
+ *   | | | ' \| '_/ -_) -_) '  \/ _` |_
+ *   |_| |_||_|_| \___\___|_|_|_\__,_(_)
+ *
+ * Threema for Android
+ * Copyright (c) 2017-2023 Threema GmbH
+ *
+ * This program is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU Affero General Public License, version 3,
+ * as published by the Free Software Foundation.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+ * GNU Affero General Public License for more details.
+ *
+ * You should have received a copy of the GNU Affero General Public License
+ * along with this program. If not, see <https://www.gnu.org/licenses/>.
+ */
+
+package ch.threema.storage;
+
+import android.annotation.SuppressLint;
+import android.content.ContentValues;
+import android.content.Context;
+import android.database.Cursor;
+import android.database.SQLException;
+import android.database.sqlite.SQLiteException;
+
+import androidx.annotation.NonNull;
+
+import net.zetetic.database.sqlcipher.SQLiteConnection;
+import net.zetetic.database.sqlcipher.SQLiteDatabase;
+import net.zetetic.database.sqlcipher.SQLiteDatabaseHook;
+import net.zetetic.database.sqlcipher.SQLiteOpenHelper;
+
+import org.slf4j.Logger;
+
+import java.security.InvalidKeyException;
+import java.security.NoSuchAlgorithmException;
+import java.util.LinkedList;
+import java.util.List;
+
+import javax.crypto.Mac;
+import javax.crypto.spec.SecretKeySpec;
+
+import ch.threema.base.crypto.NonceStoreInterface;
+import ch.threema.base.utils.LoggingUtil;
+import ch.threema.base.utils.Utils;
+import ch.threema.domain.stores.IdentityStoreInterface;
+
+public class DatabaseNonceStore extends SQLiteOpenHelper
+	implements NonceStoreInterface  {
+	private static final Logger logger = LoggingUtil.getThreemaLogger("NonceDatabaseBlobService");
+
+	public static final String DATABASE_NAME_V4 = "threema-nonce-blob4.db";
+	private static final int DATABASE_VERSION = 1;
+	private final IdentityStoreInterface identityStore;
+
+	public DatabaseNonceStore(final Context context, IdentityStoreInterface identityStore) {
+		super(
+			context,
+			DATABASE_NAME_V4,
+			"",
+			null,
+			DATABASE_VERSION,
+			0,
+			null,
+			new SQLiteDatabaseHook() {
+				@Override
+				public void preKey(SQLiteConnection connection) {
+					// not used
+				}
+
+				@SuppressLint("DefaultLocale")
+				@Override
+				public void postKey(SQLiteConnection connection) {
+					// turn off memory wiping for now due to https://github.com/sqlcipher/android-database-sqlcipher/issues/411
+					connection.execute("PRAGMA cipher_memory_security = OFF;", new Object[]{}, null);
+				}
+			}
+			,
+			false);
+		this.identityStore = identityStore;
+	}
+
+	@Override
+	public void onCreate(SQLiteDatabase sqLiteDatabase) {
+		sqLiteDatabase.execSQL("CREATE TABLE `threema_nonce` (`nonce` BLOB PRIMARY KEY)");
+	}
+
+	@Override
+	public void onUpgrade(SQLiteDatabase sqLiteDatabase, int i, int i1) {
+		// no special upgrade handling
+	}
+
+	public void executeNull() throws SQLiteException {
+		try {
+			getWritableDatabase().rawQuery("SELECT NULL").close();
+		} catch (Exception e) {
+			logger.error("Unable to execute initial query", e);
+		}
+	}
+
+	@Override
+	public boolean exists(@NonNull byte[] nonce) {
+		boolean hasRecord = false;
+		Cursor c = this.getReadableDatabase()
+				.rawQuery("SELECT COUNT(*) FROM `threema_nonce` WHERE `nonce` = x'"
+								+ Utils.byteArrayToHexString(nonce)
+								+ "' OR `nonce` = x'"
+								+ Utils.byteArrayToHexString(this.hashNonce(nonce))
+								+ "'", null);
+		if (c != null) {
+			if (c.moveToFirst()) {
+				hasRecord = c.getInt(0) > 0;
+			}
+			c.close();
+		}
+		return hasRecord;
+	}
+
+	@Override
+	public boolean store(@NonNull byte[] nonce) {
+		ContentValues c = new ContentValues();
+		c.put("nonce", this.hashNonce(nonce));
+
+		try {
+			return this.getWritableDatabase()
+					.insertOrThrow("threema_nonce", null, c) >= 1;
+		} catch (SQLException x) {
+			//ignore exception
+			logger.error("Exception", x);
+		}
+
+		return false;
+	}
+
+	public long getCount() {
+		long size = 0;
+		Cursor c = this.getReadableDatabase().rawQuery("SELECT COUNT(*) FROM `threema_nonce`", null);
+		if (c != null) {
+			if (c.moveToFirst()) {
+				size = c.getLong(0);
+			}
+			c.close();
+		}
+		return size;
+	}
+
+	/**
+	 * Get all the hashed nonces that are available in their hex string representation.
+	 * See {@link Utils#byteArrayToHexString(byte[])} for more information about their
+	 * representation.
+	 *
+	 * @return a list of the hashed nonces in their hex string representation.
+	 */
+	public @NonNull List<String> getAllHashedNonces() {
+		List<String> nonces = new LinkedList<>();
+		Cursor c = this.getReadableDatabase().rawQuery("SELECT `nonce` FROM `threema_nonce`", null);
+		if (c != null) {
+			if (c.moveToFirst()) {
+				int columnIndex = c.getColumnIndex("nonce");
+				do {
+					nonces.add(Utils.byteArrayToHexString(c.getBlob(columnIndex)));
+				} while (c.moveToNext());
+			}
+			c.close();
+		}
+
+		return nonces;
+	}
+
+	/**
+	 * Insert hashed nonces to the database.
+	 *
+	 * @param hashedNonces the hashed nonces
+	 * @return true if all nonces have been inserted successfully, false otherwise
+	 */
+	public boolean insertHashedNonces(@NonNull String[] hashedNonces) {
+		boolean success = true;
+		SQLiteDatabase database = getWritableDatabase();
+		for (String hashedNonce : hashedNonces) {
+			ContentValues values = new ContentValues();
+			values.put("nonce", Utils.hexStringToByteArray(hashedNonce));
+			try {
+				long row = database.insertOrThrow("threema_nonce", null, values);
+				if (row < 0) {
+					logger.warn("Could not insert a nonce into the nonce database");
+					success = false;
+				}
+			} catch (SQLException e) {
+				logger.error("Could not insert a nonce into the nonce database", e);
+				success = false;
+			}
+		}
+
+		return success;
+	}
+
+	private byte[] hashNonce(byte[] nonce) {
+		// Hash nonce with HMAC-SHA256 using the identity as the key if available.
+		// This serves to make it impossible to correlate the nonce DBs of users to determine whether they have been communicating. */
+		String identity = identityStore.getIdentity();
+		if (identity == null) {
+			return nonce;
+		}
+
+		try {
+			Mac mobileNoMac = Mac.getInstance("HmacSHA256");
+			mobileNoMac.init(new SecretKeySpec(identity.getBytes(), "HmacSHA256"));
+			return mobileNoMac.doFinal(nonce);
+		} catch (NoSuchAlgorithmException | InvalidKeyException e) {
+			throw new RuntimeException(e);
+		}
+	}
+}
diff --git a/app/src/main/java/ch/threema/storage/DatabaseServiceNew.java b/app/src/main/java/ch/threema/storage/DatabaseServiceNew.java
index 56a1ebf3..425c1b14 100644
--- a/app/src/main/java/ch/threema/storage/DatabaseServiceNew.java
+++ b/app/src/main/java/ch/threema/storage/DatabaseServiceNew.java
@@ -22,24 +22,18 @@
 package ch.threema.storage;
 
 import android.content.Context;
-import android.text.format.DateUtils;
+import android.database.sqlite.SQLiteException;
 import android.widget.Toast;
 
-import androidx.annotation.MainThread;
+import androidx.annotation.NonNull;
 
-import net.sqlcipher.database.SQLiteDatabase;
-import net.sqlcipher.database.SQLiteDatabaseHook;
-import net.sqlcipher.database.SQLiteException;
-import net.sqlcipher.database.SQLiteOpenHelper;
+import net.zetetic.database.sqlcipher.SQLiteConnection;
+import net.zetetic.database.sqlcipher.SQLiteDatabase;
+import net.zetetic.database.sqlcipher.SQLiteDatabaseHook;
+import net.zetetic.database.sqlcipher.SQLiteOpenHelper;
 
 import org.slf4j.Logger;
 
-import java.io.File;
-import java.io.IOException;
-
-import androidx.annotation.NonNull;
-import ch.threema.app.exceptions.DatabaseMigrationFailedException;
-import ch.threema.app.exceptions.DatabaseMigrationLockedException;
 import ch.threema.app.services.UpdateSystemService;
 import ch.threema.app.services.systemupdate.SystemUpdateToVersion10;
 import ch.threema.app.services.systemupdate.SystemUpdateToVersion11;
@@ -110,8 +104,10 @@ import ch.threema.app.services.systemupdate.SystemUpdateToVersion79;
 import ch.threema.app.services.systemupdate.SystemUpdateToVersion8;
 import ch.threema.app.services.systemupdate.SystemUpdateToVersion80;
 import ch.threema.app.services.systemupdate.SystemUpdateToVersion81;
+import ch.threema.app.services.systemupdate.SystemUpdateToVersion82;
+import ch.threema.app.services.systemupdate.SystemUpdateToVersion83;
+import ch.threema.app.services.systemupdate.SystemUpdateToVersion84;
 import ch.threema.app.services.systemupdate.SystemUpdateToVersion9;
-import ch.threema.app.utils.FileUtil;
 import ch.threema.app.utils.RuntimeUtil;
 import ch.threema.app.utils.TestUtil;
 import ch.threema.base.utils.LoggingUtil;
@@ -142,13 +138,11 @@ import ch.threema.storage.factories.WebClientSessionModelFactory;
 public class DatabaseServiceNew extends SQLiteOpenHelper {
 	private static final Logger logger = LoggingUtil.getThreemaLogger("DatabaseServiceNew");
 
-	public static final String DATABASE_NAME = "threema.db";
 	public static final String DATABASE_NAME_V4 = "threema4.db";
 	public static final String DATABASE_BACKUP_EXT = ".backup";
-	private static final int DATABASE_VERSION = SystemUpdateToVersion81.VERSION;
+	private static final int DATABASE_VERSION = SystemUpdateToVersion84.VERSION;
 
 	private final Context context;
-	private final String key;
 	private final UpdateSystemService updateSystemService;
 
 	private ContactModelFactory contactModelFactory;
@@ -176,78 +170,51 @@ public class DatabaseServiceNew extends SQLiteOpenHelper {
 
 	public DatabaseServiceNew(final Context context,
 	                          final String databaseKey,
-	                          UpdateSystemService updateSystemService,
-	                          int sqlcipherVersion) {
+	                          UpdateSystemService updateSystemService) {
 		super(
-				context,
-				sqlcipherVersion == 4 ? DATABASE_NAME_V4 : DATABASE_NAME,
-				null,
-				DATABASE_VERSION,
-				new SQLiteDatabaseHook() {
-					@Override
-					public void preKey(SQLiteDatabase sqLiteDatabase) {
-						if (sqlcipherVersion == 4) {
-							sqLiteDatabase.rawExecSQL("PRAGMA cipher_default_kdf_iter = 1;");
-						} else {
-							sqLiteDatabase.rawExecSQL(
-								"PRAGMA cipher_default_page_size = 1024;" +
-								"PRAGMA cipher_default_kdf_iter = 4000;" +
-								"PRAGMA cipher_default_hmac_algorithm = HMAC_SHA1;" +
-								"PRAGMA cipher_default_kdf_algorithm = PBKDF2_HMAC_SHA1;");
+			context,
+			DATABASE_NAME_V4,
+			databaseKey,
+			null,
+			DATABASE_VERSION,
+			0,
+			sqLiteDatabase -> {
+					logger.error("Database corrupted");
+					RuntimeUtil.runOnUiThread(() -> {
+						if (context != null) {
+							Toast.makeText(context, "Database corrupted. Please save all data!", Toast.LENGTH_LONG).show();
 						}
-					}
+					});
 
-					@Override
-					public void postKey(SQLiteDatabase sqLiteDatabase) {
-						if (sqlcipherVersion == 4) {
-							sqLiteDatabase.rawExecSQL("PRAGMA kdf_iter = 1;");
-							// turn off memory wiping for now due to https://github.com/sqlcipher/android-database-sqlcipher/issues/411
-							sqLiteDatabase.rawExecSQL("PRAGMA cipher_memory_security = OFF;");
-						} else {
-							sqLiteDatabase.rawExecSQL(
-								"PRAGMA cipher_page_size = 1024;" +
-								"PRAGMA kdf_iter = 4000;" +
-								"PRAGMA cipher_hmac_algorithm = HMAC_SHA1;" +
-								"PRAGMA cipher_kdf_algorithm = PBKDF2_HMAC_SHA1;");
+					// close database
+					if (sqLiteDatabase.isOpen()) {
+						try {
+							sqLiteDatabase.close();
+						} catch (Exception e) {
+							logger.error("Exception while closing database", e);
 						}
 					}
+					System.exit(2);
+			},
+			new SQLiteDatabaseHook() {
+				@Override
+				public void preKey(SQLiteConnection connection) {
+					connection.execute("PRAGMA cipher_default_kdf_iter = 1;", new Object[]{}, null);
 				}
-				,
-			sqLiteDatabase -> {
-				logger.error("Database corrupted");
-				RuntimeUtil.runOnUiThread(() -> {
-					if (context != null) {
-						Toast.makeText(context, "Database corrupted. Please save all data!", Toast.LENGTH_LONG).show();
-					}
-				});
-
-				// close database
-				if (sqLiteDatabase.isOpen()) {
-					try {
-						sqLiteDatabase.close();
-					} catch (Exception e) {
-						logger.error("Exception while closing database", e);
-					}
+
+				@Override
+				public void postKey(SQLiteConnection connection) {
+					connection.execute("PRAGMA kdf_iter = 1;", new Object[]{}, null);
 				}
-				System.exit(2);
 			}
+			,
+			true
 		);
 
 		logger.info("instantiated");
 
 		this.updateSystemService = updateSystemService;
 		this.context = context;
-
-		SQLiteDatabase.loadLibs(context);
-
-		this.key = databaseKey;
-	}
-
-	public synchronized SQLiteDatabase getWritableDatabase() throws SQLiteException {
-		return super.getWritableDatabase(this.key);
-	}
-	public synchronized SQLiteDatabase getReadableDatabase()  {
-		return super.getReadableDatabase(this.key);
 	}
 
 	@Override
@@ -703,180 +670,22 @@ public class DatabaseServiceNew extends SQLiteOpenHelper {
 		if (oldVersion < SystemUpdateToVersion81.VERSION) {
 			this.updateSystemService.addUpdate(new SystemUpdateToVersion81(sqLiteDatabase));
 		}
-	}
-
-	public void executeNull() throws SQLiteException {
-		this.getWritableDatabase().rawExecSQL("SELECT NULL");
-	}
-
-	@MainThread
-	public static synchronized void tryMigrateToV4(Context context, final String databaseKey) throws DatabaseMigrationFailedException, DatabaseMigrationLockedException  {
-		File oldDatabaseFile = context.getDatabasePath(DATABASE_NAME);
-		File newDatabaseFile = context.getDatabasePath(DATABASE_NAME_V4);
-		final boolean[] migrateSuccess = {false};
-
-		logger.info("check if v4 database migration is necessary");
-
-		if (oldDatabaseFile.exists()) {
-			File lockfile = new File(context.getFilesDir(), ".dbv4-lock");
-			if (lockfile.exists()) {
-				long lastModified = lockfile.lastModified();
-				long now = System.currentTimeMillis();
-
-				if ((now - lastModified) > (5 * DateUtils.MINUTE_IN_MILLIS)) {
-					FileUtil.deleteFileOrWarn(lockfile, "Lockfile", logger);
-					if (newDatabaseFile.exists()) {
-						FileUtil.deleteFileOrWarn(newDatabaseFile, "New Database File", logger);
-					}
-				} else {
-					logger.info("Lockfile exists...exiting");
-					throw new DatabaseMigrationLockedException();
-				}
-			}
-
-			try {
-				FileUtil.createNewFileOrLog(lockfile, logger);
-			} catch (IOException e) {
-				logger.error("IOException when creating lockfile", e);
-			}
-
-			if (!newDatabaseFile.exists()) {
-				logger.info("Database migration to v4 required");
-
-				long usableSpace = oldDatabaseFile.getUsableSpace();
-				long fileSize = oldDatabaseFile.length();
-
-				if (usableSpace < (fileSize * 2)) {
-					FileUtil.deleteFileOrWarn(lockfile, "Lockfile", logger);
-					throw new DatabaseMigrationFailedException("Not enough space left on device");
-				}
-
-				Thread migrateThread = new Thread(new Runnable() {
-					@Override
-					public void run() {
-
-						try {
-							// migrate
-							SQLiteDatabase.loadLibs(context);
-							SQLiteDatabaseHook hook = new SQLiteDatabaseHook() {
-								@Override
-								public void preKey(SQLiteDatabase sqLiteDatabase) {}
-
-								@Override
-								public void postKey(SQLiteDatabase sqLiteDatabase) {
-									// old settings
-									sqLiteDatabase.rawExecSQL(
-											"PRAGMA cipher_page_size = 1024;" +
-													"PRAGMA kdf_iter = 4000;" +
-													"PRAGMA cipher_hmac_algorithm = HMAC_SHA1;" +
-													"PRAGMA cipher_kdf_algorithm = PBKDF2_HMAC_SHA1;");
-								}
-							};
-
-							final int databaseVersion;
-							try (SQLiteDatabase database = SQLiteDatabase.openOrCreateDatabase(oldDatabaseFile.getAbsolutePath(), databaseKey, null, hook)) {
-								if (database.isOpen()) {
-									databaseVersion = database.getVersion();
-									logger.info("Original database version: {}", databaseVersion);
-
-									database.rawExecSQL(
-										"PRAGMA key = '" + databaseKey + "';" +
-											"PRAGMA cipher_page_size = 1024;" +
-											"PRAGMA kdf_iter = 4000;" +
-											"PRAGMA cipher_hmac_algorithm = HMAC_SHA1;" +
-											"PRAGMA cipher_kdf_algorithm = PBKDF2_HMAC_SHA1;" +
-											"ATTACH DATABASE '" + newDatabaseFile.getAbsolutePath() + "' AS threema4 KEY '" + databaseKey + "';" +
-											"PRAGMA threema4.kdf_iter = 1;" +
-											"PRAGMA threema4.cipher_memory_security = OFF;" +
-											"SELECT sqlcipher_export('threema4');" +
-											"PRAGMA threema4.user_version = " + databaseVersion + ";" +
-											"DETACH DATABASE threema4;");
-									database.close();
-
-									logger.info("Database successfully migrated");
-
-									if (checkNewDatabase(newDatabaseFile, databaseKey, databaseVersion)) {
-										migrateSuccess[0] = true;
-									}
-								}
-							}
-						} catch (Exception e) {
-							logger.info("Database migration FAILED");
-							logger.error("Exception while migrating", e);
-							FileUtil.deleteFileOrWarn(newDatabaseFile, "New Database File", logger);
-						}
-					}
-				});
-
-				migrateThread.start();
-				try {
-					migrateThread.join();
-				} catch (InterruptedException e) {
-					logger.error("InterruptedException while waiting for migrateThread", e);
-					migrateSuccess[0] = false;
-				}
-
-				if (migrateSuccess[0]) {
-					Toast.makeText(context, "Database successfully migrated", Toast.LENGTH_LONG).show();
-					logger.info("Migration finished");
-				} else {
-					logger.info("Migration failed");
-					FileUtil.deleteFileOrWarn(newDatabaseFile, "New Database File", logger);
-					FileUtil.deleteFileOrWarn(lockfile, "New Database File", logger);
-					throw new DatabaseMigrationFailedException();
-				}
-			} else {
-				try {
-					SQLiteDatabase.loadLibs(context);
-
-					if (checkNewDatabase(newDatabaseFile, databaseKey, DATABASE_VERSION)) {
-						logger.info("Delete old format database");
-						FileUtil.deleteFileOrWarn(oldDatabaseFile, "Old Database File", logger);
-					} else {
-						throw new Exception();
-					}
-				} catch (Exception e) {
-					logger.info("Database checking FAILED");
-					FileUtil.deleteFileOrWarn(newDatabaseFile, "New Database File", logger);
-					FileUtil.deleteFileOrWarn(lockfile, "Lockfile", logger);
-					throw new DatabaseMigrationFailedException();
-				}
-			}
-			FileUtil.deleteFileOrWarn(lockfile, "Lockfile", logger);
-		} else {
-			logger.info("No old database file found. No migration necessary");
-			logger.info("New database file exists = {}", newDatabaseFile.exists());
+		if (oldVersion < SystemUpdateToVersion82.VERSION) {
+			this.updateSystemService.addUpdate(new SystemUpdateToVersion82(sqLiteDatabase));
+		}
+		if (oldVersion < SystemUpdateToVersion83.VERSION) {
+			this.updateSystemService.addUpdate(new SystemUpdateToVersion83(sqLiteDatabase));
+		}
+		if (oldVersion < SystemUpdateToVersion84.VERSION) {
+			this.updateSystemService.addUpdate(new SystemUpdateToVersion84(sqLiteDatabase));
 		}
 	}
 
-	private static boolean checkNewDatabase(File newDatabaseFile, String databaseKey, int databaseVersion) {
-		// test new database
-
-		try (SQLiteDatabase newDatabase = SQLiteDatabase.openDatabase(newDatabaseFile.getAbsolutePath(), databaseKey, null, 0, new SQLiteDatabaseHook() {
-			@Override
-			public void preKey(SQLiteDatabase sqLiteDatabase) {
-				sqLiteDatabase.rawExecSQL("PRAGMA cipher_default_kdf_iter = 1;");
-			}
-
-			@Override
-			public void postKey(SQLiteDatabase sqLiteDatabase) {
-				sqLiteDatabase.rawExecSQL(
-					"PRAGMA kdf_iter = 1;" +
-						"PRAGMA cipher_memory_security = OFF;");
-			}
-		})) {
-			if (newDatabase.isOpen()) {
-				if (newDatabase.getVersion() == databaseVersion) {
-					newDatabase.rawExecSQL("SELECT NULL;");
-					logger.info("New database successfully checked. Version set to {}", databaseVersion);
-					return true;
-				} else {
-					logger.info("Database version mismatch. old = {} new = {}", databaseVersion, newDatabase.getVersion());
-				}
-			} else {
-				logger.info("Could not open new database");
-			}
+	public void executeNull() throws SQLiteException {
+		try {
+			getWritableDatabase().rawQuery("SELECT NULL").close();
+		} catch (Exception e) {
+			logger.error("Unable to execute initial query", e);
 		}
-		return false;
 	}
 }
diff --git a/app/src/main/java/ch/threema/storage/DatabaseUtil.java b/app/src/main/java/ch/threema/storage/DatabaseUtil.java
index 8aebedda..ea7ca1ae 100644
--- a/app/src/main/java/ch/threema/storage/DatabaseUtil.java
+++ b/app/src/main/java/ch/threema/storage/DatabaseUtil.java
@@ -22,7 +22,7 @@
 package ch.threema.storage;
 
 
-import net.sqlcipher.Cursor;
+import android.database.Cursor;
 
 import java.util.Date;
 import java.util.List;
diff --git a/app/src/main/java/ch/threema/storage/NonceDatabaseBlobService.java b/app/src/main/java/ch/threema/storage/NonceDatabaseBlobService.java
deleted file mode 100644
index cc1a3295..00000000
--- a/app/src/main/java/ch/threema/storage/NonceDatabaseBlobService.java
+++ /dev/null
@@ -1,261 +0,0 @@
-/*  _____ _
- * |_   _| |_  _ _ ___ ___ _ __  __ _
- *   | | | ' \| '_/ -_) -_) '  \/ _` |_
- *   |_| |_||_|_| \___\___|_|_|_\__,_(_)
- *
- * Threema for Android
- * Copyright (c) 2017-2023 Threema GmbH
- *
- * This program is free software: you can redistribute it and/or modify
- * it under the terms of the GNU Affero General Public License, version 3,
- * as published by the Free Software Foundation.
- *
- * This program is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
- * GNU Affero General Public License for more details.
- *
- * You should have received a copy of the GNU Affero General Public License
- * along with this program. If not, see <https://www.gnu.org/licenses/>.
- */
-
-package ch.threema.storage;
-
-import android.content.ContentValues;
-import android.content.Context;
-import android.widget.Toast;
-
-import net.sqlcipher.Cursor;
-import net.sqlcipher.SQLException;
-import net.sqlcipher.database.SQLiteDatabase;
-import net.sqlcipher.database.SQLiteDatabaseHook;
-import net.sqlcipher.database.SQLiteOpenHelper;
-
-import org.slf4j.Logger;
-
-import java.io.File;
-import java.security.InvalidKeyException;
-import java.security.NoSuchAlgorithmException;
-
-import javax.crypto.Mac;
-import javax.crypto.spec.SecretKeySpec;
-
-import ch.threema.app.exceptions.DatabaseMigrationFailedException;
-import ch.threema.app.utils.FileUtil;
-import ch.threema.base.utils.LoggingUtil;
-import ch.threema.domain.stores.IdentityStoreInterface;
-import ch.threema.base.crypto.NonceStoreInterface;
-import ch.threema.base.utils.Utils;
-import ch.threema.localcrypto.MasterKey;
-import ch.threema.localcrypto.MasterKeyLockedException;
-
-public class NonceDatabaseBlobService extends SQLiteOpenHelper
-	implements NonceStoreInterface  {
-	private static final Logger logger = LoggingUtil.getThreemaLogger("NonceDatabaseBlobService");
-
-	public static final String DATABASE_NAME = "threema-nonce-blob.db";
-	public static final String DATABASE_NAME_V4 = "threema-nonce-blob4.db";
-	private static final int DATABASE_VERSION = 1;
-	private final String key;
-	private final IdentityStoreInterface identityStore;
-
-	public NonceDatabaseBlobService(final Context context, final MasterKey masterKey, final int nonceSqlCipherVersion, IdentityStoreInterface identityStore) throws MasterKeyLockedException {
-		super(context,
-			nonceSqlCipherVersion == 4 ? DATABASE_NAME_V4 : DATABASE_NAME,
-			null,
-			DATABASE_VERSION,
-			new SQLiteDatabaseHook() {
-			@Override
-			public void preKey(SQLiteDatabase sqLiteDatabase) {
-				if (nonceSqlCipherVersion == 3) {
-					sqLiteDatabase.rawExecSQL(
-						"PRAGMA cipher_default_page_size = 1024;" +
-						"PRAGMA cipher_default_kdf_iter = 4000;" +
-						"PRAGMA cipher_default_hmac_algorithm = HMAC_SHA1;" +
-						"PRAGMA cipher_default_kdf_algorithm = PBKDF2_HMAC_SHA1;");
-				}
-			}
-
-			@Override
-			public void postKey(SQLiteDatabase sqLiteDatabase) {
-				if (nonceSqlCipherVersion == 4) {
-					// turn off memory wiping for now due to https://github.com/sqlcipher/android-database-sqlcipher/issues/411
-					sqLiteDatabase.rawExecSQL("PRAGMA cipher_memory_security = OFF;");
-				} else {
-					sqLiteDatabase.rawExecSQL(
-						"PRAGMA cipher_page_size = 1024;" +
-						"PRAGMA kdf_iter = 4000;" +
-						"PRAGMA cipher_hmac_algorithm = HMAC_SHA1;" +
-						"PRAGMA cipher_kdf_algorithm = PBKDF2_HMAC_SHA1;");
-				}
-			}
-		});
-		this.key = nonceSqlCipherVersion == 3 ? "x\"" + Utils.byteArrayToHexString(masterKey.getKey()) + "\"" : "";
-		this.identityStore = identityStore;
-	}
-
-	public synchronized SQLiteDatabase getWritableDatabase()  {
-		return super.getWritableDatabase(this.key);
-	}
-	public synchronized SQLiteDatabase getReadableDatabase()  {
-		return super.getReadableDatabase(this.key);
-	}
-
-	@Override
-	public void onCreate(SQLiteDatabase sqLiteDatabase) {
-		sqLiteDatabase.execSQL("CREATE TABLE `threema_nonce` (`nonce` BLOB PRIMARY KEY)");
-	}
-
-	@Override
-	public void onUpgrade(SQLiteDatabase sqLiteDatabase, int i, int i1) {
-
-	}
-
-	@Override
-	public boolean exists(byte[] nonce) {
-		boolean hasRecord = false;
-		Cursor c = this.getReadableDatabase()
-				.rawQuery("SELECT COUNT(*) FROM `threema_nonce` WHERE `nonce` = x'"
-								+ Utils.byteArrayToHexString(nonce)
-								+ "' OR `nonce` = x'"
-								+ Utils.byteArrayToHexString(this.hashNonce(nonce))
-								+ "'", null);
-		if (c != null) {
-			if(c.moveToFirst()) {
-				hasRecord = c.getInt(0) > 0;
-			}
-			c.close();
-		}
-		return hasRecord;
-	}
-
-	@Override
-	public boolean store(byte[] nonce) {
-		ContentValues c = new ContentValues();
-		c.put("nonce", this.hashNonce(nonce));
-
-		try {
-			return this.getWritableDatabase()
-					.insertOrThrow("threema_nonce", null, c) >= 1;
-		} catch (SQLException x) {
-			//ignore exception
-			logger.error("Exception", x);
-		}
-
-		return false;
-	}
-
-	public long getCount() {
-		long size = 0;
-		Cursor c = this.getReadableDatabase().rawQuery("SELECT COUNT(*) FROM `threema_nonce`", null);
-		if (c != null) {
-			if (c.moveToFirst()) {
-				size = c.getLong(0);
-			}
-			c.close();
-		}
-		return size;
-	}
-
-	public static void tryMigrateToV4(Context context, final String databaseKey) throws DatabaseMigrationFailedException {
-		File oldDatabaseFile = context.getDatabasePath(DATABASE_NAME);
-		File newDatabaseFile = context.getDatabasePath(DATABASE_NAME_V4);
-
-		if (oldDatabaseFile.exists()) {
-			if (!newDatabaseFile.exists()) {
-				logger.debug("Nonce database migration to v4 required");
-
-				long usableSpace = oldDatabaseFile.getUsableSpace();
-				long fileSize = oldDatabaseFile.length();
-
-				if (usableSpace < (fileSize * 2)) {
-					throw new DatabaseMigrationFailedException("Not enough space left on device");
-				}
-
-				try {
-					// migrate
-					SQLiteDatabaseHook hook = new SQLiteDatabaseHook() {
-						@Override
-						public void preKey(SQLiteDatabase sqLiteDatabase) {
-						}
-
-						@Override
-						public void postKey(SQLiteDatabase sqLiteDatabase) {
-							// old settings
-							sqLiteDatabase.rawExecSQL(
-								"PRAGMA cipher_page_size = 1024;" +
-									"PRAGMA kdf_iter = 4000;" +
-									"PRAGMA cipher_hmac_algorithm = HMAC_SHA1;" +
-									"PRAGMA cipher_kdf_algorithm = PBKDF2_HMAC_SHA1;");
-						}
-					};
-
-					try (SQLiteDatabase database = SQLiteDatabase.openOrCreateDatabase(oldDatabaseFile.getAbsolutePath(), databaseKey, null, hook)) {
-						if (database.isOpen()) {
-							database.rawExecSQL(
-								"PRAGMA key = '" + databaseKey + "';" +
-									"PRAGMA cipher_page_size = 1024;" +
-									"PRAGMA kdf_iter = 4000;" +
-									"PRAGMA cipher_hmac_algorithm = HMAC_SHA1;" +
-									"PRAGMA cipher_kdf_algorithm = PBKDF2_HMAC_SHA1;" +
-									"ATTACH DATABASE '" + newDatabaseFile.getAbsolutePath() + "' AS nonce4 KEY '';" +
-									"PRAGMA nonce4.cipher_memory_security = OFF;" +
-									"SELECT sqlcipher_export('nonce4');" +
-									"PRAGMA nonce4.user_version = " + DATABASE_VERSION + ";" +
-									"DETACH DATABASE nonce4;");
-							database.close();
-
-							logger.debug("Nonce database successfully migrated");
-
-							// test new database
-							try (SQLiteDatabase newDatabase = SQLiteDatabase.openDatabase(newDatabaseFile.getAbsolutePath(), "", null, 0, new SQLiteDatabaseHook() {
-								@Override
-								public void preKey(SQLiteDatabase sqLiteDatabase) {
-								}
-
-								@Override
-								public void postKey(SQLiteDatabase sqLiteDatabase) {
-									sqLiteDatabase.rawExecSQL("PRAGMA cipher_memory_security = OFF;");
-								}
-							})) {
-								if (newDatabase.isOpen()) {
-									newDatabase.rawExecSQL("SELECT NULL;");
-									logger.debug("New nonce database successfully checked");
-									Toast.makeText(context, "Database successfully migrated", Toast.LENGTH_LONG).show();
-								} else {
-									logger.debug("Could not open new nonce database");
-									throw new DatabaseMigrationFailedException();
-								}
-							}
-						}
-					}
-				} catch (Exception e) {
-					logger.debug("Nonce database migration FAILED");
-					logger.error("Exception", e);
-					FileUtil.deleteFileOrWarn(newDatabaseFile, "New Nonce Database File", logger);
-					throw new DatabaseMigrationFailedException();
-				}
-			} else {
-				logger.debug("Delete old format nonce database");
-				FileUtil.deleteFileOrWarn(oldDatabaseFile, "Old Nonce Database File", logger);
-			}
-		}
-	}
-
-	private byte[] hashNonce(byte[] nonce) {
-		// Hash nonce with HMAC-SHA256 using the identity as the key if available.
-		// This serves to make it impossible to correlate the nonce DBs of users to determine whether they have been communicating. */
-		String identity = identityStore.getIdentity();
-		if (identity == null) {
-			return nonce;
-		}
-
-		try {
-			Mac mobileNoMac = Mac.getInstance("HmacSHA256");
-			mobileNoMac.init(new SecretKeySpec(identity.getBytes(), "HmacSHA256"));
-			return mobileNoMac.doFinal(nonce);
-		} catch (NoSuchAlgorithmException | InvalidKeyException e) {
-			throw new RuntimeException(e);
-		}
-	}
-}
diff --git a/app/src/main/java/ch/threema/storage/QueryBuilder.java b/app/src/main/java/ch/threema/storage/QueryBuilder.java
index b4571d48..9c46b9cd 100644
--- a/app/src/main/java/ch/threema/storage/QueryBuilder.java
+++ b/app/src/main/java/ch/threema/storage/QueryBuilder.java
@@ -21,7 +21,7 @@
 
 package ch.threema.storage;
 
-import net.sqlcipher.database.SQLiteQueryBuilder;
+import net.zetetic.database.sqlcipher.SQLiteQueryBuilder;
 
 public class QueryBuilder extends SQLiteQueryBuilder {
 	private int whereCount = 0;
diff --git a/app/src/main/java/ch/threema/storage/SQLDHSessionStore.java b/app/src/main/java/ch/threema/storage/SQLDHSessionStore.java
index 34ecb710..d9406b8f 100644
--- a/app/src/main/java/ch/threema/storage/SQLDHSessionStore.java
+++ b/app/src/main/java/ch/threema/storage/SQLDHSessionStore.java
@@ -23,98 +23,174 @@ package ch.threema.storage;
 
 import android.content.ContentValues;
 import android.content.Context;
+import android.database.Cursor;
+import android.database.SQLException;
 
-import net.sqlcipher.Cursor;
-import net.sqlcipher.SQLException;
-import net.sqlcipher.database.SQLiteDatabase;
-import net.sqlcipher.database.SQLiteDatabaseHook;
-import net.sqlcipher.database.SQLiteException;
-import net.sqlcipher.database.SQLiteOpenHelper;
-
+import androidx.annotation.NonNull;
 import androidx.annotation.Nullable;
+
+import net.zetetic.database.sqlcipher.SQLiteConnection;
+import net.zetetic.database.sqlcipher.SQLiteDatabase;
+import net.zetetic.database.sqlcipher.SQLiteDatabaseHook;
+import net.zetetic.database.sqlcipher.SQLiteOpenHelper;
+
+import org.slf4j.Logger;
+
+import ch.threema.app.services.UpdateSystemService;
+import ch.threema.app.services.systemupdate.FSDatabaseUpgradeToVersion2;
+import ch.threema.app.services.systemupdate.FSDatabaseUpgradeToVersion3;
+import ch.threema.base.utils.LoggingUtil;
 import ch.threema.base.utils.Utils;
 import ch.threema.domain.fs.DHSession;
 import ch.threema.domain.fs.DHSessionId;
 import ch.threema.domain.fs.KDFRatchet;
 import ch.threema.domain.stores.DHSessionStoreException;
 import ch.threema.domain.stores.DHSessionStoreInterface;
+import ch.threema.protobuf.csp.e2e.fs.Version;
 
 public class SQLDHSessionStore extends SQLiteOpenHelper implements DHSessionStoreInterface {
+	private static final Logger logger = LoggingUtil.getThreemaLogger("SQLDHSessionStore");
+
 	public static final String DATABASE_NAME = "threema-fs.db";
-	private static final int DATABASE_VERSION = 1;
+	private static final int DATABASE_VERSION = FSDatabaseUpgradeToVersion3.VERSION;
 	private static final String SESSION_TABLE = "session";
 
-	private final byte[] key;
+	public static final String COLUMN_MY_IDENTITY = "myIdentity";
+	public static final String COLUMN_PEER_IDENTITY = "peerIdentity";
+	public static final String COLUMN_SESSION_ID = "sessionId";
+	// Note: Should be named `myCurrentVersion_4dh` but it's too late now
+	public static final String COLUMN_MY_CURRENT_VERSION_4_DH = "negotiatedVersion";
+	public static final String COLUMN_MY_CURRENT_CHAIN_KEY_2_DH = "myCurrentChainKey_2dh";
+	public static final String COLUMN_MY_COUNTER_2_DH = "myCounter_2dh";
+	public static final String COLUMN_MY_CURRENT_CHAIN_KEY_4_DH = "myCurrentChainKey_4dh";
+	public static final String COLUMN_MY_COUNTER_4_DH = "myCounter_4dh";
+	public static final String COLUMN_PEER_CURRENT_VERSION_4_DH = "peerCurrentVersion_4dh";
+	public static final String COLUMN_PEER_CURRENT_CHAIN_KEY_2_DH = "peerCurrentChainKey_2dh";
+	public static final String COLUMN_PEER_COUNTER_2_DH = "peerCounter_2dh";
+	public static final String COLUMN_PEER_CURRENT_CHAIN_KEY_4_DH = "peerCurrentChainKey_4dh";
+	public static final String COLUMN_PEER_COUNTER_4_DH = "peerCounter_4dh";
+	public static final String COLUMN_MY_EPHEMERAL_PRIVATE_KEY = "myEphemeralPrivateKey";
+	public static final String COLUMN_MY_EPHEMERAL_PUBLIC_KEY = "myEphemeralPublicKey";
+
+	@NonNull
+	private final UpdateSystemService updateSystemService;
 
-	public SQLDHSessionStore(final Context context, final byte[] databaseKey, final String dbName) {
-		super(context, dbName,
+	@Nullable
+	private DHSessionStoreErrorHandler errorHandler = null;
+
+	public SQLDHSessionStore(
+		final Context context,
+		final byte[] databaseKey,
+		final String dbName,
+		@NonNull UpdateSystemService updateSystemService
+	) {
+		super(
+			context,
+			dbName,
+			databaseKey,
 			null,
 			DATABASE_VERSION,
+			0,
+			null,
 			new SQLiteDatabaseHook() {
 				@Override
-				public void preKey(SQLiteDatabase sqLiteDatabase) {
-					sqLiteDatabase.rawExecSQL("PRAGMA cipher_default_kdf_iter = 1;");
+				public void preKey(SQLiteConnection connection) {
+					connection.execute("PRAGMA cipher_default_kdf_iter = 1;", new Object[]{}, null);
 				}
 
 				@Override
-				public void postKey(SQLiteDatabase sqLiteDatabase) {
-					sqLiteDatabase.rawExecSQL("PRAGMA kdf_iter = 1;");
+				public void postKey(SQLiteConnection connection) {
+					connection.execute("PRAGMA kdf_iter = 1;", new Object[]{}, null);
 				}
-			});
+			},
+			false);
 
-		this.key = databaseKey;
+		this.updateSystemService = updateSystemService;
 
-		SQLiteDatabase.loadLibs(context);
+		System.loadLibrary("sqlcipher");
 	}
 
-	public SQLDHSessionStore(final Context context, final byte[] databaseKey) {
-		this(context, databaseKey, DATABASE_NAME);
+	public SQLDHSessionStore(
+		final Context context,
+		final byte[] databaseKey,
+		@NonNull final UpdateSystemService updateSystemService
+	) {
+		this(context, databaseKey, DATABASE_NAME, updateSystemService);
 	}
 
 	@Override
 	public void onCreate(SQLiteDatabase db) {
 		db.execSQL("CREATE TABLE `" + SESSION_TABLE + "` (" +
-			"`myIdentity` TEXT, " +
-			"`peerIdentity` TEXT, " +
-			"`sessionId` BLOB, " +
-			"`myCurrentChainKey_2dh` BLOB, " +
-			"`myCounter_2dh` INTEGER, " +
-			"`myCurrentChainKey_4dh` BLOB, " +
-			"`myCounter_4dh` INTEGER, " +
-			"`peerCurrentChainKey_2dh` BLOB, " +
-			"`peerCounter_2dh` INTEGER, " +
-			"`peerCurrentChainKey_4dh` BLOB, " +
-			"`peerCounter_4dh` INTEGER, " +
-			"`myEphemeralPrivateKey` BLOB, " +
-			"`myEphemeralPublicKey` BLOB, " +
-			"PRIMARY KEY(myIdentity, peerIdentity, sessionId)" +
+			"`" + COLUMN_MY_IDENTITY + "` TEXT, " +
+			"`" + COLUMN_PEER_IDENTITY + "` TEXT, " +
+			"`" + COLUMN_SESSION_ID + "` BLOB, " +
+			"`" + COLUMN_MY_CURRENT_VERSION_4_DH + "` INTEGER, " +
+			"`" + COLUMN_MY_CURRENT_CHAIN_KEY_2_DH + "` BLOB, " +
+			"`" + COLUMN_MY_COUNTER_2_DH + "` INTEGER, " +
+			"`" + COLUMN_MY_CURRENT_CHAIN_KEY_4_DH + "` BLOB, " +
+			"`" + COLUMN_MY_COUNTER_4_DH + "` INTEGER, " +
+			"`" + COLUMN_PEER_CURRENT_VERSION_4_DH + "` INTEGER, " +
+			"`" + COLUMN_PEER_CURRENT_CHAIN_KEY_2_DH + "` BLOB, " +
+			"`" + COLUMN_PEER_COUNTER_2_DH + "` INTEGER, " +
+			"`" + COLUMN_PEER_CURRENT_CHAIN_KEY_4_DH + "` BLOB, " +
+			"`" + COLUMN_PEER_COUNTER_4_DH + "` INTEGER, " +
+			"`" + COLUMN_MY_EPHEMERAL_PRIVATE_KEY + "` BLOB, " +
+			"`" + COLUMN_MY_EPHEMERAL_PUBLIC_KEY + "` BLOB, " +
+			"PRIMARY KEY(" + COLUMN_MY_IDENTITY + ", " + COLUMN_PEER_IDENTITY + ", " + COLUMN_SESSION_ID + ")" +
 			")");
 	}
 
 	@Override
 	public void onUpgrade(SQLiteDatabase db, int oldVersion, int newVersion) {
-		// No upgrades at this time
+		logger.info("Upgrading DH session database from {} to {}", oldVersion, newVersion);
+
+		if (oldVersion < FSDatabaseUpgradeToVersion2.VERSION) {
+			updateSystemService.addUpdate(new FSDatabaseUpgradeToVersion2(db));
+		}
+		if (oldVersion < FSDatabaseUpgradeToVersion3.VERSION) {
+			updateSystemService.addUpdate(new FSDatabaseUpgradeToVersion3(db));
+		}
+	}
+
+	@Override
+	public void setDHSessionStoreErrorHandler(@NonNull DHSessionStoreErrorHandler errorHandler) {
+		this.errorHandler = errorHandler;
 	}
 
 	@Nullable
 	@Override
 	public DHSession getDHSession(String myIdentity, String peerIdentity, @Nullable DHSessionId sessionId) throws DHSessionStoreException {
-		try {
-			String selection = "myIdentity=? and peerIdentity=?";
+		String selection = COLUMN_MY_IDENTITY + "=? and " + COLUMN_PEER_IDENTITY + "=?";
 
-			if (sessionId != null) {
-				selection += " and sessionId=x'" + Utils.byteArrayToHexString(sessionId.get()) + "'";
-			}
+		if (sessionId != null) {
+			selection += " and " + COLUMN_SESSION_ID + "=x'" + Utils.byteArrayToHexString(sessionId.get()) + "'";
+		}
 
-			Cursor cursor = this.getReadableDatabase().query(
-				SESSION_TABLE,
-				new String[]{"sessionId", "myIdentity", "peerIdentity", "myEphemeralPrivateKey", "myEphemeralPublicKey", "myCurrentChainKey_2dh", "myCounter_2dh", "myCurrentChainKey_4dh", "myCounter_4dh", "peerCurrentChainKey_2dh", "peerCounter_2dh", "peerCurrentChainKey_4dh", "peerCounter_4dh"},
-				selection,
-				new String[] { myIdentity, peerIdentity },
-				null,
-				null,
-				null
-			);
+		try (Cursor cursor = this.getReadableDatabase().query(
+			SESSION_TABLE,
+			new String[]{
+				COLUMN_SESSION_ID,
+				COLUMN_MY_IDENTITY,
+				COLUMN_PEER_IDENTITY,
+				COLUMN_MY_CURRENT_VERSION_4_DH,
+				COLUMN_MY_EPHEMERAL_PRIVATE_KEY,
+				COLUMN_MY_EPHEMERAL_PUBLIC_KEY,
+				COLUMN_MY_CURRENT_CHAIN_KEY_2_DH,
+				COLUMN_MY_COUNTER_2_DH,
+				COLUMN_MY_CURRENT_CHAIN_KEY_4_DH,
+				COLUMN_MY_COUNTER_4_DH,
+				COLUMN_PEER_CURRENT_VERSION_4_DH,
+				COLUMN_PEER_CURRENT_CHAIN_KEY_2_DH,
+				COLUMN_PEER_COUNTER_2_DH,
+				COLUMN_PEER_CURRENT_CHAIN_KEY_4_DH,
+				COLUMN_PEER_COUNTER_4_DH
+			},
+			selection,
+			new String[] { myIdentity, peerIdentity },
+			null,
+			null,
+			null
+		)) {
 
 			if (cursor != null) {
 				if (cursor.moveToFirst()) {
@@ -131,18 +207,33 @@ public class SQLDHSessionStore extends SQLiteOpenHelper implements DHSessionStor
 	@Nullable
 	@Override
 	public DHSession getBestDHSession(String myIdentity, String peerIdentity) throws DHSessionStoreException {
-		try {
-			String selection = "myIdentity=? and peerIdentity=?";
-
-			Cursor cursor = this.getReadableDatabase().query(
-				SESSION_TABLE,
-				new String[]{"sessionId", "myIdentity", "peerIdentity", "myEphemeralPrivateKey", "myEphemeralPublicKey", "myCurrentChainKey_2dh", "myCounter_2dh", "myCurrentChainKey_4dh", "myCounter_4dh", "peerCurrentChainKey_2dh", "peerCounter_2dh", "peerCurrentChainKey_4dh", "peerCounter_4dh"},
-				selection,
-				new String[] { myIdentity, peerIdentity },
-				null,
-				null,
-				"iif(myCurrentChainKey_4dh is not null, 1, 0) desc, sessionId asc"
-			);
+		String selection = COLUMN_MY_IDENTITY + "=? and " + COLUMN_PEER_IDENTITY + "=?";
+
+		try (Cursor cursor = this.getReadableDatabase().query(
+			SESSION_TABLE,
+			new String[]{
+				COLUMN_SESSION_ID,
+				COLUMN_MY_IDENTITY,
+				COLUMN_PEER_IDENTITY,
+				COLUMN_MY_CURRENT_VERSION_4_DH,
+				COLUMN_MY_EPHEMERAL_PRIVATE_KEY,
+				COLUMN_MY_EPHEMERAL_PUBLIC_KEY,
+				COLUMN_MY_CURRENT_CHAIN_KEY_2_DH,
+				COLUMN_MY_COUNTER_2_DH,
+				COLUMN_MY_CURRENT_CHAIN_KEY_4_DH,
+				COLUMN_MY_COUNTER_4_DH,
+				COLUMN_PEER_CURRENT_VERSION_4_DH,
+				COLUMN_PEER_CURRENT_CHAIN_KEY_2_DH,
+				COLUMN_PEER_COUNTER_2_DH,
+				COLUMN_PEER_CURRENT_CHAIN_KEY_4_DH,
+				COLUMN_PEER_COUNTER_4_DH
+			},
+			selection,
+			new String[] { myIdentity, peerIdentity },
+			null,
+			null,
+			"iif(" + COLUMN_MY_CURRENT_CHAIN_KEY_4_DH + " is not null, 1, 0) desc, " + COLUMN_SESSION_ID + " asc"
+		)) {
 
 			if (cursor != null) {
 				if (cursor.moveToFirst()) {
@@ -158,20 +249,24 @@ public class SQLDHSessionStore extends SQLiteOpenHelper implements DHSessionStor
 
 	@Override
 	public void storeDHSession(DHSession session) throws DHSessionStoreException {
+		DHSession.DHVersions current4DHVersions = session.getCurrent4DHVersions();
+
 		ContentValues cv = new ContentValues();
-		cv.put("myIdentity", session.getMyIdentity());
-		cv.put("peerIdentity", session.getPeerIdentity());
-		cv.put("sessionId", session.getId().get());
+		cv.put(COLUMN_MY_IDENTITY, session.getMyIdentity());
+		cv.put(COLUMN_PEER_IDENTITY, session.getPeerIdentity());
+		cv.put(COLUMN_SESSION_ID, session.getId().get());
+		cv.put(COLUMN_MY_CURRENT_VERSION_4_DH, current4DHVersions == null ? null : current4DHVersions.local.getNumber());
+		cv.put(COLUMN_PEER_CURRENT_VERSION_4_DH, current4DHVersions == null ? null : current4DHVersions.remote.getNumber());
 
-		addRatchetValues(cv, "my", "_2dh", session.getMyRatchet2DH());
-		addRatchetValues(cv, "my", "_4dh", session.getMyRatchet4DH());
-		addRatchetValues(cv, "peer", "_2dh", session.getPeerRatchet2DH());
-		addRatchetValues(cv, "peer", "_4dh", session.getPeerRatchet4DH());
+		addMy2DHRatchet(cv, session.getMyRatchet2DH());
+		addMy4DHRatchet(cv, session.getMyRatchet4DH());
+		addPeer2DHRatchet(cv, session.getPeerRatchet2DH());
+		addPeer4DHRatchet(cv, session.getPeerRatchet4DH());
 
 		if (session.getMyEphemeralPrivateKey() != null) {
-			cv.put("myEphemeralPrivateKey", session.getMyEphemeralPrivateKey());
+			cv.put(COLUMN_MY_EPHEMERAL_PRIVATE_KEY, session.getMyEphemeralPrivateKey());
 		}
-		cv.put("myEphemeralPublicKey", session.getMyEphemeralPublicKey());
+		cv.put(COLUMN_MY_EPHEMERAL_PUBLIC_KEY, session.getMyEphemeralPublicKey());
 
 		try {
 			this.getWritableDatabase()
@@ -185,7 +280,7 @@ public class SQLDHSessionStore extends SQLiteOpenHelper implements DHSessionStor
 	public boolean deleteDHSession(String myIdentity, String peerIdentity, DHSessionId sessionId) throws DHSessionStoreException {
 		try {
 			int numDeleted = this.getWritableDatabase().delete(SESSION_TABLE,
-				"myIdentity=? and peerIdentity=? and sessionId=x'" + Utils.byteArrayToHexString(sessionId.get()) + "'",
+				COLUMN_MY_IDENTITY + "=? and " + COLUMN_PEER_IDENTITY + "=? and " + COLUMN_SESSION_ID + "=x'" + Utils.byteArrayToHexString(sessionId.get()) + "'",
 				new String[] { myIdentity, peerIdentity });
 			return numDeleted > 0;
 		} catch (SQLException e) {
@@ -196,7 +291,7 @@ public class SQLDHSessionStore extends SQLiteOpenHelper implements DHSessionStor
 	@Override
 	public int deleteAllDHSessions(String myIdentity, String peerIdentity) throws DHSessionStoreException {
 		try {
-			return this.getWritableDatabase().delete(SESSION_TABLE, "myIdentity=? and peerIdentity=?", new Object[] {
+			return this.getWritableDatabase().delete(SESSION_TABLE, COLUMN_MY_IDENTITY + "=? and " + COLUMN_PEER_IDENTITY + "=?", new Object[] {
 				myIdentity, peerIdentity
 			});
 		} catch (SQLException e) {
@@ -207,9 +302,9 @@ public class SQLDHSessionStore extends SQLiteOpenHelper implements DHSessionStor
 	@Override
 	public int deleteAllSessionsExcept(String myIdentity, String peerIdentity, DHSessionId excludeSessionId, boolean fourDhOnly) throws DHSessionStoreException {
 		try {
-			String whereClause = "myIdentity=? and peerIdentity=? and sessionId!=x'" + Utils.byteArrayToHexString(excludeSessionId.get()) + "'";
+			String whereClause = COLUMN_MY_IDENTITY + "=? and " + COLUMN_PEER_IDENTITY + "=? and " + COLUMN_SESSION_ID + "!=x'" + Utils.byteArrayToHexString(excludeSessionId.get()) + "'";
 			if (fourDhOnly) {
-				whereClause += " and myCurrentChainKey_4dh is not null";
+				whereClause += " and " + COLUMN_MY_CURRENT_CHAIN_KEY_4_DH + " is not null";
 			}
 
 			return this.getWritableDatabase().delete(SESSION_TABLE, whereClause, new Object[]{
@@ -220,51 +315,111 @@ public class SQLDHSessionStore extends SQLiteOpenHelper implements DHSessionStor
 		}
 	}
 
+	@Override
 	public void executeNull() {
-		getWritableDatabase().rawQuery("SELECT NULL", null).close();
+		try {
+			getWritableDatabase().rawQuery("SELECT NULL").close();
+		} catch (Exception e) {
+			logger.error("Unable to execute initial query", e);
+		}
 	}
 
 	private DHSession dhSessionFromCursor(Cursor cursor) throws DHSessionStoreException {
-		try (cursor) {
+		DHSessionId sessionId = null;
+		String peerIdentity = null;
+		try {
+			DHSession.DHVersions current4DHVersions = DHSession.DHVersions.restored(
+				Version.forNumber(cursor.getInt(cursor.getColumnIndexOrThrow(COLUMN_MY_CURRENT_VERSION_4_DH))),
+				Version.forNumber(cursor.getInt(cursor.getColumnIndexOrThrow(COLUMN_PEER_CURRENT_VERSION_4_DH)))
+			);
+			sessionId = new DHSessionId(cursor.getBlob(cursor.getColumnIndexOrThrow(COLUMN_SESSION_ID)));
+			peerIdentity = cursor.getString(cursor.getColumnIndexOrThrow(COLUMN_PEER_IDENTITY));
 			return new DHSession(
-				new DHSessionId(cursor.getBlob(0)),
-				cursor.getString(1),
-				cursor.getString(2),
-				cursor.getBlob(3),
-				cursor.getBlob(4),
-				ratchetFromCursor(cursor, 5, 6),
-				ratchetFromCursor(cursor, 7, 8),
-				ratchetFromCursor(cursor, 9, 10),
-				ratchetFromCursor(cursor, 11, 12)
+				sessionId,
+				cursor.getString(cursor.getColumnIndexOrThrow(COLUMN_MY_IDENTITY)),
+				peerIdentity,
+				cursor.getBlob(cursor.getColumnIndexOrThrow(COLUMN_MY_EPHEMERAL_PRIVATE_KEY)),
+				cursor.getBlob(cursor.getColumnIndexOrThrow(COLUMN_MY_EPHEMERAL_PUBLIC_KEY)),
+				current4DHVersions,
+				getMy2DHRatchetFromCursor(cursor),
+				getMy4DHRatchetFromCursor(cursor),
+				getPeer2DHRatchetFromCursor(cursor),
+				getPeer4DHRatchetFromCursor(cursor)
 			);
 		} catch (DHSessionId.InvalidDHSessionIdException e) {
 			throw new DHSessionStoreException("Invalid session ID", e);
+		} catch (IllegalArgumentException e) {
+			// Illegal argument exception is thrown if the column index is invalid
+			throw new DHSessionStoreException("Could not load session from store", e);
+		} catch (DHSession.IllegalDHSessionStateException e) {
+			logger.error("Could not load DH session", e);
+			if (errorHandler != null && sessionId != null && peerIdentity != null) {
+				errorHandler.onInvalidDHSessionState(peerIdentity, sessionId);
+			}
+			return null;
 		}
 	}
 
-	private void addRatchetValues(ContentValues cv, String prefix, String suffix, @Nullable KDFRatchet ratchet) {
-		if (ratchet != null) {
-			cv.put(prefix + "CurrentChainKey" + suffix, ratchet.getCurrentChainKey());
-			cv.put(prefix + "Counter" + suffix, ratchet.getCounter());
-		} else {
-			cv.put(prefix + "CurrentChainKey" + suffix, (Byte)null);
-			cv.put(prefix + "Counter" + suffix, (Byte)null);
-		}
+	@Nullable
+	private KDFRatchet getMy2DHRatchetFromCursor(@NonNull Cursor cursor) {
+		int keyColumn = cursor.getColumnIndexOrThrow(COLUMN_MY_CURRENT_CHAIN_KEY_2_DH);
+		int counterColumn = cursor.getColumnIndexOrThrow(COLUMN_MY_COUNTER_2_DH);
+		return ratchetFromCursor(cursor, keyColumn, counterColumn);
 	}
 
+	@Nullable
+	private KDFRatchet getMy4DHRatchetFromCursor(@NonNull Cursor cursor) {
+		int keyColumn = cursor.getColumnIndexOrThrow(COLUMN_MY_CURRENT_CHAIN_KEY_4_DH);
+		int counterColumn = cursor.getColumnIndexOrThrow(COLUMN_MY_COUNTER_4_DH);
+		return ratchetFromCursor(cursor, keyColumn, counterColumn);
+	}
 
-	private synchronized SQLiteDatabase getWritableDatabase() throws SQLiteException {
-		return super.getWritableDatabase(this.key);
+	@Nullable
+	private KDFRatchet getPeer2DHRatchetFromCursor(@NonNull Cursor cursor) {
+		int keyColumn = cursor.getColumnIndexOrThrow(COLUMN_PEER_CURRENT_CHAIN_KEY_2_DH);
+		int counterColumn = cursor.getColumnIndexOrThrow(COLUMN_PEER_COUNTER_2_DH);
+		return ratchetFromCursor(cursor, keyColumn, counterColumn);
 	}
 
-	private synchronized SQLiteDatabase getReadableDatabase()  {
-		return super.getReadableDatabase(this.key);
+	@Nullable
+	private KDFRatchet getPeer4DHRatchetFromCursor(@NonNull Cursor cursor) {
+		int keyColumn = cursor.getColumnIndexOrThrow(COLUMN_PEER_CURRENT_CHAIN_KEY_4_DH);
+		int counterColumn = cursor.getColumnIndexOrThrow(COLUMN_PEER_COUNTER_4_DH);
+		return ratchetFromCursor(cursor, keyColumn, counterColumn);
 	}
 
-	private KDFRatchet ratchetFromCursor(Cursor cursor, int keyColumn, int counterColumn) {
+	@Nullable
+	private KDFRatchet ratchetFromCursor(@NonNull Cursor cursor, int keyColumn, int counterColumn) {
 		if (cursor.getBlob(keyColumn) != null) {
 			return new KDFRatchet(cursor.getInt(counterColumn), cursor.getBlob(keyColumn));
 		}
 		return null;
 	}
+
+	private void addMy2DHRatchet(@NonNull ContentValues cv, @Nullable KDFRatchet ratchet) {
+		addRatchetValues(cv, COLUMN_MY_CURRENT_CHAIN_KEY_2_DH, COLUMN_MY_COUNTER_2_DH, ratchet);
+	}
+
+	private void addMy4DHRatchet(@NonNull ContentValues cv, @Nullable KDFRatchet ratchet) {
+		addRatchetValues(cv, COLUMN_MY_CURRENT_CHAIN_KEY_4_DH, COLUMN_MY_COUNTER_4_DH, ratchet);
+	}
+
+	private void addPeer2DHRatchet(@NonNull ContentValues cv, @Nullable KDFRatchet ratchet) {
+		addRatchetValues(cv, COLUMN_PEER_CURRENT_CHAIN_KEY_2_DH, COLUMN_PEER_COUNTER_2_DH, ratchet);
+	}
+
+	private void addPeer4DHRatchet(@NonNull ContentValues cv, @Nullable KDFRatchet ratchet) {
+		addRatchetValues(cv, COLUMN_PEER_CURRENT_CHAIN_KEY_4_DH, COLUMN_PEER_COUNTER_4_DH, ratchet);
+	}
+
+	private void addRatchetValues(@NonNull ContentValues cv, @NonNull String keyColumn, @NonNull String counterColumn, @Nullable KDFRatchet ratchet) {
+		byte[] chainKey = null;
+		Long counter = null;
+		if (ratchet != null) {
+			chainKey = ratchet.getCurrentChainKey();
+			counter = ratchet.getCounter();
+		}
+		cv.put(keyColumn, chainKey);
+		cv.put(counterColumn, counter);
+	}
 }
diff --git a/app/src/main/java/ch/threema/storage/factories/AbstractMessageModelFactory.java b/app/src/main/java/ch/threema/storage/factories/AbstractMessageModelFactory.java
index 4abf7769..53696a33 100644
--- a/app/src/main/java/ch/threema/storage/factories/AbstractMessageModelFactory.java
+++ b/app/src/main/java/ch/threema/storage/factories/AbstractMessageModelFactory.java
@@ -23,6 +23,8 @@ package ch.threema.storage.factories;
 
 import android.content.ContentValues;
 
+import androidx.annotation.Nullable;
+
 import org.slf4j.Logger;
 
 import java.util.ArrayList;
@@ -134,7 +136,7 @@ abstract class AbstractMessageModelFactory extends ModelFactory {
 		return contentValues;
 	}
 
-	void appendFilter(QueryBuilder queryBuilder, MessageService.MessageFilter filter, List<String> placeholders) {
+	void appendFilter(QueryBuilder queryBuilder, @Nullable MessageService.MessageFilter filter, List<String> placeholders) {
 		if(filter != null) {
 			if(!filter.withStatusMessages()) {
 				queryBuilder.appendWhere(AbstractMessageModel.COLUMN_IS_STATUS_MESSAGE + "=0");
@@ -170,7 +172,7 @@ abstract class AbstractMessageModelFactory extends ModelFactory {
 		}
 	}
 
-	<T> void postFilter(List<T> input, MessageService.MessageFilter filter) {
+	<T> void postFilter(List<T> input, @Nullable MessageService.MessageFilter filter) {
 		if(filter != null && filter.onlyDownloaded()) {
 			Iterator<T> i = input.iterator();
 			while (i.hasNext()) {
@@ -194,7 +196,7 @@ abstract class AbstractMessageModelFactory extends ModelFactory {
 		}
 	}
 
-	String limitFilter(MessageService.MessageFilter filter) {
+	String limitFilter(@Nullable MessageService.MessageFilter filter) {
 		if (filter != null && filter.getPageSize() > 0) {
 			return "" + filter.getPageSize();
 		}
diff --git a/app/src/main/java/ch/threema/storage/factories/BallotChoiceModelFactory.java b/app/src/main/java/ch/threema/storage/factories/BallotChoiceModelFactory.java
index 3fc3b5db..c8830c90 100644
--- a/app/src/main/java/ch/threema/storage/factories/BallotChoiceModelFactory.java
+++ b/app/src/main/java/ch/threema/storage/factories/BallotChoiceModelFactory.java
@@ -23,7 +23,7 @@ package ch.threema.storage.factories;
 
 import android.content.ContentValues;
 
-import net.sqlcipher.Cursor;
+import android.database.Cursor;
 
 import java.util.ArrayList;
 import java.util.List;
@@ -261,7 +261,7 @@ public class BallotChoiceModelFactory extends ModelFactory {
 	public String[] getStatements() {
 		return new String[]{
 				"CREATE TABLE `ballot_choice` (`id` INTEGER PRIMARY KEY AUTOINCREMENT , `ballotId` INTEGER , `apiBallotChoiceId` INTEGER , `type` VARCHAR , `name` VARCHAR , `voteCount` INTEGER , `order` INTEGER NOT NULL , `createdAt` BIGINT , `modifiedAt` BIGINT )",
-				
+
 				//indices
 				"CREATE UNIQUE INDEX `apiBallotChoiceId` ON `ballot_choice` ( `ballotId`, `apiBallotChoiceId` )"
 		};
diff --git a/app/src/main/java/ch/threema/storage/factories/BallotModelFactory.java b/app/src/main/java/ch/threema/storage/factories/BallotModelFactory.java
index d16d0842..92f6002d 100644
--- a/app/src/main/java/ch/threema/storage/factories/BallotModelFactory.java
+++ b/app/src/main/java/ch/threema/storage/factories/BallotModelFactory.java
@@ -23,7 +23,7 @@ package ch.threema.storage.factories;
 
 import android.content.ContentValues;
 
-import net.sqlcipher.Cursor;
+import android.database.Cursor;
 
 import java.util.ArrayList;
 import java.util.List;
diff --git a/app/src/main/java/ch/threema/storage/factories/BallotVoteModelFactory.java b/app/src/main/java/ch/threema/storage/factories/BallotVoteModelFactory.java
index 4d0f2515..5d140d54 100644
--- a/app/src/main/java/ch/threema/storage/factories/BallotVoteModelFactory.java
+++ b/app/src/main/java/ch/threema/storage/factories/BallotVoteModelFactory.java
@@ -23,8 +23,9 @@ package ch.threema.storage.factories;
 
 import android.content.ContentValues;
 
-import net.sqlcipher.Cursor;
-import net.sqlcipher.DatabaseUtils;
+import android.database.Cursor;
+
+import net.zetetic.database.DatabaseUtils;
 
 import java.util.ArrayList;
 import java.util.List;
diff --git a/app/src/main/java/ch/threema/storage/factories/ContactModelFactory.java b/app/src/main/java/ch/threema/storage/factories/ContactModelFactory.java
index 31175650..b4668248 100644
--- a/app/src/main/java/ch/threema/storage/factories/ContactModelFactory.java
+++ b/app/src/main/java/ch/threema/storage/factories/ContactModelFactory.java
@@ -22,12 +22,11 @@
 package ch.threema.storage.factories;
 
 import android.content.ContentValues;
+import android.database.Cursor;
+import android.database.sqlite.SQLiteException;
 
 import androidx.annotation.Nullable;
 
-import net.sqlcipher.Cursor;
-import net.sqlcipher.database.SQLiteException;
-
 import org.slf4j.Logger;
 
 import java.util.ArrayList;
@@ -140,13 +139,12 @@ public class ContactModelFactory extends ModelFactory {
 					.setIdColorIndex(cursorFactory.getInt(ContactModel.COLUMN_ID_COLOR_INDEX))
 					.setIsHidden(cursorFactory.getInt(ContactModel.COLUMN_IS_HIDDEN) == 1)
 					.setAvatarExpires(cursorFactory.getDate(ContactModel.COLUMN_AVATAR_EXPIRES))
-					.setProfilePicSentDate(cursorFactory.getDate(ContactModel.COLUMN_PROFILE_PIC_SENT_DATE))
+					.setProfilePicBlobID(cursorFactory.getBlob(ContactModel.COLUMN_PROFILE_PIC_BLOB_ID))
 					.setDateCreated(cursorFactory.getDate(ContactModel.COLUMN_DATE_CREATED))
 					.setIsRestored(cursorFactory.getInt(ContactModel.COLUMN_IS_RESTORED) == 1)
 					.setArchived(cursorFactory.getInt(ContactModel.COLUMN_IS_ARCHIVED) == 1)
 					.setReadReceipts(cursorFactory.getInt(ContactModel.COLUMN_READ_RECEIPTS))
 					.setTypingIndicators(cursorFactory.getInt(ContactModel.COLUMN_TYPING_INDICATORS))
-					.setForwardSecurityEnabled(cursorFactory.getBoolean(ContactModel.COLUMN_FORWARD_SECURITY_ENABLED))
 					.setForwardSecurityState(cursorFactory.getInt(ContactModel.COLUMN_FORWARD_SECURITY_STATE));
 
 				// Convert state to enum
@@ -228,9 +226,7 @@ public class ContactModelFactory extends ModelFactory {
 				: null);
 		contentValues.put(ContactModel.COLUMN_IS_WORK, contactModel.isWork());
 		contentValues.put(ContactModel.COLUMN_TYPE, contactModel.getIdentityType());
-		contentValues.put(ContactModel.COLUMN_PROFILE_PIC_SENT_DATE, contactModel.getProfilePicSentDate() != null ?
-				contactModel.getProfilePicSentDate().getTime()
-				: null);
+		contentValues.put(ContactModel.COLUMN_PROFILE_PIC_BLOB_ID, contactModel.getProfilePicBlobID());
 		contentValues.put(ContactModel.COLUMN_DATE_CREATED, contactModel.getDateCreated() != null ? contactModel.getDateCreated().getTime()
 				: null);
 		contentValues.put(ContactModel.COLUMN_IS_HIDDEN, contactModel.isHidden());
@@ -238,7 +234,6 @@ public class ContactModelFactory extends ModelFactory {
 		contentValues.put(ContactModel.COLUMN_IS_ARCHIVED, contactModel.isArchived());
 		contentValues.put(ContactModel.COLUMN_READ_RECEIPTS, contactModel.getReadReceipts());
 		contentValues.put(ContactModel.COLUMN_TYPING_INDICATORS, contactModel.getTypingIndicators());
-		contentValues.put(ContactModel.COLUMN_FORWARD_SECURITY_ENABLED, contactModel.isForwardSecurityEnabled());
 		contentValues.put(ContactModel.COLUMN_FORWARD_SECURITY_STATE, contactModel.getForwardSecurityState());
 
 		if (insert) {
@@ -285,14 +280,13 @@ public class ContactModelFactory extends ModelFactory {
 						"`" + ContactModel.COLUMN_AVATAR_EXPIRES + "` BIGINT," +
 						"`" + ContactModel.COLUMN_IS_WORK + "` TINYINT DEFAULT 0," +
 						"`" + ContactModel.COLUMN_TYPE + "` INT DEFAULT 0," +
-						"`" + ContactModel.COLUMN_PROFILE_PIC_SENT_DATE + "` BIGINT DEFAULT 0," +
+						"`" + ContactModel.COLUMN_PROFILE_PIC_BLOB_ID + "` BLOB DEFAULT NULL," +
 						"`" + ContactModel.COLUMN_DATE_CREATED + "` BIGINT DEFAULT 0," +
 						"`" + ContactModel.COLUMN_IS_HIDDEN + "` TINYINT DEFAULT 0," +
 						"`" + ContactModel.COLUMN_IS_RESTORED + "` TINYINT DEFAULT 0," +
 						"`" + ContactModel.COLUMN_IS_ARCHIVED + "` TINYINT DEFAULT 0," +
 						"`" + ContactModel.COLUMN_READ_RECEIPTS + "` TINYINT DEFAULT 0," +
 						"`" + ContactModel.COLUMN_TYPING_INDICATORS + "` TINYINT DEFAULT 0," +
-						"`" + ContactModel.COLUMN_FORWARD_SECURITY_ENABLED + "` TINYINT DEFAULT 0," +
 						"`" + ContactModel.COLUMN_FORWARD_SECURITY_STATE + "` TINYINT DEFAULT 0," +
 					"PRIMARY KEY (`" + ContactModel.COLUMN_IDENTITY + "`) );"
 		};
diff --git a/app/src/main/java/ch/threema/storage/factories/ConversationTagFactory.java b/app/src/main/java/ch/threema/storage/factories/ConversationTagFactory.java
index 7cef5387..add5fa60 100644
--- a/app/src/main/java/ch/threema/storage/factories/ConversationTagFactory.java
+++ b/app/src/main/java/ch/threema/storage/factories/ConversationTagFactory.java
@@ -23,7 +23,7 @@ package ch.threema.storage.factories;
 
 import android.content.ContentValues;
 
-import net.sqlcipher.Cursor;
+import android.database.Cursor;
 
 import org.slf4j.Logger;
 
diff --git a/app/src/main/java/ch/threema/storage/factories/DistributionListMemberModelFactory.java b/app/src/main/java/ch/threema/storage/factories/DistributionListMemberModelFactory.java
index 8c255e92..e56a469f 100644
--- a/app/src/main/java/ch/threema/storage/factories/DistributionListMemberModelFactory.java
+++ b/app/src/main/java/ch/threema/storage/factories/DistributionListMemberModelFactory.java
@@ -23,7 +23,7 @@ package ch.threema.storage.factories;
 
 import android.content.ContentValues;
 
-import net.sqlcipher.Cursor;
+import android.database.Cursor;
 
 import java.util.ArrayList;
 import java.util.List;
diff --git a/app/src/main/java/ch/threema/storage/factories/DistributionListMessageModelFactory.java b/app/src/main/java/ch/threema/storage/factories/DistributionListMessageModelFactory.java
index 259ef165..8e906e1a 100644
--- a/app/src/main/java/ch/threema/storage/factories/DistributionListMessageModelFactory.java
+++ b/app/src/main/java/ch/threema/storage/factories/DistributionListMessageModelFactory.java
@@ -23,7 +23,7 @@ package ch.threema.storage.factories;
 
 import android.content.ContentValues;
 
-import net.sqlcipher.Cursor;
+import android.database.Cursor;
 
 import org.slf4j.Logger;
 
@@ -64,14 +64,6 @@ public class DistributionListMessageModelFactory extends AbstractMessageModelFac
 				});
 	}
 
-	public DistributionListMessageModel getByApiMessageId(String apiMessageId) {
-		return getFirst(
-				DistributionListMessageModel.COLUMN_API_MESSAGE_ID + "=?",
-				new String[]{
-						apiMessageId
-				});
-	}
-
 	private List<DistributionListMessageModel> convertList(Cursor c) {
 
 		List<DistributionListMessageModel> result = new ArrayList<>();
diff --git a/app/src/main/java/ch/threema/storage/factories/DistributionListModelFactory.java b/app/src/main/java/ch/threema/storage/factories/DistributionListModelFactory.java
index 8875ae4d..f3f9b3d4 100644
--- a/app/src/main/java/ch/threema/storage/factories/DistributionListModelFactory.java
+++ b/app/src/main/java/ch/threema/storage/factories/DistributionListModelFactory.java
@@ -23,7 +23,7 @@ package ch.threema.storage.factories;
 
 import android.content.ContentValues;
 
-import net.sqlcipher.Cursor;
+import android.database.Cursor;
 
 import java.util.ArrayList;
 import java.util.List;
diff --git a/app/src/main/java/ch/threema/storage/factories/GroupBallotModelFactory.java b/app/src/main/java/ch/threema/storage/factories/GroupBallotModelFactory.java
index 110d1f19..1ba4254c 100644
--- a/app/src/main/java/ch/threema/storage/factories/GroupBallotModelFactory.java
+++ b/app/src/main/java/ch/threema/storage/factories/GroupBallotModelFactory.java
@@ -23,7 +23,7 @@ package ch.threema.storage.factories;
 
 import android.content.ContentValues;
 
-import net.sqlcipher.Cursor;
+import android.database.Cursor;
 
 import ch.threema.storage.CursorHelper;
 import ch.threema.storage.DatabaseServiceNew;
diff --git a/app/src/main/java/ch/threema/storage/factories/GroupCallModelFactory.java b/app/src/main/java/ch/threema/storage/factories/GroupCallModelFactory.java
index e03bb070..884e004d 100644
--- a/app/src/main/java/ch/threema/storage/factories/GroupCallModelFactory.java
+++ b/app/src/main/java/ch/threema/storage/factories/GroupCallModelFactory.java
@@ -22,24 +22,26 @@
 package ch.threema.storage.factories;
 
 import android.content.ContentValues;
+import android.database.Cursor;
+import android.database.sqlite.SQLiteException;
 
 import androidx.annotation.NonNull;
 import androidx.annotation.Nullable;
-import ch.threema.base.utils.LoggingUtil;
-import ch.threema.storage.CursorHelper;
-import ch.threema.storage.DatabaseServiceNew;
-import ch.threema.storage.models.GroupCallModel;
 
-import net.sqlcipher.Cursor;
-import net.sqlcipher.database.SQLiteDatabase;
-import net.sqlcipher.database.SQLiteException;
+import net.zetetic.database.sqlcipher.SQLiteDatabase;
 
 import org.slf4j.Logger;
 
 import java.util.ArrayList;
 import java.util.Collections;
+import java.util.Date;
 import java.util.List;
 
+import ch.threema.base.utils.LoggingUtil;
+import ch.threema.storage.CursorHelper;
+import ch.threema.storage.DatabaseServiceNew;
+import ch.threema.storage.models.GroupCallModel;
+
 public class GroupCallModelFactory extends ModelFactory {
 	private static final Logger logger = LoggingUtil.getThreemaLogger("GroupCallModelFactory");
 
@@ -56,7 +58,8 @@ public class GroupCallModelFactory extends ModelFactory {
 				"`" + GroupCallModel.COLUMN_SFU_BASE_URL + "` TEXT NOT NULL, " +
 				"`" + GroupCallModel.COLUMN_GCK + "` TEXT NOT NULL, " +
 				"`" + GroupCallModel.COLUMN_PROTOCOL_VERSION + "` INTEGER DEFAULT 0," +
-				"`" + GroupCallModel.COLUMN_STARTED_AT + "` BIGINT NOT NULL)"
+				"`" + GroupCallModel.COLUMN_STARTED_AT + "` BIGINT NOT NULL," +
+				"`" + GroupCallModel.COLUMN_PROCESSED_AT + "` BIGINT NOT NULL)"
 		};
 	}
 
@@ -68,7 +71,8 @@ public class GroupCallModelFactory extends ModelFactory {
 			GroupCallModel.COLUMN_SFU_BASE_URL,
 			GroupCallModel.COLUMN_GCK,
 			GroupCallModel.COLUMN_PROTOCOL_VERSION,
-			GroupCallModel.COLUMN_STARTED_AT
+			GroupCallModel.COLUMN_STARTED_AT,
+			GroupCallModel.COLUMN_PROCESSED_AT,
 		};
 		Cursor cursor = databaseService.getReadableDatabase()
 			.query(getTableName(), columns, null, null, null, null, null);
@@ -90,6 +94,7 @@ public class GroupCallModelFactory extends ModelFactory {
 		contentValues.put(GroupCallModel.COLUMN_GCK, call.getGck());
 		contentValues.put(GroupCallModel.COLUMN_PROTOCOL_VERSION, call.getProtocolVersion());
 		contentValues.put(GroupCallModel.COLUMN_STARTED_AT, call.getStartedAt());
+		contentValues.put(GroupCallModel.COLUMN_PROCESSED_AT, call.getProcessedAt());
 
 		try {
 			long id = databaseService.getWritableDatabase()
@@ -136,9 +141,17 @@ public class GroupCallModelFactory extends ModelFactory {
 			String baseUrl = cursorHelper.getString(GroupCallModel.COLUMN_SFU_BASE_URL);
 			String gck = cursorHelper.getString(GroupCallModel.COLUMN_GCK);
 			Long startedAt = cursorHelper.getLong(GroupCallModel.COLUMN_STARTED_AT);
+			Long processedAt = cursorHelper.getLong(GroupCallModel.COLUMN_PROCESSED_AT);
+			if (startedAt == null) {
+				startedAt = new Date().getTime();
+			}
+			if (processedAt == null) {
+				processedAt = new Date().getTime();
+			}
+
 			return protocolVersion == null || groupId == null || baseUrl == null || callId == null || gck == null
 				? null
-				: new GroupCallModel(protocolVersion, callId, groupId, baseUrl, gck, startedAt);
+				: new GroupCallModel(protocolVersion, callId, groupId, baseUrl, gck, startedAt, processedAt);
 		};
 		return new CursorHelper(cursor, columnIndexCache).current(converter);
 	}
diff --git a/app/src/main/java/ch/threema/storage/factories/GroupInviteModelFactory.java b/app/src/main/java/ch/threema/storage/factories/GroupInviteModelFactory.java
index 8920fefd..75bd905b 100644
--- a/app/src/main/java/ch/threema/storage/factories/GroupInviteModelFactory.java
+++ b/app/src/main/java/ch/threema/storage/factories/GroupInviteModelFactory.java
@@ -22,9 +22,11 @@
 package ch.threema.storage.factories;
 
 import android.content.ContentValues;
+import android.database.Cursor;
+import android.database.SQLException;
 
-import net.sqlcipher.Cursor;
-import net.sqlcipher.SQLException;
+import androidx.annotation.NonNull;
+import androidx.annotation.Nullable;
 
 import org.slf4j.Logger;
 
@@ -34,8 +36,6 @@ import java.util.Iterator;
 import java.util.List;
 import java.util.Objects;
 
-import androidx.annotation.NonNull;
-import androidx.annotation.Nullable;
 import ch.threema.base.Result;
 import ch.threema.base.utils.LoggingUtil;
 import ch.threema.domain.models.GroupId;
diff --git a/app/src/main/java/ch/threema/storage/factories/GroupMemberModelFactory.java b/app/src/main/java/ch/threema/storage/factories/GroupMemberModelFactory.java
index a04f2c06..7ffd5100 100644
--- a/app/src/main/java/ch/threema/storage/factories/GroupMemberModelFactory.java
+++ b/app/src/main/java/ch/threema/storage/factories/GroupMemberModelFactory.java
@@ -23,7 +23,7 @@ package ch.threema.storage.factories;
 
 import android.content.ContentValues;
 
-import net.sqlcipher.Cursor;
+import android.database.Cursor;
 
 import java.util.ArrayList;
 import java.util.HashMap;
diff --git a/app/src/main/java/ch/threema/storage/factories/GroupMessageModelFactory.java b/app/src/main/java/ch/threema/storage/factories/GroupMessageModelFactory.java
index 9012f36b..7b1d8ce1 100644
--- a/app/src/main/java/ch/threema/storage/factories/GroupMessageModelFactory.java
+++ b/app/src/main/java/ch/threema/storage/factories/GroupMessageModelFactory.java
@@ -25,7 +25,7 @@ import android.content.ContentValues;
 
 import androidx.annotation.NonNull;
 
-import net.sqlcipher.Cursor;
+import android.database.Cursor;
 
 import org.json.JSONException;
 import org.json.JSONObject;
@@ -81,22 +81,16 @@ public class GroupMessageModelFactory extends AbstractMessageModelFactory {
 			});
 	}
 
-	public GroupMessageModel getByApiMessageIdAndIsOutbox(MessageId apiMessageId, boolean isOutbox) {
+	public GroupMessageModel getByApiMessageIdAndIdentityAndIsOutbox(MessageId apiMessageId, @NonNull String recipientIdentity, boolean isOutbox) {
 		return getFirst(
-				GroupMessageModel.COLUMN_API_MESSAGE_ID + "=?" +
-						"AND " + GroupMessageModel.COLUMN_OUTBOX + "=?",
-				new String[]{
-						apiMessageId.toString(),
-						String.valueOf(isOutbox)
-				});
-	}
-
-	public GroupMessageModel getByApiMessageId(MessageId apiMessageId) {
-		return getFirst(
-				GroupMessageModel.COLUMN_API_MESSAGE_ID + "=?",
-				new String[]{
-						apiMessageId.toString(),
-				});
+			GroupMessageModel.COLUMN_API_MESSAGE_ID + "=?"
+				+ " AND " + GroupMessageModel.COLUMN_IDENTITY + "=?"
+				+ " AND " + GroupMessageModel.COLUMN_OUTBOX + "=?",
+			new String[]{
+				apiMessageId.toString(),
+				recipientIdentity,
+				String.valueOf(isOutbox)
+			});
 	}
 
 	public GroupMessageModel getById(int id) {
@@ -288,10 +282,8 @@ public class GroupMessageModelFactory extends AbstractMessageModelFactory {
 			);
 
 			if (cursor != null) {
-				try {
+				try (cursor) {
 					insert = !cursor.moveToNext();
-				} finally {
-					cursor.close();
 				}
 			}
 		}
diff --git a/app/src/main/java/ch/threema/storage/factories/GroupMessagePendingMessageIdModelFactory.java b/app/src/main/java/ch/threema/storage/factories/GroupMessagePendingMessageIdModelFactory.java
index 8df937f1..1fca2526 100644
--- a/app/src/main/java/ch/threema/storage/factories/GroupMessagePendingMessageIdModelFactory.java
+++ b/app/src/main/java/ch/threema/storage/factories/GroupMessagePendingMessageIdModelFactory.java
@@ -23,7 +23,7 @@ package ch.threema.storage.factories;
 
 import android.content.ContentValues;
 
-import net.sqlcipher.Cursor;
+import android.database.Cursor;
 
 import org.slf4j.Logger;
 
@@ -69,7 +69,7 @@ public class GroupMessagePendingMessageIdModelFactory extends ModelFactory {
 		ContentValues contentValues = buildContentValues(groupMessagePendingMessageIdModel);
 		this.databaseService.getWritableDatabase()
 				.insertOrThrow(this.getTableName(), null, contentValues);
-		logger.debug("created " + groupMessagePendingMessageIdModel.getApiMessageId());
+		logger.debug("created {}", groupMessagePendingMessageIdModel.getApiMessageId());
 		return true;
 	}
 
@@ -113,14 +113,11 @@ public class GroupMessagePendingMessageIdModelFactory extends ModelFactory {
 		);
 
 		if(cursor != null) {
-			try {
+			try (cursor) {
 				if (cursor.moveToFirst()) {
 					return convert(cursor);
 				}
 			}
-			finally {
-				cursor.close();
-			}
 		}
 
 		return null;
diff --git a/app/src/main/java/ch/threema/storage/factories/GroupModelFactory.java b/app/src/main/java/ch/threema/storage/factories/GroupModelFactory.java
index 799e743d..dac2483d 100644
--- a/app/src/main/java/ch/threema/storage/factories/GroupModelFactory.java
+++ b/app/src/main/java/ch/threema/storage/factories/GroupModelFactory.java
@@ -22,9 +22,8 @@
 package ch.threema.storage.factories;
 
 import android.content.ContentValues;
-
-import net.sqlcipher.Cursor;
-import net.sqlcipher.SQLException;
+import android.database.Cursor;
+import android.database.SQLException;
 
 import org.slf4j.Logger;
 
diff --git a/app/src/main/java/ch/threema/storage/factories/GroupRequestSyncLogModelFactory.java b/app/src/main/java/ch/threema/storage/factories/GroupRequestSyncLogModelFactory.java
index 147ffd5d..faedae80 100644
--- a/app/src/main/java/ch/threema/storage/factories/GroupRequestSyncLogModelFactory.java
+++ b/app/src/main/java/ch/threema/storage/factories/GroupRequestSyncLogModelFactory.java
@@ -23,7 +23,7 @@ package ch.threema.storage.factories;
 
 import android.content.ContentValues;
 
-import net.sqlcipher.Cursor;
+import android.database.Cursor;
 
 import ch.threema.storage.CursorHelper;
 import ch.threema.storage.DatabaseServiceNew;
diff --git a/app/src/main/java/ch/threema/storage/factories/IdentityBallotModelFactory.java b/app/src/main/java/ch/threema/storage/factories/IdentityBallotModelFactory.java
index 0e900321..2a2fb2cf 100644
--- a/app/src/main/java/ch/threema/storage/factories/IdentityBallotModelFactory.java
+++ b/app/src/main/java/ch/threema/storage/factories/IdentityBallotModelFactory.java
@@ -23,7 +23,7 @@ package ch.threema.storage.factories;
 
 import android.content.ContentValues;
 
-import net.sqlcipher.Cursor;
+import android.database.Cursor;
 
 import ch.threema.storage.CursorHelper;
 import ch.threema.storage.DatabaseServiceNew;
diff --git a/app/src/main/java/ch/threema/storage/factories/IncomingGroupJoinRequestModelFactory.java b/app/src/main/java/ch/threema/storage/factories/IncomingGroupJoinRequestModelFactory.java
index 75978be9..33672c2f 100644
--- a/app/src/main/java/ch/threema/storage/factories/IncomingGroupJoinRequestModelFactory.java
+++ b/app/src/main/java/ch/threema/storage/factories/IncomingGroupJoinRequestModelFactory.java
@@ -22,17 +22,17 @@
 package ch.threema.storage.factories;
 
 import android.content.ContentValues;
+import android.database.Cursor;
+import android.database.SQLException;
 
-import net.sqlcipher.Cursor;
-import net.sqlcipher.SQLException;
+import androidx.annotation.NonNull;
+import androidx.annotation.Nullable;
 
 import java.util.ArrayList;
 import java.util.Iterator;
 import java.util.List;
 import java.util.Objects;
 
-import androidx.annotation.NonNull;
-import androidx.annotation.Nullable;
 import ch.threema.base.Result;
 import ch.threema.domain.models.GroupId;
 import ch.threema.domain.protocol.csp.messages.group.GroupJoinRequestMessage;
diff --git a/app/src/main/java/ch/threema/storage/factories/MessageModelFactory.java b/app/src/main/java/ch/threema/storage/factories/MessageModelFactory.java
index c1c9f431..57ba6c57 100644
--- a/app/src/main/java/ch/threema/storage/factories/MessageModelFactory.java
+++ b/app/src/main/java/ch/threema/storage/factories/MessageModelFactory.java
@@ -23,7 +23,7 @@ package ch.threema.storage.factories;
 
 import android.content.ContentValues;
 
-import net.sqlcipher.Cursor;
+import android.database.Cursor;
 
 import java.util.ArrayList;
 import java.util.List;
@@ -66,23 +66,16 @@ public class MessageModelFactory extends AbstractMessageModelFactory {
 				});
 	}
 
-
-	public MessageModel getByApiMessageIdAndIsOutbox(MessageId apiMessageId, boolean isOutbox) {
-		return getFirst(
-				MessageModel.COLUMN_API_MESSAGE_ID + "=?" +
-						" AND " + MessageModel.COLUMN_OUTBOX + "=?",
-				new String[]{
-						apiMessageId.toString(),
-						isOutbox ? "1" : "0"
-				});
-	}
-
-	public MessageModel getByApiMessageId(MessageId apiMessageId) {
+	public MessageModel getByApiMessageIdAndIdentityAndIsOutbox(MessageId apiMessageId, @NonNull String recipientIdentity, boolean isOutbox) {
 		return getFirst(
-				GroupMessageModel.COLUMN_API_MESSAGE_ID + "=?",
-				new String[]{
-						apiMessageId.toString(),
-				});
+			MessageModel.COLUMN_API_MESSAGE_ID + "=?"
+				+ " AND " + MessageModel.COLUMN_IDENTITY + "=?"
+				+ " AND " + MessageModel.COLUMN_OUTBOX + "=?",
+			new String[]{
+				apiMessageId.toString(),
+				recipientIdentity,
+				isOutbox ? "1" : "0"
+			});
 	}
 
 	public MessageModel getById(int id) {
diff --git a/app/src/main/java/ch/threema/storage/factories/ModelFactory.java b/app/src/main/java/ch/threema/storage/factories/ModelFactory.java
index be9be5e4..c5981e29 100644
--- a/app/src/main/java/ch/threema/storage/factories/ModelFactory.java
+++ b/app/src/main/java/ch/threema/storage/factories/ModelFactory.java
@@ -21,8 +21,8 @@
 
 package ch.threema.storage.factories;
 
-import net.sqlcipher.DatabaseUtils;
-import net.sqlcipher.database.SQLiteDatabase;
+import net.zetetic.database.DatabaseUtils;
+import net.zetetic.database.sqlcipher.SQLiteDatabase;
 
 import org.slf4j.Logger;
 
diff --git a/app/src/main/java/ch/threema/storage/factories/OutgoingGroupJoinRequestModelFactory.java b/app/src/main/java/ch/threema/storage/factories/OutgoingGroupJoinRequestModelFactory.java
index 20d15075..2a370db2 100644
--- a/app/src/main/java/ch/threema/storage/factories/OutgoingGroupJoinRequestModelFactory.java
+++ b/app/src/main/java/ch/threema/storage/factories/OutgoingGroupJoinRequestModelFactory.java
@@ -22,9 +22,11 @@
 package ch.threema.storage.factories;
 
 import android.content.ContentValues;
+import android.database.Cursor;
+import android.database.SQLException;
 
-import net.sqlcipher.Cursor;
-import net.sqlcipher.SQLException;
+import androidx.annotation.NonNull;
+import androidx.annotation.Nullable;
 
 import java.util.ArrayList;
 import java.util.Date;
@@ -32,8 +34,6 @@ import java.util.Iterator;
 import java.util.List;
 import java.util.Objects;
 
-import androidx.annotation.NonNull;
-import androidx.annotation.Nullable;
 import ch.threema.base.Result;
 import ch.threema.domain.models.GroupId;
 import ch.threema.storage.CursorHelper;
diff --git a/app/src/main/java/ch/threema/storage/factories/WebClientSessionModelFactory.java b/app/src/main/java/ch/threema/storage/factories/WebClientSessionModelFactory.java
index c7739122..d476e00c 100644
--- a/app/src/main/java/ch/threema/storage/factories/WebClientSessionModelFactory.java
+++ b/app/src/main/java/ch/threema/storage/factories/WebClientSessionModelFactory.java
@@ -23,7 +23,7 @@ package ch.threema.storage.factories;
 
 import android.content.ContentValues;
 
-import net.sqlcipher.Cursor;
+import android.database.Cursor;
 
 import java.util.ArrayList;
 import java.util.Date;
diff --git a/app/src/main/java/ch/threema/storage/models/ContactModel.java b/app/src/main/java/ch/threema/storage/models/ContactModel.java
index 610c566a..9f83e41d 100644
--- a/app/src/main/java/ch/threema/storage/models/ContactModel.java
+++ b/app/src/main/java/ch/threema/storage/models/ContactModel.java
@@ -65,16 +65,17 @@ public class ContactModel extends Contact implements ReceiverModel {
 	public static final String COLUMN_AVATAR_EXPIRES = "avatarExpires";
 	public static final String COLUMN_IS_WORK = "isWork";
 	public static final String COLUMN_TYPE = "type";
-	public static final String COLUMN_PROFILE_PIC_SENT_DATE = "profilePicSent"; /* date when profile pic was last sent to this contact */
+	public static final String COLUMN_PROFILE_PIC_BLOB_ID = "profilePicBlobID"; /* the blob ID of the profile pic that was last sent to this contact */
 	public static final String COLUMN_DATE_CREATED = "dateCreated"; /* date when this contact was created locally */
 	public static final String COLUMN_IS_HIDDEN = "isHidden"; /* whether this contact is visible in the contact list */
 	public static final String COLUMN_IS_RESTORED = "isRestored"; /* whether this contact has been restored from a backup and not yet been contacted */
 	public static final String COLUMN_IS_ARCHIVED = "isArchived"; /* whether this contact has been archived by user */
 	public static final String COLUMN_READ_RECEIPTS = "readReceipts"; /* whether read receipts should be sent to this contact */
 	public static final String COLUMN_TYPING_INDICATORS = "typingIndicators"; /* whether typing indicators should be sent to this contact */
-	public static final String COLUMN_FORWARD_SECURITY_ENABLED = "forwardSecurityEnabled"; /* whether forward security should be used when sending to this contact */
 	public static final String COLUMN_FORWARD_SECURITY_STATE = "forwardSecurityState"; /* current state of forward security with this contact */
 
+	public static final byte[] NO_PROFILE_PICTURE_BLOB_ID = new byte[0];
+
 	public enum State {
 		/**
 		 * Contact is active.
@@ -102,7 +103,8 @@ public class ContactModel extends Contact implements ReceiverModel {
 	public @interface OverridePolicy {}
 
 	/**
-	 * Forward Security state constants
+	 * Forward Security state constants. Note that these values are only maintained for contacts
+	 * with a DH session of version 1.0.
 	 */
 	public static final int FS_OFF = 0; // last message from this contact did not have FS enabled
 	public static final int FS_ON = 1; // last message from this contact was received with FS
@@ -122,10 +124,11 @@ public class ContactModel extends Contact implements ReceiverModel {
 	private int featureMask;
 	private int colorIndex = -1;
 	private boolean isWork, isHidden, isRestored, isArchived;
-	private Date avatarExpires, profilePicSent, dateCreated;
+	private Date avatarExpires, dateCreated;
+	private byte[] profilePicBlobID;
 	private @IdentityType.Type int type;
 	private @OverridePolicy int readReceipts, typingIndicators;
-	private boolean forwardSecurityEnabled;
+	// TODO(ANDR-2452): Remove the forward security state when most of clients support 1.1 anyway
 	private int forwardSecurityState;
 
 	public ContactModel(String identity, byte[] publicKey) {
@@ -217,7 +220,7 @@ public class ContactModel extends Contact implements ReceiverModel {
 	}
 
 	public int getThemedColor(@NonNull Context context) {
-		if (ConfigUtils.getAppTheme(context) == ConfigUtils.THEME_DARK) {
+		if (ConfigUtils.isTheDarkSide(context)) {
 			return getColorDark();
 		} else {
 			return getColorLight();
@@ -345,8 +348,15 @@ public class ContactModel extends Contact implements ReceiverModel {
 		return this.isWork;
 	}
 
-	public Date getProfilePicSentDate() {
-		return profilePicSent;
+	/**
+	 * Get the BlobId of the latest profile picture that was sent to this contact.
+	 *
+	 * @return The blobId of the latest profile-picture sent to this contact, {@code null} if no
+	 *      profile-picture has been sent or {@code new byte[0]} if a delete-profile-picture message has been sent
+	 */
+	@Nullable
+	public byte[] getProfilePicBlobID() {
+		return profilePicBlobID;
 	}
 
 	public @Nullable Date getDateCreated() {
@@ -371,8 +381,14 @@ public class ContactModel extends Contact implements ReceiverModel {
 		return this.isRestored;
 	}
 
-	public ContactModel setProfilePicSentDate(Date profilePicSent) {
-		this.profilePicSent = profilePicSent;
+	/**
+	 * Set the BlobId of the latest profile picture that was sent to this contact.
+	 *
+	 * @param profilePicBlobID The blobId of the latest profile-picture sent to this contact, {@code null} if no
+	 *      profile-picture has been sent or {@code new byte[0]} if a delete-profile-picture message has been sent
+	 */
+	public ContactModel setProfilePicBlobID(@Nullable byte[] profilePicBlobID) {
+		this.profilePicBlobID = profilePicBlobID;
 		return this;
 	}
 
@@ -423,20 +439,26 @@ public class ContactModel extends Contact implements ReceiverModel {
 		return this;
 	}
 
-	public boolean isForwardSecurityEnabled() {
-		return forwardSecurityEnabled;
-	}
-
-	public ContactModel setForwardSecurityEnabled(boolean forwardSecurityEnabled) {
-		this.forwardSecurityEnabled = forwardSecurityEnabled;
-		return this;
-	}
-
+	/**
+	 * Get the forward security state of this contact. Note that these states are only maintained
+	 * for contacts with a DH session of version 1.0.
+	 * TODO(ANDR-2452): Remove the forward security state when most of clients support 1.1 anyway
+	 *
+	 * @return the forward security state
+	 */
 	@ForwardSecurityState
 	public int getForwardSecurityState() {
 		return forwardSecurityState;
 	}
 
+	/**
+	 * Set the forward security state of this contact. Note that these states are only maintained
+	 * for contacts with a DH session of version 1.0.
+	 * TODO(ANDR-2452): Remove the forward security state when most of clients support 1.1 anyway
+	 *
+	 * @param forwardSecurityState the forward security state
+	 * @return this contact model
+	 */
 	public ContactModel setForwardSecurityState(@ForwardSecurityState int forwardSecurityState) {
 		this.forwardSecurityState = forwardSecurityState;
 		return this;
@@ -457,7 +479,7 @@ public class ContactModel extends Contact implements ReceiverModel {
 			this.featureMask,
 			this.avatarExpires,
 			this.isWork,
-			this.profilePicSent,
+			this.profilePicBlobID,
 			this.type,
 			this.dateCreated,
 			this.isHidden,
@@ -465,7 +487,6 @@ public class ContactModel extends Contact implements ReceiverModel {
 			this.isArchived,
 			this.readReceipts,
 			this.typingIndicators,
-			this.forwardSecurityEnabled,
 			this.forwardSecurityState
 		};
 	}
diff --git a/app/src/main/java/ch/threema/storage/models/ConversationModel.java b/app/src/main/java/ch/threema/storage/models/ConversationModel.java
index 86955473..3ccf3c80 100644
--- a/app/src/main/java/ch/threema/storage/models/ConversationModel.java
+++ b/app/src/main/java/ch/threema/storage/models/ConversationModel.java
@@ -21,8 +21,12 @@
 
 package ch.threema.storage.models;
 
+import android.content.Context;
+
 import java.util.Date;
 
+import androidx.annotation.NonNull;
+import androidx.annotation.Nullable;
 import ch.threema.app.messagereceiver.ContactMessageReceiver;
 import ch.threema.app.messagereceiver.DistributionListMessageReceiver;
 import ch.threema.app.messagereceiver.GroupMessageReceiver;
@@ -32,41 +36,61 @@ import ch.threema.app.utils.ConversationUtil;
 
 public class ConversationModel {
 
+	public static final int NO_RESOURCE = -1;
+
+	@NonNull
+	private final Context context;
+
+	private final MessageReceiver receiver;
+
 	private long messageCount;
+
 	private AbstractMessageModel latestMessage;
-	private final MessageReceiver receiver;
+
 	private long unreadCount;
+	private boolean isUnreadTagged;
+
 	private String uid = null;
 	private int position = -1;
+
 	private boolean isTyping = false;
+	private boolean isPinTagged = false;
 
-	public ConversationModel(MessageReceiver receiver) {
+	public ConversationModel(@NonNull Context context, MessageReceiver<?> receiver) {
+		this.context = context;
 		this.receiver = receiver;
 	}
 
-	public long getMessageCount() {
-		return messageCount;
+	@NonNull
+	public Context getContext() {
+		return context;
 	}
 
 	public void setMessageCount(long messageCount) {
 		this.messageCount = messageCount;
 	}
 
+	public long getMessageCount() {
+		return messageCount;
+	}
+
 	public Date getSortDate() {
-		if(this.getLatestMessage() != null) {
+		if (this.getLatestMessage() != null) {
 			return this.getLatestMessage().getCreatedAt();
 		}
 
-		if(this.isGroupConversation()) {
-			if (getMessageCount() > 0) {
-				return this.getGroup().getCreatedAt();
+		if (this.isGroupConversation()) {
+			GroupModel group = getGroup();
+			if (getMessageCount() > 0 && group != null) {
+				return group.getCreatedAt();
 			}
 			return new Date(0);
 		}
 
-		if(this.isDistributionListConversation()) {
-			if (getMessageCount() > 0) {
-				return this.getDistributionList().getCreatedAt();
+		if (this.isDistributionListConversation()) {
+			DistributionListModel distributionList = getDistributionList();
+			if (getMessageCount() > 0 && distributionList != null) {
+				return distributionList.getCreatedAt();
 			}
 			return new Date(0);
 		}
@@ -74,44 +98,41 @@ public class ConversationModel {
 		return null;
 	}
 
-	public AbstractMessageModel getLatestMessage() {
-		return latestMessage;
-	}
-
-	public long getUnreadCount() {
-		return this.unreadCount;
+	public void setLatestMessage(@Nullable AbstractMessageModel latestMessage) {
+		this.latestMessage = latestMessage;
 	}
 
-	public void setUnreadCount(long unreadCount) {
-		this.unreadCount = unreadCount;
-	}
-	public void setLatestMessage(AbstractMessageModel latestMessage) {
-		this.latestMessage = latestMessage;
+	@Nullable
+	public AbstractMessageModel getLatestMessage() {
+		return latestMessage;
 	}
 
 	public boolean hasUnreadMessage() {
 		return this.unreadCount > 0;
 	}
 
-	public GroupModel getGroup() {
-		if(this.isGroupConversation()) {
-			return ((GroupMessageReceiver)this.receiver).getGroup();
+	@Nullable
+	public ContactModel getContact() {
+		if (this.isContactConversation()) {
+			return ((ContactMessageReceiver) this.receiver).getContact();
 		}
 
 		return null;
 	}
 
-	public ContactModel getContact() {
-		if(this.isContactConversation()) {
-			return ((ContactMessageReceiver)this.receiver).getContact();
+	@Nullable
+	public GroupModel getGroup() {
+		if (this.isGroupConversation()) {
+			return ((GroupMessageReceiver) this.receiver).getGroup();
 		}
 
 		return null;
 	}
 
+	@Nullable
 	public DistributionListModel getDistributionList() {
-		if(this.isDistributionListConversation()) {
-			return ((DistributionListMessageReceiver)this.receiver).getDistributionList();
+		if (this.isDistributionListConversation()) {
+			return ((DistributionListMessageReceiver) this.receiver).getDistributionList();
 		}
 
 		return null;
@@ -129,7 +150,8 @@ public class ConversationModel {
 		return this.receiver.getType() == MessageReceiver.Type_DISTRIBUTION_LIST;
 	}
 
-	public @MessageReceiverType int getReceiverType() {
+	public @MessageReceiverType
+	int getReceiverType() {
 		return this.receiver.getType();
 	}
 
@@ -137,28 +159,29 @@ public class ConversationModel {
 		return this.receiver;
 	}
 
+	@NonNull
 	public String getUid() {
-		if(this.uid == null) {
+		if (this.uid == null) {
 			if (this.isContactConversation()) {
 				this.uid = ConversationUtil.getIdentityConversationUid(this.getContact() != null ? this.getContact().getIdentity() : null);
 			} else if (this.isGroupConversation()) {
-				this.uid = ConversationUtil.getGroupConversationUid(this.getGroup() != null ? this.getGroup().getId() : null);
+				this.uid = ConversationUtil.getGroupConversationUid(this.getGroup() != null ? this.getGroup().getId() : -1);
 			} else if (this.isDistributionListConversation()) {
-				this.uid = ConversationUtil.getDistributionListConversationUid(this.getDistributionList() != null ? this.getDistributionList().getId() : null);
+				this.uid = ConversationUtil.getDistributionListConversationUid(this.getDistributionList() != null ? this.getDistributionList().getId() : -1);
 			}
 		}
 		return this.uid;
 	}
 
-	public int getPosition() {
-		return this.position;
-	}
-
 	public ConversationModel setPosition(int position) {
 		this.position = position;
 		return this;
 	}
 
+	public int getPosition() {
+		return this.position;
+	}
+
 	public boolean isTyping() {
 		return this.isTyping;
 	}
@@ -168,6 +191,35 @@ public class ConversationModel {
 		return this;
 	}
 
+	public void setIsPinTagged(boolean isPinTagged) {
+		this.isPinTagged = isPinTagged;
+	}
+
+	public boolean isPinTagged() {
+		return isPinTagged;
+	}
+
+	public void setIsUnreadTagged(boolean isUnreadTagged) {
+		this.isUnreadTagged = isUnreadTagged;
+	}
+
+	public boolean getIsUnreadTagged() {
+		return isUnreadTagged;
+	}
+
+	public void setUnreadCount(long unreadCount) {
+		this.unreadCount = unreadCount;
+		if (this.unreadCount == 0) {
+			isUnreadTagged = false;
+		}
+	}
+
+	public long getUnreadCount() {
+		return this.unreadCount;
+	}
+
+
+	@NonNull
 	@Override
 	public String toString() {
 		return getReceiver().getDisplayName();
diff --git a/app/src/main/java/ch/threema/storage/models/ConversationTagModel.java b/app/src/main/java/ch/threema/storage/models/ConversationTagModel.java
index f1c91bdf..eeb861cb 100644
--- a/app/src/main/java/ch/threema/storage/models/ConversationTagModel.java
+++ b/app/src/main/java/ch/threema/storage/models/ConversationTagModel.java
@@ -23,13 +23,6 @@ package ch.threema.storage.models;
 
 import java.util.Date;
 
-import ch.threema.app.messagereceiver.ContactMessageReceiver;
-import ch.threema.app.messagereceiver.DistributionListMessageReceiver;
-import ch.threema.app.messagereceiver.GroupMessageReceiver;
-import ch.threema.app.messagereceiver.MessageReceiver;
-import ch.threema.app.utils.ConversationUtil;
-
-
 public class ConversationTagModel {
 	public static final String TABLE = "conversation_tag";
 	public static final String COLUMN_CONVERSATION_UID = "conversationUid";
diff --git a/app/src/main/java/ch/threema/storage/models/DistributionListModel.java b/app/src/main/java/ch/threema/storage/models/DistributionListModel.java
index fc95f508..891d0245 100644
--- a/app/src/main/java/ch/threema/storage/models/DistributionListModel.java
+++ b/app/src/main/java/ch/threema/storage/models/DistributionListModel.java
@@ -23,6 +23,9 @@ package ch.threema.storage.models;
 
 import android.content.Context;
 
+import androidx.annotation.NonNull;
+import androidx.annotation.Nullable;
+
 import org.slf4j.Logger;
 
 import java.security.MessageDigest;
@@ -30,8 +33,6 @@ import java.security.NoSuchAlgorithmException;
 import java.util.Date;
 import java.util.Objects;
 
-import androidx.annotation.Nullable;
-import androidx.annotation.NonNull;
 import ch.threema.app.utils.ColorUtil;
 import ch.threema.app.utils.ConfigUtils;
 import ch.threema.base.utils.LoggingUtil;
@@ -102,7 +103,7 @@ public class DistributionListModel implements ReceiverModel {
 	}
 
 	public int getThemedColor(@NonNull Context context) {
-		if (ConfigUtils.getAppTheme(context) == ConfigUtils.THEME_DARK) {
+		if (ConfigUtils.isTheDarkSide(context)) {
 			return getColorDark();
 		} else {
 			return getColorLight();
diff --git a/app/src/main/java/ch/threema/storage/models/GroupCallModel.kt b/app/src/main/java/ch/threema/storage/models/GroupCallModel.kt
index 4552554d..102074e3 100644
--- a/app/src/main/java/ch/threema/storage/models/GroupCallModel.kt
+++ b/app/src/main/java/ch/threema/storage/models/GroupCallModel.kt
@@ -27,7 +27,8 @@ class GroupCallModel internal constructor(
     val groupId: Int,
     val sfuBaseUrl: String,
     val gck: String,
-    val startedAt: Long
+    val startedAt: Long,
+    val processedAt: Long,
 ) {
     companion object {
         const val TABLE = "group_call"
@@ -38,9 +39,12 @@ class GroupCallModel internal constructor(
         const val COLUMN_GCK = "gck"
         const val COLUMN_PROTOCOL_VERSION = "protocolVersion"
         const val COLUMN_STARTED_AT = "startedAt"
+        const val COLUMN_PROCESSED_AT = "processedAt"
     }
 
     fun getProtocolVersionUnsigned(): UInt = protocolVersion.toUInt()
 
     fun getStartedAtUnsigned(): ULong = startedAt.toULong()
+
+    fun getProcessedAtUnsigned(): ULong = processedAt.toULong()
 }
diff --git a/app/src/main/java/ch/threema/storage/models/GroupModel.java b/app/src/main/java/ch/threema/storage/models/GroupModel.java
index 89b447cd..c461bbcc 100644
--- a/app/src/main/java/ch/threema/storage/models/GroupModel.java
+++ b/app/src/main/java/ch/threema/storage/models/GroupModel.java
@@ -23,6 +23,9 @@ package ch.threema.storage.models;
 
 import android.content.Context;
 
+import androidx.annotation.NonNull;
+import androidx.annotation.Nullable;
+
 import org.slf4j.Logger;
 
 import java.nio.charset.StandardCharsets;
@@ -31,8 +34,6 @@ import java.security.NoSuchAlgorithmException;
 import java.util.Date;
 import java.util.Objects;
 
-import androidx.annotation.NonNull;
-import androidx.annotation.Nullable;
 import ch.threema.app.utils.ColorUtil;
 import ch.threema.app.utils.ConfigUtils;
 import ch.threema.base.utils.LoggingUtil;
@@ -167,7 +168,7 @@ public class GroupModel implements ReceiverModel {
 
 
 	public int getThemedColor(@NonNull Context context) {
-		if (ConfigUtils.getAppTheme(context) == ConfigUtils.THEME_DARK) {
+		if (ConfigUtils.isTheDarkSide(context)) {
 			return getColorDark();
 		} else {
 			return getColorLight();
diff --git a/app/src/main/java/ch/threema/storage/models/data/status/ForwardSecurityStatusDataModel.kt b/app/src/main/java/ch/threema/storage/models/data/status/ForwardSecurityStatusDataModel.kt
index 507b945b..c8329854 100644
--- a/app/src/main/java/ch/threema/storage/models/data/status/ForwardSecurityStatusDataModel.kt
+++ b/app/src/main/java/ch/threema/storage/models/data/status/ForwardSecurityStatusDataModel.kt
@@ -36,6 +36,7 @@ class ForwardSecurityStatusDataModel : StatusDataModelInterface {
         ForwardSecurityStatusType.FORWARD_SECURITY_MESSAGES_SKIPPED,
         ForwardSecurityStatusType.FORWARD_SECURITY_MESSAGE_OUT_OF_ORDER,
         ForwardSecurityStatusType.FORWARD_SECURITY_UNAVAILABLE_DOWNGRADE,
+        ForwardSecurityStatusType.FORWARD_SECURITY_ILLEGAL_SESSION_STATE,
     ])
     @Retention(AnnotationRetention.SOURCE)
     annotation class ForwardSecurityStatusType {
@@ -44,10 +45,11 @@ class ForwardSecurityStatusDataModel : StatusDataModelInterface {
 			const val MESSAGE_WITHOUT_FORWARD_SECURITY = 1
 			const val FORWARD_SECURITY_RESET = 2
 			const val FORWARD_SECURITY_ESTABLISHED = 3
-			const val FORWARD_SECURITY_ESTABLISHED_RX = 4
+			const val FORWARD_SECURITY_ESTABLISHED_RX = 4 // As of version 1.1 this status is not created anymore
 			const val FORWARD_SECURITY_MESSAGES_SKIPPED = 5
             const val FORWARD_SECURITY_MESSAGE_OUT_OF_ORDER = 6
             const val FORWARD_SECURITY_UNAVAILABLE_DOWNGRADE = 7
+            const val FORWARD_SECURITY_ILLEGAL_SESSION_STATE = 8
         }
     }
 
diff --git a/app/src/main/java/com/android/colorpicker/ColorPickerDialog.java b/app/src/main/java/com/android/colorpicker/ColorPickerDialog.java
index 1d38b90d..027c8161 100644
--- a/app/src/main/java/com/android/colorpicker/ColorPickerDialog.java
+++ b/app/src/main/java/com/android/colorpicker/ColorPickerDialog.java
@@ -20,14 +20,15 @@ import android.app.Dialog;
 import android.os.Bundle;
 import android.view.LayoutInflater;
 import android.view.View;
-import android.widget.ProgressBar;
-
-import com.android.colorpicker.ColorPickerSwatch.OnColorSelectedListener;
-import com.google.android.material.dialog.MaterialAlertDialogBuilder;
 
 import androidx.annotation.NonNull;
 import androidx.appcompat.app.AlertDialog;
 import androidx.fragment.app.DialogFragment;
+
+import com.android.colorpicker.ColorPickerSwatch.OnColorSelectedListener;
+import com.google.android.material.dialog.MaterialAlertDialogBuilder;
+import com.google.android.material.progressindicator.CircularProgressIndicator;
+
 import ch.threema.app.R;
 
 /**
@@ -56,7 +57,7 @@ public class ColorPickerDialog extends DialogFragment implements OnColorSelected
     protected int mSize;
 
     private ColorPickerPalette mPalette;
-    private ProgressBar mProgress;
+    private CircularProgressIndicator mProgress;
 
     protected OnColorSelectedListener mListener;
 
@@ -110,16 +111,15 @@ public class ColorPickerDialog extends DialogFragment implements OnColorSelected
     @Override
     public Dialog onCreateDialog(Bundle savedInstanceState) {
         View view = LayoutInflater.from(getActivity()).inflate(R.layout.color_picker_dialog, null);
-        mProgress = view.findViewById(android.R.id.progress);
+        mProgress = view.findViewById(R.id.progress);
         mPalette = view.findViewById(R.id.color_picker);
-        view.findViewById(R.id.scroll_view).setBackgroundColor(android.R.attr.windowBackground);
         mPalette.init(mSize, mColumns, this);
 
         if (mColors != null) {
             showPaletteView();
         }
 
-        mAlertDialog = new MaterialAlertDialogBuilder(getActivity(), R.style.Theme_Threema_Colorpicker)
+        mAlertDialog = new MaterialAlertDialogBuilder(getActivity(), getTheme())
             .setTitle(mTitleResId)
             .setView(view)
             .create();
diff --git a/app/src/store_threema/java/ch/threema/app/activities/DownloadApkActivity.java b/app/src/store_threema/java/ch/threema/app/activities/DownloadApkActivity.java
index 35c76aa8..1954a5bf 100644
--- a/app/src/store_threema/java/ch/threema/app/activities/DownloadApkActivity.java
+++ b/app/src/store_threema/java/ch/threema/app/activities/DownloadApkActivity.java
@@ -200,10 +200,6 @@ public class DownloadApkActivity extends ThreemaActivity implements GenericAlert
 	protected void onCreate(@Nullable Bundle savedInstanceState) {
 		super.onCreate(savedInstanceState);
 
-		if (ConfigUtils.getAppTheme(this) == ConfigUtils.THEME_DARK) {
-			setTheme(R.style.Theme_Threema_Translucent_Dark);
-		}
-
 		if (savedInstanceState != null) {
 			downloadId = savedInstanceState.getLong(BUNDLE_DOWNLOAD_ID, -1);
 		}
diff --git a/app/src/test/java/ch/threema/app/service/AppRestrictionServiceTest.java b/app/src/test/java/ch/threema/app/services/AppRestrictionServiceTest.java
similarity index 53%
rename from app/src/test/java/ch/threema/app/service/AppRestrictionServiceTest.java
rename to app/src/test/java/ch/threema/app/services/AppRestrictionServiceTest.java
index f4d2de64..932a0788 100644
--- a/app/src/test/java/ch/threema/app/service/AppRestrictionServiceTest.java
+++ b/app/src/test/java/ch/threema/app/services/AppRestrictionServiceTest.java
@@ -19,7 +19,7 @@
  * along with this program. If not, see <https://www.gnu.org/licenses/>.
  */
 
-package ch.threema.app.service;
+package ch.threema.app.services;
 
 import android.annotation.TargetApi;
 import android.content.Context;
@@ -32,16 +32,19 @@ import org.json.JSONObject;
 import org.junit.Assert;
 import org.junit.Test;
 import org.junit.runner.RunWith;
+import org.mockito.Mockito;
 import org.powermock.api.mockito.PowerMockito;
 import org.powermock.core.classloader.annotations.PrepareForTest;
 import org.powermock.modules.junit4.PowerMockRunner;
 import org.powermock.reflect.Whitebox;
 
+import java.util.HashMap;
 import java.util.Iterator;
+import java.util.Map;
 
+import ch.threema.app.R;
 import ch.threema.app.ThreemaApplication;
 import ch.threema.app.managers.ServiceManager;
-import ch.threema.app.services.AppRestrictionService;
 import ch.threema.app.services.license.UserCredentials;
 import ch.threema.app.stores.PreferenceStoreInterface;
 import ch.threema.app.utils.RuntimeUtil;
@@ -55,6 +58,7 @@ import static org.mockito.Mockito.anyDouble;
 import static org.mockito.Mockito.anyInt;
 import static org.mockito.Mockito.anyLong;
 import static org.mockito.Mockito.anyString;
+import static org.mockito.Mockito.doAnswer;
 import static org.mockito.Mockito.doCallRealMethod;
 import static org.mockito.Mockito.eq;
 import static org.mockito.Mockito.never;
@@ -284,13 +288,16 @@ public class AppRestrictionServiceTest {
 		AppRestrictionService service = PowerMockito.mock(AppRestrictionService.class);
 		doCallRealMethod().when(service).storeWorkMDMSettings(any(WorkMDMSettings.class));
 
+		Context mockContext = PowerMockito.mock(Context.class);
+		when(mockContext.getString(anyInt())).thenReturn("");
+
 		ServiceManager serviceManagerMock = PowerMockito.mock(ServiceManager.class);
 		PreferenceStoreInterface preferenceStoreMock = PowerMockito.mock(PreferenceStoreInterface.class);
 		PowerMockito.mockStatic(ThreemaApplication.class);
 		when(ThreemaApplication.getServiceManager()).thenReturn(serviceManagerMock);
+		when(ThreemaApplication.getAppContext()).thenReturn(mockContext);
 		when(serviceManagerMock.getPreferenceStore()).thenReturn(preferenceStoreMock);
 
-
 		JSONObject jsonObject = new JSONObject();
 		WorkMDMSettings s = new WorkMDMSettings();
 		s.override = true;
@@ -311,10 +318,14 @@ public class AppRestrictionServiceTest {
 		AppRestrictionService service = PowerMockito.mock(AppRestrictionService.class);
 		doCallRealMethod().when(service).getWorkMDMSettings();
 
+		Context mockContext = PowerMockito.mock(Context.class);
+		when(mockContext.getString(anyInt())).thenReturn("");
+
 		ServiceManager serviceManagerMock = PowerMockito.mock(ServiceManager.class);
 		PreferenceStoreInterface preferenceStoreMock = PowerMockito.mock(PreferenceStoreInterface.class);
 		PowerMockito.mockStatic(ThreemaApplication.class);
 		when(ThreemaApplication.getServiceManager()).thenReturn(serviceManagerMock);
+		when(ThreemaApplication.getAppContext()).thenReturn(mockContext);
 		when(serviceManagerMock.getPreferenceStore()).thenReturn(preferenceStoreMock);
 
 		JSONObject jsonObject = new JSONObject();
@@ -353,4 +364,231 @@ public class AppRestrictionServiceTest {
 		verify(apiConnectorMock, times(1)).fetchWorkData(eq("hans"), eq("dampf"), any(String[].class));
 		verify(service, times(1)).storeWorkMDMSettings(eq(workData.mdm));
 	}
+
+	@Test
+	@TargetApi(Build.VERSION_CODES.LOLLIPOP_MR1)
+	@PrepareForTest({ThreemaApplication.class, Build.VERSION.class})
+	public void testFilterNonWorkMdmParametersFromPreferences() throws Exception {
+		// arrange
+		Whitebox.setInternalState(Build.VERSION.class, "SDK_INT", Build.VERSION_CODES.LOLLIPOP_MR1);
+
+		Bundle bundleMock = mockBundle();
+
+		RestrictionsManager restrictionManagerMock = PowerMockito.mock(RestrictionsManager.class);
+		when(restrictionManagerMock.getApplicationRestrictions()).thenReturn(bundleMock);
+
+		Context mockContext = PowerMockito.mock(Context.class);
+		when(mockContext.getSystemService(Context.RESTRICTIONS_SERVICE)).thenReturn(restrictionManagerMock);
+		when(mockContext.getString(anyInt())).thenReturn(
+			"th_id_backup",
+			"th_id_backup_password",
+			"th_safe_password",
+			"th_license_username",
+			"th_license_password"
+		);
+
+		JSONObject parameters = new JSONObject();
+		parameters.put("th_id_backup", "ABCD1234");
+		parameters.put("th_id_backup_password", "T0p$ecr3t");
+		parameters.put("th_safe_password", "T0p$ecr3t");
+		parameters.put("th_license_username", "<username>");
+		parameters.put("th_license_password", "T0p$ecr3t");
+		parameters.put("th_safe_enable", true);
+		parameters.put("th_firstname", "John");
+		parameters.put("th_lastname", "Doe");
+		JSONObject workRestrictionsJson = new JSONObject();
+		workRestrictionsJson.put("override", true);
+		workRestrictionsJson.put("parameters", parameters);
+		PreferenceStoreInterface preferenceStoreMock = PowerMockito.mock(PreferenceStoreInterface.class);
+		when(preferenceStoreMock.getJSONObject(eq("wrk_app_restriction"), eq(true))).thenReturn(workRestrictionsJson);
+
+		ServiceManager serviceManagerMock = PowerMockito.mock(ServiceManager.class);
+		when(serviceManagerMock.getPreferenceStore()).thenReturn(preferenceStoreMock);
+
+		PowerMockito.mockStatic(ThreemaApplication.class);
+		when(ThreemaApplication.getAppContext()).thenReturn(mockContext);
+		when(ThreemaApplication.getServiceManager()).thenReturn(serviceManagerMock);
+
+		// Act
+		AppRestrictionService service = new AppRestrictionService();
+		WorkMDMSettings settings = service.getWorkMDMSettings();
+		service.reload();
+		Bundle appRestrictions = service.getAppRestrictions();
+
+		// Assert
+		verify(preferenceStoreMock, times(1)).getJSONObject(eq("wrk_app_restriction"), eq(true));
+		verify(mockContext, times(5)).getString(anyInt());
+
+		Assert.assertTrue(settings.override);
+		Assert.assertEquals(3, settings.parameters.size());
+		Assert.assertEquals(true, settings.parameters.get("th_safe_enable"));
+		Assert.assertEquals("John", settings.parameters.get("th_firstname"));
+		Assert.assertEquals("Doe", settings.parameters.get("th_lastname"));
+
+		Assert.assertEquals(3, appRestrictions.size());
+		Assert.assertTrue(appRestrictions.getBoolean("th_safe_enable"));
+		Assert.assertEquals("John", appRestrictions.getString("th_firstname"));
+		Assert.assertEquals("Doe", appRestrictions.getString("th_lastname"));
+	}
+
+	/**
+	 * This tests whether work mdm parameter override application restrictions correctly when
+	 * `"override"` is set to `true` in the mdm work restrictions.
+	 * Parameters not available in work mdm must not override application restrictions.
+	 */
+	@Test
+	@TargetApi(Build.VERSION_CODES.LOLLIPOP_MR1)
+	@PrepareForTest({ThreemaApplication.class, Build.VERSION.class})
+	public void testMergeParams_workMdmParametersMustOverrideApplicationRestrictions() throws Exception {
+		// Arrange
+		Whitebox.setInternalState(Build.VERSION.class, "SDK_INT", Build.VERSION_CODES.LOLLIPOP_MR1);
+
+		Bundle applicationRestrictions = mockBundle();
+		JSONObject mdmWorkParameters = new JSONObject();
+
+		// Application restrictions that must not be overridden by work mdm parameters:
+		applicationRestrictions.putString("th_id_backup", "restriction_id_backup"); // #1
+		mdmWorkParameters.put("th_id_backup", "work_mdm_id_backup"); // #1
+
+		applicationRestrictions.putString("th_id_backup_password", "restriction_id_backup_password"); // #2
+		mdmWorkParameters.put("th_id_backup_password", "work_mdm_id_backup_password"); // #2
+
+		applicationRestrictions.putString("th_safe_password", "restriction_safe_password"); // #3
+		mdmWorkParameters.put("th_safe_password", "work_mdm_safe_password"); // #3
+
+		applicationRestrictions.putString("th_license_password", "restriction_license_username"); // #4
+		mdmWorkParameters.put("th_license_username", "work_mdm_license_username"); // #4
+
+		applicationRestrictions.putString("th_license_username", "restriction_license_username"); // #5
+		mdmWorkParameters.put("th_license_password", "work_mdm_license_password"); // #5
+
+		// Application restrictions that will be overridden by work mdm parameters:
+		applicationRestrictions.putBoolean("th_disable_screenshots", false); // #6
+		mdmWorkParameters.put("th_disable_screenshots", true); // #6
+
+		applicationRestrictions.putBoolean("th_disable_calls", true); // #7
+		mdmWorkParameters.put("th_disable_calls", false); // #7
+
+		applicationRestrictions.putString("th_nickname", "restriction_nickname"); // #8
+		mdmWorkParameters.put("th_nickname", "work_mdm_nickname"); // #8
+
+		applicationRestrictions.putString("th_web_hosts", "restriction_web_hosts"); // #9
+		mdmWorkParameters.put("th_web_hosts", "work_mdm_web_hosts"); // #9
+
+		// Application restrictions that are not touched by work mdm parameters and must therefore not change:
+		applicationRestrictions.putBoolean("th_disable_export", true); // #10
+		applicationRestrictions.putString("th_safe_password_message", "restriction_safe_password_message"); // #11
+
+		// Work mdm parameters not set by application restrictions:
+		mdmWorkParameters.put("th_safe_enable", true);  // #12
+		mdmWorkParameters.put("th_firstname", "work_mdm_firstname"); // #13
+		mdmWorkParameters.put("th_lastname", "work_mdm_lastname"); // #14
+
+		RestrictionsManager restrictionManagerMock = PowerMockito.mock(RestrictionsManager.class);
+		when(restrictionManagerMock.getApplicationRestrictions()).thenReturn(applicationRestrictions);
+
+		JSONObject workRestrictionsJson = new JSONObject();
+		workRestrictionsJson.put("override", true);
+		workRestrictionsJson.put("parameters", mdmWorkParameters);
+		PreferenceStoreInterface preferenceStoreMock = PowerMockito.mock(PreferenceStoreInterface.class);
+		when(preferenceStoreMock.getJSONObject(eq("wrk_app_restriction"), eq(true))).thenReturn(workRestrictionsJson);
+
+		ServiceManager serviceManagerMock = PowerMockito.mock(ServiceManager.class);
+		when(serviceManagerMock.getPreferenceStore()).thenReturn(preferenceStoreMock);
+
+		Context mockContext = PowerMockito.mock(Context.class);
+		when(mockContext.getSystemService(Context.RESTRICTIONS_SERVICE)).thenReturn(restrictionManagerMock);
+		when(mockContext.getString(R.string.restriction__id_backup)).thenReturn("th_id_backup");
+		when(mockContext.getString(R.string.restriction__id_backup_password)).thenReturn("th_id_backup_password");
+		when(mockContext.getString(R.string.restriction__safe_password)).thenReturn("th_safe_password");
+		when(mockContext.getString(R.string.restriction__license_username)).thenReturn("th_license_username");
+		when(mockContext.getString(R.string.restriction__license_password)).thenReturn("th_license_password");
+
+		PowerMockito.mockStatic(ThreemaApplication.class);
+		when(ThreemaApplication.getAppContext()).thenReturn(mockContext);
+		when(ThreemaApplication.getServiceManager()).thenReturn(serviceManagerMock);
+
+		// Act
+		AppRestrictionService service = new AppRestrictionService();
+		service.reload();
+		Bundle appRestrictions = service.getAppRestrictions();
+
+		// Assert
+		verify(preferenceStoreMock, times(1)).getJSONObject(eq("wrk_app_restriction"), eq(true));
+		verify(mockContext, times(5)).getString(anyInt());
+
+		Assert.assertEquals(14, appRestrictions.size());
+		// Application restrictions that must not be overridden by work mdm parameters:
+		Assert.assertEquals("restriction_id_backup", appRestrictions.getString("th_id_backup"));
+		Assert.assertEquals("restriction_id_backup_password", appRestrictions.getString("th_id_backup_password"));
+		Assert.assertEquals("restriction_safe_password", appRestrictions.getString("th_safe_password"));
+		Assert.assertEquals("restriction_license_username", appRestrictions.getString("th_license_password"));
+		Assert.assertEquals("restriction_license_username", appRestrictions.getString("th_license_username"));
+
+		// Application restrictions that are overridden by work mdm parameters:
+		Assert.assertTrue(appRestrictions.getBoolean("th_disable_screenshots"));
+		Assert.assertFalse(appRestrictions.getBoolean("th_disable_calls"));
+		Assert.assertEquals("work_mdm_nickname", appRestrictions.getString("th_nickname"));
+		Assert.assertEquals("work_mdm_web_hosts", appRestrictions.getString("th_web_hosts"));
+
+		// Application restrictions that are not set in work mdm and therefore not overridden:
+		Assert.assertTrue(appRestrictions.getBoolean("th_disable_export"));
+		Assert.assertEquals("restriction_safe_password_message", appRestrictions.getString("th_safe_password_message"));
+
+		// Work mdm parameters that are not set in application restrictions:
+		Assert.assertTrue(appRestrictions.getBoolean("th_safe_enable"));
+		Assert.assertEquals("work_mdm_firstname", appRestrictions.getString("th_firstname"));
+		Assert.assertEquals("work_mdm_lastname", appRestrictions.getString("th_lastname"));
+	}
+
+	private Bundle mockBundle() {
+		Map<String, Object> values = new HashMap<>();
+		Bundle bundle = Mockito.mock(Bundle.class);
+
+		when(bundle.containsKey(anyString())).thenAnswer(invocation -> values.containsKey(invocation.getArgument(0, String.class)));
+		when(bundle.isEmpty()).thenAnswer(ignored -> values.isEmpty());
+		when(bundle.size()).thenAnswer(ignored -> values.size());
+
+		doAnswer(invocation -> {
+			String key = invocation.getArgument(0);
+			int value = invocation.getArgument(1);
+			values.put(key, value);
+			return null;
+		}).when(bundle).putInt(anyString(), anyInt());
+		when(bundle.getInt(anyString())).thenAnswer(invocation -> values.get(invocation.getArgument(0, String.class)));
+
+		doAnswer(invocation -> {
+			String key = invocation.getArgument(0);
+			boolean value = invocation.getArgument(1);
+			values.put(key, value);
+			return null;
+		}).when(bundle).putBoolean(anyString(), anyBoolean());
+		when(bundle.getBoolean(anyString())).thenAnswer(invocation -> values.get(invocation.getArgument(0, String.class)));
+
+		doAnswer(invocation -> {
+			String key = invocation.getArgument(0);
+			String value = invocation.getArgument(1);
+			values.put(key, value);
+			return null;
+		}).when(bundle).putString(anyString(), anyString());
+		when(bundle.getString(anyString())).thenAnswer(invocation -> values.get(invocation.getArgument(0, String.class)));
+
+		doAnswer(invocation -> {
+			String key = invocation.getArgument(0);
+			long value = invocation.getArgument(1);
+			values.put(key, value);
+			return null;
+		}).when(bundle).putLong(anyString(), anyLong());
+		when(bundle.getLong(anyString())).thenAnswer(invocation -> values.get(invocation.getArgument(0, String.class)));
+
+		doAnswer(invocation -> {
+			String key = invocation.getArgument(0);
+			double value = invocation.getArgument(1);
+			values.put(key, value);
+			return null;
+		}).when(bundle).putDouble(anyString(), anyDouble());
+		when(bundle.getDouble(anyString())).thenAnswer(invocation -> values.get(invocation.getArgument(0, String.class)));
+
+		return bundle;
+	}
 }
diff --git a/app/src/test/java/ch/threema/app/services/systemupdate/SystemUpdateToVersion65Test.java b/app/src/test/java/ch/threema/app/services/systemupdate/SystemUpdateToVersion65Test.java
index ac47b3ad..03b2b54b 100644
--- a/app/src/test/java/ch/threema/app/services/systemupdate/SystemUpdateToVersion65Test.java
+++ b/app/src/test/java/ch/threema/app/services/systemupdate/SystemUpdateToVersion65Test.java
@@ -21,12 +21,16 @@
 
 package ch.threema.app.services.systemupdate;
 
-import net.sqlcipher.database.SQLiteDatabase;
+import net.zetetic.database.sqlcipher.SQLiteDatabase;
 
 import org.junit.Assert;
 import org.junit.Before;
 import org.junit.Test;
+import org.junit.runner.RunWith;
 import org.mockito.Mockito;
+import org.powermock.api.mockito.PowerMockito;
+import org.powermock.core.classloader.annotations.PrepareForTest;
+import org.powermock.modules.junit4.PowerMockRunner;
 
 import java.util.Arrays;
 
@@ -35,6 +39,8 @@ import ch.threema.storage.factories.GroupInviteModelFactory;
 import ch.threema.storage.factories.IncomingGroupJoinRequestModelFactory;
 import ch.threema.storage.factories.OutgoingGroupJoinRequestModelFactory;
 
+@RunWith(PowerMockRunner.class)
+@PrepareForTest({SQLiteDatabase.class, DatabaseServiceNew.class})
 public class SystemUpdateToVersion65Test {
 
 	private DatabaseServiceNew databaseServiceMock;
@@ -42,8 +48,8 @@ public class SystemUpdateToVersion65Test {
 
 	@Before
 	public void createMocks() {
-		this.databaseServiceMock = Mockito.mock(DatabaseServiceNew.class);
-		this.sqLiteDatabaseMock = Mockito.mock(SQLiteDatabase.class);
+		this.databaseServiceMock = PowerMockito.mock(DatabaseServiceNew.class);
+		this.sqLiteDatabaseMock = PowerMockito.mock(SQLiteDatabase.class);
 	}
 
 	@Test
@@ -65,18 +71,18 @@ public class SystemUpdateToVersion65Test {
 	public void runDirectly() {
 		SystemUpdateToVersion65 update = new SystemUpdateToVersion65(this.databaseServiceMock, this.sqLiteDatabaseMock);
 
-		Mockito.when(this.databaseServiceMock.getGroupInviteModelFactory())
-			.thenReturn(Mockito.mock(GroupInviteModelFactory.class));
-		Mockito.when(this.databaseServiceMock.getOutgoingGroupJoinRequestModelFactory())
-			.thenReturn(Mockito.mock(OutgoingGroupJoinRequestModelFactory.class));
-		Mockito.when(this.databaseServiceMock.getIncomingGroupJoinRequestModelFactory())
-			.thenReturn(Mockito.mock(IncomingGroupJoinRequestModelFactory.class));
+		PowerMockito.when(this.databaseServiceMock.getGroupInviteModelFactory())
+			.thenReturn(PowerMockito.mock(GroupInviteModelFactory.class));
+		PowerMockito.when(this.databaseServiceMock.getOutgoingGroupJoinRequestModelFactory())
+			.thenReturn(PowerMockito.mock(OutgoingGroupJoinRequestModelFactory.class));
+		PowerMockito.when(this.databaseServiceMock.getIncomingGroupJoinRequestModelFactory())
+			.thenReturn(PowerMockito.mock(IncomingGroupJoinRequestModelFactory.class));
 
-		Mockito.when(this.databaseServiceMock.getGroupInviteModelFactory().getStatements())
+		PowerMockito.when(this.databaseServiceMock.getGroupInviteModelFactory().getStatements())
 			.thenReturn(new String[]{"invite1", "invite2"});
-		Mockito.when(this.databaseServiceMock.getOutgoingGroupJoinRequestModelFactory().getStatements())
+		PowerMockito.when(this.databaseServiceMock.getOutgoingGroupJoinRequestModelFactory().getStatements())
 			.thenReturn(new String[]{"request1"});
-		Mockito.when(this.databaseServiceMock.getIncomingGroupJoinRequestModelFactory().getStatements())
+		PowerMockito.when(this.databaseServiceMock.getIncomingGroupJoinRequestModelFactory().getStatements())
 			.thenReturn(new String[]{"incomming1"});
 
 		update.runDirectly();
diff --git a/app/src/test/java/ch/threema/app/utils/QuoteUtilTest.java b/app/src/test/java/ch/threema/app/utils/QuoteUtilTest.java
index 74295a2d..5d86c2dc 100644
--- a/app/src/test/java/ch/threema/app/utils/QuoteUtilTest.java
+++ b/app/src/test/java/ch/threema/app/utils/QuoteUtilTest.java
@@ -23,6 +23,7 @@ package ch.threema.app.utils;
 
 import android.content.Context;
 
+import org.junit.Before;
 import org.junit.Test;
 import org.mockito.Mockito;
 
@@ -30,7 +31,6 @@ import androidx.annotation.NonNull;
 import androidx.annotation.Nullable;
 import ch.threema.app.R;
 import ch.threema.app.messagereceiver.MessageReceiver;
-import ch.threema.app.messagereceiver.MessageReceiver.MessageReceiverType;
 import ch.threema.app.services.FileService;
 import ch.threema.app.services.MessageService;
 import ch.threema.app.services.UserService;
@@ -75,7 +75,7 @@ public class QuoteUtilTest {
 		assertNull(content.thumbnail);
 		assertNull(content.quotedMessageId);
 		assertNull(content.quotedMessageModel);
-		assertNull(content.receiverType);
+		assertNull(content.messageReceiver);
 	}
 
 	@Test
@@ -98,18 +98,24 @@ public class QuoteUtilTest {
 
 	// Quotes V2
 
+	private final MessageReceiver mockContactReceiver = Mockito.mock(MessageReceiver.class);
+
+	@Before
+	public void initMockReceiver() {
+		Mockito.when(mockContactReceiver.getType()).thenReturn(MessageReceiver.Type_CONTACT);
+	}
+
 	/**
 	 * Helper function for v2 quotes.
 	 *
 	 * @param quoterModel The model that contains the quote.
 	 * @param quotedModel The quoted model.
-	 * @param receiverType The receiver type.
 	 */
 	private static QuoteContent extractQuoteV2(
 		@NonNull AbstractMessageModel quoterModel,
 		@Nullable AbstractMessageModel quotedModel,
 		boolean includeMessageModel,
-		@MessageReceiverType int receiverType
+		MessageReceiver receiver
 	) {
 		// Mocks
 		final Context mockContext = Mockito.mock(Context.class);
@@ -118,10 +124,10 @@ public class QuoteUtilTest {
 		final FileService mockFileService = Mockito.mock(FileService.class);
 
 		// Ensure that message service returns the correct models
-		Mockito.when(mockMessageService.getMessageModelByApiMessageId(quoterModel.getApiMessageId(), receiverType))
+		Mockito.when(mockMessageService.getMessageModelByApiMessageIdAndReceiver(quoterModel.getApiMessageId(), receiver))
 			.thenReturn(quoterModel);
 		if (quotedModel != null) {
-			Mockito.when(mockMessageService.getMessageModelByApiMessageId(quotedModel.getApiMessageId(), receiverType))
+			Mockito.when(mockMessageService.getMessageModelByApiMessageIdAndReceiver(quotedModel.getApiMessageId(), receiver))
 				.thenReturn(quotedModel);
 		}
 
@@ -132,7 +138,7 @@ public class QuoteUtilTest {
 
 		// Return quote contents
 		return QuoteUtil.extractQuoteV2(
-			quoterModel, receiverType, includeMessageModel, null,
+			quoterModel, receiver, includeMessageModel, null,
 			mockContext, mockMessageService, mockUserService, mockFileService
 		);
 	}
@@ -146,7 +152,6 @@ public class QuoteUtilTest {
 		final String quoteMessageId = "8899889988998899";
 		final String quotedBody = "Shall we eat lunch?";
 		final String quoteComment = "That's a great idea!";
-		final int receiverType = MessageReceiver.Type_CONTACT;
 
 		// Create quoted model
 		final AbstractMessageModel quotedModel = new MessageModel(false);
@@ -164,15 +169,15 @@ public class QuoteUtilTest {
 		quoterModel.setType(MessageType.TEXT);
 
 		// Verify
-		final QuoteContent content = extractQuoteV2(quoterModel, quotedModel, false, receiverType);
+		final QuoteContent content = extractQuoteV2(quoterModel, quotedModel, false, mockContactReceiver);
 		assertNotNull(content);
 		assertTrue(content.isQuoteV2());
 		assertFalse(content.isQuoteV1());
-		assertEquals(content.quotedText, quotedBody);
-		assertEquals(content.bodyText, quoteComment);
-		assertEquals(content.identity, quotedIdentity);
-		assertEquals(content.quotedMessageId, quotedMessageId);
-		assertEquals(content.receiverType, (Integer) receiverType);
+		assertEquals(quotedBody, content.quotedText);
+		assertEquals(quoteComment, content.bodyText);
+		assertEquals(quotedIdentity, content.identity);
+		assertEquals(quotedMessageId, content.quotedMessageId);
+		assertEquals(mockContactReceiver, content.messageReceiver);
 		assertNull(content.quotedMessageModel);
 		assertNull(content.thumbnail);
 		assertNull(content.icon);
@@ -187,7 +192,6 @@ public class QuoteUtilTest {
 		final String quoteMessageId = "8899889988998899";
 		final String quotedBody = "Shall we eat lunch?";
 		final String quoteComment = "That's a great idea!";
-		final int receiverType = MessageReceiver.Type_CONTACT;
 
 		// Create quoted model
 		final AbstractMessageModel quotedModel = new MessageModel(false);
@@ -205,7 +209,7 @@ public class QuoteUtilTest {
 		quoterModel.setType(MessageType.TEXT);
 
 		// Verify
-		final QuoteContent content = extractQuoteV2(quoterModel, quotedModel, false, receiverType);
+		final QuoteContent content = extractQuoteV2(quoterModel, quotedModel, false, mockContactReceiver);
 		assertNotNull(content);
 		assertTrue(content.isQuoteV2());
 		assertFalse(content.isQuoteV1());
@@ -213,7 +217,7 @@ public class QuoteUtilTest {
 		assertEquals(content.bodyText, quoteComment);
 		assertEquals(content.quotedMessageId, quotedMessageId);
 		assertNotEquals(content.identity, quotedIdentity);
-		assertNull(content.receiverType);
+		assertNull(content.messageReceiver);
 		assertNull(content.quotedMessageModel);
 		assertNull(content.thumbnail);
 		assertNull(content.icon);
@@ -227,7 +231,6 @@ public class QuoteUtilTest {
 		final String quotedMessageId = "0011223344556677";
 		final String quoteMessageId = "8899889988998899";
 		final String quoteComment = "That's a great idea!";
-		final int receiverType = MessageReceiver.Type_CONTACT;
 
 		// Create quoted model
 		final AbstractMessageModel quotedModel = new MessageModel(false);
@@ -245,7 +248,7 @@ public class QuoteUtilTest {
 		quoterModel.setType(MessageType.TEXT);
 
 		// Verify
-		final QuoteContent content = extractQuoteV2(quoterModel, quotedModel, true, receiverType);
+		final QuoteContent content = extractQuoteV2(quoterModel, quotedModel, true, mockContactReceiver);
 		assertNotNull(content);
 		assertTrue(content.isQuoteV2());
 		assertFalse(content.isQuoteV1());
@@ -254,7 +257,7 @@ public class QuoteUtilTest {
 		assertEquals(quotedIdentity, content.identity);
 		assertEquals(quotedMessageId, content.quotedMessageId);
 		assertEquals(quotedModel, content.quotedMessageModel);
-		assertEquals(content.receiverType, (Integer) receiverType);
+		assertEquals(mockContactReceiver, content.messageReceiver);
 		assertNull(content.thumbnail);
 		assertEquals((Integer) R.drawable.ic_movie_filled, content.icon);
 	}
@@ -266,7 +269,6 @@ public class QuoteUtilTest {
 		final String quotedMessageId = "0000000000000000";
 		final String quoteMessageId = "8899889988998899";
 		final String quoteComment = "That's a great idea!";
-		final int receiverType = MessageReceiver.Type_CONTACT;
 
 		// Create quoter model with an invalid message id
 		final AbstractMessageModel quoterModel = new MessageModel(false);
@@ -277,16 +279,16 @@ public class QuoteUtilTest {
 		quoterModel.setType(MessageType.TEXT);
 
 		// Verify
-		final QuoteContent content = extractQuoteV2(quoterModel, null, true, receiverType);
+		final QuoteContent content = extractQuoteV2(quoterModel, null, true, mockContactReceiver);
 		assertNotNull(content);
 		assertTrue(content.isQuoteV2());
 		assertFalse(content.isQuoteV1());
-		assertEquals(content.quotedText, "Deleted");
-		assertEquals(content.bodyText, quoteComment);
+		assertEquals("Deleted", content.quotedText);
+		assertEquals(quoteComment, content.bodyText);
 		assertNull(content.identity);
-		assertEquals(content.quotedMessageId, quotedMessageId);
+		assertEquals(quotedMessageId, content.quotedMessageId);
 		assertNull(content.quotedMessageModel);
-		assertNull(content.receiverType);
+		assertNull(content.messageReceiver);
 		assertNull(content.thumbnail);
 		assertNull(content.icon);
 	}
@@ -297,7 +299,6 @@ public class QuoteUtilTest {
 		final String quoterIdentity = "AABBCCDD";
 		final String quoteMessageId = "8899889988998899";
 		final String quoteComment = "That's a great idea!";
-		final int receiverType = MessageReceiver.Type_CONTACT;
 
 		// Create model where the quote references itself
 		final AbstractMessageModel quoterModel = new MessageModel(false);
@@ -308,7 +309,7 @@ public class QuoteUtilTest {
 		quoterModel.setType(MessageType.TEXT);
 
 		// Verify
-		final QuoteContent content = extractQuoteV2(quoterModel, null, false, receiverType);
+		final QuoteContent content = extractQuoteV2(quoterModel, null, false, mockContactReceiver);
 		assertNotNull(content);
 		assertTrue(content.isQuoteV2());
 		assertFalse(content.isQuoteV1());
@@ -317,7 +318,7 @@ public class QuoteUtilTest {
 		assertEquals(content.identity, quoterIdentity);
 		assertEquals(content.quotedMessageId, quoteMessageId);
 		assertNull(content.quotedMessageModel);
-		assertEquals((Integer) receiverType, content.receiverType);
+		assertEquals(content.messageReceiver, mockContactReceiver);
 		assertNull(content.thumbnail);
 		assertNull(content.icon);
 	}
diff --git a/app/src/test/java/ch/threema/app/utils/UrlUtilTest.java b/app/src/test/java/ch/threema/app/utils/UrlUtilTest.java
index f4642a8b..25df9248 100644
--- a/app/src/test/java/ch/threema/app/utils/UrlUtilTest.java
+++ b/app/src/test/java/ch/threema/app/utils/UrlUtilTest.java
@@ -89,6 +89,18 @@ public class UrlUtilTest {
 		assertLegalUri("wikipedia.org");
 	}
 
+	@Test
+	public void nonIdentifierChars() {
+		// Must contain a non-ascii character, otherwise the hyphen-minus is accepted anyway (ascii)
+		assertLegalUri("a-ü.ch");
+
+		// Accepted as only ascii characters are involved
+		assertLegalUri("-.ch");
+
+		// Don't allow mixing cyrillic a with latin a
+		assertIllegalUri("a-а.ch");
+	}
+
 	@Test
 	public void mixedScriptUris() {
 		assertLegalUri(GREEK + GREEK + ".com");
diff --git a/app/src/test/java/ch/threema/app/voip/services/VoipStateServiceTest.java b/app/src/test/java/ch/threema/app/voip/services/VoipStateServiceTest.java
index c682c2f7..df0af8bd 100644
--- a/app/src/test/java/ch/threema/app/voip/services/VoipStateServiceTest.java
+++ b/app/src/test/java/ch/threema/app/voip/services/VoipStateServiceTest.java
@@ -112,7 +112,6 @@ public class VoipStateServiceTest {
 
 		// Mock services
 		this.mockContactService = PowerMockito.mock(ContactService.class);
-		this.mockMessageService = PowerMockito.mock(MessageService.class);
 		this.mockRingtoneService = PowerMockito.mock(RingtoneService.class);
 		this.mockPreferenceService = PowerMockito.mock(PreferenceService.class);
 		this.mockLifetimeService = PowerMockito.mock(LifetimeService.class);
@@ -130,9 +129,6 @@ public class VoipStateServiceTest {
 		// Set up return values for preference service
 		when(this.mockPreferenceService.isVoipEnabled()).thenReturn(true);
 
-		// Mock message queue
-		this.mockMessageQueue = PowerMockito.mock(MessageQueue.class);
-
 		// Static mocks
 		mockStatic(LogUtil.class);
 		mockStatic(SystemClock.class);
@@ -147,8 +143,6 @@ public class VoipStateServiceTest {
 				this.mockContactService,
 				this.mockRingtoneService,
 				this.mockPreferenceService,
-				this.mockMessageService,
-				this.mockMessageQueue,
 				this.mockLifetimeService,
 				this.mockContext
 		);
diff --git a/app/src/test/java/ch/threema/architecture/LayerDependenciesTest.java b/app/src/test/java/ch/threema/architecture/LayerDependenciesTest.java
index bc06983f..8b34719b 100644
--- a/app/src/test/java/ch/threema/architecture/LayerDependenciesTest.java
+++ b/app/src/test/java/ch/threema/architecture/LayerDependenciesTest.java
@@ -43,7 +43,7 @@ import ch.threema.app.utils.executor.HandlerExecutor;
 import ch.threema.logging.LoggerManager;
 import ch.threema.logging.backend.DebugLogFileBackend;
 import ch.threema.storage.DatabaseServiceNew;
-import ch.threema.storage.NonceDatabaseBlobService;
+import ch.threema.storage.DatabaseNonceStore;
 import ch.threema.storage.factories.BallotModelFactory;
 import ch.threema.storage.models.ConversationModel;
 import ch.threema.storage.models.data.media.FileDataModel;
@@ -74,7 +74,7 @@ public class LayerDependenciesTest {
 		)
 		.ignoreDependency(DatabaseServiceNew.class, DatabaseMigrationFailedException.class)
 		.ignoreDependency(DatabaseServiceNew.class, DatabaseMigrationLockedException.class)
-		.ignoreDependency(NonceDatabaseBlobService.class, DatabaseMigrationFailedException.class)
+		.ignoreDependency(DatabaseNonceStore.class, DatabaseMigrationFailedException.class)
 		.ignoreDependency(ConversationModel.class, MessageReceiver.class)
 		.ignoreDependency(ConversationModel.class, GroupMessageReceiver.class)
 		.ignoreDependency(ConversationModel.class, DistributionListMessageReceiver.class)
diff --git a/app/src/test/java/ch/threema/storage/factories/BallotModelFactoryTest.java b/app/src/test/java/ch/threema/storage/factories/BallotModelFactoryTest.java
index 06f1f3d2..5b321837 100644
--- a/app/src/test/java/ch/threema/storage/factories/BallotModelFactoryTest.java
+++ b/app/src/test/java/ch/threema/storage/factories/BallotModelFactoryTest.java
@@ -24,13 +24,14 @@ package ch.threema.storage.factories;
 
 import android.content.ContentValues;
 
-import net.sqlcipher.Cursor;
-import net.sqlcipher.database.SQLiteDatabase;
+import android.database.Cursor;
+import net.zetetic.database.sqlcipher.SQLiteDatabase;
 
 import org.junit.Assert;
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
+import org.powermock.api.mockito.PowerMockito;
 import org.powermock.core.classloader.annotations.PrepareForTest;
 import org.powermock.modules.junit4.PowerMockRunner;
 
@@ -44,7 +45,6 @@ import ch.threema.app.messagereceiver.DistributionListMessageReceiver;
 import ch.threema.app.messagereceiver.GroupMessageReceiver;
 import ch.threema.app.messagereceiver.MessageReceiver;
 import ch.threema.app.services.ballot.BallotService;
-import ch.threema.app.webclient.converter.Group;
 import ch.threema.storage.ColumnIndexCache;
 import ch.threema.storage.DatabaseUtil;
 import ch.threema.storage.models.ContactModel;
@@ -52,26 +52,22 @@ import ch.threema.storage.models.GroupModel;
 import ch.threema.storage.models.ballot.BallotModel;
 
 import static org.mockito.Matchers.any;
-import static org.mockito.Matchers.anyVararg;
-import static org.mockito.Matchers.eq;
 import static org.mockito.Mockito.atLeast;
 import static org.mockito.Mockito.never;
 import static org.mockito.Mockito.times;
-import static org.mockito.Mockito.validateMockitoUsage;
 import static org.mockito.Mockito.verify;
 import static org.powermock.api.mockito.PowerMockito.doCallRealMethod;
 import static org.powermock.api.mockito.PowerMockito.mock;
 import static org.powermock.api.mockito.PowerMockito.mockStatic;
-import static org.powermock.api.mockito.PowerMockito.spy;
 import static org.powermock.api.mockito.PowerMockito.when;
 import static org.powermock.api.mockito.PowerMockito.whenNew;
 
 @RunWith(PowerMockRunner.class)
-@PrepareForTest({BallotModelFactory.class, ContentValues.class, DatabaseUtil.class})
+@PrepareForTest({BallotModelFactory.class, ContentValues.class, DatabaseUtil.class, SQLiteDatabase.class})
 public class BallotModelFactoryTest {
-	final SQLiteDatabase readableDatabaseMock = mock(SQLiteDatabase.class);
-	final SQLiteDatabase writeableDatabaseMock = mock(SQLiteDatabase.class);
-	final ColumnIndexCache columnIndexCacheMock = mock(ColumnIndexCache.class);
+	final SQLiteDatabase readableDatabaseMock = PowerMockito.mock(SQLiteDatabase.class);
+	final SQLiteDatabase writeableDatabaseMock = PowerMockito.mock(SQLiteDatabase.class);
+	final ColumnIndexCache columnIndexCacheMock = PowerMockito.mock(ColumnIndexCache.class);
 
 	BallotModelFactory factory = mock(BallotModelFactory.class);
 
@@ -442,7 +438,8 @@ public class BallotModelFactoryTest {
 		String[] convertedArgumentsMock = new String[]{"a", "b", "c"};
 		Cursor cursorMock = mock(Cursor.class);
 
-		when(filterMock.getReceiver()).thenReturn(receiverMock);
+		//noinspection unchecked,rawtypes
+		when(filterMock.getReceiver()).thenReturn((MessageReceiver) receiverMock);
 		when(filterMock.createdOrNotVotedByIdentity()).thenReturn(null);
 		when(filterMock.getStates()).thenReturn(new BallotModel.State[]{BallotModel.State.OPEN, BallotModel.State.TEMPORARY});
 		when(receiverMock.getType()).thenReturn(MessageReceiver.Type_GROUP);
@@ -485,7 +482,8 @@ public class BallotModelFactoryTest {
 		String[] convertedArgumentsMock = new String[]{"a", "b", "c"};
 		Cursor cursorMock = mock(Cursor.class);
 
-		when(filterMock.getReceiver()).thenReturn(receiverMock);
+		//noinspection unchecked,rawtypes
+		when(filterMock.getReceiver()).thenReturn((MessageReceiver) receiverMock);
 		when(filterMock.createdOrNotVotedByIdentity()).thenReturn(null);
 		when(filterMock.getStates()).thenReturn(new BallotModel.State[]{BallotModel.State.OPEN, BallotModel.State.TEMPORARY});
 		when(receiverMock.getType()).thenReturn(MessageReceiver.Type_CONTACT);
@@ -532,7 +530,8 @@ public class BallotModelFactoryTest {
 		String[] convertedArgumentsMock = new String[]{"a", "b", "c"};
 		Cursor cursorMock = mock(Cursor.class);
 
-		when(filterMock.getReceiver()).thenReturn(receiverMock);
+		//noinspection unchecked,rawtypes
+		when(filterMock.getReceiver()).thenReturn((MessageReceiver) receiverMock);
 		when(filterMock.createdOrNotVotedByIdentity()).thenReturn("FILTER-ID");
 		when(filterMock.getStates()).thenReturn(new BallotModel.State[]{BallotModel.State.OPEN, BallotModel.State.TEMPORARY});
 		when(receiverMock.getType()).thenReturn(MessageReceiver.Type_GROUP);
@@ -572,7 +571,8 @@ public class BallotModelFactoryTest {
 		String[] convertedArgumentsMock = new String[]{"a", "b", "c"};
 		Cursor cursorMock = mock(Cursor.class);
 
-		when(filterMock.getReceiver()).thenReturn(receiverMock);
+		//noinspection unchecked,rawtypes
+		when(filterMock.getReceiver()).thenReturn((MessageReceiver) receiverMock);
 		when(filterMock.createdOrNotVotedByIdentity()).thenReturn(null);
 		when(filterMock.getStates()).thenReturn(null);
 		when(receiverMock.getType()).thenReturn(MessageReceiver.Type_CONTACT);
@@ -605,7 +605,8 @@ public class BallotModelFactoryTest {
 		BallotService.BallotFilter filterMock = mock(BallotService.BallotFilter.class);
 		DistributionListMessageReceiver receiverMock = mock(DistributionListMessageReceiver.class);
 
-		when(filterMock.getReceiver()).thenReturn(receiverMock);
+		//noinspection unchecked,rawtypes
+		when(filterMock.getReceiver()).thenReturn((MessageReceiver) receiverMock);
 		when(filterMock.createdOrNotVotedByIdentity()).thenReturn(null);
 		when(filterMock.getStates()).thenReturn(null);
 		when(receiverMock.getType()).thenReturn(MessageReceiver.Type_DISTRIBUTION_LIST);
diff --git a/domain/src/main/java/ch/threema/base/utils/Utils.java b/domain/src/main/java/ch/threema/base/utils/Utils.java
index 2411773b..6a9167c0 100644
--- a/domain/src/main/java/ch/threema/base/utils/Utils.java
+++ b/domain/src/main/java/ch/threema/base/utils/Utils.java
@@ -98,7 +98,7 @@ public class Utils {
 		return byteArrayToHexString(sha256bytes);
 	}
 
-	public static @NonNull byte[] intToByteArray(int value) {
+	public static @NonNull byte[] intToByteArrayBigEndian(int value) {
 		return new byte[] {
 				(byte)(value >>> 24),
 				(byte)(value >>> 16),
@@ -107,11 +107,11 @@ public class Utils {
 		};
 	}
 
-	public static int byteArrayToInt(@NonNull byte[] bytes) {
+	public static int byteArrayToIntBigEndian(@NonNull byte[] bytes) {
 		 return bytes[0] << 24 | (bytes[1] & 0xFF) << 16 | (bytes[2] & 0xFF) << 8 | (bytes[3] & 0xFF);
 	}
 
-	public static @NonNull byte[] longToByteArray(long value) {
+	public static @NonNull byte[] longToByteArrayBigEndian(long value) {
 		byte[] result = new byte[8];
 		for (int i = 7; i >= 0; i--) {
 			result[i] = (byte)(value & 0xFF);
@@ -120,7 +120,7 @@ public class Utils {
 		return result;
 	}
 
-	public static long byteArrayToLong(final @NonNull byte[] bytes) {
+	public static long byteArrayToLongBigEndian(final @NonNull byte[] bytes) {
 		long result = 0;
 		for (int i = 0; i < 8; i++) {
 			result <<= 8;
diff --git a/domain/src/main/java/ch/threema/domain/fs/DHSession.java b/domain/src/main/java/ch/threema/domain/fs/DHSession.java
index 2f8fabd1..2e29058b 100644
--- a/domain/src/main/java/ch/threema/domain/fs/DHSession.java
+++ b/domain/src/main/java/ch/threema/domain/fs/DHSession.java
@@ -23,6 +23,8 @@ package ch.threema.domain.fs;
 
 import com.neilalexander.jnacl.NaCl;
 
+import org.slf4j.Logger;
+
 import java.util.Arrays;
 import java.util.Objects;
 
@@ -30,20 +32,156 @@ import androidx.annotation.NonNull;
 import androidx.annotation.Nullable;
 import ch.threema.base.ThreemaException;
 import ch.threema.base.crypto.ThreemaKDF;
+import ch.threema.base.utils.LoggingUtil;
 import ch.threema.base.utils.Utils;
 import ch.threema.domain.models.Contact;
+import ch.threema.domain.protocol.csp.messages.BadMessageException;
+import ch.threema.domain.protocol.csp.messages.fs.ForwardSecurityDataMessage;
 import ch.threema.domain.stores.IdentityStoreInterface;
+import ch.threema.protobuf.csp.e2e.fs.Encapsulated;
+import ch.threema.protobuf.csp.e2e.fs.Version;
+import ch.threema.protobuf.csp.e2e.fs.VersionRange;
 import ove.crypto.digest.Blake2b;
 
 /**
  * ECDH key exchange and ratcheting session for forward security
  */
 public class DHSession {
+	private final static Logger logger = LoggingUtil.getThreemaLogger("DHSession");
+
 	protected static final String KE_SALT_2DH_PREFIX = "ke-2dh-";
 	protected static final String KE_SALT_4DH_PREFIX = "ke-4dh-";
 
 	public static final String KDF_PERSONAL = "3ma-e2e";
 
+	public static final Version SUPPORTED_VERSION_MIN = Version.V1_0;
+	public static final Version SUPPORTED_VERSION_MAX = Version.V1_1;
+	public static final VersionRange SUPPORTED_VERSION_RANGE = VersionRange.newBuilder()
+		.setMin(SUPPORTED_VERSION_MIN.getNumber())
+		.setMax(SUPPORTED_VERSION_MAX.getNumber())
+		.build();
+
+	public enum State {
+		/**
+		 * Locally initiated, out 2DH, in none
+		 */
+		L20,
+
+		/**
+		 * Remotely or locally initiated, out 4DH, in 4DH
+		 */
+		RL44,
+
+		/**
+		 * Remotely initiated, in 2DH, out none
+		 */
+		R20,
+
+		/**
+		 * Remotely initiated, in 2DH, out 4DH
+		 */
+		R24,
+	}
+
+	public static class DHVersions {
+		/** Version for local/outgoing 4DH messages */
+		@NonNull public final Version local;
+		/** Version for remote/incoming 4DH messages */
+		@NonNull public final Version remote;
+
+		/**
+		 * Restore the 4DH versions from a database.
+		 */
+		@Nullable
+		public static DHVersions restored(@Nullable Version local, @Nullable Version remote) {
+			if (local != null && remote != null) {
+				return new DHVersions(local, remote);
+			} else {
+				return null;
+			}
+		}
+
+		/**
+		 * Bootstrap the initial 4DH versions from the negotiated version of the Init/Accept flow.
+		 */
+		@NonNull public static DHVersions negotiated(@NonNull Version version) {
+			return new DHVersions(version, version);
+		}
+
+		/**
+		 * 4DH versions to be updated from older versions after successful processing of an
+		 * encapsulated message.
+		 */
+		@NonNull public static DHVersions updated(@NonNull Version local, @NonNull Version remote) {
+			return new DHVersions(local, remote);
+		}
+
+		private DHVersions(@NonNull Version local, @NonNull Version remote) {
+			this.local = local;
+			this.remote = remote;
+		}
+
+		@Override
+		public String toString() {
+			return String.format("(local=%s, remote=%s)", local, remote);
+		}
+
+		@Override
+		public boolean equals(Object o) {
+			if (this == o) return true;
+			if (o == null || getClass() != o.getClass()) return false;
+			DHVersions that = (DHVersions) o;
+			return local == that.local && remote == that.remote;
+		}
+
+		@Override
+		public int hashCode() {
+			return Objects.hash(local, remote);
+		}
+	}
+
+	public static class ProcessedVersions {
+		/** The effective offered version of the associated message. */
+		public final int offeredVersion;
+		/** The effective applied version of the associated message. */
+		@NonNull public final Version appliedVersion;
+		/** The resulting versions to be committed when the message has been processed. */
+		@Nullable public final DHVersions pending4DHVersions;
+
+		public ProcessedVersions(int offeredVersion, @NonNull Version appliedVersion, @Nullable DHVersions pending4DHVersions) {
+			this.offeredVersion = offeredVersion;
+			this.appliedVersion = appliedVersion;
+			this.pending4DHVersions = pending4DHVersions;
+		}
+	}
+
+	public static class UpdatedVersionsSnapshot {
+		/** Versions before the update. */
+		@NonNull public final DHVersions before;
+		/** Versions after the update. */
+		@NonNull public final DHVersions after;
+
+		private UpdatedVersionsSnapshot(@NonNull DHVersions before, @NonNull DHVersions after) {
+			this.before = before;
+			this.after = after;
+		}
+
+		@Override
+		public String toString() {
+			return String.format("%s -> %s", before, after);
+		}
+	}
+
+	/**
+	 * Indicates that an encapsulated message cannot be processed. The FS session should be
+	 * terminated and the associated message should be `Reject`ed.
+	 */
+	public static class RejectMessageError extends Exception {
+		public RejectMessageError(@NonNull String reason) {
+			super(reason);
+		}
+	}
+
 	/**
 	 * 16 byte session ID, used for detecting when the other party has lost
 	 * the session information, has restored an old backup etc.
@@ -71,6 +209,12 @@ public class DHSession {
 	 */
 	@NonNull private final byte[] myEphemeralPublicKey;
 
+	/**
+	 * Version used for local (outgoing) / remote (incoming) 4DH messages.
+	 * `null` in case the 4DH message version has not been negotiated yet.
+	 */
+	@Nullable private DHVersions current4DHVersions;
+
 	@Nullable protected KDFRatchet myRatchet2DH;
 	@Nullable protected KDFRatchet myRatchet4DH;
 	@Nullable protected KDFRatchet peerRatchet2DH;
@@ -98,12 +242,15 @@ public class DHSession {
 	 * Create a new DHSession as a responder.
 	 */
 	public DHSession(@NonNull DHSessionId id,
+					 @NonNull VersionRange peerSupportedVersionRange,
 	                 byte[] peerEphemeralPublicKey,
 	                 Contact contact,
-	                 IdentityStoreInterface identityStoreInterface) {
+	                 IdentityStoreInterface identityStoreInterface) throws BadMessageException {
+		final Version negotiatedVersion = DHSession.negotiateMajorAndMinorVersion(
+			SUPPORTED_VERSION_RANGE, peerSupportedVersionRange);
 
 		if (peerEphemeralPublicKey.length != NaCl.SECRETKEYBYTES) {
-			throw new IllegalArgumentException("Invalid peer ephemeral public key length");
+			throw new BadMessageException("Invalid peer ephemeral public key length");
 		}
 
 		this.id = id;
@@ -111,16 +258,20 @@ public class DHSession {
 		this.peerIdentity = contact.getIdentity();
 
 		this.myEphemeralPublicKey = completeKeyExchange(peerEphemeralPublicKey, contact, identityStoreInterface);
+		this.current4DHVersions = DHVersions.negotiated(negotiatedVersion);
 	}
 
 	/**
-	 * Create a DHSession with existing data, e.g. read from a persistent store.
+	 * Create a DHSession with existing data, e.g. read from a persistent store. Note that an
+	 * IllegalDHSessionStateException may be thrown. In this case we should terminate and delete the
+	 * session and show a status message to the user.
 	 */
 	public DHSession(@NonNull DHSessionId id,
                      @NonNull String myIdentity,
                      @NonNull String peerIdentity,
                      @Nullable byte[] myEphemeralPrivateKey,
                      @NonNull byte[] myEphemeralPublicKey,
+					 @Nullable DHVersions current4DHVersions,
                      @Nullable KDFRatchet myRatchet2DH,
                      @Nullable KDFRatchet myRatchet4DH,
                      @Nullable KDFRatchet peerRatchet2DH,
@@ -130,10 +281,20 @@ public class DHSession {
 		this.peerIdentity = peerIdentity;
 		this.myEphemeralPrivateKey = myEphemeralPrivateKey;
 		this.myEphemeralPublicKey = myEphemeralPublicKey;
-		this.setMyRatchet2DH(myRatchet2DH);
-		this.setMyRatchet4DH(myRatchet4DH);
-		this.setPeerRatchet2DH(peerRatchet2DH);
-		this.setPeerRatchet4DH(peerRatchet4DH);
+		this.current4DHVersions = current4DHVersions;
+		setMyRatchet2DH(myRatchet2DH);
+		setMyRatchet4DH(myRatchet4DH);
+		setPeerRatchet2DH(peerRatchet2DH);
+		setPeerRatchet4DH(peerRatchet4DH);
+
+		// The database may restore 4DH versions when there are none because the DB migration adds
+		// a `DEFAULT` clause. We need to override it to `null` in L20 and R20 state.
+		// Note that this call may produce an IllegalDHSessionStateException. In this case we should
+		// terminate and delete the session and show a status message to the user.
+		State state = getState();
+		if (state == State.L20 || state == State.R20) {
+			this.current4DHVersions = null;
+		}
 	}
 
 	@NonNull public DHSessionId getId() {
@@ -159,6 +320,14 @@ public class DHSession {
 		return myEphemeralPrivateKey;
 	}
 
+	/**
+	 * Warning: Only exported for storing the session, don't use it anywhere else!
+	 */
+	@Nullable
+	public DHVersions getCurrent4DHVersions() {
+		return current4DHVersions;
+	}
+
 	@Nullable
 	public KDFRatchet getMyRatchet2DH() {
 		return myRatchet2DH;
@@ -179,14 +348,316 @@ public class DHSession {
 		return peerRatchet4DH;
 	}
 
+	/**
+	 * Get the state of the DH session. Note that this state depends on the availability of the
+	 * ratchets, which needs great care when adding and remove the ratchets.
+	 *
+	 * @return the current state of the DH session
+	 */
+	@NonNull
+	public State getState() {
+		if (myRatchet2DH == null
+			&& myRatchet4DH != null
+			&& peerRatchet2DH == null
+			&& peerRatchet4DH != null) {
+			return State.RL44;
+		} else if (myRatchet2DH == null
+			&& peerRatchet2DH != null
+			&& myRatchet4DH != null
+			&& peerRatchet4DH != null) {
+			return State.R24;
+		} else if (myRatchet2DH != null
+			&& myRatchet4DH == null
+			&& peerRatchet2DH == null
+			&& peerRatchet4DH == null) {
+			return State.L20;
+		} else if (myRatchet2DH == null
+			&& myRatchet4DH == null
+			&& peerRatchet2DH != null
+			&& peerRatchet4DH == null) {
+			return State.R20;
+		} else {
+			throw new IllegalDHSessionStateException(String.format("Illegal DH session state:" +
+					"myRatchet2DH=%s, myRatchet4DH=%s, peerRatchet2DH=%s, peerRatchet4DH=%s",
+				myRatchet2DH != null,
+				myRatchet4DH != null,
+				peerRatchet2DH != null,
+				peerRatchet4DH != null
+			));
+		}
+	}
+
+	/**
+	 * The current negotiated major version plus the maximum supported minor version to offer in
+	 * local/outgoing messages.
+	 */
+	@NonNull
+	public Version getOutgoingOfferedVersion() {
+		@NonNull State state = getState();
+		switch (state) {
+			case L20:
+			case R20:
+				// There should be no 4DH versions in this state
+				if (current4DHVersions != null) {
+					logger.error("getOutgoingOfferedVersion: Unexpected current4DHVersions in L20 state");
+				}
+
+				// TODO(ANDR-2452): We don't save the local/remote `Init` version range at the moment and simply
+				// assume it to be 1.0 if not provided. This is a horrible hack and prevents us from
+				// bumping the minimum version.
+				return Version.V1_0;
+
+			// R24, L44 or R44
+			default:
+				// We expect 4DH versions to be available in these states
+				if (current4DHVersions == null) {
+					logger.error("getOutgoingOfferedVersion: Missing current4DHVersions in state " + state);
+					return Version.V1_0;
+				}
+
+				// Note: It does not matter whether we pick the local or the remote version to determine
+				// the maximum supported minor version as both should always use the same major version.
+				return getSupportedVersionWithin(current4DHVersions.local.getNumber());
+		}
+	}
+
+	/**
+	 * The current negotiated major and minor version to apply on local/outgoing messages.
+	 */
+	@NonNull
+	public Version getOutgoingAppliedVersion() {
+		@NonNull State state = getState();
+		switch (state) {
+			case L20:
+			case R20:
+				// There should be no 4DH versions in this state
+				if (current4DHVersions != null) {
+					logger.error("getOutgoingAppliedVersion: Unexpected current4DHVersions in L20 state");
+				}
+
+				// TODO(ANDR-2452): We don't save the local/remote `Init` version range at the moment and simply
+				// assume it to be 1.0 if not provided. This is a horrible hack and prevents us from
+				// bumping the minimum version.
+				return Version.V1_0;
+
+			// R24, L44 or R44
+			default:
+				// We expect 4DH versions to be available in these states
+				if (current4DHVersions == null) {
+					logger.error("getOutgoingAppliedVersion: Missing current4DHVersions in state " + state);
+					return Version.V1_0;
+				}
+				return current4DHVersions.local;
+		}
+	}
+
+	/**
+	 * The current negotiated major and minor version that is expected to be the bottom line for
+	 * remote/incoming messages.
+	 *
+	 * IMPORTANT: This is always the bottom line version for use in case a message without FS has
+	 * been received. To validate an encapsulated message's versions, use
+	 * processIncomingMessageVersion instead.
+	 */
+	@NonNull
+	public Version getMinimumIncomingAppliedVersion() {
+		@NonNull State state = getState();
+		switch (state) {
+			case L20:
+			case R20:
+				// There should be no 4DH versions in this state
+				if (current4DHVersions != null) {
+					logger.error("getMinimumIncomingAppliedVersion: Unexpected current4DHVersions in L20 state");
+				}
+
+				// TODO(ANDR-2452): We don't save the local/remote `Init` version range at the moment and simply
+				// assume it to be 1.0 if not provided. This is a horrible hack and prevents us from
+				// bumping the minimum version.
+				return Version.V1_0;
+
+			case R24:
+				// Special case for this state where we can receive 2DH or 4DH messages, so the
+				// bottom line is what has been offered in the remote's `Init`.
+
+				// TODO(ANDR-2452): We don't save the remote `Init` version range at the moment and simply
+				// assume it to be 1.0 if not provided. This is a horrible hack and prevents us from
+				// bumping the minimum version.
+				return Version.V1_0;
+
+			// L44 or R44
+			default:
+				// We expect 4DH versions to be available in these states
+				if (current4DHVersions == null) {
+					logger.error("getMinimumIncomingAppliedVersion: Missing current4DHVersions in state " + state);
+					return Version.V1_0;
+				}
+				return current4DHVersions.remote;
+		}
+	}
+
+	/**
+	 * Process the provided versions of an incoming message.
+	 * Returns the processed versions to be committed once the message has been processed.
+	 */
+	@NonNull
+	public ProcessedVersions processIncomingMessageVersion(ForwardSecurityDataMessage message) throws RejectMessageError {
+		// Determine offered and applied version from the message
+		int offeredVersion = message.getOfferedVersion();
+		int rawAppliedVersion = message.getAppliedVersion();
+		if (offeredVersion == Version.UNSPECIFIED_VALUE) {
+			offeredVersion = Version.V1_0_VALUE;
+		}
+		if (rawAppliedVersion == Version.UNSPECIFIED_VALUE) {
+			rawAppliedVersion = offeredVersion;
+		}
+
+		// TODO(ANDR-2452): Clamp hack. Clamping 2DH messages to 1.0 works around an issue where 2DH
+		// messages would be claim to apply 1.1 from older beta versions. This is a horrible hack
+		// and prevents us from bumping the minimum version.
+		if (message.getType() == Encapsulated.DHType.TWODH) {
+			offeredVersion = Version.V1_0_VALUE;
+			rawAppliedVersion = Version.V1_0_VALUE;
+		}
+
+		// The applied version cannot be greater than offered version
+		if (rawAppliedVersion > offeredVersion) {
+			throw new RejectMessageError("Invalid FS versions in message: offered=" + offeredVersion + ", applied=" + rawAppliedVersion);
+		}
+
+		// Handle according to the DH type
+		@NonNull State state = getState();
+		@Nullable Version appliedVersion;
+		@Nullable DHVersions pending4DHVersions;
+		if (message.getType() == Encapsulated.DHType.TWODH) {
+			// A 2DH message is only valid in R20 and R24 state
+			if (state != State.R20 && state != State.R24) {
+				throw new RejectMessageError("Unexpected 2DH message in state " + state);
+			}
+
+			// TODO(ANDR-2452): We don't save the remote `Init` version range at the moment and simply
+			// assume it to be 1.0. This is a horrible hack and prevents us from bumping the minimum
+			// version.
+			@NonNull Version initVersionMin = Version.V1_0;
+
+			// For 2DH messages, the versions must match exactly the minimum version that were
+			// offered in the remote `Init`.
+			if (offeredVersion != initVersionMin.getNumber()) {
+				throw new RejectMessageError("Invalid offered FS version in 2DH message: offered=" + offeredVersion + ", init-version-min=" + initVersionMin);
+			}
+			if (rawAppliedVersion != initVersionMin.getNumber()) {
+				throw new RejectMessageError("Invalid applied FS version in 2DH message: applied=" + rawAppliedVersion + ", init-version-min=" + initVersionMin);
+			}
+
+			// There are no versions to be committed
+			appliedVersion = initVersionMin;
+			pending4DHVersions = null;
+		} else {
+			// A 4DH message is only valid in R24, L44 or R44 state
+			if (state != State.R24 && state != State.RL44) {
+				throw new RejectMessageError("Unexpected 4DH message in state " + state);
+			}
+			if (current4DHVersions == null) {
+				logger.error("Expected local/remote 4DH versions to exist, id={}, state={}", getId(), state);
+				throw new RejectMessageError("Internal FS state mismatch");
+			}
+
+			// Major versions must match, the minor version must be ≥ the respective version
+			if ((offeredVersion & 0xff00) != (current4DHVersions.local.getNumber() & 0xff00)
+				|| (offeredVersion & 0x00ff) < (current4DHVersions.local.getNumber() & 0x00ff)) {
+				throw new RejectMessageError("Invalid offered FS version in message: offered=" + offeredVersion + ", local-4dhv=" + current4DHVersions.local);
+			}
+			if ((rawAppliedVersion & 0xff00) != (current4DHVersions.remote.getNumber() & 0xff00)
+				|| (rawAppliedVersion & 0x00ff) < (current4DHVersions.remote.getNumber() & 0x00ff)) {
+				throw new RejectMessageError("Invalid applied FS version in message: applied=" + rawAppliedVersion + ", remote-4dhv=" + current4DHVersions.remote);
+			}
+
+			// The offered version is allowed to be greater than what we support, so calculate the
+			// maximum commonly supported offered version.
+			//
+			// Note: There should be no gaps, so the resulting version should exist.
+			int rawNewLocalVersion = Math.min(offeredVersion, getSupportedVersionWithin(offeredVersion).getNumber());
+			@Nullable Version newLocalVersion = Version.forNumber(rawNewLocalVersion);
+			if (newLocalVersion == null) {
+				throw new RejectMessageError("Unknown maximum commonly supported offered FS version in message: offered=" + offeredVersion + ", supported=" + getSupportedVersionWithin(offeredVersion) + ", unsupported-common=" + rawNewLocalVersion);
+			}
+
+			// The applied version is not allowed to be greater than what we support (as it depends
+			// on what we have offered in a previous message).
+			appliedVersion = Version.forNumber(rawAppliedVersion);
+			if (appliedVersion == null || rawAppliedVersion > getSupportedVersionWithin(rawAppliedVersion).getNumber()) {
+				throw new RejectMessageError("Unsupported applied FS version in message: applied=" + rawAppliedVersion + ", supported=" + getSupportedVersionWithin(rawAppliedVersion));
+			}
+
+			// Determine versions to be committed as the new bottom line for incoming and outgoing
+			// FS encapsulated messages.
+			pending4DHVersions = DHVersions.updated(newLocalVersion, appliedVersion);
+		}
+
+		return new ProcessedVersions(offeredVersion, appliedVersion, pending4DHVersions);
+	}
+
+	/**
+	 * Update the versions with the processed versions returned from `processIncomingMessageVersion`.
+	 * Returns the updated versions snapshot containing before and after versions, if any have been updated.
+	 */
+	@Nullable
+	public UpdatedVersionsSnapshot commitVersions(@NonNull ProcessedVersions processedVersions) {
+		if (processedVersions.pending4DHVersions == null) {
+			return null;
+		}
+		if (current4DHVersions == null) {
+			logger.error("Expected local/remote 4DH versions to exist, id={}, state={}", getId(), getState());
+			return null;
+		}
+
+		// Check if we need to update the versions
+		boolean needsUpdate = false;
+		if (processedVersions.pending4DHVersions.local != current4DHVersions.local) {
+			logger.info("Updated local/outgoing message version ({} -> {}, id={})",
+				current4DHVersions.local,
+				processedVersions.pending4DHVersions.local,
+				getId()
+			);
+			needsUpdate = true;
+		}
+		if (processedVersions.pending4DHVersions.remote != current4DHVersions.remote) {
+			logger.info("Updated remote/incoming message version ({} -> {}, id={})",
+				current4DHVersions.remote,
+				processedVersions.pending4DHVersions.remote,
+				getId()
+			);
+			needsUpdate = true;
+		}
+
+		// Update versions, if necessary
+		if (needsUpdate) {
+			@NonNull UpdatedVersionsSnapshot versionsSnapshot = new UpdatedVersionsSnapshot(
+				this.current4DHVersions, processedVersions.pending4DHVersions);
+			this.current4DHVersions = processedVersions.pending4DHVersions;
+			return versionsSnapshot;
+		} else {
+			return null;
+		}
+	}
+
 	/**
 	 * Process a DH accept received from the peer.
 	 */
-	public void processAccept(byte[] peerEphemeralPublicKey, @NonNull Contact contact, @NonNull IdentityStoreInterface identityStoreInterface) throws DHSession.MissingEphemeralPrivateKeyException {
+	public void processAccept(
+		@NonNull VersionRange peerSupportedVersionRange,
+		byte[] peerEphemeralPublicKey,
+		@NonNull Contact contact,
+		@NonNull IdentityStoreInterface identityStoreInterface
+	) throws DHSession.MissingEphemeralPrivateKeyException, BadMessageException {
+		// Note: This mitigates accepting twice because we remove the ephemeral private key after the first accept.
 		if (myEphemeralPrivateKey == null) {
 			throw new DHSession.MissingEphemeralPrivateKeyException("Missing ephemeral private key");
 		}
 
+		// Determine negotiated version
+		final Version negotiatedVersion = DHSession.negotiateMajorAndMinorVersion(
+			SUPPORTED_VERSION_RANGE, peerSupportedVersionRange);
+
 		// Derive 4DH root key
 		byte[] dhStaticStatic = identityStoreInterface.calcSharedSecret(contact.getPublicKey());
 		byte[] dhStaticEphemeral = new NaCl(myEphemeralPrivateKey, contact.getPublicKey()).getPrecomputed();
@@ -194,13 +665,16 @@ public class DHSession {
 		byte[] dhEphemeralEphemeral = new NaCl(myEphemeralPrivateKey, peerEphemeralPublicKey).getPrecomputed();
 		this.initKDF4DH(dhStaticStatic, dhStaticEphemeral, dhEphemeralStatic, dhEphemeralEphemeral);
 
+		// Validation complete, update state
 		// myPrivateKey is not needed anymore at this point
 		Arrays.fill(this.myEphemeralPrivateKey, (byte) 0);
 		this.myEphemeralPrivateKey = null;
+		this.current4DHVersions = DHVersions.negotiated(negotiatedVersion);
 
 		// My 2DH ratchet is not needed anymore at this point, but the peer 2DH ratchet is still
 		// needed until we receive the first 4DH message, as there may be some 2DH messages still
-		// in flight.
+		// in flight. Note that this is also needed to be able to correctly determine the current
+		// session state.
 		this.setMyRatchet2DH(null);
 	}
 
@@ -253,6 +727,49 @@ public class DHSession {
 		this.peerRatchet4DH = peerRatchet4DH;
 	}
 
+	/**
+	 * Get a supported version within the provided major version range.
+	 */
+	@NonNull
+	private static Version getSupportedVersionWithin(int majorVersion) {
+		switch ((majorVersion & 0xff00)) {
+			case Version.V1_0_VALUE:
+				return Version.V1_1;
+			default:
+				throw new IllegalStateException("Unknown major version: " + majorVersion);
+		}
+	}
+
+	private static @NonNull Version negotiateMajorAndMinorVersion(
+		@NonNull VersionRange localVersion,
+		@NonNull VersionRange remoteVersion
+	) throws BadMessageException {
+		// Older clients may not provide a version range. Map min and max to V1.0 in that case.
+		if (remoteVersion.getMin() == 0 && remoteVersion.getMax() == 0) {
+			remoteVersion = VersionRange.newBuilder()
+				.setMin(Version.V1_0_VALUE)
+				.setMax(Version.V1_0_VALUE)
+				.build();
+		}
+
+		// Validate version range
+		if (remoteVersion.getMax() < remoteVersion.getMin()) {
+			throw new BadMessageException("Invalid FS version range: min=" + remoteVersion.getMin() + ", max=" + remoteVersion.getMax());
+		}
+
+		// Ensure the version range is supported
+		if (remoteVersion.getMin() > localVersion.getMax() || localVersion.getMin() > remoteVersion.getMax()) {
+			throw new BadMessageException("Unsupported minimum FS version: local-min=" + localVersion.getMin() + ", remote-min=" + remoteVersion.getMin());
+		}
+
+		// Take the minimum of the maximum supported versions
+		final Version negotiatedVersion = Version.forNumber(Math.min(localVersion.getMax(), remoteVersion.getMax()));
+		if (negotiatedVersion == null || negotiatedVersion == Version.UNSPECIFIED) {
+			throw new BadMessageException("Unable to negotiate FS version: local-max=" + localVersion.getMax() + ", remote-max=" + remoteVersion.getMax());
+		}
+		return negotiatedVersion;
+	}
+
 	private byte[] completeKeyExchange(byte[] peerEphemeralPublicKey, Contact contact, IdentityStoreInterface identityStoreInterface) {
 		byte[] myEphemeralPublicKeyLocal = new byte[NaCl.PUBLICKEYBYTES];
 		byte[] myEphemeralPrivateKeyLocal = new byte[NaCl.SECRETKEYBYTES];
@@ -292,4 +809,19 @@ public class DHSession {
 			super(msg);
 		}
 	}
+
+	public static class IllegalDHSessionStateException extends RuntimeException {
+		public IllegalDHSessionStateException(String msg) {
+			super(msg);
+		}
+	}
+
+	@Override
+	public String toString() {
+		return String.format(
+			"(id=%s, 4dh-versions=%s)",
+			getId(),
+			current4DHVersions
+		);
+	}
 }
diff --git a/domain/src/main/java/ch/threema/domain/fs/KDFRatchet.java b/domain/src/main/java/ch/threema/domain/fs/KDFRatchet.java
index fa6d0360..8c10a950 100644
--- a/domain/src/main/java/ch/threema/domain/fs/KDFRatchet.java
+++ b/domain/src/main/java/ch/threema/domain/fs/KDFRatchet.java
@@ -36,7 +36,7 @@ public class KDFRatchet {
 	/**
 	 * Upper limit on how many times we are willing to turn the ratchet to catch up with a peer.
 	 */
-	private static final long MAX_COUNTER_INCREMENT = 10000;
+	private static final long MAX_COUNTER_INCREMENT = 25000;
 
 	private static final String KDF_SALT_CK = "kdf-ck";
 	private static final String KDF_SALT_AEK = "kdf-aek";
diff --git a/domain/src/main/java/ch/threema/domain/models/GroupId.java b/domain/src/main/java/ch/threema/domain/models/GroupId.java
index fae78fbb..76b52270 100644
--- a/domain/src/main/java/ch/threema/domain/models/GroupId.java
+++ b/domain/src/main/java/ch/threema/domain/models/GroupId.java
@@ -56,7 +56,7 @@ public class GroupId implements Serializable {
 	}
 
 	public GroupId(long groupId) {
-		this.value = Utils.longToByteArray(groupId);
+		this.value = Utils.longToByteArrayBigEndian(groupId);
 	}
 
 	public GroupId(String groupId) {
@@ -73,11 +73,11 @@ public class GroupId implements Serializable {
 	}
 
 	public int toInt() {
-		return Utils.byteArrayToInt(this.value);
+		return Utils.byteArrayToIntBigEndian(this.value);
 	}
 
 	public long toLong() {
-		return Utils.byteArrayToLong(this.value);
+		return Utils.byteArrayToLongBigEndian(this.value);
 	}
 
 	@Override
diff --git a/domain/src/main/java/ch/threema/domain/models/IdentityValue.java b/domain/src/main/java/ch/threema/domain/models/IdentityValue.java
index 5afb15a5..0aab343e 100644
--- a/domain/src/main/java/ch/threema/domain/models/IdentityValue.java
+++ b/domain/src/main/java/ch/threema/domain/models/IdentityValue.java
@@ -54,7 +54,7 @@ public class IdentityValue {
 	 * @throws InvalidIdentityException if the long value is not a valid Threema ID
 	 */
 	public static @NonNull IdentityValue fromLong(long value) throws InvalidIdentityException {
-		return new IdentityValue(Utils.longToByteArray(value));
+		return new IdentityValue(Utils.longToByteArrayBigEndian(value));
 	}
 
 	public static @NonNull IdentityValue fromHexString(@NonNull String value) throws InvalidIdentityException {
diff --git a/domain/src/main/java/ch/threema/domain/protocol/api/work/WorkData.java b/domain/src/main/java/ch/threema/domain/protocol/api/work/WorkData.java
index a2213b2e..50595a71 100644
--- a/domain/src/main/java/ch/threema/domain/protocol/api/work/WorkData.java
+++ b/domain/src/main/java/ch/threema/domain/protocol/api/work/WorkData.java
@@ -24,8 +24,12 @@ package ch.threema.domain.protocol.api.work;
 import java.util.ArrayList;
 import java.util.List;
 
+import androidx.annotation.NonNull;
+
 public class WorkData {
 	public final List<WorkContact> workContacts = new ArrayList<>();
+
+	@NonNull
 	public final WorkMDMSettings mdm = new WorkMDMSettings();
 	public final WorkDirectorySettings directory = new WorkDirectorySettings();
 	public final WorkOrganization organization = new WorkOrganization();
diff --git a/domain/src/main/java/ch/threema/domain/protocol/api/work/WorkMDMSettings.java b/domain/src/main/java/ch/threema/domain/protocol/api/work/WorkMDMSettings.java
index 7ffea053..fa2396b2 100644
--- a/domain/src/main/java/ch/threema/domain/protocol/api/work/WorkMDMSettings.java
+++ b/domain/src/main/java/ch/threema/domain/protocol/api/work/WorkMDMSettings.java
@@ -24,10 +24,23 @@ package ch.threema.domain.protocol.api.work;
 import java.io.Serializable;
 import java.util.HashMap;
 import java.util.Map;
+import java.util.Objects;
 
 public class WorkMDMSettings implements Serializable {
 	// if true, parameters set here override those set by an AppConfig-style MDM
 	public boolean override = false;
 	public Map<String, Object> parameters = new HashMap<>();
 
+	@Override
+	public boolean equals(Object o) {
+		if (this == o) return true;
+		if (!(o instanceof WorkMDMSettings)) return false;
+		WorkMDMSettings that = (WorkMDMSettings) o;
+		return override == that.override && Objects.equals(parameters, that.parameters);
+	}
+
+	@Override
+	public int hashCode() {
+		return Objects.hash(override, parameters);
+	}
 }
diff --git a/domain/src/main/java/ch/threema/domain/protocol/blob/BlobUploader.java b/domain/src/main/java/ch/threema/domain/protocol/blob/BlobUploader.java
index c3abc022..d194e536 100644
--- a/domain/src/main/java/ch/threema/domain/protocol/blob/BlobUploader.java
+++ b/domain/src/main/java/ch/threema/domain/protocol/blob/BlobUploader.java
@@ -31,6 +31,7 @@ import java.io.InputStream;
 import java.net.HttpURLConnection;
 import java.net.ProtocolException;
 import java.net.URL;
+import java.nio.charset.StandardCharsets;
 
 import javax.net.ssl.HttpsURLConnection;
 
@@ -59,7 +60,7 @@ public class BlobUploader {
 	private final ServerAddressProvider serverAddressProvider;
 	private final boolean ipv6;
 
-	private final InputStream blobInputStream;
+	private final @NonNull InputStream blobInputStream;
 	private final int blobLength;
 	private String authToken;
 	private boolean persist = false;
@@ -72,9 +73,9 @@ public class BlobUploader {
 		this(factory, new ByteArrayInputStream(blobData), blobData.length, ipv6, serverAddressProvider, progressListener);
 	}
 
-	public BlobUploader(
+	private BlobUploader(
 		@NonNull SSLSocketFactoryFactory factory,
-		InputStream blobInputStream,
+		@NonNull InputStream blobInputStream,
 		int blobLength,
 		boolean ipv6,
 		ServerAddressProvider serverAddressProvider,
@@ -143,7 +144,6 @@ public class BlobUploader {
 				if (progressListener != null && blobLength > 0)
 					progressListener.updateProgress(100 * ndone / blobLength);
 			}
-			blobInputStream.close();
 
 			if (cancel) {
 				try {
@@ -159,11 +159,11 @@ public class BlobUploader {
 			}
 
 			bos.write(footerBytes);
-			bos.close();
+			bos.flush();
 
 			String blobIdHex;
 			try (InputStream blobIdInputStream = urlConnection.getInputStream()) {
-				blobIdHex = IOUtils.toString(blobIdInputStream);
+				blobIdHex = IOUtils.toString(blobIdInputStream, StandardCharsets.UTF_8);
 			}
 
 			if (blobIdHex == null) {
@@ -190,11 +190,9 @@ public class BlobUploader {
 			return blobId;
 		} finally {
 			urlConnection.disconnect();
-			if (blobInputStream != null) {
-				try {
-					blobInputStream.close();
-				} catch (IOException ignored) {}
-			}
+			try {
+				blobInputStream.close();
+			} catch (IOException ignored) {}
 		}
 	}
 
diff --git a/domain/src/main/java/ch/threema/domain/protocol/csp/ProtocolDefines.java b/domain/src/main/java/ch/threema/domain/protocol/csp/ProtocolDefines.java
index 5aa12ad8..ac9fcf53 100644
--- a/domain/src/main/java/ch/threema/domain/protocol/csp/ProtocolDefines.java
+++ b/domain/src/main/java/ch/threema/domain/protocol/csp/ProtocolDefines.java
@@ -110,6 +110,7 @@ public class ProtocolDefines {
 	public static final int MSGTYPE_AUTH_TOKEN = 0xff;
 
 	/* message flags */
+	// Note: Do not forget to update AbstractMessage#getMessageTypeDefaultFlags when adding a flag
 	public static final int MESSAGE_FLAG_SEND_PUSH = 0x01;
 	public static final int MESSAGE_FLAG_NO_SERVER_QUEUING = 0x02;
 	public static final int MESSAGE_FLAG_NO_SERVER_ACK = 0x04;
diff --git a/domain/src/main/java/ch/threema/domain/protocol/csp/coders/MessageCoder.java b/domain/src/main/java/ch/threema/domain/protocol/csp/coders/MessageCoder.java
index 36c3c715..32f970bb 100644
--- a/domain/src/main/java/ch/threema/domain/protocol/csp/coders/MessageCoder.java
+++ b/domain/src/main/java/ch/threema/domain/protocol/csp/coders/MessageCoder.java
@@ -45,6 +45,7 @@ import ch.threema.domain.models.Contact;
 import ch.threema.domain.models.GroupId;
 import ch.threema.domain.models.MessageId;
 import ch.threema.domain.protocol.csp.ProtocolDefines;
+import ch.threema.domain.protocol.csp.messages.AbstractGroupMessage;
 import ch.threema.domain.protocol.csp.messages.AbstractMessage;
 import ch.threema.domain.protocol.csp.messages.BadMessageException;
 import ch.threema.domain.protocol.csp.messages.BoxAudioMessage;
@@ -52,9 +53,9 @@ import ch.threema.domain.protocol.csp.messages.BoxImageMessage;
 import ch.threema.domain.protocol.csp.messages.BoxLocationMessage;
 import ch.threema.domain.protocol.csp.messages.BoxTextMessage;
 import ch.threema.domain.protocol.csp.messages.BoxVideoMessage;
-import ch.threema.domain.protocol.csp.messages.ContactDeletePhotoMessage;
-import ch.threema.domain.protocol.csp.messages.ContactRequestPhotoMessage;
-import ch.threema.domain.protocol.csp.messages.ContactSetPhotoMessage;
+import ch.threema.domain.protocol.csp.messages.ContactDeleteProfilePictureMessage;
+import ch.threema.domain.protocol.csp.messages.ContactRequestProfilePictureMessage;
+import ch.threema.domain.protocol.csp.messages.ContactSetProfilePictureMessage;
 import ch.threema.domain.protocol.csp.messages.DeliveryReceiptMessage;
 import ch.threema.domain.protocol.csp.messages.GroupAudioMessage;
 import ch.threema.domain.protocol.csp.messages.GroupCreateMessage;
@@ -100,6 +101,7 @@ import ch.threema.domain.protocol.csp.messages.voip.VoipICECandidatesMessage;
 import ch.threema.domain.stores.ContactStore;
 import ch.threema.domain.stores.IdentityStoreInterface;
 import ch.threema.protobuf.csp.e2e.MessageMetadata;
+import ch.threema.protobuf.csp.e2e.fs.Version;
 
 import static java.nio.charset.StandardCharsets.UTF_8;
 
@@ -131,7 +133,7 @@ public class MessageCoder {
 	 * @throws BadMessageException if the message cannot be decrypted successfully
 	 * @throws MissingPublicKeyException if the sender's public key cannot be obtained
 	 */
-	public AbstractMessage decode(@NonNull MessageBox boxmsg, boolean fetch) throws BadMessageException, MissingPublicKeyException {
+	public @NonNull AbstractMessage decode(@NonNull MessageBox boxmsg, boolean fetch) throws BadMessageException, MissingPublicKeyException {
 
 		if (!boxmsg.getToIdentity().equals(identityStore.getIdentity())) {
 			throw new BadMessageException("Message is not for own identity, cannot decode");
@@ -171,40 +173,38 @@ public class MessageCoder {
 			contactStore.addContact(fetchedContact, result.addHidden);
 		}
 
-		if (result.msg != null) {
-			/* copy header attributes from boxed message */
-			result.msg.setFromIdentity(boxmsg.getFromIdentity());
-			result.msg.setToIdentity(boxmsg.getToIdentity());
-			result.msg.setMessageId(boxmsg.getMessageId());
-			result.msg.setDate(boxmsg.getDate());
-			result.msg.setMessageFlags(boxmsg.getFlags());
-			result.msg.setPushFromName(boxmsg.getPushFromName());
-
-			// Decrypt metadata, if present
-			if (boxmsg.getMetadataBox() != null) {
-				MetadataCoder coder = new MetadataCoder(identityStore);
-				try {
-					MessageMetadata metadata = coder.decode(boxmsg.getNonce(), boxmsg.getMetadataBox(), fetchedContact.getPublicKey());
-
-					// Ensure message ID matches envelope message ID (so the server cannot swap it and
-					// cause messages to be misquoted or delivery receipts to be swapped)
-					if (metadata.getMessageId() != 0) {
-						MessageId metadataMessageId = new MessageId(metadata.getMessageId());
-						if (!metadataMessageId.equals(boxmsg.getMessageId())) {
-							throw new BadMessageException("Metadata message ID does not match envelope message ID");
-						}
-					}
-
-					// Take date from encrypted metadata
-					if (metadata.getCreatedAt() != 0) {
-						result.msg.setDate(new Date(metadata.getCreatedAt()));
+		/* copy header attributes from boxed message */
+		result.msg.setFromIdentity(boxmsg.getFromIdentity());
+		result.msg.setToIdentity(boxmsg.getToIdentity());
+		result.msg.setMessageId(boxmsg.getMessageId());
+		result.msg.setDate(boxmsg.getDate());
+		result.msg.setMessageFlags(boxmsg.getFlags());
+		result.msg.setPushFromName(boxmsg.getPushFromName());
+
+		// Decrypt metadata, if present
+		if (boxmsg.getMetadataBox() != null) {
+			MetadataCoder coder = new MetadataCoder(identityStore);
+			try {
+				MessageMetadata metadata = coder.decode(boxmsg.getNonce(), boxmsg.getMetadataBox(), fetchedContact.getPublicKey());
+
+				// Ensure message ID matches envelope message ID (so the server cannot swap it and
+				// cause messages to be misquoted or delivery receipts to be swapped)
+				if (metadata.getMessageId() != 0) {
+					MessageId metadataMessageId = new MessageId(metadata.getMessageId());
+					if (!metadataMessageId.equals(boxmsg.getMessageId())) {
+						throw new BadMessageException("Metadata message ID does not match envelope message ID");
 					}
+				}
 
-					// Take nickname from encrypted metadata
-					result.msg.setPushFromName(metadata.getNickname());
-				} catch (InvalidProtocolBufferException | ThreemaException e) {
-					throw new BadMessageException("Metadata decode failed", e);
+				// Take date from encrypted metadata
+				if (metadata.getCreatedAt() != 0) {
+					result.msg.setDate(new Date(metadata.getCreatedAt()));
 				}
+
+				// Take nickname from encrypted metadata
+				result.msg.setPushFromName(metadata.getNickname());
+			} catch (InvalidProtocolBufferException | ThreemaException e) {
+				throw new BadMessageException("Metadata decode failed", e);
 			}
 		}
 
@@ -212,26 +212,52 @@ public class MessageCoder {
 	}
 
 	/**
-	 * Decode an encapsulated message (e.g. inside a forward security payload) that has already
-	 * been decrypted, and return it with the same attributes as the outer (envelope) message.
+	 * Decode a FS encapsulated message that has already been decrypted, and return it with the
+	 * same attributes as the outer (envelope) message.
 	 *
 	 * @param data decrypted body
 	 * @param outer outer message
 	 * @param contact sender contact
+	 * @throws BadMessageException if the message cannot be decoded or if the encapsulated message
+	 *   is not allowed to be encapsulated
 	 */
-	public AbstractMessage decodeEncapsulated(byte[] data, AbstractMessage outer, Contact contact) throws BadMessageException {
+	public @NonNull AbstractMessage decodeEncapsulated(
+		@NonNull byte[] data,
+		@NonNull AbstractMessage outer,
+		@NonNull Version appliedVersion,
+		@NonNull Contact contact
+	) throws BadMessageException {
 		DeserializeDataResult result = deserializeData(data, data.length, outer.getFromIdentity(), outer.getToIdentity(), contact);
 
-		if (result.msg != null) {
-			/* copy header attributes from outer message */
-			result.msg.setFromIdentity(outer.getFromIdentity());
-			result.msg.setToIdentity(outer.getToIdentity());
-			result.msg.setMessageId(outer.getMessageId());
-			result.msg.setDate(outer.getDate());
-			result.msg.setMessageFlags(outer.getMessageFlags());
-			result.msg.setPushFromName(outer.getPushFromName());
+		// Filter messages not allowed by any FS version.
+		if (result.msg instanceof ForwardSecurityEnvelopeMessage) {
+			throw new BadMessageException("Unexpected FS envelope encapsulated by an FS message");
 		}
 
+		// Filter messages based on the applied version.
+		switch (appliedVersion) {
+			case V1_0:
+			case V1_1:
+				// Technically, typing-indicator and delivery-receipts are not allowed for V1.0 but
+				// they don't do any harm, so we'll let this slide through for simplicity.
+				//
+				// Disallow encapsulation of group messages for V1.X
+				if (result.msg instanceof AbstractGroupMessage) {
+					throw new BadMessageException("Unexpected group message encapsulated by an FS message");
+				}
+				break;
+			default:
+				throw new BadMessageException("Unhandled FS version when decapsulating: " + appliedVersion);
+		}
+
+		/* copy header attributes from outer message */
+		result.msg.setFromIdentity(outer.getFromIdentity());
+		result.msg.setToIdentity(outer.getToIdentity());
+		result.msg.setMessageId(outer.getMessageId());
+		result.msg.setDate(outer.getDate());
+		result.msg.setMessageFlags(outer.getMessageFlags());
+		result.msg.setPushFromName(outer.getPushFromName());
+
 		return result.msg;
 	}
 
@@ -239,7 +265,6 @@ public class MessageCoder {
 	 * Encrypt this message using the given contact and identity store and return the boxed result.
 	 *
 	 * @return boxed message
-	 * @throws ThreemaException
 	 */
 	public @NonNull
 	MessageBox encode(@NonNull AbstractMessage message, @NonNull NonceFactory nonceFactory) throws ThreemaException {
@@ -332,10 +357,10 @@ public class MessageCoder {
 		}
 	}
 
-	private DeserializeDataResult deserializeData(byte[] data, int realDataLength, String fromIdentity, String toIdentity, Contact contact) throws BadMessageException {
+	private @NonNull DeserializeDataResult deserializeData(byte[] data, int realDataLength, String fromIdentity, String toIdentity, Contact contact) throws BadMessageException {
 		/* first byte of data is type */
 		int type = data[0] & 0xFF;
-		AbstractMessage msg = null;
+		AbstractMessage msg;
 
 		// Set this flag to false for message types that should not trigger a contact creation
 		boolean addContact = contact == null;
@@ -777,7 +802,9 @@ public class MessageCoder {
 				groupBallotCreateMessage.setBallotId(new BallotId(data, pos));
 				pos += ProtocolDefines.BALLOT_ID_LEN;
 
-				groupBallotCreateMessage.setData(BallotData.parse(new String(data, pos, realDataLength - pos, UTF_8)));
+				String jsonObjectString = new String(data, pos, realDataLength - pos, UTF_8);
+				groupBallotCreateMessage.setData(BallotData.parse(jsonObjectString));
+				groupBallotCreateMessage.setRawBallotData(jsonObjectString);
 				msg = groupBallotCreateMessage;
 				break;
 			}
@@ -910,20 +937,20 @@ public class MessageCoder {
 					throw new BadMessageException("Bad length (" + realDataLength + ") for contact set photo message");
 				}
 
-				ContactSetPhotoMessage contactSetPhotoMessage = new ContactSetPhotoMessage();
-				contactSetPhotoMessage.setFromIdentity(fromIdentity);
+				ContactSetProfilePictureMessage contactSetProfilePictureMessage = new ContactSetProfilePictureMessage();
+				contactSetProfilePictureMessage.setFromIdentity(fromIdentity);
 
 				int i = 1;
 				byte[] blobId = new byte[ProtocolDefines.BLOB_ID_LEN];
 				System.arraycopy(data, i, blobId, 0, ProtocolDefines.BLOB_ID_LEN);
 				i += ProtocolDefines.BLOB_ID_LEN;
-				contactSetPhotoMessage.setBlobId(blobId);
-				contactSetPhotoMessage.setSize(EndianUtils.readSwappedInteger(data, i));
+				contactSetProfilePictureMessage.setBlobId(blobId);
+				contactSetProfilePictureMessage.setSize(EndianUtils.readSwappedInteger(data, i));
 				i += 4;
 				byte[] blobKey = new byte[ProtocolDefines.BLOB_KEY_LEN];
 				System.arraycopy(data, i, blobKey, 0, ProtocolDefines.BLOB_KEY_LEN);
-				contactSetPhotoMessage.setEncryptionKey(blobKey);
-				msg = contactSetPhotoMessage;
+				contactSetProfilePictureMessage.setEncryptionKey(blobKey);
+				msg = contactSetProfilePictureMessage;
 
 				break;
 			}
@@ -933,7 +960,7 @@ public class MessageCoder {
 				if (realDataLength != 1) {
 					throw new BadMessageException("Bad length (" + realDataLength + ") for contact delete photo message");
 				}
-				msg = new ContactDeletePhotoMessage();
+				msg = new ContactDeleteProfilePictureMessage();
 
 				break;
 			}
@@ -943,7 +970,7 @@ public class MessageCoder {
 				if (realDataLength != 1) {
 					throw new BadMessageException("Bad length (" + realDataLength + ") for contact request photo message");
 				}
-				msg = new ContactRequestPhotoMessage();
+				msg = new ContactRequestProfilePictureMessage();
 
 				break;
 			}
@@ -996,8 +1023,7 @@ public class MessageCoder {
 			}
 
 			default:
-				MessageCoder.logger.info("Unsupported message type {}", type);
-				break;
+				throw new BadMessageException("Unsupported message type " + type);
 		}
 
 		return new DeserializeDataResult(msg, addContact, addHidden);
@@ -1005,11 +1031,11 @@ public class MessageCoder {
 
 
 	private static class DeserializeDataResult {
-		final AbstractMessage msg;
+		final @NonNull AbstractMessage msg;
 		final boolean addContact;
 		final boolean addHidden;
 
-		public DeserializeDataResult(AbstractMessage msg, boolean addContact, boolean addHidden) {
+		public DeserializeDataResult(@NonNull AbstractMessage msg, boolean addContact, boolean addHidden) {
 			this.msg = msg;
 			this.addContact = addContact;
 			this.addHidden = addHidden;
diff --git a/domain/src/main/java/ch/threema/domain/protocol/csp/connection/MessageProcessorInterface.java b/domain/src/main/java/ch/threema/domain/protocol/csp/connection/MessageProcessorInterface.java
index 8f59cf70..5b84d295 100644
--- a/domain/src/main/java/ch/threema/domain/protocol/csp/connection/MessageProcessorInterface.java
+++ b/domain/src/main/java/ch/threema/domain/protocol/csp/connection/MessageProcessorInterface.java
@@ -21,42 +21,57 @@
 
 package ch.threema.domain.protocol.csp.connection;
 
+import androidx.annotation.NonNull;
+import androidx.annotation.Nullable;
 import androidx.annotation.WorkerThread;
 import ch.threema.domain.protocol.csp.coders.MessageBox;
-import ch.threema.domain.protocol.csp.messages.AbstractMessage;
 
 /**
  * Interface for objects that wish to process incoming messages from the server.
  */
 public interface MessageProcessorInterface {
 	class ProcessIncomingResult {
-		public final boolean processed;
-		public final AbstractMessage abstractMessage;
+		private final boolean processed;
+		private final @Nullable Integer type;
 
-		public ProcessIncomingResult(boolean processed, AbstractMessage abstractMessage) {
+		private ProcessIncomingResult(boolean processed, @Nullable Integer type) {
 			this.processed = processed;
-			this.abstractMessage = abstractMessage;
+			this.type = type;
 		}
 
 		/**
-		 * Processing a message failed. It should not be acked towards the chat server.
+		 * Processing a message failed exceptionally and processing should be retried in a
+		 * subsequent connection. It should not be acked towards the chat server.
 		 */
+		@NonNull
 		public static ProcessIncomingResult failed() {
 			return new ProcessIncomingResult(false, null);
 		}
 
 		/**
-		 * A message should be ignored and dropped. It should be acked towards the chat server.
+		 * A message was successfully processed. It should be acked towards the chat server.
 		 */
-		public static ProcessIncomingResult ignore() {
+		@NonNull
+		public static ProcessIncomingResult processed() {
 			return new ProcessIncomingResult(true, null);
 		}
 
 		/**
 		 * A message was successfully processed. It should be acked towards the chat server.
+		 *
+		 * @param type The type of the message if known.
 		 */
-		public static ProcessIncomingResult ok(AbstractMessage abstractMessage) {
-			return new ProcessIncomingResult(true, abstractMessage);
+		@NonNull
+		public static ProcessIncomingResult processed(@Nullable Integer type) {
+			return new ProcessIncomingResult(true, type);
+		}
+
+		public boolean wasProcessed() {
+			return this.processed;
+		}
+
+		public boolean hasType(int type) {
+			return this.type != null && this.type == type;
 		}
 	}
 
@@ -68,6 +83,7 @@ public interface MessageProcessorInterface {
 	 * @param boxmsg boxed message to be processed
 	 */
 	@WorkerThread
+	@NonNull
 	ProcessIncomingResult processIncomingMessage(MessageBox boxmsg);
 
 	/**
diff --git a/domain/src/main/java/ch/threema/domain/protocol/csp/connection/MessageQueue.java b/domain/src/main/java/ch/threema/domain/protocol/csp/connection/MessageQueue.java
index 5883dc47..652780ba 100644
--- a/domain/src/main/java/ch/threema/domain/protocol/csp/connection/MessageQueue.java
+++ b/domain/src/main/java/ch/threema/domain/protocol/csp/connection/MessageQueue.java
@@ -35,6 +35,7 @@ import java.util.Iterator;
 import java.util.LinkedList;
 import java.util.List;
 
+import androidx.annotation.Nullable;
 import ch.threema.base.ThreemaException;
 import ch.threema.base.utils.LoggingUtil;
 import ch.threema.domain.protocol.csp.coders.MessageCoder;
@@ -58,9 +59,12 @@ public class MessageQueue implements MessageAckListener, ConnectionStateListener
 	private final ContactStore contactStore;
 	private final IdentityStoreInterface identityStore;
 	private final ThreemaConnection con;
+	private ConnectionState connectionState;
 
 	private final LinkedList<MessageBox> queue;
 
+	private MessageEnqueueListener messageEnqueueListener = null;
+
 	public MessageQueue(ContactStore contactStore, IdentityStoreInterface identityStore, ThreemaConnection con) {
 		this.contactStore = contactStore;
 		this.identityStore = identityStore;
@@ -73,11 +77,27 @@ public class MessageQueue implements MessageAckListener, ConnectionStateListener
 		con.addConnectionStateListener(this);
 	}
 
-	public synchronized MessageBox enqueue(AbstractMessage message) throws ThreemaException {
-		if (message == null) {
-			return null;
-		}
+	/**
+	 * A listener that can be set to listen to message enqueue events.
+	 */
+	public interface MessageEnqueueListener {
+		void onMessageEnqueued(@NonNull AbstractMessage message);
+	}
+
+	public void setMessageEnqueueListener(@Nullable MessageEnqueueListener messageEnqueueListener) {
+		this.messageEnqueueListener = messageEnqueueListener;
+	}
 
+	/**
+	 * Send a message if there is a connection. If there is no connection, the message is added to
+	 * the queue and sent later - except the no server queuing flag is set.
+	 *
+	 * @param message the message that should be sent
+	 * @return the message box of the enqueued message
+	 * @throws ThreemaException if creating the message box failed
+	 */
+	@NonNull
+	public synchronized MessageBox enqueue(@NonNull AbstractMessage message) throws ThreemaException {
 		logger.debug("Enqueue message");
 
 		/* add missing attributes, if necessary */
@@ -96,8 +116,8 @@ public class MessageQueue implements MessageAckListener, ConnectionStateListener
 			throw new MessageTooLongException();
 		}
 
-		if (con.getConnectionState() == ConnectionState.LOGGEDIN) {
-			logger.debug("Currently connected - sending message now");
+		if (connectionState == ConnectionState.LOGGEDIN) {
+			logger.info("Currently connected - sending message {} now", message.getMessageId());
 
 			con.sendBoxedMessage(boxmsg);
 
@@ -113,6 +133,10 @@ public class MessageQueue implements MessageAckListener, ConnectionStateListener
 			}
 		}
 
+		if (messageEnqueueListener != null) {
+			messageEnqueueListener.onMessageEnqueued(message);
+		}
+
 		return boxmsg;
 	}
 
@@ -168,6 +192,7 @@ public class MessageQueue implements MessageAckListener, ConnectionStateListener
 	/**
 	 * Process incoming server ack, remove corresponding message from queue.
 	 */
+	@Override
 	public synchronized void processAck(@NonNull QueueMessageId queueMessageId) {
 		logger.debug("Processing server ack for message ID {} from {}", queueMessageId.getMessageId(), queueMessageId.getRecipientId());
 
@@ -207,9 +232,12 @@ public class MessageQueue implements MessageAckListener, ConnectionStateListener
 		}
 	}
 
-	public void updateConnectionState(ConnectionState connectionState, InetSocketAddress socketAddress) {
-		if (connectionState == ConnectionState.LOGGEDIN)
+	@Override
+	public synchronized void updateConnectionState(ConnectionState connectionState, InetSocketAddress socketAddress) {
+		this.connectionState = connectionState;
+		if (connectionState == ConnectionState.LOGGEDIN) {
 			processQueue();
+		}
 	}
 
 	public synchronized void serializeToStream(OutputStream os) throws IOException {
diff --git a/domain/src/main/java/ch/threema/domain/protocol/csp/connection/ThreemaConnection.java b/domain/src/main/java/ch/threema/domain/protocol/csp/connection/ThreemaConnection.java
index 3c56d4a3..e7398a41 100644
--- a/domain/src/main/java/ch/threema/domain/protocol/csp/connection/ThreemaConnection.java
+++ b/domain/src/main/java/ch/threema/domain/protocol/csp/connection/ThreemaConnection.java
@@ -37,11 +37,14 @@ import java.net.InetAddress;
 import java.net.InetSocketAddress;
 import java.net.Socket;
 import java.net.UnknownHostException;
+import java.nio.ByteBuffer;
+import java.nio.ByteOrder;
 import java.nio.charset.StandardCharsets;
 import java.security.SecureRandom;
 import java.util.ArrayList;
 import java.util.Arrays;
 import java.util.Comparator;
+import java.util.Date;
 import java.util.HashSet;
 import java.util.Set;
 import java.util.Timer;
@@ -91,7 +94,7 @@ public class ThreemaConnection implements Runnable {
 
 	/* Server address object */
 	private ServerAddressProvider serverAddressProvider;
-	private boolean ipv6;
+	private final boolean ipv6;
 
 	/* Temporary data for each individual TCP connection */
 	private volatile Socket socket;
@@ -368,6 +371,9 @@ public class ThreemaConnection implements Runnable {
 				DataInputStream dis = new DataInputStream(socket.getInputStream());
 				OutputStream bos = new BufferedOutputStream(socket.getOutputStream());
 
+				long lastPacketSentAt;
+				long elapsedMsSinceLastPacket;
+
 				/* set socket timeout for connection phase */
 				socket.setSoTimeout(ProtocolDefines.READ_TIMEOUT * 1000);
 
@@ -378,6 +384,7 @@ public class ThreemaConnection implements Runnable {
 					logger.debug("Client cookie = {}", NaCl.asHex(clientCookie));
 				}
 
+				lastPacketSentAt = new Date().getTime();
 				bos.write(clientTempKeyPub);
 				bos.write(clientCookie);
 				bos.flush();
@@ -385,6 +392,7 @@ public class ThreemaConnection implements Runnable {
 				/* read server hello */
 				byte[] serverCookie = new byte[COOKIE_LEN];
 				dis.readFully(serverCookie);
+				elapsedMsSinceLastPacket = new Date().getTime() - lastPacketSentAt;
 				if (logger.isDebugEnabled()) {
 					logger.debug("Server cookie = {}", NaCl.asHex(serverCookie));
 				}
@@ -428,7 +436,7 @@ public class ThreemaConnection implements Runnable {
 					throw new ThreemaException("Client cookie mismatch");
 				}
 
-				logger.info("Server hello successful");
+				logger.info("Server hello successful (rtt: {}ms)", elapsedMsSinceLastPacket);
 
 				/* prepare NaCl for login and extension encryption */
 				NaCl kclientTempServerTemp = new NaCl(clientTempKeySec, serverTempKeyPub);
@@ -458,6 +466,7 @@ public class ThreemaConnection implements Runnable {
 				byte[] loginBox = kclientTempServerTemp.encrypt(login, loginNonce);
 
 				/* send it! */
+				lastPacketSentAt = new Date().getTime();
 				bos.write(loginBox);
 				bos.write(extensionsBox);
 				bos.flush();
@@ -466,6 +475,7 @@ public class ThreemaConnection implements Runnable {
 				/* read login ack */
 				byte[] loginackBox = new byte[LOGIN_ACK_LEN];
 				dis.readFully(loginackBox);
+				elapsedMsSinceLastPacket = new Date().getTime() - lastPacketSentAt;
 
 				/* decrypt login ack */
 				byte[] loginack = kclientTempServerTemp.decrypt(loginackBox, serverNonce.nextNonce());
@@ -473,7 +483,7 @@ public class ThreemaConnection implements Runnable {
 					throw new ThreemaException("Decryption of login ack box failed");
 				}
 
-				logger.info("Login ack received");
+				logger.info("Login ack received (rtt: {}ms)", elapsedMsSinceLastPacket);
 
 				/* clear socket timeout */
 				socket.setSoTimeout(0);
@@ -654,13 +664,16 @@ public class ThreemaConnection implements Runnable {
 
 		switch (payload.getType()) {
 			case ProtocolDefines.PLTYPE_ECHO_REPLY:
-				if (data.length == 4) {
-					lastRcvdEchoSeq = Utils.byteArrayToInt(data);
+				final long elapsedMs;
+				if (data.length == 12) {
+					final ByteBuffer buffer = ByteBuffer.wrap(data).order(ByteOrder.nativeOrder());
+					lastRcvdEchoSeq = buffer.getInt();
+					elapsedMs = new Date().getTime() - buffer.getLong();
 				} else {
 					throw new PayloadProcessingException("Bad length (" + data.length + ") for echo reply payload");
 				}
 
-				logger.info("Received echo reply (seq {})", lastRcvdEchoSeq);
+				logger.info("Received echo reply (seq: {}, rtt: {}ms)", lastRcvdEchoSeq, elapsedMs);
 				break;
 
 			case ProtocolDefines.PLTYPE_ERROR:
@@ -767,14 +780,11 @@ public class ThreemaConnection implements Runnable {
 
 					// Save nonce if the incoming message was successfully processed
 					// and if the message is *not* a typing indicator
-					if (result != null
-							&& result.processed
-							&& result.abstractMessage != null
-							&& result.abstractMessage.getType() != ProtocolDefines.MSGTYPE_TYPING_INDICATOR) {
+					if (result.wasProcessed() && !result.hasType(ProtocolDefines.MSGTYPE_TYPING_INDICATOR)) {
 						this.nonceFactory.store(boxmsg.getNonce());
 					}
 
-					ackMessage = result != null && result.processed;
+					ackMessage = result.wasProcessed();
 				} else {
 					// auto ack a already nonce'd message
 					ackMessage = true;
@@ -813,9 +823,14 @@ public class ThreemaConnection implements Runnable {
 
 	private void sendEchoRequest() {
 		lastSentEchoSeq++;
-		logger.debug("Sending echo request (seq {})", lastSentEchoSeq);
-
-		byte[] echoData = Utils.intToByteArray(lastSentEchoSeq);
+		logger.debug("Sending echo request (seq: {})", lastSentEchoSeq);
+
+		byte[] echoData = ByteBuffer
+			.wrap(new byte[12])
+			.order(ByteOrder.nativeOrder())
+			.putInt(lastSentEchoSeq)
+			.putLong(new Date().getTime())
+			.array();
 		Payload echoPayload = new Payload(ProtocolDefines.PLTYPE_ECHO_REQUEST, echoData);
 		sendPayload(echoPayload);
 
diff --git a/domain/src/main/java/ch/threema/domain/protocol/csp/fs/ForwardSecurityMessageProcessor.java b/domain/src/main/java/ch/threema/domain/protocol/csp/fs/ForwardSecurityMessageProcessor.java
index 82423cda..0689ec81 100644
--- a/domain/src/main/java/ch/threema/domain/protocol/csp/fs/ForwardSecurityMessageProcessor.java
+++ b/domain/src/main/java/ch/threema/domain/protocol/csp/fs/ForwardSecurityMessageProcessor.java
@@ -21,9 +21,6 @@
 
 package ch.threema.domain.protocol.csp.fs;
 
-import androidx.annotation.NonNull;
-import androidx.annotation.Nullable;
-
 import com.neilalexander.jnacl.NaCl;
 
 import org.slf4j.Logger;
@@ -31,14 +28,15 @@ import org.slf4j.LoggerFactory;
 
 import java.io.ByteArrayOutputStream;
 import java.io.IOException;
-import java.util.ArrayList;
-import java.util.List;
 
+import androidx.annotation.NonNull;
+import androidx.annotation.Nullable;
 import ch.threema.base.ThreemaException;
 import ch.threema.domain.fs.DHSession;
+import ch.threema.domain.fs.DHSessionId;
 import ch.threema.domain.fs.KDFRatchet;
 import ch.threema.domain.models.Contact;
-import ch.threema.domain.protocol.csp.ProtocolDefines;
+import ch.threema.domain.models.MessageId;
 import ch.threema.domain.protocol.csp.coders.MessageCoder;
 import ch.threema.domain.protocol.csp.connection.MessageQueue;
 import ch.threema.domain.protocol.csp.messages.AbstractMessage;
@@ -55,11 +53,14 @@ import ch.threema.domain.stores.ContactStore;
 import ch.threema.domain.stores.DHSessionStoreException;
 import ch.threema.domain.stores.DHSessionStoreInterface;
 import ch.threema.domain.stores.IdentityStoreInterface;
-import ch.threema.protobuf.csp.e2e.fs.ForwardSecurityEnvelope;
+import ch.threema.protobuf.csp.e2e.fs.Encapsulated;
+import ch.threema.protobuf.csp.e2e.fs.Reject;
+import ch.threema.protobuf.csp.e2e.fs.Terminate;
+import ch.threema.protobuf.csp.e2e.fs.Version;
 
 public class ForwardSecurityMessageProcessor {
 
-	private static final Logger logger = LoggerFactory.getLogger(ForwardSecurityMessageProcessor.class);
+	private static final @NonNull Logger logger = LoggerFactory.getLogger(ForwardSecurityMessageProcessor.class);
 
 	private final @NonNull DHSessionStoreInterface dhSessionStoreInterface;
 	private final @NonNull ContactStore contactStore;
@@ -67,19 +68,162 @@ public class ForwardSecurityMessageProcessor {
 	private final @NonNull MessageQueue messageQueue;
 	private final @NonNull ForwardSecurityFailureListener failureListener;
 
-	private final List<ForwardSecurityStatusListener> statusListeners;
+	private interface ForwardSecurityStatusWrapper extends ForwardSecurityStatusListener {
+		void setStatusListener(ForwardSecurityStatusListener forwardSecurityStatusListener);
+	}
+
+	private final @NonNull ForwardSecurityStatusWrapper statusListener = new ForwardSecurityStatusWrapper() {
+		private @Nullable ForwardSecurityStatusListener listener;
+
+		@Override
+		public void setStatusListener(ForwardSecurityStatusListener forwardSecurityStatusListener) {
+			this.listener = forwardSecurityStatusListener;
+		}
+
+		@Override
+		public void newSessionInitiated(@NonNull DHSession session, @NonNull Contact contact) {
+			if (listener != null) {
+				listener.newSessionInitiated(session, contact);
+			}
+		}
+
+		@Override
+		public void responderSessionEstablished(@NonNull DHSession session, @NonNull Contact contact, boolean existingSessionPreempted) {
+			if (listener != null) {
+				listener.responderSessionEstablished(session, contact, existingSessionPreempted);
+			}
+		}
+
+		@Override
+		public void initiatorSessionEstablished(@NonNull DHSession session, @NonNull Contact contact) {
+			if (listener != null) {
+				listener.initiatorSessionEstablished(session, contact);
+			}
+		}
+
+		@Override
+		public void rejectReceived(@NonNull ForwardSecurityDataReject rejectData, @NonNull Contact contact, @Nullable DHSession session, boolean hasForwardSecuritySupport) {
+			if (listener != null) {
+				listener.rejectReceived(rejectData, contact, session, hasForwardSecuritySupport);
+			}
+		}
+
+		@Override
+		public void sessionNotFound(@NonNull DHSessionId sessionId, @NonNull Contact contact) {
+			if (listener != null) {
+				listener.sessionNotFound(sessionId, contact);
+			}
+		}
+
+		@Override
+		public void sessionForMessageNotFound(@NonNull DHSessionId sessionId, @Nullable MessageId messageId, @NonNull Contact contact) {
+			if (listener != null) {
+				listener.sessionForMessageNotFound(sessionId, messageId, contact);
+			}
+		}
+
+		@Override
+		public void sessionTerminated(@Nullable DHSessionId sessionId, @NonNull Contact contact, boolean sessionUnknown, boolean hasForwardSecuritySupport) {
+			if (listener != null) {
+				listener.sessionTerminated(sessionId, contact, sessionUnknown, hasForwardSecuritySupport);
+			}
+		}
+
+		@Override
+		public void messagesSkipped(@NonNull DHSessionId sessionId, @NonNull Contact contact, int numSkipped) {
+			if (listener != null) {
+				listener.messagesSkipped(sessionId, contact, numSkipped);
+			}
+		}
+
+		@Override
+		public void messageOutOfOrder(@NonNull DHSessionId sessionId, @NonNull Contact contact, @Nullable MessageId messageId) {
+			if (listener != null) {
+				listener.messageOutOfOrder(sessionId, contact, messageId);
+			}
+		}
+
+		@Override
+		public void first4DhMessageReceived(@NonNull DHSession session, @NonNull Contact contact) {
+			if (listener != null) {
+				listener.first4DhMessageReceived(session, contact);
+			}
+		}
+
+		@Override
+		public void versionsUpdated(@NonNull DHSession session, @NonNull DHSession.UpdatedVersionsSnapshot versionsSnapshot, @NonNull Contact contact) {
+			if (listener != null) {
+				listener.versionsUpdated(session, versionsSnapshot, contact);
+			}
+		}
+
+		@Override
+		public void messageWithoutFSReceived(@NonNull Contact contact, @NonNull DHSession session, @NonNull AbstractMessage message) {
+			if (listener != null) {
+				listener.messageWithoutFSReceived(contact, session, message);
+			}
+		}
+
+		@Override
+		public boolean hasForwardSecuritySupport(@NonNull Contact contact) {
+			if (listener != null) {
+				return listener.hasForwardSecuritySupport(contact);
+			}
+			// In case the listener is not set, which should never happen, we return true as this
+			// is more likely. In case of a false positive, a session might not have been deleted,
+			// which may result in another unsuccessful attempt to initiate a session.
+			return true;
+		}
+
+		@Override
+		public void updateFeatureMask(@NonNull Contact contact) {
+			if (listener != null) {
+				listener.updateFeatureMask(contact);
+			}
+		}
 
-	public ForwardSecurityMessageProcessor(@NonNull DHSessionStoreInterface dhSessionStoreInterface,
-	                                       @NonNull ContactStore contactStore,
-	                                       @NonNull IdentityStoreInterface identityStoreInterface,
-	                                       @NonNull MessageQueue messageQueue,
-	                                       @NonNull ForwardSecurityFailureListener failureListener) {
+		@Override
+		public void postIllegalSessionState(@NonNull DHSessionId sessionId, @NonNull Contact contact) {
+			if (listener != null) {
+				listener.postIllegalSessionState(sessionId, contact);
+			}
+		}
+	};
+
+	public ForwardSecurityMessageProcessor(
+		@NonNull DHSessionStoreInterface dhSessionStoreInterface,
+		@NonNull ContactStore contactStore,
+		@NonNull IdentityStoreInterface identityStoreInterface,
+		@NonNull MessageQueue messageQueue,
+		@NonNull ForwardSecurityFailureListener failureListener
+	) {
 		this.dhSessionStoreInterface = dhSessionStoreInterface;
 		this.contactStore = contactStore;
 		this.identityStoreInterface = identityStoreInterface;
 		this.messageQueue = messageQueue;
 		this.failureListener = failureListener;
-		this.statusListeners = new ArrayList<>();
+
+		this.dhSessionStoreInterface.setDHSessionStoreErrorHandler((peerIdentity, sessionId) -> {
+			// Try to send a terminate to the peer contact
+			Contact contact = contactStore.getContactForIdentity(peerIdentity);
+			if (contact != null) {
+				try {
+					sendMessageToContact(contact, new ForwardSecurityDataTerminate(sessionId, Terminate.Cause.RESET));
+				} catch (ThreemaException e) {
+					logger.error("Unable to send terminate to contact", e);
+				}
+			} else {
+				logger.error("Cannot send terminate to unknown contact where DH session is invalid");
+			}
+			// Try to delete the dh session
+			try {
+				dhSessionStoreInterface.deleteDHSession(identityStoreInterface.getIdentity(), peerIdentity, sessionId);
+			} catch (DHSessionStoreException e) {
+				logger.error("Unable to delete DH session", e);
+			}
+			// Show a status message to the user
+			statusListener.postIllegalSessionState(sessionId, contact);
+		});
 	}
 
 	/**
@@ -87,12 +231,13 @@ public class ForwardSecurityMessageProcessor {
 	 *
 	 * @param sender Sender contact
 	 * @param envelopeMessage The envelope with the encapsulated message
-	 * @return Decapsulated message, if any, or null
-	 * @throws ThreemaException
-	 * @throws BadMessageException
+	 *
+	 * @return Decapsulated message, if any, or null in case of a control message that has been consumed and does not need further processing
 	 */
-	public synchronized AbstractMessage processEnvelopeMessage(Contact sender,
-	                                              ForwardSecurityEnvelopeMessage envelopeMessage) throws ThreemaException, BadMessageException {
+	public synchronized @Nullable AbstractMessage processEnvelopeMessage(
+		@NonNull Contact sender,
+		@NonNull ForwardSecurityEnvelopeMessage envelopeMessage
+	) throws ThreemaException, BadMessageException {
 		ForwardSecurityData data = envelopeMessage.getData();
 
 		if (data instanceof ForwardSecurityDataInit) {
@@ -106,13 +251,17 @@ public class ForwardSecurityMessageProcessor {
 		} else if (data instanceof ForwardSecurityDataMessage) {
 			return processMessage(sender, envelopeMessage);
 		} else {
+			// Unreachable if variant handling is in alignment with ForwardSecurityData.fromProtobuf
 			throw new UnknownMessageTypeException("Unsupported message type");
 		}
 
 		return null;
 	}
 
-	public synchronized ForwardSecurityEnvelopeMessage makeMessage(Contact contact, AbstractMessage innerMessage) throws ThreemaException {
+	public synchronized @NonNull ForwardSecurityEnvelopeMessage makeMessage(
+		@NonNull Contact contact,
+		@NonNull AbstractMessage innerMessage
+	) throws ThreemaException, MessageTypeNotSupportedInSession {
 		// Check if we already have a session with this contact
 		DHSession session = dhSessionStoreInterface.getBestDHSession(identityStoreInterface.getIdentity(), contact.getIdentity());
 		if (session == null) {
@@ -120,23 +269,43 @@ public class ForwardSecurityMessageProcessor {
 			session = new DHSession(contact, identityStoreInterface);
 			dhSessionStoreInterface.storeDHSession(session);
 			logger.debug("Starting new DH session ID {} with {}", session.getId(), contact.getIdentity());
-			for (ForwardSecurityStatusListener listener : statusListeners) {
-				listener.newSessionInitiated(session, contact);
-			}
+			statusListener.newSessionInitiated(session, contact);
 
 			// Send init message
-			ForwardSecurityDataInit init = new ForwardSecurityDataInit(session.getId(), session.getMyEphemeralPublicKey());
+			ForwardSecurityDataInit init = new ForwardSecurityDataInit(
+				session.getId(),
+				DHSession.SUPPORTED_VERSION_RANGE,
+				session.getMyEphemeralPublicKey()
+			);
 			sendMessageToContact(contact, init);
+
+			// Check that the message type is supported in the new session
+			Version requiredVersion = innerMessage.getMinimumRequiredForwardSecurityVersion();
+			if (requiredVersion == null || requiredVersion.getNumber() > DHSession.SUPPORTED_VERSION_MIN.getNumber()) {
+				throw new MessageTypeNotSupportedInSession("Message does not support initial DH session version", DHSession.SUPPORTED_VERSION_MIN);
+			}
+		}
+
+		// Warn if we're trying to send something in an illegal state
+		if (session.getState() == DHSession.State.R20) {
+			logger.error("Encapsulating a message in R20 state is illegal");
+		}
+
+		// Check that the message type is supported in the current session
+		final Version appliedVersion = session.getOutgoingAppliedVersion();
+		Version requiredVersion = innerMessage.getMinimumRequiredForwardSecurityVersion();
+		if (requiredVersion == null || requiredVersion.getNumber() > appliedVersion.getNumber()) {
+			throw new MessageTypeNotSupportedInSession("Message type is not supported in this session", appliedVersion);
 		}
 
 		// Obtain encryption key from ratchet
 		KDFRatchet ratchet = session.getMyRatchet4DH();
-		ForwardSecurityEnvelope.Message.DHType dhType = ForwardSecurityEnvelope.Message.DHType.FOURDH;
+		Encapsulated.DHType dhType = Encapsulated.DHType.FOURDH;
 		ForwardSecurityMode forwardSecurityMode = ForwardSecurityMode.FOURDH;
 		if (ratchet == null) {
 			// 2DH mode
 			ratchet = session.getMyRatchet2DH();
-			dhType = ForwardSecurityEnvelope.Message.DHType.TWODH;
+			dhType = Encapsulated.DHType.TWODH;
 			forwardSecurityMode = ForwardSecurityMode.TWODH;
 			if (ratchet == null) {
 				throw new BadDHStateException("No DH mode negotiated");
@@ -164,7 +333,14 @@ public class ForwardSecurityMessageProcessor {
 		byte[] nonce = new byte[NaCl.NONCEBYTES];
 		byte[] ciphertext = NaCl.symmetricEncryptData(plaintext, currentKey, nonce);
 
-		ForwardSecurityDataMessage dataMessage = new ForwardSecurityDataMessage(session.getId(), dhType, counter, ciphertext);
+		ForwardSecurityDataMessage dataMessage = new ForwardSecurityDataMessage(
+			session.getId(),
+			dhType,
+			counter,
+			session.getOutgoingOfferedVersion().getNumber(),
+			appliedVersion.getNumber(),
+			ciphertext
+		);
 		ForwardSecurityEnvelopeMessage envelope = new ForwardSecurityEnvelopeMessage(dataMessage);
 
 		// Copy attributes from inner message
@@ -172,23 +348,7 @@ public class ForwardSecurityMessageProcessor {
 		envelope.setToIdentity(innerMessage.getToIdentity());
 		envelope.setMessageId(innerMessage.getMessageId());
 		envelope.setDate(innerMessage.getDate());
-		int flags = innerMessage.getMessageFlags();
-		if (innerMessage.flagSendPush()) {
-			flags |= ProtocolDefines.MESSAGE_FLAG_SEND_PUSH;
-		}
-		if (innerMessage.flagNoServerQueuing()) {
-			flags |= ProtocolDefines.MESSAGE_FLAG_NO_SERVER_QUEUING;
-		}
-		if (innerMessage.flagNoServerAck()) {
-			flags |= ProtocolDefines.MESSAGE_FLAG_NO_SERVER_ACK;
-		}
-		if (innerMessage.flagGroupMessage()) {
-			flags |= ProtocolDefines.MESSAGE_FLAG_GROUP;
-		}
-		if (innerMessage.flagShortLivedServerQueuing()) {
-			flags |= ProtocolDefines.MESSAGE_FLAG_SHORT_LIVED;
-		}
-		envelope.setMessageFlags(flags);
+		envelope.setMessageFlags(innerMessage.getMessageFlags() | innerMessage.getMessageTypeDefaultFlags());
 		envelope.setPushFromName(innerMessage.getPushFromName());
 		envelope.setForwardSecurityMode(forwardSecurityMode);
 		envelope.setAllowSendingProfile(innerMessage.allowUserProfileDistribution());
@@ -196,37 +356,71 @@ public class ForwardSecurityMessageProcessor {
 		return envelope;
 	}
 
-	public void addStatusListener(ForwardSecurityStatusListener listener) {
-		this.statusListeners.add(listener);
+	public void setStatusListener(@NonNull ForwardSecurityStatusListener listener) {
+		this.statusListener.setStatusListener(listener);
 	}
 
-	public void removeStatusListener(ForwardSecurityStatusListener listener) {
-		this.statusListeners.remove(listener);
+	public void warnIfMessageWithoutForwardSecurityReceived(@NonNull AbstractMessage message) {
+		Contact contact = contactStore.getContactForIdentity(message.getFromIdentity());
+		if (contact == null) {
+			return;
+		}
+		DHSession bestSession;
+		try {
+			bestSession = dhSessionStoreInterface.getBestDHSession(identityStoreInterface.getIdentity(), message.getFromIdentity());
+		} catch (DHSessionStoreException e) {
+			logger.error("Could not get best session", e);
+			return;
+		}
+
+		if (bestSession != null) {
+			Version minimumVersion = message.getMinimumRequiredForwardSecurityVersion();
+			if (minimumVersion != null
+				&& minimumVersion.getNumber() <= bestSession.getMinimumIncomingAppliedVersion().getNumber()
+			) {
+				// TODO(ANDR-2452): Remove this feature mask update when enough clients have updated
+				// Check whether this contact still supports forward security when receiving a
+				// message without forward security.
+				if (statusListener.hasForwardSecuritySupport(contact)) {
+					statusListener.updateFeatureMask(contact);
+				}
+
+				// Warn only if the contact still has forward security support, otherwise a status
+				// message that the contact has downgraded is shown to the user
+				if (statusListener.hasForwardSecuritySupport(contact)) {
+					statusListener.messageWithoutFSReceived(contact, bestSession, message);
+				}
+			}
+		}
 	}
 
 	/**
-	 * Check if this contact has sent forward security messages before.
-	 * @param contact the desired contact
+	 * Clear all sessions with the peer contact and send a terminate message for each of those.
+	 *
+	 * @param contact the peer contact
 	 */
-	public boolean hasContactUsedForwardSecurity(Contact contact) {
+	public void clearAndTerminateAllSessions(@NonNull Contact contact, @NonNull Terminate.Cause cause) {
 		try {
-			DHSession bestSession = dhSessionStoreInterface.getBestDHSession(identityStoreInterface.getIdentity(), contact.getIdentity());
-			if (bestSession != null) {
-				// Check if any 2DH or 4DH messages have been received by looking at the ratchet count
-				if (bestSession.getPeerRatchet4DH() != null && bestSession.getPeerRatchet4DH().getCounter() > 1) {
-					return true;
-				} else if (bestSession.getPeerRatchet2DH() != null && bestSession.getPeerRatchet2DH().getCounter() > 1) {
-					return true;
-				}
+			String myIdentity = identityStoreInterface.getIdentity();
+			String peerIdentity = contact.getIdentity();
+			DHSession session = dhSessionStoreInterface.getBestDHSession(myIdentity, peerIdentity);
+			while (session != null) {
+				// First delete session locally, then send terminate to contact
+				dhSessionStoreInterface.deleteDHSession(myIdentity, peerIdentity, session.getId());
+				sendMessageToContact(
+					contact,
+					new ForwardSecurityDataTerminate(session.getId(), cause)
+				);
+				session = dhSessionStoreInterface.getBestDHSession(myIdentity, peerIdentity);
 			}
-			return false;
 		} catch (DHSessionStoreException e) {
-			logger.error("Could not get best DH session", e);
-			return false;
+			logger.error("Could not delete DH sessions", e);
+		} catch (ThreemaException e) {
+			logger.error("Could not send DH session terminate", e);
 		}
 	}
 
-	private void processInit(Contact contact, ForwardSecurityDataInit init) throws ThreemaException {
+	private void processInit(@NonNull Contact contact, @NonNull ForwardSecurityDataInit init) throws ThreemaException, BadMessageException {
 		// Is there already a session with this ID?
 		if (dhSessionStoreInterface.getDHSession(identityStoreInterface.getIdentity(), contact.getIdentity(), init.getSessionId()) != null) {
 			// Silently discard init message for existing session
@@ -237,50 +431,65 @@ public class ForwardSecurityMessageProcessor {
 		// that any 4DH sessions that we have stored for this contact are obsolete and should be deleted.
 		// We will keep 2DH sessions (which will have been initiated by us), as otherwise messages may
 		// be lost during Init race conditions.
-		boolean existingSessionPreempted = false;
-		if (dhSessionStoreInterface.deleteAllSessionsExcept(identityStoreInterface.getIdentity(), contact.getIdentity(), init.getSessionId(), true) > 0) {
-			existingSessionPreempted = true;
-		}
+		boolean existingSessionPreempted =
+			dhSessionStoreInterface.deleteAllSessionsExcept(identityStoreInterface.getIdentity(), contact.getIdentity(), init.getSessionId(), true) > 0;
 
-		DHSession session = new DHSession(init.getSessionId(), init.getEphemeralPublicKey(), contact, identityStoreInterface);
-		dhSessionStoreInterface.storeDHSession(session);
-		logger.debug("Responding to new DH session ID {} request from {}", session.getId(), contact.getIdentity());
-		for (ForwardSecurityStatusListener listener : statusListeners) {
-			listener.responderSessionEstablished(session, contact, existingSessionPreempted);
+		// TODO(ANDR-2452): Remove this check when enough clients have updated
+		if (!statusListener.hasForwardSecuritySupport(contact)) {
+			statusListener.updateFeatureMask(contact);
 		}
 
-		// Create and send accept
-		ForwardSecurityDataAccept accept = new ForwardSecurityDataAccept(init.getSessionId(), session.getMyEphemeralPublicKey());
-		sendMessageToContact(contact, accept);
+		if (statusListener.hasForwardSecuritySupport(contact)) {
+			// Only create a new session from the init if the contact supports forward security
+			DHSession session = new DHSession(init.getSessionId(), init.getVersionRange(), init.getEphemeralPublicKey(), contact, identityStoreInterface);
+			dhSessionStoreInterface.storeDHSession(session);
+			logger.debug("Responding to new DH session ID {} request from {}", session.getId(), contact.getIdentity());
+			statusListener.responderSessionEstablished(session, contact, existingSessionPreempted);
+
+			// Send an accept
+			ForwardSecurityDataAccept accept = new ForwardSecurityDataAccept(init.getSessionId(), DHSession.SUPPORTED_VERSION_RANGE, session.getMyEphemeralPublicKey());
+			sendMessageToContact(contact, accept);
+		} else {
+			// We may still have a FS session to report that was terminated
+			if (existingSessionPreempted) {
+				statusListener.sessionTerminated(null, contact, false, false);
+			}
+
+			// If the contact does not have the feature mask set correctly, we assume that the
+			// `Init` is stale, then silently terminate this session.
+			ForwardSecurityDataTerminate terminate = new ForwardSecurityDataTerminate(init.getSessionId(), Terminate.Cause.DISABLED_BY_REMOTE);
+			sendMessageToContact(contact, terminate);
+
+			// The feature mask update subroutine should have already detected the downgrade and
+			// removed any existing FS sessions. But we'll do it here again anyways for good
+			// measures and because the remote may be dishonest about its feature capabilities.
+			clearAndTerminateAllSessions(contact, Terminate.Cause.DISABLED_BY_REMOTE);
+		}
 	}
 
-	private void processAccept(Contact contact, ForwardSecurityDataAccept accept) throws ThreemaException {
+	private void processAccept(@NonNull Contact contact, @NonNull ForwardSecurityDataAccept accept) throws ThreemaException, BadMessageException {
 		DHSession session = dhSessionStoreInterface.getDHSession(identityStoreInterface.getIdentity(), contact.getIdentity(), accept.getSessionId());
 		if (session == null) {
 			// Session not found, probably lost local data or old accept
 			logger.warn("No DH session found for accepted session ID {} from {}", accept.getSessionId(), contact.getIdentity());
 
 			// Send "terminate" message for this session ID
-			ForwardSecurityDataTerminate terminate = new ForwardSecurityDataTerminate(accept.getSessionId());
+			ForwardSecurityDataTerminate terminate = new ForwardSecurityDataTerminate(accept.getSessionId(), Terminate.Cause.UNKNOWN_SESSION);
 			sendMessageToContact(contact, terminate);
 
-			for (ForwardSecurityStatusListener listener : statusListeners) {
-				listener.sessionNotFound(accept.getSessionId(), contact);
-			}
+			statusListener.sessionNotFound(accept.getSessionId(), contact);
 
 			return;
 		}
 
-		session.processAccept(accept.getEphemeralPublicKey(), contact, identityStoreInterface);
+		session.processAccept(accept.getVersionRange(), accept.getEphemeralPublicKey(), contact, identityStoreInterface);
 		dhSessionStoreInterface.storeDHSession(session);
-		logger.debug("Established 4DH session ID {} with {}", session.getId(), contact.getIdentity());
-		for (ForwardSecurityStatusListener listener : statusListeners) {
-			listener.initiatorSessionEstablished(session, contact);
-		}
+		logger.info("Established 4DH session {} with {}", session, contact.getIdentity());
+		statusListener.initiatorSessionEstablished(session, contact);
 	}
 
-	private void processReject(Contact contact, ForwardSecurityDataReject reject) throws DHSessionStoreException {
-		logger.warn("Received reject for DH session ID {} from {}", reject.getSessionId(), contact.getIdentity());
+	private void processReject(@NonNull Contact contact, @NonNull ForwardSecurityDataReject reject) throws DHSessionStoreException {
+		logger.warn("Received reject for DH session ID {} from {}, cause: {}", reject.getSessionId(), contact.getIdentity(), reject.getCause());
 		DHSession session = dhSessionStoreInterface.getDHSession(identityStoreInterface.getIdentity(), contact.getIdentity(), reject.getSessionId());
 		if (session != null) {
 			// Discard session
@@ -290,14 +499,15 @@ public class ForwardSecurityMessageProcessor {
 			logger.info("No DH session found for rejected session ID {} from {}", reject.getSessionId(), contact.getIdentity());
 		}
 
-		for (ForwardSecurityStatusListener listener : statusListeners) {
-			listener.rejectReceived(reject.getSessionId(), contact, reject.getRejectedApiMessageId());
-		}
-
 		failureListener.notifyRejectReceived(contact, reject.getRejectedApiMessageId());
+
+		// Refresh feature mask now, in case contact downgraded to a build without PFS
+		statusListener.updateFeatureMask(contact);
+
+		statusListener.rejectReceived(reject, contact, session, statusListener.hasForwardSecuritySupport(contact));
 	}
 
-	private @Nullable AbstractMessage processMessage(Contact contact, ForwardSecurityEnvelopeMessage envelopeMessage)
+	private @Nullable AbstractMessage processMessage(@NonNull Contact contact, @NonNull ForwardSecurityEnvelopeMessage envelopeMessage)
 		throws ThreemaException, BadMessageException {
 
 		ForwardSecurityDataMessage message = (ForwardSecurityDataMessage)envelopeMessage.getData();
@@ -305,16 +515,25 @@ public class ForwardSecurityMessageProcessor {
 		DHSession session = dhSessionStoreInterface.getDHSession(identityStoreInterface.getIdentity(), contact.getIdentity(), message.getSessionId());
 		if (session == null) {
 			// Session not found, probably lost local data or old message
-			logger.warn("No DH session found for message in session ID {} from {}", message.getSessionId(), contact.getIdentity());
-
-			// Send reject message
-			ForwardSecurityDataReject reject = new ForwardSecurityDataReject(message.getSessionId(), envelopeMessage.getMessageId(), ForwardSecurityEnvelope.Reject.Cause.UNKNOWN_SESSION);
+			logger.warn("No DH session found for message {} in session ID {} from {}", envelopeMessage.getMessageId(), message.getSessionId(), contact.getIdentity());
+			ForwardSecurityDataReject reject = new ForwardSecurityDataReject(message.getSessionId(), envelopeMessage.getMessageId(), Reject.Cause.UNKNOWN_SESSION);
 			sendMessageToContact(contact, reject);
+			statusListener.sessionForMessageNotFound(message.getSessionId(), envelopeMessage.getMessageId(), contact);
+			return null;
+		}
 
-			for (ForwardSecurityStatusListener listener : statusListeners) {
-				listener.sessionNotFound(message.getSessionId(), contact);
-			}
-
+		// Validate offered and applied version
+		final @Nullable DHSession.ProcessedVersions processedVersions;
+		try {
+			processedVersions = session.processIncomingMessageVersion(message);
+		} catch (DHSession.RejectMessageError e) {
+			// Message rejected by session validator, `Reject` and terminate the session
+			logger.warn("Rejecting message in session {} with {}, cause: {}", session, contact.getIdentity(), e.getMessage());
+			ForwardSecurityDataReject reject = new ForwardSecurityDataReject(session.getId(), envelopeMessage.getMessageId(), Reject.Cause.STATE_MISMATCH);
+			sendMessageToContact(contact, reject);
+			dhSessionStoreInterface.deleteDHSession(identityStoreInterface.getIdentity(), contact.getIdentity(), session.getId());
+			// TODO(SE-354): Should we supply an error cause for the UI here? Otherwise this looks as if the remote willingly terminated.
+			statusListener.sessionTerminated(message.getSessionId(), contact, false, true);
 			return null;
 		}
 
@@ -334,12 +553,14 @@ public class ForwardSecurityMessageProcessor {
 
 		if (ratchet == null) {
 			// This can happen if the Accept message from our peer has been lost. In that case
-			// they will think they are in 4DH mode, but we are still in 2DH.
-			ForwardSecurityDataReject reject = new ForwardSecurityDataReject(message.getSessionId(), envelopeMessage.getMessageId(), ForwardSecurityEnvelope.Reject.Cause.STATE_MISMATCH);
+			// they will think they are in 4DH mode, but we are still in 2DH. `Reject` and
+			// terminate the session.
+			logger.warn("Rejecting message in session {} with {}, cause: DH type mismatch (mode={})", session, contact.getIdentity(), mode);
+			ForwardSecurityDataReject reject = new ForwardSecurityDataReject(message.getSessionId(), envelopeMessage.getMessageId(), Reject.Cause.STATE_MISMATCH);
 			sendMessageToContact(contact, reject);
-			for (ForwardSecurityStatusListener listener : statusListeners) {
-				listener.sessionBadDhState(message.getSessionId(), contact);
-			}
+			dhSessionStoreInterface.deleteDHSession(identityStoreInterface.getIdentity(), contact.getIdentity(), session.getId());
+			// TODO(SE-354): Should we supply an error cause for the UI here? Otherwise this looks as if the remote willingly terminated.
+			statusListener.sessionTerminated(message.getSessionId(), contact, false, true);
 			return null;
 		}
 
@@ -348,15 +569,11 @@ public class ForwardSecurityMessageProcessor {
 		try {
 			int numTurns = ratchet.turnUntil(message.getCounter());
 			if (numTurns > 0) {
-				for (ForwardSecurityStatusListener listener : statusListeners) {
-					listener.messagesSkipped(message.getSessionId(), contact, numTurns);
-				}
+				statusListener.messagesSkipped(message.getSessionId(), contact, numTurns);
 			}
 		} catch (KDFRatchet.RatchetRotationException e) {
-			for (ForwardSecurityStatusListener listener : statusListeners) {
-				listener.messageOutOfOrder(message.getSessionId(), contact, envelopeMessage.getMessageId());
-			}
-			throw new BadMessageException("Out of order FS message, cannot decrypt", true);
+			statusListener.messageOutOfOrder(message.getSessionId(), contact, envelopeMessage.getMessageId());
+			throw new BadMessageException("Out of order FS message, cannot decrypt");
 		}
 
 		// Symmetrically decrypt message
@@ -365,15 +582,29 @@ public class ForwardSecurityMessageProcessor {
 		byte[] nonce = new byte[NaCl.NONCEBYTES];
 		byte[] plaintext = NaCl.symmetricDecryptData(ciphertext, ratchet.getCurrentEncryptionKey(), nonce);
 		if (plaintext == null) {
-			ForwardSecurityDataReject reject = new ForwardSecurityDataReject(message.getSessionId(), envelopeMessage.getMessageId(), ForwardSecurityEnvelope.Reject.Cause.STATE_MISMATCH);
+			logger.warn("Rejecting message in session {} with {}, cause: Message decryption failed (message-id={})", session, contact.getIdentity(), envelopeMessage.getMessageId());
+			ForwardSecurityDataReject reject = new ForwardSecurityDataReject(message.getSessionId(), envelopeMessage.getMessageId(), Reject.Cause.STATE_MISMATCH);
 			sendMessageToContact(contact, reject);
-			for (ForwardSecurityStatusListener listener : statusListeners) {
-				listener.messageDecryptionFailed(message.getSessionId(), contact, envelopeMessage.getMessageId());
-			}
+			dhSessionStoreInterface.deleteDHSession(identityStoreInterface.getIdentity(), contact.getIdentity(), session.getId());
+			// TODO(SE-354): Should we supply an error cause for the UI here? Otherwise this looks as if the remote willingly terminated.
+			statusListener.sessionTerminated(message.getSessionId(), contact, false, true);
 			return null;
 		}
 
-		logger.debug("Decrypted {} message ID {} from {} in session {}", mode, envelopeMessage.getMessageId(), contact.getIdentity(), session.getId());
+		logger.debug("Decapsulated message from {} (message-id={}, mode={}, session={}, offered-version={}, applied-version={})",
+			contact.getIdentity(),
+			envelopeMessage.getMessageId(),
+			mode,
+			session,
+			processedVersions.offeredVersion,
+			processedVersions.appliedVersion
+		);
+
+		// Commit the updated version
+		@Nullable DHSession.UpdatedVersionsSnapshot updatedVersionsSnapshot = session.commitVersions(processedVersions);
+		if (updatedVersionsSnapshot != null) {
+			statusListener.versionsUpdated(session, updatedVersionsSnapshot, contact);
+		}
 
 		// Turn the ratchet once, as we will not need the current encryption key anymore and the
 		// next message from the peer must have a ratchet count of at least one higher
@@ -381,7 +612,8 @@ public class ForwardSecurityMessageProcessor {
 
 		if (mode == ForwardSecurityMode.FOURDH) {
 			// If this was a 4DH message, then we should erase the 2DH peer ratchet, as we shall not
-			// receive (or send) any further 2DH messages in this session
+			// receive (or send) any further 2DH messages in this session. Note that this is also
+			// necessary to determine the correct session state.
 			if (session.getPeerRatchet2DH() != null) {
 				session.discardPeerRatchet2DH();
 			}
@@ -393,47 +625,68 @@ public class ForwardSecurityMessageProcessor {
 				dhSessionStoreInterface.deleteAllSessionsExcept(identityStoreInterface.getIdentity(), contact.getIdentity(), session.getId(), false);
 			}
 
-			// If this was the first 4DH message in this session, inform the user
+			// If this was the first 4DH message in this session, inform the user (only required in
+			// version 1.0)
 			if (ratchet.getCounter() == 2) {
-				for (ForwardSecurityStatusListener listener : statusListeners) {
-					listener.first4DhMessageReceived(message.getSessionId(), contact);
-				}
+				statusListener.first4DhMessageReceived(session, contact);
 			}
 		}
 
-		// Save session, as ratchets have changed
+		// Save session, as ratchets and negotiated version may have changed
 		dhSessionStoreInterface.storeDHSession(session);
 
 		// Decode inner message and pass it to processor
-		AbstractMessage innerMsg = new MessageCoder(contactStore, identityStoreInterface).decodeEncapsulated(plaintext, envelopeMessage, contact);
+		AbstractMessage innerMsg = new MessageCoder(contactStore, identityStoreInterface)
+			.decodeEncapsulated(plaintext, envelopeMessage, processedVersions.appliedVersion, contact);
 		innerMsg.setForwardSecurityMode(mode);
 		return innerMsg;
 	}
 
-	private void processTerminate(Contact contact, ForwardSecurityDataTerminate message) throws DHSessionStoreException {
-		logger.debug("Terminating DH session ID {} with {}", message.getSessionId(), contact.getIdentity());
-		dhSessionStoreInterface.deleteDHSession(identityStoreInterface.getIdentity(), contact.getIdentity(), message.getSessionId());
+	private void processTerminate(@NonNull Contact contact, @NonNull ForwardSecurityDataTerminate message) throws DHSessionStoreException {
+		logger.debug("Terminating DH session ID {} with {}, cause: {}", message.getSessionId(), contact.getIdentity(), message.getCause());
+		boolean sessionDeleted = dhSessionStoreInterface.deleteDHSession(identityStoreInterface.getIdentity(), contact.getIdentity(), message.getSessionId());
 
-		for (ForwardSecurityStatusListener listener : statusListeners) {
-			listener.sessionTerminated(message.getSessionId(), contact);
-		}
+		// Refresh feature mask now, in case contact downgraded to a build without PFS
+		statusListener.updateFeatureMask(contact);
+
+		statusListener.sessionTerminated(message.getSessionId(), contact, !sessionDeleted, statusListener.hasForwardSecuritySupport(contact));
 	}
 
-	private void sendMessageToContact(Contact contact, ForwardSecurityData data) throws ThreemaException {
+	private void sendMessageToContact(@NonNull Contact contact, @NonNull ForwardSecurityData data) throws ThreemaException {
 		ForwardSecurityEnvelopeMessage message = new ForwardSecurityEnvelopeMessage(data);
 		message.setToIdentity(contact.getIdentity());
 		this.messageQueue.enqueue(message);
 	}
 
 	public static class UnknownMessageTypeException extends ThreemaException {
-		public UnknownMessageTypeException(String msg) {
+		public UnknownMessageTypeException(@NonNull String msg) {
 			super(msg);
 		}
 	}
 
 	public static class BadDHStateException extends ThreemaException {
-		public BadDHStateException(final String msg) {
+		public BadDHStateException(@NonNull String msg) {
+			super(msg);
+		}
+	}
+
+	/**
+	 * This exception is thrown, if a message can not be encapsulated because the given session does
+	 * not support this message types.
+	 */
+	public static class MessageTypeNotSupportedInSession extends Exception {
+		@NonNull
+		private final Version negotiatedVersion;
+
+		public MessageTypeNotSupportedInSession(@NonNull String msg, @NonNull Version negotiatedVersion) {
 			super(msg);
+
+			this.negotiatedVersion = negotiatedVersion;
+		}
+
+		@NonNull
+		public Version getNegotiatedVersion() {
+			return negotiatedVersion;
 		}
 	}
 }
diff --git a/domain/src/main/java/ch/threema/domain/protocol/csp/fs/ForwardSecurityStatusListener.java b/domain/src/main/java/ch/threema/domain/protocol/csp/fs/ForwardSecurityStatusListener.java
index dbd6ba56..1f419149 100644
--- a/domain/src/main/java/ch/threema/domain/protocol/csp/fs/ForwardSecurityStatusListener.java
+++ b/domain/src/main/java/ch/threema/domain/protocol/csp/fs/ForwardSecurityStatusListener.java
@@ -21,24 +21,46 @@
 
 package ch.threema.domain.protocol.csp.fs;
 
+import androidx.annotation.NonNull;
+import androidx.annotation.Nullable;
 import ch.threema.domain.fs.DHSessionId;
 import ch.threema.domain.fs.DHSession;
 import ch.threema.domain.models.Contact;
 import ch.threema.domain.models.MessageId;
+import ch.threema.domain.protocol.csp.messages.AbstractMessage;
+import ch.threema.domain.protocol.csp.messages.fs.ForwardSecurityDataReject;
 
 /**
  * Interface for classes that receive updates when a forward security session changes status.
  */
 public interface ForwardSecurityStatusListener {
-	void newSessionInitiated(DHSession session, Contact contact);
-	void responderSessionEstablished(DHSession session, Contact contact, boolean existingSessionPreempted);
-	void initiatorSessionEstablished(DHSession session, Contact contact);
-	void rejectReceived(DHSessionId sessionId, Contact contact, MessageId rejectedMessageId);
-	void sessionNotFound(DHSessionId sessionId, Contact contact);
-	void sessionBadDhState(DHSessionId sessionId, Contact contact);
-	void sessionTerminated(DHSessionId sessionId, Contact contact);
-	void messagesSkipped(DHSessionId sessionId, Contact contact, int numSkipped);
-	void messageOutOfOrder(DHSessionId sessionId, Contact contact, MessageId messageId);
-	void messageDecryptionFailed(DHSessionId sessionId, Contact contact, MessageId failedMessageId);
-	void first4DhMessageReceived(DHSessionId sessionId, Contact contact);
+	void newSessionInitiated(@NonNull DHSession session, @NonNull Contact contact);
+	void responderSessionEstablished(@NonNull DHSession session, @NonNull Contact contact, boolean existingSessionPreempted);
+	void initiatorSessionEstablished(@NonNull DHSession session, @NonNull Contact contact);
+	void rejectReceived(@NonNull ForwardSecurityDataReject rejectData, @NonNull Contact contact, @Nullable DHSession session, boolean hasForwardSecuritySupport);
+	void sessionNotFound(@NonNull DHSessionId sessionId, @NonNull Contact contact);
+	void sessionForMessageNotFound(@NonNull DHSessionId sessionId, @Nullable MessageId messageId, @NonNull Contact contact);
+	void sessionTerminated(@Nullable DHSessionId sessionId, @NonNull Contact contact, boolean sessionUnknown, boolean hasForwardSecuritySupport);
+	void messagesSkipped(@NonNull DHSessionId sessionId, @NonNull Contact contact, int numSkipped);
+	void messageOutOfOrder(@NonNull DHSessionId sessionId, @NonNull Contact contact, @Nullable MessageId messageId);
+	void first4DhMessageReceived(@NonNull DHSession session, @NonNull Contact contact);
+	void versionsUpdated(@NonNull DHSession session, @NonNull DHSession.UpdatedVersionsSnapshot versionsSnapshot, @NonNull Contact contact);
+	void messageWithoutFSReceived(@NonNull Contact contact, @NonNull DHSession session, @NonNull AbstractMessage message);
+	void postIllegalSessionState(@NonNull DHSessionId sessionId, @NonNull Contact contact);
+
+	/**
+	 * Check whether the contact has forward security support based on the feature mask. Note that
+	 * this does not fetch the latest feature mask.
+	 *
+	 * @param contact the contact that is checked for forward security support
+	 * @return true if the contact's feature mask indicates forward security support
+	 */
+	boolean hasForwardSecuritySupport(@NonNull Contact contact);
+
+	/**
+	 * Update the feature mask of the given contact and check whether forward security is supported.
+	 *
+	 * @param contact the contact that is checked for forward security support
+	 */
+	void updateFeatureMask(@NonNull Contact contact);
 }
diff --git a/domain/src/main/java/ch/threema/domain/protocol/csp/messages/AbstractMessage.java b/domain/src/main/java/ch/threema/domain/protocol/csp/messages/AbstractMessage.java
index 296cb5a9..a4839042 100644
--- a/domain/src/main/java/ch/threema/domain/protocol/csp/messages/AbstractMessage.java
+++ b/domain/src/main/java/ch/threema/domain/protocol/csp/messages/AbstractMessage.java
@@ -31,6 +31,7 @@ import ch.threema.domain.models.QueueMessageId;
 import ch.threema.domain.protocol.csp.ProtocolDefines;
 import ch.threema.domain.protocol.csp.coders.MessageBox;
 import ch.threema.domain.protocol.csp.messages.fs.ForwardSecurityMode;
+import ch.threema.protobuf.csp.e2e.fs.Version;
 
 /**
  * Abstract base class for messages that can be sent via the Threema server interface,
@@ -117,6 +118,17 @@ public abstract class AbstractMessage {
 		return (getMessageFlags() & ProtocolDefines.MESSAGE_FLAG_NO_DELIVERY_RECEIPTS) == ProtocolDefines.MESSAGE_FLAG_NO_DELIVERY_RECEIPTS;
 	}
 
+	/**
+	 * Get the minimum version of forward security that is needed to send this message type with
+	 * perfect forward security. If the message type is currently not supported to be sent with
+	 * forward security, null is returned.
+	 *
+	 * @return the minimum version that is required in a session for this message type; null if it
+	 * is currently not supported
+	 */
+	@Nullable
+	public abstract Version getMinimumRequiredForwardSecurityVersion();
+
 	/**
 	 * Return whether the user's profile information (nickname, picture etc.) is allowed to
 	 * be sent along with this message. This should be set to true for user-initiated messages only.
@@ -193,6 +205,21 @@ public abstract class AbstractMessage {
 		this.messageFlags = messageFlags;
 	}
 
+	/**
+	 * Get the default message type flags. These flags are based on {@link #flagSendPush()},
+	 * {@link #flagNoServerQueuing}, {@link #flagNoServerAck()}, {@link #flagGroupMessage()}, and
+	 * {@link #flagShortLivedServerQueuing()}.
+	 *
+	 * @return the message flags that are set by default for the specific message type
+	 */
+	public int getMessageTypeDefaultFlags() {
+		return (flagSendPush() ? ProtocolDefines.MESSAGE_FLAG_SEND_PUSH : 0)
+			| (flagNoServerQueuing() ? ProtocolDefines.MESSAGE_FLAG_NO_SERVER_QUEUING : 0)
+			| (flagNoServerAck() ? ProtocolDefines.MESSAGE_FLAG_NO_SERVER_ACK : 0)
+			| (flagGroupMessage() ? ProtocolDefines.MESSAGE_FLAG_GROUP : 0)
+			| (flagShortLivedServerQueuing() ? ProtocolDefines.MESSAGE_FLAG_SHORT_LIVED : 0);
+	}
+
 	public ForwardSecurityMode getForwardSecurityMode() {
 		return forwardSecurityMode;
 	}
diff --git a/domain/src/main/java/ch/threema/domain/protocol/csp/messages/BadMessageException.java b/domain/src/main/java/ch/threema/domain/protocol/csp/messages/BadMessageException.java
index 5e575be5..8d3c0098 100644
--- a/domain/src/main/java/ch/threema/domain/protocol/csp/messages/BadMessageException.java
+++ b/domain/src/main/java/ch/threema/domain/protocol/csp/messages/BadMessageException.java
@@ -23,32 +23,11 @@ package ch.threema.domain.protocol.csp.messages;
 
 public class BadMessageException extends Exception {
 
-	private final boolean drop;
-
-	public BadMessageException(String msg, boolean shouldDrop) {
-		super(msg);
-		this.drop = shouldDrop;
-	}
-
 	public BadMessageException(String msg) {
-		this(msg, false);
-	}
-
-	public BadMessageException(String msg, boolean shouldDrop, Throwable cause) {
-		super(msg, cause);
-		this.drop = shouldDrop;
+		super(msg);
 	}
 
 	public BadMessageException(String msg, Throwable cause) {
-		this(msg, false, cause);
-	}
-
-	/**
-	 * Return whether this message should be dropped and acked.
-	 * If set to false, no ack should be sent, resulting in a retransmission
-	 * of the message by the server.
-	 */
-	public boolean shouldDrop() {
-		return drop;
+		super(msg, cause);
 	}
 }
diff --git a/domain/src/main/java/ch/threema/domain/protocol/csp/messages/BoxAudioMessage.java b/domain/src/main/java/ch/threema/domain/protocol/csp/messages/BoxAudioMessage.java
index 76c6b32d..2aefd27e 100644
--- a/domain/src/main/java/ch/threema/domain/protocol/csp/messages/BoxAudioMessage.java
+++ b/domain/src/main/java/ch/threema/domain/protocol/csp/messages/BoxAudioMessage.java
@@ -26,7 +26,9 @@ import org.apache.commons.io.EndianUtils;
 import java.io.ByteArrayOutputStream;
 import java.io.IOException;
 
+import androidx.annotation.Nullable;
 import ch.threema.domain.protocol.csp.ProtocolDefines;
+import ch.threema.protobuf.csp.e2e.fs.Version;
 
 /**
  * A message that has an audio recording (stored on the blob server) as its content.
@@ -57,6 +59,12 @@ public class BoxAudioMessage extends AbstractMessage {
 		return true;
 	}
 
+	@Override
+	@Nullable
+	public Version getMinimumRequiredForwardSecurityVersion() {
+		return null;
+	}
+
 	@Override
 	public boolean allowUserProfileDistribution() {
 		return true;
diff --git a/domain/src/main/java/ch/threema/domain/protocol/csp/messages/BoxImageMessage.java b/domain/src/main/java/ch/threema/domain/protocol/csp/messages/BoxImageMessage.java
index fd831cd7..d9a3347b 100644
--- a/domain/src/main/java/ch/threema/domain/protocol/csp/messages/BoxImageMessage.java
+++ b/domain/src/main/java/ch/threema/domain/protocol/csp/messages/BoxImageMessage.java
@@ -25,7 +25,9 @@ import com.neilalexander.jnacl.NaCl;
 
 import org.apache.commons.io.EndianUtils;
 
+import androidx.annotation.Nullable;
 import ch.threema.domain.protocol.csp.ProtocolDefines;
+import ch.threema.protobuf.csp.e2e.fs.Version;
 
 /**
  * A message that has an image (stored on the blob server) as its content.
@@ -56,6 +58,12 @@ public class BoxImageMessage extends AbstractMessage {
 		return true;
 	}
 
+	@Override
+	@Nullable
+	public Version getMinimumRequiredForwardSecurityVersion() {
+		return null;
+	}
+
 	@Override
 	public boolean allowUserProfileDistribution() {
 		return true;
diff --git a/domain/src/main/java/ch/threema/domain/protocol/csp/messages/BoxLocationMessage.java b/domain/src/main/java/ch/threema/domain/protocol/csp/messages/BoxLocationMessage.java
index f48ac772..0f52db72 100644
--- a/domain/src/main/java/ch/threema/domain/protocol/csp/messages/BoxLocationMessage.java
+++ b/domain/src/main/java/ch/threema/domain/protocol/csp/messages/BoxLocationMessage.java
@@ -24,7 +24,9 @@ package ch.threema.domain.protocol.csp.messages;
 import java.nio.charset.StandardCharsets;
 import java.util.Locale;
 
+import androidx.annotation.Nullable;
 import ch.threema.domain.protocol.csp.ProtocolDefines;
+import ch.threema.protobuf.csp.e2e.fs.Version;
 
 /**
  * A message that has a GPS location with accuracy as its contents.
@@ -53,6 +55,12 @@ public class BoxLocationMessage extends AbstractMessage {
 		return true;
 	}
 
+	@Nullable
+	@Override
+	public Version getMinimumRequiredForwardSecurityVersion() {
+		return Version.V1_0;
+	}
+
 	@Override
 	public boolean allowUserProfileDistribution() {
 		return true;
diff --git a/domain/src/main/java/ch/threema/domain/protocol/csp/messages/BoxTextMessage.java b/domain/src/main/java/ch/threema/domain/protocol/csp/messages/BoxTextMessage.java
index 10d65ad0..71544a1c 100644
--- a/domain/src/main/java/ch/threema/domain/protocol/csp/messages/BoxTextMessage.java
+++ b/domain/src/main/java/ch/threema/domain/protocol/csp/messages/BoxTextMessage.java
@@ -23,7 +23,9 @@ package ch.threema.domain.protocol.csp.messages;
 
 import java.nio.charset.StandardCharsets;
 
+import androidx.annotation.Nullable;
 import ch.threema.domain.protocol.csp.ProtocolDefines;
+import ch.threema.protobuf.csp.e2e.fs.Version;
 
 /**
  * A message that has plain text as its contents.
@@ -46,6 +48,12 @@ public class BoxTextMessage extends AbstractMessage {
 		return true;
 	}
 
+	@Nullable
+	@Override
+	public Version getMinimumRequiredForwardSecurityVersion() {
+		return Version.V1_0;
+	}
+
 	@Override
 	public boolean allowUserProfileDistribution() {
 		return true;
diff --git a/domain/src/main/java/ch/threema/domain/protocol/csp/messages/BoxVideoMessage.java b/domain/src/main/java/ch/threema/domain/protocol/csp/messages/BoxVideoMessage.java
index aa3f742e..32aa2e84 100644
--- a/domain/src/main/java/ch/threema/domain/protocol/csp/messages/BoxVideoMessage.java
+++ b/domain/src/main/java/ch/threema/domain/protocol/csp/messages/BoxVideoMessage.java
@@ -26,7 +26,9 @@ import org.apache.commons.io.EndianUtils;
 import java.io.ByteArrayOutputStream;
 import java.io.IOException;
 
+import androidx.annotation.Nullable;
 import ch.threema.domain.protocol.csp.ProtocolDefines;
+import ch.threema.protobuf.csp.e2e.fs.Version;
 
 /**
  * A message that has a video including thumbnail (stored on the blob server) as its content.
@@ -66,6 +68,12 @@ public class BoxVideoMessage extends AbstractMessage {
 		return true;
 	}
 
+	@Override
+	@Nullable
+	public Version getMinimumRequiredForwardSecurityVersion() {
+		return null;
+	}
+
 	@Override
 	public boolean allowUserProfileDistribution() {
 		return true;
diff --git a/domain/src/main/java/ch/threema/domain/protocol/csp/messages/ContactDeletePhotoMessage.java b/domain/src/main/java/ch/threema/domain/protocol/csp/messages/ContactDeleteProfilePictureMessage.java
similarity index 77%
rename from domain/src/main/java/ch/threema/domain/protocol/csp/messages/ContactDeletePhotoMessage.java
rename to domain/src/main/java/ch/threema/domain/protocol/csp/messages/ContactDeleteProfilePictureMessage.java
index 61e6bde3..c2e1e912 100644
--- a/domain/src/main/java/ch/threema/domain/protocol/csp/messages/ContactDeletePhotoMessage.java
+++ b/domain/src/main/java/ch/threema/domain/protocol/csp/messages/ContactDeleteProfilePictureMessage.java
@@ -21,11 +21,13 @@
 
 package ch.threema.domain.protocol.csp.messages;
 
+import androidx.annotation.Nullable;
 import ch.threema.domain.protocol.csp.ProtocolDefines;
+import ch.threema.protobuf.csp.e2e.fs.Version;
 
-public class ContactDeletePhotoMessage extends AbstractMessage {
+public class ContactDeleteProfilePictureMessage extends AbstractMessage {
 
-	public ContactDeletePhotoMessage() {
+	public ContactDeleteProfilePictureMessage() {
 		super();
 	}
 
@@ -34,6 +36,12 @@ public class ContactDeletePhotoMessage extends AbstractMessage {
 		return ProtocolDefines.MSGTYPE_CONTACT_DELETE_PHOTO;
 	}
 
+	@Nullable
+	@Override
+	public Version getMinimumRequiredForwardSecurityVersion() {
+		return Version.V1_1;
+	}
+
 	@Override
 	public byte[] getBody() {
 		return new byte[0];
diff --git a/domain/src/main/java/ch/threema/domain/protocol/csp/messages/ContactRequestPhotoMessage.java b/domain/src/main/java/ch/threema/domain/protocol/csp/messages/ContactRequestProfilePictureMessage.java
similarity index 77%
rename from domain/src/main/java/ch/threema/domain/protocol/csp/messages/ContactRequestPhotoMessage.java
rename to domain/src/main/java/ch/threema/domain/protocol/csp/messages/ContactRequestProfilePictureMessage.java
index 2c570958..4f8eb692 100644
--- a/domain/src/main/java/ch/threema/domain/protocol/csp/messages/ContactRequestPhotoMessage.java
+++ b/domain/src/main/java/ch/threema/domain/protocol/csp/messages/ContactRequestProfilePictureMessage.java
@@ -21,11 +21,13 @@
 
 package ch.threema.domain.protocol.csp.messages;
 
+import androidx.annotation.Nullable;
 import ch.threema.domain.protocol.csp.ProtocolDefines;
+import ch.threema.protobuf.csp.e2e.fs.Version;
 
-public class ContactRequestPhotoMessage extends AbstractMessage {
+public class ContactRequestProfilePictureMessage extends AbstractMessage {
 
-	public ContactRequestPhotoMessage() {
+	public ContactRequestProfilePictureMessage() {
 		super();
 	}
 
@@ -34,6 +36,12 @@ public class ContactRequestPhotoMessage extends AbstractMessage {
 		return ProtocolDefines.MSGTYPE_CONTACT_REQUEST_PHOTO;
 	}
 
+	@Nullable
+	@Override
+	public Version getMinimumRequiredForwardSecurityVersion() {
+		return Version.V1_1;
+	}
+
 	@Override
 	public byte[] getBody() {
 		return new byte[0];
diff --git a/domain/src/main/java/ch/threema/domain/protocol/csp/messages/ContactSetPhotoMessage.java b/domain/src/main/java/ch/threema/domain/protocol/csp/messages/ContactSetProfilePictureMessage.java
similarity index 87%
rename from domain/src/main/java/ch/threema/domain/protocol/csp/messages/ContactSetPhotoMessage.java
rename to domain/src/main/java/ch/threema/domain/protocol/csp/messages/ContactSetProfilePictureMessage.java
index 2cbe130c..735b1998 100644
--- a/domain/src/main/java/ch/threema/domain/protocol/csp/messages/ContactSetPhotoMessage.java
+++ b/domain/src/main/java/ch/threema/domain/protocol/csp/messages/ContactSetProfilePictureMessage.java
@@ -26,8 +26,10 @@ import org.slf4j.Logger;
 
 import java.io.ByteArrayOutputStream;
 
+import androidx.annotation.Nullable;
 import ch.threema.base.utils.LoggingUtil;
 import ch.threema.domain.protocol.csp.ProtocolDefines;
+import ch.threema.protobuf.csp.e2e.fs.Version;
 
 /**
  * A profile picture uploaded as a blob
@@ -35,7 +37,7 @@ import ch.threema.domain.protocol.csp.ProtocolDefines;
  * The contents are referenced by the {@code blobId}, the file {@code size} in bytes,
  * and the nonce to be used when decrypting the image blob.
  */
-public class ContactSetPhotoMessage extends AbstractMessage {
+public class ContactSetProfilePictureMessage extends AbstractMessage {
 
 	private static final Logger logger = LoggingUtil.getThreemaLogger("ContactSetPhotoMessage");
 
@@ -43,7 +45,7 @@ public class ContactSetPhotoMessage extends AbstractMessage {
 	private int size;
 	private byte[] encryptionKey;
 
-	public ContactSetPhotoMessage() {
+	public ContactSetProfilePictureMessage() {
 		super();
 	}
 
@@ -52,6 +54,12 @@ public class ContactSetPhotoMessage extends AbstractMessage {
 		return ProtocolDefines.MSGTYPE_CONTACT_SET_PHOTO;
 	}
 
+	@Nullable
+	@Override
+	public Version getMinimumRequiredForwardSecurityVersion() {
+		return Version.V1_1;
+	}
+
 	@Override
 	public byte[] getBody() {
 		try {
diff --git a/domain/src/main/java/ch/threema/domain/protocol/csp/messages/DeliveryReceiptMessage.java b/domain/src/main/java/ch/threema/domain/protocol/csp/messages/DeliveryReceiptMessage.java
index db1707a9..de25ba61 100644
--- a/domain/src/main/java/ch/threema/domain/protocol/csp/messages/DeliveryReceiptMessage.java
+++ b/domain/src/main/java/ch/threema/domain/protocol/csp/messages/DeliveryReceiptMessage.java
@@ -26,9 +26,11 @@ import org.slf4j.Logger;
 import java.io.ByteArrayOutputStream;
 import java.io.IOException;
 
+import androidx.annotation.Nullable;
 import ch.threema.base.utils.LoggingUtil;
 import ch.threema.domain.models.MessageId;
 import ch.threema.domain.protocol.csp.ProtocolDefines;
+import ch.threema.protobuf.csp.e2e.fs.Version;
 
 /**
  * A message that confirms delivery of one or multiple other messages, listed with their
@@ -51,6 +53,12 @@ public class DeliveryReceiptMessage extends AbstractMessage {
 		return ProtocolDefines.MSGTYPE_DELIVERY_RECEIPT;
 	}
 
+	@Nullable
+	@Override
+	public Version getMinimumRequiredForwardSecurityVersion() {
+		return Version.V1_1;
+	}
+
 	private boolean isReaction() {
 		return DeliveryReceiptUtils.isReaction(this.receiptType);
 	}
diff --git a/domain/src/main/java/ch/threema/domain/protocol/csp/messages/GroupAudioMessage.java b/domain/src/main/java/ch/threema/domain/protocol/csp/messages/GroupAudioMessage.java
index 763d8feb..dc030425 100644
--- a/domain/src/main/java/ch/threema/domain/protocol/csp/messages/GroupAudioMessage.java
+++ b/domain/src/main/java/ch/threema/domain/protocol/csp/messages/GroupAudioMessage.java
@@ -27,7 +27,9 @@ import java.io.ByteArrayOutputStream;
 import java.io.IOException;
 import java.nio.charset.StandardCharsets;
 
+import androidx.annotation.Nullable;
 import ch.threema.domain.protocol.csp.ProtocolDefines;
+import ch.threema.protobuf.csp.e2e.fs.Version;
 
 /**
  * A group message that has an audio recording (stored on the blob server) as its content.
@@ -59,6 +61,12 @@ public class GroupAudioMessage extends AbstractGroupMessage {
 		return true;
 	}
 
+	@Override
+	@Nullable
+	public Version getMinimumRequiredForwardSecurityVersion() {
+		return null;
+	}
+
 	@Override
 	public boolean allowUserProfileDistribution() {
 		return true;
diff --git a/domain/src/main/java/ch/threema/domain/protocol/csp/messages/GroupCreateMessage.java b/domain/src/main/java/ch/threema/domain/protocol/csp/messages/GroupCreateMessage.java
index 058a284e..ad8c1e3a 100644
--- a/domain/src/main/java/ch/threema/domain/protocol/csp/messages/GroupCreateMessage.java
+++ b/domain/src/main/java/ch/threema/domain/protocol/csp/messages/GroupCreateMessage.java
@@ -26,8 +26,10 @@ import org.slf4j.Logger;
 import java.io.ByteArrayOutputStream;
 import java.nio.charset.StandardCharsets;
 
+import androidx.annotation.Nullable;
 import ch.threema.base.utils.LoggingUtil;
 import ch.threema.domain.protocol.csp.ProtocolDefines;
+import ch.threema.protobuf.csp.e2e.fs.Version;
 
 /**
  * A group creation message.
@@ -47,6 +49,12 @@ public class GroupCreateMessage extends AbstractGroupMessage {
 		return ProtocolDefines.MSGTYPE_GROUP_CREATE;
 	}
 
+	@Override
+	@Nullable
+	public Version getMinimumRequiredForwardSecurityVersion() {
+		return null;
+	}
+
 	@Override
 	public boolean allowUserProfileDistribution() {
 		return true;
diff --git a/domain/src/main/java/ch/threema/domain/protocol/csp/messages/GroupDeletePhotoMessage.java b/domain/src/main/java/ch/threema/domain/protocol/csp/messages/GroupDeletePhotoMessage.java
index 69dd1b7d..0c0291e5 100644
--- a/domain/src/main/java/ch/threema/domain/protocol/csp/messages/GroupDeletePhotoMessage.java
+++ b/domain/src/main/java/ch/threema/domain/protocol/csp/messages/GroupDeletePhotoMessage.java
@@ -25,8 +25,10 @@ import org.slf4j.Logger;
 
 import java.io.ByteArrayOutputStream;
 
+import androidx.annotation.Nullable;
 import ch.threema.base.utils.LoggingUtil;
 import ch.threema.domain.protocol.csp.ProtocolDefines;
+import ch.threema.protobuf.csp.e2e.fs.Version;
 
 /**
  * This message is sent by a group creator to the group members to request the group picture to be removed.
@@ -44,6 +46,12 @@ public class GroupDeletePhotoMessage extends AbstractGroupMessage {
 		return ProtocolDefines.MSGTYPE_GROUP_DELETE_PHOTO;
 	}
 
+	@Override
+	@Nullable
+	public Version getMinimumRequiredForwardSecurityVersion() {
+		return null;
+	}
+
 	@Override
 	public byte[] getBody() {
 		try {
diff --git a/domain/src/main/java/ch/threema/domain/protocol/csp/messages/GroupDeliveryReceiptMessage.java b/domain/src/main/java/ch/threema/domain/protocol/csp/messages/GroupDeliveryReceiptMessage.java
index a9aeaad2..f06ff3a7 100644
--- a/domain/src/main/java/ch/threema/domain/protocol/csp/messages/GroupDeliveryReceiptMessage.java
+++ b/domain/src/main/java/ch/threema/domain/protocol/csp/messages/GroupDeliveryReceiptMessage.java
@@ -26,9 +26,11 @@ import org.slf4j.Logger;
 import java.io.ByteArrayOutputStream;
 import java.nio.charset.StandardCharsets;
 
+import androidx.annotation.Nullable;
 import ch.threema.base.utils.LoggingUtil;
 import ch.threema.domain.models.MessageId;
 import ch.threema.domain.protocol.csp.ProtocolDefines;
+import ch.threema.protobuf.csp.e2e.fs.Version;
 
 /**
  * A message that confirms delivery of one or multiple other messages, listed with their
@@ -55,6 +57,12 @@ public class GroupDeliveryReceiptMessage extends AbstractGroupMessage {
 		return DeliveryReceiptUtils.isReaction(this.receiptType);
 	}
 
+	@Override
+	@Nullable
+	public Version getMinimumRequiredForwardSecurityVersion() {
+		return null;
+	}
+
 	@Override
 	public boolean allowUserProfileDistribution() {
 		return this.isReaction();
diff --git a/domain/src/main/java/ch/threema/domain/protocol/csp/messages/GroupImageMessage.java b/domain/src/main/java/ch/threema/domain/protocol/csp/messages/GroupImageMessage.java
index 8a009d35..c37f761d 100644
--- a/domain/src/main/java/ch/threema/domain/protocol/csp/messages/GroupImageMessage.java
+++ b/domain/src/main/java/ch/threema/domain/protocol/csp/messages/GroupImageMessage.java
@@ -27,8 +27,10 @@ import org.slf4j.Logger;
 import java.io.ByteArrayOutputStream;
 import java.nio.charset.StandardCharsets;
 
+import androidx.annotation.Nullable;
 import ch.threema.base.utils.LoggingUtil;
 import ch.threema.domain.protocol.csp.ProtocolDefines;
+import ch.threema.protobuf.csp.e2e.fs.Version;
 
 /**
  * A group message that has an image (stored on the blob server) as its content.
@@ -61,6 +63,12 @@ public class GroupImageMessage extends AbstractGroupMessage {
 		return true;
 	}
 
+	@Override
+	@Nullable
+	public Version getMinimumRequiredForwardSecurityVersion() {
+		return null;
+	}
+
 	@Override
 	public boolean allowUserProfileDistribution() {
 		return true;
diff --git a/domain/src/main/java/ch/threema/domain/protocol/csp/messages/GroupLeaveMessage.java b/domain/src/main/java/ch/threema/domain/protocol/csp/messages/GroupLeaveMessage.java
index e622e153..3f7bae39 100644
--- a/domain/src/main/java/ch/threema/domain/protocol/csp/messages/GroupLeaveMessage.java
+++ b/domain/src/main/java/ch/threema/domain/protocol/csp/messages/GroupLeaveMessage.java
@@ -26,8 +26,10 @@ import org.slf4j.Logger;
 import java.io.ByteArrayOutputStream;
 import java.nio.charset.StandardCharsets;
 
+import androidx.annotation.Nullable;
 import ch.threema.base.utils.LoggingUtil;
 import ch.threema.domain.protocol.csp.ProtocolDefines;
+import ch.threema.protobuf.csp.e2e.fs.Version;
 
 /**
  * A group message that indicates that the sender wants to be removed from the group.
@@ -40,6 +42,12 @@ public class GroupLeaveMessage extends AbstractGroupMessage {
 		super();
 	}
 
+	@Override
+	@Nullable
+	public Version getMinimumRequiredForwardSecurityVersion() {
+		return null;
+	}
+
 	@Override
 	public int getType() {
 		return ProtocolDefines.MSGTYPE_GROUP_LEAVE;
diff --git a/domain/src/main/java/ch/threema/domain/protocol/csp/messages/GroupLocationMessage.java b/domain/src/main/java/ch/threema/domain/protocol/csp/messages/GroupLocationMessage.java
index 1e39527c..cd7cc4ef 100644
--- a/domain/src/main/java/ch/threema/domain/protocol/csp/messages/GroupLocationMessage.java
+++ b/domain/src/main/java/ch/threema/domain/protocol/csp/messages/GroupLocationMessage.java
@@ -27,8 +27,10 @@ import java.io.ByteArrayOutputStream;
 import java.nio.charset.StandardCharsets;
 import java.util.Locale;
 
+import androidx.annotation.Nullable;
 import ch.threema.base.utils.LoggingUtil;
 import ch.threema.domain.protocol.csp.ProtocolDefines;
+import ch.threema.protobuf.csp.e2e.fs.Version;
 
 /**
  * A group message that has a GPS location with accuracy as its contents.
@@ -59,6 +61,12 @@ public class GroupLocationMessage extends AbstractGroupMessage {
 		return true;
 	}
 
+	@Override
+	@Nullable
+	public Version getMinimumRequiredForwardSecurityVersion() {
+		return null;
+	}
+
 	@Override
 	public boolean allowUserProfileDistribution() {
 		return true;
diff --git a/domain/src/main/java/ch/threema/domain/protocol/csp/messages/GroupRenameMessage.java b/domain/src/main/java/ch/threema/domain/protocol/csp/messages/GroupRenameMessage.java
index 01fb780b..1932f9a4 100644
--- a/domain/src/main/java/ch/threema/domain/protocol/csp/messages/GroupRenameMessage.java
+++ b/domain/src/main/java/ch/threema/domain/protocol/csp/messages/GroupRenameMessage.java
@@ -26,8 +26,10 @@ import org.slf4j.Logger;
 import java.io.ByteArrayOutputStream;
 import java.nio.charset.StandardCharsets;
 
+import androidx.annotation.Nullable;
 import ch.threema.base.utils.LoggingUtil;
 import ch.threema.domain.protocol.csp.ProtocolDefines;
+import ch.threema.protobuf.csp.e2e.fs.Version;
 
 /**
  * A group message send by the group creator that causes the group to be renamed.
@@ -47,6 +49,12 @@ public class GroupRenameMessage extends AbstractGroupMessage {
 		return ProtocolDefines.MSGTYPE_GROUP_RENAME;
 	}
 
+	@Override
+	@Nullable
+	public Version getMinimumRequiredForwardSecurityVersion() {
+		return null;
+	}
+
 	@Override
 	public boolean allowUserProfileDistribution() {
 		return true;
diff --git a/domain/src/main/java/ch/threema/domain/protocol/csp/messages/GroupRequestSyncMessage.java b/domain/src/main/java/ch/threema/domain/protocol/csp/messages/GroupRequestSyncMessage.java
index 438781bc..d7b812fa 100644
--- a/domain/src/main/java/ch/threema/domain/protocol/csp/messages/GroupRequestSyncMessage.java
+++ b/domain/src/main/java/ch/threema/domain/protocol/csp/messages/GroupRequestSyncMessage.java
@@ -25,8 +25,10 @@ import org.slf4j.Logger;
 
 import java.io.ByteArrayOutputStream;
 
+import androidx.annotation.Nullable;
 import ch.threema.base.utils.LoggingUtil;
 import ch.threema.domain.protocol.csp.ProtocolDefines;
+import ch.threema.protobuf.csp.e2e.fs.Version;
 
 /**
  * Request current group information to be sent back.
@@ -39,6 +41,12 @@ public class GroupRequestSyncMessage extends AbstractGroupMessage {
 		super();
 	}
 
+	@Override
+	@Nullable
+	public Version getMinimumRequiredForwardSecurityVersion() {
+		return null;
+	}
+
 	@Override
 	public int getType() {
 		return ProtocolDefines.MSGTYPE_GROUP_REQUEST_SYNC;
diff --git a/domain/src/main/java/ch/threema/domain/protocol/csp/messages/GroupSetPhotoMessage.java b/domain/src/main/java/ch/threema/domain/protocol/csp/messages/GroupSetPhotoMessage.java
index fd79f16d..103495d1 100644
--- a/domain/src/main/java/ch/threema/domain/protocol/csp/messages/GroupSetPhotoMessage.java
+++ b/domain/src/main/java/ch/threema/domain/protocol/csp/messages/GroupSetPhotoMessage.java
@@ -26,8 +26,10 @@ import org.slf4j.Logger;
 
 import java.io.ByteArrayOutputStream;
 
+import androidx.annotation.Nullable;
 import ch.threema.base.utils.LoggingUtil;
 import ch.threema.domain.protocol.csp.ProtocolDefines;
+import ch.threema.protobuf.csp.e2e.fs.Version;
 
 /**
  * A group message sent by the group creator that causes a new photo to be set for the group.
@@ -49,6 +51,12 @@ public class GroupSetPhotoMessage extends AbstractGroupMessage {
 		return ProtocolDefines.MSGTYPE_GROUP_SET_PHOTO;
 	}
 
+	@Override
+	@Nullable
+	public Version getMinimumRequiredForwardSecurityVersion() {
+		return null;
+	}
+
 	@Override
 	public byte[] getBody() {
 		try {
diff --git a/domain/src/main/java/ch/threema/domain/protocol/csp/messages/GroupTextMessage.java b/domain/src/main/java/ch/threema/domain/protocol/csp/messages/GroupTextMessage.java
index f4491991..b680d3cf 100644
--- a/domain/src/main/java/ch/threema/domain/protocol/csp/messages/GroupTextMessage.java
+++ b/domain/src/main/java/ch/threema/domain/protocol/csp/messages/GroupTextMessage.java
@@ -26,8 +26,10 @@ import org.slf4j.Logger;
 import java.io.ByteArrayOutputStream;
 import java.nio.charset.StandardCharsets;
 
+import androidx.annotation.Nullable;
 import ch.threema.base.utils.LoggingUtil;
 import ch.threema.domain.protocol.csp.ProtocolDefines;
+import ch.threema.protobuf.csp.e2e.fs.Version;
 
 /**
  * A group message that has plain text as its contents.
@@ -52,6 +54,12 @@ public class GroupTextMessage extends AbstractGroupMessage {
 		return true;
 	}
 
+	@Override
+	@Nullable
+	public Version getMinimumRequiredForwardSecurityVersion() {
+		return null;
+	}
+
 	@Override
 	public boolean allowUserProfileDistribution() {
 		return true;
diff --git a/domain/src/main/java/ch/threema/domain/protocol/csp/messages/GroupVideoMessage.java b/domain/src/main/java/ch/threema/domain/protocol/csp/messages/GroupVideoMessage.java
index 261729a5..dd1dd4ad 100644
--- a/domain/src/main/java/ch/threema/domain/protocol/csp/messages/GroupVideoMessage.java
+++ b/domain/src/main/java/ch/threema/domain/protocol/csp/messages/GroupVideoMessage.java
@@ -27,7 +27,9 @@ import java.io.ByteArrayOutputStream;
 import java.io.IOException;
 import java.nio.charset.StandardCharsets;
 
+import androidx.annotation.Nullable;
 import ch.threema.domain.protocol.csp.ProtocolDefines;
+import ch.threema.protobuf.csp.e2e.fs.Version;
 
 /**
  * A group message that has a video including thumbnail (stored on the blob server) as its content.
@@ -67,6 +69,12 @@ public class GroupVideoMessage extends AbstractGroupMessage {
 		return true;
 	}
 
+	@Override
+	@Nullable
+	public Version getMinimumRequiredForwardSecurityVersion() {
+		return null;
+	}
+
 	@Override
 	public boolean allowUserProfileDistribution() {
 		return true;
diff --git a/domain/src/main/java/ch/threema/domain/protocol/csp/messages/TypingIndicatorMessage.java b/domain/src/main/java/ch/threema/domain/protocol/csp/messages/TypingIndicatorMessage.java
index b85900ae..eef872c2 100644
--- a/domain/src/main/java/ch/threema/domain/protocol/csp/messages/TypingIndicatorMessage.java
+++ b/domain/src/main/java/ch/threema/domain/protocol/csp/messages/TypingIndicatorMessage.java
@@ -21,7 +21,9 @@
 
 package ch.threema.domain.protocol.csp.messages;
 
+import androidx.annotation.Nullable;
 import ch.threema.domain.protocol.csp.ProtocolDefines;
+import ch.threema.protobuf.csp.e2e.fs.Version;
 
 /**
  * A "throw-away" message that signals that the sender is currently typing a message or has
@@ -40,6 +42,12 @@ public class TypingIndicatorMessage extends AbstractMessage {
 		return ProtocolDefines.MSGTYPE_TYPING_INDICATOR;
 	}
 
+	@Nullable
+	@Override
+	public Version getMinimumRequiredForwardSecurityVersion() {
+		return Version.V1_1;
+	}
+
 	@Override
 	public byte[] getBody() {
 		byte[] body = new byte[1];
diff --git a/domain/src/main/java/ch/threema/domain/protocol/csp/messages/ballot/BallotCreateMessage.java b/domain/src/main/java/ch/threema/domain/protocol/csp/messages/ballot/BallotCreateMessage.java
index a8d98e4c..4ac5447a 100644
--- a/domain/src/main/java/ch/threema/domain/protocol/csp/messages/ballot/BallotCreateMessage.java
+++ b/domain/src/main/java/ch/threema/domain/protocol/csp/messages/ballot/BallotCreateMessage.java
@@ -25,9 +25,11 @@ import org.slf4j.Logger;
 
 import java.io.ByteArrayOutputStream;
 
+import androidx.annotation.Nullable;
 import ch.threema.base.utils.LoggingUtil;
 import ch.threema.domain.protocol.csp.messages.AbstractMessage;
 import ch.threema.domain.protocol.csp.ProtocolDefines;
+import ch.threema.protobuf.csp.e2e.fs.Version;
 
 /**
  * A ballot creation message.
@@ -51,6 +53,12 @@ public class BallotCreateMessage extends AbstractMessage
 		return true;
 	}
 
+	@Nullable
+	@Override
+	public Version getMinimumRequiredForwardSecurityVersion() {
+		return Version.V1_0;
+	}
+
 	@Override
 	public boolean allowUserProfileDistribution() {
 		return true;
diff --git a/domain/src/main/java/ch/threema/domain/protocol/csp/messages/ballot/BallotVoteMessage.java b/domain/src/main/java/ch/threema/domain/protocol/csp/messages/ballot/BallotVoteMessage.java
index 78ca1820..c6100b0c 100644
--- a/domain/src/main/java/ch/threema/domain/protocol/csp/messages/ballot/BallotVoteMessage.java
+++ b/domain/src/main/java/ch/threema/domain/protocol/csp/messages/ballot/BallotVoteMessage.java
@@ -30,10 +30,12 @@ import java.nio.charset.StandardCharsets;
 import java.util.ArrayList;
 import java.util.List;
 
+import androidx.annotation.Nullable;
 import ch.threema.base.utils.LoggingUtil;
 import ch.threema.domain.protocol.csp.messages.AbstractMessage;
 import ch.threema.domain.protocol.csp.messages.BadMessageException;
 import ch.threema.domain.protocol.csp.ProtocolDefines;
+import ch.threema.protobuf.csp.e2e.fs.Version;
 
 /**
  * A ballot vote message.
@@ -48,6 +50,12 @@ public class BallotVoteMessage extends AbstractMessage
 
 	private final List<BallotVote> ballotVotes = new ArrayList<>();
 
+	@Nullable
+	@Override
+	public Version getMinimumRequiredForwardSecurityVersion() {
+		return Version.V1_0;
+	}
+
 	@Override
 	public boolean allowUserProfileDistribution() {
 		return true;
diff --git a/domain/src/main/java/ch/threema/domain/protocol/csp/messages/ballot/GroupBallotCreateMessage.java b/domain/src/main/java/ch/threema/domain/protocol/csp/messages/ballot/GroupBallotCreateMessage.java
index d44faa02..f71ac517 100644
--- a/domain/src/main/java/ch/threema/domain/protocol/csp/messages/ballot/GroupBallotCreateMessage.java
+++ b/domain/src/main/java/ch/threema/domain/protocol/csp/messages/ballot/GroupBallotCreateMessage.java
@@ -26,9 +26,11 @@ import org.slf4j.Logger;
 import java.io.ByteArrayOutputStream;
 import java.nio.charset.StandardCharsets;
 
+import androidx.annotation.Nullable;
 import ch.threema.base.utils.LoggingUtil;
 import ch.threema.domain.protocol.csp.ProtocolDefines;
 import ch.threema.domain.protocol.csp.messages.AbstractGroupMessage;
+import ch.threema.protobuf.csp.e2e.fs.Version;
 
 /**
  * A group ballot creation message.
@@ -41,6 +43,8 @@ public class GroupBallotCreateMessage extends AbstractGroupMessage
 	private BallotId ballotId;
 	private String ballotCreatorId;
 	private BallotData ballotData;
+	// This is only used for debugging
+	private String rawBallotData;
 
 	public GroupBallotCreateMessage() {
 		super();
@@ -51,6 +55,12 @@ public class GroupBallotCreateMessage extends AbstractGroupMessage
 		return true;
 	}
 
+	@Override
+	@Nullable
+	public Version getMinimumRequiredForwardSecurityVersion() {
+		return null;
+	}
+
 	@Override
 	public boolean allowUserProfileDistribution() {
 		return true;
@@ -108,4 +118,14 @@ public class GroupBallotCreateMessage extends AbstractGroupMessage
 		return ProtocolDefines.MSGTYPE_GROUP_BALLOT_CREATE;
 	}
 
+	// This is only used for debugging
+	public void setRawBallotData(String rawBallotData) {
+		this.rawBallotData = rawBallotData;
+	}
+
+	// This is only used for debugging
+	public String getRawBallotData() {
+		return this.rawBallotData;
+	}
+
 }
diff --git a/domain/src/main/java/ch/threema/domain/protocol/csp/messages/ballot/GroupBallotVoteMessage.java b/domain/src/main/java/ch/threema/domain/protocol/csp/messages/ballot/GroupBallotVoteMessage.java
index ff94872b..c00aa9d5 100644
--- a/domain/src/main/java/ch/threema/domain/protocol/csp/messages/ballot/GroupBallotVoteMessage.java
+++ b/domain/src/main/java/ch/threema/domain/protocol/csp/messages/ballot/GroupBallotVoteMessage.java
@@ -30,10 +30,12 @@ import java.nio.charset.StandardCharsets;
 import java.util.ArrayList;
 import java.util.List;
 
+import androidx.annotation.Nullable;
 import ch.threema.base.utils.LoggingUtil;
 import ch.threema.domain.protocol.csp.ProtocolDefines;
 import ch.threema.domain.protocol.csp.messages.AbstractGroupMessage;
 import ch.threema.domain.protocol.csp.messages.BadMessageException;
+import ch.threema.protobuf.csp.e2e.fs.Version;
 
 /**
  * A group ballot vote message.
@@ -48,6 +50,12 @@ public class GroupBallotVoteMessage extends AbstractGroupMessage
 
 	private final List<BallotVote> ballotVotes = new ArrayList<>();
 
+	@Override
+	@Nullable
+	public Version getMinimumRequiredForwardSecurityVersion() {
+		return null;
+	}
+
 	@Override
 	public boolean allowUserProfileDistribution() {
 		return true;
diff --git a/domain/src/main/java/ch/threema/domain/protocol/csp/messages/file/FileMessage.java b/domain/src/main/java/ch/threema/domain/protocol/csp/messages/file/FileMessage.java
index 5cf99aff..5ed9fec7 100644
--- a/domain/src/main/java/ch/threema/domain/protocol/csp/messages/file/FileMessage.java
+++ b/domain/src/main/java/ch/threema/domain/protocol/csp/messages/file/FileMessage.java
@@ -21,9 +21,12 @@
 
 package ch.threema.domain.protocol.csp.messages.file;
 
+import androidx.annotation.Nullable;
 import ch.threema.base.utils.LoggingUtil;
 import ch.threema.domain.protocol.csp.messages.AbstractMessage;
 import ch.threema.domain.protocol.csp.ProtocolDefines;
+import ch.threema.protobuf.csp.e2e.fs.Version;
+
 import org.slf4j.Logger;
 
 import java.io.ByteArrayOutputStream;
@@ -44,6 +47,12 @@ public class FileMessage extends AbstractMessage
 		return true;
 	}
 
+	@Nullable
+	@Override
+	public Version getMinimumRequiredForwardSecurityVersion() {
+		return Version.V1_0;
+	}
+
 	@Override
 	public boolean allowUserProfileDistribution() {
 		return true;
diff --git a/domain/src/main/java/ch/threema/domain/protocol/csp/messages/file/GroupFileMessage.java b/domain/src/main/java/ch/threema/domain/protocol/csp/messages/file/GroupFileMessage.java
index a7567825..16b2425a 100644
--- a/domain/src/main/java/ch/threema/domain/protocol/csp/messages/file/GroupFileMessage.java
+++ b/domain/src/main/java/ch/threema/domain/protocol/csp/messages/file/GroupFileMessage.java
@@ -26,9 +26,11 @@ import org.slf4j.Logger;
 import java.io.ByteArrayOutputStream;
 import java.nio.charset.StandardCharsets;
 
+import androidx.annotation.Nullable;
 import ch.threema.base.utils.LoggingUtil;
 import ch.threema.domain.protocol.csp.ProtocolDefines;
 import ch.threema.domain.protocol.csp.messages.AbstractGroupMessage;
+import ch.threema.protobuf.csp.e2e.fs.Version;
 
 public class GroupFileMessage extends AbstractGroupMessage
 	implements FileMessageInterface {
@@ -46,6 +48,12 @@ public class GroupFileMessage extends AbstractGroupMessage
 		return true;
 	}
 
+	@Override
+	@Nullable
+	public Version getMinimumRequiredForwardSecurityVersion() {
+		return null;
+	}
+
 	@Override
 	public boolean allowUserProfileDistribution() {
 		return true;
diff --git a/domain/src/main/java/ch/threema/domain/protocol/csp/messages/fs/ForwardSecurityData.java b/domain/src/main/java/ch/threema/domain/protocol/csp/messages/fs/ForwardSecurityData.java
index 648c7e14..d2804864 100644
--- a/domain/src/main/java/ch/threema/domain/protocol/csp/messages/fs/ForwardSecurityData.java
+++ b/domain/src/main/java/ch/threema/domain/protocol/csp/messages/fs/ForwardSecurityData.java
@@ -29,9 +29,13 @@ import ch.threema.domain.fs.DHSessionId;
 import ch.threema.domain.models.MessageId;
 import ch.threema.domain.protocol.csp.messages.BadMessageException;
 import ch.threema.domain.protocol.csp.messages.protobuf.ProtobufDataInterface;
-import ch.threema.protobuf.csp.e2e.fs.ForwardSecurityEnvelope;
+import ch.threema.protobuf.csp.e2e.fs.Accept;
+import ch.threema.protobuf.csp.e2e.fs.Encapsulated;
+import ch.threema.protobuf.csp.e2e.fs.Envelope;
+import ch.threema.protobuf.csp.e2e.fs.Init;
+import ch.threema.protobuf.csp.e2e.fs.Reject;
 
-public abstract class ForwardSecurityData implements ProtobufDataInterface<ForwardSecurityEnvelope> {
+public abstract class ForwardSecurityData implements ProtobufDataInterface<Envelope> {
 
 	private final @NonNull DHSessionId sessionId;
 
@@ -47,33 +51,47 @@ public abstract class ForwardSecurityData implements ProtobufDataInterface<Forwa
 	@NonNull
 	public static ForwardSecurityData fromProtobuf(@NonNull byte[] rawProtobufMessage) throws BadMessageException {
 		try {
-			ForwardSecurityEnvelope protobufMessage = ForwardSecurityEnvelope.parseFrom(rawProtobufMessage);
+			Envelope protobufMessage = Envelope.parseFrom(rawProtobufMessage);
 
 			DHSessionId sessionId = new DHSessionId(protobufMessage.getSessionId().toByteArray());
 
 			switch (protobufMessage.getContentCase()) {
-				case INIT:
-					return new ForwardSecurityDataInit(sessionId, protobufMessage.getInit().getEphemeralPublicKey().toByteArray());
-				case ACCEPT:
-					return new ForwardSecurityDataAccept(sessionId, protobufMessage.getAccept().getEphemeralPublicKey().toByteArray());
-				case REJECT:
-					return new ForwardSecurityDataReject(sessionId, new MessageId(protobufMessage.getReject().getRejectedMessageId()), protobufMessage.getReject().getCause());
+				case INIT: {
+					final Init init = protobufMessage.getInit();
+					return new ForwardSecurityDataInit(sessionId, init.getSupportedVersion(), init.getFssk().toByteArray());
+				}
+				case ACCEPT: {
+					final Accept accept = protobufMessage.getAccept();
+					return new ForwardSecurityDataAccept(sessionId, accept.getSupportedVersion(), accept.getFssk().toByteArray());
+				}
+				case REJECT: {
+					final Reject reject = protobufMessage.getReject();
+					return new ForwardSecurityDataReject(
+						sessionId,
+						new MessageId(reject.getRejectedEncapsulatedMessageId()),
+						reject.getCause()
+					);
+				}
 				case TERMINATE:
-					return new ForwardSecurityDataTerminate(sessionId);
-				case MESSAGE:
+					return new ForwardSecurityDataTerminate(sessionId, protobufMessage.getTerminate().getCause());
+				case ENCAPSULATED: {
+					final Encapsulated encapsulated = protobufMessage.getEncapsulated();
 					return new ForwardSecurityDataMessage(sessionId,
-						protobufMessage.getMessage().getDhType(),
-						protobufMessage.getMessage().getCounter(),
-						protobufMessage.getMessage().getMessage().toByteArray());
+						encapsulated.getDhType(),
+						encapsulated.getCounter(),
+						encapsulated.getOfferedVersion(),
+						encapsulated.getAppliedVersion(),
+						encapsulated.getEncryptedInner().toByteArray());
+				}
 				default:
 					throw new BadMessageException("Unknown forward security message type");
 			}
 		} catch (InvalidProtocolBufferException e) {
-			throw new BadMessageException("Invalid forward security message protobuf data", true);
+			throw new BadMessageException("Invalid forward security message protobuf data");
 		} catch (DHSessionId.InvalidDHSessionIdException e) {
-			throw new BadMessageException("Bad forward security session ID length", true);
+			throw new BadMessageException("Bad forward security session ID length");
 		} catch (InvalidEphemeralPublicKeyException e) {
-			throw new BadMessageException("Bad ephemeral public key length", true);
+			throw new BadMessageException("Bad ephemeral public key length");
 		}
 	}
 
diff --git a/domain/src/main/java/ch/threema/domain/protocol/csp/messages/fs/ForwardSecurityDataAccept.java b/domain/src/main/java/ch/threema/domain/protocol/csp/messages/fs/ForwardSecurityDataAccept.java
index 6541c374..c5a3ea41 100644
--- a/domain/src/main/java/ch/threema/domain/protocol/csp/messages/fs/ForwardSecurityDataAccept.java
+++ b/domain/src/main/java/ch/threema/domain/protocol/csp/messages/fs/ForwardSecurityDataAccept.java
@@ -24,24 +24,34 @@ package ch.threema.domain.protocol.csp.messages.fs;
 import com.google.protobuf.ByteString;
 import com.neilalexander.jnacl.NaCl;
 
-import java.util.Arrays;
-
 import androidx.annotation.NonNull;
 import ch.threema.domain.fs.DHSessionId;
-import ch.threema.protobuf.csp.e2e.fs.ForwardSecurityEnvelope;
+import ch.threema.protobuf.csp.e2e.fs.Accept;
+import ch.threema.protobuf.csp.e2e.fs.Envelope;
+import ch.threema.protobuf.csp.e2e.fs.VersionRange;
 
 public class ForwardSecurityDataAccept extends ForwardSecurityData {
-
+	private final @NonNull VersionRange versionRange;
 	private final @NonNull byte[] ephemeralPublicKey;
 
-	public ForwardSecurityDataAccept(@NonNull DHSessionId sessionId, @NonNull byte[] ephemeralPublicKey) throws InvalidEphemeralPublicKeyException {
+	public ForwardSecurityDataAccept(
+		@NonNull DHSessionId sessionId,
+		@NonNull VersionRange versionRange,
+		@NonNull byte[] ephemeralPublicKey
+	) throws InvalidEphemeralPublicKeyException {
 		super(sessionId);
+		this.versionRange = versionRange;
 		if (ephemeralPublicKey.length != NaCl.PUBLICKEYBYTES) {
 			throw new InvalidEphemeralPublicKeyException("Bad ephemeral public key length");
 		}
 		this.ephemeralPublicKey = ephemeralPublicKey;
 	}
 
+	@NonNull
+	public VersionRange getVersionRange() {
+		return versionRange;
+	}
+
 	@NonNull
 	public byte[] getEphemeralPublicKey() {
 		return ephemeralPublicKey;
@@ -49,28 +59,13 @@ public class ForwardSecurityDataAccept extends ForwardSecurityData {
 
 	@NonNull
 	@Override
-	public ForwardSecurityEnvelope toProtobufMessage() {
-		return ForwardSecurityEnvelope.newBuilder()
+	public Envelope toProtobufMessage() {
+		return Envelope.newBuilder()
 			.setSessionId(ByteString.copyFrom(this.getSessionId().get()))
-			.setAccept(ForwardSecurityEnvelope.Accept.newBuilder()
-				.setEphemeralPublicKey(ByteString.copyFrom(this.ephemeralPublicKey))
+			.setAccept(Accept.newBuilder()
+				.setSupportedVersion(this.versionRange)
+				.setFssk(ByteString.copyFrom(this.ephemeralPublicKey))
 				.build())
 			.build();
 	}
-
-	@Override
-	public boolean equals(Object o) {
-		if (this == o) return true;
-		if (o == null || getClass() != o.getClass()) return false;
-		if (!super.equals(o)) return false;
-		ForwardSecurityDataAccept that = (ForwardSecurityDataAccept) o;
-		return Arrays.equals(getEphemeralPublicKey(), that.getEphemeralPublicKey());
-	}
-
-	@Override
-	public int hashCode() {
-		int result = super.hashCode();
-		result = 31 * result + Arrays.hashCode(getEphemeralPublicKey());
-		return result;
-	}
 }
diff --git a/domain/src/main/java/ch/threema/domain/protocol/csp/messages/fs/ForwardSecurityDataInit.java b/domain/src/main/java/ch/threema/domain/protocol/csp/messages/fs/ForwardSecurityDataInit.java
index f9ffc841..135f93dc 100644
--- a/domain/src/main/java/ch/threema/domain/protocol/csp/messages/fs/ForwardSecurityDataInit.java
+++ b/domain/src/main/java/ch/threema/domain/protocol/csp/messages/fs/ForwardSecurityDataInit.java
@@ -24,24 +24,34 @@ package ch.threema.domain.protocol.csp.messages.fs;
 import com.google.protobuf.ByteString;
 import com.neilalexander.jnacl.NaCl;
 
-import java.util.Arrays;
-
 import androidx.annotation.NonNull;
 import ch.threema.domain.fs.DHSessionId;
-import ch.threema.protobuf.csp.e2e.fs.ForwardSecurityEnvelope;
+import ch.threema.protobuf.csp.e2e.fs.Envelope;
+import ch.threema.protobuf.csp.e2e.fs.Init;
+import ch.threema.protobuf.csp.e2e.fs.VersionRange;
 
 public class ForwardSecurityDataInit extends ForwardSecurityData {
-
+	private final @NonNull VersionRange versionRange;
 	private final @NonNull byte[] ephemeralPublicKey;
 
-	public ForwardSecurityDataInit(@NonNull DHSessionId sessionId, @NonNull byte[] ephemeralPublicKey) throws InvalidEphemeralPublicKeyException {
+	public ForwardSecurityDataInit(
+		@NonNull DHSessionId sessionId,
+		@NonNull VersionRange versionRange,
+		@NonNull byte[] ephemeralPublicKey
+	) throws InvalidEphemeralPublicKeyException {
 		super(sessionId);
+		this.versionRange = versionRange;
 		if (ephemeralPublicKey.length != NaCl.PUBLICKEYBYTES) {
 			throw new InvalidEphemeralPublicKeyException("Bad ephemeral public key length");
 		}
 		this.ephemeralPublicKey = ephemeralPublicKey;
 	}
 
+	@NonNull
+	public VersionRange getVersionRange() {
+		return versionRange;
+	}
+
 	@NonNull
 	public byte[] getEphemeralPublicKey() {
 		return ephemeralPublicKey;
@@ -49,25 +59,13 @@ public class ForwardSecurityDataInit extends ForwardSecurityData {
 
 	@NonNull
 	@Override
-	public ForwardSecurityEnvelope toProtobufMessage() {
-		return ForwardSecurityEnvelope.newBuilder()
+	public Envelope toProtobufMessage() {
+		return Envelope.newBuilder()
 			.setSessionId(ByteString.copyFrom(this.getSessionId().get()))
-			.setInit(ForwardSecurityEnvelope.Init.newBuilder()
-				.setEphemeralPublicKey(ByteString.copyFrom(this.ephemeralPublicKey))
+			.setInit(Init.newBuilder()
+				.setSupportedVersion(this.versionRange)
+				.setFssk(ByteString.copyFrom(this.ephemeralPublicKey))
 				.build())
 			.build();
 	}
-
-	@Override
-	public boolean equals(Object o) {
-		if (this == o) return true;
-		if (o == null || getClass() != o.getClass()) return false;
-		ForwardSecurityDataInit that = (ForwardSecurityDataInit) o;
-		return Arrays.equals(getEphemeralPublicKey(), that.getEphemeralPublicKey());
-	}
-
-	@Override
-	public int hashCode() {
-		return Arrays.hashCode(getEphemeralPublicKey());
-	}
 }
diff --git a/domain/src/main/java/ch/threema/domain/protocol/csp/messages/fs/ForwardSecurityDataMessage.java b/domain/src/main/java/ch/threema/domain/protocol/csp/messages/fs/ForwardSecurityDataMessage.java
index 6088b055..04b2c6b5 100644
--- a/domain/src/main/java/ch/threema/domain/protocol/csp/messages/fs/ForwardSecurityDataMessage.java
+++ b/domain/src/main/java/ch/threema/domain/protocol/csp/messages/fs/ForwardSecurityDataMessage.java
@@ -23,29 +23,37 @@ package ch.threema.domain.protocol.csp.messages.fs;
 
 import com.google.protobuf.ByteString;
 
-import java.util.Arrays;
-import java.util.Objects;
-
 import androidx.annotation.NonNull;
 import ch.threema.domain.fs.DHSessionId;
-import ch.threema.protobuf.csp.e2e.fs.ForwardSecurityEnvelope;
+import ch.threema.protobuf.csp.e2e.fs.Encapsulated;
+import ch.threema.protobuf.csp.e2e.fs.Envelope;
 
 public class ForwardSecurityDataMessage extends ForwardSecurityData {
-
 	private final @NonNull
-	ForwardSecurityEnvelope.Message.DHType type;
+	Encapsulated.DHType type;
 	private final long counter;
+	private final int offeredVersion;
+	private final int appliedVersion;
 	private final @NonNull byte[] message;
 
-	public ForwardSecurityDataMessage(@NonNull DHSessionId sessionId, @NonNull ForwardSecurityEnvelope.Message.DHType type, long counter, @NonNull byte[] message) {
+	public ForwardSecurityDataMessage(
+		@NonNull DHSessionId sessionId,
+		@NonNull Encapsulated.DHType type,
+		long counter,
+		int offeredVersion,
+		int appliedVersion,
+		@NonNull byte[] message
+	) {
 		super(sessionId);
 		this.type = type;
 		this.counter = counter;
+		this.offeredVersion = offeredVersion;
+		this.appliedVersion = appliedVersion;
 		this.message = message;
 	}
 
 	@NonNull
-	public ForwardSecurityEnvelope.Message.DHType getType() {
+	public Encapsulated.DHType getType() {
 		return type;
 	}
 
@@ -53,6 +61,14 @@ public class ForwardSecurityDataMessage extends ForwardSecurityData {
 		return counter;
 	}
 
+	public int getOfferedVersion() {
+		return offeredVersion;
+	}
+
+	public int getAppliedVersion() {
+		return appliedVersion;
+	}
+
 	@NonNull
 	public byte[] getMessage() {
 		return message;
@@ -60,29 +76,16 @@ public class ForwardSecurityDataMessage extends ForwardSecurityData {
 
 	@NonNull
 	@Override
-	public ForwardSecurityEnvelope toProtobufMessage() {
-		return ForwardSecurityEnvelope.newBuilder()
+	public Envelope toProtobufMessage() {
+		return Envelope.newBuilder()
 			.setSessionId(ByteString.copyFrom(this.getSessionId().get()))
-			.setMessage(ForwardSecurityEnvelope.Message.newBuilder()
+			.setEncapsulated(Encapsulated.newBuilder()
 				.setDhType(type)
 				.setCounter(this.counter)
-				.setMessage(ByteString.copyFrom(this.message))
+				.setOfferedVersion(this.offeredVersion)
+				.setAppliedVersion(this.appliedVersion)
+				.setEncryptedInner(ByteString.copyFrom(this.message))
 				.build())
 			.build();
 	}
-
-	@Override
-	public boolean equals(Object o) {
-		if (this == o) return true;
-		if (o == null || getClass() != o.getClass()) return false;
-		ForwardSecurityDataMessage that = (ForwardSecurityDataMessage) o;
-		return getCounter() == that.getCounter() && getType() == that.getType() && Arrays.equals(getMessage(), that.getMessage());
-	}
-
-	@Override
-	public int hashCode() {
-		int result = Objects.hash(getType(), getCounter());
-		result = 31 * result + Arrays.hashCode(getMessage());
-		return result;
-	}
 }
diff --git a/domain/src/main/java/ch/threema/domain/protocol/csp/messages/fs/ForwardSecurityDataReject.java b/domain/src/main/java/ch/threema/domain/protocol/csp/messages/fs/ForwardSecurityDataReject.java
index 2434efcd..8df339a0 100644
--- a/domain/src/main/java/ch/threema/domain/protocol/csp/messages/fs/ForwardSecurityDataReject.java
+++ b/domain/src/main/java/ch/threema/domain/protocol/csp/messages/fs/ForwardSecurityDataReject.java
@@ -21,22 +21,23 @@
 
 package ch.threema.domain.protocol.csp.messages.fs;
 
-import androidx.annotation.NonNull;
-
 import com.google.protobuf.ByteString;
 
-import java.util.Objects;
-
+import androidx.annotation.NonNull;
 import ch.threema.domain.fs.DHSessionId;
 import ch.threema.domain.models.MessageId;
-import ch.threema.protobuf.csp.e2e.fs.ForwardSecurityEnvelope;
+import ch.threema.protobuf.csp.e2e.fs.Envelope;
+import ch.threema.protobuf.csp.e2e.fs.Reject;
 
 public class ForwardSecurityDataReject extends ForwardSecurityData {
-
 	private final @NonNull MessageId rejectedMessageId;
-	private final @NonNull ForwardSecurityEnvelope.Reject.Cause cause;
+	private final @NonNull Reject.Cause cause;
 
-	public ForwardSecurityDataReject(@NonNull DHSessionId sessionId, @NonNull MessageId rejectedMessageId, @NonNull ForwardSecurityEnvelope.Reject.Cause cause) {
+	public ForwardSecurityDataReject(
+		@NonNull DHSessionId sessionId,
+		@NonNull MessageId rejectedMessageId,
+		@NonNull Reject.Cause cause
+	) {
 		super(sessionId);
 		this.rejectedMessageId = rejectedMessageId;
 		this.cause = cause;
@@ -48,32 +49,19 @@ public class ForwardSecurityDataReject extends ForwardSecurityData {
 	}
 
 	@NonNull
-	public ForwardSecurityEnvelope.Reject.Cause getCause() {
+	public Reject.Cause getCause() {
 		return cause;
 	}
 
 	@NonNull
 	@Override
-	public ForwardSecurityEnvelope toProtobufMessage() {
-		return ForwardSecurityEnvelope.newBuilder()
+	public Envelope toProtobufMessage() {
+		return Envelope.newBuilder()
 			.setSessionId(ByteString.copyFrom(this.getSessionId().get()))
-			.setReject(ForwardSecurityEnvelope.Reject.newBuilder()
-				.setRejectedMessageId(this.rejectedMessageId.getMessageIdLong())
+			.setReject(Reject.newBuilder()
+				.setRejectedEncapsulatedMessageId(this.rejectedMessageId.getMessageIdLong())
 				.setCause(this.cause)
 				.build())
 			.build();
 	}
-
-	@Override
-	public boolean equals(Object o) {
-		if (this == o) return true;
-		if (o == null || getClass() != o.getClass()) return false;
-		ForwardSecurityDataReject that = (ForwardSecurityDataReject) o;
-		return rejectedMessageId.equals(that.rejectedMessageId) && getCause() == that.getCause();
-	}
-
-	@Override
-	public int hashCode() {
-		return Objects.hash(rejectedMessageId, getCause());
-	}
 }
diff --git a/domain/src/main/java/ch/threema/domain/protocol/csp/messages/fs/ForwardSecurityDataTerminate.java b/domain/src/main/java/ch/threema/domain/protocol/csp/messages/fs/ForwardSecurityDataTerminate.java
index fc124564..0d6b2b9e 100644
--- a/domain/src/main/java/ch/threema/domain/protocol/csp/messages/fs/ForwardSecurityDataTerminate.java
+++ b/domain/src/main/java/ch/threema/domain/protocol/csp/messages/fs/ForwardSecurityDataTerminate.java
@@ -25,33 +25,33 @@ import com.google.protobuf.ByteString;
 
 import androidx.annotation.NonNull;
 import ch.threema.domain.fs.DHSessionId;
-import ch.threema.protobuf.csp.e2e.fs.ForwardSecurityEnvelope;
+import ch.threema.protobuf.csp.e2e.fs.Envelope;
+import ch.threema.protobuf.csp.e2e.fs.Terminate;
 
 public class ForwardSecurityDataTerminate extends ForwardSecurityData {
+	private final @NonNull Terminate.Cause cause;
 
-	public ForwardSecurityDataTerminate(@NonNull DHSessionId sessionId) {
+	public ForwardSecurityDataTerminate(
+		@NonNull DHSessionId sessionId,
+		@NonNull Terminate.Cause cause
+	) {
 		super(sessionId);
+		this.cause = cause;
+	}
+
+	@NonNull
+	public Terminate.Cause getCause() {
+		return cause;
 	}
 
 	@NonNull
 	@Override
-	public ForwardSecurityEnvelope toProtobufMessage() {
-		return ForwardSecurityEnvelope.newBuilder()
+	public Envelope toProtobufMessage() {
+		return Envelope.newBuilder()
 			.setSessionId(ByteString.copyFrom(this.getSessionId().get()))
-			.setTerminate(ForwardSecurityEnvelope.Terminate.newBuilder()
+			.setTerminate(Terminate.newBuilder()
+				.setCause(this.cause)
 				.build())
 			.build();
 	}
-
-	@Override
-	public boolean equals(Object o) {
-		if (this == o) return true;
-		if (o == null || getClass() != o.getClass()) return false;
-		return super.equals(o);
-	}
-
-	@Override
-	public int hashCode() {
-		return super.hashCode();
-	}
 }
diff --git a/domain/src/main/java/ch/threema/domain/protocol/csp/messages/fs/ForwardSecurityEnvelopeMessage.java b/domain/src/main/java/ch/threema/domain/protocol/csp/messages/fs/ForwardSecurityEnvelopeMessage.java
index e97586e8..3c36fdbb 100644
--- a/domain/src/main/java/ch/threema/domain/protocol/csp/messages/fs/ForwardSecurityEnvelopeMessage.java
+++ b/domain/src/main/java/ch/threema/domain/protocol/csp/messages/fs/ForwardSecurityEnvelopeMessage.java
@@ -21,8 +21,10 @@
 
 package ch.threema.domain.protocol.csp.messages.fs;
 
+import androidx.annotation.Nullable;
 import ch.threema.domain.protocol.csp.ProtocolDefines;
 import ch.threema.domain.protocol.csp.messages.protobuf.AbstractProtobufMessage;
+import ch.threema.protobuf.csp.e2e.fs.Version;
 
 public class ForwardSecurityEnvelopeMessage extends AbstractProtobufMessage<ForwardSecurityData> {
 
@@ -32,6 +34,13 @@ public class ForwardSecurityEnvelopeMessage extends AbstractProtobufMessage<Forw
 		super(ProtocolDefines.MSGTYPE_FS_ENVELOPE, payloadData);
 	}
 
+	@Nullable
+	@Override
+	public Version getMinimumRequiredForwardSecurityVersion() {
+		// Do not allow encapsulating forward security envelope messages
+		return null;
+	}
+
 	@Override
 	public boolean allowUserProfileDistribution() {
 		return allowSendingProfile;
@@ -40,4 +49,34 @@ public class ForwardSecurityEnvelopeMessage extends AbstractProtobufMessage<Forw
 	public void setAllowSendingProfile(boolean allowSendingProfile) {
 		this.allowSendingProfile = allowSendingProfile;
 	}
+
+	@Override
+	public boolean flagSendPush() {
+		return (getMessageFlags() & ProtocolDefines.MESSAGE_FLAG_SEND_PUSH) != 0;
+	}
+
+	@Override
+	public boolean flagNoServerQueuing() {
+		return (getMessageFlags() & ProtocolDefines.MESSAGE_FLAG_NO_SERVER_QUEUING) != 0;
+	}
+
+	@Override
+	public boolean flagNoServerAck() {
+		return (getMessageFlags() & ProtocolDefines.MESSAGE_FLAG_NO_SERVER_ACK) != 0;
+	}
+
+	@Override
+	public boolean flagGroupMessage() {
+		return (getMessageFlags() & ProtocolDefines.MESSAGE_FLAG_GROUP) != 0;
+	}
+
+	@Override
+	public boolean flagShortLivedServerQueuing() {
+		return (getMessageFlags() & ProtocolDefines.MESSAGE_FLAG_SHORT_LIVED) != 0;
+	}
+
+	@Override
+	public boolean flagNoDeliveryReceipts() {
+		return (getMessageFlags() & ProtocolDefines.MESSAGE_FLAG_NO_DELIVERY_RECEIPTS) != 0;
+	}
 }
diff --git a/domain/src/main/java/ch/threema/domain/protocol/csp/messages/group/GroupInviteData.java b/domain/src/main/java/ch/threema/domain/protocol/csp/messages/group/GroupInviteData.java
index 862982e1..93c0fc11 100644
--- a/domain/src/main/java/ch/threema/domain/protocol/csp/messages/group/GroupInviteData.java
+++ b/domain/src/main/java/ch/threema/domain/protocol/csp/messages/group/GroupInviteData.java
@@ -86,9 +86,9 @@ public class GroupInviteData implements ProtobufDataInterface<GroupInvite> {
 				protobufMessage.getConfirmationMode()
 			);
 		} catch (InvalidProtocolBufferException e) {
-			throw new BadMessageException("Invalid Group Join Request Protobuf Data", true);
+			throw new BadMessageException("Invalid Group Join Request Protobuf Data");
 		} catch (GroupInviteToken.InvalidGroupInviteTokenException e) {
-			throw new BadMessageException("Invalid Group Invite Token Length", true);
+			throw new BadMessageException("Invalid Group Invite Token Length");
 		}
 	}
 
diff --git a/domain/src/main/java/ch/threema/domain/protocol/csp/messages/group/GroupJoinRequestData.java b/domain/src/main/java/ch/threema/domain/protocol/csp/messages/group/GroupJoinRequestData.java
index fafb3b33..e4b7c050 100644
--- a/domain/src/main/java/ch/threema/domain/protocol/csp/messages/group/GroupJoinRequestData.java
+++ b/domain/src/main/java/ch/threema/domain/protocol/csp/messages/group/GroupJoinRequestData.java
@@ -75,9 +75,9 @@ public class GroupJoinRequestData implements ProtobufDataInterface<GroupJoinRequ
 				protobufMessage.getMessage()
 			);
 		} catch (InvalidProtocolBufferException e) {
-			throw new BadMessageException("Invalid Group Join Request Protobuf Data", true);
+			throw new BadMessageException("Invalid Group Join Request Protobuf Data");
 		} catch (GroupInviteToken.InvalidGroupInviteTokenException e) {
-			throw new BadMessageException("Invalid Group Invite Token Length", true);
+			throw new BadMessageException("Invalid Group Invite Token Length");
 		}
 	}
 
diff --git a/domain/src/main/java/ch/threema/domain/protocol/csp/messages/group/GroupJoinRequestMessage.java b/domain/src/main/java/ch/threema/domain/protocol/csp/messages/group/GroupJoinRequestMessage.java
index 740514b7..5b2dad7f 100644
--- a/domain/src/main/java/ch/threema/domain/protocol/csp/messages/group/GroupJoinRequestMessage.java
+++ b/domain/src/main/java/ch/threema/domain/protocol/csp/messages/group/GroupJoinRequestMessage.java
@@ -21,8 +21,10 @@
 
 package ch.threema.domain.protocol.csp.messages.group;
 
+import androidx.annotation.Nullable;
 import ch.threema.domain.protocol.csp.ProtocolDefines;
 import ch.threema.domain.protocol.csp.messages.protobuf.AbstractProtobufMessage;
+import ch.threema.protobuf.csp.e2e.fs.Version;
 
 public class GroupJoinRequestMessage extends AbstractProtobufMessage<GroupJoinRequestData> {
 
@@ -30,5 +32,9 @@ public class GroupJoinRequestMessage extends AbstractProtobufMessage<GroupJoinRe
 		super(ProtocolDefines.MSGTYPE_GROUP_JOIN_REQUEST, payloadData);
 	}
 
-
+	@Override
+	@Nullable
+	public Version getMinimumRequiredForwardSecurityVersion() {
+		return null;
+	}
 }
diff --git a/domain/src/main/java/ch/threema/domain/protocol/csp/messages/group/GroupJoinResponseData.java b/domain/src/main/java/ch/threema/domain/protocol/csp/messages/group/GroupJoinResponseData.java
index 5215d8b2..4d88460f 100644
--- a/domain/src/main/java/ch/threema/domain/protocol/csp/messages/group/GroupJoinResponseData.java
+++ b/domain/src/main/java/ch/threema/domain/protocol/csp/messages/group/GroupJoinResponseData.java
@@ -170,9 +170,9 @@ public class GroupJoinResponseData implements ProtobufDataInterface<GroupJoinRes
 			final GroupInviteToken token = new GroupInviteToken(protobufMessage.getToken().toByteArray());
 			return new GroupJoinResponseData(token, response);
 		} catch (InvalidProtocolBufferException e) {
-			throw new BadMessageException("Invalid Group Join Response Protobuf Data", true);
+			throw new BadMessageException("Invalid Group Join Response Protobuf Data");
 		} catch (GroupInviteToken.InvalidGroupInviteTokenException e) {
-			throw new BadMessageException("Invalid Group Join Token Length", true);
+			throw new BadMessageException("Invalid Group Join Token Length");
 		}
 	}
 
diff --git a/domain/src/main/java/ch/threema/domain/protocol/csp/messages/group/GroupJoinResponseMessage.java b/domain/src/main/java/ch/threema/domain/protocol/csp/messages/group/GroupJoinResponseMessage.java
index add48fbe..7bca4ff5 100644
--- a/domain/src/main/java/ch/threema/domain/protocol/csp/messages/group/GroupJoinResponseMessage.java
+++ b/domain/src/main/java/ch/threema/domain/protocol/csp/messages/group/GroupJoinResponseMessage.java
@@ -22,11 +22,19 @@
 package ch.threema.domain.protocol.csp.messages.group;
 
 import androidx.annotation.NonNull;
+import androidx.annotation.Nullable;
 import ch.threema.domain.protocol.csp.ProtocolDefines;
 import ch.threema.domain.protocol.csp.messages.protobuf.AbstractProtobufMessage;
+import ch.threema.protobuf.csp.e2e.fs.Version;
 
 public class GroupJoinResponseMessage extends AbstractProtobufMessage<GroupJoinResponseData> {
 	public GroupJoinResponseMessage(@NonNull GroupJoinResponseData payloadData) {
 		super(ProtocolDefines.MSGTYPE_GROUP_JOIN_RESPONSE, payloadData);
 	}
+
+	@Override
+	@Nullable
+	public Version getMinimumRequiredForwardSecurityVersion() {
+		return null;
+	}
 }
diff --git a/domain/src/main/java/ch/threema/domain/protocol/csp/messages/groupcall/GroupCallStartMessage.kt b/domain/src/main/java/ch/threema/domain/protocol/csp/messages/groupcall/GroupCallStartMessage.kt
index b1eb81a2..f939aad2 100644
--- a/domain/src/main/java/ch/threema/domain/protocol/csp/messages/groupcall/GroupCallStartMessage.kt
+++ b/domain/src/main/java/ch/threema/domain/protocol/csp/messages/groupcall/GroupCallStartMessage.kt
@@ -23,6 +23,7 @@ package ch.threema.domain.protocol.csp.messages.groupcall
 
 import ch.threema.domain.protocol.csp.ProtocolDefines
 import ch.threema.domain.protocol.csp.messages.protobuf.AbstractProtobufGroupMessage
+import ch.threema.protobuf.csp.e2e.fs.Version
 
 class GroupCallStartMessage(payloadData: GroupCallStartData) : AbstractProtobufGroupMessage<GroupCallStartData>(
         ProtocolDefines.MSGTYPE_GROUP_CALL_START,
@@ -32,5 +33,7 @@ class GroupCallStartMessage(payloadData: GroupCallStartData) : AbstractProtobufG
 
     override fun flagNoDeliveryReceipts() = true
 
+    override fun getMinimumRequiredForwardSecurityVersion(): Version? = null
+
     override fun allowUserProfileDistribution() = true
 }
diff --git a/domain/src/main/java/ch/threema/domain/protocol/csp/messages/voip/VoipCallAnswerData.java b/domain/src/main/java/ch/threema/domain/protocol/csp/messages/voip/VoipCallAnswerData.java
index 64b5d0f5..32965063 100644
--- a/domain/src/main/java/ch/threema/domain/protocol/csp/messages/voip/VoipCallAnswerData.java
+++ b/domain/src/main/java/ch/threema/domain/protocol/csp/messages/voip/VoipCallAnswerData.java
@@ -111,21 +111,21 @@ public class VoipCallAnswerData extends VoipCallData<VoipCallAnswerData> {
 				answerData.sdpType = JSONUtil.getStringOrNull(o, KEY_SDP_TYPE);
 				if (answerData.sdpType == null) {
 					logger.error("Bad VoipCallAnswerData: " + KEY_SDP_TYPE + " must be defined");
-					throw new BadMessageException("TM061", true);
+					throw new BadMessageException("TM061");
 				} else if (answerData.sdpType.equals("offer")) {
 					logger.error("Bad VoipCallAnswerData: " + KEY_SDP_TYPE + " may not be \"offer\"");
-					throw new BadMessageException("TM061", true);
+					throw new BadMessageException("TM061");
 				}
 
 				answerData.sdp = JSONUtil.getStringOrNull(o, KEY_SDP);
 				if (answerData.sdp == null && !answerData.sdpType.equals("rollback")) {
 					logger.error("Bad VoipCallAnswerData: " + KEY_SDP + " may only be null if " + KEY_SDP_TYPE + "=rollback");
-					throw new BadMessageException("TM061", true);
+					throw new BadMessageException("TM061");
 				}
 
 				return answerData;
 			} catch (Exception e) {
-				throw new BadMessageException("TM061", true);
+				throw new BadMessageException("TM061");
 			}
 		}
 
@@ -239,7 +239,7 @@ public class VoipCallAnswerData extends VoipCallData<VoipCallAnswerData> {
 			o = new JSONObject(jsonObjectString);
 		} catch (JSONException e) {
 			logger.error("Bad VoipCallAnswerData: Invalid JSON string", e);
-			throw new BadMessageException("TM061", true);
+			throw new BadMessageException("TM061");
 		}
 
 		final VoipCallAnswerData callAnswerData = new VoipCallAnswerData();
@@ -251,14 +251,14 @@ public class VoipCallAnswerData extends VoipCallData<VoipCallAnswerData> {
 			}
 		} catch (Exception e) {
 			logger.error("Bad VoipCallAnswerData: Invalid Call ID", e);
-			throw new BadMessageException("TM061", true);
+			throw new BadMessageException("TM061");
 		}
 
 		try {
 			callAnswerData.action = (byte) o.getInt(KEY_ACTION);
 		} catch (Exception e) {
 			logger.error("Bad VoipCallAnswerData: Action must be a valid integer");
-			throw new BadMessageException("TM061", true);
+			throw new BadMessageException("TM061");
 		}
 
 		if (callAnswerData.action == Action.ACCEPT) {
@@ -267,14 +267,14 @@ public class VoipCallAnswerData extends VoipCallData<VoipCallAnswerData> {
 				callAnswerData.answerData = AnswerData.parse(answerObj);
 			} catch (Exception e) {
 				logger.error("Bad VoipCallAnswerData: Answer could not be parsed");
-				throw new BadMessageException("TM061", true);
+				throw new BadMessageException("TM061");
 			}
 		} else if (callAnswerData.action == Action.REJECT) {
 			try {
 				callAnswerData.rejectReason = (byte) o.getInt(KEY_REJECT_REASON);
 			} catch (Exception e) {
 				logger.error("Bad VoipCallAnswerData: Reject reason could not be parsed");
-				throw new BadMessageException("TM061", true);
+				throw new BadMessageException("TM061");
 			}
 		}
 
@@ -284,7 +284,7 @@ public class VoipCallAnswerData extends VoipCallData<VoipCallAnswerData> {
 				callAnswerData.features = FeatureList.parse(featureObj);
 			}
 		} catch (Exception e) {
-			throw new BadMessageException("TM061", true);
+			throw new BadMessageException("TM061");
 		}
 
 		return callAnswerData;
@@ -298,30 +298,30 @@ public class VoipCallAnswerData extends VoipCallData<VoipCallAnswerData> {
 		// Validate data
 		if (this.action == null) {
 			logger.error("Bad VoipCallAnswerData: No action set");
-			throw new BadMessageException("TM061", true);
+			throw new BadMessageException("TM061");
 		}
 		switch (this.action) {
 			case Action.ACCEPT:
 				if (this.answerData == null) {
 					logger.error("Bad VoipCallAnswerData: Accept message must contain answer data");
-					throw new BadMessageException("TM061", true);
+					throw new BadMessageException("TM061");
 				} else if (this.rejectReason != null) {
 					logger.error("Bad VoipCallAnswerData: Accept message must not contain reject reason");
-					throw new BadMessageException("TM061", true);
+					throw new BadMessageException("TM061");
 				}
 				break;
 			case Action.REJECT:
 				if (this.rejectReason == null) {
 					logger.error("Bad VoipCallAnswerData: Reject message must contain reject reason");
-					throw new BadMessageException("TM061", true);
+					throw new BadMessageException("TM061");
 				} else if (this.answerData != null) {
 					logger.error("Bad VoipCallAnswerData: Accept message must not contain answer data");
-					throw new BadMessageException("TM061", true);
+					throw new BadMessageException("TM061");
 				}
 				break;
 			default:
 				logger.error("Bad VoipCallAnswerData: Invalid action");
-				throw new BadMessageException("TM061", true);
+				throw new BadMessageException("TM061");
 		}
 
 		final JSONObject o = this.buildJsonObject();
@@ -336,7 +336,7 @@ public class VoipCallAnswerData extends VoipCallData<VoipCallAnswerData> {
 			}
 		} catch (JSONException e) {
 			logger.error("Could not add answer data", e);
-			throw new BadMessageException("TM061", true);
+			throw new BadMessageException("TM061");
 		}
 
 		// Add feature list
@@ -345,7 +345,7 @@ public class VoipCallAnswerData extends VoipCallData<VoipCallAnswerData> {
 				o.put("features", this.features.toJSON());
 			} catch (JSONException e) {
 				logger.error("Could not add features", e);
-				throw new BadMessageException("TM061", true);
+				throw new BadMessageException("TM061");
 			}
 		}
 
diff --git a/domain/src/main/java/ch/threema/domain/protocol/csp/messages/voip/VoipCallHangupData.java b/domain/src/main/java/ch/threema/domain/protocol/csp/messages/voip/VoipCallHangupData.java
index bcd82735..72d2508b 100644
--- a/domain/src/main/java/ch/threema/domain/protocol/csp/messages/voip/VoipCallHangupData.java
+++ b/domain/src/main/java/ch/threema/domain/protocol/csp/messages/voip/VoipCallHangupData.java
@@ -48,7 +48,7 @@ public class VoipCallHangupData extends VoipCallData<VoipCallHangupData> {
 				o = new JSONObject(jsonObjectString);
 			} catch (JSONException e) {
 				logger.error("Bad VoipCallHangupData: Invalid JSON string", e);
-				throw new BadMessageException("TM063", true);
+				throw new BadMessageException("TM063");
 			}
 		}
 
@@ -61,7 +61,7 @@ public class VoipCallHangupData extends VoipCallData<VoipCallHangupData> {
 			}
 		} catch (Exception e) {
 			logger.error("Bad VoipCallHangupData: Invalid Call ID", e);
-			throw new BadMessageException("TM063", true);
+			throw new BadMessageException("TM063");
 		}
 
 		return callHangupData;
diff --git a/domain/src/main/java/ch/threema/domain/protocol/csp/messages/voip/VoipCallOfferData.java b/domain/src/main/java/ch/threema/domain/protocol/csp/messages/voip/VoipCallOfferData.java
index f49f4404..f9ea20f6 100644
--- a/domain/src/main/java/ch/threema/domain/protocol/csp/messages/voip/VoipCallOfferData.java
+++ b/domain/src/main/java/ch/threema/domain/protocol/csp/messages/voip/VoipCallOfferData.java
@@ -90,21 +90,21 @@ public class VoipCallOfferData extends VoipCallData<VoipCallOfferData> {
 				offerData.sdpType = JSONUtil.getStringOrNull(o, KEY_SDP_TYPE);
 				if (offerData.sdpType == null) {
 					logger.error("Bad VoipCallOfferData: " + KEY_SDP_TYPE + " must be defined");
-					throw new BadMessageException("TM060", true);
+					throw new BadMessageException("TM060");
 				} else if (offerData.sdpType.equals("answer") || offerData.sdpType.equals("pranswer")) {
 					logger.error("Bad VoipCallOfferData: " + KEY_SDP_TYPE + " may not be \"answer\" or \"pranswer\"");
-					throw new BadMessageException("TM060", true);
+					throw new BadMessageException("TM060");
 				}
 
 				offerData.sdp = JSONUtil.getStringOrNull(o, KEY_SDP);
 				if (offerData.sdp == null && !offerData.sdpType.equals("rollback")) {
 					logger.error("Bad VoipCallOfferData: " + KEY_SDP + " may only be null if " + KEY_SDP_TYPE + "=rollback");
-					throw new BadMessageException("TM060", true);
+					throw new BadMessageException("TM060");
 				}
 
 				return offerData;
 			} catch (Exception e) {
-				throw new BadMessageException("TM060", true);
+				throw new BadMessageException("TM060");
 			}
 		}
 
@@ -151,7 +151,7 @@ public class VoipCallOfferData extends VoipCallData<VoipCallOfferData> {
 			o = new JSONObject(jsonObjectString);
 		} catch (JSONException e) {
 			logger.error("Bad VoipCallOfferData: Invalid JSON string", e);
-			throw new BadMessageException("TM060", true);
+			throw new BadMessageException("TM060");
 		}
 
 		final VoipCallOfferData callOfferData = new VoipCallOfferData();
@@ -163,7 +163,7 @@ public class VoipCallOfferData extends VoipCallData<VoipCallOfferData> {
 			}
 		} catch (Exception e) {
 			logger.error("Bad VoipCallOfferData: Invalid Call ID", e);
-			throw new BadMessageException("TM060", true);
+			throw new BadMessageException("TM060");
 		}
 
 		try {
@@ -171,7 +171,7 @@ public class VoipCallOfferData extends VoipCallData<VoipCallOfferData> {
 			callOfferData.offerData = OfferData.parse(offerObj);
 		} catch (Exception e) {
 			logger.error("Bad VoipCallOfferData: Offer could not be parsed", e);
-			throw new BadMessageException("TM060", true);
+			throw new BadMessageException("TM060");
 		}
 
 		try {
@@ -181,7 +181,7 @@ public class VoipCallOfferData extends VoipCallData<VoipCallOfferData> {
 			}
 		} catch (Exception e) {
 			logger.error("Bad VoipCallOfferData: Feature list could not be parsed", e);
-			throw new BadMessageException("TM060", true);
+			throw new BadMessageException("TM060");
 		}
 
 		return callOfferData;
@@ -198,11 +198,11 @@ public class VoipCallOfferData extends VoipCallData<VoipCallOfferData> {
 		try {
 			if (this.offerData == null) {
 				logger.error("Bad VoipCallOfferData: Missing offer data");
-				throw new BadMessageException("TM060", true);
+				throw new BadMessageException("TM060");
 			}
 			o.put(KEY_OFFER, this.offerData.toJSON());
 		} catch (Exception e) {
-			throw new BadMessageException("TM060", true);
+			throw new BadMessageException("TM060");
 		}
 
 		// Add feature list
@@ -211,7 +211,7 @@ public class VoipCallOfferData extends VoipCallData<VoipCallOfferData> {
 				o.put("features", this.features.toJSON());
 			} catch (JSONException e) {
 				logger.error("Could not add features", e);
-				throw new BadMessageException("TM060", true);
+				throw new BadMessageException("TM060");
 			}
 		}
 
diff --git a/domain/src/main/java/ch/threema/domain/protocol/csp/messages/voip/VoipCallRingingData.java b/domain/src/main/java/ch/threema/domain/protocol/csp/messages/voip/VoipCallRingingData.java
index 87890d2c..f8b628cf 100644
--- a/domain/src/main/java/ch/threema/domain/protocol/csp/messages/voip/VoipCallRingingData.java
+++ b/domain/src/main/java/ch/threema/domain/protocol/csp/messages/voip/VoipCallRingingData.java
@@ -48,7 +48,7 @@ public class VoipCallRingingData extends VoipCallData<VoipCallRingingData> {
 				o = new JSONObject(jsonObjectString);
 			} catch (JSONException e) {
 				logger.error("Bad VoipCallRingingData: Invalid JSON string", e);
-				throw new BadMessageException("TM064", true);
+				throw new BadMessageException("TM064");
 			}
 		}
 
@@ -61,7 +61,7 @@ public class VoipCallRingingData extends VoipCallData<VoipCallRingingData> {
 			}
 		} catch (Exception e) {
 			logger.error("Bad VoipCallRingingData: Invalid Call ID", e);
-			throw new BadMessageException("TM064", true);
+			throw new BadMessageException("TM064");
 		}
 
 		return callRingingData;
diff --git a/domain/src/main/java/ch/threema/domain/protocol/csp/messages/voip/VoipICECandidatesData.java b/domain/src/main/java/ch/threema/domain/protocol/csp/messages/voip/VoipICECandidatesData.java
index 9d43ebfb..8e97205a 100644
--- a/domain/src/main/java/ch/threema/domain/protocol/csp/messages/voip/VoipICECandidatesData.java
+++ b/domain/src/main/java/ch/threema/domain/protocol/csp/messages/voip/VoipICECandidatesData.java
@@ -143,7 +143,7 @@ public class VoipICECandidatesData extends VoipCallData<VoipICECandidatesData> i
 				final String candidateString = JSONUtil.getStringOrNull(o, KEY_CANDIDATE);
 				if (candidateString == null) {
 					logger.error("Bad Candidate: " + KEY_CANDIDATE + " must be defined");
-					throw new BadMessageException("TM062", true);
+					throw new BadMessageException("TM062");
 				} else {
 					candidate.candidate = candidateString;
 				}
@@ -154,7 +154,7 @@ public class VoipICECandidatesData extends VoipCallData<VoipICECandidatesData> i
 
 				return candidate;
 			} catch (Exception e) {
-				throw new BadMessageException("TM062", true);
+				throw new BadMessageException("TM062");
 			}
 		}
 
@@ -205,7 +205,7 @@ public class VoipICECandidatesData extends VoipCallData<VoipICECandidatesData> i
 			o = new JSONObject(jsonObjectString);
 		} catch (JSONException e) {
 			logger.error("Bad VoipICECandidatesData: Invalid JSON string", e);
-			throw new BadMessageException("TM062", true);
+			throw new BadMessageException("TM062");
 		}
 
 		final VoipICECandidatesData candidatesData = new VoipICECandidatesData();
@@ -217,7 +217,7 @@ public class VoipICECandidatesData extends VoipCallData<VoipICECandidatesData> i
 			}
 		} catch (Exception e) {
 			logger.error("Bad VoipICECandidatesData: Invalid Call ID", e);
-			throw new BadMessageException("TM062", true);
+			throw new BadMessageException("TM062");
 		}
 
 		try {
@@ -226,7 +226,7 @@ public class VoipICECandidatesData extends VoipCallData<VoipICECandidatesData> i
 			final JSONArray candidates = o.getJSONArray(KEY_CANDIDATES);
 			if (candidates.length() == 0) {
 				logger.error("Bad VoipICECandidatesData: " + KEY_CANDIDATES + " may not be empty");
-				throw new BadMessageException("TM062", true);
+				throw new BadMessageException("TM062");
 			}
 			candidatesData.candidates = new Candidate[candidates.length()];
 			for (int i = 0; i < candidates.length(); i++) {
@@ -235,7 +235,7 @@ public class VoipICECandidatesData extends VoipCallData<VoipICECandidatesData> i
 			}
 		} catch (Exception e) {
 			logger.error("Bad VoipICECandidatesData", e);
-			throw new BadMessageException("TM062", true);
+			throw new BadMessageException("TM062");
 		}
 
 		return candidatesData;
@@ -255,7 +255,7 @@ public class VoipICECandidatesData extends VoipCallData<VoipICECandidatesData> i
 			}
 			o.put(KEY_CANDIDATES, candidateArray);
 		} catch (Exception e) {
-			throw new BadMessageException("TM062", true);
+			throw new BadMessageException("TM062");
 		}
 
 		return o.toString();
diff --git a/domain/src/main/java/ch/threema/domain/protocol/csp/messages/voip/VoipMessage.java b/domain/src/main/java/ch/threema/domain/protocol/csp/messages/voip/VoipMessage.java
index 32bcd015..c442951a 100644
--- a/domain/src/main/java/ch/threema/domain/protocol/csp/messages/voip/VoipMessage.java
+++ b/domain/src/main/java/ch/threema/domain/protocol/csp/messages/voip/VoipMessage.java
@@ -21,7 +21,9 @@
 
 package ch.threema.domain.protocol.csp.messages.voip;
 
+import androidx.annotation.Nullable;
 import ch.threema.domain.protocol.csp.messages.AbstractMessage;
+import ch.threema.protobuf.csp.e2e.fs.Version;
 
 public abstract class VoipMessage extends AbstractMessage {
 
@@ -39,4 +41,10 @@ public abstract class VoipMessage extends AbstractMessage {
 		// Should be set for all VoIP messages except for the hangup message
 		return true;
 	}
+
+	@Nullable
+	@Override
+	public Version getMinimumRequiredForwardSecurityVersion() {
+		return Version.V1_1;
+	}
 }
diff --git a/domain/src/main/java/ch/threema/domain/stores/DHSessionStoreInterface.java b/domain/src/main/java/ch/threema/domain/stores/DHSessionStoreInterface.java
index 42e2f85d..7d61886d 100644
--- a/domain/src/main/java/ch/threema/domain/stores/DHSessionStoreInterface.java
+++ b/domain/src/main/java/ch/threema/domain/stores/DHSessionStoreInterface.java
@@ -21,11 +21,16 @@
 
 package ch.threema.domain.stores;
 
+import androidx.annotation.NonNull;
 import androidx.annotation.Nullable;
 import ch.threema.domain.fs.DHSession;
 import ch.threema.domain.fs.DHSessionId;
 
 public interface DHSessionStoreInterface {
+	interface DHSessionStoreErrorHandler {
+		void onInvalidDHSessionState(@NonNull String peerIdentity, @NonNull DHSessionId sessionId);
+	}
+
 	/**
 	 * Get the DH session with the specified contact and session ID.
 	 *
@@ -87,5 +92,17 @@ public interface DHSessionStoreInterface {
 	 */
 	int deleteAllSessionsExcept(String myIdentity, String peerIdentity, DHSessionId excludeSessionId, boolean fourDhOnly) throws DHSessionStoreException;
 
+	/**
+	 * Provide an error handler for dealing with invalid sessions.
+	 *
+	 * @param errorHandler the error handler
+	 */
+	void setDHSessionStoreErrorHandler(@NonNull DHSessionStoreErrorHandler errorHandler);
+
+	/**
+	 * This executes a statement on the database that has no effect. This is used to detect database
+	 * downgrades at the app start and not when using the database the next time. Note that this
+	 * also forces the database upgrades to run.
+	 */
 	void executeNull();
 }
diff --git a/domain/src/test/java/ch/threema/base/utils/UtilsTest.java b/domain/src/test/java/ch/threema/base/utils/UtilsTest.java
index 27dc3633..ace306d6 100644
--- a/domain/src/test/java/ch/threema/base/utils/UtilsTest.java
+++ b/domain/src/test/java/ch/threema/base/utils/UtilsTest.java
@@ -55,64 +55,64 @@ public class UtilsTest {
 	}
 
 	@Test
-	public void longToByteArray() {
+	public void longToByteArrayBigEndian() {
 		Assert.assertArrayEquals(
 			new byte[] { 0, 0, 0, 0, 0, 0, 0, (byte)0x0A },
-			Utils.longToByteArray(0x0AL)
+			Utils.longToByteArrayBigEndian(0x0AL)
 		);
 
 		Assert.assertArrayEquals(
 			new byte[] { 0, 0, 0, 0, 0, 0, 0, 0 },
-			Utils.longToByteArray(0L)
+			Utils.longToByteArrayBigEndian(0L)
 		);
 
 		Assert.assertArrayEquals(
 			new byte[] { (byte)0x80, 0, 0, 0, 0, 0, 0, 0 },
-			Utils.longToByteArray(Long.MIN_VALUE)
+			Utils.longToByteArrayBigEndian(Long.MIN_VALUE)
 		);
 
 		Assert.assertArrayEquals(
 			new byte[] {
 				(byte)0x7F, (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF
 			},
-			Utils.longToByteArray(Long.MAX_VALUE)
+			Utils.longToByteArrayBigEndian(Long.MAX_VALUE)
 		);
 
 		Assert.assertArrayEquals(
 			new byte[] {
 				(byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF
 			},
-			Utils.longToByteArray(-1L)
+			Utils.longToByteArrayBigEndian(-1L)
 		);
 	}
 
 	@Test
-	public void bytesArrayToLong() {
+	public void bytesArrayToLongBigEndian() {
 		Assert.assertEquals(
 			0x0AL,
-			Utils.byteArrayToLong(new byte[] { 0, 0, 0, 0, 0, 0, 0, (byte)0x0A })
+			Utils.byteArrayToLongBigEndian(new byte[] { 0, 0, 0, 0, 0, 0, 0, (byte)0x0A })
 		);
 
 		Assert.assertEquals(
 			0L,
-			Utils.byteArrayToLong(new byte[] { 0, 0, 0, 0, 0, 0, 0, 0 })
+			Utils.byteArrayToLongBigEndian(new byte[] { 0, 0, 0, 0, 0, 0, 0, 0 })
 		);
 
 		Assert.assertEquals(
 			Long.MIN_VALUE,
-			Utils.byteArrayToLong(new byte[] { (byte)0x80, 0, 0, 0, 0, 0, 0, 0 })
+			Utils.byteArrayToLongBigEndian(new byte[] { (byte)0x80, 0, 0, 0, 0, 0, 0, 0 })
 		);
 
 		Assert.assertEquals(
 			Long.MAX_VALUE,
-			Utils.byteArrayToLong(new byte[] {
+			Utils.byteArrayToLongBigEndian(new byte[] {
 				(byte)0x7F, (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF
 			})
 		);
 
 		Assert.assertEquals(
 			-1L,
-			Utils.byteArrayToLong(new byte[] {
+			Utils.byteArrayToLongBigEndian(new byte[] {
 				(byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF
 			})
 		);
diff --git a/domain/src/test/java/ch/threema/domain/fs/DHSessionTest.java b/domain/src/test/java/ch/threema/domain/fs/DHSessionTest.java
index 8187712e..79eebff5 100644
--- a/domain/src/test/java/ch/threema/domain/fs/DHSessionTest.java
+++ b/domain/src/test/java/ch/threema/domain/fs/DHSessionTest.java
@@ -25,12 +25,13 @@ import org.junit.Assert;
 import org.junit.Test;
 
 import ch.threema.domain.helpers.DummyUsers;
+import ch.threema.domain.protocol.csp.messages.BadMessageException;
 
 public class DHSessionTest {
 	private DHSession initiatorDHSession;
 	private DHSession responderDHSession;
 
-	public void createSessions() {
+	public void createSessions() throws BadMessageException {
 		// Alice is the initiator
 		this.initiatorDHSession = new DHSession(
 			DummyUsers.getContactForUser(DummyUsers.BOB),
@@ -40,6 +41,7 @@ public class DHSessionTest {
 		// Bob gets an init message from Alice with her ephemeral public key
 		this.responderDHSession = new DHSession(
 			this.initiatorDHSession.getId(),
+			DHSession.SUPPORTED_VERSION_RANGE,
 			this.initiatorDHSession.getMyEphemeralPublicKey(),
 			DummyUsers.getContactForUser(DummyUsers.ALICE),
 			DummyUsers.getIdentityStoreForUser(DummyUsers.BOB)
@@ -47,7 +49,7 @@ public class DHSessionTest {
 	}
 
 	@Test
-	public void test2DHKeyExchange() {
+	public void test2DHKeyExchange() throws BadMessageException {
 		createSessions();
 
 		// At this point, both parties should have the same 2DH chain keys
@@ -60,11 +62,12 @@ public class DHSessionTest {
 	}
 
 	@Test
-	public void test4DHKeyExchange() throws DHSession.MissingEphemeralPrivateKeyException {
+	public void test4DHKeyExchange() throws DHSession.MissingEphemeralPrivateKeyException, BadMessageException {
 		createSessions();
 
 		// Now Bob sends his ephemeral public key back to Alice
 		this.initiatorDHSession.processAccept(
+			DHSession.SUPPORTED_VERSION_RANGE,
 			this.responderDHSession.getMyEphemeralPublicKey(),
 			DummyUsers.getContactForUser(DummyUsers.BOB),
 			DummyUsers.getIdentityStoreForUser(DummyUsers.ALICE)
@@ -96,7 +99,7 @@ public class DHSessionTest {
 	}
 
 	@Test
-	public void testKDFRotation() throws KDFRatchet.RatchetRotationException, DHSession.MissingEphemeralPrivateKeyException {
+	public void testKDFRotation() throws KDFRatchet.RatchetRotationException, DHSession.MissingEphemeralPrivateKeyException, BadMessageException {
 		test4DHKeyExchange();
 
 		Assert.assertNotNull(this.initiatorDHSession.getMyRatchet4DH());
diff --git a/domain/src/test/java/ch/threema/domain/protocol/csp/fs/ForwardSecurityMessageProcessorTest.java b/domain/src/test/java/ch/threema/domain/protocol/csp/fs/ForwardSecurityMessageProcessorTest.java
index 6f8f817a..cabedfb1 100644
--- a/domain/src/test/java/ch/threema/domain/protocol/csp/fs/ForwardSecurityMessageProcessorTest.java
+++ b/domain/src/test/java/ch/threema/domain/protocol/csp/fs/ForwardSecurityMessageProcessorTest.java
@@ -23,9 +23,13 @@ package ch.threema.domain.protocol.csp.fs;
 
 import org.junit.Assert;
 import org.junit.Test;
+import org.mockito.Mockito;
+import org.powermock.reflect.Whitebox;
 
+import java.lang.reflect.Field;
 import java.util.LinkedList;
 import java.util.List;
+import java.util.Objects;
 
 import ch.threema.base.ThreemaException;
 import ch.threema.domain.fs.DHSession;
@@ -36,17 +40,37 @@ import ch.threema.domain.protocol.csp.coders.MessageCoder;
 import ch.threema.domain.protocol.csp.connection.MessageQueue;
 import ch.threema.domain.protocol.csp.messages.AbstractMessage;
 import ch.threema.domain.protocol.csp.messages.BadMessageException;
+import ch.threema.domain.protocol.csp.messages.BoxLocationMessage;
 import ch.threema.domain.protocol.csp.messages.BoxTextMessage;
+import ch.threema.domain.protocol.csp.messages.ContactDeleteProfilePictureMessage;
+import ch.threema.domain.protocol.csp.messages.ContactRequestProfilePictureMessage;
+import ch.threema.domain.protocol.csp.messages.ContactSetProfilePictureMessage;
+import ch.threema.domain.protocol.csp.messages.DeliveryReceiptMessage;
+import ch.threema.domain.protocol.csp.messages.GroupCreateMessage;
+import ch.threema.domain.protocol.csp.messages.GroupRequestSyncMessage;
 import ch.threema.domain.protocol.csp.messages.MissingPublicKeyException;
+import ch.threema.domain.protocol.csp.messages.TypingIndicatorMessage;
+import ch.threema.domain.protocol.csp.messages.ballot.BallotCreateMessage;
+import ch.threema.domain.protocol.csp.messages.ballot.BallotVoteMessage;
+import ch.threema.domain.protocol.csp.messages.file.FileMessage;
+import ch.threema.domain.protocol.csp.messages.file.GroupFileMessage;
+import ch.threema.domain.protocol.csp.messages.fs.ForwardSecurityDataMessage;
 import ch.threema.domain.protocol.csp.messages.fs.ForwardSecurityEnvelopeMessage;
 import ch.threema.domain.protocol.csp.messages.fs.ForwardSecurityMode;
+import ch.threema.domain.protocol.csp.messages.voip.VoipCallAnswerMessage;
+import ch.threema.domain.protocol.csp.messages.voip.VoipCallHangupMessage;
+import ch.threema.domain.protocol.csp.messages.voip.VoipCallOfferMessage;
+import ch.threema.domain.protocol.csp.messages.voip.VoipCallRingingMessage;
+import ch.threema.domain.protocol.csp.messages.voip.VoipICECandidatesMessage;
 import ch.threema.domain.stores.ContactStore;
 import ch.threema.domain.stores.DHSessionStoreException;
 import ch.threema.domain.stores.DHSessionStoreInterface;
 import ch.threema.domain.stores.DummyContactStore;
-import ch.threema.domain.stores.InMemoryDHSessionStore;
 import ch.threema.domain.stores.IdentityStoreInterface;
+import ch.threema.domain.stores.InMemoryDHSessionStore;
 import ch.threema.domain.testhelpers.TestHelpers;
+import ch.threema.protobuf.csp.e2e.fs.Version;
+import ch.threema.protobuf.csp.e2e.fs.VersionRange;
 
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.verify;
@@ -69,7 +93,7 @@ public class ForwardSecurityMessageProcessorTest {
 	private UserContext aliceContext;
 	private UserContext bobContext;
 
-	private void startNegotiationAlice() throws ThreemaException {
+	private void startNegotiationAlice() throws ThreemaException, ForwardSecurityMessageProcessor.MessageTypeNotSupportedInSession {
 		aliceContext = makeTestUserContext(DummyUsers.ALICE);
 		bobContext = makeTestUserContext(DummyUsers.BOB);
 
@@ -93,13 +117,14 @@ public class ForwardSecurityMessageProcessorTest {
 
 		// The 2DH "my" ratchet counter should be 2 on Alice's side (as she has already incremented it
 		// for the next message). There should be no peer 2DH ratchet, as it is never needed for the initiator.
+		Assert.assertEquals(DHSession.State.L20, alicesInitiatorSession.getState());
 		Assert.assertNotNull(alicesInitiatorSession.getMyRatchet2DH());
 		Assert.assertNull(alicesInitiatorSession.getPeerRatchet2DH());
 		Assert.assertEquals(2, alicesInitiatorSession.getMyRatchet2DH().getCounter());
 	}
 
 	@Test
-	public void testNegotiationAnd2DH() throws ThreemaException, MissingPublicKeyException, BadMessageException {
+	public void testNegotiationAnd2DH() throws ThreemaException, MissingPublicKeyException, BadMessageException, ForwardSecurityMessageProcessor.MessageTypeNotSupportedInSession {
 		// Start the negotiation on Alice's side, up to the point where the Init and Message are
 		// on the way to Bob, but have not been received by him yet
 		startNegotiationAlice();
@@ -108,6 +133,19 @@ public class ForwardSecurityMessageProcessorTest {
 		// The decapsulated message should be the text message from Alice.
 		receiveAndAssertSingleMessage(aliceContext.messageQueue, bobContext, ALICE_MESSAGE_1, ForwardSecurityMode.TWODH);
 
+		// Both should have the session now
+		DHSession alicesInitiatorSession = aliceContext.dhSessionStore.getBestDHSession(
+			DummyUsers.ALICE.getIdentity(),
+			DummyUsers.BOB.getIdentity()
+		);
+		Assert.assertNotNull(alicesInitiatorSession);
+		DHSession bobsResponderSession = bobContext.dhSessionStore.getDHSession(
+			DummyUsers.BOB.getIdentity(),
+			DummyUsers.ALICE.getIdentity(),
+			alicesInitiatorSession.getId()
+		);
+		Assert.assertNotNull(bobsResponderSession);
+
 		// At this point, Bob should have enqueued one FS message: Accept
 		Assert.assertEquals(1, bobContext.messageQueue.getQueueSize());
 
@@ -117,25 +155,15 @@ public class ForwardSecurityMessageProcessorTest {
 		// Bob has not sent any actual message to Alice
 		Assert.assertEquals(0, alicesReceivedMessages.size());
 
-		// At this point, Alice and Bob should have one mutual 4DH session. Alice has already
-		// discarded her 2DH ratchets.
-		DHSession alicesInitiatorSession = aliceContext.dhSessionStore.getBestDHSession(
-			DummyUsers.ALICE.getIdentity(),
-			DummyUsers.BOB.getIdentity()
-		);
-		Assert.assertNotNull(alicesInitiatorSession);
+		// Alice has already discarded her 2DH ratchets.
+		Assert.assertEquals(DHSession.State.RL44, alicesInitiatorSession.getState());
 		Assert.assertNull(alicesInitiatorSession.getMyRatchet2DH());
 		Assert.assertNull(alicesInitiatorSession.getPeerRatchet2DH());
 		Assert.assertNotNull(alicesInitiatorSession.getMyRatchet4DH());
 		Assert.assertNotNull(alicesInitiatorSession.getPeerRatchet4DH());
 
 		// Bob has not received a 4DH message yet, so he still has a 2DH peer ratchet
-		DHSession bobsResponderSession = bobContext.dhSessionStore.getDHSession(
-			DummyUsers.BOB.getIdentity(),
-			DummyUsers.ALICE.getIdentity(),
-			alicesInitiatorSession.getId()
-		);
-		Assert.assertNotNull(bobsResponderSession);
+		Assert.assertEquals(DHSession.State.R24, bobsResponderSession.getState());
 		Assert.assertNull(bobsResponderSession.getMyRatchet2DH());
 		Assert.assertNotNull(bobsResponderSession.getPeerRatchet2DH());
 		Assert.assertNotNull(bobsResponderSession.getMyRatchet4DH());
@@ -152,15 +180,9 @@ public class ForwardSecurityMessageProcessorTest {
 	}
 
 	@Test
-	public void test4DH() throws MissingPublicKeyException, BadMessageException, ThreemaException {
+	public void test4DH() throws MissingPublicKeyException, BadMessageException, ThreemaException, ForwardSecurityMessageProcessor.MessageTypeNotSupportedInSession {
 		testNegotiationAnd2DH();
 
-		// Check that we're in 4DH mode from the previous exchange
-		Assert.assertNotNull(aliceContext.dhSessionStore.getBestDHSession(
-			DummyUsers.ALICE.getIdentity(),
-			DummyUsers.BOB.getIdentity()
-		));
-
 		// Alice now sends Bob another message, this time in 4DH mode
 		sendTextMessage(ALICE_MESSAGE_2, aliceContext, DummyUsers.BOB);
 
@@ -177,6 +199,7 @@ public class ForwardSecurityMessageProcessorTest {
 			DummyUsers.ALICE.getIdentity()
 		);
 		Assert.assertNotNull(bobsResponderSession);
+		Assert.assertEquals(DHSession.State.RL44, bobsResponderSession.getState());
 		Assert.assertNull(bobsResponderSession.getPeerRatchet2DH());
 
 		// Bob now sends Alice a message in the new session
@@ -188,7 +211,7 @@ public class ForwardSecurityMessageProcessorTest {
 	}
 
 	@Test
-	public void testMissingMessage() throws BadMessageException, MissingPublicKeyException, ThreemaException {
+	public void testMissingMessage() throws BadMessageException, MissingPublicKeyException, ThreemaException, ForwardSecurityMessageProcessor.MessageTypeNotSupportedInSession {
 		test4DH();
 
 		// Alice now sends Bob another message, but it never arrives
@@ -208,7 +231,7 @@ public class ForwardSecurityMessageProcessorTest {
 	}
 
 	@Test
-	public void testDataLoss() throws ThreemaException, MissingPublicKeyException, BadMessageException {
+	public void testDataLoss() throws ThreemaException, MissingPublicKeyException, BadMessageException, ForwardSecurityMessageProcessor.MessageTypeNotSupportedInSession {
 		// Repeat the tests several times, as random session IDs are involved
 		for (int i = 0; i < NUM_RANDOM_RUNS; i++) {
 			testDataLoss1();
@@ -216,7 +239,7 @@ public class ForwardSecurityMessageProcessorTest {
 		}
 	}
 
-	private void setupDataLoss() throws MissingPublicKeyException, BadMessageException, ThreemaException {
+	private void setupDataLoss() throws MissingPublicKeyException, BadMessageException, ThreemaException, ForwardSecurityMessageProcessor.MessageTypeNotSupportedInSession {
 		test4DH();
 
 		// Check that Bob has a responder DH session that matches Alice's initiator session.
@@ -240,7 +263,7 @@ public class ForwardSecurityMessageProcessorTest {
 		);
 	}
 
-	private void testDataLoss1() throws BadMessageException, MissingPublicKeyException, ThreemaException {
+	private void testDataLoss1() throws BadMessageException, MissingPublicKeyException, ThreemaException, ForwardSecurityMessageProcessor.MessageTypeNotSupportedInSession {
 		// Data loss scenario 1: Bob loses his data, but does not send any messages until Alice
 		// sends her first message after the data loss. This message gets rejected by Bob, and eventually
 		// both agree on a new 4DH session.
@@ -287,7 +310,7 @@ public class ForwardSecurityMessageProcessorTest {
 		verify(aliceContext.failureListener).notifyRejectReceived(DummyUsers.getContactForUser(DummyUsers.BOB), encapMessage.getMessageId());
 	}
 
-	private void testDataLoss2() throws BadMessageException, MissingPublicKeyException, ThreemaException {
+	private void testDataLoss2() throws BadMessageException, MissingPublicKeyException, ThreemaException, ForwardSecurityMessageProcessor.MessageTypeNotSupportedInSession {
 		// Data loss scenario 2: Bob loses his data and sends a message in a new session before
 		// Alice gets a chance to send one. Alice should take the Init from Bob as a hint that he
 		// has lost his session data, and she should discard the existing (4DH) session.
@@ -296,35 +319,39 @@ public class ForwardSecurityMessageProcessorTest {
 
 		// Bob sends Alice a message, and since he doesn't have a session anymore, he starts a new one
 		sendTextMessage(BOB_MESSAGE_2, bobContext, DummyUsers.ALICE);
+		DHSession bobsBestSession = bobContext.dhSessionStore.getBestDHSession(
+			DummyUsers.BOB.getIdentity(),
+			DummyUsers.ALICE.getIdentity()
+		);
+		Assert.assertNotNull(bobsBestSession);
+		Assert.assertEquals(DHSession.State.L20, bobsBestSession.getState());
 
 		// Let Alice process all the messages that she has received from Bob.
 		receiveAndAssertSingleMessage(bobContext.messageQueue, aliceContext, BOB_MESSAGE_2, ForwardSecurityMode.TWODH);
 
 		// Alice should have enqueued an Accept for the new session to Bob
+		DHSession alicesBestSession = aliceContext.dhSessionStore.getBestDHSession(
+			DummyUsers.ALICE.getIdentity(),
+			DummyUsers.BOB.getIdentity()
+		);
+		Assert.assertNotNull(alicesBestSession);
 		Assert.assertEquals(1, aliceContext.messageQueue.getQueueSize());
+		Assert.assertEquals(DHSession.State.R24, alicesBestSession.getState());
 
 		// Alice now sends a message to Bob, which should be in 4DH mode
 		sendTextMessage(ALICE_MESSAGE_6, aliceContext, DummyUsers.BOB);
+		Assert.assertEquals(DHSession.State.R24, alicesBestSession.getState());
 
 		// Let Bob process the messages that he has received from Alice.
 		receiveAndAssertSingleMessage(aliceContext.messageQueue, bobContext, ALICE_MESSAGE_6, ForwardSecurityMode.FOURDH);
+		Assert.assertEquals(DHSession.State.RL44, bobsBestSession.getState());
 
 		// Alice and Bob should now each have one matching 4DH session
-		DHSession alicesBestSession = aliceContext.dhSessionStore.getBestDHSession(
-			DummyUsers.ALICE.getIdentity(),
-			DummyUsers.BOB.getIdentity()
-		);
-		Assert.assertNotNull(alicesBestSession);
-		DHSession bobsBestSession = bobContext.dhSessionStore.getBestDHSession(
-			DummyUsers.BOB.getIdentity(),
-			DummyUsers.ALICE.getIdentity()
-		);
-		Assert.assertNotNull(bobsBestSession);
 		Assert.assertEquals(alicesBestSession.getId(), bobsBestSession.getId());
 	}
 
 	@Test
-	public void testDowngrade() throws BadMessageException, MissingPublicKeyException, ThreemaException {
+	public void testDowngrade() throws BadMessageException, MissingPublicKeyException, ThreemaException, ForwardSecurityMessageProcessor.MessageTypeNotSupportedInSession {
 		test4DH();
 
 		// Bob has received a 4DH message from Alice, and thus both parties should
@@ -341,13 +368,333 @@ public class ForwardSecurityMessageProcessorTest {
 			sessionId
 		);
 		Assert.assertNotNull(bobsSession);
+		Assert.assertEquals(DHSession.State.RL44, alicesSession.getState());
 		Assert.assertNull(alicesSession.getMyRatchet2DH());
 		Assert.assertNull(alicesSession.getPeerRatchet2DH());
+		Assert.assertEquals(DHSession.State.RL44, bobsSession.getState());
 		Assert.assertNull(bobsSession.getMyRatchet2DH());
 		Assert.assertNull(bobsSession.getPeerRatchet2DH());
 	}
 
-	private void setupRaceCondition() throws ThreemaException {
+	@Test
+	public void testMinorVersionUpgrade() throws ThreemaException, MissingPublicKeyException, BadMessageException, ForwardSecurityMessageProcessor.MessageTypeNotSupportedInSession {
+		// Alice supports version 1.0 and 1.1. Bob only supports version 1.0. Later he will upgrade
+		// his version to 1.1.
+
+		// Alice starts negotiation with supported version 1.1
+		startNegotiationAlice();
+
+		// Bob handles the init while only supporting version 1.0
+		setSupportedVersionRange(
+			VersionRange.newBuilder()
+				.setMin(Version.V1_0.getNumber())
+				.setMax(Version.V1_0.getNumber())
+				.build()
+		);
+		Assert.assertEquals(Version.V1_0.getNumber(), DHSession.SUPPORTED_VERSION_RANGE.getMax());
+		// Note that Bob only processes one message, i.e. the init message. He does not yet process
+		// the text message
+		processOneReceivedMessage(aliceContext.messageQueue, bobContext);
+
+		// Alice should process the accept message now (while supporting version 1.1)
+		setSupportedVersionRange(
+			VersionRange.newBuilder()
+				.setMin(Version.V1_0.getNumber())
+				.setMax(Version.V1_1.getNumber())
+				.build()
+		);
+		processReceivedMessages(bobContext.messageQueue, aliceContext);
+
+		// Alice should now have initiated a session with negotiated version 1.0
+		DHSession aliceSession = aliceContext.dhSessionStore.getBestDHSession(aliceContext.identityStore.getIdentity(), bobContext.identityStore.getIdentity());
+		Assert.assertNotNull(aliceSession);
+		Assert.assertEquals(DHSession.State.RL44, aliceSession.getState());
+		Assert.assertEquals(DHSession.DHVersions.restored(Version.V1_0, Version.V1_0), aliceSession.getCurrent4DHVersions());
+		Assert.assertEquals(Version.V1_1, aliceSession.getOutgoingOfferedVersion());
+		Assert.assertEquals(Version.V1_0, aliceSession.getOutgoingAppliedVersion());
+		Assert.assertEquals(Version.V1_0, aliceSession.getMinimumIncomingAppliedVersion());
+
+		// Bob also has initiated a session with negotiated version 1.0
+		DHSession bobSession = bobContext.dhSessionStore.getBestDHSession(bobContext.identityStore.getIdentity(), aliceContext.identityStore.getIdentity());
+		Assert.assertNotNull(bobSession);
+		Assert.assertEquals(DHSession.State.R24, bobSession.getState());
+		Assert.assertEquals(DHSession.DHVersions.restored(Version.V1_0, Version.V1_0), bobSession.getCurrent4DHVersions());
+		Assert.assertEquals(Version.V1_1, bobSession.getOutgoingOfferedVersion());
+		Assert.assertEquals(Version.V1_0, bobSession.getOutgoingAppliedVersion());
+		Assert.assertEquals(Version.V1_0, bobSession.getMinimumIncomingAppliedVersion());
+
+		// Now Bob processes the text message from Alice. Because this is still a 2DH message, Bob will not update the local/outgoing version to 1.1 yet.
+		receiveAndAssertSingleMessage(aliceContext.messageQueue, bobContext, ALICE_MESSAGE_1, ForwardSecurityMode.TWODH);
+		Assert.assertEquals(DHSession.State.R24, bobSession.getState());
+		Assert.assertEquals(DHSession.DHVersions.restored(Version.V1_0, Version.V1_0), bobSession.getCurrent4DHVersions());
+		Assert.assertEquals(Version.V1_1, bobSession.getOutgoingOfferedVersion());
+		Assert.assertEquals(Version.V1_0, bobSession.getOutgoingAppliedVersion());
+		Assert.assertEquals(Version.V1_0, bobSession.getMinimumIncomingAppliedVersion());
+
+		// Alice sends another text message, this time with 4DH.
+		sendTextMessage(ALICE_MESSAGE_1, aliceContext, DummyUsers.BOB);
+		Assert.assertEquals(DHSession.State.RL44, aliceSession.getState());
+		Assert.assertEquals(DHSession.DHVersions.restored(Version.V1_0, Version.V1_0), aliceSession.getCurrent4DHVersions());
+		Assert.assertEquals(Version.V1_1, aliceSession.getOutgoingOfferedVersion());
+		Assert.assertEquals(Version.V1_0, aliceSession.getOutgoingAppliedVersion());
+		Assert.assertEquals(Version.V1_0, aliceSession.getMinimumIncomingAppliedVersion());
+
+		// This time, Bob will update the local/outgoing version to 1.1.
+		receiveAndAssertSingleMessage(aliceContext.messageQueue, bobContext, ALICE_MESSAGE_1, ForwardSecurityMode.FOURDH);
+		Assert.assertEquals(DHSession.State.RL44, bobSession.getState());
+		Assert.assertEquals(DHSession.DHVersions.restored(Version.V1_1, Version.V1_0), bobSession.getCurrent4DHVersions());
+		Assert.assertEquals(Version.V1_1, bobSession.getOutgoingOfferedVersion());
+		Assert.assertEquals(Version.V1_1, bobSession.getOutgoingAppliedVersion());
+		Assert.assertEquals(Version.V1_0, bobSession.getMinimumIncomingAppliedVersion());
+
+		// Now Bob sends a message with offered and applied version 1.1.
+		sendTextMessage(BOB_MESSAGE_1, bobContext, DummyUsers.ALICE);
+		Assert.assertEquals(DHSession.State.RL44, bobSession.getState());
+		Assert.assertEquals(DHSession.DHVersions.restored(Version.V1_1, Version.V1_0), bobSession.getCurrent4DHVersions());
+		Assert.assertEquals(Version.V1_1, bobSession.getOutgoingOfferedVersion());
+		Assert.assertEquals(Version.V1_1, bobSession.getOutgoingAppliedVersion());
+		Assert.assertEquals(Version.V1_0, bobSession.getMinimumIncomingAppliedVersion());
+
+		// Alice processes Bob's message (where 1.1 is offered and applied). This updates both Alice's local/outgoing and remote/incoming version to 1.1 from Alice's perspective.
+		receiveAndAssertSingleMessage(bobContext.messageQueue, aliceContext, BOB_MESSAGE_1, ForwardSecurityMode.FOURDH);
+		Assert.assertEquals(DHSession.State.RL44, aliceSession.getState());
+		Assert.assertEquals(DHSession.DHVersions.restored(Version.V1_1, Version.V1_1), aliceSession.getCurrent4DHVersions());
+		Assert.assertEquals(Version.V1_1, aliceSession.getOutgoingOfferedVersion());
+		Assert.assertEquals(Version.V1_1, aliceSession.getOutgoingAppliedVersion());
+		Assert.assertEquals(Version.V1_1, aliceSession.getMinimumIncomingAppliedVersion());
+	}
+
+	@Test
+	public void testMinorVersionUpgradeToUnknownVersion() throws ThreemaException, MissingPublicKeyException, BadMessageException, ForwardSecurityMessageProcessor.MessageTypeNotSupportedInSession, NoSuchFieldException, IllegalAccessException {
+		// Alice and Bob support versions 1.x. Bob will later upgrade his version to 1.255.
+
+		// Alice starts negotiation
+		startNegotiationAlice();
+
+		// Bob processes the init and the text message of alice
+		processReceivedMessages(aliceContext.messageQueue, bobContext);
+
+		// Alice should process the accept message now
+		processReceivedMessages(bobContext.messageQueue, aliceContext);
+
+		// Alice should now have initiated a session with the maximum supported version
+		DHSession aliceSession = aliceContext.dhSessionStore.getBestDHSession(aliceContext.identityStore.getIdentity(), bobContext.identityStore.getIdentity());
+		Assert.assertNotNull(aliceSession);
+		Assert.assertEquals(DHSession.State.RL44, aliceSession.getState());
+		Assert.assertEquals(DHSession.DHVersions.restored(DHSession.SUPPORTED_VERSION_MAX, DHSession.SUPPORTED_VERSION_MAX), aliceSession.getCurrent4DHVersions());
+		Assert.assertEquals(DHSession.SUPPORTED_VERSION_MAX, aliceSession.getOutgoingOfferedVersion());
+		Assert.assertEquals(DHSession.SUPPORTED_VERSION_MAX, aliceSession.getOutgoingAppliedVersion());
+		Assert.assertEquals(DHSession.SUPPORTED_VERSION_MAX, aliceSession.getMinimumIncomingAppliedVersion());
+
+		// Bob also has initiated a session with the maximum supported version
+		DHSession bobSession = bobContext.dhSessionStore.getBestDHSession(bobContext.identityStore.getIdentity(), aliceContext.identityStore.getIdentity());
+		Assert.assertNotNull(bobSession);
+		Assert.assertEquals(DHSession.State.R24, bobSession.getState());
+		Assert.assertEquals(DHSession.DHVersions.restored(DHSession.SUPPORTED_VERSION_MAX, DHSession.SUPPORTED_VERSION_MAX), bobSession.getCurrent4DHVersions());
+		Assert.assertEquals(DHSession.SUPPORTED_VERSION_MAX, bobSession.getOutgoingOfferedVersion());
+		Assert.assertEquals(DHSession.SUPPORTED_VERSION_MAX, bobSession.getOutgoingAppliedVersion());
+		Assert.assertEquals(DHSession.SUPPORTED_VERSION_MIN, bobSession.getMinimumIncomingAppliedVersion());
+
+		// Alice now sends a message with offered version 0x01FF (1.255)
+		ForwardSecurityEnvelopeMessage message = makeEncapTextMessage(ALICE_MESSAGE_2, aliceContext, DummyUsers.BOB);
+		ForwardSecurityDataMessage data = (ForwardSecurityDataMessage) message.getData();
+		Field appliedVersionField = ForwardSecurityDataMessage.class.getDeclaredField("offeredVersion");
+		appliedVersionField.setAccessible(true);
+		appliedVersionField.setInt(data, 0x01FF);
+		aliceContext.messageQueue.enqueue(message);
+
+		// Now Bob processes the text message from Alice. This should not fail, even if the offered
+		// version is not known.
+		receiveAndAssertSingleMessage(aliceContext.messageQueue, bobContext, ALICE_MESSAGE_2, ForwardSecurityMode.FOURDH);
+		Assert.assertEquals(DHSession.State.RL44, bobSession.getState());
+		Assert.assertEquals(DHSession.DHVersions.restored(DHSession.SUPPORTED_VERSION_MAX, DHSession.SUPPORTED_VERSION_MAX), bobSession.getCurrent4DHVersions());
+		Assert.assertEquals(DHSession.SUPPORTED_VERSION_MAX, bobSession.getOutgoingOfferedVersion());
+		Assert.assertEquals(DHSession.SUPPORTED_VERSION_MAX, bobSession.getOutgoingAppliedVersion());
+		Assert.assertEquals(DHSession.SUPPORTED_VERSION_MAX, bobSession.getMinimumIncomingAppliedVersion());
+
+		// Assert that Alice did not receive session reject.
+		Assert.assertEquals(0, bobContext.messageQueue.getQueueSize());
+	}
+
+	@Test
+	public void testMinorVersionDowngrade() throws ThreemaException, MissingPublicKeyException, BadMessageException, ForwardSecurityMessageProcessor.MessageTypeNotSupportedInSession, NoSuchFieldException, IllegalAccessException {
+		// Alice and Bob support versions 1.x. Bob will later send a message with 1.0.
+
+		// Alice starts negotiation
+		startNegotiationAlice();
+
+		// Bob processes the init and the text message of alice
+		processReceivedMessages(aliceContext.messageQueue, bobContext);
+
+		// Alice should process the accept message now
+		processReceivedMessages(bobContext.messageQueue, aliceContext);
+
+		// Alice should now have initiated a session with the maximum supported version
+		DHSession aliceSession = aliceContext.dhSessionStore.getBestDHSession(aliceContext.identityStore.getIdentity(), bobContext.identityStore.getIdentity());
+		Assert.assertNotNull(aliceSession);
+		Assert.assertEquals(DHSession.State.RL44, aliceSession.getState());
+		Assert.assertEquals(DHSession.DHVersions.restored(DHSession.SUPPORTED_VERSION_MAX, DHSession.SUPPORTED_VERSION_MAX), aliceSession.getCurrent4DHVersions());
+		Assert.assertEquals(DHSession.SUPPORTED_VERSION_MAX, aliceSession.getOutgoingOfferedVersion());
+		Assert.assertEquals(DHSession.SUPPORTED_VERSION_MAX, aliceSession.getOutgoingAppliedVersion());
+		Assert.assertEquals(DHSession.SUPPORTED_VERSION_MAX, aliceSession.getMinimumIncomingAppliedVersion());
+
+		// Bob also has initiated a session with the maximum supported version
+		DHSession bobSession = bobContext.dhSessionStore.getBestDHSession(bobContext.identityStore.getIdentity(), aliceContext.identityStore.getIdentity());
+		Assert.assertNotNull(bobSession);
+		Assert.assertEquals(DHSession.State.R24, bobSession.getState());
+		Assert.assertEquals(DHSession.DHVersions.restored(DHSession.SUPPORTED_VERSION_MAX, DHSession.SUPPORTED_VERSION_MAX), bobSession.getCurrent4DHVersions());
+		Assert.assertEquals(DHSession.SUPPORTED_VERSION_MAX, bobSession.getOutgoingOfferedVersion());
+		Assert.assertEquals(DHSession.SUPPORTED_VERSION_MAX, bobSession.getOutgoingAppliedVersion());
+		Assert.assertEquals(DHSession.SUPPORTED_VERSION_MIN, bobSession.getMinimumIncomingAppliedVersion());
+
+		// Send message with applied version 0x0100 (1.0)
+		ForwardSecurityEnvelopeMessage message = makeEncapTextMessage(ALICE_MESSAGE_2, aliceContext, DummyUsers.BOB);
+		ForwardSecurityDataMessage data = (ForwardSecurityDataMessage) message.getData();
+		Field appliedVersionField = ForwardSecurityDataMessage.class.getDeclaredField("appliedVersion");
+		appliedVersionField.setAccessible(true);
+		appliedVersionField.setInt(data, 0x0100);
+		aliceContext.messageQueue.enqueue(message);
+
+		// Now Bob processes the text message from Alice. Note that the message should be rejected
+		// and therefore return an empty list.
+		Assert.assertEquals(0, processReceivedMessages(aliceContext.messageQueue, bobContext).size());
+		Assert.assertNull(bobContext.dhSessionStore.getBestDHSession(bobContext.identityStore.getIdentity(), aliceContext.identityStore.getIdentity()));
+
+		// Assert that Alice did receive a session reject
+		Assert.assertEquals(1, bobContext.messageQueue.getQueueSize());
+		Assert.assertNull(processOneReceivedMessage(bobContext.messageQueue, aliceContext));
+		Assert.assertNull(aliceContext.dhSessionStore.getBestDHSession(
+			DummyUsers.ALICE.getIdentity(), DummyUsers.BOB.getIdentity()
+		));
+	}
+
+	@Test
+	public void testDHSessionStates() throws ForwardSecurityMessageProcessor.MessageTypeNotSupportedInSession, ThreemaException, MissingPublicKeyException, BadMessageException {
+		startNegotiationAlice();
+
+		// Assert that Alice has a session with state L20
+		DHSession aliceInitialSession = aliceContext.dhSessionStore.getBestDHSession(
+			DummyUsers.ALICE.getIdentity(), DummyUsers.BOB.getIdentity()
+		);
+		Assert.assertNotNull(aliceInitialSession);
+		Assert.assertEquals(DHSession.State.L20, aliceInitialSession.getState());
+
+		// Bob processes the init and should now have a session in state R24
+		processOneReceivedMessage(aliceContext.messageQueue, bobContext);
+
+		DHSession bobInitialSession = bobContext.dhSessionStore.getBestDHSession(
+			DummyUsers.BOB.getIdentity(), DummyUsers.ALICE.getIdentity()
+		);
+		Assert.assertNotNull(bobInitialSession);
+		Assert.assertEquals(DHSession.State.R24, bobInitialSession.getState());
+
+		// Bob processes the text message
+		receiveAndAssertSingleMessage(aliceContext.messageQueue, bobContext, ALICE_MESSAGE_1, ForwardSecurityMode.TWODH);
+
+		// Alice should now process the accept from Bob and update the state to L44
+		processOneReceivedMessage(bobContext.messageQueue, aliceContext);
+
+		DHSession aliceFinalSession = aliceContext.dhSessionStore.getBestDHSession(
+			DummyUsers.ALICE.getIdentity(), DummyUsers.BOB.getIdentity()
+		);
+		Assert.assertNotNull(aliceFinalSession);
+		Assert.assertEquals(DHSession.State.RL44, aliceFinalSession.getState());
+
+		// Alice sends now again a message to Bob (with 4DH)
+		sendTextMessage(ALICE_MESSAGE_2, aliceContext, DummyUsers.BOB);
+
+		// Bob processes the text message and should update the state to R44
+		receiveAndAssertSingleMessage(aliceContext.messageQueue, bobContext, ALICE_MESSAGE_2, ForwardSecurityMode.FOURDH);
+
+		DHSession bobFinalSession = bobContext.dhSessionStore.getBestDHSession(
+			DummyUsers.BOB.getIdentity(), DummyUsers.ALICE.getIdentity()
+		);
+		Assert.assertNotNull(bobFinalSession);
+		Assert.assertEquals(DHSession.State.RL44, bobFinalSession.getState());
+	}
+
+	@Test
+	public void testRequiredVersionForMessageTypes() throws ThreemaException, MissingPublicKeyException, BadMessageException, ForwardSecurityMessageProcessor.MessageTypeNotSupportedInSession {
+		// Alice starts negotiation with supported version 1.1
+		startNegotiationAlice();
+
+		// Bob handles the init while only supporting version 1.0
+		setSupportedVersionRange(
+			VersionRange.newBuilder()
+				.setMin(Version.V1_0.getNumber())
+				.setMax(Version.V1_0.getNumber())
+				.build()
+		);
+		Assert.assertEquals(Version.V1_0.getNumber(), DHSession.SUPPORTED_VERSION_RANGE.getMax());
+		// Bob processes the messages now. First he processes the init message, and sends back an
+		// accept with support for only v1.0. Then he processes Alice's text message and upgrades
+		// to V1.1 (because we did not mock the announced version).
+		receiveAndAssertSingleMessage(aliceContext.messageQueue, bobContext, ALICE_MESSAGE_1, ForwardSecurityMode.TWODH);
+
+		// Alice should process the accept message now (while supporting version 1.1)
+		setSupportedVersionRange(
+			VersionRange.newBuilder()
+				.setMin(Version.V1_0.getNumber())
+				.setMax(Version.V1_1.getNumber())
+				.build()
+		);
+		processReceivedMessages(bobContext.messageQueue, aliceContext);
+
+		// At this point, Alice has a session with negotiated version 1.0, whereas Bob has
+		// negotiated version 1.1. This does not change, as long as Alice does not process any
+		// message of Bob (which now all would announce version 1.1).
+
+		// Now we check that messages that are not supported in version 1.0 are rejected by the forward security message processor
+		assertMessageTypeNotSupportedForForwardSecurity(new VoipCallOfferMessage(), aliceContext, DummyUsers.BOB);
+		assertMessageTypeNotSupportedForForwardSecurity(new VoipCallRingingMessage(), aliceContext, DummyUsers.BOB);
+		assertMessageTypeNotSupportedForForwardSecurity(new VoipCallAnswerMessage(), aliceContext, DummyUsers.BOB);
+		assertMessageTypeNotSupportedForForwardSecurity(new VoipCallHangupMessage(), aliceContext, DummyUsers.BOB);
+		assertMessageTypeNotSupportedForForwardSecurity(new VoipICECandidatesMessage(), aliceContext, DummyUsers.BOB);
+		assertMessageTypeNotSupportedForForwardSecurity(new DeliveryReceiptMessage(), aliceContext, DummyUsers.BOB);
+		assertMessageTypeNotSupportedForForwardSecurity(new TypingIndicatorMessage(), aliceContext, DummyUsers.BOB);
+		assertMessageTypeNotSupportedForForwardSecurity(new ContactSetProfilePictureMessage(), aliceContext, DummyUsers.BOB);
+		assertMessageTypeNotSupportedForForwardSecurity(new ContactDeleteProfilePictureMessage(), aliceContext, DummyUsers.BOB);
+		assertMessageTypeNotSupportedForForwardSecurity(new ContactRequestProfilePictureMessage(), aliceContext, DummyUsers.BOB);
+	}
+
+	@Test
+	public void testInitialNegotiationVersion() throws ThreemaException, ForwardSecurityMessageProcessor.MessageTypeNotSupportedInSession {
+		// We do not have an initiated session, therefore we expect version 1.0. Therefore all
+		// messages that require version 1.1 or higher should be denied by the forward security
+		// message processor.
+		aliceContext = makeTestUserContext(DummyUsers.ALICE);
+		bobContext = makeTestUserContext(DummyUsers.BOB);
+
+		// Add mutual contacts
+		aliceContext.contactStore.addContact(DummyUsers.getContactForUser(DummyUsers.BOB));
+		bobContext.contactStore.addContact(DummyUsers.getContactForUser(DummyUsers.ALICE));
+
+		// Check that messages that require version 1.1 are rejected
+		assertMessageTypeNotSupportedForForwardSecurity(new VoipCallOfferMessage(), aliceContext, DummyUsers.BOB);
+		assertMessageTypeNotSupportedForForwardSecurity(new VoipCallRingingMessage(), aliceContext, DummyUsers.BOB);
+		assertMessageTypeNotSupportedForForwardSecurity(new VoipCallAnswerMessage(), aliceContext, DummyUsers.BOB);
+		assertMessageTypeNotSupportedForForwardSecurity(new VoipCallHangupMessage(), aliceContext, DummyUsers.BOB);
+		assertMessageTypeNotSupportedForForwardSecurity(new VoipICECandidatesMessage(), aliceContext, DummyUsers.BOB);
+		assertMessageTypeNotSupportedForForwardSecurity(new DeliveryReceiptMessage(), aliceContext, DummyUsers.BOB);
+		assertMessageTypeNotSupportedForForwardSecurity(new TypingIndicatorMessage(), aliceContext, DummyUsers.BOB);
+		assertMessageTypeNotSupportedForForwardSecurity(new ContactSetProfilePictureMessage(), aliceContext, DummyUsers.BOB);
+		assertMessageTypeNotSupportedForForwardSecurity(new ContactDeleteProfilePictureMessage(), aliceContext, DummyUsers.BOB);
+		assertMessageTypeNotSupportedForForwardSecurity(new ContactRequestProfilePictureMessage(), aliceContext, DummyUsers.BOB);
+
+		// Check that messages that are currently not supported to send with forward security are rejected
+		assertMessageTypeNotSupportedForForwardSecurity(new GroupCreateMessage(), aliceContext, DummyUsers.BOB);
+		assertMessageTypeNotSupportedForForwardSecurity(new GroupFileMessage(), aliceContext, DummyUsers.BOB);
+		assertMessageTypeNotSupportedForForwardSecurity(new GroupRequestSyncMessage(), aliceContext, DummyUsers.BOB);
+
+		// Check that messages that are supported starting with version 1.0 are not rejected initially
+		assertMessageTypeSupportedForForwardSecurity(new BoxTextMessage(), aliceContext, DummyUsers.BOB);
+		assertMessageTypeSupportedForForwardSecurity(new BoxLocationMessage(), aliceContext, DummyUsers.BOB);
+		assertMessageTypeSupportedForForwardSecurity(new FileMessage(), aliceContext, DummyUsers.BOB);
+		assertMessageTypeSupportedForForwardSecurity(new BallotCreateMessage(), aliceContext, DummyUsers.BOB);
+		assertMessageTypeSupportedForForwardSecurity(new BallotVoteMessage(), aliceContext, DummyUsers.BOB);
+	}
+
+	private void setupRaceCondition() throws ThreemaException, ForwardSecurityMessageProcessor.MessageTypeNotSupportedInSession {
 		// Start the negotiation on Alice's side, up to the point where the Init and Message are
 		// on the way to Bob, but have not been received by him yet
 		startNegotiationAlice();
@@ -374,7 +721,7 @@ public class ForwardSecurityMessageProcessorTest {
 	}
 
 	@Test
-	public void testRaceConditions() throws ThreemaException, MissingPublicKeyException, BadMessageException {
+	public void testRaceConditions() throws ThreemaException, MissingPublicKeyException, BadMessageException, ForwardSecurityMessageProcessor.MessageTypeNotSupportedInSession {
 		// Repeat the tests several times, as random session IDs are involved
 		for (int i = 0; i < NUM_RANDOM_RUNS; i++) {
 			testRaceCondition1();
@@ -382,7 +729,7 @@ public class ForwardSecurityMessageProcessorTest {
 		}
 	}
 
-	private void testRaceCondition1() throws ThreemaException, MissingPublicKeyException, BadMessageException {
+	private void testRaceCondition1() throws ThreemaException, MissingPublicKeyException, BadMessageException, ForwardSecurityMessageProcessor.MessageTypeNotSupportedInSession {
 		// Set up a race condition: both sides have a 2DH session, but their mutual messages have not arrived yet
 		setupRaceCondition();
 
@@ -410,7 +757,7 @@ public class ForwardSecurityMessageProcessorTest {
 		assertSameBestSession();
 	}
 
-	private void testRaceCondition2() throws ThreemaException, MissingPublicKeyException, BadMessageException {
+	private void testRaceCondition2() throws ThreemaException, MissingPublicKeyException, BadMessageException, ForwardSecurityMessageProcessor.MessageTypeNotSupportedInSession {
 		// Set up a race condition: both sides have a 2DH session, but their mutual messages have not arrived yet
 		setupRaceCondition();
 
@@ -448,22 +795,29 @@ public class ForwardSecurityMessageProcessorTest {
 
 	private List<AbstractMessage> processReceivedMessages(MessageQueue sourceQueue, UserContext recipientContext) throws BadMessageException, ThreemaException, MissingPublicKeyException {
 		List<AbstractMessage> decapsulatedMessages = new LinkedList<>();
-		for (MessageBox box : sourceQueue.getQueue()) {
-			MessageCoder messageCoder = new MessageCoder(recipientContext.contactStore, recipientContext.identityStore);
-			AbstractMessage msg = messageCoder.decode(box, false);
-
-			AbstractMessage decapMsg = recipientContext.fsmp.processEnvelopeMessage(recipientContext.contactStore.getContactForIdentity(msg.getFromIdentity()),
-				(ForwardSecurityEnvelopeMessage) msg);
-
+		while (sourceQueue.getQueueSize() > 0) {
+			AbstractMessage decapMsg = processOneReceivedMessage(sourceQueue, recipientContext);
 			if (decapMsg != null) {
 				decapsulatedMessages.add(decapMsg);
 			}
 		}
-		sourceQueue.flushQueue();
 		return decapsulatedMessages;
 	}
 
-	private AbstractMessage sendTextMessage(String message, UserContext senderContext, DummyUsers.User recipient) throws ThreemaException {
+	private AbstractMessage processOneReceivedMessage(MessageQueue sourceQueue, UserContext recipientContext) throws BadMessageException, ThreemaException, MissingPublicKeyException {
+		MessageBox messageBox = sourceQueue.getQueue().remove(0);
+		Assert.assertNotNull(messageBox);
+
+		MessageCoder messageCoder = new MessageCoder(recipientContext.contactStore, recipientContext.identityStore);
+		AbstractMessage msg = messageCoder.decode(messageBox, false);
+
+		return recipientContext.fsmp.processEnvelopeMessage(
+			Objects.requireNonNull(recipientContext.contactStore.getContactForIdentity(msg.getFromIdentity())),
+			(ForwardSecurityEnvelopeMessage) msg
+		);
+	}
+
+	private AbstractMessage sendTextMessage(String message, UserContext senderContext, DummyUsers.User recipient) throws ThreemaException, ForwardSecurityMessageProcessor.MessageTypeNotSupportedInSession {
 		AbstractMessage encapMessage = makeEncapTextMessage(message, senderContext, recipient);
 		senderContext.messageQueue.enqueue(encapMessage);
 		return encapMessage;
@@ -492,13 +846,35 @@ public class ForwardSecurityMessageProcessorTest {
 		Assert.assertEquals(alicesInitiatorSession.getId(), bobsInitiatorSession.getId());
 	}
 
-	private AbstractMessage makeEncapTextMessage(String text, UserContext senderContext, DummyUsers.User recipient) throws ThreemaException {
+	private ForwardSecurityEnvelopeMessage makeEncapTextMessage(String text, UserContext senderContext, DummyUsers.User recipient) throws ThreemaException, ForwardSecurityMessageProcessor.MessageTypeNotSupportedInSession {
 		BoxTextMessage textMessage = new BoxTextMessage();
 		textMessage.setText(text);
 		textMessage.setToIdentity(recipient.getIdentity());
 		return senderContext.fsmp.makeMessage(DummyUsers.getContactForUser(recipient), textMessage);
 	}
 
+	private void assertMessageTypeSupportedForForwardSecurity(AbstractMessage message, UserContext senderContext, DummyUsers.User recipient) throws ThreemaException, ForwardSecurityMessageProcessor.MessageTypeNotSupportedInSession {
+		// We mock 'getBody' to support incomplete
+		AbstractMessage messageMock = Mockito.spy(message);
+		Mockito.doReturn(new byte[0]).when(messageMock).getBody();
+		Assert.assertNotNull(senderContext.fsmp.makeMessage(
+			DummyUsers.getContactForUser(recipient),
+			messageMock
+		));
+	}
+
+	private void assertMessageTypeNotSupportedForForwardSecurity(AbstractMessage message, UserContext senderContext, DummyUsers.User recipient) throws ThreemaException {
+		boolean messageCreated = true;
+		try {
+			// We expect that this throws an exception as the message type is not supported in the
+			// given session.
+			senderContext.fsmp.makeMessage(DummyUsers.getContactForUser(recipient), message);
+		} catch (ForwardSecurityMessageProcessor.MessageTypeNotSupportedInSession e) {
+			messageCreated = false;
+		}
+		Assert.assertFalse(messageCreated);
+	}
+
 	private UserContext makeTestUserContext(DummyUsers.User user) {
 		UserContext context = new UserContext();
 
@@ -516,6 +892,18 @@ public class ForwardSecurityMessageProcessorTest {
 		return context;
 	}
 
+	/**
+	 * Replaces the static {@link DHSession#SUPPORTED_VERSION_RANGE} with the given range. Note that
+	 * this has only an impact on the initial handshake. A client with a restricted supported
+	 * version range still announces the latest minor version.
+	 * Also, this method sets the version range globally, so that both Alice and Bob are affected.
+	 *
+	 * @param versionRange the new supported version range
+	 */
+	private void setSupportedVersionRange(VersionRange versionRange) {
+		Whitebox.setInternalState(DHSession.class, "SUPPORTED_VERSION_RANGE", versionRange);
+	}
+
 	private static class UserContext {
 		DHSessionStoreInterface dhSessionStore;
 		ContactStore contactStore;
diff --git a/domain/src/test/java/ch/threema/domain/protocol/csp/messages/BadMessageExceptionTest.java b/domain/src/test/java/ch/threema/domain/protocol/csp/messages/BadMessageExceptionTest.java
deleted file mode 100644
index bd9fc50c..00000000
--- a/domain/src/test/java/ch/threema/domain/protocol/csp/messages/BadMessageExceptionTest.java
+++ /dev/null
@@ -1,47 +0,0 @@
-/*  _____ _
- * |_   _| |_  _ _ ___ ___ _ __  __ _
- *   | | | ' \| '_/ -_) -_) '  \/ _` |_
- *   |_| |_||_|_| \___\___|_|_|_\__,_(_)
- *
- * Threema for Android
- * Copyright (c) 2017-2023 Threema GmbH
- *
- * This program is free software: you can redistribute it and/or modify
- * it under the terms of the GNU Affero General Public License, version 3,
- * as published by the Free Software Foundation.
- *
- * This program is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
- * GNU Affero General Public License for more details.
- *
- * You should have received a copy of the GNU Affero General Public License
- * along with this program. If not, see <https://www.gnu.org/licenses/>.
- */
-
-package ch.threema.domain.protocol.csp.messages;
-
-import ch.threema.domain.protocol.csp.messages.BadMessageException;
-import org.junit.Assert;
-import org.junit.Test;
-
-public class BadMessageExceptionTest {
-
-	@Test
-	public void testShouldDrop() {
-		final BadMessageException e1 = new BadMessageException("oh no");
-		Assert.assertEquals(false, e1.shouldDrop());
-
-		final BadMessageException e2 = new BadMessageException("oh no", new Throwable("aiaiaiai"));
-		Assert.assertEquals(false, e2.shouldDrop());
-
-		final BadMessageException e3 = new BadMessageException("oh no", false);
-		Assert.assertEquals(false, e3.shouldDrop());
-
-		final BadMessageException e4 = new BadMessageException("drop me baby", true);
-		Assert.assertEquals(true, e4.shouldDrop());
-
-		final BadMessageException e5 = new BadMessageException("drop me baby", true, new Throwable("yeahyeah"));
-		Assert.assertEquals(true, e5.shouldDrop());
-	}
-}
diff --git a/domain/src/test/java/ch/threema/domain/protocol/csp/messages/fs/ForwardSecurityDataAcceptTest.java b/domain/src/test/java/ch/threema/domain/protocol/csp/messages/fs/ForwardSecurityDataAcceptTest.java
index 0ccdd136..7bf9adba 100644
--- a/domain/src/test/java/ch/threema/domain/protocol/csp/messages/fs/ForwardSecurityDataAcceptTest.java
+++ b/domain/src/test/java/ch/threema/domain/protocol/csp/messages/fs/ForwardSecurityDataAcceptTest.java
@@ -28,27 +28,31 @@ import org.junit.Test;
 
 import ch.threema.domain.fs.DHSessionId;
 import ch.threema.domain.protocol.csp.messages.BadMessageException;
-import ch.threema.protobuf.csp.e2e.fs.ForwardSecurityEnvelope;
+import ch.threema.protobuf.csp.e2e.fs.Accept;
+import ch.threema.protobuf.csp.e2e.fs.Envelope;
+import ch.threema.protobuf.csp.e2e.fs.VersionRange;
 
 public class ForwardSecurityDataAcceptTest {
-	static final DHSessionId TEST_SESSION_ID = new DHSessionId();
-	static final byte[] TEST_EPHEMERAL_PUBLIC_KEY = new byte[] { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31 };
+	private static final DHSessionId TEST_SESSION_ID = new DHSessionId();
+	private static final byte[] TEST_EPHEMERAL_PUBLIC_KEY = new byte[] { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31 };
+	private static final VersionRange SUPPORTED_VERSION_RANGE = VersionRange.getDefaultInstance();
 
-	static final ForwardSecurityEnvelope TEST_PROTOBUF_MESSAGE = ForwardSecurityEnvelope.newBuilder()
+	private static final Envelope TEST_PROTOBUF_MESSAGE = Envelope.newBuilder()
 		.setSessionId(ByteString.copyFrom(TEST_SESSION_ID.get()))
-		.setAccept(ForwardSecurityEnvelope.Accept.newBuilder()
-			.setEphemeralPublicKey(ByteString.copyFrom(TEST_EPHEMERAL_PUBLIC_KEY))
+		.setAccept(Accept.newBuilder()
+			.setFssk(ByteString.copyFrom(TEST_EPHEMERAL_PUBLIC_KEY))
+			.setSupportedVersion(SUPPORTED_VERSION_RANGE)
 			.build())
 		.build();
 
-	static void assertEqualsTestProperties(ForwardSecurityDataAccept data) {
+	private static void assertEqualsTestProperties(ForwardSecurityDataAccept data) {
 		Assert.assertEquals(TEST_SESSION_ID, data.getSessionId());
 		Assert.assertArrayEquals(TEST_EPHEMERAL_PUBLIC_KEY, data.getEphemeralPublicKey());
 	}
 
 	@Test
 	public void testValidData() throws ForwardSecurityData.InvalidEphemeralPublicKeyException {
-		final ForwardSecurityDataAccept data = new ForwardSecurityDataAccept(TEST_SESSION_ID, TEST_EPHEMERAL_PUBLIC_KEY);
+		final ForwardSecurityDataAccept data = new ForwardSecurityDataAccept(TEST_SESSION_ID, SUPPORTED_VERSION_RANGE, TEST_EPHEMERAL_PUBLIC_KEY);
 		assertEqualsTestProperties(data);
 	}
 
@@ -61,8 +65,8 @@ public class ForwardSecurityDataAcceptTest {
 
 	@Test
 	public void testToProtobufMessage() throws ForwardSecurityData.InvalidEphemeralPublicKeyException {
-		final ForwardSecurityDataAccept data = new ForwardSecurityDataAccept(TEST_SESSION_ID, TEST_EPHEMERAL_PUBLIC_KEY);
-		final ForwardSecurityEnvelope generatedProtobufMessage = data.toProtobufMessage();
+		final ForwardSecurityDataAccept data = new ForwardSecurityDataAccept(TEST_SESSION_ID, SUPPORTED_VERSION_RANGE, TEST_EPHEMERAL_PUBLIC_KEY);
+		final Envelope generatedProtobufMessage = data.toProtobufMessage();
 
 		Assert.assertEquals(TEST_PROTOBUF_MESSAGE, generatedProtobufMessage);
 	}
diff --git a/domain/src/test/java/ch/threema/domain/protocol/csp/messages/fs/ForwardSecurityDataInitTest.java b/domain/src/test/java/ch/threema/domain/protocol/csp/messages/fs/ForwardSecurityDataInitTest.java
index 68d67ba9..c151b443 100644
--- a/domain/src/test/java/ch/threema/domain/protocol/csp/messages/fs/ForwardSecurityDataInitTest.java
+++ b/domain/src/test/java/ch/threema/domain/protocol/csp/messages/fs/ForwardSecurityDataInitTest.java
@@ -28,27 +28,31 @@ import org.junit.Test;
 
 import ch.threema.domain.fs.DHSessionId;
 import ch.threema.domain.protocol.csp.messages.BadMessageException;
-import ch.threema.protobuf.csp.e2e.fs.ForwardSecurityEnvelope;
+import ch.threema.protobuf.csp.e2e.fs.Envelope;
+import ch.threema.protobuf.csp.e2e.fs.Init;
+import ch.threema.protobuf.csp.e2e.fs.VersionRange;
 
 public class ForwardSecurityDataInitTest {
-	static final DHSessionId TEST_SESSION_ID = new DHSessionId();
-	static final byte[] TEST_EPHEMERAL_PUBLIC_KEY = new byte[] { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31 };
+	private static final DHSessionId TEST_SESSION_ID = new DHSessionId();
+	private static final byte[] TEST_EPHEMERAL_PUBLIC_KEY = new byte[] { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31 };
+	private static final VersionRange SUPPORTED_VERSION_RANGE = VersionRange.getDefaultInstance();
 
-	static final ForwardSecurityEnvelope TEST_PROTOBUF_MESSAGE = ForwardSecurityEnvelope.newBuilder()
+	private static final Envelope TEST_PROTOBUF_MESSAGE = Envelope.newBuilder()
 		.setSessionId(ByteString.copyFrom(TEST_SESSION_ID.get()))
-		.setInit(ForwardSecurityEnvelope.Init.newBuilder()
-			.setEphemeralPublicKey(ByteString.copyFrom(TEST_EPHEMERAL_PUBLIC_KEY))
+		.setInit(Init.newBuilder()
+			.setFssk(ByteString.copyFrom(TEST_EPHEMERAL_PUBLIC_KEY))
+			.setSupportedVersion(SUPPORTED_VERSION_RANGE)
 			.build())
 		.build();
 
-	static void assertEqualsTestProperties(ForwardSecurityDataInit data) {
+	private static void assertEqualsTestProperties(ForwardSecurityDataInit data) {
 		Assert.assertEquals(TEST_SESSION_ID, data.getSessionId());
 		Assert.assertArrayEquals(TEST_EPHEMERAL_PUBLIC_KEY, data.getEphemeralPublicKey());
 	}
 
 	@Test
 	public void testValidData() throws ForwardSecurityData.InvalidEphemeralPublicKeyException {
-		final ForwardSecurityDataInit data = new ForwardSecurityDataInit(TEST_SESSION_ID, TEST_EPHEMERAL_PUBLIC_KEY);
+		final ForwardSecurityDataInit data = new ForwardSecurityDataInit(TEST_SESSION_ID, SUPPORTED_VERSION_RANGE, TEST_EPHEMERAL_PUBLIC_KEY);
 		assertEqualsTestProperties(data);
 	}
 
@@ -61,8 +65,8 @@ public class ForwardSecurityDataInitTest {
 
 	@Test
 	public void testToProtobufMessage() throws ForwardSecurityData.InvalidEphemeralPublicKeyException {
-		final ForwardSecurityDataInit data = new ForwardSecurityDataInit(TEST_SESSION_ID, TEST_EPHEMERAL_PUBLIC_KEY);
-		final ForwardSecurityEnvelope generatedProtobufMessage = data.toProtobufMessage();
+		final ForwardSecurityDataInit data = new ForwardSecurityDataInit(TEST_SESSION_ID, SUPPORTED_VERSION_RANGE, TEST_EPHEMERAL_PUBLIC_KEY);
+		final Envelope generatedProtobufMessage = data.toProtobufMessage();
 
 		Assert.assertEquals(TEST_PROTOBUF_MESSAGE, generatedProtobufMessage);
 	}
diff --git a/domain/src/test/java/ch/threema/domain/protocol/csp/messages/fs/ForwardSecurityDataMessageTest.java b/domain/src/test/java/ch/threema/domain/protocol/csp/messages/fs/ForwardSecurityDataMessageTest.java
index e990bcbb..9a37c738 100644
--- a/domain/src/test/java/ch/threema/domain/protocol/csp/messages/fs/ForwardSecurityDataMessageTest.java
+++ b/domain/src/test/java/ch/threema/domain/protocol/csp/messages/fs/ForwardSecurityDataMessageTest.java
@@ -28,32 +28,39 @@ import org.junit.Test;
 
 import ch.threema.domain.fs.DHSessionId;
 import ch.threema.domain.protocol.csp.messages.BadMessageException;
-import ch.threema.protobuf.csp.e2e.fs.ForwardSecurityEnvelope;
+import ch.threema.protobuf.csp.e2e.fs.Encapsulated;
+import ch.threema.protobuf.csp.e2e.fs.Envelope;
+import ch.threema.protobuf.csp.e2e.fs.Version;
 
 public class ForwardSecurityDataMessageTest {
-	static final DHSessionId TEST_SESSION_ID = new DHSessionId();
-	static final ForwardSecurityEnvelope.Message.DHType TEST_DH_TYPE = ForwardSecurityEnvelope.Message.DHType.FOURDH;
-	static final long TEST_COUNTER = 1;
-	static final byte[] TEST_MESSAGE = new byte[] { 0x01, (byte)0x48, (byte)0x65, (byte)0x6c, (byte)0x6c, (byte)0x6f};
+	private static final DHSessionId TEST_SESSION_ID = new DHSessionId();
+	private static final Encapsulated.DHType TEST_DH_TYPE = Encapsulated.DHType.FOURDH;
+	private static final long TEST_COUNTER = 1;
+	private static final byte[] TEST_MESSAGE = new byte[] { 0x01, (byte)0x48, (byte)0x65, (byte)0x6c, (byte)0x6c, (byte)0x6f};
 
-	static final ForwardSecurityEnvelope TEST_PROTOBUF_MESSAGE = ForwardSecurityEnvelope.newBuilder()
+	private static final Envelope TEST_PROTOBUF_MESSAGE = Envelope.newBuilder()
 		.setSessionId(ByteString.copyFrom(TEST_SESSION_ID.get()))
-		.setMessage(ForwardSecurityEnvelope.Message.newBuilder()
+		.setEncapsulated(Encapsulated.newBuilder()
 			.setDhType(TEST_DH_TYPE)
 			.setCounter(TEST_COUNTER)
-			.setMessage(ByteString.copyFrom(TEST_MESSAGE))
+			.setEncryptedInner(ByteString.copyFrom(TEST_MESSAGE))
+			.setOfferedVersion(Version.V1_1_VALUE)
+			.setAppliedVersion(Version.V1_0_VALUE)
 			.build())
 		.build();
 
-	static void assertEqualsTestProperties(ForwardSecurityDataMessage data) {
+	private static void assertEqualsTestProperties(ForwardSecurityDataMessage data) {
 		Assert.assertEquals(TEST_SESSION_ID, data.getSessionId());
 		Assert.assertEquals(TEST_DH_TYPE, data.getType());
 		Assert.assertEquals(TEST_COUNTER, data.getCounter());
+		Assert.assertEquals(Version.V1_1_VALUE, data.getOfferedVersion());
+		Assert.assertEquals(Version.V1_0_VALUE, data.getAppliedVersion());
 		Assert.assertArrayEquals(TEST_MESSAGE, data.getMessage());
 	}
 
 	public ForwardSecurityDataMessage makeForwardSecurityDataMessage() {
-		return new ForwardSecurityDataMessage(TEST_SESSION_ID, TEST_DH_TYPE, TEST_COUNTER, TEST_MESSAGE);
+		return new ForwardSecurityDataMessage(
+			TEST_SESSION_ID, Encapsulated.DHType.FOURDH, TEST_COUNTER, Version.V1_1_VALUE, Version.V1_0_VALUE, TEST_MESSAGE);
 	}
 
 	@Test
@@ -72,7 +79,7 @@ public class ForwardSecurityDataMessageTest {
 	@Test
 	public void testToProtobufMessage() {
 		final ForwardSecurityDataMessage data = makeForwardSecurityDataMessage();
-		final ForwardSecurityEnvelope generatedProtobufMessage = data.toProtobufMessage();
+		final Envelope generatedProtobufMessage = data.toProtobufMessage();
 
 		Assert.assertEquals(TEST_PROTOBUF_MESSAGE, generatedProtobufMessage);
 	}
diff --git a/domain/src/test/java/ch/threema/domain/protocol/csp/messages/fs/ForwardSecurityDataRejectTest.java b/domain/src/test/java/ch/threema/domain/protocol/csp/messages/fs/ForwardSecurityDataRejectTest.java
index bf272ea2..6a8e37c8 100644
--- a/domain/src/test/java/ch/threema/domain/protocol/csp/messages/fs/ForwardSecurityDataRejectTest.java
+++ b/domain/src/test/java/ch/threema/domain/protocol/csp/messages/fs/ForwardSecurityDataRejectTest.java
@@ -29,22 +29,23 @@ import org.junit.Test;
 import ch.threema.domain.fs.DHSessionId;
 import ch.threema.domain.models.MessageId;
 import ch.threema.domain.protocol.csp.messages.BadMessageException;
-import ch.threema.protobuf.csp.e2e.fs.ForwardSecurityEnvelope;
+import ch.threema.protobuf.csp.e2e.fs.Envelope;
+import ch.threema.protobuf.csp.e2e.fs.Reject;
 
 public class ForwardSecurityDataRejectTest {
-	static final DHSessionId TEST_SESSION_ID = new DHSessionId();
-	static final MessageId TEST_REJECTED_MESSAGE_ID = new MessageId();
-	static final ForwardSecurityEnvelope.Reject.Cause TEST_CAUSE = ForwardSecurityEnvelope.Reject.Cause.UNKNOWN_SESSION;
+	private static final DHSessionId TEST_SESSION_ID = new DHSessionId();
+	private static final MessageId TEST_REJECTED_MESSAGE_ID = new MessageId();
+	private static final Reject.Cause TEST_CAUSE = Reject.Cause.UNKNOWN_SESSION;
 
-	static final ForwardSecurityEnvelope TEST_PROTOBUF_MESSAGE = ForwardSecurityEnvelope.newBuilder()
+	private static final Envelope TEST_PROTOBUF_MESSAGE = Envelope.newBuilder()
 		.setSessionId(ByteString.copyFrom(TEST_SESSION_ID.get()))
-		.setReject(ForwardSecurityEnvelope.Reject.newBuilder()
-			.setRejectedMessageId(TEST_REJECTED_MESSAGE_ID.getMessageIdLong())
+		.setReject(Reject.newBuilder()
+			.setRejectedEncapsulatedMessageId(TEST_REJECTED_MESSAGE_ID.getMessageIdLong())
 			.setCause(TEST_CAUSE)
 			.build())
 		.build();
 
-	static void assertEqualsTestProperties(ForwardSecurityDataReject data) {
+	private static void assertEqualsTestProperties(ForwardSecurityDataReject data) {
 		Assert.assertEquals(TEST_SESSION_ID, data.getSessionId());
 		Assert.assertEquals(TEST_REJECTED_MESSAGE_ID, data.getRejectedApiMessageId());
 		Assert.assertEquals(TEST_CAUSE, data.getCause());
@@ -66,7 +67,7 @@ public class ForwardSecurityDataRejectTest {
 	@Test
 	public void testToProtobufMessage() {
 		final ForwardSecurityDataReject data = new ForwardSecurityDataReject(TEST_SESSION_ID, TEST_REJECTED_MESSAGE_ID, TEST_CAUSE);
-		final ForwardSecurityEnvelope generatedProtobufMessage = data.toProtobufMessage();
+		final Envelope generatedProtobufMessage = data.toProtobufMessage();
 
 		Assert.assertEquals(TEST_PROTOBUF_MESSAGE, generatedProtobufMessage);
 	}
diff --git a/domain/src/test/java/ch/threema/domain/protocol/csp/messages/fs/ForwardSecurityDataTerminateTest.java b/domain/src/test/java/ch/threema/domain/protocol/csp/messages/fs/ForwardSecurityDataTerminateTest.java
index 59854db2..ced0fba1 100644
--- a/domain/src/test/java/ch/threema/domain/protocol/csp/messages/fs/ForwardSecurityDataTerminateTest.java
+++ b/domain/src/test/java/ch/threema/domain/protocol/csp/messages/fs/ForwardSecurityDataTerminateTest.java
@@ -28,24 +28,26 @@ import org.junit.Test;
 
 import ch.threema.domain.fs.DHSessionId;
 import ch.threema.domain.protocol.csp.messages.BadMessageException;
-import ch.threema.protobuf.csp.e2e.fs.ForwardSecurityEnvelope;
+import ch.threema.protobuf.csp.e2e.fs.Envelope;
+import ch.threema.protobuf.csp.e2e.fs.Terminate;
 
 public class ForwardSecurityDataTerminateTest {
-	static final DHSessionId TEST_SESSION_ID = new DHSessionId();
+	private static final DHSessionId TEST_SESSION_ID = new DHSessionId();
+	private static final Terminate.Cause TEST_CAUSE = Terminate.Cause.UNKNOWN_SESSION;
 
-	static final ForwardSecurityEnvelope TEST_PROTOBUF_MESSAGE = ForwardSecurityEnvelope.newBuilder()
+	private static final Envelope TEST_PROTOBUF_MESSAGE = Envelope.newBuilder()
 		.setSessionId(ByteString.copyFrom(TEST_SESSION_ID.get()))
-		.setTerminate(ForwardSecurityEnvelope.Terminate.newBuilder()
+		.setTerminate(Terminate.newBuilder()
 			.build())
 		.build();
 
-	static void assertEqualsTestProperties(ForwardSecurityDataTerminate data) {
+	private static void assertEqualsTestProperties(ForwardSecurityDataTerminate data) {
 		Assert.assertEquals(TEST_SESSION_ID, data.getSessionId());
 	}
 
 	@Test
 	public void testValidData() {
-		final ForwardSecurityDataTerminate data = new ForwardSecurityDataTerminate(TEST_SESSION_ID);
+		final ForwardSecurityDataTerminate data = new ForwardSecurityDataTerminate(TEST_SESSION_ID, TEST_CAUSE);
 		assertEqualsTestProperties(data);
 	}
 
@@ -58,8 +60,8 @@ public class ForwardSecurityDataTerminateTest {
 
 	@Test
 	public void testToProtobufMessage() {
-		final ForwardSecurityDataTerminate data = new ForwardSecurityDataTerminate(TEST_SESSION_ID);
-		final ForwardSecurityEnvelope generatedProtobufMessage = data.toProtobufMessage();
+		final ForwardSecurityDataTerminate data = new ForwardSecurityDataTerminate(TEST_SESSION_ID, TEST_CAUSE);
+		final Envelope generatedProtobufMessage = data.toProtobufMessage();
 
 		Assert.assertEquals(TEST_PROTOBUF_MESSAGE, generatedProtobufMessage);
 	}
diff --git a/domain/src/test/java/ch/threema/domain/protocol/csp/messages/fs/ForwardSecurityMessageTest.java b/domain/src/test/java/ch/threema/domain/protocol/csp/messages/fs/ForwardSecurityMessageTest.java
index 5715e2f4..f7c2012f 100644
--- a/domain/src/test/java/ch/threema/domain/protocol/csp/messages/fs/ForwardSecurityMessageTest.java
+++ b/domain/src/test/java/ch/threema/domain/protocol/csp/messages/fs/ForwardSecurityMessageTest.java
@@ -36,11 +36,11 @@ import static ch.threema.domain.testhelpers.TestHelpers.setMessageDefaults;
 
 public class ForwardSecurityMessageTest {
 
-	static ForwardSecurityData getDataTestInstance() {
+	private static ForwardSecurityData getDataTestInstance() {
 		return new ForwardSecurityDataMessageTest().makeForwardSecurityDataMessage();
 	}
 
-	static ForwardSecurityEnvelopeMessage getEnvelopeMessageTestInstance() {
+	private static ForwardSecurityEnvelopeMessage getEnvelopeMessageTestInstance() {
 		final ForwardSecurityEnvelopeMessage msg = new ForwardSecurityEnvelopeMessage(getDataTestInstance());
 		setMessageDefaults(msg);
 		return msg;
@@ -59,6 +59,6 @@ public class ForwardSecurityMessageTest {
 		final AbstractMessage decodedMessage = decodeMessageFromBox(boxedMessage);
 		Assert.assertTrue(decodedMessage instanceof ForwardSecurityEnvelopeMessage);
 		final ForwardSecurityEnvelopeMessage msg = (ForwardSecurityEnvelopeMessage) decodedMessage;
-		Assert.assertEquals(msg.getData(), getDataTestInstance());
+		Assert.assertArrayEquals(msg.getData().toProtobufBytes(), getDataTestInstance().toProtobufBytes());
 	}
 }
diff --git a/domain/src/test/java/ch/threema/domain/protocol/csp/messages/protobuf/AbstractProtobufMessageTest.java b/domain/src/test/java/ch/threema/domain/protocol/csp/messages/protobuf/AbstractProtobufMessageTest.java
index 99310e8b..c3d494a6 100644
--- a/domain/src/test/java/ch/threema/domain/protocol/csp/messages/protobuf/AbstractProtobufMessageTest.java
+++ b/domain/src/test/java/ch/threema/domain/protocol/csp/messages/protobuf/AbstractProtobufMessageTest.java
@@ -24,6 +24,9 @@ package ch.threema.domain.protocol.csp.messages.protobuf;
 import org.junit.Test;
 import org.mockito.Mockito;
 
+import androidx.annotation.Nullable;
+import ch.threema.protobuf.csp.e2e.fs.Version;
+
 import static org.junit.Assert.*;
 
 public class AbstractProtobufMessageTest {
@@ -39,7 +42,13 @@ public class AbstractProtobufMessageTest {
 			public int getType() {
 				return 0;
 			}
-		};
+
+				@Nullable
+				@Override
+				public Version getMinimumRequiredForwardSecurityVersion() {
+					return null;
+				}
+			};
 
 		assertArrayEquals(
 			protobufDataStub.toProtobufBytes(),
diff --git a/domain/src/main/java/ch/threema/domain/stores/InMemoryDHSessionStore.java b/domain/src/test/java/ch/threema/domain/stores/InMemoryDHSessionStore.java
similarity index 93%
rename from domain/src/main/java/ch/threema/domain/stores/InMemoryDHSessionStore.java
rename to domain/src/test/java/ch/threema/domain/stores/InMemoryDHSessionStore.java
index 8a2f1e52..07d77436 100644
--- a/domain/src/main/java/ch/threema/domain/stores/InMemoryDHSessionStore.java
+++ b/domain/src/test/java/ch/threema/domain/stores/InMemoryDHSessionStore.java
@@ -25,6 +25,7 @@ import java.util.Iterator;
 import java.util.LinkedList;
 import java.util.List;
 
+import androidx.annotation.NonNull;
 import androidx.annotation.Nullable;
 import ch.threema.domain.fs.DHSession;
 import ch.threema.domain.fs.DHSessionId;
@@ -122,8 +123,13 @@ public class InMemoryDHSessionStore implements DHSessionStoreInterface {
 		return numDeleted;
 	}
 
+	@Override
+	public void setDHSessionStoreErrorHandler(@NonNull DHSessionStoreErrorHandler errorHandler) {
+		// Nothing to do here
+	}
+
 	@Override
 	public void executeNull() {
-		// nothing to do
+		// Nothing to do as the in memory dh session store does not support upgrades and downgrades
 	}
 }
