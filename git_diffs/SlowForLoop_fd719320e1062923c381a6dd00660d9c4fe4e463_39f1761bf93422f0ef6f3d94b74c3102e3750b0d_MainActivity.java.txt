diff --git a/gen/com/color/colornamer/R.java b/gen/com/color/colornamer/R.java
index 7f5103c..75151d4 100644
--- a/gen/com/color/colornamer/R.java
+++ b/gen/com/color/colornamer/R.java
@@ -38,15 +38,15 @@ public final class R {
         public static final int hex_alert_content=0x7f080019;
         public static final int info_text=0x7f080008;
         public static final int main_layout=0x7f080009;
-        public static final int menu_camera=0x7f080024;
+        public static final int menu_camera=0x7f080025;
         public static final int menu_chooser=0x7f080020;
-        public static final int menu_group=0x7f080023;
-        public static final int menu_help=0x7f080022;
-        public static final int menu_info=0x7f080021;
-        public static final int menu_search=0x7f080025;
+        public static final int menu_group=0x7f080024;
+        public static final int menu_help=0x7f080023;
+        public static final int menu_info=0x7f080022;
+        public static final int menu_search=0x7f080026;
         public static final int menu_settings=0x7f080027;
         public static final int menu_share=0x7f08001f;
-        public static final int menu_wallpaper=0x7f080026;
+        public static final int menu_wallpaper=0x7f080021;
         public static final int play_pause_button=0x7f080006;
         public static final int randomButton=0x7f080011;
         public static final int result1_textview=0x7f08000d;
@@ -94,7 +94,7 @@ public final class R {
         public static final int color_picker_slider_text_short=0x7f050013;
         public static final int edit_search=0x7f05000f;
         public static final int empty_result_string=0x7f050011;
-        public static final int enter_hex=0x7f050018;
+        public static final int enter_hex=0x7f050019;
         public static final int help_text=0x7f05000b;
         public static final int info_text=0x7f05000a;
         public static final int menu_camera=0x7f050009;
@@ -103,16 +103,17 @@ public final class R {
         public static final int menu_info=0x7f050004;
         public static final int menu_search=0x7f05000d;
         public static final int menu_settings=0x7f050002;
-        public static final int menu_share=0x7f05001c;
+        public static final int menu_share=0x7f05001d;
         public static final int menu_wallpaper=0x7f050003;
-        public static final int message_hex=0x7f050019;
-        public static final int share_title=0x7f05001b;
+        public static final int message_hex=0x7f05001a;
+        public static final int share_title=0x7f05001c;
         public static final int title_activity_help=0x7f05000c;
         public static final int title_activity_info=0x7f050008;
         public static final int title_activity_main=0x7f050001;
         public static final int title_activity_menu=0x7f050007;
         public static final int title_activity_search=0x7f05000e;
-        public static final int title_hex=0x7f05001a;
+        public static final int title_hex=0x7f05001b;
+        public static final int wallpaper_color=0x7f050018;
     }
     public static final class style {
         /** 
diff --git a/src/com/color/colornamer/CameraActivity.java b/src/com/color/colornamer/CameraActivity.java
index c132190..274b45b 100644
--- a/src/com/color/colornamer/CameraActivity.java
+++ b/src/com/color/colornamer/CameraActivity.java
@@ -1,15 +1,19 @@
 package com.color.colornamer;
 
+import java.io.IOException;
+
 import com.color.colornamer.Preview.PreviewListener;
 
+import android.app.WallpaperManager;
 import android.content.Intent;
 import android.graphics.Bitmap;
 import android.graphics.Canvas;
 import android.graphics.Color;
 import android.graphics.Matrix;
 import android.os.Bundle;
-import android.util.Log;
+import android.support.v4.app.DialogFragment;
 import android.util.TypedValue;
+import android.view.Gravity;
 import android.view.Menu;
 import android.view.MotionEvent;
 import android.view.View;
@@ -19,10 +23,11 @@ import android.widget.Button;
 import android.widget.FrameLayout;
 import android.widget.LinearLayout;
 import android.widget.TextView;
+import android.widget.Toast;
 
 
 //class to hold the camera preview & manage the layouts & callbacks associated with the camera fragment
-public class CameraActivity extends MenuActivity implements PreviewListener, OnTouchListener {
+public class CameraActivity extends MenuActivity implements PreviewListener, OnTouchListener, ColorViewDialog.ColorViewDialogListener {
 	
 	private Menu menu;
 	private Preview mPreview;
@@ -53,7 +58,7 @@ public class CameraActivity extends MenuActivity implements PreviewListener, OnT
 		super.onCreate(savedInstanceState);
 		
 		// The camera activity is the main activity.  So, we need to default to the chooser activity if the camera doesn't exist.
-		if (!this.hasCamera) {
+		if (!this.hasCamera || this.sdk < 9) {
 			Intent intent = new Intent(this, MainActivity.class);
 			startActivity(intent);
 			this.finish();
@@ -76,7 +81,7 @@ public class CameraActivity extends MenuActivity implements PreviewListener, OnT
 					pause();
 					dialog.setDestroyCallback(CameraActivity.this);
 				}
-				dialog.setColor(Color.parseColor(currentColor), "You chose " + currentColor);
+				dialog.setColor(currentColor, "You chose " + currentColor);
 				dialog.show(getSupportFragmentManager(), "color_view");
 			}  	
         });
@@ -88,7 +93,7 @@ public class CameraActivity extends MenuActivity implements PreviewListener, OnT
 					pause();
 					dialog.setDestroyCallback(CameraActivity.this);
 				}
-				dialog.setColor(Color.parseColor(currentNamedColor), cdata.getColorName(currentNamedColor) + " (" + currentNamedColor  + ")");
+				dialog.setColor(currentNamedColor, cdata.getColorName(currentNamedColor) + " (" + currentNamedColor  + ")");
 				dialog.show(getSupportFragmentManager(), "color_view");
 			}
         });
@@ -323,7 +328,34 @@ public class CameraActivity extends MenuActivity implements PreviewListener, OnT
 		return false;
 	}
 
-	
+	//set the wallpaper to be the named color
+    @Override
+    protected void wallpaper() {
+   		Bitmap bitmap = sharer.createBitmap(currentNamedColor);
+   		WallpaperManager wm = WallpaperManager.getInstance(this.getApplicationContext());
+   		try {
+			wm.setBitmap(bitmap);
+    		Toast toast = Toast.makeText(this, "Wallpaper set", Toast.LENGTH_SHORT);
+    		toast.setGravity(Gravity.CENTER, 0, 0);
+    		toast.show();
+		} catch (IOException e) {
+			e.printStackTrace();
+		}
+    }
+    
+    @Override
+	public void onColorDialogPositiveClick(DialogFragment dialog, String color) {
+		Bitmap bitmap = sharer.createBitmap(color);
+		WallpaperManager wm = WallpaperManager.getInstance(this.getApplicationContext());
+		try {
+			wm.setBitmap(bitmap);
+    		Toast toast = Toast.makeText(this, "Wallpaper set", Toast.LENGTH_SHORT);
+    		toast.setGravity(Gravity.CENTER, 0, 0);
+    		toast.show();
+		} catch (IOException e) {
+			e.printStackTrace();
+		}
+	}
     
 
 }
diff --git a/src/com/color/colornamer/ColorViewDialog.java b/src/com/color/colornamer/ColorViewDialog.java
index eae6888..3721327 100644
--- a/src/com/color/colornamer/ColorViewDialog.java
+++ b/src/com/color/colornamer/ColorViewDialog.java
@@ -1,9 +1,10 @@
 package com.color.colornamer;
 
+import android.app.Activity;
 import android.app.AlertDialog;
 import android.app.Dialog;
-import android.content.Context;
 import android.content.DialogInterface;
+import android.graphics.Color;
 import android.os.Bundle;
 import android.support.v4.app.DialogFragment;
 import android.view.LayoutInflater;
@@ -11,14 +12,34 @@ import android.view.View;
 
 public class ColorViewDialog extends DialogFragment {
 	
-	private int color;
+	private String color;
 	private String title;
 	private CameraActivity context;
-
+	
+	public interface ColorViewDialogListener {
+		public void onColorDialogPositiveClick(DialogFragment dialog, String color);
+	}
+	
+	ColorViewDialogListener listener;
+	
+	@Override
+    public void onAttach(Activity activity) {
+        super.onAttach(activity);
+        // Verify that the host activity implements the callback interface
+        try {
+            // Instantiate the EnterColorListener so we can send events to the host
+            listener = (ColorViewDialogListener) activity;
+        } catch (ClassCastException e) {
+            // The activity doesn't implement the interface, throw exception
+            throw new ClassCastException(activity.toString()
+                    + " must implement EnterColorListener");
+        }
+    }
+	
 	public ColorViewDialog() {
 	}
 	
-	public void setColor(int color, String title) {
+	public void setColor(String color, String title) {
 		this.color = color;
 		this.title = title;
 	}
@@ -28,13 +49,19 @@ public class ColorViewDialog extends DialogFragment {
         AlertDialog.Builder builder = new AlertDialog.Builder(getActivity());
         LayoutInflater inflater = getActivity().getLayoutInflater();
         View view = inflater.inflate(R.layout.color_alert_content, null);
-        view.findViewById(R.id.color_alert_layout).setBackgroundColor(color);
+        view.findViewById(R.id.color_alert_layout).setBackgroundColor(Color.parseColor(color));
         builder.setView(view);
+        builder.setPositiveButton(R.string.wallpaper_color, new DialogInterface.OnClickListener() {
+        		public void onClick(DialogInterface dialog, int id) {
+        			listener.onColorDialogPositiveClick(ColorViewDialog.this, color);
+        			dialog.dismiss();
+        		}
+        	});
         builder.setNegativeButton(R.string.cancel_color, new DialogInterface.OnClickListener() {
-                   public void onClick(DialogInterface dialog, int id) {
-                       dialog.cancel();
-                   }
-               }).setTitle(title);
+            public void onClick(DialogInterface dialog, int id) {
+                 dialog.cancel();
+            }
+        	}).setTitle(title);
         // Create the AlertDialog object and return it
         return builder.create();
     }
@@ -50,4 +77,5 @@ public class ColorViewDialog extends DialogFragment {
 		}
 		super.onDestroy();
 	}
+
 }
diff --git a/src/com/color/colornamer/MainActivity.java b/src/com/color/colornamer/MainActivity.java
index fbe5a64..51a278f 100644
--- a/src/com/color/colornamer/MainActivity.java
+++ b/src/com/color/colornamer/MainActivity.java
@@ -29,15 +29,15 @@ import android.widget.Toast;
 
 
 /*
- * TODO: make a new menu with dark icons for matt's phone
  * TODO: saving colors to lists
- * TODO: share, set wallpaper options from colordialog
- * 2.2: set color as wallpaper, share to google+ and google drive type things
+ * TODO: share from colordialog
+ * 2.2: set color as wallpaper (including from colordialog), share to google+ and google drive type things
  * 2.0: Camera input & camera sharing
  * 1.2: share colors, bug fix formatting for old devices
  * 1.1: instant search, full sized color, minor bug fixes with the keyboard, formatting for small devices
  */
-public class MainActivity extends MenuActivity implements OnTouchListener, OnSeekBarChangeListener, EnterColorDialog.EnterColorListener, OnItemClickListener {
+public class MainActivity extends MenuActivity implements OnTouchListener, OnSeekBarChangeListener, EnterColorDialog.EnterColorListener, 
+														  OnItemClickListener, ColorViewDialog.ColorViewDialogListener {
 	public final static String EXTRA_MESSAGE = "com.example.colorpicker.MESSAGE";
 	public final static String EXTRA_COLOR_ENTERED = "com.example.colorpicker.COLOR_ENTERED";
 	public final static String EXTRA_MESSAGE_RESULT = "com.example.colorpicker.MESSAGE_RESULT";
@@ -79,7 +79,7 @@ public class MainActivity extends MenuActivity implements OnTouchListener, OnSee
 			public void onClick(View arg0) {
 				if (hasColor) {
 					ColorViewDialog dialog = new ColorViewDialog();
-					dialog.setColor(Color.parseColor(currentNamedColor), cdata.getColorName(currentNamedColor) + " (" + currentNamedColor  + ")");
+					dialog.setColor(currentNamedColor, cdata.getColorName(currentNamedColor) + " (" + currentNamedColor  + ")");
 					dialog.show(getSupportFragmentManager(), "color_view");
 				}
 			}
@@ -89,7 +89,7 @@ public class MainActivity extends MenuActivity implements OnTouchListener, OnSee
 			public void onClick(View v) {
 				if (hasColor) {
 					ColorViewDialog dialog = new ColorViewDialog();
-					dialog.setColor(Color.parseColor(currentColor), "You picked " + currentColor);
+					dialog.setColor(currentColor, "You picked " + currentColor);
 					dialog.show(getSupportFragmentManager(), "color_view");
 				}
 			}  	
@@ -272,7 +272,7 @@ public class MainActivity extends MenuActivity implements OnTouchListener, OnSee
     @Override
     protected void share() {
     	if (this.hasColor) {
-    		Bitmap bitmap = createBitmap();
+    		Bitmap bitmap = sharer.createBitmap(currentNamedColor);
     		String name = cdata.getColorName(currentNamedColor);
     		sharer.Share(bitmap, name, currentNamedColor);
     	} else {
@@ -286,7 +286,7 @@ public class MainActivity extends MenuActivity implements OnTouchListener, OnSee
     @Override
     protected void wallpaper() {
     	if (this.hasColor) {
-    		Bitmap bitmap = createBitmap();
+    		Bitmap bitmap = sharer.createBitmap(currentNamedColor);
     		WallpaperManager wm = WallpaperManager.getInstance(this.getApplicationContext());
     		try {
 				wm.setBitmap(bitmap);
@@ -302,15 +302,21 @@ public class MainActivity extends MenuActivity implements OnTouchListener, OnSee
     		toast.show();
     	}
     }
-    
-    // creates a bitmap of the current color
-    private Bitmap createBitmap() {
-    	int size = 512;
-		int[] color = new int[size*size];
-		int colorValue = Color.parseColor(currentNamedColor);
-		for (int i = 0; i < size*size; i++) {
-			color[i] = colorValue;
+
+	@Override
+	public void onColorDialogPositiveClick(DialogFragment dialog, String color) {
+		Bitmap bitmap = sharer.createBitmap(color);
+		WallpaperManager wm = WallpaperManager.getInstance(this.getApplicationContext());
+		try {
+			wm.setBitmap(bitmap);
+    		Toast toast = Toast.makeText(this, "Wallpaper set", Toast.LENGTH_SHORT);
+    		toast.setGravity(Gravity.CENTER, 0, 0);
+    		toast.show();
+		} catch (IOException e) {
+			e.printStackTrace();
 		}
-		return Bitmap.createBitmap(color, size, size, Bitmap.Config.ARGB_8888);
-    }
+	}
+    
+    
+ 
 }
diff --git a/src/com/color/colornamer/MenuActivity.java b/src/com/color/colornamer/MenuActivity.java
index 2d94d1f..6a04c83 100644
--- a/src/com/color/colornamer/MenuActivity.java
+++ b/src/com/color/colornamer/MenuActivity.java
@@ -26,7 +26,7 @@ public class MenuActivity extends FragmentActivity {
 		//for hiding the camera option for devices w/ no camera
 		//feature_camera_any is api level 17
 		PackageManager manager = getPackageManager();
-		if (manager.hasSystemFeature(PackageManager.FEATURE_CAMERA_ANY) | manager.hasSystemFeature(PackageManager.FEATURE_CAMERA)) hasCamera = true;
+		if (manager.hasSystemFeature(PackageManager.FEATURE_CAMERA_ANY) || manager.hasSystemFeature(PackageManager.FEATURE_CAMERA)) hasCamera = true;
 		
 		sharer = new Sharer(this);
 
diff --git a/src/com/color/colornamer/Preview.java b/src/com/color/colornamer/Preview.java
index 56056af..3581133 100644
--- a/src/com/color/colornamer/Preview.java
+++ b/src/com/color/colornamer/Preview.java
@@ -101,6 +101,7 @@ class Preview extends SurfaceView implements SurfaceHolder.Callback, PreviewCall
     	return isFrontCamera;
     }
   
+    /* TODO: fix the bug with the null pointer exception */
     public void surfaceChanged(SurfaceHolder holder, int format, int w, int h) {  
         // Now that the size is known, set up the camera parameters and begin  
         // the preview.  
@@ -112,9 +113,11 @@ class Preview extends SurfaceView implements SurfaceHolder.Callback, PreviewCall
  	        List<String> focusModes = parameters.getSupportedFocusModes();
  	        if (focusModes != null) {
 	 	        if (focusModes.contains(Parameters.FOCUS_MODE_CONTINUOUS_PICTURE))
-	 	           parameters.setFocusMode(Parameters.FOCUS_MODE_CONTINUOUS_PICTURE);
+	 	        	parameters.setFocusMode(Parameters.FOCUS_MODE_CONTINUOUS_PICTURE);
 	 	        else if (focusModes.contains(Parameters.FOCUS_MODE_CONTINUOUS_VIDEO))
-	 	    	   parameters.setFocusMode(Parameters.FOCUS_MODE_CONTINUOUS_VIDEO);
+	 	        	parameters.setFocusMode(Parameters.FOCUS_MODE_CONTINUOUS_VIDEO);
+	 	        else if (focusModes.contains(Parameters.FOCUS_MODE_AUTO))
+	 	        	parameters.setFocusMode(Parameters.FOCUS_MODE_AUTO);
  	        }
     		
     		//have to get previewSizes because not all devices support arbitrary previews
@@ -139,14 +142,18 @@ class Preview extends SurfaceView implements SurfaceHolder.Callback, PreviewCall
 	               }
 	        	}
 	        }
-	        previewSize = best; 
-	        parameters.setPreviewSize(previewSize.width, previewSize.height);
 	        
+	        // make sure something is picked.  previewSizes is guarenteed to have at least one thing.
+	        if (best != null) {
+	        	previewSize = best; 
+	        } else {
+	        	previewSize = previewSizes.get(0);
+	        }
+	           
+	        parameters.setPreviewSize(previewSize.width, previewSize.height);
             pixels = new int[previewSize.width * previewSize.height];  
-	        
 	        mCamera.setParameters(parameters);
 	        
-    		
     	    //sets the camera callback to be the one defined in this class  
             mCamera.setPreviewCallbackWithBuffer(this);//setPreviewCallback(this);//setPreviewCallbackWithBuffer(this);  
 	        bufferSize = previewSize.width*previewSize.height*ImageFormat.getBitsPerPixel(parameters.getPreviewFormat())/8;
diff --git a/src/com/color/colornamer/Sharer.java b/src/com/color/colornamer/Sharer.java
index 7cbbfae..66e660c 100644
--- a/src/com/color/colornamer/Sharer.java
+++ b/src/com/color/colornamer/Sharer.java
@@ -9,6 +9,7 @@ import java.util.ArrayList;
 import android.content.Context;
 import android.content.Intent;
 import android.graphics.Bitmap;
+import android.graphics.Color;
 import android.media.MediaScannerConnection;
 import android.net.Uri;
 import android.os.Environment;
@@ -74,4 +75,15 @@ public class Sharer {
     	context.unbindService(scanner);
 
 	}
+	
+	// creates a bitmap of the current color
+    public Bitmap createBitmap(String colorString) {
+    	int size = 512;
+		int[] color = new int[size*size];
+		int colorValue = Color.parseColor(colorString);
+		for (int i = 0; i < size*size; i++) {
+			color[i] = colorValue;
+		}
+		return Bitmap.createBitmap(color, size, size, Bitmap.Config.ARGB_8888);
+    }
 }
