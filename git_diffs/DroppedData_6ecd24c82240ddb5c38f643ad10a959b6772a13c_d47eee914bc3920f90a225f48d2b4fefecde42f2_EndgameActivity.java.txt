diff --git a/app/src/main/java/com/gunshippenguin/openflood/EndgameActivity.java b/app/src/main/java/com/gunshippenguin/openflood/EndGameDialogFragment.java
similarity index 56%
rename from app/src/main/java/com/gunshippenguin/openflood/EndgameActivity.java
rename to app/src/main/java/com/gunshippenguin/openflood/EndGameDialogFragment.java
index 446fe37..ceba336 100644
--- a/app/src/main/java/com/gunshippenguin/openflood/EndgameActivity.java
+++ b/app/src/main/java/com/gunshippenguin/openflood/EndGameDialogFragment.java
@@ -1,12 +1,13 @@
 package com.gunshippenguin.openflood;
 
-import android.content.Intent;
+import android.app.Activity;
+import android.app.Dialog;
 import android.graphics.Typeface;
 import android.os.Bundle;
-import android.support.v7.app.AppCompatActivity;
-import android.util.DisplayMetrics;
+import android.support.v4.app.DialogFragment;
+import android.support.v7.app.AlertDialog;
+import android.view.LayoutInflater;
 import android.view.View;
-import android.view.ViewGroup;
 import android.widget.Button;
 import android.widget.ImageView;
 import android.widget.TextView;
@@ -14,26 +15,36 @@ import android.content.SharedPreferences;
 import android.preference.PreferenceManager;
 
 /**
- * Dialog Activity that is displayed to the user upon a win or loss.
+ * Dialog Fragment that is displayed to the user upon a win or loss.
  */
-public class EndgameActivity extends AppCompatActivity {
+public class EndGameDialogFragment extends DialogFragment {
+
+    public interface EndGameDialogFragmentListener {
+        public void onReplayClick();
+        public void onNewGameClick();
+    }
+
+    EndGameDialogFragmentListener listener;
 
     @Override
-    protected void onCreate(Bundle savedInstanceState) {
+    public Dialog onCreateDialog(Bundle savedInstanceState) {
         super.onCreate(savedInstanceState);
-        setContentView(R.layout.activity_endgame);
 
-        // Fill 95% of the screen with the dialog
-        DisplayMetrics metrics = getResources().getDisplayMetrics();
-        int screenWidth = (int) (metrics.widthPixels * 0.95);
-        getWindow().setLayout(screenWidth, ViewGroup.LayoutParams.WRAP_CONTENT);
+        // Get steps and maxSteps from the arguments
+        int steps = getArguments().getInt("steps");
+        int maxSteps = getArguments().getInt("max_steps");
+        boolean gameWon = steps <= maxSteps;
 
-        setFinishOnTouchOutside(false);
-
-        boolean gameWon = getIntent().getExtras().getBoolean("gameWon");
+        // Inflate layout
+        LayoutInflater inflater = getActivity().getLayoutInflater();
+        View layout = inflater.inflate(R.layout.dialog_endgame, null);
+        AlertDialog.Builder builder = new AlertDialog.Builder(getContext());
+        builder.setView(layout);
+        final AlertDialog dialog = builder.create();
+        dialog.setCanceledOnTouchOutside(false);
 
         // Set up the dialog's title
-        TextView endgameTitleTextView = (TextView) findViewById(R.id.endGameTitle);
+        TextView endgameTitleTextView = (TextView) layout.findViewById(R.id.endGameTitle);
         if (gameWon) {
             endgameTitleTextView.setText(getString(R.string.endgame_win_title));
         } else {
@@ -41,18 +52,17 @@ public class EndgameActivity extends AppCompatActivity {
         }
 
         // Set up dialog's other text views
-        TextView endgameTextView = (TextView) findViewById(R.id.endGameText);
-        TextView highScoreTextView = (TextView) findViewById(R.id.highScoreText);
-        ImageView highScoreMedalImageView = (ImageView) findViewById(R.id.highScoreMedalImageView);
+        TextView endgameTextView = (TextView) layout.findViewById(R.id.endGameText);
+        TextView highScoreTextView = (TextView) layout.findViewById(R.id.highScoreText);
+        ImageView highScoreMedalImageView = (ImageView) layout.findViewById(R.id.highScoreMedalImageView);
 
-        SharedPreferences sp = PreferenceManager.getDefaultSharedPreferences(this);
+        SharedPreferences sp = PreferenceManager.getDefaultSharedPreferences(getActivity());
         HighScoreManager highScoreManager = new HighScoreManager(sp);
 
         int boardSize = sp.getInt("board_size", -1);
         int numColors = sp.getInt("num_colors", -1);
 
         if (gameWon) {
-            int steps = getIntent().getExtras().getInt("steps");
             String stepsString = String.format(getString(R.string.endgame_win_text),
                     steps);
             endgameTextView.setText(stepsString);
@@ -82,29 +92,40 @@ public class EndgameActivity extends AppCompatActivity {
         }
 
         // Show the replay butotn if the game has been lost
-        Button replayButton = (Button) findViewById(R.id.replayButton);
+        Button replayButton = (Button) layout.findViewById(R.id.replayButton);
         if (gameWon) {
             replayButton.setVisibility(View.GONE);
         } else {
             replayButton.setOnClickListener(new View.OnClickListener() {
                 @Override
                 public void onClick(View v) {
-                    Intent resultIntent = new Intent();
-                    resultIntent.putExtra("replayGame", true);
-                    setResult(RESULT_OK, resultIntent);
-                    finish();
+                    listener.onReplayClick();
+                    dismiss();
                 }
             });
         }
 
         // Set up the new game button callback
-        Button newGameButton = (Button) findViewById(R.id.newGameButton);
+        Button newGameButton = (Button) layout.findViewById(R.id.newGameButton);
         newGameButton.setOnClickListener(new View.OnClickListener() {
             @Override
             public void onClick(View v) {
-                setResult(RESULT_OK, new Intent());
-                finish();
+                listener.onNewGameClick();
+                dismiss();
             }
         });
+        return dialog;
     }
+
+    @Override
+    public void onAttach(Activity activity) {
+        super.onAttach(activity);
+        try {
+            listener = (EndGameDialogFragmentListener) activity;
+        } catch (ClassCastException e) {
+            throw new ClassCastException(activity.toString()
+                    + " must implement EndGameDialogListener");
+        }
+    }
+
 }
diff --git a/app/src/main/java/com/gunshippenguin/openflood/GameActivity.java b/app/src/main/java/com/gunshippenguin/openflood/GameActivity.java
index 55c1e14..6d702e8 100644
--- a/app/src/main/java/com/gunshippenguin/openflood/GameActivity.java
+++ b/app/src/main/java/com/gunshippenguin/openflood/GameActivity.java
@@ -5,6 +5,7 @@ import android.content.SharedPreferences;
 import android.graphics.Paint;
 import android.os.Bundle;
 import android.preference.PreferenceManager;
+import android.support.v4.app.DialogFragment;
 import android.support.v7.app.AppCompatActivity;
 import android.view.View;
 import android.view.ViewGroup;
@@ -16,9 +17,10 @@ import android.widget.TextView;
 /**
  * Activity allowing the user to play the actual game.
  */
-public class GameActivity extends AppCompatActivity {
+public class GameActivity extends AppCompatActivity
+        implements EndGameDialogFragment.EndGameDialogFragmentListener {
+
     private final int UPDATE_SETTINGS = 1;
-    private final int NEW_GAME = 2;
 
     private Game game;
     private SharedPreferences sp;
@@ -187,14 +189,6 @@ public class GameActivity extends AppCompatActivity {
                     layoutColorButtons();
                 }
             }
-        } else if (requestCode == NEW_GAME) {
-            if (resultCode == RESULT_OK) {
-                if (data.getBooleanExtra("replayGame", false)) {
-                    resetGame();
-                } else {
-                    newGame();
-                }
-            }
         }
     }
 
@@ -210,17 +204,27 @@ public class GameActivity extends AppCompatActivity {
 
         if (game.checkWin() || game.getSteps() == game.getMaxSteps()) {
             gameFinished = true;
-            showEndGameActivity();
+            showEndGameDialog();
         }
 
         return;
     }
 
-    private void showEndGameActivity() {
-        Intent launchEndgameIntent = new Intent(GameActivity.this, EndgameActivity.class);
-        launchEndgameIntent.putExtra("gameWon", game.checkWin());
-        launchEndgameIntent.putExtra("steps", game.getSteps());
-        startActivityForResult(launchEndgameIntent, NEW_GAME);
+    public void onNewGameClick() {
+        newGame();
+        return;
+    }
+
+    public void onReplayClick() {
+        resetGame();
+    }
+
+    private void showEndGameDialog() {
+        DialogFragment endGameDialog = new EndGameDialogFragment();
+        Bundle args = new Bundle();
+        args.putInt("steps", game.getSteps());
+        endGameDialog.setArguments(args);
+        endGameDialog.show(getSupportFragmentManager(), "EndGameDialog");
         return;
     }
 }
