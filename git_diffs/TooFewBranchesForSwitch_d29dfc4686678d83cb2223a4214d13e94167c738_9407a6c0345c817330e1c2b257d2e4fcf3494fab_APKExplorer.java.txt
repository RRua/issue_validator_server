diff --git a/app/src/main/java/com/apk/editor/adapters/ApplicationsAdapter.java b/app/src/main/java/com/apk/editor/adapters/ApplicationsAdapter.java
index 55cd06b..3b6f97b 100644
--- a/app/src/main/java/com/apk/editor/adapters/ApplicationsAdapter.java
+++ b/app/src/main/java/com/apk/editor/adapters/ApplicationsAdapter.java
@@ -12,7 +12,6 @@ import androidx.appcompat.widget.AppCompatImageButton;
 import androidx.recyclerview.widget.RecyclerView;
 
 import com.apk.editor.R;
-import com.apk.editor.activities.APKSignActivity;
 import com.apk.editor.activities.ImageViewActivity;
 import com.apk.editor.utils.APKData;
 import com.apk.editor.utils.APKEditorUtils;
@@ -82,55 +81,12 @@ public class ApplicationsAdapter extends RecyclerView.Adapter<ApplicationsAdapte
                 }
                 if (APKEditorUtils.isFullVersion(v.getContext())) {
                     if (APKEditorUtils.getString("exportAPKs", null, v.getContext()) == null) {
-                        new MaterialAlertDialogBuilder(v.getContext()).setItems(v.getContext().getResources().getStringArray(
-                                R.array.export_options), (dialogInterface, i) -> {
-                            switch (i) {
-                                case 0:
-                                    APKData.exportApp(data.get(position).getPackageName(), v.getContext());
-                                    break;
-                                case 1:
-                                    if (!APKEditorUtils.getBoolean("firstSigning", false, v.getContext())) {
-                                        new MaterialAlertDialogBuilder(v.getContext()).setItems(v.getContext().getResources().getStringArray(
-                                                R.array.signing), (dialogInterfacei, ii) -> {
-                                            APKEditorUtils.saveBoolean("firstSigning", true, v.getContext());
-                                            switch (ii) {
-                                                case 0:
-                                                    APKData.reSignAPKs(data.get(position).getPackageName(),false, (Activity) v.getContext());
-                                                    break;
-                                                case 1:
-                                                    Intent signing = new Intent(v.getContext(), APKSignActivity.class);
-                                                    v.getContext().startActivity(signing);
-                                                    break;
-                                            }
-                                        }).setCancelable(false)
-                                                .setOnDismissListener(dialogInterfacei -> {
-                                                }).show();
-                                    } else {
-                                        APKData.reSignAPKs(data.get(position).getPackageName(), false, (Activity) v.getContext());
-                                    }
-                                    break;
-                            }
-                        }).setOnDismissListener(dialogInterface -> {
-                        }).show();
+                        AppData.getExportOptionsMenu(data.get(position).getPackageName(), v.getContext()).show();
                     } else if (APKEditorUtils.getString("exportAPKs", null, v.getContext()).equals(v.getContext().getString(R.string.export_storage))) {
                         APKData.exportApp(data.get(position).getPackageName(), v.getContext());
                     } else {
                         if (!APKEditorUtils.getBoolean("firstSigning", false, v.getContext())) {
-                            new MaterialAlertDialogBuilder(v.getContext()).setItems(v.getContext().getResources().getStringArray(
-                                    R.array.signing), (dialogInterfacei, ii) -> {
-                                APKEditorUtils.saveBoolean("firstSigning", true, v.getContext());
-                                switch (ii) {
-                                    case 0:
-                                        APKData.reSignAPKs(data.get(position).getPackageName(), false, (Activity) v.getContext());
-                                        break;
-                                    case 1:
-                                        Intent signing = new Intent(v.getContext(), APKSignActivity.class);
-                                        v.getContext().startActivity(signing);
-                                        break;
-                                }
-                            }).setCancelable(false)
-                                    .setOnDismissListener(dialogInterfacei -> {
-                                    }).show();
+                            AppData.getSigningOptionsMenu(data.get(position).getPackageName(), v.getContext()).show();
                         } else {
                             APKData.reSignAPKs(data.get(position).getPackageName(), false, (Activity) v.getContext());
                         }
diff --git a/app/src/main/java/com/apk/editor/adapters/ProjectsAdapter.java b/app/src/main/java/com/apk/editor/adapters/ProjectsAdapter.java
index 0c186da..e4ca31f 100644
--- a/app/src/main/java/com/apk/editor/adapters/ProjectsAdapter.java
+++ b/app/src/main/java/com/apk/editor/adapters/ProjectsAdapter.java
@@ -4,6 +4,7 @@ import android.annotation.SuppressLint;
 import android.app.Activity;
 import android.content.Intent;
 import android.graphics.Color;
+import android.os.Build;
 import android.view.LayoutInflater;
 import android.view.View;
 import android.view.ViewGroup;
diff --git a/app/src/main/java/com/apk/editor/adapters/SettingsAdapter.java b/app/src/main/java/com/apk/editor/adapters/SettingsAdapter.java
index c7d5b56..e9e2943 100644
--- a/app/src/main/java/com/apk/editor/adapters/SettingsAdapter.java
+++ b/app/src/main/java/com/apk/editor/adapters/SettingsAdapter.java
@@ -2,6 +2,8 @@ package com.apk.editor.adapters;
 
 import android.annotation.SuppressLint;
 import android.graphics.Color;
+import android.graphics.Paint;
+import android.os.Build;
 import android.view.LayoutInflater;
 import android.view.View;
 import android.view.ViewGroup;
@@ -55,6 +57,10 @@ public class SettingsAdapter extends RecyclerView.Adapter<SettingsAdapter.ViewHo
         } else {
             holder.mIcon.setVisibility(View.GONE);
         }
+        if (Build.VERSION.SDK_INT >= 29 && (position == 5 || position == 6)) {
+            holder.Title.setPaintFlags(Paint.STRIKE_THRU_TEXT_FLAG);
+            holder.Description.setPaintFlags(Paint.STRIKE_THRU_TEXT_FLAG);
+        }
     }
 
     @Override
diff --git a/app/src/main/java/com/apk/editor/fragments/APKExplorerFragment.java b/app/src/main/java/com/apk/editor/fragments/APKExplorerFragment.java
index 26fc32d..336c4d4 100644
--- a/app/src/main/java/com/apk/editor/fragments/APKExplorerFragment.java
+++ b/app/src/main/java/com/apk/editor/fragments/APKExplorerFragment.java
@@ -69,25 +69,21 @@ public class APKExplorerFragment extends androidx.fragment.app.Fragment {
                 })
                 .setPositiveButton(getString(R.string.build), (dialog, id) -> {
                     if (!APKEditorUtils.getBoolean("firstSigning", false, requireActivity())) {
-                        new MaterialAlertDialogBuilder(requireActivity()).setItems(requireActivity().getResources().getStringArray(
-                                R.array.signing), (dialogInterface, i) -> {
-                            APKEditorUtils.saveBoolean("firstSigning", true, requireActivity());
-                            switch (i) {
-                                case 0:
-                                    APKData.prepareSignedAPK(requireActivity());
-                                    break;
-                                case 1:
-                                    Intent signing = new Intent(requireActivity(), APKSignActivity.class);
-                                    startActivity(signing);
-                                    break;
-                            }}).setCancelable(false)
-                                .setOnDismissListener(dialogInterface -> {
+                        new MaterialAlertDialogBuilder(requireActivity())
+                                .setItems(AppData.getSigningOptionsMenu(requireActivity()), (d, itemPosition) -> {
+                                    APKEditorUtils.saveBoolean("firstSigning", true, requireActivity());
+                                    if (itemPosition == 0) {
+                                        APKData.prepareSignedAPK(requireActivity());
+                                    } else {
+                                        Intent signing = new Intent(requireActivity(), APKSignActivity.class);
+                                        startActivity(signing);
+                                    }
+                                    dialog.dismiss();
                                 }).show();
                     } else {
                         APKData.prepareSignedAPK(requireActivity());
                     }
-                })
-                .show());
+                }).show());
 
         if (APKEditorUtils.isFullVersion(requireActivity())) {
             mSave.setVisibility(View.VISIBLE);
diff --git a/app/src/main/java/com/apk/editor/utils/APKData.java b/app/src/main/java/com/apk/editor/utils/APKData.java
index 29e7a33..974b17e 100644
--- a/app/src/main/java/com/apk/editor/utils/APKData.java
+++ b/app/src/main/java/com/apk/editor/utils/APKData.java
@@ -8,6 +8,7 @@ import android.content.Intent;
 import android.content.pm.PackageInfo;
 import android.graphics.drawable.Drawable;
 import android.net.Uri;
+import android.os.Build;
 import android.os.Environment;
 import android.view.WindowManager;
 
@@ -69,7 +70,7 @@ public class APKData {
     }
 
     public static File getExportAPKsPath(Context context) {
-        if (APKEditorUtils.getString("exportAPKsPath", "externalFiles", context).equals("internalStorage")) {
+        if (Build.VERSION.SDK_INT < 29 && APKEditorUtils.getString("exportAPKsPath", "externalFiles", context).equals("internalStorage")) {
             return new File(Environment.getExternalStorageDirectory(), "/AEE/exportedAPKs");
         } else {
             return context.getExternalFilesDir("");
diff --git a/app/src/main/java/com/apk/editor/utils/APKExplorer.java b/app/src/main/java/com/apk/editor/utils/APKExplorer.java
index 1541fd7..bdac867 100644
--- a/app/src/main/java/com/apk/editor/utils/APKExplorer.java
+++ b/app/src/main/java/com/apk/editor/utils/APKExplorer.java
@@ -18,7 +18,6 @@ import androidx.core.app.ActivityCompat;
 
 import com.apk.editor.R;
 import com.apk.editor.activities.APKExploreActivity;
-import com.apk.editor.activities.APKSignActivity;
 import com.apk.editor.activities.APKTasksActivity;
 import com.google.android.material.dialog.MaterialAlertDialogBuilder;
 
@@ -195,41 +194,13 @@ public class APKExplorer {
                                 installAPKs(activity);
                             } else if (itemPosition == 1) {
                                 if (!APKEditorUtils.getBoolean("firstSigning", false, activity)) {
-                                    new MaterialAlertDialogBuilder(activity).setItems(activity.getResources().getStringArray(
-                                            R.array.signing), (dialogInterfacei, ii) -> {
-                                        APKEditorUtils.saveBoolean("firstSigning", true, activity);
-                                        switch (ii) {
-                                            case 0:
-                                                APKData.reSignAPKs(null, true, activity);
-                                                break;
-                                            case 1:
-                                                Intent signing = new Intent(activity, APKSignActivity.class);
-                                                activity.startActivity(signing);
-                                                break;
-                                        }
-                                    }).setCancelable(false)
-                                            .setOnDismissListener(dialogInterfacei -> {
-                                            }).show();
+                                    AppData.getSigningOptionsMenu(null, activity).show();
                                 } else {
                                     APKData.reSignAPKs(null, true, activity);
                                 }
                             } else {
                                 if (!APKEditorUtils.getBoolean("firstSigning", false, activity)) {
-                                    new MaterialAlertDialogBuilder(activity).setItems(activity.getResources().getStringArray(
-                                            R.array.signing), (dialogInterfacei, ii) -> {
-                                        APKEditorUtils.saveBoolean("firstSigning", true, activity);
-                                        switch (ii) {
-                                            case 0:
-                                                APKData.reSignAPKs(null, false, activity);
-                                                break;
-                                            case 1:
-                                                Intent signing = new Intent(activity, APKSignActivity.class);
-                                                activity.startActivity(signing);
-                                                break;
-                                        }
-                                    }).setCancelable(false)
-                                            .setOnDismissListener(dialogInterfacei -> {
-                                            }).show();
+                                    AppData.getSigningOptionsMenu(null, activity).show();
                                 } else {
                                     APKData.reSignAPKs(null, false, activity);
                                 }
@@ -240,21 +211,7 @@ public class APKExplorer {
                 installAPKs(activity);
             } else {
                 if (!APKEditorUtils.getBoolean("firstSigning", false, activity)) {
-                    new MaterialAlertDialogBuilder(activity).setItems(activity.getResources().getStringArray(
-                            R.array.signing), (dialogInterface, i) -> {
-                        APKEditorUtils.saveBoolean("firstSigning", true, activity);
-                        switch (i) {
-                            case 0:
-                                APKData.reSignAPKs(null,true, activity);
-                                break;
-                            case 1:
-                                Intent signing = new Intent(activity, APKSignActivity.class);
-                                activity.startActivity(signing);
-                                break;
-                        }
-                    }).setCancelable(false)
-                            .setOnDismissListener(dialogInterface -> {
-                            }).show();
+                    AppData.getSigningOptionsMenu(null, activity).show();
                 } else {
                     APKData.reSignAPKs(null,true, activity);
                 }
diff --git a/app/src/main/java/com/apk/editor/utils/AppData.java b/app/src/main/java/com/apk/editor/utils/AppData.java
index 48be1db..efb8f09 100644
--- a/app/src/main/java/com/apk/editor/utils/AppData.java
+++ b/app/src/main/java/com/apk/editor/utils/AppData.java
@@ -1,6 +1,8 @@
 package com.apk.editor.utils;
 
+import android.app.Activity;
 import android.content.Context;
+import android.content.Intent;
 import android.content.pm.ApplicationInfo;
 import android.content.pm.PackageInfo;
 import android.content.pm.PackageManager;
@@ -10,7 +12,10 @@ import android.view.inputmethod.InputMethodManager;
 
 import androidx.appcompat.widget.AppCompatEditText;
 
+import com.apk.editor.R;
+import com.apk.editor.activities.APKSignActivity;
 import com.apk.editor.utils.recyclerViewItems.PackageItems;
+import com.google.android.material.dialog.MaterialAlertDialogBuilder;
 
 import java.io.File;
 import java.util.ArrayList;
@@ -120,10 +125,54 @@ public class AppData {
                 packageName, context)));
     }
 
+    private static CharSequence[] getExportOptionsMenu(Context context) {
+        return new CharSequence[] {
+                context.getString(R.string.export_storage),
+                context.getString(R.string.export_resign)
+        };
+    }
+
+    public static CharSequence[] getSigningOptionsMenu(Context context) {
+        return new CharSequence[] {
+                context.getString(R.string.signing_default),
+                context.getString(R.string.signing_custom)
+        };
+    }
+
     public static Drawable getAppIcon(String packageName, Context context) {
         return getPackageManager(context).getApplicationIcon(Objects.requireNonNull(getAppInfo(packageName, context)));
     }
 
+    public static MaterialAlertDialogBuilder getExportOptionsMenu(String packageName, Context context) {
+        return new MaterialAlertDialogBuilder(context)
+                .setItems(getExportOptionsMenu(context), (dialog, itemPosition) -> {
+                    if (itemPosition == 0) {
+                        APKData.exportApp(packageName, context);
+                    } else {
+                        if (!APKEditorUtils.getBoolean("firstSigning", false, context)) {
+                            getSigningOptionsMenu(packageName, context).show();
+                        } else {
+                            APKData.reSignAPKs(packageName, false, (Activity) context);
+                        }
+                    }
+                    dialog.dismiss();
+                });
+    }
+
+    public static MaterialAlertDialogBuilder getSigningOptionsMenu(String packageName, Context context) {
+        return new MaterialAlertDialogBuilder(context)
+                .setItems(getSigningOptionsMenu(context), (dialog, itemPosition) -> {
+                    APKEditorUtils.saveBoolean("firstSigning", true, context);
+                    if (itemPosition == 0) {
+                        APKData.reSignAPKs(packageName,false, (Activity) context);
+                    } else {
+                        Intent signing = new Intent(context, APKSignActivity.class);
+                        context.startActivity(signing);
+                    }
+                    dialog.dismiss();
+                });
+    }
+
     public static String getSourceDir(String packageName, Context context) {
         return Objects.requireNonNull(getAppInfo(packageName, context)).sourceDir;
     }
diff --git a/app/src/main/java/com/apk/editor/utils/AppSettings.java b/app/src/main/java/com/apk/editor/utils/AppSettings.java
index 3e6834a..f99b92b 100644
--- a/app/src/main/java/com/apk/editor/utils/AppSettings.java
+++ b/app/src/main/java/com/apk/editor/utils/AppSettings.java
@@ -1,13 +1,14 @@
 package com.apk.editor.utils;
 
-import android.annotation.SuppressLint;
 import android.app.Activity;
 import android.app.ProgressDialog;
 import android.content.Context;
 import android.content.Intent;
+import android.os.Build;
 import android.os.Environment;
 
 import androidx.appcompat.app.AppCompatDelegate;
+import androidx.core.content.ContextCompat;
 
 import com.apk.editor.MainActivity;
 import com.apk.editor.R;
@@ -26,28 +27,105 @@ public class AppSettings {
 
     private static final ArrayList <SettingsItems> mData = new ArrayList<>();
 
-    @SuppressLint("UseCompatLoadingForDrawables")
     public static ArrayList<SettingsItems> getData(Context context) {
         mData.clear();
         mData.add(new SettingsItems(context.getString(R.string.user_interface), null, null));
-        mData.add(new SettingsItems(context.getString(R.string.app_theme), getAppTheme(context), context.getResources().getDrawable(R.drawable.ic_theme)));
-        mData.add(new SettingsItems(context.getString(R.string.language), getLanguage(context), context.getResources().getDrawable(R.drawable.ic_translate)));
+        mData.add(new SettingsItems(context.getString(R.string.app_theme), getAppTheme(context), ContextCompat.getDrawable(context, R.drawable.ic_theme)));
+        mData.add(new SettingsItems(context.getString(R.string.language), getLanguage(context), ContextCompat.getDrawable(context, R.drawable.ic_translate)));
         mData.add(new SettingsItems(context.getString(R.string.settings_general), null, null));
-        mData.add(new SettingsItems(context.getString(R.string.project_exist_action), getProjectExistAction(context), context.getResources().getDrawable(R.drawable.ic_projects)));
-        mData.add(new SettingsItems(context.getString(R.string.export_path_apks), getExportAPKsPath(context), context.getResources().getDrawable(R.drawable.ic_export)));
-        mData.add(new SettingsItems(context.getString(R.string.export_path_resources), getExportPath(context), context.getResources().getDrawable(R.drawable.ic_export)));
+        mData.add(new SettingsItems(context.getString(R.string.project_exist_action), getProjectExistAction(context), ContextCompat.getDrawable(context, R.drawable.ic_projects)));
+        mData.add(new SettingsItems(context.getString(R.string.export_path_apks), getExportAPKsPath(context), ContextCompat.getDrawable(context, R.drawable.ic_export)));
+        mData.add(new SettingsItems(context.getString(R.string.export_path_resources), getExportPath(context), ContextCompat.getDrawable(context, R.drawable.ic_export)));
         if (APKEditorUtils.isFullVersion(context)) {
-            mData.add(new SettingsItems(context.getString(R.string.text_editing), getEditingOptions(context), context.getResources().getDrawable(R.drawable.ic_edit)));
+            mData.add(new SettingsItems(context.getString(R.string.text_editing), getEditingOptions(context), ContextCompat.getDrawable(context, R.drawable.ic_edit)));
             mData.add(new SettingsItems(context.getString(R.string.signing_title), null, null));
-            mData.add(new SettingsItems(context.getString(R.string.export_options), getAPKs(context), context.getResources().getDrawable(R.drawable.ic_android)));
-            mData.add(new SettingsItems(context.getString(R.string.installer_action), getInstallerAction(context), context.getResources().getDrawable(R.drawable.ic_installer)));
-            mData.add(new SettingsItems(context.getString(R.string.sign_apk_with), getAPKSign(context), context.getResources().getDrawable(R.drawable.ic_key)));
+            mData.add(new SettingsItems(context.getString(R.string.export_options), getAPKs(context), ContextCompat.getDrawable(context, R.drawable.ic_android)));
+            mData.add(new SettingsItems(context.getString(R.string.installer_action), getInstallerAction(context), ContextCompat.getDrawable(context, R.drawable.ic_installer)));
+            mData.add(new SettingsItems(context.getString(R.string.sign_apk_with), getAPKSign(context), ContextCompat.getDrawable(context, R.drawable.ic_key)));
         }
         mData.add(new SettingsItems(context.getString(R.string.settings_misc), null, null));
-        mData.add(new SettingsItems(context.getString(R.string.clear_cache), context.getString(R.string.clear_cache_summary), context.getResources().getDrawable(R.drawable.ic_delete)));
+        mData.add(new SettingsItems(context.getString(R.string.clear_cache), context.getString(R.string.clear_cache_summary), ContextCompat.getDrawable(context, R.drawable.ic_delete)));
         return mData;
     }
 
+    private static int getAPKSignPosition(Context context) {
+        if (isCustomKey(context)) {
+            return 1;
+        } else {
+            return 0;
+        }
+    }
+
+    private static int getAppThemePosition(Context context) {
+        for (int i = 0; i < getAppThemeMenu(context).length; i++) {
+            if (getAppTheme(context).equals(getAppThemeMenu(context)[i])) {
+                return i;
+            }
+        }
+        return 0;
+    }
+
+    private static int getAppLanguagePosition(Context context) {
+        for (int i = 0; i < getAppLanguageMenu(context).length; i++) {
+            if (getLanguage(context).equals(getAppLanguageMenu(context)[i])) {
+                return i;
+            }
+        }
+        return 0;
+    }
+
+    private static int getEditingOptionsPosition(Context context) {
+        if (APKEditorUtils.getBoolean("editText", false, context)) {
+            return 1;
+        } else {
+            return 0;
+        }
+    }
+
+    private static int getProjectExitingMenuPosition(Context context) {
+        for (int i = 0; i < getProjectExitingMenu(context).length; i++) {
+            if (getProjectExistAction(context).equals(getProjectExitingMenu(context)[i])) {
+                return i;
+            }
+        }
+        return 2;
+    }
+
+    private static int getExportAPKsPathPosition(Context context) {
+        if (getExportAPKsPath(context).equals(context.getString(R.string.export_path_default))) {
+            return 1;
+        } else {
+            return 0;
+        }
+    }
+
+    private static int getExportPathPosition(Context context) {
+        for (int i = 0; i < getExportPathMenu(context).length; i++) {
+            if (getExportPath(context).equals(getExportPathMenu(context)[i])) {
+                return i;
+            }
+        }
+        return 2;
+    }
+
+    private static int getExportingAPKsPosition(Context context) {
+        for (int i = 0; i < getExportingAPKMenu(context).length; i++) {
+            if (getAPKs(context).equals(getExportingAPKMenu(context)[i])) {
+                return i;
+            }
+        }
+        return 2;
+    }
+
+    private static int getInstallerMenuPosition(Context context) {
+        for (int i = 0; i < getInstallerMenu(context).length; i++) {
+            if (getInstallerAction(context).equals(getInstallerMenu(context)[i])) {
+                return i;
+            }
+        }
+        return 2;
+    }
+
     private static String getAppTheme(Context context) {
         String appTheme = APKEditorUtils.getString("appTheme", "Auto", context);
         if (appTheme.equals("Dark")) {
@@ -88,7 +166,7 @@ public class AppSettings {
 
     private static String getExportAPKsPath(Context context) {
         String exportAPKPath = APKEditorUtils.getString("exportAPKsPath", "externalFiles", context);
-        if (exportAPKPath.equals("internalStorage")) {
+        if (Build.VERSION.SDK_INT < 29 && exportAPKPath.equals("internalStorage")) {
             return context.getString(R.string.export_path_default);
         } else {
             return context.getString(R.string.export_path_files_dir);
@@ -96,12 +174,16 @@ public class AppSettings {
     }
 
     private static String getExportPath(Context context) {
-        if (APKEditorUtils.getString("exportPath", null, context) != null && APKEditorUtils.getString("exportPath", null, context).equals(Environment.getExternalStoragePublicDirectory(Environment.DIRECTORY_DOWNLOADS).toString())) {
-            return context.getString(R.string.export_path_download);
-        } else if (APKEditorUtils.getString("exportPath", null, context) != null && APKEditorUtils.getString("exportPath", null, context).equals(Environment.getExternalStorageDirectory().toString())) {
-            return context.getString(R.string.sdcard);
+        if (Build.VERSION.SDK_INT < 29) {
+            if (APKEditorUtils.getString("exportPath", null, context) != null && APKEditorUtils.getString("exportPath", null, context).equals(Environment.getExternalStorageDirectory().toString())) {
+                return context.getString(R.string.sdcard);
+            } else if (APKEditorUtils.getString("exportPath", null, context) != null && APKEditorUtils.getString("exportPath", null, context).equals(Environment.getExternalStorageDirectory().toString() + "/AEE")) {
+                return context.getString(R.string.export_path_default);
+            } else {
+                return context.getString(R.string.export_path_download);
+            }
         } else {
-            return context.getString(R.string.export_path_default);
+            return context.getString(R.string.export_path_download);
         }
     }
 
@@ -145,6 +227,89 @@ public class AppSettings {
         }
     }
 
+    private static String[] getAPKSignMenu(Context context) {
+        return new String[] {
+                context.getString(R.string.sign_apk_default),
+                context.getString(R.string.sign_apk_custom)
+        };
+    }
+
+    private static String[] getAppThemeMenu(Context context) {
+        return new String[] {
+                context.getString(R.string.app_theme_auto),
+                context.getString(R.string.app_theme_dark),
+                context.getString(R.string.app_theme_light)
+        };
+    }
+
+    private static String[] getAppLanguageMenu(Context context) {
+        return new String[] {
+                context.getString(R.string.app_theme_auto),
+                context.getString(R.string.language_ar),
+                context.getString(R.string.language_zh),
+                context.getString(R.string.language_cs),
+                context.getString(R.string.language_de),
+                context.getString(R.string.language_en),
+                context.getString(R.string.language_fr),
+                context.getString(R.string.language_es),
+                context.getString(R.string.language_ru),
+                context.getString(R.string.language_tr),
+                context.getString(R.string.language_vi)
+        };
+    }
+
+    private static String[] getEditingOptionsMenu(Context context) {
+        return new String[] {
+                context.getString(R.string.disable),
+                context.getString(R.string.enable)
+        };
+    }
+
+    private static String[] getProjectExitingMenu(Context context) {
+        return new String[] {
+                context.getString(R.string.save),
+                context.getString(R.string.delete),
+                context.getString(R.string.prompt)
+        };
+    }
+
+    private static String[] getAPKExportPathMenu(Context context) {
+        return new String[] {
+                context.getString(R.string.export_path_files_dir),
+                context.getString(R.string.export_path_default)
+        };
+    }
+
+    private static String[] getExportPathMenu(Context context) {
+        if (Build.VERSION.SDK_INT < 29) {
+            return new String[]{
+                    context.getString(R.string.sdcard),
+                    context.getString(R.string.export_path_default),
+                    context.getString(R.string.export_path_download)
+            };
+        } else {
+            return new String[]{
+                    context.getString(R.string.export_path_download)
+            };
+        }
+    }
+
+    private static String[] getExportingAPKMenu(Context context) {
+        return new String[] {
+                context.getString(R.string.export_storage),
+                context.getString(R.string.export_resign),
+                context.getString(R.string.prompt)
+        };
+    }
+
+    private static String[] getInstallerMenu(Context context) {
+        return new String[] {
+                context.getString(R.string.install),
+                context.getString(R.string.install_resign),
+                context.getString(R.string.prompt)
+        };
+    }
+
     public static void handleSettingsActions(SettingsAdapter adapter, int position, Activity activity) {
         if (getData(activity).get(position).getDescription() != null) {
             if (position == 1) {
@@ -180,275 +345,209 @@ public class AppSettings {
     }
 
     private static void setAppTheme(Context context) {
-        new MaterialAlertDialogBuilder(context).setItems(context.getResources().getStringArray(
-                R.array.app_theme), (dialogInterface, i) -> {
-            switch (i) {
-                case 0:
-                    APKEditorUtils.saveString("appTheme", "Auto", context);
-                    AppCompatDelegate.setDefaultNightMode(AppCompatDelegate.MODE_NIGHT_FOLLOW_SYSTEM);
-                    break;
-                case 1:
-                    APKEditorUtils.saveString("appTheme", "Dark", context);
-                    AppCompatDelegate.setDefaultNightMode(AppCompatDelegate.MODE_NIGHT_YES);
-                    break;
-                case 2:
-                    APKEditorUtils.saveString("appTheme", "Light", context);
-                    AppCompatDelegate.setDefaultNightMode(AppCompatDelegate.MODE_NIGHT_NO);
-                    break;
-            }
-        }).setOnDismissListener(dialogInterface -> {
-        }).show();
+        new MaterialAlertDialogBuilder(context)
+                .setSingleChoiceItems(getAppThemeMenu(context), getAppThemePosition(context), (dialog, itemPosition) -> {
+                    if (itemPosition == 0) {
+                        APKEditorUtils.saveString("appTheme", "Auto", context);
+                        AppCompatDelegate.setDefaultNightMode(AppCompatDelegate.MODE_NIGHT_FOLLOW_SYSTEM);
+                    } else if (itemPosition == 1) {
+                        APKEditorUtils.saveString("appTheme", "Dark", context);
+                        AppCompatDelegate.setDefaultNightMode(AppCompatDelegate.MODE_NIGHT_YES);
+                    } else {
+                        APKEditorUtils.saveString("appTheme", "Light", context);
+                        AppCompatDelegate.setDefaultNightMode(AppCompatDelegate.MODE_NIGHT_NO);
+                    }
+                    dialog.dismiss();
+                }).show();
     }
 
     private static void setLanguage(Context context) {
-        new MaterialAlertDialogBuilder(context).setItems(context.getResources().getStringArray(
-                R.array.app_language), (dialogInterface, i) -> {
-            switch (i) {
-                case 0:
-                    if (!APKEditorUtils.getLanguage(context).equals(java.util.Locale.getDefault().getLanguage())) {
+        new MaterialAlertDialogBuilder(context)
+                .setSingleChoiceItems(getAppLanguageMenu(context), getAppLanguagePosition(context), (dialog, itemPosition) -> {
+                    if (itemPosition == 0) {
                         APKEditorUtils.saveString("appLanguage", java.util.Locale.getDefault().getLanguage(), context);
                         restartApp(context);
-                    }
-                    break;
-                case 1:
-                    if (!APKEditorUtils.getLanguage(context).equals("ar")) {
+                    } else if (itemPosition == 1) {
                         APKEditorUtils.saveString("appLanguage", "ar", context);
                         restartApp(context);
-                    }
-                    break;
-                case 2:
-                    if (!APKEditorUtils.getLanguage(context).equals("zh")) {
+                    } else if (itemPosition == 2) {
                         APKEditorUtils.saveString("appLanguage", "zh", context);
                         restartApp(context);
-                    }
-                    break;
-                case 3:
-                    if (!APKEditorUtils.getLanguage(context).equals("cs")) {
+                    } else if (itemPosition == 3) {
                         APKEditorUtils.saveString("appLanguage", "cs", context);
                         restartApp(context);
-                    }
-                    break;
-                case 4:
-                    if (!APKEditorUtils.getLanguage(context).equals("de")) {
+                    } else if (itemPosition == 4) {
                         APKEditorUtils.saveString("appLanguage", "de", context);
                         restartApp(context);
-                    }
-                    break;
-                case 5:
-                    if (!APKEditorUtils.getLanguage(context).equals("en_US")) {
+                    } else if (itemPosition == 5) {
                         APKEditorUtils.saveString("appLanguage", "en_US", context);
                         restartApp(context);
-                    }
-                    break;
-                case 6:
-                    if (!APKEditorUtils.getLanguage(context).equals("fr")) {
+                    } else if (itemPosition == 6) {
                         APKEditorUtils.saveString("appLanguage", "fr", context);
                         restartApp(context);
-                    }
-                    break;
-                case 7:
-                    if (!APKEditorUtils.getLanguage(context).equals("es")) {
+                    } else if (itemPosition == 7) {
                         APKEditorUtils.saveString("appLanguage", "es", context);
                         restartApp(context);
-                    }
-                    break;
-                case 8:
-                    if (!APKEditorUtils.getLanguage(context).equals("ru")) {
+                    } else if (itemPosition == 8) {
                         APKEditorUtils.saveString("appLanguage", "ru", context);
                         restartApp(context);
-                    }
-                    break;
-                case 9:
-                    if (!APKEditorUtils.getLanguage(context).equals("tr")) {
+                    } else if (itemPosition == 9) {
                         APKEditorUtils.saveString("appLanguage", "tr", context);
                         restartApp(context);
-                    }
-                    break;
-                case 10:
-                    if (!APKEditorUtils.getLanguage(context).equals("vi")) {
+                    } else if (itemPosition == 10) {
                         APKEditorUtils.saveString("appLanguage", "vi", context);
                         restartApp(context);
                     }
-                    break;
-            }
-        }).setOnDismissListener(dialogInterface -> {
-        }).show();
+                    dialog.dismiss();
+                }).show();
     }
 
-    @SuppressLint("UseCompatLoadingForDrawables")
     private static void setExportAPKsPath(SettingsAdapter adapter, int position, Activity activity) {
-        new MaterialAlertDialogBuilder(activity).setItems(activity.getResources().getStringArray(
-                R.array.export_path_apk), (dialogInterface, i) -> {
-            switch (i) {
-                case 0:
-                    APKEditorUtils.saveString("exportAPKsPath", "externalFiles", activity);
-                    mData.set(position, new SettingsItems(activity.getString(R.string.export_path_apks), getExportAPKsPath(activity), activity.getResources().getDrawable(R.drawable.ic_export)));
-                    adapter.notifyItemChanged(position);
-                    transferExportedApps(activity);
-                    break;
-                case 1:
-                    APKEditorUtils.saveString("exportAPKsPath", "internalStorage", activity);
-                    mData.set(position, new SettingsItems(activity.getString(R.string.export_path_apks), getExportAPKsPath(activity), activity.getResources().getDrawable(R.drawable.ic_export)));
-                    adapter.notifyItemChanged(position);
-                    transferExportedApps(activity);
-                    break;
-            }
-        }).setOnDismissListener(dialogInterface -> {
-        }).show();
+        if (Build.VERSION.SDK_INT < 29) {
+            new MaterialAlertDialogBuilder(activity)
+                    .setSingleChoiceItems(getAPKExportPathMenu(activity), getExportAPKsPathPosition(activity), (dialog, itemPosition) -> {
+                        if (itemPosition == 0) {
+                            APKEditorUtils.saveString("exportAPKsPath", "externalFiles", activity);
+                            mData.set(position, new SettingsItems(activity.getString(R.string.export_path_apks), getExportAPKsPath(activity), ContextCompat.getDrawable(activity, R.drawable.ic_export)));
+                            adapter.notifyItemChanged(position);
+                            transferExportedApps(activity);
+                        } else if (itemPosition == 1) {
+                            APKEditorUtils.saveString("exportAPKsPath", "internalStorage", activity);
+                            mData.set(position, new SettingsItems(activity.getString(R.string.export_path_apks), getExportAPKsPath(activity), ContextCompat.getDrawable(activity, R.drawable.ic_export)));
+                            adapter.notifyItemChanged(position);
+                            transferExportedApps(activity);
+                        }
+                        dialog.dismiss();
+                    }).show();
+        }
     }
 
-    @SuppressLint("UseCompatLoadingForDrawables")
     private static void setExportPath(SettingsAdapter adapter, int position, Context context) {
-        new MaterialAlertDialogBuilder(context).setItems(context.getResources().getStringArray(
-                R.array.export_path), (dialogInterface, i) -> {
-            switch (i) {
-                case 0:
-                    APKEditorUtils.saveString("exportPath", Environment.getExternalStorageDirectory().toString(), context);
-                    mData.set(position, new SettingsItems(context.getString(R.string.export_path_resources), getExportPath(context), context.getResources().getDrawable(R.drawable.ic_export)));
-                    adapter.notifyItemChanged(position);
-                    break;
-                case 1:
-                    APKEditorUtils.saveString("exportPath", null, context);
-                    mData.set(position, new SettingsItems(context.getString(R.string.export_path_resources), getExportPath(context), context.getResources().getDrawable(R.drawable.ic_export)));
-                    adapter.notifyItemChanged(position);
-                    break;
-                case 2:
-                    APKEditorUtils.saveString("exportPath", Environment.getExternalStoragePublicDirectory(Environment.DIRECTORY_DOWNLOADS).toString(), context);
-                    mData.set(position, new SettingsItems(context.getString(R.string.export_path_resources), getExportPath(context), context.getResources().getDrawable(R.drawable.ic_export)));
-                    adapter.notifyItemChanged(position);
-                    break;
-            }
-        }).setOnDismissListener(dialogInterface -> {
-        }).show();
+        if (Build.VERSION.SDK_INT < 29) {
+            new MaterialAlertDialogBuilder(context)
+                    .setSingleChoiceItems(getExportPathMenu(context), getExportPathPosition(context), (dialog, itemPosition) -> {
+                        if (itemPosition == 0) {
+                            APKEditorUtils.saveString("exportPath", Environment.getExternalStorageDirectory().toString(), context);
+                            mData.set(position, new SettingsItems(context.getString(R.string.export_path_resources), getExportPath(context), ContextCompat.getDrawable(context, R.drawable.ic_export)));
+                            adapter.notifyItemChanged(position);
+                        } else if (itemPosition == 1) {
+                            APKEditorUtils.saveString("exportPath", Environment.getExternalStorageDirectory().toString() + "/AEE", context);
+                            mData.set(position, new SettingsItems(context.getString(R.string.export_path_resources), getExportPath(context), ContextCompat.getDrawable(context, R.drawable.ic_export)));
+                            adapter.notifyItemChanged(position);
+                        } else {
+                            APKEditorUtils.saveString("exportPath", null, context);
+                            mData.set(position, new SettingsItems(context.getString(R.string.export_path_resources), getExportPath(context), ContextCompat.getDrawable(context, R.drawable.ic_export)));
+                            adapter.notifyItemChanged(position);
+                        }
+                        dialog.dismiss();
+                    }).show();
+        }
     }
 
-    @SuppressLint("UseCompatLoadingForDrawables")
     private static void setAPKs(SettingsAdapter adapter, int position, Context context) {
-        new MaterialAlertDialogBuilder(context).setItems(context.getResources().getStringArray(
-                R.array.export_apk), (dialogInterface, i) -> {
-            switch (i) {
-                case 0:
-                    APKEditorUtils.saveString("exportAPKs", context.getString(R.string.export_storage), context);
-                    mData.set(position, new SettingsItems(context.getString(R.string.export_options), getAPKs(context), context.getResources().getDrawable(R.drawable.ic_android)));
-                    adapter.notifyItemChanged(position);
-                    break;
-                case 1:
-                    APKEditorUtils.saveString("exportAPKs", context.getString(R.string.export_resign), context);
-                    mData.set(position, new SettingsItems(context.getString(R.string.export_options), getAPKs(context), context.getResources().getDrawable(R.drawable.ic_android)));
-                    adapter.notifyItemChanged(position);
-                    break;
-                case 2:
-                    APKEditorUtils.saveString("exportAPKs", null, context);
-                    mData.set(position, new SettingsItems(context.getString(R.string.export_options), getAPKs(context), context.getResources().getDrawable(R.drawable.ic_android)));
-                    adapter.notifyItemChanged(position);
-                    break;
-            }
-        }).setOnDismissListener(dialogInterface -> {
-        }).show();
+        new MaterialAlertDialogBuilder(context)
+                .setSingleChoiceItems(getExportingAPKMenu(context), getExportingAPKsPosition(context), (dialog, itemPosition) -> {
+                    if (itemPosition == 0) {
+                        APKEditorUtils.saveString("exportAPKs", context.getString(R.string.export_storage), context);
+                        mData.set(position, new SettingsItems(context.getString(R.string.export_options), getAPKs(context), ContextCompat.getDrawable(context, R.drawable.ic_android)));
+                        adapter.notifyItemChanged(position);
+                    } else if (itemPosition == 1) {
+                        APKEditorUtils.saveString("exportAPKs", context.getString(R.string.export_resign), context);
+                        mData.set(position, new SettingsItems(context.getString(R.string.export_options), getAPKs(context), ContextCompat.getDrawable(context, R.drawable.ic_android)));
+                        adapter.notifyItemChanged(position);
+                    } else {
+                        APKEditorUtils.saveString("exportAPKs", null, context);
+                        mData.set(position, new SettingsItems(context.getString(R.string.export_options), getAPKs(context), ContextCompat.getDrawable(context, R.drawable.ic_android)));
+                        adapter.notifyItemChanged(position);
+                    }
+                    dialog.dismiss();
+                }).show();
     }
 
-    @SuppressLint("UseCompatLoadingForDrawables")
     private static void setProjectExistAction(SettingsAdapter adapter, int position, Context context) {
-        new MaterialAlertDialogBuilder(context).setItems(context.getResources().getStringArray(
-                R.array.project_options), (dialogInterface, i) -> {
-            switch (i) {
-                case 0:
-                    APKEditorUtils.saveString("projectAction", context.getString(R.string.save), context);
-                    mData.set(position, new SettingsItems(context.getString(R.string.project_exist_action), getProjectExistAction(context), context.getResources().getDrawable(R.drawable.ic_projects)));
-                    adapter.notifyItemChanged(position);
-                    break;
-                case 1:
-                    APKEditorUtils.saveString("projectAction", context.getString(R.string.delete), context);
-                    mData.set(position, new SettingsItems(context.getString(R.string.project_exist_action), getProjectExistAction(context), context.getResources().getDrawable(R.drawable.ic_projects)));
-                    adapter.notifyItemChanged(position);
-                    break;
-                case 2:
-                    APKEditorUtils.saveString("projectAction", null, context);
-                    mData.set(position, new SettingsItems(context.getString(R.string.project_exist_action), getProjectExistAction(context), context.getResources().getDrawable(R.drawable.ic_projects)));
-                    adapter.notifyItemChanged(position);
-                    break;
-            }
-        }).setOnDismissListener(dialogInterface -> {
-        }).show();
+        new MaterialAlertDialogBuilder(context)
+                .setSingleChoiceItems(getProjectExitingMenu(context), getProjectExitingMenuPosition(context), (dialog, itemPosition) -> {
+                    if (itemPosition == 0) {
+                        APKEditorUtils.saveString("projectAction", context.getString(R.string.save), context);
+                        mData.set(position, new SettingsItems(context.getString(R.string.project_exist_action), getProjectExistAction(context), ContextCompat.getDrawable(context, R.drawable.ic_projects)));
+                        adapter.notifyItemChanged(position);
+                    } else if (itemPosition == 1) {
+                        APKEditorUtils.saveString("projectAction", context.getString(R.string.delete), context);
+                        mData.set(position, new SettingsItems(context.getString(R.string.project_exist_action), getProjectExistAction(context), ContextCompat.getDrawable(context, R.drawable.ic_projects)));
+                        adapter.notifyItemChanged(position);
+                    } else {
+                        APKEditorUtils.saveString("projectAction", null, context);
+                        mData.set(position, new SettingsItems(context.getString(R.string.project_exist_action), getProjectExistAction(context), ContextCompat.getDrawable(context, R.drawable.ic_projects)));
+                        adapter.notifyItemChanged(position);
+                    }
+                    dialog.dismiss();
+                }).show();
     }
 
-    @SuppressLint("UseCompatLoadingForDrawables")
     private static void setEditingOptions(SettingsAdapter adapter, int position, Context context) {
-        new MaterialAlertDialogBuilder(context).setItems(context.getResources().getStringArray(
-                R.array.editing_options), (dialogInterface, i) -> {
-            switch (i) {
-                case 0:
-                    APKEditorUtils.saveBoolean("editText", false, context);
-                    mData.set(position, new SettingsItems(context.getString(R.string.text_editing), getEditingOptions(context), context.getResources().getDrawable(R.drawable.ic_edit)));
-                    adapter.notifyItemChanged(position);
-                    break;
-                case 1:
-                    new MaterialAlertDialogBuilder(context)
-                            .setIcon(R.mipmap.ic_launcher)
-                            .setTitle(R.string.warning)
-                            .setMessage(context.getString(R.string.text_editing_summary))
-                            .setNegativeButton(context.getString(R.string.cancel), (dialog, id) -> {
-                            })
-                            .setPositiveButton(context.getString(R.string.enable), (dialog, id) -> {
-                                APKEditorUtils.saveBoolean("editText", true, context);
-                                mData.set(position, new SettingsItems(context.getString(R.string.text_editing), getEditingOptions(context), context.getResources().getDrawable(R.drawable.ic_edit)));
-                                adapter.notifyItemChanged(position);
-                            }).show();
-                    break;
-            }
-        }).setOnDismissListener(dialogInterface -> {
-        }).show();
+        new MaterialAlertDialogBuilder(context)
+                .setSingleChoiceItems(getEditingOptionsMenu(context), getEditingOptionsPosition(context), (dialog, itemPosition) -> {
+                    if (itemPosition == 0) {
+                        APKEditorUtils.saveBoolean("editText", false, context);
+                        mData.set(position, new SettingsItems(context.getString(R.string.text_editing), getEditingOptions(context), ContextCompat.getDrawable(context, R.drawable.ic_edit)));
+                        adapter.notifyItemChanged(position);
+                    } else {
+                        new MaterialAlertDialogBuilder(context)
+                                .setIcon(R.mipmap.ic_launcher)
+                                .setTitle(R.string.warning)
+                                .setMessage(context.getString(R.string.text_editing_summary))
+                                .setNegativeButton(context.getString(R.string.cancel), (d, id) -> {
+                                })
+                                .setPositiveButton(context.getString(R.string.enable), (d, id) -> {
+                                    APKEditorUtils.saveBoolean("editText", true, context);
+                                    mData.set(position, new SettingsItems(context.getString(R.string.text_editing), getEditingOptions(context), ContextCompat.getDrawable(context, R.drawable.ic_edit)));
+                                    adapter.notifyItemChanged(position);
+                                }).show();
+                    }
+                    dialog.dismiss();
+                }).show();
     }
 
-    @SuppressLint("UseCompatLoadingForDrawables")
     private static void setInstallerAction(SettingsAdapter adapter, int position, Context context) {
-        new MaterialAlertDialogBuilder(context).setItems(context.getResources().getStringArray(
-                R.array.installer_options), (dialogInterface, i) -> {
-            switch (i) {
-                case 0:
-                    APKEditorUtils.saveString("installerAction", context.getString(R.string.install), context);
-                    mData.set(position, new SettingsItems(context.getString(R.string.installer_action), getInstallerAction(context), context.getResources().getDrawable(R.drawable.ic_installer)));
-                    adapter.notifyItemChanged(position);
-                    break;
-                case 1:
-                    APKEditorUtils.saveString("installerAction", context.getString(R.string.install_resign), context);
-                    mData.set(position, new SettingsItems(context.getString(R.string.installer_action), getInstallerAction(context), context.getResources().getDrawable(R.drawable.ic_installer)));
-                    adapter.notifyItemChanged(position);
-                    break;
-                case 2:
-                    APKEditorUtils.saveString("installerAction", null, context);
-                    mData.set(position, new SettingsItems(context.getString(R.string.installer_action), getInstallerAction(context), context.getResources().getDrawable(R.drawable.ic_installer)));
-                    adapter.notifyItemChanged(position);
-                    break;
-            }
-        }).setOnDismissListener(dialogInterface -> {
-        }).show();
+        new MaterialAlertDialogBuilder(context)
+                .setSingleChoiceItems(getInstallerMenu(context), getInstallerMenuPosition(context), (dialog, itemPosition) -> {
+                    if (itemPosition == 0) {
+                        APKEditorUtils.saveString("installerAction", context.getString(R.string.install), context);
+                        mData.set(position, new SettingsItems(context.getString(R.string.installer_action), getInstallerAction(context), ContextCompat.getDrawable(context, R.drawable.ic_installer)));
+                        adapter.notifyItemChanged(position);
+                    } else if (itemPosition == 1) {
+                        APKEditorUtils.saveString("installerAction", context.getString(R.string.install_resign), context);
+                        mData.set(position, new SettingsItems(context.getString(R.string.installer_action), getInstallerAction(context), ContextCompat.getDrawable(context, R.drawable.ic_installer)));
+                        adapter.notifyItemChanged(position);
+                    } else {
+                        APKEditorUtils.saveString("installerAction", null, context);
+                        mData.set(position, new SettingsItems(context.getString(R.string.installer_action), getInstallerAction(context), ContextCompat.getDrawable(context, R.drawable.ic_installer)));
+                        adapter.notifyItemChanged(position);
+                    }
+                    dialog.dismiss();
+                }).show();
     }
 
-    @SuppressLint("UseCompatLoadingForDrawables")
     private static void setAPKSign(SettingsAdapter adapter, int position, Context context) {
-        new MaterialAlertDialogBuilder(context).setItems(context.getResources().getStringArray(
-                R.array.signing_options), (dialogInterface, i) -> {
-            switch (i) {
-                case 0:
-                    if (isCustomKey(context)) {
-                        APKEditorUtils.saveString("PrivateKey", null, context);
-                        new File(context.getFilesDir(), "signing/APKEditor.pk8").delete();
-                        APKEditorUtils.saveString("RSATemplate", null, context);
-                        new File(context.getFilesDir(), "signing/APKEditor").delete();
-                        mData.set(position, new SettingsItems(context.getString(R.string.sign_apk_with), getAPKSign(context), context.getResources().getDrawable(R.drawable.ic_key)));
+        new MaterialAlertDialogBuilder(context)
+                .setSingleChoiceItems(getAPKSignMenu(context), getAPKSignPosition(context), (dialog, itemPosition) -> {
+                    if (itemPosition == 0) {
+                        if (isCustomKey(context)) {
+                            APKEditorUtils.saveString("PrivateKey", null, context);
+                            new File(context.getFilesDir(), "signing/APKEditor.pk8").delete();
+                            APKEditorUtils.saveString("RSATemplate", null, context);
+                            new File(context.getFilesDir(), "signing/APKEditor").delete();
+                            mData.set(position, new SettingsItems(context.getString(R.string.sign_apk_with), getAPKSign(context), ContextCompat.getDrawable(context, R.drawable.ic_key)));
+                            adapter.notifyItemChanged(position);
+                        }
+                    } else {
+                        Intent signing = new Intent(context, APKSignActivity.class);
+                        context.startActivity(signing);
+                        mData.set(position, new SettingsItems(context.getString(R.string.sign_apk_with), getAPKSign(context), ContextCompat.getDrawable(context, R.drawable.ic_key)));
                         adapter.notifyItemChanged(position);
                     }
-                    break;
-                case 1:
-                    Intent signing = new Intent(context, APKSignActivity.class);
-                    context.startActivity(signing);
-                    mData.set(position, new SettingsItems(context.getString(R.string.sign_apk_with), getAPKSign(context), context.getResources().getDrawable(R.drawable.ic_key)));
-                    adapter.notifyItemChanged(position);
-                    break;
-            }
-        }).setOnDismissListener(dialogInterface -> {
-        }).show();
+                    dialog.dismiss();
+                }).show();
     }
 
     private static void deleteAppSettings(Activity activity) {
diff --git a/app/src/main/java/com/apk/editor/utils/Projects.java b/app/src/main/java/com/apk/editor/utils/Projects.java
index b7b459b..5426e19 100644
--- a/app/src/main/java/com/apk/editor/utils/Projects.java
+++ b/app/src/main/java/com/apk/editor/utils/Projects.java
@@ -2,6 +2,7 @@ package com.apk.editor.utils;
 
 import android.app.ProgressDialog;
 import android.content.Context;
+import android.os.Build;
 import android.os.Environment;
 
 import com.apk.editor.R;
@@ -36,10 +37,10 @@ public class Projects {
     }
 
     public static String getExportPath(Context context) {
-        if (APKEditorUtils.getString("exportPath", null, context) != null) {
+        if (Build.VERSION.SDK_INT < 29 && APKEditorUtils.getString("exportPath", null, context) != null) {
             return APKEditorUtils.getString("exportPath", null, context);
         } else {
-            return Environment.getExternalStorageDirectory().toString() + "/AEE";
+            return Environment.getExternalStoragePublicDirectory(Environment.DIRECTORY_DOWNLOADS).toString();
         }
     }
 
