diff --git a/pmk/src/com/cax/pmk/EmulatorInterface.java b/pmk/src/com/cax/pmk/EmulatorInterface.java
new file mode 100644
index 0000000..a1e6e70
--- /dev/null
+++ b/pmk/src/com/cax/pmk/EmulatorInterface.java
@@ -0,0 +1,14 @@
+package com.cax.pmk;
+
+public interface EmulatorInterface extends Runnable, java.io.Externalizable 
+{
+	public void setAngleMode(int mode);
+    public int  getAngleMode();
+	public void setSpeedMode(int mode);
+    public int  getSpeedMode();
+    public void keypad(int keycode);
+    public void initTransient(MainActivity mainActivity);
+    public void stopEmulator();
+    public void run();
+	public void start();
+}
diff --git a/pmk/src/com/cax/pmk/MainActivity.java b/pmk/src/com/cax/pmk/MainActivity.java
old mode 100755
new mode 100644
index 5517539..8f6a1fd
--- a/pmk/src/com/cax/pmk/MainActivity.java
+++ b/pmk/src/com/cax/pmk/MainActivity.java
@@ -13,11 +13,13 @@ import android.app.AlertDialog;
 import android.content.Context;
 import android.content.DialogInterface;
 import android.content.pm.PackageManager.NameNotFoundException;
+import android.graphics.Color;
 import android.graphics.Typeface;
 import android.view.Menu;
 import android.view.MenuItem;
 import android.view.View;
 import android.widget.CheckBox;
+import android.widget.LinearLayout;
 import android.widget.RadioButton;
 import android.widget.TextView;
 
@@ -26,9 +28,10 @@ public class MainActivity extends Activity {
     private static final String PERSISTENCE_STATE_FILENAME = "persist";
     private static final String PERSISTENCE_STATE_EXTENSION = ".pmk";
 	private static final int    SAVE_SLOTS_NUMBER = 50;
-    private int selectedSaveSlot = 0;
+	private static final boolean useFelixCode = false;
+	private int selectedSaveSlot = 0;
     private int tempSaveSlot = 0;
-	private Emulator emulator = null;
+	private EmulatorInterface emulator = null;
 	private int mode = 0;
 	private TextView calculatorDisplay = null;
 		
@@ -37,10 +40,12 @@ public class MainActivity extends Activity {
     public void onCreate(Bundle savedInstanceState) {
         super.onCreate(savedInstanceState);
         setContentView(R.layout.activity_main);
+
         calculatorDisplay = (TextView) findViewById(R.id.textView_Indicator);
         Typeface tf = Typeface.createFromAsset(this.getAssets(), "fonts/digital-7-mod.ttf");
         calculatorDisplay.setTypeface(tf);
-    }
+
+	}
 
     @Override
     public void onStart() {
@@ -82,7 +87,15 @@ public class MainActivity extends Activity {
     }
     
     // ----------------------- UI callbacks --------------------------------
-	// calculator power switch callback
+    // calculator indicator click callback
+    public void onIndicator(View view) {
+        if (emulator != null) {
+        	emulator.setSpeedMode(1 - emulator.getSpeedMode());
+        }
+    	setIndicatorColor();
+    }
+
+    // calculator power switch callback
     public void onPower(View view) {
     	switchOnCalculator(((CheckBox)view).isChecked());
     }
@@ -91,19 +104,17 @@ public class MainActivity extends Activity {
     public void onMode(View view) {
         mode = Integer.parseInt((String)view.getTag());
         if (emulator != null)
-        	emulator.setMode(mode);
+        	emulator.setAngleMode(mode);
     }
 
     // calculator button press callback
     public void onButton(View view) {
-    	int keycode = Integer.parseInt((String)view.getTag());
-        keycode = (keycode / 10) * 256 + keycode % 10;
-        ///System.out.println("Tag: " + view.getTag() + ", keycode=" + keycode);
-
     	if (emulator == null)
     		return;
     	
+    	int keycode = Integer.parseInt((String)view.getTag());
     	emulator.keypad(keycode);
+
     }
     
     // Show string on calculator display 
@@ -118,16 +129,14 @@ public class MainActivity extends Activity {
     }
 
     // ----------------------- Dialogs --------------------------------
-	private void chooseAndUseSaveSlot(final boolean save) {
+    private void chooseAndUseSaveSlot(final boolean save) {
 		if (save & emulator == null) // disable saving when calculator is switched off
 			return;
 		
 	    final CharSequence[] items = new CharSequence[SAVE_SLOTS_NUMBER];
 	    for (int i=0; i < SAVE_SLOTS_NUMBER; i++) {
-	    	String i_str = "0" + (i+1);
-    		items[i] = "Slot " + i_str.substring(i_str.length()-2)
-    				+ (getFileStreamPath(getSlotFilename(i)).exists() ? "" : " (empty)");
-	    }
+    		items[i] = getSlotDisplayName(i);
+    	}
 	
 		AlertDialog.Builder builder = new AlertDialog.Builder(this);
 		builder.setTitle("Choose slot to " + (save ? "save" : "load"));
@@ -202,7 +211,37 @@ public class MainActivity extends Activity {
     }
 
 	// ----------------------- Save/Load emulator state --------------------------------
-    String getSlotFilename(int slotNumber) {
+    private String getSlotDisplayName(int i) {
+    	String filename = getSlotFilename(i);
+    	String i_str = "0" + (i+1);
+    	String slotName = "Slot " + i_str.substring(i_str.length()-2);
+    	if (!getFileStreamPath(getSlotFilename(i)).exists()) {
+    		slotName = slotName + " (empty)";
+    	} else {
+			FileInputStream fileIn = null;
+			ObjectInputStream in = null;
+	
+			try {
+				fileIn = openFileInput(filename);
+				in = new ObjectInputStream(fileIn);
+				com.cax.pmk.emulator.Emulator.readStateNamesMode = true;
+				com.cax.pmk.emulator.Emulator emulatorObjForStateNameOnly = (com.cax.pmk.emulator.Emulator) in.readObject();
+				if (emulatorObjForStateNameOnly.saveStateName != null && emulatorObjForStateNameOnly.saveStateName.length() > 0)
+					slotName = emulatorObjForStateNameOnly.saveStateName;
+				in.close();
+				fileIn.close();
+		    } catch(Exception e) {
+		    	e.printStackTrace();
+			} finally {
+				com.cax.pmk.emulator.Emulator.readStateNamesMode = false;
+				try { if (in != null) in.close(); } catch(IOException e) {} 
+				try { if (fileIn != null) fileIn.close(); } catch(IOException e) {}
+			}
+    	}
+    	return slotName;
+    }
+	
+	String getSlotFilename(int slotNumber) {
     	String filename;
     	if (slotNumber < 0)
     		filename = PERSISTENCE_STATE_FILENAME;
@@ -242,44 +281,61 @@ public class MainActivity extends Activity {
     	if (! getFileStreamPath(filename).exists())
     		return false;
     	
-    	if (emulator != null)
-    		emulator.stopEmulator();
-    		emulator = null;
-
 		FileInputStream fileIn = null;
 		ObjectInputStream in = null;
 
+		EmulatorInterface loadedEmulator = null;
 		try {
 			fileIn = openFileInput(filename);
 			in = new ObjectInputStream(fileIn);
-			emulator = (Emulator) in.readObject();
+			loadedEmulator = useFelixCode 
+            		? (com.cax.pmk.felix.Emulator)    in.readObject()
+            		: (com.cax.pmk.emulator.Emulator) in.readObject();
 			in.close();
 			fileIn.close();
 			
+	    } catch(Exception i) {
+			  return false;
+		} finally {
+			try { if (in != null) in.close(); } catch(IOException i) {} 
+			try { if (fileIn != null) fileIn.close(); } catch(IOException i) {}
+		}
+
+    	if (emulator != null)
+    		emulator.stopEmulator();
+    		emulator = loadedEmulator;
+
         	((CheckBox)findViewById(R.id.checkBoxPowerOnOff)).setChecked(true);
-        	mode = emulator.getMode();
+        	mode = emulator.getAngleMode();
         	((RadioButton)findViewById(R.id.radioRadians)).setChecked(mode==0);
         	((RadioButton)findViewById(R.id.radioDegrees)).setChecked(mode==1);
         	((RadioButton)findViewById(R.id.radioGrads))  .setChecked(mode==2);
-    		emulator.initTransient(this);
+        	emulator.initTransient(this);
+        	setIndicatorColor();
             emulator.start();
 
 			return true;
-	    } catch(Exception i) {
-			  return false;
-		} finally {
-			try { if (in != null) in.close(); } catch(IOException i) {} 
-			try { if (fileIn != null) fileIn.close(); } catch(IOException i) {}
-		}
     }
 
     // ----------------------- Other --------------------------------
+    private void setIndicatorColor() {
+    	String color = "#000000";
+    	if (emulator != null) {
+    		color = emulator.getSpeedMode() == 0 ? "#444444" : "#001500";
+    	}
+    	((LinearLayout)findViewById(R.id.linearLayout_Indicator))
+    			.setBackgroundColor(Color.parseColor(color));
+    }
+    
     private void switchOnCalculator(boolean enable) {
     	if (enable) {
     		if (((CheckBox)findViewById(R.id.checkBoxPowerOnOff)).isChecked()) {
-	            emulator = new Emulator();
-	    		emulator.setMode(mode);
+	            emulator = useFelixCode 
+	            		? new com.cax.pmk.felix.Emulator()
+	            		: new com.cax.pmk.emulator.Emulator();
+	    		emulator.setAngleMode(mode);
 	    		emulator.initTransient(this);
+	        	setIndicatorColor();
 	            emulator.start();
     		}
     	} else {
@@ -293,6 +349,7 @@ public class MainActivity extends Activity {
             File file = getFileStreamPath(getSlotFilename(-1));
             if (file.exists())
             	file.delete();
+            setIndicatorColor();
     	}
     }
 }
diff --git a/pmk/src/com/cax/pmk/emulator/Emulator.java b/pmk/src/com/cax/pmk/emulator/Emulator.java
new file mode 100644
index 0000000..7a4a254
--- /dev/null
+++ b/pmk/src/com/cax/pmk/emulator/Emulator.java
@@ -0,0 +1,187 @@
+package com.cax.pmk.emulator;
+
+import java.io.*;
+import com.cax.pmk.*;
+
+public class Emulator extends Thread implements EmulatorInterface
+{
+	public Emulator() {}
+
+	public void initTransient(MainActivity mainActivity) {
+    	this.mainActivity = mainActivity;
+
+    	indicator     = new int[12];
+    	indicator_old = new int[12];
+    	ind_comma     = new boolean[12];
+    	ind_comma_old = new boolean[12];
+        displayString = new StringBuffer(24);
+    	
+		IK1302.ucmd_rom = UCommands.ik1302_urom;
+		IK1303.ucmd_rom = UCommands.ik1303_urom;
+		IK1306.ucmd_rom = UCommands.ik1306_urom;
+	
+		IK1302.synchro_rom = Synchro.ik1302_srom;
+		IK1303.synchro_rom = Synchro.ik1303_srom;
+		IK1306.synchro_rom = Synchro.ik1306_srom;
+	
+		IK1302.cmd_rom = MCommands.ik1302_mrom;
+		IK1303.cmd_rom = MCommands.ik1303_mrom;
+		IK1306.cmd_rom = MCommands.ik1306_mrom;
+	}
+
+	public void run() {
+		runningState = 1;
+		while(runningState > 0) step();
+		runningState = -1;
+	}
+
+	public void stopEmulator() {
+		runningState = 0;
+        while (runningState == 0)
+        	try { sleep(10); } catch (Exception e) {}
+	}
+
+	public void setAngleMode(int mode) {
+		angle_mode = mode + 10;
+	}
+
+	public int getAngleMode() {
+		return angle_mode - 10;
+	}
+
+	public void setSpeedMode(int mode) {
+		speed_mode = mode;
+	}
+
+	public int getSpeedMode() {
+		return speed_mode;
+	}
+
+	public void keypad(int keycode) {
+		IK1302.keyb_x = (keycode % 10) + 2;
+		keycode /= 10;
+		IK1302.keyb_y = keycode == 2 ? 8 : (keycode == 3 ? 9 : 1);
+
+    	/*
+    	11,9	7,9		9,9		4,9		2,9		<-   39 37 35 32 30
+    	10,9	8,9		6,9		3,9		5,9     <-   38 36 34 31 33
+    	9,1		10,1	11,1	3,8		5,8     <-   17 18 19 21 23
+    	6,1		7,1		8,1		2,8		4,8     <-   14 15 16 20 22
+    	3,1		4,1		5,1		6,8		11,8    <-   11 12 13 24 29
+    	2,1		7,8		8,8		9,8		10,8    <-   10 25 26 27 28
+    	*/
+	}
+	
+	void show_indicator() {
+		displayString.setLength(0);
+		for (int ix = 0; ix < 12; ix++) {
+			displayString.append(show_symbols[indicator[ix]]);
+			displayString.append(ind_comma[ix] ? "." : "/");
+		}
+		mainActivity.setDisplay(displayString.toString());
+	}
+
+	void tick() {
+		IK1302.in = IR2_2.out;		IK1302.tick();
+		IK1303.in = IK1302.out;		IK1303.tick();
+		IK1306.in = IK1303.out;		IK1306.tick();
+		IR2_1.in  = IK1306.out;		IR2_1.tick();
+		IR2_2.in  = IR2_1.out;		IR2_2.tick();
+		IK1302.M[((IK1302.microtick >>> 2) + 41) % 42] = IR2_2.out;
+	}
+	
+	void step() {
+		boolean renew = false;
+		IK1303.keyb_y = 1;
+		IK1303.keyb_x = angle_mode;
+		for (int ix = 0; ix < 560; ix++) {
+			if (speed_mode>0) try { sleep(1); } catch (InterruptedException e) {}
+			for (int j = 0; j < 42; j++) { 
+				tick();
+			}
+			
+			if (IK1302.redraw_indic) {
+				for (int i = 0; i <= 8; i++) indicator[i] 	  = IK1302.R[(8 - i) * 3];
+				for (int i = 0; i <= 2; i++) indicator[i + 9] = IK1302.R[(11 - i) * 3];
+				for (int i = 0; i <= 8; i++) ind_comma[i]     = IK1302.ind_comma[9 - i];
+				for (int i = 0; i <= 2; i++) ind_comma[i + 9] = IK1302.ind_comma[12 - i];
+				IK1302.redraw_indic = false;
+			}
+			else
+			{
+				for (int i = 0; i < 12; i++) {
+					indicator[i] = 15; ind_comma[i] = false;
+					IK1302.redraw_indic = false;
+				}
+			}
+
+			renew = false;
+			for (int idx = 0; idx < 12; idx++) {
+				if (indicator_old[idx] != indicator[idx]) renew = true;
+				indicator_old[idx] = indicator[idx];
+				if (ind_comma_old[idx] != ind_comma[idx]) renew = true;
+				ind_comma_old[idx] = ind_comma[idx];
+			}
+			if (renew) show_indicator();
+		}
+	}
+
+	MCU IK1302 = new MCU();
+	MCU IK1303 = new MCU();
+	MCU IK1306 = new MCU();
+	
+	Memory IR2_1 = new Memory();
+	Memory IR2_2 = new Memory();
+	
+	public String saveStateName="";
+
+	private int angle_mode = 10; // R=10, GRD=11, G=12
+	private int speed_mode = 0;  // 0=fast, 1=real speed
+	
+	private transient int[] indicator;
+	private transient int[] indicator_old;
+	private transient boolean[] ind_comma;
+	private transient boolean[] ind_comma_old;
+    private transient StringBuffer displayString = new StringBuffer(24);
+   	private transient int runningState; // 1=running, 0=stopping, -1=stopped
+   	private transient MainActivity mainActivity;
+
+	private static final char[] show_symbols = {'0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '-', 'L', 'C', 'D', 'E', ' '};
+	private static final int externalizeVersion = 1;
+	private static final long serialVersionUID = 1;
+
+	public static boolean readStateNamesMode = false;
+
+	@Override
+	public void readExternal(ObjectInput objIn) throws IOException, ClassNotFoundException {
+   		int extVersion = objIn.readInt();
+   		saveStateName = objIn.readUTF();
+   		if (readStateNamesMode)
+   			return;
+   		
+   		if (extVersion == Emulator.externalizeVersion) { // save version check
+   	   		IK1302 = (MCU) objIn.readObject();
+   	   		IK1303 = (MCU) objIn.readObject();
+   	   		IK1306 = (MCU) objIn.readObject();
+   	   		IR2_1 = (Memory) objIn.readObject();
+   	   		IR2_2 = (Memory) objIn.readObject();
+   	   		angle_mode = objIn.readInt();
+   	   		speed_mode = objIn.readInt();
+   		} else {
+   			throw new ClassNotFoundException();
+   		}
+   	}
+
+	@Override
+	public void writeExternal(ObjectOutput objOut) throws IOException {
+   		objOut.writeInt(externalizeVersion);
+   		objOut.writeUTF(saveStateName);
+   		objOut.writeObject(IK1302);
+   		objOut.writeObject(IK1303);
+   		objOut.writeObject(IK1306);
+   		objOut.writeObject(IR2_1);
+   		objOut.writeObject(IR2_2);
+   		objOut.writeInt(angle_mode);
+   		objOut.writeInt(speed_mode);
+	}
+}
diff --git a/pmk/src/com/cax/pmk/emulator/MCU.java b/pmk/src/com/cax/pmk/emulator/MCU.java
new file mode 100644
index 0000000..10c3662
--- /dev/null
+++ b/pmk/src/com/cax/pmk/emulator/MCU.java
@@ -0,0 +1,250 @@
+package com.cax.pmk.emulator;
+
+import java.io.*;
+
+public class MCU implements Externalizable 
+{
+	public MCU() {
+		R  = new int[ARRAY_SIZE];
+		M  = new int[ARRAY_SIZE];
+		ST = new int[ARRAY_SIZE];
+
+		ind_comma = new boolean[14];
+
+		for (int ix = 0; ix < ARRAY_SIZE; ix++) {
+			R[ix] = 0; M[ix] = 0; ST[ix] = 0;
+		}
+
+		S = 0; S1 = 0;
+		L = 0; T = 0; P = 0;
+		microtick = 0; mcmd = 0;
+		keyb_x = 0; keyb_y = 0; comma = 0;
+		in = 0; out = 0;
+		AMK = 0; ASP = 0; AK = 0; MOD = 0;
+		redraw_indic = false;
+
+		for(int ix = 0; ix < IND_COMMA_SIZE; ix++) {
+			ind_comma[ix] = false;
+		}
+	}
+
+	public void tick() {
+		int tick_0123 = microtick & 3;
+		int chetv_1248 = 1 << tick_0123;
+		int signal_I = microtick >>> 2;
+		int signal_D = microtick / 12 | 0;
+		//int signal_E = (microtick >>> 2) % 3;
+		boolean keyb_processed = false;
+		
+		if (microtick == 0) {
+			AK = R[36] + 16 * R[39];
+			if ((cmd_rom[AK] & 0xfc0000) == 0) T = 0;
+		}
+		
+		if (chetv_1248 == 1) {
+			int k = microtick / 36 | 0;
+			if (k < 3) ASP = 0xff & cmd_rom[AK];
+			else if (k == 3) ASP = 0xff & cmd_rom[AK] >>> 8;
+			else if (k == 4) {
+				ASP = 0xff & cmd_rom[AK] >>> 16;
+				if (ASP > 0x1f) {
+					if (microtick == 144) {
+						R[37] = ASP & 0xf;
+						R[40] = ASP >>> 4;
+					}
+					ASP = 0x5f;
+				}
+			}
+			MOD = 0xff & cmd_rom[AK] >>> 24;
+			AMK = synchro_rom[ASP * 9 + J[microtick >>> 2]];
+			AMK = AMK & 0x3f;
+			if (AMK > 59) {
+				AMK = (AMK - 60) * 2;
+				if (L == 0) AMK++;
+				AMK += 60;
+			}
+			mcmd = ucmd_rom[AMK];
+		}
+		
+		int alpha = 0, beta = 0, gamma = 0;
+		
+		switch (mcmd >>> 24 & 3) {
+			case 2:
+			case 3:
+				if ((microtick / 12 | 0) != keyb_x - 1)
+					if (keyb_y > 0) {
+						if (chetv_1248 == 1) S1 |= keyb_y;
+						keyb_processed = true;
+					}
+				break;
+		}
+		
+		if ((mcmd & 1) > 0) alpha |= R[signal_I];
+		if ((mcmd & 2) > 0) alpha |= M[signal_I];
+		if ((mcmd & 4) > 0) alpha |= ST[signal_I];
+		if ((mcmd & 8) > 0) alpha |= ~R[signal_I] & 0xf;
+		if ((mcmd & 16) > 0) if (L == 0) alpha |= 0xa;
+		if ((mcmd & 32) > 0) alpha |= S;
+		if ((mcmd & 64) > 0) alpha |= 4;
+		if ((mcmd >>> 7 & 16) > 0) beta |= 1;
+		if ((mcmd >>> 7 & 8) > 0) beta |= 6;
+		if ((mcmd >>> 7 & 4) > 0) beta |= S1;
+		if ((mcmd >>> 7 & 2) > 0) beta |= ~S & 0xf;
+		if ((mcmd >>> 7 & 1) > 0) beta |= S;
+		if ((cmd_rom[AK] & 0xfc0000) > 0) {
+			if (keyb_y == 0) T = 0;
+		}
+		else 
+		{
+			redraw_indic = true;
+			if ((microtick / 12 | 0) == keyb_x - 1)
+				if (keyb_y > 0) {
+					S1 = keyb_y;
+					T = 1;
+					keyb_processed = true;
+				}
+			if (tick_0123 == 0)
+				if (signal_D >= 0 && signal_D < 12)
+					if (L > 0) comma = signal_D;
+			ind_comma[signal_D] = L > 0;
+		}
+		if ((mcmd >>> 12 & 4) > 0) gamma = ~T & 1;
+		if ((mcmd >>> 12 & 2) > 0) gamma |= ~L & 1;
+		if ((mcmd >>> 12 & 1) > 0) gamma |= L & 1;
+		
+		int sum = alpha + beta + gamma;
+		int sigma = sum & 0xf;
+		P = sum >>> 4;
+		
+		if (MOD == 0 || (microtick >>> 2) >= 36) {
+			switch (mcmd >>> 15 & 7) {
+				case 1: R[signal_I] = R[(signal_I + 3) % ARRAY_SIZE]; break;
+				case 2: R[signal_I] = sigma; break;
+				case 3: R[signal_I] = S; break;
+				case 4: R[signal_I] = R[signal_I] | S | sigma; break;
+				case 5: R[signal_I] = S | sigma; break;
+				case 6: R[signal_I] = R[signal_I] | S; break;
+				case 7: R[signal_I] = R[signal_I] | sigma; break;
+			}
+			if ((mcmd >>> 18 & 1) > 0) R[(signal_I + 41) % ARRAY_SIZE] = sigma;
+			if ((mcmd >>> 19 & 1) > 0) R[(signal_I + 40) % ARRAY_SIZE] = sigma;
+		}
+		if ((mcmd >>> 21 & 1) > 0) L = 1 & P;
+		if ((mcmd >>> 20 & 1) > 0) M[signal_I] = S;
+		
+		switch (mcmd >>> 22 & 3) {
+			case 1: S = S1; break;
+			case 2: S = sigma; break;
+			case 3: S = S1 | sigma; break;
+		}
+		
+		switch (mcmd >>> 24 & 3) {
+			case 1: S1 = sigma; break;
+			//case 2: S1 = S1; break;
+			case 3: S1 = S1 | sigma; break;
+		}
+
+        int x, y, z;
+		switch (mcmd >>> 26 & 3) {
+			case 1:	ST[(signal_I + 2) % ARRAY_SIZE] = ST[(signal_I + 1) % ARRAY_SIZE];
+				ST[(signal_I + 1) % ARRAY_SIZE] = ST[signal_I];
+				ST[signal_I] = sigma;
+				break;
+			case 2:	x = ST[signal_I];
+				ST[signal_I] = ST[(signal_I + 1) % ARRAY_SIZE];
+				ST[(signal_I + 1) % ARRAY_SIZE] = ST[(signal_I + 2) % ARRAY_SIZE];
+				ST[(signal_I + 2) % ARRAY_SIZE] = x;
+				break;
+			case 3:	x = ST[signal_I];
+				y = ST[(signal_I + 1) % ARRAY_SIZE];
+				z = ST[(signal_I + 2) % ARRAY_SIZE];
+				ST[(signal_I + 0) % ARRAY_SIZE] = sigma | y;
+				ST[(signal_I + 1) % ARRAY_SIZE] = x | z;
+				ST[(signal_I + 2) % ARRAY_SIZE] = y | x;
+				break;
+		}
+		
+		out = 0xf & M[signal_I];
+		M[signal_I] = in;
+		microtick += 4;
+		if (microtick > 167) microtick = 0;
+		
+		if (keyb_processed) keyb_x = keyb_y = 0;
+	}
+
+	transient int[] ucmd_rom;
+	transient int[] cmd_rom;
+	transient int[] synchro_rom;
+
+	int[] R;
+	int[] M;
+	int[] ST;
+	int S, S1, L, T, P, microtick, mcmd, keyb_x, keyb_y, comma, in, out, AMK, ASP, AK, MOD;
+	boolean[] ind_comma;
+	boolean redraw_indic;
+	
+	private static final int[] J = {
+		0, 1, 2, 3, 4, 5,
+		3, 4, 5, 3, 4, 5,
+		3, 4, 5, 3, 4, 5,
+		3, 4, 5, 3, 4, 5,
+		6, 7, 8, 0, 1, 2,
+		3, 4, 5, 6, 7, 8,
+		0, 1, 2, 3, 4, 5
+	};
+
+	private static final int ARRAY_SIZE = 42;
+	private static final int IND_COMMA_SIZE = 14;
+
+	private static final long serialVersionUID = 1;
+
+	@Override
+	public void readExternal(ObjectInput objIn) throws IOException, ClassNotFoundException {
+        for (int i = 0; i < ARRAY_SIZE; i++) R[i]  = objIn.readInt();
+        for (int i = 0; i < ARRAY_SIZE; i++) M[i]  = objIn.readInt();
+        for (int i = 0; i < ARRAY_SIZE; i++) ST[i] = objIn.readInt();
+        for (int i = 0; i < IND_COMMA_SIZE; i++) ind_comma[i] = objIn.readBoolean();
+        redraw_indic = objIn.readBoolean();
+        S 			= objIn.readInt();
+        S1 			= objIn.readInt();
+        L 			= objIn.readInt();
+        T 			= objIn.readInt();
+        P 			= objIn.readInt();
+        microtick 	= objIn.readInt();
+        mcmd 		= objIn.readInt();
+        keyb_x 		= objIn.readInt();
+        keyb_y 		= objIn.readInt();
+        comma 		= objIn.readInt();
+        in 			= objIn.readInt();
+        out 		= objIn.readInt();
+        AMK 		= objIn.readInt();
+        ASP 		= objIn.readInt();
+        AK 			= objIn.readInt();
+        MOD 		= objIn.readInt();
+	}
+
+	@Override
+	public void writeExternal(ObjectOutput objOut) throws IOException {
+        for (int i = 0; i < ARRAY_SIZE; i++) objOut.writeInt(R[i]);
+        for (int i = 0; i < ARRAY_SIZE; i++) objOut.writeInt(M[i]);
+        for (int i = 0; i < ARRAY_SIZE; i++) objOut.writeInt(ST[i]);
+        for (int i = 0; i < IND_COMMA_SIZE; i++) objOut.writeBoolean(ind_comma[i]);
+        objOut.writeBoolean(redraw_indic);
+		objOut.writeInt(S);
+		objOut.writeInt(S1);
+		objOut.writeInt(L);
+		objOut.writeInt(T);
+		objOut.writeInt(P);
+		objOut.writeInt(microtick);
+		objOut.writeInt(mcmd);
+		objOut.writeInt(keyb_x);
+		objOut.writeInt(keyb_y);
+		objOut.writeInt(comma);
+		objOut.writeInt(in);
+		objOut.writeInt(out);
+		objOut.writeInt(AMK);
+		objOut.writeInt(ASP);
+		objOut.writeInt(AK);
+		objOut.writeInt(MOD);
+	}
+}
diff --git a/pmk/src/com/cax/pmk/emulator/MCommands.java b/pmk/src/com/cax/pmk/emulator/MCommands.java
new file mode 100755
index 0000000..5c38385
--- /dev/null
+++ b/pmk/src/com/cax/pmk/emulator/MCommands.java
@@ -0,0 +1,608 @@
+package com.cax.pmk.emulator;
+
+public class MCommands
+{
+  public static final int[] ik1302_mrom = {
+    //0x00
+    0x00204E4E,    0x00117360,    0x00114840,    0x01040240,
+    0x00164040,    0x001B3240,    0x00064640,    0x015B4013,
+    0x00D93130,    0x00001040,    0x01A52014,    0x00000000,
+    0x00000000,    0x00000000,    0x00000000,    0x00C12040,
+    //0x10
+    0x00D0536D,    0x00517740,    0x00B43130,    0x00B22223,
+    0x00C15340,    0x00FD2040,    0x002D1D1D,    0x0008403B,
+    0x00092140,    0x00094061,    0x000A2140,    0x00082140,
+    0x000D7076,    0x010D400D,    0x000A403B,    0x00056D40,
+    //0x20
+    0x00100259,    0x010B1340,    0x00242044,    0x010B7840,
+    0x00064002,    0x01FF2008,    0x0008565A,    0x0126403F,
+    0x016C400D,    0x00C12077,    0x00517740,    0x00517740,
+    0x00083240,    0x010C400D,    0x01FF200A,    0x010B3568,
+    //0x30
+    0x00117B5A,    0x0021206D,    0x01222034,    0x01015C5B,
+    0x01D03454,    0x00005E5D,    0x010E400D,    0x010E0044,
+    0x00F44E40,    0x009A206D,    0x00F44E5A,    0x00000000,
+    0x00000000,    0x00000000,    0x00000000,    0x00C11D1D,
+    0x00063333,    0x010B403B,    0x01344043,    0x00096A6A,
+    0x000A4443,    0x00792120,    0x01D32047,    0x00081E1E,
+    0x01AF1140,    0x00AB1D1D,    0x0039324C,    0x000B324C,
+    0x0008326D,    0x000D404C,    0x00854D40,    0x00134040,
+    0x0009404C,    0x006D7770,    0x006D7240,    0x01001640,
+    0x00A54C7E,    0x00F44E40,    0x01536900,    0x000A580E,
+    0x003C5262,    0x0005716D,    0x013C4013,    0x00104070,
+    0x00056F6D,    0x00A62070,    0x00106F40,    0x01056F40,
+    0x001F3E3D,    0x0028595A,    0x001E2223,    0x00064B40,
+    0x00524A40,    0x00692120,    0x001B4940,    0x00093240,
+    0x011F0140,    0x00154840,    0x00062423,    0x00062423,
+    0x01057340,    0x015E400D,    0x00095828,    0x00092223,
+    0x00992F40,    0x00982F40,    0x00622040,    0x005D5820,
+    0x00740F40,    0x00B81C20,    0x00D05373,    0x005B205C,
+    0x006D2062,    0x0133200A,    0x010B7D62,    0x00A52120,
+    0x01054072,    0x01494013,    0x01040540,    0x00217362,
+    0x013D6A40,    0x00067840,    0x01AB6C6D,    0x01332014,
+    0x000E7C6C,    0x00050B3F,    0x00C15340,    0x00950853,
+    0x00E0417A,    0x00E04240,    0x00532120,    0x00365562,
+    0x008F1E20,    0x013D1740,    0x004C2120,    0x0170406A,
+    0x00C05340,    0x00061D1D,    0x00814545,    0x00063333,
+    0x00061E1E,    0x00091E1E,    0x00900720,    0x01514078,
+    0x00081D1D,    0x01622206,    0x001E4545,    0x00114060,
+    0x000B2E40,    0x000F2D40,    0x010E1F40,    0x000D7677,
+    0x00D33C40,    0x01D32032,    0x00116E60,    0x011D3440,
+    0x00FF7440,    0x00073240,    0x001B430A,    0x01D32047,
+    0x00113434,    0x001E6E40,    0x00D33C40,    0x00937540,
+    0x00D01E20,    0x00043277,    0x00CA4020,    0x00107F54,
+    0x00212068,    0x000B7840,    0x017C400C,    0x00056F6D,
+    0x01470C40,    0x01716B62,    0x006B2120,    0x00332120,
+    0x006D204C,    0x00E67362,    0x010D0940,    0x00062423,
+    0x001A3A3A,    0x018F406F,    0x0151334C,    0x010D1716,
+    0x01D35340,    0x00D24061,    0x00CA6554,    0x00104064,
+    0x00512223,    0x00782120,    0x00263130,    0x001E3434,
+    0x00193838,    0x00183939,    0x000D6654,    0x010D7A40,
+    0x010E1740,    0x00057340,    0x00B86140,    0x00045263,
+    0x00122773,    0x008F5373,    0x002E5150,    0x0151404C,
+    0x001E3737,    0x00894E40,    0x001E3636,    0x006D563D,
+    0x00E07A41,    0x00E12973,    0x00082640,    0x00062540,
+    0x00D87967,    0x0005565A,    0x0005286C,    0x00762041,
+    0x00952040,    0x008F1D1D,    0x01D35340,    0x008F2040,
+    0x00CC4F4F,    0x00114060,    0x00054040,    0x001E3434,
+    0x01047340,    0x011E3434,    0x00C62C2B,    0x00C53130,
+    0x003E1D1D,    0x01041740,    0x001E3535,    0x00D35353,
+    0x00DE4077,    0x00E24057,    0x00064E68,    0x01E53812,
+    0x00D84067,    0x00064069,    0x000A402A,    0x00EF202A,
+    0x01015C5B,    0x00090F40,    0x00005E5D,    0x010B3613,
+    0x00144740,    0x01176806,    0x000A5A5A,    0x01D3200D
+  };
+
+  public static final int[] ik1303_mrom ={
+    0x00386050,
+    0x005B3F3E,
+    0x000F5970,
+    0x00152470,
+    0x000C3D50,
+    0x0011312F,
+    0x005B4544,
+    0x00165050,
+    0x000C3404,
+    0x005B3F3E,
+    0x00D40450,
+    0x00162424,
+    0x000C4962,
+    0x01FB5250,
+    0x000D4924,
+    0x01BB2222,
+    0x00155050,
+    0x010F5247,
+    0x00182525,
+    0x00080505,
+    0x000E041E,
+    0x00123433,
+    0x007F6425,
+    0x007F0D25,
+    0x01650950,
+    0x01176553,
+    0x007E2432,
+    0x00087150,
+    0x007E2455,
+    0x00135076,
+    0x00085977,
+    0x005B4544,
+    0x000C2E26,
+    0x00310D2E,
+    0x00100E35,
+    0x00316B47,
+    0x01381250,
+    0x0011302E,
+    0x01385F50,
+    0x00050250,
+    0x011C0101,
+    0x00195050,
+    0x00382C2C,
+    0x016F2222,
+    0x013A2222,
+    0x002F6B56,
+    0x00093D6C,
+    0x00F04D50,
+    0x000C1750,
+    0x00074A50,
+    0x01B45047,
+    0x003C2020,
+    0x01AA2B6A,
+    0x00123432,
+    0x001D4933,
+    0x0113500C,
+    0x00052556,
+    0x00087C50,
+    0x01130000,
+    0x00142B2B,
+    0x004A1D50,
+    0x006E5756,
+    0x00496050,
+    0x00E57D58,
+    0x011E5D22,
+    0x01F35F50,
+    0x00EA0505,
+    0x001C7A50,
+    0x01080B50,
+    0x0054244B,
+    0x000C4050,
+    0x002A2121,
+    0x00135C5C,
+    0x000A4650,
+    0x00152504,
+    0x009D2B60,
+    0x00064350,
+    0x00192020,
+    0x00292C2C,
+    0x01235C50,
+    0x006D3C3C,
+    0x0031017D,
+    0x00092D2D,
+    0x004E2D2D,
+    0x01596A7E,
+    0x00E3396E,
+    0x006E3654,
+    0x016E6E47,
+    0x00534950,
+    0x00EE2062,
+    0x0016226E,
+    0x00660525,
+    0x00135C5C,
+    0x000A4241,
+    0x00383B3B,
+    0x000C7277,
+    0x00360404,
+    0x00042020,
+    0x00100A2E,
+    0x00155050,
+    0x00532404,
+    0x0004642B,
+    0x01843C47,
+    0x01A35047,
+    0x01847250,
+    0x015C112F,
+    0x00080434,
+    0x00152F23,
+    0x00080505,
+    0x00906047,
+    0x0113150C,
+    0x006D2224,
+    0x00747250,
+    0x000C632B,
+    0x00AD672B,
+    0x000A612E,
+    0x01B97463,
+    0x00417374,
+    0x00BD0658,
+    0x00EA2450,
+    0x00087166,
+    0x01BD3950,
+    0x001A2E50,
+    0x00BD6047,
+    0x00175079,
+    0x005E6035,
+    0x000A3847,
+    0x01067F47,
+    0x008C5251,
+    0x0013612E,
+    0x0087602E,
+    0x005B3F3E,
+    0x00DC2121,
+    0x00177374,
+    0x00182525,
+    0x00286050,
+    0x00064F4E,
+    0x000C5251,
+    0x006E2926,
+    0x008F602F,
+    0x008C502A,
+    0x00172928,
+    0x00814F4E,
+    0x003F534B,
+    0x000F075B,
+    0x00082525,
+    0x01E85047,
+    0x00790505,
+    0x00152F23,
+    0x0017506A,
+    0x00095047,
+    0x00082525,
+    0x00E63A62,
+    0x00DA0B47,
+    0x01174150,
+    0x00182525,
+    0x00090450,
+    0x01175B50,
+    0x00094850,
+    0x001B2F50,
+    0x00806047,
+    0x000A3720,
+    0x0010382F,
+    0x002C0505,
+    0x009B5021,
+    0x00160505,
+    0x01ED3A50,
+    0x00040505,
+    0x00082525,
+    0x01080F50,
+    0x01B35047,
+    0x000D3D4C,
+    0x00180404,
+    0x01C03A50,
+    0x00E20421,
+    0x00287B50,
+    0x00097F26,
+    0x0013612E,
+    0x01B6112F,
+    0x00322425,
+    0x01B81847,
+    0x00BA714B,
+    0x00182450,
+    0x00080505,
+    0x00182525,
+    0x004F1D24,
+    0x00736F5C,
+    0x00A67569,
+    0x00AD2726,
+    0x01BE5022,
+    0x000A5E04,
+    0x00173A62,
+    0x00CB752E,
+    0x00B11E25,
+    0x00CB0953,
+    0x00085068,
+    0x002B2020,
+    0x01984150,
+    0x00C77C04,
+    0x00DA0950,
+    0x00160404,
+    0x00F56040,
+    0x00DE0450,
+    0x01CB1160,
+    0x00CF4950,
+    0x000A4747,
+    0x001F210B,
+    0x00145050,
+    0x01171050,
+    0x00052075,
+    0x001D3D37,
+    0x00365555,
+    0x00130101,
+    0x01D57424,
+    0x00D66047,
+    0x01C47850,
+    0x004D2C2C,
+    0x01174150,
+    0x00174847,
+    0x00C90350,
+    0x000A2760,
+    0x0019502E,
+    0x00D72C2C,
+    0x01174850,
+    0x006C224B,
+    0x000A495B,
+    0x00100E35,
+    0x00312104,
+    0x01C00850,
+    0x00115A2F,
+    0x00EA0505,
+    0x00080574,
+    0x00152F23,
+    0x005C6050,
+    0x01C94122,
+    0x01A42222,
+    0x00DF2847,
+    0x00C9202E,
+    0x00A76047,
+    0x0117502F,
+    0x002E2020,
+    0x01205048,
+    0x00F8606D,
+    0x002D604C,
+    0x00443A62,
+    0x000D3D2E,
+    0x015C3950,
+    0x01625022,
+    0x006E136E,
+    0x0031602E,
+    0x01085D1A,
+    0x010F6F50,
+    0x0017506A,
+    0x00FB5020,
+    0x000A3C47,
+    0x00174D50
+  };
+
+  public static final int[] ik1306_mrom = {
+      0x0070000, // 00.
+      0x0060040, // 01.
+      0x0076A2F, // 02.
+      0x00B4C00, // 03.
+      0x0090000, // 04.
+      0x00B4D00, // 05.
+      0x0090000, // 06.
+      0x0055300, // 07.
+      0x0090000, // 08.
+      0x00B5400, // 09.
+      0x0090000, // 0A.
+      0x0054600, // 0B.
+      0x0061000, // 0C.
+      0x00B4800, // 0D.
+      0x0065657, // 0E.
+      0x0057300, // 0F.
+
+      0x0090000, // 10.
+      0x0075655, // 11.
+      0x0071700, // 12.
+      0x0060040, // 13.
+      0x0070000, // 14.
+      0x0070000, // 15.
+      0x0074444, // 16.
+      0x00C4545, // 17.
+      0x0280058, // 18.
+      0x0682825, // 19.
+      0x08A0000, // 1A.
+      0x0280059, // 1B.
+      0x0800058, // 1C.
+      0x0800059, // 1D.
+      0x04D5F5F, // 1E.
+      0x0FB2F22, // 1F.
+
+      0x0FB2F21, // 20.
+      0x0F80000, // 21.
+      0x0FB2F20, // 22.
+      0x0940000, // 23.
+      0x0B80059, // 24.
+      0x0B80058, // 25.
+      0x0830000, // 26.
+      0x03D4343, // 27.
+      0x0075E5E, // 28.
+      0x0075B00, // 29.
+      0x0695900, // 2A.
+      0x007002B, // 2B.
+      0x0070028, // 2C.
+      0x0070003, // 2D.
+      0x0070028, // 2E.
+      0x0070052, // 2F.
+
+      0x0070015, // 30.
+      0x00C0037, // 31.
+      0x00F5C00, // 32.
+      0x0075C01, // 33.
+      0x0075D5D, // 34.
+      0x007285F, // 35.
+      0x0DC585B, // 36.
+      0x00C005C, // 37.
+      0x0680000, // 38.
+      0x0070A0A, // 39.
+      0x0075B59, // 3A.
+      0x0070254, // 3B.
+      0x02A5F5F, // 3C.
+      0x0075F5F, // 3D.
+      0x00B0076, // 3E.
+      0x0077700, // 3F.
+
+      0x00B0039, // 40.
+      0x0063A2A, // 41.
+      0x01B3B2A, // 42.
+      0x0682828, // 43.
+      0x0680000, // 44.
+      0x0F05800, // 45.
+      0x00B003D, // 46.
+      0x04A0000, // 47.
+      0x0053200, // 48.
+      0x0502800, // 49.
+      0x0054E00, // 4A.
+      0x0560000, // 4B.
+      0x0530000, // 4C.
+      0x00B0076, // 4D.
+      0x0077700, // 4E.
+      0x03E5F5F, // 4F.
+
+      0x0DC0058, // 50.
+      0x0050032, // 51.
+      0x0682828, // 52.
+      0x005002A, // 53.
+      0x0682C2C, // 54.
+      0x0682828, // 55.
+      0x0050039, // 56.
+      0x0682828, // 57.
+      0x0682C2C, // 58.
+      0x0CA0025, // 59.
+      0x0070013, // 5A.
+      0x0070066, // 5B.
+      0x0070014, // 5C.
+      0x0070066, // 5D.
+      0x0070014, // 5E.
+      0x0F6005F, // 5F.
+
+      0x00B3E00, // 60.
+      0x0065300, // 61.
+      0x00B4E00, // 62.
+      0x0065300, // 63.
+      0x0063B58, // 64.
+      0x0052A00, // 65.
+      0x0070058, // 66.
+      0x0184343, // 67.
+      0x0FC7576, // 68.
+      0x00A2828, // 69.
+      0x0052A00, // 6A.
+      0x0065300, // 6B.
+      0x00C0000, // 6C.
+      0x0180000, // 6D.
+      0x0682F2F, // 6E.
+      0x0053C00, // 6F.
+
+      0x0065300, // 70.
+      0x00C0000, // 71.
+      0x0182F2F, // 72.
+      0x0680000, // 73.
+      0x007042E, // 74.
+      0x0051600, // 75.
+      0x07A0000, // 76.
+      0x0070447, // 77.
+      0x00B164B, // 78.
+      0x0770000, // 79.
+      0x00C3119, // 7A.
+      0x0180000, // 7B.
+      0x007005D, // 7C.
+      0x0DC585F, // 7D.
+      0x0830000, // 7E.
+      0x0680000, // 7F.
+
+      0x0695E5E, // 80.
+      0x0830000, // 81.
+      0x0680000, // 82.
+      0x00A0009, // 83.
+      0x00B0016, // 84.
+      0x00B0061, // 85.
+      0x0185A5A, // 86.
+      0x0075866, // 87.
+      0x0F00900, // 88.
+      0x0840004, // 89.
+      0x0052F26, // 8A.
+      0x068002F, // 8B.
+      0x0680027, // 8C.
+      0x0056D00, // 8D.
+      0x0180000, // 8E.
+      0x0920000, // 8F.
+
+      0x0F00959, // 90.
+      0x0180000, // 91.
+      0x00A0000, // 92.
+      0x0B50015, // 93.
+      0x0070011, // 94.
+      0x0070052, // 95.
+      0x0070066, // 96.
+      0x0070001, // 97.
+      0x0070001, // 98.
+      0x0070066, // 99.
+      0x0070001, // 9A.
+      0x0070066, // 9B.
+      0x0070001, // 9C.
+      0x0070001, // 9D.
+      0x0070066, // 9E.
+      0x0070001, // 9F.
+
+      0x0070066, // A0.
+      0x0070002, // A1.
+      0x0070066, // A2.
+      0x0070001, // A3.
+      0x0075D5D, // A4.
+      0x0070052, // A5.
+      0x0075D5D, // A6.
+      0x0075D5D, // A7.
+      0x0590003, // A8.
+      0x00A5A00, // A9.
+      0x00B2A00, // AA.
+      0x01C7400, // AB.
+      0x00B3F00, // AC.
+      0x0185E00, // AD.
+      0x00B7458, // AE.
+      0x0B2005F, // AF.
+
+      0x0F00947, // B0.
+      0x0AE0000, // B1.
+      0x00B5E63, // B2.
+      0x0090000, // B3.
+      0x0186B2C, // B4.
+      0x00C006E, // B5.
+      0x0180000, // B6.
+      0x0180001, // B7.
+      0x0072828, // B8.
+      0x00B3000, // B9.
+      0x0680000, // BA.
+      0x00C3636, // BB.
+      0x0C10000, // BC.
+      0x0F07259, // BD.
+      0x0A90000, // BE.
+      0x0C45F00, // BF.
+
+      0x0073131, // C0.
+      0x0A95A5A, // C1.
+      0x0C45A5A, // C2.
+      0x0680000, // C3.
+      0x00A0000, // C4.
+      0x0690059, // C5.
+      0x0CA2C00, // C6.
+      0x0DC5931, // C7.
+      0x0DC596B, // C8.
+      0x08D0000, // C9.
+      0x00A5A5A, // CA.
+      0x007000E, // CB.
+      0x0072E2E, // CC.
+      0x0074242, // CD.
+      0x0073334, // CE.
+      0x00B6265, // CF.
+
+      0x0DB5E5E, // D0.
+      0x0070064, // D1.
+      0x007075F, // D2.
+      0x0075F51, // D3.
+      0x00B1A03, // D4.
+      0x00F0051, // D5.
+      0x0D40068, // D6.
+      0x0075F5F, // D7.
+      0x0070052, // D8.
+      0x0070065, // D9.
+      0x0CF0038, // DA.
+      0x0180067, // DB.
+      0x00A4242, // DC.
+      0x005004E, // DD.
+      0x0070051, // DE.
+      0x0066000, // DF.
+
+      0x0065300, // E0.
+      0x005004F, // E1.
+      0x0065300, // E2.
+      0x0064650, // E3.
+      0x005004F, // E4.
+      0x0070050, // E5.
+      0x0070059, // E6.
+      0x0070052, // E7.
+      0x01B353E, // E8.
+      0x005002A, // E9.
+      0x0070058, // EA.
+      0x007000E, // EB.
+      0x0063B51, // EC.
+      0x005004E, // ED.
+      0x0075800, // EE.
+      0x0184343, // EF.
+
+      0x00A4242, // F0.
+      0x0066000, // F1.
+      0x0063B00, // F2.
+      0x0070000, // F3.
+      0x0075000, // F4.
+      0x0605259, // F5.
+      0x0837125, // F6.
+      0x0680000, // F7.
+      0x0070023, // F8.
+      0x0070024, // F9.
+      0x0072F29, // FA.
+      0x0070041, // FB.
+      0x1060040, // FC.
+      0x0074900, // FD.
+      0x0075F5F, // FE.
+      0x0094A4A  // FF.
+  };
+}
\ No newline at end of file
diff --git a/pmk/src/com/cax/pmk/emulator/Memory.java b/pmk/src/com/cax/pmk/emulator/Memory.java
new file mode 100644
index 0000000..6d13616
--- /dev/null
+++ b/pmk/src/com/cax/pmk/emulator/Memory.java
@@ -0,0 +1,48 @@
+package com.cax.pmk.emulator;
+
+import java.io.*;
+
+public class Memory implements Externalizable
+{
+	public Memory()
+	{
+		for (int i = 0; i < MEM_SIZE; i++) M[i] = 0;
+	}
+
+	public final void tick()
+	{
+ 		if (microtick == MEM_SIZE) microtick = 0;
+		out = M[microtick];
+		M[(microtick + MEM_SIZE) % MEM_SIZE] = in;
+		microtick++;
+	}
+
+	public int in=0;
+	public int out=0;
+	public int microtick=0;
+
+	private int[] M = new int[MEM_SIZE];
+
+	private static final int MEM_SIZE = 252;
+
+	private static final long serialVersionUID = 1;
+
+	@Override
+	public void readExternal(ObjectInput objIn) throws IOException,	ClassNotFoundException {
+		  in        = objIn.readInt();
+          out       = objIn.readInt();
+          microtick = objIn.readInt();
+          for (int i = 0; i < MEM_SIZE; i++) M[i] = objIn.readInt();
+	}
+
+	@Override
+	public void writeExternal(ObjectOutput objOut) throws IOException {
+		  objOut.writeInt(in);
+		  objOut.writeInt(out);
+		  objOut.writeInt(microtick);
+          for (int i = 0; i < MEM_SIZE; i++) objOut.writeInt(M[i]);
+	}
+
+}
+
+
diff --git a/pmk/src/com/cax/pmk/emulator/Synchro.java b/pmk/src/com/cax/pmk/emulator/Synchro.java
new file mode 100755
index 0000000..17ae8f3
--- /dev/null
+++ b/pmk/src/com/cax/pmk/emulator/Synchro.java
@@ -0,0 +1,397 @@
+package com.cax.pmk.emulator;
+
+public class Synchro {
+
+  public static final int [] ik1302_srom = {
+    0x00, 0x00, 0x00, 0x10, 0x03, 0x1D, 0x00, 0x07, 0x1E, //0
+    0x10, 0x03, 0x1C, 0x0B, 0x07, 0x0C, 0x1E, 0x00, 0x00, //1
+    0x15, 0x18, 0x09, 0x16, 0x18, 0x09, 0x16, 0x18, 0x24,
+    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+    0x00, 0x03, 0x0E, 0x1E, 0x33, 0x00, 0x00, 0x00, 0x00,
+    0x23, 0x00, 0x00, 0x00, 0x2F, 0x00, 0x2C, 0x00, 0x01,
+    0x11, 0x32, 0x00, 0x00, 0x00, 0x03, 0x00, 0x0E, 0x1A,
+    0x0F, 0x0E, 0x0D, 0x19, 0x03, 0x2F, 0x0E, 0x0D, 0x08,
+    0x1C, 0x0C, 0x0D, 0x01, 0x00, 0x00, 0x03, 0x24, 0x0F,
+    0x1C, 0x0C, 0x2F, 0x09, 0x1E, 0x34, 0x0E, 0x1E, 0x0C,
+    0x06, 0x0A, 0x0D, 0x00, 0x00, 0x00, 0x00, 0x09, 0x0F,
+    0x38, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0A, 0x26, 0x06,
+    0x35, 0x34, 0x0D, 0x24, 0x1E, 0x1A, 0x09, 0x0C, 0x0F,
+    0x3D, 0x00, 0x00, 0x1C, 0x03, 0x0E, 0x0A, 0x0F, 0x06,
+    0x3D, 0x00, 0x0E, 0x3F, 0x03, 0x01, 0x00, 0x00, 0x0E,
+    0x3F, 0x33, 0x0D, 0x01, 0x08, 0x00, 0x01, 0x08, 0x04,
+    0x06, 0x03, 0x0E, 0x2B, 0x3A, 0x09, 0x12, 0x1E, 0x33,
+    0x35, 0x03, 0x07, 0x0C, 0x1E, 0x1A, 0x00, 0x00, 0x00,
+    0x35, 0x0C, 0x2F, 0x0E, 0x03, 0x01, 0x00, 0x00, 0x15,
+    0x24, 0x1E, 0x1A, 0x23, 0x1D, 0x00, 0x00, 0x00, 0x00,
+    0x09, 0x0C, 0x2F, 0x09, 0x03, 0x00, 0x24, 0x0C, 0x0F,
+    0x3D, 0x09, 0x1E, 0x3F, 0x03, 0x07, 0x0B, 0x22, 0x03,
+    0x07, 0x0B, 0x0D, 0x0C, 0x03, 0x0E, 0x1E, 0x3A, 0x2B,
+    0x3C, 0x03, 0x00, 0x09, 0x34, 0x0E, 0x1E, 0x0C, 0x1E,
+    0x2E, 0x01, 0x31, 0x2E, 0x01, 0x31, 0x00, 0x00, 0x00,
+    0x2E, 0x30, 0x03, 0x2E, 0x30, 0x03, 0x00, 0x00, 0x00,
+    0x2E, 0x2D, 0x00, 0x2E, 0x2D, 0x00, 0x00, 0x00, 0x00,
+    0x3B, 0x04, 0x2F, 0x37, 0x12, 0x00, 0x00, 0x00, 0x00,
+    0x14, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00,
+    0x01, 0x13, 0x00, 0x01, 0x13, 0x00, 0x01, 0x13, 0x04,
+    0x2E, 0x00, 0x00, 0x2E, 0x00, 0x00, 0x2E, 0x00, 0x00,
+    0x3D, 0x07, 0x10, 0x3F, 0x03, 0x00, 0x2C, 0x07, 0x1E,
+    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04,
+    0x00, 0x0F, 0x10, 0x03, 0x00, 0x1C, 0x03, 0x0F, 0x1D,
+    0x03, 0x32, 0x00, 0x2B, 0x14, 0x00, 0x00, 0x08, 0x00,
+    0x04, 0x14, 0x00, 0x00, 0x32, 0x00, 0x00, 0x32, 0x0C,
+    0x0A, 0x32, 0x00, 0x00, 0x32, 0x00, 0x00, 0x32, 0x00,
+    0x21, 0x15, 0x18, 0x21, 0x16, 0x18, 0x00, 0x17, 0x18,
+    0x19, 0x1A, 0x18, 0x19, 0x16, 0x18, 0x09, 0x16, 0x18,
+    0x2B, 0x15, 0x00, 0x00, 0x17, 0x00, 0x00, 0x17, 0x00,
+    0x12, 0x1B, 0x0E, 0x0F, 0x1B, 0x0E, 0x23, 0x2B, 0x0A,
+    0x2C, 0x18, 0x00, 0x2A, 0x18, 0x07, 0x0B, 0x03, 0x04,
+    0x32, 0x14, 0x00, 0x32, 0x32, 0x11, 0x00, 0x08, 0x00,
+    0x09, 0x0C, 0x15, 0x03, 0x00, 0x00, 0x06, 0x3C, 0x00,
+    0x00, 0x2C, 0x00, 0x00, 0x2A, 0x00, 0x09, 0x16, 0x00,
+    0x00, 0x00, 0x11, 0x00, 0x09, 0x16, 0x18, 0x09, 0x1E,
+    0x00, 0x00, 0x07, 0x0A, 0x29, 0x3E, 0x33, 0x29, 0x00,
+    0x0F, 0x0B, 0x0F, 0x10, 0x03, 0x08, 0x24, 0x03, 0x23,
+    0x32, 0x01, 0x1D, 0x32, 0x08, 0x00, 0x32, 0x08, 0x32,
+    0x32, 0x08, 0x23, 0x32, 0x08, 0x0F, 0x23, 0x23, 0x04,
+    0x09, 0x1E, 0x0F, 0x00, 0x00, 0x14, 0x00, 0x00, 0x08,
+    0x37, 0x00, 0x00, 0x37, 0x00, 0x00, 0x37, 0x00, 0x00,
+    0x01, 0x31, 0x00, 0x01, 0x31, 0x00, 0x01, 0x31, 0x36,
+    0x1A, 0x30, 0x0D, 0x00, 0x30, 0x0D, 0x00, 0x30, 0x0D,
+    0x30, 0x03, 0x00, 0x30, 0x03, 0x00, 0x30, 0x03, 0x2B,
+    0x2D, 0x00, 0x00, 0x2D, 0x00, 0x00, 0x2D, 0x00, 0x00,
+    0x0A, 0x30, 0x03, 0x00, 0x30, 0x03, 0x00, 0x30, 0x03,
+    0x00, 0x01, 0x31, 0x00, 0x01, 0x31, 0x00, 0x01, 0x31,
+    0x00, 0x2D, 0x00, 0x00, 0x2D, 0x00, 0x00, 0x2D, 0x00,
+    0x2C, 0x00, 0x00, 0x2A, 0x00, 0x00, 0x09, 0x18, 0x00,
+    0x07, 0x1E, 0x0F, 0x01, 0x00, 0x08, 0x1C, 0x0A, 0x08,
+    0x14, 0x00, 0x00, 0x32, 0x00, 0x00, 0x32, 0x2B, 0x00,
+    0x32, 0x00, 0x00, 0x32, 0x27, 0x36, 0x08, 0x09, 0x0C,
+    0x1E, 0x02, 0x1D, 0x0F, 0x0C, 0x0F, 0x26, 0x07, 0x22,
+    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+    0x1D, 0x23, 0x23, 0x09, 0x23, 0x0C, 0x03, 0x23, 0x23,
+    0x02, 0x35, 0x03, 0x0F, 0x00, 0x00, 0x00, 0x04, 0x0C,
+    0x01, 0x12, 0x00, 0x08, 0x00, 0x32, 0x0A, 0x00, 0x00,
+    0x06, 0x18, 0x00, 0x17, 0x18, 0x00, 0x17, 0x18, 0x00,
+    0x00, 0x01, 0x13, 0x00, 0x01, 0x13, 0x04, 0x01, 0x13,
+    0x00, 0x00, 0x00, 0x09, 0x15, 0x18, 0x00, 0x35, 0x03,
+    0x0E, 0x03, 0x09, 0x0C, 0x1B, 0x1E, 0x0F, 0x1B, 0x08,
+    0x00, 0x00, 0x1C, 0x03, 0x1E, 0x15, 0x02, 0x0C, 0x00,
+    0x07, 0x1E, 0x10, 0x0F, 0x09, 0x32, 0x1E, 0x0F, 0x08,
+    0x09, 0x1E, 0x1A, 0x18, 0x1D, 0x17, 0x03, 0x0F, 0x3D,
+    0x07, 0x0B, 0x1A, 0x1D, 0x28, 0x00, 0x0E, 0x28, 0x08,
+    0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x03, 0x00, 0x09,
+    0x00, 0x04, 0x2B, 0x23, 0x04, 0x08, 0x08, 0x00, 0x08,
+    0x0E, 0x03, 0x00, 0x2B, 0x2F, 0x0D, 0x12, 0x03, 0x04,
+    0x01, 0x08, 0x00, 0x01, 0x08, 0x00, 0x01, 0x08, 0x04,
+    0x0F, 0x1D, 0x2F, 0x0E, 0x03, 0x23, 0x07, 0x1E, 0x0D,
+    0x0F, 0x12, 0x00, 0x23, 0x24, 0x1E, 0x23, 0x0F, 0x04,
+    0x26, 0x12, 0x15, 0x03, 0x12, 0x04, 0x24, 0x2F, 0x0F,
+    0x12, 0x04, 0x01, 0x0F, 0x07, 0x1E, 0x0F, 0x00, 0x01,
+    0x0E, 0x0F, 0x20, 0x05, 0x00, 0x07, 0x12, 0x0E, 0x08,
+    0x1E, 0x00, 0x10, 0x03, 0x0F, 0x04, 0x00, 0x00, 0x00,
+    0x32, 0x00, 0x00, 0x32, 0x00, 0x00, 0x00, 0x03, 0x00,
+    0x00, 0x00, 0x01, 0x00, 0x00, 0x05, 0x00, 0x17, 0x0D,
+    0x00, 0x00, 0x00, 0x0A, 0x1A, 0x18, 0x00, 0x17, 0x03,
+    0x32, 0x09, 0x0F, 0x32, 0x07, 0x0C, 0x0C, 0x1A, 0x0F,
+    0x14, 0x00, 0x00, 0x32, 0x00, 0x00, 0x32, 0x00, 0x00,
+    0x0E, 0x1E, 0x15, 0x00, 0x00, 0x02, 0x00, 0x00, 0x02,
+    0x00, 0x0E, 0x08, 0x0E, 0x1D, 0x23, 0x1E, 0x3A, 0x3A, //wa
+    0x1D, 0x04, 0x15, 0x00, 0x00, 0x3A, 0x00, 0x00, 0x3A, //wait 4 press
+    0x00, 0x00, 0x3A, 0x00, 0x0D, 0x0E, 0x03, 0x0F, 0x00,
+    0x3B, 0x3C, 0x2F, 0x37, 0x3C, 0x01, 0x00, 0x00, 0x00,
+    0x00, 0x00, 0x00, 0x00, 0x30, 0x00, 0x02, 0x24, 0x1E,
+    0x00, 0x00, 0x00, 0x00, 0x07, 0x0B, 0x22, 0x03, 0x04,
+    0x00, 0x00, 0x39, 0x04, 0x25, 0x08, 0x03, 0x07, 0x0F, //. 108  //6c
+    0x12, 0x2C, 0x00, 0x2B, 0x2A, 0x26, 0x0D, 0x07, 0x0F,
+    0x04, 0x0B, 0x08, 0x01, 0x10, 0x0D, 0x09, 0x00, 0x00,
+    0x00, 0x01, 0x08, 0x04, 0x01, 0x08, 0x23, 0x01, 0x08,
+    0x00, 0x00, 0x1B, 0x00, 0x00, 0x1B, 0x1F, 0x0E, 0x1B,
+    0x00, 0x00, 0x00, 0x00, 0x00, 0x2C, 0x00, 0x1B, 0x00,
+    0x00, 0x00, 0x01, 0x0F, 0x0D, 0x01, 0x09, 0x1E, 0x2B,
+    0x00, 0x23, 0x1A, 0x07, 0x1E, 0x0C, 0x0F, 0x00, 0x00,
+    0x1E, 0x12, 0x00, 0x00, 0x12, 0x00, 0x00, 0x12, 0x1A,
+    0x1E, 0x00, 0x10, 0x0F, 0x24, 0x1E, 0x34, 0x1D, 0x00,
+    0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x09, 0x2F, 0x01,
+    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x12, 0x09, 0x15,
+    0x00, 0x00, 0x00, 0x00, 0x00, 0x28, 0x00, 0x00, 0x28,
+    0x00, 0x00, 0x2B, 0x00, 0x00, 0x00, 0x09, 0x0C, 0x23,
+    0x24, 0x0C, 0x1E, 0x0F, 0x00, 0x07, 0x03, 0x0F, 0x00,
+    0x00, 0x00, 0x01, 0x0F, 0x07, 0x0B, 0x0F, 0x25, 0x0F, //.123  //7b
+    0x0F, 0x04, 0x00, 0x00, 0x00, 0x12, 0x09, 0x0C, 0x12,
+    0x00, 0x00, 0x00, 0x12, 0x00, 0x00, 0x00, 0x09, 0x0C,
+    0x03, 0x00, 0x00, 0x00, 0x04, 0x32, 0x24, 0x0F, 0x23,
+    0x0E, 0x0D, 0x00, 0x00, 0x00, 0x00, 0x09, 0x1E, 0x1A,
+    0x07, 0x0B, 0x0F, 0x07, 0x0C, 0x1E, 0x1A, 0x0F, 0x00,
+    0x0E, 0x0D, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x08,
+    0x12, 0x00, 0x01, 0x0B, 0x00, 0x00, 0x00, 0x00, 0x09,
+    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x0B,
+    0x00, 0x00, 0x12, 0x00, 0x00, 0x12, 0x04, 0x0C, 0x12,
+    0x32, 0x00, 0x00, 0x32, 0x00, 0x00, 0x08, 0x36, 0x00,
+    0x02, 0x0D, 0x00, 0x01, 0x0F, 0x0D, 0x00, 0x0E, 0x1E,
+    0x1E, 0x00, 0x10, 0x0F, 0x07, 0x0B, 0x34, 0x0F, 0x1D,
+    0x1D, 0x04, 0x08, 0x36, 0x00, 0x08, 0x12, 0x00, 0x00,
+    0x03, 0x1E, 0x0F, 0x26, 0x0A, 0x02, 0x26, 0x3E, 0x08
+  };
+
+  public static final int[] ik1303_srom = {
+0x2C, 0x23, 0x00, 0x2C, 0x23, 0x00, 0x2C, 0x23, 0x30,
+0x31, 0x32, 0x00, 0x31, 0x32, 0x12, 0x31, 0x32, 0x30,
+0x00, 0x00, 0x00, 0x11, 0x23, 0x00, 0x1F, 0x06, 0x00,
+0x31, 0x00, 0x1C, 0x31, 0x00, 0x00, 0x31, 0x08, 0x1D,
+0x2C, 0x02, 0x0E, 0x2C, 0x02, 0x01, 0x2C, 0x02, 0x08,
+0x08, 0x3A, 0x00, 0x00, 0x3A, 0x01, 0x05, 0x3A, 0x11,
+0x18, 0x0A, 0x2B, 0x00, 0x01, 0x33, 0x02, 0x24, 0x25,
+0x37, 0x3A, 0x18, 0x31, 0x3A, 0x1F, 0x31, 0x3A, 0x3D,
+0x37, 0x02, 0x06, 0x31, 0x02, 0x12, 0x31, 0x10, 0x19,
+0x39, 0x02, 0x26, 0x33, 0x09, 0x08, 0x19, 0x19, 0x08,
+0x01, 0x14, 0x0C, 0x00, 0x00, 0x00, 0x1B, 0x06, 0x01,
+0x26, 0x00, 0x21, 0x12, 0x14, 0x24, 0x06, 0x12, 0x00,
+0x39, 0x00, 0x21, 0x08, 0x22, 0x00, 0x10, 0x14, 0x00,
+0x20, 0x00, 0x00, 0x39, 0x02, 0x00, 0x06, 0x25, 0x25,
+0x19, 0x02, 0x16, 0x09, 0x11, 0x19, 0x16, 0x11, 0x13,
+0x18, 0x08, 0x10, 0x18, 0x00, 0x01, 0x1F, 0x06, 0x12,
+0x1A, 0x12, 0x2E, 0x19, 0x02, 0x00, 0x33, 0x38, 0x00,
+0x0D, 0x06, 0x3B, 0x13, 0x0A, 0x02, 0x00, 0x27, 0x00,
+0x00, 0x00, 0x33, 0x13, 0x3C, 0x00, 0x11, 0x14, 0x04,
+0x11, 0x1D, 0x34, 0x13, 0x01, 0x00, 0x14, 0x27, 0x00,
+0x2C, 0x10, 0x21, 0x2C, 0x02, 0x33, 0x00, 0x00, 0x00,
+0x37, 0x12, 0x2A, 0x31, 0x02, 0x00, 0x12, 0x06, 0x09,
+0x37, 0x12, 0x2A, 0x31, 0x14, 0x0C, 0x00, 0x00, 0x00,
+0x39, 0x0D, 0x12, 0x10, 0x0F, 0x00, 0x00, 0x27, 0x03,
+0x37, 0x12, 0x0C, 0x31, 0x05, 0x00, 0x31, 0x00, 0x00,
+0x37, 0x20, 0x0A, 0x31, 0x00, 0x00, 0x00, 0x00, 0x00,
+0x11, 0x13, 0x0E, 0x01, 0x0D, 0x11, 0x05, 0x25, 0x24,
+0x0A, 0x24, 0x0C, 0x08, 0x0D, 0x21, 0x00, 0x00, 0x00,
+0x37, 0x06, 0x3A, 0x31, 0x05, 0x02, 0x0A, 0x1D, 0x16,
+0x38, 0x14, 0x0C, 0x00, 0x08, 0x06, 0x20, 0x1B, 0x34,
+0x0E, 0x02, 0x06, 0x00, 0x02, 0x1F, 0x19, 0x20, 0x08,
+0x37, 0x10, 0x21, 0x31, 0x12, 0x0C, 0x00, 0x00, 0x00,
+0x01, 0x2D, 0x30, 0x01, 0x2D, 0x00, 0x01, 0x2D, 0x30,
+0x33, 0x34, 0x06, 0x01, 0x18, 0x00, 0x01, 0x18, 0x08,
+0x31, 0x20, 0x34, 0x31, 0x20, 0x05, 0x31, 0x20, 0x08,
+0x1F, 0x3A, 0x20, 0x14, 0x3A, 0x20, 0x0C, 0x00, 0x20,
+0x0A, 0x20, 0x06, 0x30, 0x1F, 0x0C, 0x00, 0x20, 0x00,
+0x35, 0x20, 0x05, 0x34, 0x14, 0x09, 0x30, 0x20, 0x11,
+0x08, 0x18, 0x18, 0x08, 0x18, 0x18, 0x08, 0x33, 0x20,
+0x04, 0x16, 0x06, 0x36, 0x06, 0x0C, 0x01, 0x03, 0x00,
+0x2F, 0x08, 0x18, 0x1C, 0x00, 0x18, 0x00, 0x20, 0x18,
+0x00, 0x18, 0x14, 0x35, 0x1D, 0x06, 0x14, 0x00, 0x3B,
+0x06, 0x20, 0x05, 0x34, 0x14, 0x09, 0x19, 0x00, 0x21,
+0x05, 0x3A, 0x3A, 0x06, 0x3A, 0x3A, 0x05, 0x3A, 0x3A,
+0x01, 0x23, 0x00, 0x01, 0x23, 0x00, 0x01, 0x23, 0x08,
+0x01, 0x32, 0x02, 0x01, 0x32, 0x02, 0x01, 0x32, 0x02,
+0x15, 0x04, 0x03, 0x15, 0x17, 0x03, 0x15, 0x17, 0x03,
+0x07, 0x2B, 0x03, 0x07, 0x17, 0x03, 0x07, 0x17, 0x03,
+0x04, 0x1E, 0x06, 0x1E, 0x3F, 0x0E, 0x09, 0x11, 0x13,
+0x0F, 0x29, 0x05, 0x09, 0x28, 0x09, 0x09, 0x09, 0x01,
+0x08, 0x0B, 0x0B, 0x1B, 0x0B, 0x0B, 0x1E, 0x0B, 0x00,
+0x08, 0x0B, 0x0B, 0x0E, 0x0B, 0x0B, 0x1A, 0x0B, 0x00,
+0x11, 0x1D, 0x06, 0x08, 0x10, 0x04, 0x02, 0x06, 0x2F,
+0x1F, 0x1C, 0x2F, 0x00, 0x1C, 0x1C, 0x09, 0x18, 0x11,
+0x0B, 0x0C, 0x0C, 0x0B, 0x02, 0x30, 0x00, 0x00, 0x00,
+0x25, 0x1C, 0x04, 0x01, 0x1C, 0x1D, 0x1D, 0x06, 0x08,
+0x01, 0x30, 0x21, 0x3F, 0x2E, 0x11, 0x19, 0x25, 0x01,
+0x16, 0x00, 0x00, 0x03, 0x0C, 0x0A, 0x19, 0x0A, 0x19,
+0x0E, 0x16, 0x1B, 0x11, 0x1D, 0x10, 0x3C, 0x3A, 0x05,
+0x20, 0x08, 0x10, 0x06, 0x22, 0x19, 0x02, 0x22, 0x18,
+0x06, 0x0C, 0x01, 0x10, 0x00, 0x00, 0x00, 0x11, 0x13,
+0x0A, 0x2B, 0x03, 0x0A, 0x17, 0x03, 0x0A, 0x17, 0x03,
+0x12, 0x14, 0x06, 0x12, 0x02, 0x00, 0x0A, 0x02, 0x00,
+0x0A, 0x24, 0x0C, 0x00, 0x0A, 0x21, 0x06, 0x20, 0x18,
+0x0A, 0x21, 0x21, 0x35, 0x02, 0x08, 0x10, 0x02, 0x05,
+0x00, 0x12, 0x0F, 0x11, 0x24, 0x21, 0x35, 0x02, 0x05,
+0x06, 0x25, 0x0C, 0x06, 0x02, 0x12, 0x14, 0x02, 0x18,
+0x12, 0x20, 0x14, 0x00, 0x00, 0x21, 0x18, 0x12, 0x0B,
+0x0A, 0x24, 0x06, 0x00, 0x20, 0x08, 0x25, 0x02, 0x00,
+0x24, 0x02, 0x35, 0x18, 0x12, 0x14, 0x34, 0x00, 0x18,
+0x12, 0x14, 0x0C, 0x00, 0x0A, 0x21, 0x35, 0x02, 0x00,
+0x00, 0x26, 0x03, 0x06, 0x27, 0x03, 0x06, 0x27, 0x03,
+0x26, 0x03, 0x00, 0x27, 0x03, 0x00, 0x27, 0x03, 0x00,
+0x11, 0x04, 0x03, 0x00, 0x36, 0x03, 0x00, 0x36, 0x03,
+0x06, 0x04, 0x03, 0x07, 0x17, 0x03, 0x07, 0x17, 0x03,
+0x0A, 0x20, 0x24, 0x25, 0x03, 0x06, 0x08, 0x02, 0x0B,
+0x12, 0x04, 0x16, 0x0A, 0x17, 0x03, 0x0A, 0x17, 0x03,
+0x07, 0x2B, 0x00, 0x07, 0x17, 0x00, 0x07, 0x17, 0x25,
+0x00, 0x07, 0x2B, 0x03, 0x07, 0x17, 0x03, 0x07, 0x17,
+0x03, 0x36, 0x03, 0x11, 0x24, 0x1D, 0x24, 0x03, 0x06,
+0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+0x00, 0x15, 0x04, 0x03, 0x15, 0x17, 0x03, 0x15, 0x17,
+0x03, 0x12, 0x1D, 0x1D, 0x14, 0x06, 0x12, 0x06, 0x00,
+0x1C, 0x1C, 0x00, 0x1C, 0x2F, 0x00, 0x06, 0x20, 0x20,
+0x00, 0x0B, 0x02, 0x00, 0x0B, 0x02, 0x00, 0x36, 0x00,
+0x01, 0x18, 0x18, 0x01, 0x18, 0x18, 0x01, 0x18, 0x18,
+0x00, 0x00, 0x00, 0x33, 0x00, 0x08, 0x18, 0x04, 0x28,
+0x1F, 0x0C, 0x08, 0x25, 0x06, 0x0E, 0x06, 0x00, 0x18,
+0x06, 0x0E, 0x00, 0x16, 0x16, 0x00, 0x1D, 0x20, 0x20,
+0x18, 0x07, 0x06, 0x35, 0x10, 0x34, 0x05, 0x09, 0x24,
+0x05, 0x09, 0x09, 0x09, 0x09, 0x01, 0x0D, 0x10, 0x09,
+0x08, 0x25, 0x33, 0x2E, 0x06, 0x1B, 0x06, 0x00, 0x13,
+0x1C, 0x00, 0x00, 0x1C, 0x00, 0x00, 0x1C, 0x00, 0x38,
+0x1D, 0x3D, 0x05, 0x1D, 0x3D, 0x05, 0x1D, 0x3D, 0x05,
+0x1D, 0x20, 0x1D, 0x00, 0x18, 0x00, 0x33, 0x34, 0x06,
+0x39, 0x3C, 0x21, 0x01, 0x3C, 0x01, 0x06, 0x1F, 0x19,
+0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08,
+0x0A, 0x17, 0x03, 0x11, 0x13, 0x14, 0x00, 0x05, 0x35,
+0x00, 0x05, 0x34, 0x00, 0x00, 0x34, 0x00, 0x00, 0x34,
+0x38, 0x04, 0x02, 0x33, 0x00, 0x11, 0x04, 0x00, 0x00,
+0x0C, 0x00, 0x26, 0x33, 0x09, 0x09, 0x20, 0x08, 0x18,
+0x0F, 0x36, 0x00, 0x00, 0x00, 0x00, 0x00, 0x27, 0x05,
+0x30, 0x09, 0x20, 0x20, 0x06, 0x20, 0x21, 0x00, 0x00,
+0x0A, 0x3A, 0x10, 0x2B, 0x18, 0x38, 0x38, 0x0E, 0x02,
+0x16, 0x0C, 0x35, 0x05, 0x00, 0x00, 0x19, 0x30, 0x00,
+0x08, 0x1C, 0x18, 0x00, 0x1C, 0x00, 0x00, 0x05, 0x3A,
+0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x38, 0x20,
+0x1F, 0x0C, 0x08, 0x25, 0x06, 0x08, 0x00, 0x00, 0x34,
+0x06, 0x1C, 0x05, 0x25, 0x1C, 0x25, 0x1F, 0x18, 0x34,
+0x33, 0x20, 0x26, 0x0B, 0x02, 0x00, 0x34, 0x09, 0x09,
+0x00, 0x06, 0x36, 0x00, 0x00, 0x11, 0x24, 0x0B, 0x34,
+0x20, 0x20, 0x00, 0x00, 0x39, 0x02, 0x08, 0x1D, 0x00,
+0x00, 0x08, 0x00, 0x3E, 0x00, 0x00, 0x37, 0x08, 0x1D,
+0x00, 0x00, 0x20, 0x00, 0x35, 0x20, 0x05, 0x34, 0x34,
+0x12, 0x14, 0x24, 0x34, 0x2E, 0x30, 0x1F, 0x06, 0x08,
+0x01, 0x05, 0x30, 0x04, 0x30, 0x2E, 0x06, 0x0E, 0x00,
+0x36, 0x00, 0x00, 0x00, 0x00, 0x00, 0x34, 0x34, 0x00,
+0x0A, 0x06, 0x1B, 0x1F, 0x00, 0x00, 0x25, 0x00, 0x3B,
+0x25, 0x10, 0x06, 0x00, 0x00, 0x0A, 0x10, 0x07, 0x03,
+0x0A, 0x10, 0x01, 0x00, 0x00, 0x00, 0x16, 0x19, 0x35,
+0x06, 0x12, 0x10, 0x19, 0x10, 0x00, 0x00, 0x00, 0x3A,
+0x11, 0x06, 0x09, 0x35, 0x16, 0x10, 0x3E, 0x13, 0x0D,
+0x24, 0x3D, 0x10, 0x0E, 0x12, 0x33, 0x03, 0x06, 0x30,
+0x00, 0x26, 0x00, 0x00, 0x27, 0x00, 0x00, 0x3B, 0x08,
+0x06, 0x0C, 0x0C, 0x20, 0x0A, 0x06, 0x11, 0x14, 0x00,
+0x18, 0x24, 0x06, 0x0A, 0x10, 0x18, 0x11, 0x24, 0x18,
+0x10, 0x25, 0x05, 0x06, 0x3C, 0x05, 0x06, 0x00, 0x00,
+0x06, 0x0C, 0x0C, 0x00, 0x00, 0x12, 0x24, 0x1D, 0x1D
+};
+
+  public static final int[] ik1306_srom = {
+    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+    0x2C, 0x2A, 0x27, 0x13, 0x2B, 0x27, 0x13, 0x2B, 0x27,
+    0x34, 0x2A, 0x27, 0x13, 0x2B, 0x27, 0x13, 0x2B, 0x27,
+    0x29, 0x2A, 0x35, 0x29, 0x2B, 0x35, 0x29, 0x2B, 0x35,
+    0x29, 0x12, 0x35, 0x29, 0x3F, 0x35, 0x29, 0x3F, 0x35,
+    0x2E, 0x00, 0x00, 0x2D, 0x02, 0x00, 0x00, 0x00, 0x00,
+    0x2A, 0x02, 0x00, 0x2D, 0x02, 0x00, 0x00, 0x00, 0x00,
+    0x03, 0x12, 0x05, 0x2D, 0x02, 0x00, 0x00, 0x00, 0x00,
+    0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F,
+    0x0E, 0x02, 0x00, 0x24, 0x02, 0x00, 0x24, 0x02, 0x00,
+    0x30, 0x1D, 0x05, 0x2F, 0x1D, 0x00, 0x00, 0x1D, 0x00,
+    0x22, 0x00, 0x00, 0x2D, 0x02, 0x00, 0x00, 0x00, 0x00,
+    0x0C, 0x00, 0x00, 0x2D, 0x02, 0x00, 0x00, 0x00, 0x00,
+    0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F,
+    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x24, 0x25, 0x00,
+    0x31, 0x00, 0x00, 0x2D, 0x02, 0x00, 0x00, 0x00, 0x00,
+    0x0E, 0x0F, 0x0F, 0x00, 0x00, 0x00, 0x0F, 0x0F, 0x0F,
+    0x0E, 0x34, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+    0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+    0x00, 0x00, 0x00, 0x00, 0x03, 0x18, 0x00, 0x00, 0x00,
+    0x18, 0x25, 0x00, 0x03, 0x18, 0x00, 0x00, 0x00, 0x00,
+    0x1B, 0x03, 0x39, 0x00, 0x00, 0x00, 0x14, 0x18, 0x00,
+    0x36, 0x00, 0x00, 0x03, 0x0B, 0x00, 0x00, 0x00, 0x00,
+    0x00, 0x00, 0x00, 0x03, 0x18, 0x00, 0x00, 0x00, 0x00,
+    0x37, 0x1E, 0x00, 0x00, 0x1E, 0x00, 0x00, 0x00, 0x00,
+    0x01, 0x06, 0x07, 0x01, 0x06, 0x07, 0x01, 0x06, 0x07,
+    0x34, 0x12, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+    0x3C, 0x00, 0x00, 0x2D, 0x02, 0x00, 0x00, 0x00, 0x00,
+    0x3E, 0x00, 0x00, 0x2D, 0x02, 0x00, 0x00, 0x00, 0x00,
+    0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F,
+    0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F,
+    0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F,
+    0x01, 0x25, 0x00, 0x01, 0x25, 0x00, 0x24, 0x02, 0x00,
+    0x03, 0x04, 0x02, 0x03, 0x04, 0x02, 0x24, 0x02, 0x00,
+    0x01, 0x06, 0x07, 0x01, 0x06, 0x07, 0x24, 0x02, 0x00,
+    0x01, 0x04, 0x08, 0x01, 0x04, 0x08, 0x24, 0x00, 0x1A,
+    0x03, 0x06, 0x09, 0x03, 0x06, 0x09, 0x24, 0x00, 0x02,
+    0x03, 0x25, 0x00, 0x03, 0x25, 0x00, 0x24, 0x25, 0x00,
+    0x03, 0x00, 0x38, 0x03, 0x00, 0x0B, 0x03, 0x25, 0x00,
+    0x24, 0x25, 0x00, 0x24, 0x25, 0x0E, 0x05, 0x00, 0x00,
+    0x03, 0x25, 0x00, 0x03, 0x25, 0x00, 0x03, 0x25, 0x00,
+    0x00, 0x00, 0x19, 0x05, 0x00, 0x19, 0x05, 0x00, 0x00,
+    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x29, 0x12,
+    0x00, 0x21, 0x00, 0x00, 0x21, 0x24, 0x25, 0x03, 0x25,
+    0x00, 0x0D, 0x02, 0x00, 0x0D, 0x02, 0x00, 0x0D, 0x02,
+    0x00, 0x17, 0x00, 0x00, 0x17, 0x24, 0x05, 0x00, 0x00,
+    0x24, 0x00, 0x05, 0x24, 0x00, 0x05, 0x24, 0x00, 0x05,
+    0x24, 0x25, 0x00, 0x24, 0x25, 0x00, 0x24, 0x25, 0x00,
+    0x13, 0x0A, 0x00, 0x00, 0x03, 0x0B, 0x00, 0x28, 0x00,
+    0x00, 0x03, 0x05, 0x00, 0x03, 0x05, 0x00, 0x03, 0x05,
+    0x1B, 0x03, 0x00, 0x0B, 0x03, 0x0B, 0x00, 0x00, 0x00,
+    0x2C, 0x02, 0x00, 0x24, 0x02, 0x00, 0x24, 0x02, 0x00,
+    0x0E, 0x0F, 0x0F, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00,
+    0x0E, 0x0F, 0x0F, 0x00, 0x00, 0x00, 0x0F, 0x0F, 0x00,
+    0x00, 0x16, 0x00, 0x00, 0x16, 0x00, 0x00, 0x16, 0x00,
+    0x00, 0x17, 0x00, 0x00, 0x17, 0x00, 0x00, 0x00, 0x21,
+    0x00, 0x00, 0x17, 0x00, 0x00, 0x17, 0x24, 0x02, 0x00,
+    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x29, 0x12, 0x00,
+    0x14, 0x0F, 0x0F, 0x00, 0x00, 0x00, 0x0F, 0x00, 0x00,
+    0x24, 0x0F, 0x0F, 0x00, 0x00, 0x00, 0x0F, 0x00, 0x00,
+    0x13, 0x0A, 0x00, 0x00, 0x03, 0x0B, 0x00, 0x00, 0x00,
+    0x1B, 0x18, 0x0B, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+    0x13, 0x0F, 0x0F, 0x00, 0x00, 0x00, 0x00, 0x2A, 0x00,
+    0x1B, 0x03, 0x3D, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+    0x00, 0x3B, 0x00, 0x00, 0x3B, 0x00, 0x12, 0x14, 0x00,
+    0x0E, 0x00, 0x00, 0x0F, 0x00, 0x00, 0x05, 0x24, 0x02,
+    0x03, 0x00, 0x25, 0x03, 0x00, 0x25, 0x03, 0x00, 0x25,
+    0x00, 0x00, 0x20, 0x00, 0x00, 0x20, 0x00, 0x00, 0x20,
+    0x00, 0x11, 0x05, 0x00, 0x11, 0x05, 0x00, 0x11, 0x05,
+    0x00, 0x11, 0x25, 0x00, 0x11, 0x25, 0x00, 0x11, 0x25,
+    0x0E, 0x0F, 0x0F, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00,
+    0x03, 0x00, 0x00, 0x33, 0x00, 0x00, 0x00, 0x00, 0x00,
+    0x0E, 0x0F, 0x0F, 0x2A, 0x0F, 0x0F, 0x12, 0x00, 0x00,
+    0x00, 0x00, 0x00, 0x1B, 0x1C, 0x00, 0x00, 0x00, 0x00,
+    0x03, 0x15, 0x00, 0x03, 0x15, 0x00, 0x03, 0x15, 0x00,
+    0x1B, 0x02, 0x00, 0x00, 0x00, 0x00, 0x1B, 0x02, 0x00,
+    0x00, 0x00, 0x00, 0x03, 0x00, 0x12, 0x00, 0x00, 0x00,
+    0x00, 0x00, 0x00, 0x03, 0x12, 0x12, 0x12, 0x12, 0x00,
+    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x24, 0x23, 0x02,
+    0x00, 0x00, 0x00, 0x00, 0x00, 0x24, 0x23, 0x02, 0x00,
+    0x26, 0x27, 0x00, 0x28, 0x27, 0x00, 0x28, 0x27, 0x00,
+    0x00, 0x26, 0x27, 0x00, 0x28, 0x27, 0x00, 0x28, 0x27,
+    0x29, 0x2A, 0x27, 0x29, 0x2B, 0x27, 0x29, 0x2B, 0x3A,
+    0x0E, 0x12, 0x12, 0x12, 0x00, 0x00, 0x10, 0x00, 0x00,
+    0x0E, 0x12, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00,
+    0x0E, 0x0F, 0x0F, 0x00, 0x00, 0x0F, 0x0F, 0x0F, 0x00,
+    0x00, 0x00, 0x00, 0x25, 0x00, 0x0E, 0x0F, 0x0F, 0x0F,
+    0x0E, 0x0F, 0x0F, 0x00, 0x00, 0x0F, 0x0F, 0x0F, 0x0F,
+    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0E, 0x18, 0x00,
+    0x24, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+    0x00, 0x1D, 0x00, 0x00, 0x1D, 0x00, 0x00, 0x1D, 0x00,
+    0x1F, 0x1A, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+    0x00, 0x16, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+    0x00, 0x16, 0x05, 0x00, 0x16, 0x05, 0x00, 0x16, 0x05,
+    0x00, 0x16, 0x02, 0x00, 0x16, 0x02, 0x00, 0x16, 0x02,
+    0x03, 0x21, 0x02, 0x03, 0x21, 0x02, 0x03, 0x21, 0x02,
+    0x18, 0x0F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+    0x00, 0x00, 0x00, 0x1B, 0x03, 0x0B, 0x00, 0x00, 0x00,
+    0x03, 0x12, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+    0x00, 0x00, 0x00, 0x1B, 0x03, 0x3D, 0x00, 0x00, 0x00,
+    0x24, 0x18, 0x03, 0x18, 0x05, 0x03, 0x18, 0x05, 0x00,
+    0x03, 0x00, 0x32, 0x03, 0x00, 0x32, 0x03, 0x00, 0x32,
+    0x24, 0x33, 0x00, 0x00, 0x33, 0x00, 0x00, 0x00, 0x00,
+    0x00, 0x00, 0x21, 0x00, 0x00, 0x21, 0x00, 0x00, 0x00,
+    0x00, 0x2C, 0x2A, 0x27, 0x13, 0x2B, 0x27, 0x00, 0x00,
+    0x03, 0x25, 0x00, 0x03, 0x25, 0x00, 0x13, 0x09, 0x00,
+    0x00, 0x3B, 0x05, 0x00, 0x3B, 0x05, 0x00, 0x3B, 0x05,
+    0x00, 0x0D, 0x05, 0x00, 0x0D, 0x05, 0x00, 0x0D, 0x05,
+    0x13, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07,
+    0x1B, 0x18, 0x0B, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+    0x00, 0x17, 0x00, 0x00, 0x17, 0x0E, 0x05, 0x0D, 0x02,
+    0x18, 0x00, 0x25, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+    0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00,
+    0x13, 0x09, 0x00, 0x00, 0x09, 0x00, 0x00, 0x09, 0x00,
+    0x0E, 0x0F, 0x02, 0x24, 0x25, 0x00, 0x24, 0x25, 0x00,
+    0x00, 0x00, 0x00, 0x29, 0x0F, 0x0F, 0x0F, 0x12, 0x00,
+    0x00, 0x29, 0x12, 0x00, 0x29, 0x3F, 0x00, 0x13, 0x0F,
+    0x00, 0x3D, 0x00, 0x00, 0x3D, 0x00, 0x00, 0x3D, 0x00,
+    0x1B, 0x03, 0x00, 0x0B, 0x03, 0x0B, 0x13, 0x39, 0x24,
+    0x0E, 0x02, 0x00, 0x24, 0x02, 0x00, 0x13, 0x07, 0x00,
+    0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F,
+    0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F,
+    0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F,
+    0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F,
+    0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F,
+    0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F,
+    0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F,
+    0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F
+  };
+}
\ No newline at end of file
diff --git a/pmk/src/com/cax/pmk/emulator/UCommands.java b/pmk/src/com/cax/pmk/emulator/UCommands.java
new file mode 100755
index 0000000..b66e0c2
--- /dev/null
+++ b/pmk/src/com/cax/pmk/emulator/UCommands.java
@@ -0,0 +1,217 @@
+package com.cax.pmk.emulator;
+
+public class UCommands
+{
+  public static final int[] ik1302_urom ={
+     0x0000000,
+     0x0800001,
+     0x0A00820,
+     0x0040020,
+     0x0A03120,
+     0x0203081,
+     0x0A00181,
+     0x0803800,
+     0x0818001,
+     0x0800400,
+     0x0A00089,
+     0x0A03C20,
+     0x0800820,
+     0x0080020,
+     0x0800120,
+     0x1400020,
+     0x0800081,
+     0x0210801,
+     0x0040000,
+     0x0058001,
+     0x0808001,
+     0x0A03081,
+     0x0A01081,
+     0x0A01181,
+     0x0040090,
+     0x0800401,
+     0x0A00081,
+     0x0040001,
+     0x0800801,
+     0x1000000,
+     0x0800100,
+     0x1200801,
+     0x0013C01,
+     0x0800008,
+     0x0A00088,
+     0x0010200,
+     0x0800040,
+     0x0800280,
+     0x1801200,
+     0x1000208,
+     0x0080001,
+     0x0A00082,
+     0x0A01008,
+     0x1000001,
+     0x0A00808,
+     0x0900001,
+     0x8010004,
+     0x0080820,
+     0x0800002,
+     0x0140002,
+     0x0008000,
+     0x0A00090,
+     0x0A00220,
+     0x0801001,
+     0x1203200,
+     0x4800001,
+     0x0011801,
+     0x1008001,
+     0x0A04020,
+     0x4800801,
+     0x0840801,
+     0x0840020,
+     0x0013081,
+     0x0010801,
+     0x0818180,
+     0x0800180,
+     0x0A00081,
+     0x0800001
+};
+
+public static final int[] ik1303_urom = {
+       0x0000000,
+       0x0800001,
+       0x0040020,
+       0x1440090,
+       0x0A00081,
+       0x1000000,
+       0x1400020,
+       0x0800008,
+       0x0A03180,
+       0x1002200,
+       0x0800400,
+       0x1418001,
+       0x0080020,
+       0x0841020,
+       0x0203100,
+       0x0203088,
+       0x0A00820,
+       0x0800120,
+       0x08001C0,
+       0x0810081,
+       0x0A00089,
+       0x0800401,
+       0x0A010A0,
+       0x0A01081,
+       0x0818001,
+       0x1A00220,
+       0x0201100,
+       0x0203420,
+       0x0008000,
+       0x0801020,
+       0x0201420,
+       0x0801190,
+       0x0040000,
+       0x0080820,
+       0x0800002,
+       0x0140002,
+       0x0800100,
+       0x0A03C20,
+       0x0A00808,
+       0x0A01008,
+       0x0200540,
+       0x0601209,
+       0x0083100,
+       0x0A03081,
+       0x8800004,
+       0x0058001,
+       0x1001280,
+       0x1008001,
+       0x1200209,
+       0x4018001,
+       0x0040002,
+       0x1000001,
+       0x0010200,
+       0x0800840,
+       0x0A01181,
+       0x4018801,
+       0x0A10181,
+       0x0800801,
+       0x0040001,
+       0x0011190,
+       0x0858001,
+       0x0040020,
+       0x3200209,
+       0x08000C0,
+       0x4000020,
+       0x0600081,
+       0x1000000,
+       0x1000180
+};
+
+  public static final int[] ik1306_urom = {
+    0x0000000,
+    0x0800008,
+    0x0040020,
+    0x0800001,
+    0x0800021,
+    0x0080020,
+    0x0A00028,
+    0x0040100,
+    0x4000100,
+    0x0010100,
+    0x0A00101,
+    0x0201089,
+    0x0213201,
+    0x0800004,
+    0x0800800,
+    0x0800820,
+    0x0200088,
+    0x4810002,
+    0x0A00820,
+    0x0800400,
+    0x0801000,
+    0x0100000,
+    0x8800004,
+    0x0008000,
+    0x1400020,
+    0x0800005,
+    0x4000020,
+    0x0A00180,
+    0x0100000,
+    0x4000001,
+    0x8241004,
+    0x0400000,
+    0x0080001,
+    0x0040001,
+    0x0212801,
+    0x0200808,
+    0x0800000,
+    0x0010020,
+    0x0A00808,
+    0x0040090,
+    0x0A01008,
+    0x0800401,
+    0x0A00081,
+    0x0A01081,
+    0x0803400,
+    0x0A01001,
+    0x0A11801,
+    0x0011001,
+    0x0A10801,
+    0x0213801,
+    0x0098001,
+    0x0818001,
+    0x0800420,
+    0x0880090,
+    0x0203C08,
+    0x0200809,
+    0x0A00089,
+    0x0203090,
+    0x0840090,
+    0x0810002,
+    0x0210801,
+    0x0210081,
+    0x0010000,
+    0x0200090,
+    0x0210081,
+    0x0212801,
+    0x0A01020,
+    0x0A01020
+  };
+}
\ No newline at end of file
diff --git a/pmk/src/com/cax/pmk/Emulator.java b/pmk/src/com/cax/pmk/felix/Emulator.java
similarity index 79%
rename from pmk/src/com/cax/pmk/Emulator.java
rename to pmk/src/com/cax/pmk/felix/Emulator.java
index beaabe5..2cc6dc5 100644
--- a/pmk/src/com/cax/pmk/Emulator.java
+++ b/pmk/src/com/cax/pmk/felix/Emulator.java
@@ -1,24 +1,37 @@
-package com.cax.pmk;
+package com.cax.pmk.felix;
 
-import java.io.Serializable;
+import java.io.*;
+import com.cax.pmk.*;
 import java.util.Arrays;
 
-public class Emulator extends Thread implements Serializable
+public class Emulator extends Thread implements EmulatorInterface
 {
-    public final void setMode(int mode)
-    {
-        this.mode = mode;
-    }
+	private transient static MCU.ucmd_u[] ik1302_ucrom; 
+	private transient static MCU.ucmd_u[] ik1303_ucrom; 
+	private transient static MCU.ucmd_u[] ik1306_ucrom; 
 
-    public int getMode() {
-    	return mode;
-    }
+	static { 
+    	ik1302_ucrom = new MCU.ucmd_u[68];
+    	ik1303_ucrom = new MCU.ucmd_u[68];
+    	ik1306_ucrom = new MCU.ucmd_u[68];
+
+    	for (int i=0; i < 68; i++) {
+            ik1302_ucrom[i] = new MCU.ucmd_u(UCommands.ik1302_urom[i]);
+    	    ik1303_ucrom[i] = new MCU.ucmd_u(UCommands.ik1303_urom[i]);
+    	    ik1306_ucrom[i] = new MCU.ucmd_u(UCommands.ik1306_urom[i]);
+    	}
+	}
+	
+	public final void setAngleMode(int mode) { this.mode = mode; }
+    public int getAngleMode() { return mode; }
+	public final void setSpeedMode(int mode) { }
+    public int getSpeedMode() { return 0; }
     
-    public final void keypad(int key)
+    public final void keypad(int keycode)
     {
         if (btnpressed != 0)
             return; //already processing one
-        btnpressed = key;
+        btnpressed = keycode = (keycode / 10) * 256 + keycode % 10;
     }
 
     public Emulator()
@@ -206,6 +219,10 @@ public class Emulator extends Thread implements Serializable
 			{
 				displayString.append('.');
 			}
+			else
+			{
+				displayString.append('/');
+			}
 		}
 		for(i = 0;i<3;i++)
 		{
@@ -214,6 +231,10 @@ public class Emulator extends Thread implements Serializable
 			{
 				displayString.append('.');
 			}
+			else
+			{
+				displayString.append('/');
+			}
 		}
 
 		mainActivity.setDisplay(displayString.toString());
@@ -238,10 +259,10 @@ public class Emulator extends Thread implements Serializable
     /// int ticks = 0;
 
     private void loadRom() {
-        ik1302.ucrom = UCommands.ik1302_urom;
-        ik1303.ucrom = UCommands.ik1303_urom;
-        ik1306.ucrom = UCommands.ik1306_urom;
-
+    	ik1302.ucrom = ik1302_ucrom;
+    	ik1303.ucrom = ik1303_ucrom;
+    	ik1306.ucrom = ik1306_ucrom;
+    	
         ik1302.asprom = Synchro.ik1302_srom;
         ik1303.asprom = Synchro.ik1303_srom;
         ik1306.asprom = Synchro.ik1306_srom;
@@ -276,4 +297,16 @@ public class Emulator extends Thread implements Serializable
     private static final char[] segments = {'0','1','2','3','4','5','6','7','8','9','-','L','C','D','E',' '};
    	private static final byte[] emptyDisplay = {0xF, 0xF, 0xF, 0xF, 0xF, 0xF, 0xF, 0xF, 0xF, 0xF, 0xF, 0xF};
 	private static final long serialVersionUID = 1L;
+
+	@Override
+	public void readExternal(ObjectInput arg0) throws IOException,
+			ClassNotFoundException {
+		// TODO Auto-generated method stub
+		
+	}
+	@Override
+	public void writeExternal(ObjectOutput arg0) throws IOException {
+		// TODO Auto-generated method stub
+		
+	}
 }
diff --git a/pmk/src/com/cax/pmk/MCU.java b/pmk/src/com/cax/pmk/felix/MCU.java
similarity index 86%
rename from pmk/src/com/cax/pmk/MCU.java
rename to pmk/src/com/cax/pmk/felix/MCU.java
index 7c34f14..5be312f 100644
--- a/pmk/src/com/cax/pmk/MCU.java
+++ b/pmk/src/com/cax/pmk/felix/MCU.java
@@ -1,4 +1,4 @@
-package com.cax.pmk;
+package com.cax.pmk.felix;
 
 import java.io.Serializable;
 
@@ -101,9 +101,9 @@ public class MCU implements Serializable
             ucmd+=0x3c;
         }
         
-        init_ucmd(ucrom[ucmd]);
+        ucmd_u c = ucrom[ucmd];
 
-        switch(s1)
+        switch(c.s1)
         {
             case 2:
                 rh[0] = ((((k2?1:0)<<3|(k1?1:0))>>ucount)&1)>0;
@@ -120,7 +120,7 @@ public class MCU implements Serializable
             latchk1 = k1;
             latchk2 = k2;
         }
-        if(g_nt)
+        if(c.g_nt)
         {
             was_t_qrd = true;
         }
@@ -135,83 +135,83 @@ public class MCU implements Serializable
         }
 
         {
-            if(g_nt | was_t_qrd)
+            if(c.g_nt | was_t_qrd)
             {
                 rs1[0] = ((((latchk2?1:0)<<3|(latchk1?1:0))>>ucount)&1)>0?true:false;
             }
         }
 
-        if(a_r)
+        if(c.a_r)
         {
             a|=rr[rrIx]?1:0;
         }
 
-        if(a_m)
+        if(c.a_m)
         {
             a|=rm[rmIx]?1:0;
         }
 
-        if(a_st)
+        if(c.a_st)
         {
             a|=rst[rstIx]?1:0;
         }
 
-        if(a_nr)
+        if(c.a_nr)
         {
             a|=(!rr[rrIx])?1:0;
         }
 
-        if(a_10nl)
+        if(c.a_10nl)
         {
             a|=((10>>ucount)&1) & ((!rl)?1:0);
         }
 
-        if(a_s)
+        if(c.a_s)
         {
             a|=rs[0]?1:0;
         }
 
-        if(a_4)
+        if(c.a_4)
         {
             a|=((4>>ucount)&1);
         }
 
-        if(b_1)
+        if(c.b_1)
         {
             b|=((1>>ucount)&1);
         }
 
-        if(b_6)
+        if(c.b_6)
         {
             b|=((6>>ucount)&1);
         }
 
-        if(b_s)
+        if(c.b_s)
         {
             b|=rs[0]?1:0;
         }
 
-        if(b_s1)
+        if(c.b_s1)
         {
             b|=rs1[0]?1:0;
         }
 
-        if(b_ns)
+        if(c.b_ns)
         {
             b|=(!rs[0])?1:0;
         }
 
-        if(g_l)
+        if(c.g_l)
         {
             g|=rl?1:0;
         }
 
-        if(g_nl)
+        if(c.g_nl)
         {
             g|=(!rl)?1:0;
         }
 
-        if(g_nt)
+        if(c.g_nt)
         {
              g|=(!rt)?1:0;
         }
@@ -225,7 +225,7 @@ public class MCU implements Serializable
         carry = ((sigma>>>1)&1)>0?true:false;
         sigma&=1;
 
-        switch(r0)
+        switch(c.r0)
         {
             case 0:
                 newr0 = rr[rrIx]?1:0;
@@ -252,7 +252,7 @@ public class MCU implements Serializable
                 newr0 = rr[rrIx]?1:0|sigma;
                 break;
         }
-        if(r_1)
+        if(c.r_1)
         {
             if(icount<36)
             {
@@ -266,7 +266,7 @@ public class MCU implements Serializable
                 rr[getRrIx(MCU_BITLEN-4)] = sigma!=0;
             }
         }
-        if(r_2)
+        if(c.r_2)
         {
             if(icount<36)
             {
@@ -281,7 +281,7 @@ public class MCU implements Serializable
             }
 
         }
-        if(l)
+        if(c.l)
         {
             if(ucount == 3)
             {
@@ -289,7 +289,7 @@ public class MCU implements Serializable
             }
         }
 
-        if(m)
+        if(c.m)
         {
             newm0 = rs[0]?1:0;
         }
@@ -298,7 +298,7 @@ public class MCU implements Serializable
             newm0 = rm[rmIx]?1:0;
         }
 
-        switch(s)
+        switch(c.s)
         {
             case 0:
                 temp = rs[0];
@@ -328,7 +328,7 @@ public class MCU implements Serializable
                 break;
         }
 
-        switch(s1)
+        switch(c.s1)
         {
             case 0:
                 temp = rs1[0];
@@ -364,7 +364,7 @@ public class MCU implements Serializable
 		rstIx4 = (rstIx + 4) % MCU_BITLEN;
 		rstIx8 = (rstIx + 8) % MCU_BITLEN;
 
-        switch(st)
+        switch(c.st)
         {
             case 1:
                 rst[rstIx8] = rst[rstIx4];
@@ -467,71 +467,72 @@ public class MCU implements Serializable
     }
 
     // ---------------------- ucmd_u start --------------------------------
-	public void init_ucmd(int u) {
-		 raw = u;
+    public static final class ucmd_u {
+	    public ucmd_u(int u) {
+			 raw = u;
+		
+			 a_r 	= (u & 1) > 0;
+			 a_m 	= ((u >>  1) & 1) > 0;
+			 a_st	= ((u >>  2) & 1) > 0;
+			 a_nr	= ((u >>  3) & 1) > 0;
+			 a_10nl	= ((u >>  4) & 1) > 0;
+			 a_s	= ((u >>  5) & 1) > 0;
+			 a_4	= ((u >>  6) & 1) > 0;
+			 b_s	= ((u >>  7) & 1) > 0;
+		
+			 b_ns	= ((u >>  8) & 1) > 0;
+			 b_s1	= ((u >>  9) & 1) > 0;
+			 b_6	= ((u >> 10) & 1) > 0;
+			 b_1	= ((u >> 11) & 1) > 0;
+			 g_l	= ((u >> 12) & 1) > 0;
+			 g_nl	= ((u >> 13) & 1) > 0;
+			 g_nt	= ((u >> 14) & 1) > 0;
+		
+			 r0		= (u >> 15) & 7;
+			 r_1	= ((u >> 18) & 1) > 0;
+			 r_2	= ((u >> 19) & 1) > 0;
+			 m		= ((u >> 20) & 1) > 0;
+			 l		= ((u >> 21) & 1) > 0;
+			 s		= (u >> 22) & 3;
+		
+			 s1		= (u >> 24) & 3;
+			 st		= (u >> 26) & 3;
+			 pad	= (u >> 28) & 15;
+	    }
 	
-		 a_r 	= (u & 1) > 0;
-		 a_m 	= ((u >>  1) & 1) > 0;
-		 a_st	= ((u >>  2) & 1) > 0;
-		 a_nr	= ((u >>  3) & 1) > 0;
-		 a_10nl	= ((u >>  4) & 1) > 0;
-		 a_s	= ((u >>  5) & 1) > 0;
-		 a_4	= ((u >>  6) & 1) > 0;
-		 b_s	= ((u >>  7) & 1) > 0;
-	
-		 b_ns	= ((u >>  8) & 1) > 0;
-		 b_s1	= ((u >>  9) & 1) > 0;
-		 b_6	= ((u >> 10) & 1) > 0;
-		 b_1	= ((u >> 11) & 1) > 0;
-		 g_l	= ((u >> 12) & 1) > 0;
-		 g_nl	= ((u >> 13) & 1) > 0;
-		 g_nt	= ((u >> 14) & 1) > 0;
-	
-		 r0		= (u >> 15) & 7;
-		 r_1	= ((u >> 18) & 1) > 0;
-		 r_2	= ((u >> 19) & 1) > 0;
-		 m		= ((u >> 20) & 1) > 0;
-		 l		= ((u >> 21) & 1) > 0;
-		 s		= (u >> 22) & 3;
-	
-		 s1		= (u >> 24) & 3;
-		 st		= (u >> 26) & 3;
-		 pad	= (u >> 28) & 15;
-	 }
-	
-	int raw;
-	
-	boolean a_r;
-	boolean a_m;
-	boolean a_st;
-	boolean a_nr;
-	boolean a_10nl;
-	boolean a_s;
-	boolean a_4;
-	boolean b_s;
-	
-	boolean b_ns;
-	boolean b_s1;
-	boolean b_6;
-	boolean b_1;
-	boolean g_l;
-	boolean g_nl;
-	boolean g_nt;
-	
-	int r0;
-	boolean r_1;
-	boolean r_2;
-	boolean m;
-	boolean l;
-	int s;
-	
-	int s1;
-	int st;
-	int pad;
-
+		int raw;
+		
+		boolean a_r;
+		boolean a_m;
+		boolean a_st;
+		boolean a_nr;
+		boolean a_10nl;
+		boolean a_s;
+		boolean a_4;
+		boolean b_s;
+		
+		boolean b_ns;
+		boolean b_s1;
+		boolean b_6;
+		boolean b_1;
+		boolean g_l;
+		boolean g_nl;
+		boolean g_nt;
+		
+		int r0;
+		boolean r_1;
+		boolean r_2;
+		boolean m;
+		boolean l;
+		int s;
+		
+		int s1;
+		int st;
+		int pad;
+    }
     // ---------------------- ucmd_u end --------------------------------
 
-    public int[]    ucrom = null;
+    public ucmd_u[] ucrom  = null;
     public byte[][] asprom = null;
     public int[]    cmdrom = null;
     public int dcount;
diff --git a/pmk/src/com/cax/pmk/MCommands.java b/pmk/src/com/cax/pmk/felix/MCommands.java
similarity index 95%
rename from pmk/src/com/cax/pmk/MCommands.java
rename to pmk/src/com/cax/pmk/felix/MCommands.java
index c502ff8..9e8f967 100644
--- a/pmk/src/com/cax/pmk/MCommands.java
+++ b/pmk/src/com/cax/pmk/felix/MCommands.java
@@ -1,4 +1,4 @@
-package com.cax.pmk;
+package com.cax.pmk.felix;
 
 public class MCommands
 {
diff --git a/pmk/src/com/cax/pmk/Memory.java b/pmk/src/com/cax/pmk/felix/Memory.java
similarity index 94%
rename from pmk/src/com/cax/pmk/Memory.java
rename to pmk/src/com/cax/pmk/felix/Memory.java
index 820e686..918ed83 100644
--- a/pmk/src/com/cax/pmk/Memory.java
+++ b/pmk/src/com/cax/pmk/felix/Memory.java
@@ -1,4 +1,4 @@
-package com.cax.pmk;
+package com.cax.pmk.felix;
 
 import java.io.Serializable;
 
diff --git a/pmk/src/com/cax/pmk/Synchro.java b/pmk/src/com/cax/pmk/felix/Synchro.java
similarity index 98%
rename from pmk/src/com/cax/pmk/Synchro.java
rename to pmk/src/com/cax/pmk/felix/Synchro.java
index 6ae6645..3d8b8db 100644
--- a/pmk/src/com/cax/pmk/Synchro.java
+++ b/pmk/src/com/cax/pmk/felix/Synchro.java
@@ -1,4 +1,4 @@
-package com.cax.pmk;
+package com.cax.pmk.felix;
 
 public class Synchro
 {
diff --git a/pmk/src/com/cax/pmk/UCommands.java b/pmk/src/com/cax/pmk/felix/UCommands.java
similarity index 93%
rename from pmk/src/com/cax/pmk/UCommands.java
rename to pmk/src/com/cax/pmk/felix/UCommands.java
index fbf15b2..d43cdbd 100644
--- a/pmk/src/com/cax/pmk/UCommands.java
+++ b/pmk/src/com/cax/pmk/felix/UCommands.java
@@ -1,4 +1,4 @@
-package com.cax.pmk;
+package com.cax.pmk.felix;
 
 public class UCommands
 {
