diff --git a/app/src/main/java/biz/binarysolutions/weatherusa/LocationActivity.java b/app/src/main/java/biz/binarysolutions/weatherusa/LocationActivity.java
index 4d975f2..b003f46 100644
--- a/app/src/main/java/biz/binarysolutions/weatherusa/LocationActivity.java
+++ b/app/src/main/java/biz/binarysolutions/weatherusa/LocationActivity.java
@@ -10,7 +10,7 @@ import android.widget.EditText;
 import android.widget.RadioButton;
 import android.widget.RadioGroup;
 
-import biz.binarysolutions.weatherusa.components.preferences.Preferences;
+import biz.binarysolutions.weatherusa.preferences.Preferences;
 import biz.binarysolutions.weatherusa.util.DefaultTextWatcher;
 
 /**
@@ -67,7 +67,7 @@ public class LocationActivity extends Activity {
             boolean isGPS = radioButtonGPS.isChecked();
             String  zip   = editText.getText().toString();
 
-            Preferences.save(LocationActivity.this, isGPS, zip);
+            Preferences.saveLocationPreferences(LocationActivity.this, isGPS, zip);
             finish();
         });
     }
diff --git a/app/src/main/java/biz/binarysolutions/weatherusa/MainActivity.java b/app/src/main/java/biz/binarysolutions/weatherusa/MainActivity.java
index 15585f5..a1bb661 100644
--- a/app/src/main/java/biz/binarysolutions/weatherusa/MainActivity.java
+++ b/app/src/main/java/biz/binarysolutions/weatherusa/MainActivity.java
@@ -2,42 +2,30 @@ package biz.binarysolutions.weatherusa;
 
 import android.app.Activity;
 import android.app.AlertDialog;
-import android.app.Dialog;
-import android.content.Context;
-import android.content.DialogInterface;
 import android.content.Intent;
 import android.location.Location;
-import android.location.LocationManager;
 import android.os.Bundle;
-import android.provider.Settings;
 import android.view.View;
-import android.view.View.OnClickListener;
 import android.widget.Button;
-import android.widget.EditText;
 import android.widget.ImageView;
 import android.widget.TextView;
 
 import java.text.SimpleDateFormat;
 import java.util.Date;
 
-import biz.binarysolutions.weatherusa.components.forecast.ForecastHandler;
-import biz.binarysolutions.weatherusa.components.location.LocationHandler;
-import biz.binarysolutions.weatherusa.components.location.LocationHandlerListener;
-import biz.binarysolutions.weatherusa.components.preferences.Preferences;
-import biz.binarysolutions.weatherusa.dialog.DialogBuilder;
-import biz.binarysolutions.weatherusa.dialog.DialogCode;
-import biz.binarysolutions.weatherusa.util.location.LocationFormatter;
+import biz.binarysolutions.weatherusa.forecast.ForecastHandler;
+import biz.binarysolutions.weatherusa.location.LocationHandler;
+import biz.binarysolutions.weatherusa.preferences.Preferences;
+import biz.binarysolutions.weatherusa.util.WeatherLocation;
 
 /**
  * TODO: app is rejected from Samsung Store. Check their report
  * 	received on support email address. Fix it.
  *
  */
-public class MainActivity 
-	extends Activity
-	implements LocationHandlerListener {
+public class MainActivity extends Activity {
 	
-	private static final int ZIP_LENGTH = 5;
+	public static final int ZIP_LENGTH = 5;
 	
 	private LocationHandler locationHandler;
 	private ForecastHandler forecastHandler;
@@ -52,10 +40,22 @@ public class MainActivity
 			return;
 		}
 
-		TextView view = (TextView) findViewById(R.id.TextViewLocation);
-		view.setText(LocationFormatter.format(location));
+		TextView view = findViewById(R.id.TextViewLocation);
+		if (view != null) {
+			view.setText(new WeatherLocation(location).toString());
+		}
+	}
 
-		setForecastButtonEnabled(true);
+	/**
+	 * @param zip
+	 *
+	 */
+	private void updateLocationView(String zip) {
+
+		TextView view = findViewById(R.id.TextViewLocation);
+		if (view != null) {
+			view.setText(zip);
+		}
 	}
 	
 	/**
@@ -69,7 +69,7 @@ public class MainActivity
 		}
 
 		SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm");
-		TextView view = (TextView) findViewById(R.id.TextViewForecastRequest);
+		TextView view = findViewById(R.id.TextViewForecastRequest);
 		view.setText(sdf.format(date));
 	}
 
@@ -77,7 +77,16 @@ public class MainActivity
 	 * 
 	 */
 	private void displayLastKnownLocation() {
-		updateLocationView(locationHandler.getLastKnownLocation());
+
+		boolean isGPS = Preferences.isGPS(this);
+		String  zip   = Preferences.getZIP(this);
+
+		if (isGPS) {
+			updateLocationView(locationHandler.getLastKnownLocation());
+		} else if (zip.length() == ZIP_LENGTH) {
+			updateLocationView(zip);
+		}
+
 	}
 
 	/**
@@ -97,69 +106,27 @@ public class MainActivity
 	private void updateForecast() {
 
 		setForecastButtonEnabled(false);
-		Location location = locationHandler.getLastKnownLocation();
-		forecastHandler.updateForecast(location);
-	}
-	
-	/**
-	 * 
-	 */
-	public void zipCodeEntry() {
-		
-		final Dialog dialog = new Dialog(this);
-		dialog.setContentView(R.layout.dialog_zipcode);
-		dialog.setTitle(R.string.EnterZIPCode);
-		
-		final EditText editText = dialog.findViewById(R.id.EditTextZIP);
-		final Button button = dialog.findViewById(R.id.ButtonZIPContinue);
-		
-		button.setOnClickListener(new OnClickListener() {
-
-			@Override
-			public void onClick(View v) {
-				
-				String zip = editText.getText().toString();
-				if (zip.length() == ZIP_LENGTH) {
-					
-					dialog.dismiss();
-					setLocationButtonEnabled(false);
-					locationHandler.setLocationUsingZIP(zip);
-				}
-			}
-		});
 
-		dialog.show();
-	}
+		boolean isGPS = Preferences.isGPS(this);
+		String  zip   = Preferences.getZIP(this);
 
+		if (isGPS) {
+			Location location = locationHandler.getLastKnownLocation();
+			forecastHandler.updateForecast(location);
+		} else if (zip.length() == ZIP_LENGTH) {
+			forecastHandler.updateForecast(zip);
+		}
+	}
+	
 	/**
 	 * 
 	 */
 	private void determineLocationDialog() {
-		
-		DialogInterface.OnClickListener goToSettingsListener = 
-			new DialogInterface.OnClickListener() {
-		
-				@Override
-				public void onClick(DialogInterface dialog, int which) {
-					goToLocationSources();
-				}
-		};
-
-		DialogInterface.OnClickListener enterZIPCodeListener = 
-			new DialogInterface.OnClickListener() {
-		
-				@Override
-				public void onClick(DialogInterface dialog, int which) {
-					zipCodeEntry();
-				}
-		};		
 
 		new AlertDialog.Builder(this)
 			.setMessage(R.string.LocationChoice)
-			.setView(R.layout.dialog_zipcode)
-			.setPositiveButton(R.string.UseGPS, goToSettingsListener)
-			.setNegativeButton(R.string.EnterZIPCode, enterZIPCodeListener)
-			.show();			
+			.setPositiveButton(android.R.string.ok, null)
+			.show();
 	}
 
 	/**
@@ -174,6 +141,25 @@ public class MainActivity
 			.setPositiveButton(android.R.string.ok, null)
 			.show();
 	}
+
+	/**
+	 *
+	 */
+	private void refreshLocation() {
+
+		boolean isGPS = Preferences.isGPS(this);
+		String  zip   = Preferences.getZIP(this);
+
+		if (isGPS) {
+			if (locationHandler.hasProvider()) {
+				locationHandler.requestLocationUpdate();
+			} else {
+				determineLocationDialog();
+			}
+		} else if (zip.length() != ZIP_LENGTH) {
+			updateLocation();
+		}
+	}
 	
 	/**
 	 * 
@@ -182,18 +168,6 @@ public class MainActivity
 
 		Intent intent = new Intent(this, LocationActivity.class);
 		startActivity(intent);
-
-		//TODO: fix this
-		//TODO: on location change refresh forecast
-		//determineLocationDialog();
-
-		/*
-		if (locationHandler.hasProvider()) {
-			locationHandler.requestLocationUpdate();
-		} else {
-			determineLocationDialog();
-		}
-		*/
 	}
 	
 	/**
@@ -254,75 +228,40 @@ public class MainActivity
 			);
 		}
 	}
-	
-	/**
-	 * 
-	 */
-	private void setLocationHandler() {
-		
-		locationHandler = new LocationHandler(
-			(LocationManager) getSystemService(Context.LOCATION_SERVICE),
-			this
-		);
-	}
-	
-	/**
-	 * 
-	 */
-	private void setForecastHandler() {
-		forecastHandler = new ForecastHandler(this);
-	}
-
-	/**
-	 *
-	 */
-	private void goToLocationSources() {
-		startActivity(new Intent(Settings.ACTION_LOCATION_SOURCE_SETTINGS));
-	}
 
 	@Override
 	public void onCreate(Bundle savedInstanceState) {
 		super.onCreate(savedInstanceState);
 		setContentView(R.layout.activity_main);
-	    
-	    setLocationHandler();
-	    setForecastHandler();
 
-		Preferences.load(getPreferences(MODE_PRIVATE), locationHandler);
+		locationHandler = new LocationHandler(this);
+		forecastHandler = new ForecastHandler(this);
 
-		displayLastKnownLocation();
-		displayLastKnownForecast();
 		setButtonListeners();
 
 		AdHandler.initialize(this);
-
-		//TODO: uncomment this
-		//updateLocation();
-		updateForecast();
 	}
 
 	@Override
-	public void onPause() {
-		//TODO: this is saving location only, refactor it!
-		Preferences.save(getPreferences(MODE_PRIVATE), locationHandler);
-		super.onPause();
-	}
+	protected void onResume() {
+		super.onResume();
 
-	@Override
-	protected Dialog onCreateDialog(int id) {
-		
-		Dialog dialog = DialogBuilder.get(id, this);
-		if (dialog == null) {
-			dialog = super.onCreateDialog(id);
-		}
-			
-		return dialog;
+		displayLastKnownLocation();
+		displayLastKnownForecast();
+
+		refreshLocation();
+		updateForecast();
 	}
 
-	@Override
+	/**
+	 *
+	 * @param location
+	 */
 	public void onLocationChanged(Location location) {
+
 		updateLocationView(location);
 		setLocationButtonEnabled(true);
+		updateForecast();
 	}
 
 	/**
@@ -341,9 +280,4 @@ public class MainActivity
 		setAlertVisible(true);
 		setForecastButtonEnabled(true);
 	}
-
-	@Override
-	public void onConnectionError() {
-		showDialog(DialogCode.WIRELESS_CONTROLS);
-	}
 }
\ No newline at end of file
diff --git a/app/src/main/java/biz/binarysolutions/weatherusa/components/MessageStatus.java b/app/src/main/java/biz/binarysolutions/weatherusa/components/MessageStatus.java
deleted file mode 100644
index b2c71e0..0000000
--- a/app/src/main/java/biz/binarysolutions/weatherusa/components/MessageStatus.java
+++ /dev/null
@@ -1,12 +0,0 @@
-package biz.binarysolutions.weatherusa.components;
-
-/**
- * 
- *
- */
-public class MessageStatus {
-
-	public static final int OK                          = 0;
-	public static final int ERROR_CONNECTING_TO_SERVER  = 1;
-
-}
diff --git a/app/src/main/java/biz/binarysolutions/weatherusa/components/location/LocationHandler.java b/app/src/main/java/biz/binarysolutions/weatherusa/components/location/LocationHandler.java
deleted file mode 100644
index 0970dc7..0000000
--- a/app/src/main/java/biz/binarysolutions/weatherusa/components/location/LocationHandler.java
+++ /dev/null
@@ -1,107 +0,0 @@
-package biz.binarysolutions.weatherusa.components.location;
-
-import biz.binarysolutions.weatherusa.components.location.workerthreads.GoogleGeocoderThread;
-import biz.binarysolutions.weatherusa.util.location.DefaultLocationListener;
-import biz.binarysolutions.weatherusa.util.location.LocationGetter;
-import android.location.Criteria;
-import android.location.Location;
-import android.location.LocationListener;
-import android.location.LocationManager;
-
-/**
- * 
- *
- */
-public class LocationHandler {
-	
-	private static final long  MIN_TIME     = 600000;	// 10 minutes
-	private static final float MIN_DISTANCE = 1000;		// 1000 meters
-
-	private final LocationManager         locationManager;
-	private final LocationHandlerListener locationHandlerListener;
-	
-	private String provider = null;
-	
-	/**
-	 * 
-	 */
-	private LocationListener locationListener = new DefaultLocationListener() {
-		
-		@Override
-		public void onLocationChanged(Location location) {
-			locationManager.removeUpdates(this);
-			locationHandlerListener.onLocationChanged(location);
-		}		
-	};
-
-	/**
-	 * 
-	 * @param lm 
-	 * @param ll
-	 */
-	public LocationHandler(LocationManager lm, LocationHandlerListener ll) {
-		this.locationManager         = lm;
-		this.locationHandlerListener = ll;
-	}
-
-	/**
-	 * 
-	 * @return
-	 */
-	public Location getLastKnownLocation() {
-		return LocationGetter.getLastKnownLocation(locationManager);
-	}
-	
-	/**
-	 * 
-	 */
-	public void requestLocationUpdate() {
-		
-		locationManager.requestLocationUpdates(
-				provider, 
-				MIN_TIME, 
-				MIN_DISTANCE, 
-				locationListener
-			);
-	}
-
-	/**
-	 * 
-	 * @return
-	 */
-	public boolean hasProvider() {
-		
-		provider = locationManager.getBestProvider(new Criteria(), true);
-		return provider != null;
-	}
-
-	/**
-	 * 
-	 * @param zip
-	 */
-	public void setLocationUsingZIP(String zip) {
-		new GoogleGeocoderThread(this, zip).start();
-	}
-
-	/**
-	 * 
-	 * @param location
-	 */
-	public void setLocation(Location location) {
-		
-		if (location.getLatitude() != 0 && location.getLongitude() != 0) {
-		
-			LocationGetter.setLastKnownLocation(location);
-			locationHandlerListener.onLocationChanged(location);
-		} else {
-			locationHandlerListener.onLocationChanged(null);
-		}
-	}
-
-	/**
-	 * 
-	 */
-	public void onConnectionError() {
-		locationHandlerListener.onConnectionError();
-	}
-}
diff --git a/app/src/main/java/biz/binarysolutions/weatherusa/components/location/LocationHandlerListener.java b/app/src/main/java/biz/binarysolutions/weatherusa/components/location/LocationHandlerListener.java
deleted file mode 100644
index d386130..0000000
--- a/app/src/main/java/biz/binarysolutions/weatherusa/components/location/LocationHandlerListener.java
+++ /dev/null
@@ -1,13 +0,0 @@
-package biz.binarysolutions.weatherusa.components.location;
-
-import android.location.Location;
-
-/**
- * 
- *
- */
-public interface LocationHandlerListener {
-
-	void onLocationChanged(Location location);
-	void onConnectionError();
-}
diff --git a/app/src/main/java/biz/binarysolutions/weatherusa/components/location/workerthreads/GoogleGeocoderHandler.java b/app/src/main/java/biz/binarysolutions/weatherusa/components/location/workerthreads/GoogleGeocoderHandler.java
deleted file mode 100644
index 745eed3..0000000
--- a/app/src/main/java/biz/binarysolutions/weatherusa/components/location/workerthreads/GoogleGeocoderHandler.java
+++ /dev/null
@@ -1,47 +0,0 @@
-package biz.binarysolutions.weatherusa.components.location.workerthreads;
-
-import android.location.Location;
-import android.os.Bundle;
-import android.os.Handler;
-import android.os.Message;
-import biz.binarysolutions.weatherusa.components.MessageStatus;
-import biz.binarysolutions.weatherusa.components.location.LocationHandler;
-import biz.binarysolutions.weatherusa.util.location.LocationGetter;
-
-/**
- * 
- *
- */
-public class GoogleGeocoderHandler extends Handler {
-	
-	private LocationHandler locationHandler;
-	
-	/**
-	 * 
-	 * @param locationHandler 
-	 */
-	public GoogleGeocoderHandler(LocationHandler locationHandler) {
-		this.locationHandler = locationHandler;
-	}
-
-	/**
-	 * 
-	 */
-	public void handleMessage(Message message) {
-		
-		if (message.what == MessageStatus.ERROR_CONNECTING_TO_SERVER) {
-			locationHandler.onConnectionError();
-		}
-		
-		Bundle bundle = message.getData();
-		if (bundle != null) {
-			
-			double latitude  = bundle.getDouble("latitude");
-			double longitude = bundle.getDouble("longitude");			
-			
-			Location location = LocationGetter.getLocation(latitude, longitude);
-			locationHandler.setLocation(location);
-		}
-	}
-
-}
diff --git a/app/src/main/java/biz/binarysolutions/weatherusa/components/location/workerthreads/GoogleGeocoderThread.java b/app/src/main/java/biz/binarysolutions/weatherusa/components/location/workerthreads/GoogleGeocoderThread.java
deleted file mode 100644
index 3371602..0000000
--- a/app/src/main/java/biz/binarysolutions/weatherusa/components/location/workerthreads/GoogleGeocoderThread.java
+++ /dev/null
@@ -1,101 +0,0 @@
-package biz.binarysolutions.weatherusa.components.location.workerthreads;
-
-import android.os.Bundle;
-import android.os.Handler;
-import android.os.Message;
-
-import org.json.JSONException;
-import org.json.JSONObject;
-
-import biz.binarysolutions.weatherusa.components.MessageStatus;
-import biz.binarysolutions.weatherusa.components.location.LocationHandler;
-import biz.binarysolutions.weatherusa.util.InternetUtil;
-
-/**
- * 
- *
- */
-public class GoogleGeocoderThread extends Thread {
-	
-	private static final String URI = "https://geocode-x.appspot.com/json";
-	
-	private final Handler handler;
-	private final String  zip;
-
-	/**
-	 *
-	 * @return
-	 */
-	private String getGeocoderResponse() {
-		return InternetUtil.getGetResponse(URI + "?address=" + zip);
-	}
-
-	/**
-	 * 
-	 * @param json
-	 * @return
-	 */
-	private Bundle getLocationBundle(JSONObject json) {
-		
-		Bundle bundle = null;
-		
-		try {
-			
-			JSONObject coordinates = json
-				.getJSONArray("results")
-				.getJSONObject(0)
-				.getJSONObject("geometry")
-				.getJSONObject("location");
-			
-			double latitude  = coordinates.getDouble("lat");
-			double longitude = coordinates.getDouble("lng");
-			
-			bundle = new Bundle();
-			bundle.putDouble("latitude",  latitude);
-			bundle.putDouble("longitude", longitude);
-			
-		} catch (JSONException e) {
-			// do nothing
-		}
-	
-		return bundle;
-	}
-
-	/**
-	 * 
-	 * @param locationHandler
-	 * @param zip
-	 */
-	public GoogleGeocoderThread(LocationHandler locationHandler, String zip) {
-		
-		this.handler = new GoogleGeocoderHandler(locationHandler);
-		this.zip     = zip;
-	}
-	
-	/**
-	 * 
-	 */
-	@Override
-	public void run() {
-		
-		Message message = Message.obtain();
-		Bundle  bundle  = null;
-		
-		message.what = MessageStatus.OK;
-		
-		try {
-			
-			String     response = getGeocoderResponse();
-			JSONObject json     = new JSONObject(response);
-			
-			bundle = getLocationBundle(json); 
-			
-		} catch (JSONException e) {
-			// do nothing
-		}
-		
-		message.setData(bundle);
-		handler.sendMessage(message);
-	}
-
-}
diff --git a/app/src/main/java/biz/binarysolutions/weatherusa/dialog/DialogBuilder.java b/app/src/main/java/biz/binarysolutions/weatherusa/dialog/DialogBuilder.java
deleted file mode 100644
index 8dcafb7..0000000
--- a/app/src/main/java/biz/binarysolutions/weatherusa/dialog/DialogBuilder.java
+++ /dev/null
@@ -1,63 +0,0 @@
-package biz.binarysolutions.weatherusa.dialog;
-
-import android.app.AlertDialog;
-import android.app.Dialog;
-import android.content.Context;
-import android.content.DialogInterface;
-import android.content.DialogInterface.OnClickListener;
-import android.content.Intent;
-import android.provider.Settings;
-
-import biz.binarysolutions.weatherusa.MainActivity;
-import biz.binarysolutions.weatherusa.R;
-
-/**
- * 
- *
- */
-public class DialogBuilder {
-
-	/**
-	 *
-	 * @param context
-	 */
-	private static Dialog getWirelessControlsDialog(final Context context) {
-
-		DialogInterface.OnClickListener goToSettingsListener =
-			new DialogInterface.OnClickListener() {
-				@Override
-				public void onClick(DialogInterface dialog, int which) {
-					context.startActivity(
-							new Intent(Settings.ACTION_WIRELESS_SETTINGS)
-					);
-				}
-			};
-
-		return new AlertDialog.Builder(context)
-			.setTitle(R.string.Error)
-			.setMessage(R.string.ErrorConnecting)
-			.setPositiveButton(android.R.string.yes, goToSettingsListener)
-			.setNegativeButton(android.R.string.no, null)
-			.create();
-	}
-
-	/*
-
-	 */
-	public static Dialog get(int dialogId, Context context) {
-		
-		Dialog dialog;
-		switch (dialogId) {
-		
-		case DialogCode.WIRELESS_CONTROLS:
-			dialog = getWirelessControlsDialog(context);
-			break;
-			
-		default:
-			dialog = null;
-			break;		
-		}
-		
-		return dialog;
-	}
-}
diff --git a/app/src/main/java/biz/binarysolutions/weatherusa/dialog/DialogCode.java b/app/src/main/java/biz/binarysolutions/weatherusa/dialog/DialogCode.java
deleted file mode 100644
index a498b5a..0000000
--- a/app/src/main/java/biz/binarysolutions/weatherusa/dialog/DialogCode.java
+++ /dev/null
@@ -1,10 +0,0 @@
-package biz.binarysolutions.weatherusa.dialog;
-
-/**
- * 
- *
- */
-public class DialogCode {
-
-	public static final int WIRELESS_CONTROLS    = 0;
-}
diff --git a/app/src/main/java/biz/binarysolutions/weatherusa/components/forecast/ForecastDisplay.java b/app/src/main/java/biz/binarysolutions/weatherusa/forecast/ForecastDisplay.java
similarity index 99%
rename from app/src/main/java/biz/binarysolutions/weatherusa/components/forecast/ForecastDisplay.java
rename to app/src/main/java/biz/binarysolutions/weatherusa/forecast/ForecastDisplay.java
index 831e69a..d9938b6 100644
--- a/app/src/main/java/biz/binarysolutions/weatherusa/components/forecast/ForecastDisplay.java
+++ b/app/src/main/java/biz/binarysolutions/weatherusa/forecast/ForecastDisplay.java
@@ -1,4 +1,4 @@
-package biz.binarysolutions.weatherusa.components.forecast;
+package biz.binarysolutions.weatherusa.forecast;
 
 import android.app.Activity;
 import android.view.View;
@@ -23,7 +23,7 @@ import java.util.LinkedHashSet;
 import java.util.Vector;
 
 import biz.binarysolutions.weatherusa.R;
-import biz.binarysolutions.weatherusa.components.forecast.workerthreads.ForecastUpdater;
+import biz.binarysolutions.weatherusa.forecast.workerthreads.ForecastUpdater;
 import biz.binarysolutions.weatherusa.util.DateUtil;
 
 /**
diff --git a/app/src/main/java/biz/binarysolutions/weatherusa/components/forecast/ForecastHandler.java b/app/src/main/java/biz/binarysolutions/weatherusa/forecast/ForecastHandler.java
similarity index 94%
rename from app/src/main/java/biz/binarysolutions/weatherusa/components/forecast/ForecastHandler.java
rename to app/src/main/java/biz/binarysolutions/weatherusa/forecast/ForecastHandler.java
index a4ac0c0..68a9b09 100644
--- a/app/src/main/java/biz/binarysolutions/weatherusa/components/forecast/ForecastHandler.java
+++ b/app/src/main/java/biz/binarysolutions/weatherusa/forecast/ForecastHandler.java
@@ -1,4 +1,4 @@
-package biz.binarysolutions.weatherusa.components.forecast;
+package biz.binarysolutions.weatherusa.forecast;
 
 import static biz.binarysolutions.weatherusa.MainActivity.ZIP_LENGTH;
 
@@ -15,9 +15,9 @@ import java.util.Date;
 import java.util.Vector;
 
 import biz.binarysolutions.weatherusa.MainActivity;
-import biz.binarysolutions.weatherusa.components.forecast.workerthreads.ForecastJSONParser;
-import biz.binarysolutions.weatherusa.components.forecast.workerthreads.ForecastUpdater;
-import biz.binarysolutions.weatherusa.components.forecast.workerthreads.ForecastXMLParser;
+import biz.binarysolutions.weatherusa.forecast.workerthreads.ForecastJSONParser;
+import biz.binarysolutions.weatherusa.forecast.workerthreads.ForecastUpdater;
+import biz.binarysolutions.weatherusa.forecast.workerthreads.ForecastXMLParser;
 
 /**
  * 
diff --git a/app/src/main/java/biz/binarysolutions/weatherusa/components/forecast/TimelinedData.java b/app/src/main/java/biz/binarysolutions/weatherusa/forecast/TimelinedData.java
similarity index 96%
rename from app/src/main/java/biz/binarysolutions/weatherusa/components/forecast/TimelinedData.java
rename to app/src/main/java/biz/binarysolutions/weatherusa/forecast/TimelinedData.java
index 4568037..03e532b 100644
--- a/app/src/main/java/biz/binarysolutions/weatherusa/components/forecast/TimelinedData.java
+++ b/app/src/main/java/biz/binarysolutions/weatherusa/forecast/TimelinedData.java
@@ -1,4 +1,4 @@
-package biz.binarysolutions.weatherusa.components.forecast;
+package biz.binarysolutions.weatherusa.forecast;
 
 import java.util.Date;
 import java.util.Vector;
diff --git a/app/src/main/java/biz/binarysolutions/weatherusa/components/forecast/workerthreads/ForecastJSONParser.java b/app/src/main/java/biz/binarysolutions/weatherusa/forecast/workerthreads/ForecastJSONParser.java
similarity index 97%
rename from app/src/main/java/biz/binarysolutions/weatherusa/components/forecast/workerthreads/ForecastJSONParser.java
rename to app/src/main/java/biz/binarysolutions/weatherusa/forecast/workerthreads/ForecastJSONParser.java
index 416938f..3a32e05 100644
--- a/app/src/main/java/biz/binarysolutions/weatherusa/components/forecast/workerthreads/ForecastJSONParser.java
+++ b/app/src/main/java/biz/binarysolutions/weatherusa/forecast/workerthreads/ForecastJSONParser.java
@@ -1,4 +1,4 @@
-package biz.binarysolutions.weatherusa.components.forecast.workerthreads;
+package biz.binarysolutions.weatherusa.forecast.workerthreads;
 
 import org.json.JSONArray;
 import org.json.JSONException;
diff --git a/app/src/main/java/biz/binarysolutions/weatherusa/components/forecast/workerthreads/ForecastUpdater.java b/app/src/main/java/biz/binarysolutions/weatherusa/forecast/workerthreads/ForecastUpdater.java
similarity index 98%
rename from app/src/main/java/biz/binarysolutions/weatherusa/components/forecast/workerthreads/ForecastUpdater.java
rename to app/src/main/java/biz/binarysolutions/weatherusa/forecast/workerthreads/ForecastUpdater.java
index 4eff5bb..408a723 100644
--- a/app/src/main/java/biz/binarysolutions/weatherusa/components/forecast/workerthreads/ForecastUpdater.java
+++ b/app/src/main/java/biz/binarysolutions/weatherusa/forecast/workerthreads/ForecastUpdater.java
@@ -1,4 +1,4 @@
-package biz.binarysolutions.weatherusa.components.forecast.workerthreads;
+package biz.binarysolutions.weatherusa.forecast.workerthreads;
 
 import android.location.Location;
 
diff --git a/app/src/main/java/biz/binarysolutions/weatherusa/components/forecast/workerthreads/ForecastXMLParser.java b/app/src/main/java/biz/binarysolutions/weatherusa/forecast/workerthreads/ForecastXMLParser.java
similarity index 98%
rename from app/src/main/java/biz/binarysolutions/weatherusa/components/forecast/workerthreads/ForecastXMLParser.java
rename to app/src/main/java/biz/binarysolutions/weatherusa/forecast/workerthreads/ForecastXMLParser.java
index 9dc988a..f590593 100644
--- a/app/src/main/java/biz/binarysolutions/weatherusa/components/forecast/workerthreads/ForecastXMLParser.java
+++ b/app/src/main/java/biz/binarysolutions/weatherusa/forecast/workerthreads/ForecastXMLParser.java
@@ -1,4 +1,4 @@
-package biz.binarysolutions.weatherusa.components.forecast.workerthreads;
+package biz.binarysolutions.weatherusa.forecast.workerthreads;
 
 import org.xmlpull.v1.XmlPullParser;
 import org.xmlpull.v1.XmlPullParserException;
@@ -10,7 +10,7 @@ import java.util.Date;
 import java.util.HashMap;
 import java.util.Vector;
 
-import biz.binarysolutions.weatherusa.components.forecast.TimelinedData;
+import biz.binarysolutions.weatherusa.forecast.TimelinedData;
 import biz.binarysolutions.weatherusa.util.DateUtil;
 import biz.binarysolutions.weatherusa.util.StringUtil;
 
diff --git a/app/src/main/java/biz/binarysolutions/weatherusa/util/location/DefaultLocationListener.java b/app/src/main/java/biz/binarysolutions/weatherusa/location/DefaultLocationListener.java
similarity index 79%
rename from app/src/main/java/biz/binarysolutions/weatherusa/util/location/DefaultLocationListener.java
rename to app/src/main/java/biz/binarysolutions/weatherusa/location/DefaultLocationListener.java
index 5e58452..2e21bb5 100644
--- a/app/src/main/java/biz/binarysolutions/weatherusa/util/location/DefaultLocationListener.java
+++ b/app/src/main/java/biz/binarysolutions/weatherusa/location/DefaultLocationListener.java
@@ -1,4 +1,4 @@
-package biz.binarysolutions.weatherusa.util.location;
+package biz.binarysolutions.weatherusa.location;
 
 import android.location.Location;
 import android.location.LocationListener;
@@ -8,7 +8,7 @@ import android.os.Bundle;
  * 
  *
  */
-public class DefaultLocationListener implements LocationListener {
+class DefaultLocationListener implements LocationListener {
 
 	@Override
 	public void onLocationChanged(Location location) {
diff --git a/app/src/main/java/biz/binarysolutions/weatherusa/location/LocationHandler.java b/app/src/main/java/biz/binarysolutions/weatherusa/location/LocationHandler.java
new file mode 100644
index 0000000..9849b77
--- /dev/null
+++ b/app/src/main/java/biz/binarysolutions/weatherusa/location/LocationHandler.java
@@ -0,0 +1,148 @@
+package biz.binarysolutions.weatherusa.location;
+
+import static android.Manifest.permission.ACCESS_COARSE_LOCATION;
+import static android.Manifest.permission.ACCESS_FINE_LOCATION;
+
+import android.content.Context;
+import android.content.pm.PackageManager;
+import android.location.Criteria;
+import android.location.Location;
+import android.location.LocationManager;
+import android.os.Build;
+
+import androidx.core.app.ActivityCompat;
+
+import biz.binarysolutions.weatherusa.MainActivity;
+import biz.binarysolutions.weatherusa.preferences.Preferences;
+import biz.binarysolutions.weatherusa.util.WeatherLocation;
+
+/**
+ *
+ *
+ */
+public class LocationHandler extends DefaultLocationListener {
+
+	private final LocationManager locationManager;
+	private final MainActivity    activity;
+
+	private Location location;
+	private String   provider;
+
+	/**
+	 *
+	 * @param permission
+	 * @return
+	 */
+	private boolean hasPermission(String permission) {
+		return ActivityCompat.checkSelfPermission(activity, permission) ==
+				PackageManager.PERMISSION_GRANTED;
+	}
+
+	/**
+	 *
+	 */
+	private void requestPermission() {
+
+		if (Build.VERSION.SDK_INT < Build.VERSION_CODES.M) {
+			return;
+		}
+
+		activity.requestPermissions(
+			new String[]{ ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION }, 0);
+	}
+
+	/**
+	 *
+	 * @return
+	 */
+	private Location getLastKnownGPSLocation() {
+
+		if (!hasPermission(ACCESS_FINE_LOCATION)) {
+			requestPermission();
+			return null;
+		}
+
+		//noinspection "MissingPermission"
+		return locationManager.getLastKnownLocation(LocationManager.GPS_PROVIDER);
+	}
+
+	/**
+	 *
+	 * @return
+	 */
+	private Location getLastKnownNetworkLocation() {
+
+		if (!hasPermission(ACCESS_COARSE_LOCATION)) {
+			requestPermission();
+			return null;
+		}
+
+		//noinspection "MissingPermission"
+		return locationManager.getLastKnownLocation(LocationManager.NETWORK_PROVIDER);
+	}
+
+	/**
+	 * 
+	 * @param activity
+	 */
+	public LocationHandler(MainActivity activity) {
+		this.activity        = activity;
+		this.locationManager = (LocationManager)
+			activity.getSystemService(Context.LOCATION_SERVICE);
+
+		WeatherLocation location = Preferences.getLocation(activity);
+		if (location.isValid()) {
+			this.location = location;
+		}
+	}
+
+	/**
+	 * 
+	 * @return
+	 */
+	public Location getLastKnownLocation() {
+
+		if (location != null) {
+			return location;
+		}
+
+		location = getLastKnownGPSLocation();
+		if (location != null) {
+			return location;
+		}
+
+		location = getLastKnownNetworkLocation();
+		return location;
+	}
+
+	/**
+	 *
+	 */
+	public void requestLocationUpdate() {
+
+		if (!hasPermission(ACCESS_FINE_LOCATION) && !hasPermission(ACCESS_COARSE_LOCATION)) {
+			requestPermission();
+			return;
+		}
+
+		//noinspection "MissingPermission"
+		locationManager.requestSingleUpdate(provider, this, null);
+	}
+
+	/**
+	 *
+	 * @return
+	 */
+	public boolean hasProvider() {
+
+		provider = locationManager.getBestProvider(new Criteria(), true);
+		return provider != null;
+	}
+
+	@Override
+	public void onLocationChanged(Location location) {
+
+		Preferences.saveLocation(activity, location);
+		activity.onLocationChanged(location);
+	}
+}
diff --git a/app/src/main/java/biz/binarysolutions/weatherusa/components/preferences/Preferences.java b/app/src/main/java/biz/binarysolutions/weatherusa/preferences/Preferences.java
similarity index 80%
rename from app/src/main/java/biz/binarysolutions/weatherusa/components/preferences/Preferences.java
rename to app/src/main/java/biz/binarysolutions/weatherusa/preferences/Preferences.java
index 242e1bb..009e1c1 100644
--- a/app/src/main/java/biz/binarysolutions/weatherusa/components/preferences/Preferences.java
+++ b/app/src/main/java/biz/binarysolutions/weatherusa/preferences/Preferences.java
@@ -1,4 +1,4 @@
-package biz.binarysolutions.weatherusa.components.preferences;
+package biz.binarysolutions.weatherusa.preferences;
 
 import static biz.binarysolutions.weatherusa.MainActivity.ZIP_LENGTH;
 
@@ -6,9 +6,7 @@ import android.content.Context;
 import android.content.SharedPreferences;
 import android.location.Location;
 
-import androidx.annotation.NonNull;
-
-import biz.binarysolutions.weatherusa.util.location.LocationGetter;
+import biz.binarysolutions.weatherusa.util.WeatherLocation;
 
 /**
  *
@@ -17,16 +15,16 @@ public class Preferences {
 
 	private static final String PREFERENCES_NAME = "preferences";
 
-	private static Boolean  isGPS;
-	private static String   zip;
-	private static Location location;
+	private static Boolean         isGPS;
+	private static String          zip;
+	private static WeatherLocation location;
 
 	/**
 	 *
 	 * @param context
 	 * @return
 	 */
-	public static Location getLocation(Context context) {
+	public static WeatherLocation getLocation(Context context) {
 
 		if (location != null) {
 			return location;
@@ -41,7 +39,7 @@ public class Preferences {
 		double latitude  = preferences.getFloat("latitude", 0);
 		double longitude = preferences.getFloat("longitude", 0);
 		
-		location = LocationGetter.getLocation(latitude, longitude);
+		location = new WeatherLocation(latitude, longitude);
 		return location;
 	}
 
@@ -50,13 +48,13 @@ public class Preferences {
 	 * @param context
 	 * @param location
 	 */
-	public static void saveLocation
-		(
-			@NonNull Context  context,
-			@NonNull Location location
-		) {
+	public static void saveLocation(Context context, Location location) {
+
+		if (context == null || location == null) {
+			return;
+		}
 
-		Preferences.location = location;
+		Preferences.location = new WeatherLocation(location);
 
 		SharedPreferences.Editor editor =
 			context.getApplicationContext().getSharedPreferences(
diff --git a/app/src/main/java/biz/binarysolutions/weatherusa/util/DeviceUtil.java b/app/src/main/java/biz/binarysolutions/weatherusa/util/DeviceUtil.java
deleted file mode 100644
index dd68ef6..0000000
--- a/app/src/main/java/biz/binarysolutions/weatherusa/util/DeviceUtil.java
+++ /dev/null
@@ -1,50 +0,0 @@
-package biz.binarysolutions.weatherusa.util;
-
-import java.lang.reflect.Field;
-
-import android.view.Display;
-
-/**
- * 
- *
- */
-public class DeviceUtil {
-	
-	private static final int SMALL_SCREEN_WIDTH  = 240;
-	private static final int SMALL_SCREEN_HEIGHT = 320;
-
-	/**
-	 * 
-	 * @return
-	 */
-	public static int getAPILevel() {
-		
-		try {
-			Class version = android.os.Build.VERSION.class; 
-			Field sdkInt  = version.getDeclaredField("SDK_INT");
-			
-			return sdkInt.getInt(version);
-			
-		} catch (Exception e) {
-			// do nothing
-		}
-		
-		return Integer.parseInt(android.os.Build.VERSION.SDK);
-	}
-
-	/**
-	 * 
-	 * @param display 
-	 * @return
-	 */
-	public static boolean isSmallScreen(Display display) {
-		
-		int width  = display.getWidth();
-		int height = display.getHeight();
-		
-		return 
-			(width  <= SMALL_SCREEN_WIDTH && height <= SMALL_SCREEN_HEIGHT) ||
-			(height <= SMALL_SCREEN_WIDTH && width  <= SMALL_SCREEN_HEIGHT);
-	}
-
-}
diff --git a/app/src/main/java/biz/binarysolutions/weatherusa/util/WeatherLocation.java b/app/src/main/java/biz/binarysolutions/weatherusa/util/WeatherLocation.java
new file mode 100644
index 0000000..8cdd685
--- /dev/null
+++ b/app/src/main/java/biz/binarysolutions/weatherusa/util/WeatherLocation.java
@@ -0,0 +1,104 @@
+package biz.binarysolutions.weatherusa.util;
+
+import android.location.Location;
+import android.location.LocationManager;
+
+import androidx.annotation.NonNull;
+
+import java.text.DecimalFormat;
+
+/**
+ *
+ */
+public class WeatherLocation extends Location {
+
+    private static final DecimalFormat df = new DecimalFormat("###.00");
+
+    /**
+     *
+     * @param latitude
+     * @return
+     */
+    private static String getFormattedLatitude(double latitude) {
+
+        StringBuffer  sb = new StringBuffer();
+
+        if (latitude < 0) {
+            sb.append(df.format(Math.abs(latitude)));
+            sb.append("°S");
+        } else {
+            sb.append(df.format(latitude));
+            sb.append("°N");
+        }
+
+        return sb.toString();
+    }
+
+    /**
+     *
+     * @param longitude
+     * @return
+     */
+    private static String getFormattedLongitude(double longitude) {
+
+        StringBuffer sb = new StringBuffer();
+
+        if (longitude < 0) {
+            sb.append(df.format(Math.abs(longitude)));
+            sb.append("°W");
+        } else {
+            sb.append(df.format(longitude));
+            sb.append("°E");
+        }
+
+        return sb.toString();
+    }
+
+    /**
+     *
+     * @param provider
+     */
+    public WeatherLocation(String provider) {
+        super(provider);
+    }
+
+    /**
+     *
+     * @param l
+     */
+    public WeatherLocation(Location l) {
+        super(l);
+    }
+
+    /**
+     *
+     * @param latitude
+     * @param longitude
+     */
+    public WeatherLocation(double latitude, double longitude) {
+        super(LocationManager.GPS_PROVIDER);
+
+        setLatitude(latitude);
+        setLongitude(longitude);
+        setTime(System.currentTimeMillis());
+    }
+
+    @NonNull
+    @Override
+    public String toString() {
+
+        return new StringBuffer()
+            .append(getFormattedLatitude(getLatitude()))
+            .append(" ")
+            .append(getFormattedLongitude(getLongitude()))
+            .toString();
+    }
+
+    /**
+     *
+     * @return
+     */
+    public boolean isValid() {
+        return getLongitude() != 0.0 && getLatitude() != 0.0;
+    }
+}
diff --git a/app/src/main/java/biz/binarysolutions/weatherusa/util/location/LocationFormatter.java b/app/src/main/java/biz/binarysolutions/weatherusa/util/location/LocationFormatter.java
deleted file mode 100644
index 51ed1bd..0000000
--- a/app/src/main/java/biz/binarysolutions/weatherusa/util/location/LocationFormatter.java
+++ /dev/null
@@ -1,68 +0,0 @@
-package biz.binarysolutions.weatherusa.util.location;
-
-import java.text.DecimalFormat;
-
-import android.location.Location;
-
-/**
- * 
- *
- */
-public class LocationFormatter {
-	
-	private static final DecimalFormat df = new DecimalFormat("###.00");
-	
-    /**
-	 * 
-	 * @param latitude
-	 * @return
-	 */
-	private static String getFormattedLatitude(double latitude) {
-	
-		StringBuffer  sb = new StringBuffer();
-		
-		if (latitude < 0) {
-			sb.append(df.format(Math.abs(latitude)));
-			sb.append("°S");
-		} else {
-			sb.append(df.format(latitude));
-			sb.append("°N");			
-		}
-		
-		return sb.toString();
-	}
-
-	/**
-	 * 
-	 * @param longitude
-	 * @return
-	 */
-	private static String getFormattedLongitude(double longitude) {
-	
-		StringBuffer  sb = new StringBuffer();
-		
-		if (longitude < 0) {
-			sb.append(df.format(Math.abs(longitude)));
-			sb.append("°W");
-		} else {
-			sb.append(df.format(longitude));
-			sb.append("°E");			
-		}
-		
-		return sb.toString();
-	}
-
-	/**
-	 * 
-	 * @param location
-	 * @return
-	 */
-	public static String format(Location location) {
-		
-		return new StringBuffer()
-					.append(getFormattedLatitude(location.getLatitude()))
-					.append(" ")
-					.append(getFormattedLongitude(location.getLongitude()))
-					.toString();
-	}	
-}
diff --git a/app/src/main/java/biz/binarysolutions/weatherusa/util/location/LocationGetter.java b/app/src/main/java/biz/binarysolutions/weatherusa/util/location/LocationGetter.java
deleted file mode 100644
index acfadb3..0000000
--- a/app/src/main/java/biz/binarysolutions/weatherusa/util/location/LocationGetter.java
+++ /dev/null
@@ -1,93 +0,0 @@
-package biz.binarysolutions.weatherusa.util.location;
-
-import android.location.Location;
-import android.location.LocationManager;
-
-/**
- * 
- *
- */
-public class LocationGetter {
-	
-	private static Location LOCATION = null;
-
-	/**
-	 * 
-	 * @param lm
-	 * @return
-	 */
-	private static Location getLastKnownGPSLocation(LocationManager lm) {
-		
-		Location location = null;
-		
-		try {
-			location = lm.getLastKnownLocation(LocationManager.GPS_PROVIDER);
-		} catch (Exception e) {
-			// do nothing
-		}
-		
-		return location;
-	}
-
-	/**
-	 * 
-	 * @param lm
-	 * @return
-	 */
-	private static Location getLastKnownNetworkLocation(LocationManager lm) {
-		
-		Location location = null;
-		
-		try {
-			location = lm.getLastKnownLocation(LocationManager.NETWORK_PROVIDER);
-		} catch (Exception e) {
-			// do nothing
-		}
-		
-		return location;
-	}
-
-	/**
-	 * 
-	 * @param location
-	 */
-	public static void setLastKnownLocation(Location location) {
-		LOCATION = location;
-	}
-	
-	/**
-	 * 
-	 * @return
-	 */
-	public static Location getLastKnownLocation(LocationManager lm) {
-
-		if (LOCATION != null) {
-			return LOCATION;
-		}
-		
-		Location location = getLastKnownGPSLocation(lm);
-		if (location != null) {
-			return location;
-		}
-		
-		location = getLastKnownNetworkLocation(lm);
-		return location;
-	}
-
-	/**
-	 * 
-	 * @param latitude
-	 * @param longitude
-	 * @return
-	 */
-	public static Location getLocation(double latitude, double longitude) {
-		
-		Location location = new Location(LocationManager.GPS_PROVIDER);
-		location.setLatitude(latitude);
-		location.setLongitude(longitude);
-		location.setTime(System.currentTimeMillis());
-		
-		return location;
-	}
-	
-}
