diff --git a/app/src/main/java/com/commit451/gitlab/IssueActivity.java b/app/src/main/java/com/commit451/gitlab/IssueActivity.java
index c63daccd..1f98168a 100644
--- a/app/src/main/java/com/commit451/gitlab/IssueActivity.java
+++ b/app/src/main/java/com/commit451/gitlab/IssueActivity.java
@@ -3,55 +3,43 @@ package com.commit451.gitlab;
 import android.app.ProgressDialog;
 import android.os.Bundle;
 import android.support.design.widget.Snackbar;
+import android.support.v4.widget.SwipeRefreshLayout;
+import android.support.v7.widget.LinearLayoutManager;
+import android.support.v7.widget.RecyclerView;
 import android.support.v7.widget.Toolbar;
-import android.text.method.LinkMovementMethod;
 import android.view.View;
 import android.view.inputmethod.InputMethodManager;
-import android.widget.AdapterView;
-import android.widget.ArrayAdapter;
 import android.widget.EditText;
-import android.widget.ListView;
-import android.widget.ScrollView;
-import android.widget.Spinner;
-import android.widget.TextView;
 
-import com.commit451.gitlab.adapter.MilestonesAdapter;
-import com.commit451.gitlab.adapter.NoteAdapter;
-import com.commit451.gitlab.adapter.UserAdapter;
+import com.commit451.gitlab.adapter.NotesAdapter;
 import com.commit451.gitlab.api.GitLabClient;
 import com.commit451.gitlab.model.Issue;
 import com.commit451.gitlab.model.Milestone;
 import com.commit451.gitlab.model.Note;
 import com.commit451.gitlab.model.User;
 import com.commit451.gitlab.tools.Repository;
-import com.commit451.gitlab.tools.RetrofitHelper;
 
-import java.util.ArrayList;
 import java.util.List;
 
 import butterknife.Bind;
 import butterknife.ButterKnife;
 import butterknife.OnClick;
-import in.uncod.android.bypass.Bypass;
 import retrofit.Callback;
 import retrofit.RetrofitError;
 import retrofit.client.Response;
+import timber.log.Timber;
 
 public class IssueActivity extends BaseActivity {
 
 	@Bind(R.id.toolbar) Toolbar toolbar;
-	@Bind(R.id.scroll1) ScrollView scroll;
 	
-	@Bind(R.id.title) TextView title;
-	@Bind(R.id.state_spinner) Spinner stateSpinner;
-	@Bind(R.id.assignee_spinner) Spinner assigneeSpinner;
-	@Bind(R.id.milestone_spinner) Spinner milestoneSpinner;
-	@Bind(R.id.description) TextView description;
-	@Bind(R.id.note_list) ListView noteList;
-	
-	@Bind(R.id.progressbar_loading) View progressBar;
+	@Bind(R.id.swipe_layout) SwipeRefreshLayout swipeRefreshLayout;
+	@Bind(R.id.list) RecyclerView listView;
+
 	@Bind(R.id.new_note_edit) EditText newNoteEdit;
 
+	private NotesAdapter notesAdapter;
+
 	private ProgressDialog pd;
 	
 	@Override
@@ -59,130 +47,73 @@ public class IssueActivity extends BaseActivity {
 		super.onCreate(savedInstanceState);
 		setContentView(R.layout.activity_issue);
 		ButterKnife.bind(this);
-		
-		if(Repository.selectedIssue != null) {
-			setupUI();
-			loadNotes();
-		}
-		else {
-			finish();
-		}
-	}
-	
-	/**
-	 * Set up the {@link android.app.ActionBar}.
-	 */
-	private void setupUI() {
-		long tempId = Repository.selectedIssue.getIid();
-		if(tempId < 1) {
-			tempId = Repository.selectedIssue.getId();
-		}
-
-		toolbar.setNavigationIcon(R.drawable.ic_back);
-		toolbar.setNavigationOnClickListener(new View.OnClickListener() {
-			@Override
-			public void onClick(View v) {
-				onBackPressed();
-			}
-		});
-		toolbar.setTitle("Issue #" + tempId);
-		
-		title.setText(Repository.selectedIssue.getTitle());
-		
-		ArrayList<String> temp3 = new ArrayList<>();
-		if(Repository.selectedIssue.getState().equals("opened")) {
-			temp3.add("opened");
-			temp3.add("closed");
-		}
-		else {
-			temp3.add("closed");
-			temp3.add("reopened");
-		}
-		stateSpinner.setAdapter(new ArrayAdapter<String>(this, android.R.layout.simple_list_item_1, temp3));
-		stateSpinner.setSelection(temp3.indexOf(Repository.selectedIssue.getState()));
-		//Hack so that the onItemSelected does not get triggered the first time we create the view
-		stateSpinner.post(new Runnable() {
-			@Override
-			public void run() {
-				stateSpinner.setOnItemSelectedListener(new AdapterView.OnItemSelectedListener() {
-					@Override
-					public void onItemSelected(AdapterView<?> parent, View view, int position, long id) {
-						changeStatus();
-					}
 
-					@Override
-					public void onNothingSelected(AdapterView<?> parent) {}
-				});
-			}
-		});
 
-		if(Repository.selectedIssue.getAssignee() != null) {
-			ArrayList<User> temp = new ArrayList<User>();
-			temp.add(Repository.selectedIssue.getAssignee());
-			assigneeSpinner.setAdapter(new UserAdapter(this, temp));
-		}
-
-        GitLabClient.instance().getUsersFallback(Repository.selectedProject.getId(), usersCallback);
-		
-		ArrayList<Milestone> temp2 = new ArrayList<Milestone>();
-		if(Repository.selectedIssue.getMilestone() != null) {
-			temp2.add(Repository.selectedIssue.getMilestone());
-		}
-		milestoneSpinner.setAdapter(new MilestonesAdapter(this, temp2));
-
-        GitLabClient.instance().getMilestones(Repository.selectedProject.getId(), milestonesCallback);
-		
-		Bypass bypass = new Bypass();
-		String desc = Repository.selectedIssue.getDescription();
-		if(desc == null) {
-			desc = "";
-		}
-		description.setText(bypass.markdownToSpannable(desc));
-		description.setMovementMethod(LinkMovementMethod.getInstance());
-		
-		Repository.setListViewSize(noteList);
-	}
-	
-	private void loadNotes() {
-		progressBar.setVisibility(View.VISIBLE);
+        long tempId = Repository.selectedIssue.getIid();
+        if(tempId < 1) {
+            tempId = Repository.selectedIssue.getId();
+        }
+
+        toolbar.setNavigationIcon(R.drawable.ic_back);
+        toolbar.setNavigationOnClickListener(new View.OnClickListener() {
+            @Override
+            public void onClick(View v) {
+                onBackPressed();
+            }
+        });
+        toolbar.setTitle("Issue #" + tempId);
+
+        notesAdapter = new NotesAdapter();
+        listView.setLayoutManager(new LinearLayoutManager(this));
+        listView.setAdapter(notesAdapter);
+
+        swipeRefreshLayout.setOnRefreshListener(new SwipeRefreshLayout.OnRefreshListener() {
+            @Override
+            public void onRefresh() {
+                load();
+            }
+        });
+        load();
+    }
+
+    private void load() {
+		swipeRefreshLayout.setRefreshing(true);
+        //TODO chain these
         GitLabClient.instance().getIssueNotes(Repository.selectedProject.getId(), Repository.selectedIssue.getId(), notesCallback);
+        GitLabClient.instance().getMilestones(Repository.selectedProject.getId(), milestonesCallback);
+        GitLabClient.instance().getUsersFallback(Repository.selectedProject.getId(), usersCallback);
 	}
 
 	private void changeStatus() {
-		String selection = stateSpinner.getSelectedItem().toString();
-		String value = "";
-		if(selection.equals("closed") && (Repository.selectedIssue.getState().equals("opened") || Repository.selectedIssue.getState().equals("reopened"))) {
-			value = "close";
-		}
-		if((selection.equals("reopened") || selection.equals("opened")) && Repository.selectedIssue.getState().equals("closed")) {
-			value = "reopen";
-		}
-
-        GitLabClient.instance().editIssue(
-				Repository.selectedProject.getId(),
-				Repository.selectedIssue.getId(),
-				value,
-				"",
-				issueCallback);
+//		String selection = stateSpinner.getSelectedItem().toString();
+//		String value = "";
+//		if(selection.equals("closed") && (Repository.selectedIssue.getState().equals("opened") || Repository.selectedIssue.getState().equals("reopened"))) {
+//			value = "close";
+//		}
+//		if((selection.equals("reopened") || selection.equals("opened")) && Repository.selectedIssue.getState().equals("closed")) {
+//			value = "reopen";
+//		}
+//
+//        GitLabClient.instance().editIssue(
+//				Repository.selectedProject.getId(),
+//				Repository.selectedIssue.getId(),
+//				value,
+//				"",
+//				issueCallback);
 	}
 	
 	private Callback<List<Note>> notesCallback = new Callback<List<Note>>() {
 		
 		@Override
 		public void success(List<Note> notes, Response resp) {
-			progressBar.setVisibility(View.GONE);
-			
-			NoteAdapter noteAdapter = new NoteAdapter(IssueActivity.this, notes);
-			noteList.setAdapter(noteAdapter);
-			
-			Repository.setListViewSize(noteList);
+			swipeRefreshLayout.setRefreshing(false);
+            notesAdapter.addNotes(notes);
 		}
 		
 		@Override
 		public void failure(RetrofitError e) {
-			RetrofitHelper.printDebugInfo(IssueActivity.this, e);
-			
-			progressBar.setVisibility(View.GONE);
+            Timber.e(e.toString());
+			swipeRefreshLayout.setRefreshing(false);
 			Snackbar.make(getWindow().getDecorView(), getString(R.string.connection_error), Snackbar.LENGTH_SHORT)
 					.show();
 		}
@@ -192,8 +123,9 @@ public class IssueActivity extends BaseActivity {
 	public void onNewNoteClick() {
 		String body = newNoteEdit.getText().toString();
 		
-		if(body.length() < 1)
-			return;
+		if(body.length() < 1) {
+            return;
+        }
 		
 		pd = ProgressDialog.show(IssueActivity.this, "", getResources().getString(R.string.progress_dialog), true);
 		
@@ -209,28 +141,19 @@ public class IssueActivity extends BaseActivity {
 		
 		@Override
 		public void success(Note note, Response resp) {
-			if(pd != null && pd.isShowing())
-				pd.cancel();
-			
-			((NoteAdapter) noteList.getAdapter()).addNote(note);
-			Repository.setListViewSize(noteList);
-			
-			scroll.post(new Runnable() {
-				
-				@Override
-				public void run() {
-					// Scroll to bottom of list
-					scroll.fullScroll(View.FOCUS_DOWN);
-				}
-			});
+			if(pd != null && pd.isShowing()) {
+                pd.cancel();
+            }
+			notesAdapter.addNote(note);
 		}
 		
 		@Override
 		public void failure(RetrofitError e) {
-			RetrofitHelper.printDebugInfo(IssueActivity.this, e);
+            Timber.e(e.toString());
 			
-			if(pd != null && pd.isShowing())
-				pd.cancel();
+			if(pd != null && pd.isShowing()) {
+                pd.cancel();
+            }
 
 			Snackbar.make(getWindow().getDecorView(), getString(R.string.connection_error), Snackbar.LENGTH_SHORT)
 					.show();
@@ -241,19 +164,19 @@ public class IssueActivity extends BaseActivity {
 		
 		@Override
 		public void success(Issue issue, Response resp) {
-			if(pd != null && pd.isShowing())
+			if(pd != null && pd.isShowing()) {
 				pd.cancel();
+			}
 			
-			Repository.selectedIssue.setState(stateSpinner.getSelectedItem().toString());
-			Repository.selectedIssue.setAssignee((User) assigneeSpinner.getSelectedItem());
-			Repository.selectedIssue.setMilestone((Milestone) milestoneSpinner.getSelectedItem());
+//			Repository.selectedIssue.setState(stateSpinner.getSelectedItem().toString());
+//			Repository.selectedIssue.setAssignee((User) assigneeSpinner.getSelectedItem());
+//			Repository.selectedIssue.setMilestone((Milestone) milestoneSpinner.getSelectedItem());
 			//TODO notify the main activity when a issue changes so it will update in the list
 		}
 		
 		@Override
 		public void failure(RetrofitError e) {
-			RetrofitHelper.printDebugInfo(IssueActivity.this, e);
-			
+			Timber.e(e.toString());
 			if(pd != null && pd.isShowing()) {
 				pd.cancel();
 			}
@@ -266,18 +189,17 @@ public class IssueActivity extends BaseActivity {
 		
 		@Override
 		public void success(List<User> users, Response resp) {
-			progressBar.setVisibility(View.GONE);
-			
-			UserAdapter ua = new UserAdapter(IssueActivity.this, users);
-			assigneeSpinner.setAdapter(ua);
-			assigneeSpinner.setSelection(ua.getPosition(Repository.selectedIssue.getAssignee()), true);
+			swipeRefreshLayout.setRefreshing(false);
+            notesAdapter.addUsers(users);
+//			UserAdapter ua = new UserAdapter(IssueActivity.this, users);
+//			assigneeSpinner.setAdapter(ua);
+//			assigneeSpinner.setSelection(ua.getPosition(Repository.selectedIssue.getAssignee()), true);
 		}
 		
 		@Override
 		public void failure(RetrofitError e) {
-			RetrofitHelper.printDebugInfo(IssueActivity.this, e);
-			
-			progressBar.setVisibility(View.GONE);
+			Timber.e(e.toString());
+			swipeRefreshLayout.setRefreshing(false);
 			Snackbar.make(getWindow().getDecorView(), getString(R.string.connection_error), Snackbar.LENGTH_SHORT)
 					.show();
 		}
@@ -287,21 +209,21 @@ public class IssueActivity extends BaseActivity {
 		
 		@Override
 		public void success(List<Milestone> milestones, Response resp) {
-			progressBar.setVisibility(View.GONE);
-			
-			MilestonesAdapter ma = new MilestonesAdapter(IssueActivity.this, milestones);
-			milestoneSpinner.setAdapter(ma);
-			milestoneSpinner.setSelection(ma.getPosition(Repository.selectedIssue.getMilestone()), true);
-			if (milestones.isEmpty()) {
-				milestoneSpinner.setVisibility(View.GONE);
-			}
+			swipeRefreshLayout.setRefreshing(false);
+
+            notesAdapter.addMilestones(milestones);
+//			MilestonesAdapter ma = new MilestonesAdapter(IssueActivity.this, milestones);
+//			milestoneSpinner.setAdapter(ma);
+//			milestoneSpinner.setSelection(ma.getPosition(Repository.selectedIssue.getMilestone()), true);
+//			if (milestones.isEmpty()) {
+//				milestoneSpinner.setVisibility(View.GONE);
+//			}
 		}
 		
 		@Override
 		public void failure(RetrofitError e) {
-			RetrofitHelper.printDebugInfo(IssueActivity.this, e);
-			
-			progressBar.setVisibility(View.GONE);
+            Timber.e(e.toString());
+			swipeRefreshLayout.setRefreshing(false);
 			Snackbar.make(getWindow().getDecorView(), getString(R.string.connection_error), Snackbar.LENGTH_SHORT)
 					.show();
 		}
diff --git a/app/src/main/java/com/commit451/gitlab/adapter/NoteAdapter.java b/app/src/main/java/com/commit451/gitlab/adapter/NoteAdapter.java
deleted file mode 100644
index 5358da77..00000000
--- a/app/src/main/java/com/commit451/gitlab/adapter/NoteAdapter.java
+++ /dev/null
@@ -1,98 +0,0 @@
-package com.commit451.gitlab.adapter;
-
-import android.content.Context;
-import android.text.format.DateUtils;
-import android.text.method.LinkMovementMethod;
-import android.view.LayoutInflater;
-import android.view.View;
-import android.view.ViewGroup;
-import android.widget.BaseAdapter;
-import android.widget.ImageView;
-import android.widget.TextView;
-
-import com.commit451.gitlab.R;
-import com.commit451.gitlab.model.Note;
-import com.commit451.gitlab.tools.Repository;
-import com.squareup.picasso.Picasso;
-
-import java.util.ArrayList;
-import java.util.List;
-
-import fr.tkeunebr.gravatar.Gravatar;
-import in.uncod.android.bypass.Bypass;
-
-public class NoteAdapter extends BaseAdapter {
-	
-	private ArrayList<Note> notes;
-	private LayoutInflater inflater;
-
-	public NoteAdapter(Context context, List<Note> notes) {
-		this.notes = new ArrayList<Note>(notes);
-		
-		if(context != null) {
-			inflater = (LayoutInflater) context.getSystemService(Context.LAYOUT_INFLATER_SERVICE);
-		}
-	}
-	
-	@Override
-	public int getCount() {
-		return notes.size();
-	}
-
-	@Override
-	public Note getItem(int position) {
-		return notes.get(position);
-	}
-
-	@Override
-	public long getItemId(int position) {
-		return position;
-	}
-	
-	public void addNote(Note note) {
-		if(note != null) {
-			notes.add(note);
-			notifyDataSetChanged();
-		}
-	}
-
-	@Override
-	public View getView(int position, View convertView, ViewGroup parent) {
-        if(convertView == null) convertView = inflater.inflate(R.layout.note_list_item, parent, false);
-
-        if(position >= notes.size() || notes.get(position) == null)
-			return convertView;
-
-		final TextView title = (TextView) convertView.findViewById(R.id.title);
-        final TextView custom = (TextView) convertView.findViewById(R.id.custom);
-		final TextView summary = (TextView) convertView.findViewById(R.id.summary);
-        final ImageView icon = (ImageView) convertView.findViewById(R.id.icon);
-
-        if(notes.get(position).getCreatedAt() != null)
-		    custom.setText(DateUtils.getRelativeTimeSpanString(notes.get(position).getCreatedAt().getTime()));
-		if(notes.get(position).getAuthor() != null)
-            title.setText(notes.get(position).getAuthor().getName());
-
-		String temp = "";
-		if(notes.get(position).getBody() != null)
-			temp = notes.get(position).getBody();
-		Bypass bypass = new Bypass();
-        summary.setText(bypass.markdownToSpannable(temp));
-        summary.setMovementMethod(LinkMovementMethod.getInstance());
-		
-		float percent = Repository.displayWidth / 720f;
-		int size = (int) (96f * percent);
-
-        String url = "http://www.gravatar.com/avatar/00000000000000000000000000000000?s=" + size;
-
-        if(notes.get(position).getAuthor().getEmail() != null)
-            url = Gravatar.init().with(notes.get(position).getAuthor().getEmail()).size(size).build();
-        else if(notes.get(position).getAuthor().getAvatarUrl() != null)
-            url = notes.get(position).getAuthor().getAvatarUrl() + "&s=" + size;
-
-        Picasso.with(convertView.getContext()).load(url).into(icon);
-
-		return convertView;
-	}
-
-}
diff --git a/app/src/main/java/com/commit451/gitlab/adapter/NotesAdapter.java b/app/src/main/java/com/commit451/gitlab/adapter/NotesAdapter.java
new file mode 100644
index 00000000..2ca7c7ed
--- /dev/null
+++ b/app/src/main/java/com/commit451/gitlab/adapter/NotesAdapter.java
@@ -0,0 +1,108 @@
+package com.commit451.gitlab.adapter;
+
+import android.support.v7.widget.RecyclerView;
+import android.view.ViewGroup;
+
+import com.commit451.gitlab.model.Milestone;
+import com.commit451.gitlab.model.Note;
+import com.commit451.gitlab.model.User;
+import com.commit451.gitlab.viewHolders.IssueHeaderViewHolder;
+import com.commit451.gitlab.viewHolders.NoteViewHolder;
+
+import java.util.ArrayList;
+import java.util.List;
+
+/**
+ * Nice notes
+ * Created by Jawn on 8/6/2015.
+ */
+public class NotesAdapter extends RecyclerView.Adapter<RecyclerView.ViewHolder> {
+
+    private static final int TYPE_HEADER = 0;
+    private static final int TYPE_COMMENT = 1;
+
+    private static final int HEADER_COUNT = 1;
+
+    private ArrayList<Note> mNotes;
+    private ArrayList<User> mUsers;
+    private ArrayList<Milestone> mMilestones;
+
+    public NotesAdapter() {
+        mNotes = new ArrayList<>();
+        mUsers = new ArrayList<>();
+        mMilestones = new ArrayList<>();
+    }
+
+    @Override
+    public RecyclerView.ViewHolder onCreateViewHolder(ViewGroup parent, int viewType) {
+        if (viewType == TYPE_HEADER) {
+            return IssueHeaderViewHolder.create(parent);
+        } else if (viewType == TYPE_COMMENT) {
+            RecyclerView.ViewHolder holder = NoteViewHolder.newInstance(parent);
+            return holder;
+        }
+        throw new IllegalArgumentException("No view type matches");
+    }
+
+    @Override
+    public void onBindViewHolder(final RecyclerView.ViewHolder holder, int position) {
+        if (holder instanceof IssueHeaderViewHolder) {
+            ((IssueHeaderViewHolder) holder).bind();
+        } else if (holder instanceof NoteViewHolder) {
+            Note note = getNoteAt(position);
+            ((NoteViewHolder) holder).bind(note);
+        }
+    }
+
+    @Override
+    public int getItemCount() {
+        return mNotes.size() + HEADER_COUNT;
+    }
+
+    @Override
+    public int getItemViewType(int position) {
+        if (isPositionHeader(position)) {
+            return TYPE_HEADER;
+        } else {
+            return TYPE_COMMENT;
+        }
+    }
+
+    private boolean isPositionHeader(int position) {
+        return position == 0;
+    }
+
+    public Note getNoteAt(int position) {
+        return mNotes.get(position-1);
+    }
+
+    public void addNotes(List<Note> notes) {
+        if (!notes.isEmpty()) {
+            mNotes.clear();
+            mNotes.addAll(notes);
+        }
+        notifyDataSetChanged();
+    }
+
+    public void addNote(Note note) {
+        //TODO declare position that changed
+        mNotes.add(0, note);
+        notifyItemInserted(0);
+    }
+
+    public void addUsers(List<User> users) {
+        if (!users.isEmpty()) {
+            users.clear();
+            mUsers.addAll(users);
+        }
+        notifyDataSetChanged();
+    }
+
+    public void addMilestones(List<Milestone> milestones) {
+        if (!milestones.isEmpty()) {
+            milestones.clear();
+            mMilestones.addAll(milestones);
+        }
+        notifyDataSetChanged();
+    }
+}
diff --git a/app/src/main/java/com/commit451/gitlab/events/IssueCreatedEvent.java b/app/src/main/java/com/commit451/gitlab/events/IssueCreatedEvent.java
new file mode 100644
index 00000000..8722267e
--- /dev/null
+++ b/app/src/main/java/com/commit451/gitlab/events/IssueCreatedEvent.java
@@ -0,0 +1,7 @@
+package com.commit451.gitlab.events;
+
+/**
+ * Created by Jawn on 7/31/2015.
+ */
+public class IssueCreatedEvent {
+}
diff --git a/app/src/main/java/com/commit451/gitlab/model/Project.java b/app/src/main/java/com/commit451/gitlab/model/Project.java
index 211dd097..0f2ea03c 100644
--- a/app/src/main/java/com/commit451/gitlab/model/Project.java
+++ b/app/src/main/java/com/commit451/gitlab/model/Project.java
@@ -3,6 +3,7 @@ package com.commit451.gitlab.model;
 import java.util.Date;
 
 import com.commit451.gitlab.tools.Repository;
+import com.google.gson.annotations.SerializedName;
 
 public class Project {
 	
@@ -19,6 +20,8 @@ public class Project {
 	private boolean wall_enabled;
 	private boolean wiki_enabled;
 	private Date created_at;
+	@SerializedName("avatar_url")
+	private String avatarUrl;
 	
 	public long getId() {
 		return id;
@@ -136,7 +139,15 @@ public class Project {
 		else
 			return name;
 	}
-	
+
+	public String getAvatarUrl() {
+		return avatarUrl;
+	}
+
+	public void setAvatarUrl(String avatarUrl) {
+		this.avatarUrl = avatarUrl;
+	}
+
 	public Group getGroup() {
 		if(Repository.groups == null)
 			return null;
diff --git a/app/src/main/java/com/commit451/gitlab/tools/Repository.java b/app/src/main/java/com/commit451/gitlab/tools/Repository.java
index 2d21c6f7..75d96b6b 100644
--- a/app/src/main/java/com/commit451/gitlab/tools/Repository.java
+++ b/app/src/main/java/com/commit451/gitlab/tools/Repository.java
@@ -1,14 +1,7 @@
 package com.commit451.gitlab.tools;
 
 import android.content.Context;
-import android.view.View;
-import android.view.View.MeasureSpec;
-import android.view.ViewGroup;
-import android.widget.ListAdapter;
-import android.widget.ListView;
 
-import com.commit451.gitlab.adapter.IssuesAdapter;
-import com.commit451.gitlab.adapter.NewUserAdapter;
 import com.commit451.gitlab.model.Branch;
 import com.commit451.gitlab.model.DiffLine;
 import com.commit451.gitlab.model.Group;
@@ -52,25 +45,4 @@ public class Repository {
 		
 		newestCommit = null;
 	}
-
-	public static void setListViewSize(ListView listView) {
-		ListAdapter listAdapter = listView.getAdapter();
-		if(listAdapter == null)
-			return;
-		
-		int totalHeight = listView.getPaddingTop() + listView.getPaddingBottom();
-		int desiredWidth = MeasureSpec.makeMeasureSpec(listView.getWidth(), MeasureSpec.AT_MOST);
-		for(int i = 0; i < listAdapter.getCount(); i++) {
-			View listItem = listAdapter.getView(i, null, listView);
-			if(listItem instanceof ViewGroup)
-				listItem.setLayoutParams(new ViewGroup.LayoutParams(ViewGroup.LayoutParams.WRAP_CONTENT, ViewGroup.LayoutParams.WRAP_CONTENT));
-			listItem.measure(desiredWidth, MeasureSpec.UNSPECIFIED);
-			totalHeight += listItem.getMeasuredHeight();
-		}
-		
-		ViewGroup.LayoutParams params = listView.getLayoutParams();
-		params.height = totalHeight + (listView.getDividerHeight() * (listAdapter.getCount() - 1));
-		listView.setLayoutParams(params);
-		listView.requestLayout();
-	}
 }
diff --git a/app/src/main/java/com/commit451/gitlab/viewHolders/IssueHeaderViewHolder.java b/app/src/main/java/com/commit451/gitlab/viewHolders/IssueHeaderViewHolder.java
new file mode 100644
index 00000000..83042fbb
--- /dev/null
+++ b/app/src/main/java/com/commit451/gitlab/viewHolders/IssueHeaderViewHolder.java
@@ -0,0 +1,90 @@
+package com.commit451.gitlab.viewHolders;
+
+import android.support.v7.widget.RecyclerView;
+import android.text.method.LinkMovementMethod;
+import android.view.LayoutInflater;
+import android.view.View;
+import android.view.ViewGroup;
+import android.widget.Spinner;
+import android.widget.TextView;
+
+import com.commit451.gitlab.R;
+import com.commit451.gitlab.tools.Repository;
+
+import butterknife.Bind;
+import butterknife.ButterKnife;
+import in.uncod.android.bypass.Bypass;
+
+/**
+ * Created by Jawn on 8/6/2015.
+ */
+public class IssueHeaderViewHolder extends RecyclerView.ViewHolder {
+
+    public static IssueHeaderViewHolder create(ViewGroup parent) {
+        View view = LayoutInflater.from(parent.getContext())
+                .inflate(R.layout.item_header_issue, parent, false);
+        return new IssueHeaderViewHolder(view);
+    }
+
+    @Bind(R.id.title) TextView title;
+    @Bind(R.id.state_spinner) Spinner stateSpinner;
+    @Bind(R.id.assignee_spinner) Spinner assigneeSpinner;
+    @Bind(R.id.milestone_spinner) Spinner milestoneSpinner;
+    @Bind(R.id.description) TextView description;
+
+    public IssueHeaderViewHolder(View view) {
+        super(view);
+        ButterKnife.bind(this, view);
+    }
+
+    public void bind() {
+        title.setText(Repository.selectedIssue.getTitle());
+        Bypass bypass = new Bypass();
+        String desc = Repository.selectedIssue.getDescription();
+        if(desc == null) {
+            desc = "";
+        }
+        description.setText(bypass.markdownToSpannable(desc));
+        description.setMovementMethod(LinkMovementMethod.getInstance());
+
+//        ArrayList<String> temp3 = new ArrayList<>();
+//        if(Repository.selectedIssue.getState().equals("opened")) {
+//            temp3.add("opened");
+//            temp3.add("closed");
+//        }
+//        else {
+//            temp3.add("closed");
+//            temp3.add("reopened");
+//        }
+//        stateSpinner.setAdapter(new ArrayAdapter<>(this, android.R.layout.simple_list_item_1, temp3));
+//        stateSpinner.setSelection(temp3.indexOf(Repository.selectedIssue.getState()));
+//        //Hack so that the onItemSelected does not get triggered the first time we create the view
+//        stateSpinner.post(new Runnable() {
+//            @Override
+//            public void run() {
+//                stateSpinner.setOnItemSelectedListener(new AdapterView.OnItemSelectedListener() {
+//                    @Override
+//                    public void onItemSelected(AdapterView<?> parent, View view, int position, long id) {
+//                        changeStatus();
+//                    }
+//
+//                    @Override
+//                    public void onNothingSelected(AdapterView<?> parent) {
+//                    }
+//                });
+//            }
+//        });
+//
+//        if(Repository.selectedIssue.getAssignee() != null) {
+//            ArrayList<User> temp = new ArrayList<User>();
+//            temp.add(Repository.selectedIssue.getAssignee());
+//            assigneeSpinner.setAdapter(new UserAdapter(this, temp));
+//        }
+//
+//        ArrayList<Milestone> temp2 = new ArrayList<Milestone>();
+//        if(Repository.selectedIssue.getMilestone() != null) {
+//            temp2.add(Repository.selectedIssue.getMilestone());
+//        }
+//        milestoneSpinner.setAdapter(new MilestonesAdapter(this, temp2));
+    }
+}
\ No newline at end of file
diff --git a/app/src/main/java/com/commit451/gitlab/viewHolders/NoteViewHolder.java b/app/src/main/java/com/commit451/gitlab/viewHolders/NoteViewHolder.java
new file mode 100644
index 00000000..ca8a0801
--- /dev/null
+++ b/app/src/main/java/com/commit451/gitlab/viewHolders/NoteViewHolder.java
@@ -0,0 +1,73 @@
+package com.commit451.gitlab.viewHolders;
+
+import android.support.v7.widget.RecyclerView;
+import android.text.format.DateUtils;
+import android.text.method.LinkMovementMethod;
+import android.view.LayoutInflater;
+import android.view.View;
+import android.view.ViewGroup;
+import android.widget.ImageView;
+import android.widget.TextView;
+
+import com.commit451.gitlab.R;
+import com.commit451.gitlab.model.Note;
+import com.commit451.gitlab.tools.Repository;
+import com.squareup.picasso.Picasso;
+
+import butterknife.Bind;
+import butterknife.ButterKnife;
+import fr.tkeunebr.gravatar.Gravatar;
+import in.uncod.android.bypass.Bypass;
+
+/**
+ * Created by Jawn on 8/6/2015.
+ */
+public class NoteViewHolder extends RecyclerView.ViewHolder{
+
+    public static NoteViewHolder newInstance(ViewGroup parent) {
+        View view = LayoutInflater.from(parent.getContext())
+                .inflate(R.layout.item_note, parent, false);
+        return new NoteViewHolder(view);
+    }
+
+    @Bind(R.id.title) TextView title;
+    @Bind(R.id.summary) TextView summary;
+    @Bind(R.id.custom) TextView custom;
+    @Bind(R.id.icon) ImageView icon;
+
+    public NoteViewHolder(View view) {
+        super(view);
+        ButterKnife.bind(this, view);
+    }
+
+    public void bind(Note note) {
+        if(note.getCreatedAt() != null) {
+            custom.setText(DateUtils.getRelativeTimeSpanString(note.getCreatedAt().getTime()));
+        }
+        if(note.getAuthor() != null) {
+            title.setText(note.getAuthor().getName());
+        }
+
+        String temp = "";
+        if(note.getBody() != null) {
+            temp = note.getBody();
+        }
+        Bypass bypass = new Bypass();
+        summary.setText(bypass.markdownToSpannable(temp));
+        summary.setMovementMethod(LinkMovementMethod.getInstance());
+
+        float percent = Repository.displayWidth / 720f;
+        int size = (int) (96f * percent);
+
+        String url = "http://www.gravatar.com/avatar/00000000000000000000000000000000?s=" + size;
+
+        if(note.getAuthor().getEmail() != null) {
+            url = Gravatar.init().with(note.getAuthor().getEmail()).size(size).build();
+        }
+        else if(note.getAuthor().getAvatarUrl() != null) {
+            url = note.getAuthor().getAvatarUrl() + "&s=" + size;
+        }
+
+        Picasso.with(itemView.getContext()).load(url).into(icon);
+    }
+}
diff --git a/app/src/main/java/com/commit451/gitlab/viewHolders/ProjectViewHolder.java b/app/src/main/java/com/commit451/gitlab/viewHolders/ProjectViewHolder.java
index 0809e486..98659f60 100644
--- a/app/src/main/java/com/commit451/gitlab/viewHolders/ProjectViewHolder.java
+++ b/app/src/main/java/com/commit451/gitlab/viewHolders/ProjectViewHolder.java
@@ -1,17 +1,21 @@
 package com.commit451.gitlab.viewHolders;
 
 import android.support.v7.widget.RecyclerView;
+import android.text.TextUtils;
 import android.view.LayoutInflater;
 import android.view.View;
 import android.view.ViewGroup;
+import android.widget.ImageView;
 import android.widget.TextView;
 
 import com.commit451.gitlab.R;
 import com.commit451.gitlab.model.Project;
 import com.commit451.gitlab.tools.Repository;
+import com.squareup.picasso.Picasso;
 
 import butterknife.Bind;
 import butterknife.ButterKnife;
+import timber.log.Timber;
 
 /**
  * Projects, yay!
@@ -26,6 +30,7 @@ public class ProjectViewHolder extends RecyclerView.ViewHolder {
     }
 
     @Bind(R.id.project_title) TextView title;
+    @Bind(R.id.project_image) ImageView image;
 
     public ProjectViewHolder(View view) {
         super(view);
@@ -35,11 +40,19 @@ public class ProjectViewHolder extends RecyclerView.ViewHolder {
     public void bind(Project project) {
         title.setText(project.getName());
         if (project.equals(Repository.selectedProject)) {
+            itemView.setPressed(true);
             itemView.setSelected(true);
             title.setTextColor(itemView.getResources().getColor(R.color.orange));
         } else {
+            itemView.setPressed(false);
             itemView.setSelected(false);
             title.setTextColor(itemView.getResources().getColor(R.color.material_blue_grey_800));
         }
+        if (!TextUtils.isEmpty(project.getAvatarUrl())) {
+            Timber.d("avatar url: " + project.getAvatarUrl());
+            Picasso.with(itemView.getContext())
+                    .load(project.getAvatarUrl())
+                    .into(image);
+        }
     }
 }
