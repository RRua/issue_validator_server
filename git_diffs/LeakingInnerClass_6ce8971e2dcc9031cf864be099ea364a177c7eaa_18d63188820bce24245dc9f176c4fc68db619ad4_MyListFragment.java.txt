diff --git a/app/src/main/java/ca/louisbourque/freenetassistant/Constants.java b/app/src/main/java/ca/louisbourque/freenetassistant/Constants.java
index 47b4e4b..4f8a06e 100644
--- a/app/src/main/java/ca/louisbourque/freenetassistant/Constants.java
+++ b/app/src/main/java/ca/louisbourque/freenetassistant/Constants.java
@@ -2,6 +2,8 @@ package ca.louisbourque.freenetassistant;
 
 import android.annotation.SuppressLint;
 
+import java.util.ArrayList;
+
 public class Constants {
 	
 	public static final String ACTION 	= "ca.louisbourque.timagebrowser.action";
@@ -32,6 +34,7 @@ public class Constants {
 	public static final String PEERS = "peers";
 	public static final String UPLOAD_DIRS = "uploadDirs";
 	public static final String PREF_LOCAL_NODES = "localNodes";
+    public static final String PREF_FRIEND_NODES = "friendNodes";
 	public static final String PREF_ACTIVE_LOCAL_NODE = "activeLocalNode";
 	public static final String PREF_UPLOAD_KEY = "uploadKey";
 	public static final String PREF_REFRESH_RATE = "refresh_rate";
@@ -41,10 +44,15 @@ public class Constants {
 	public static final String KEY_TYPE_CHK = "CHK@";
 	public static final String KEY_TYPE_SSK = "SSK@";
 	public static final String KEY_TYPE_DEFAULT = KEY_TYPE_SSK;
+    public static final String DEFAULT_TRUST = "NORMAL";
+    public static final String DEFAULT_VISIBILITY = "NO";
     public static String ToastMessage = "ToastMessage";
 	
 	public static int numberOfTabs = 4;
 	public static int debounceInterval = 500;
+
+    public static ArrayList<String> TrustValues = new ArrayList<String>(){{add("HIGH");add("NORMAL");add("LOW");}};
+    public static ArrayList<String> VisibilityValues = new ArrayList<String>(){{add("YES");add("NAME_ONLY");add("NO");}};
 	
 	//http://stackoverflow.com/a/3758880
 	@SuppressLint("DefaultLocale")
diff --git a/app/src/main/java/ca/louisbourque/freenetassistant/FriendNode.java b/app/src/main/java/ca/louisbourque/freenetassistant/FriendNode.java
new file mode 100644
index 0000000..c359c67
--- /dev/null
+++ b/app/src/main/java/ca/louisbourque/freenetassistant/FriendNode.java
@@ -0,0 +1,95 @@
+package ca.louisbourque.freenetassistant;
+
+import java.io.Serializable;
+
+public class FriendNode implements Serializable {
+
+	/**
+	 *
+	 */
+	private static final long serialVersionUID = 1L;
+	private String name;
+    private String identity;
+    private String trust;
+    private String visibility;
+    private String nodeReference;
+    private String encodedNodeReference;
+
+	public FriendNode(){
+		new FriendNode("","","","");
+	}
+
+	public FriendNode(String name, String identity, String trust, String visibility){
+		this.name = name;
+        this.identity = identity;
+        this.trust = trust;
+        this.visibility = visibility;
+        this.nodeReference = "";
+        this.encodedNodeReference = "";
+	}
+
+	public String getName() {
+		return name;
+	}
+
+	public void setName(String name) {
+		this.name = name;
+	}
+
+    public String getIdentity() {
+        return identity;
+    }
+
+    public void setIdentity(String identity) {
+        this.identity = identity;
+    }
+
+    public String getTrust() {
+        return trust;
+    }
+
+    public void setTrust(String trust) {
+        this.trust = trust;
+    }
+
+    public String getVisibility() {
+        return visibility;
+    }
+
+    public void setVisibility(String visibility) {
+        this.visibility = visibility;
+    }
+
+    public String getNodeReference() {
+        return nodeReference;
+    }
+
+    public void setNodeReference(String nodeReference) {
+        this.nodeReference = nodeReference;
+    }
+
+    public String getEncodedNodeReference() {
+        return encodedNodeReference;
+    }
+
+    public void setEncodedNodeReference(String encodedNodeReference) {
+        this.encodedNodeReference = encodedNodeReference;
+    }
+
+    public String toString()
+	    {
+	        return "[FriendNode: name=" + name +
+	            " trust=" + trust +
+	            " visibility=" + visibility +
+	            "]";
+	    }
+
+    @Override
+    public boolean equals(Object other){
+        if (other == null) return false;
+        if (other == this) return true;
+        if (!(other instanceof FriendNode))return false;
+        FriendNode otherFriendNode = (FriendNode)other;
+        return otherFriendNode.getIdentity().equals(this.identity);
+    }
+}
diff --git a/app/src/main/java/ca/louisbourque/freenetassistant/FriendNodeListFragment.java b/app/src/main/java/ca/louisbourque/freenetassistant/FriendNodeListFragment.java
new file mode 100644
index 0000000..5b061f6
--- /dev/null
+++ b/app/src/main/java/ca/louisbourque/freenetassistant/FriendNodeListFragment.java
@@ -0,0 +1,110 @@
+package ca.louisbourque.freenetassistant;
+
+import android.app.Activity;
+import android.content.Context;
+import android.os.Bundle;
+import android.support.v4.app.ListFragment;
+import android.view.LayoutInflater;
+import android.view.View;
+import android.view.ViewGroup;
+import android.widget.ArrayAdapter;
+import android.widget.ImageView;
+import android.widget.ListView;
+import android.widget.TextView;
+
+import java.util.concurrent.CopyOnWriteArrayList;
+
+public class FriendNodeListFragment extends ListFragment {
+
+
+
+    public interface OnItemSelectedListener {
+        public void redrawFriendNodeManagement();
+    }
+    private OnItemSelectedListener listener;
+    private CopyOnWriteArrayList<FriendNode> values;
+    private GlobalState gs;
+    // This is the Adapter being used to display the list's data
+    private NodeManagerArrayAdapter mAdapter;
+    private int lastChecked = -1;
+
+    @Override
+    public void onActivityCreated(Bundle savedInstanceState) {
+        super.onActivityCreated(savedInstanceState);
+        this.gs = (GlobalState) getActivity().getApplication();
+        values = this.gs.getFriendNodes();
+        mAdapter = new NodeManagerArrayAdapter(getActivity(),values);
+
+        ListView list = getListView();
+
+
+        setListAdapter(mAdapter);
+        list.setChoiceMode(ListView.CHOICE_MODE_SINGLE);
+        list.setDivider(getResources().getDrawable(R.drawable.divider));
+        list.setSelector(getResources().getDrawable(R.drawable.list_selection_background));
+    }
+
+    @Override
+    public void onAttach(Activity activity) {
+        super.onAttach(activity);
+        if (activity instanceof OnItemSelectedListener) {
+            listener = (OnItemSelectedListener) activity;
+        }
+    }
+
+    @Override
+    public void onListItemClick(ListView l, View v, int position, long id) {
+        if(lastChecked == position){
+            l.setItemChecked(position, false);
+            lastChecked = -1;
+        }else {
+            l.setItemChecked(position, true);
+            lastChecked = position;
+        }
+        if(listener != null) {
+            listener.redrawFriendNodeManagement();
+        }
+    }
+
+    private class NodeManagerArrayAdapter extends ArrayAdapter<String> {
+        private final Context context;
+        private CopyOnWriteArrayList<FriendNode> values;
+
+        public NodeManagerArrayAdapter(Context context, CopyOnWriteArrayList<FriendNode> values) {
+            super(context, R.layout.peer);
+            this.context = context;
+            this.values = values;
+        }
+
+        public int getCount (){
+            return values.size();
+        }
+
+        @Override
+        public View getView(int position, View convertView, ViewGroup parent) {
+            LayoutInflater inflater = (LayoutInflater) context
+                    .getSystemService(Context.LAYOUT_INFLATER_SERVICE);
+            View rowView = convertView;
+            if (rowView == null) {
+                rowView = inflater.inflate(R.layout.peer, parent, false);
+            }
+            TextView peerName = (TextView) rowView.findViewById(R.id.peer_name);
+            TextView peerAddress = (TextView) rowView.findViewById(R.id.peer_address);
+            peerName.setText(values.get(position).getName());
+            peerAddress.setText(getResources().getString(R.string.trust) + ": " + values.get(position).getTrust()+"\n"+
+                    getResources().getString(R.string.visibility) + ": " + values.get(position).getVisibility());
+            ImageView peerStatus = (ImageView)rowView.findViewById(R.id.peer_icon);
+            peerStatus.setVisibility(View.INVISIBLE);
+
+            return rowView;
+        }
+    }
+
+    public void notifyDataSetChanged() {
+        mAdapter.notifyDataSetChanged();
+    }
+
+    public CopyOnWriteArrayList<FriendNode> getValues() {
+        return values;
+    }
+}
\ No newline at end of file
diff --git a/app/src/main/java/ca/louisbourque/freenetassistant/FriendNodeManagerActivity.java b/app/src/main/java/ca/louisbourque/freenetassistant/FriendNodeManagerActivity.java
new file mode 100644
index 0000000..eb34de0
--- /dev/null
+++ b/app/src/main/java/ca/louisbourque/freenetassistant/FriendNodeManagerActivity.java
@@ -0,0 +1,146 @@
+package ca.louisbourque.freenetassistant;
+
+import android.app.AlertDialog;
+import android.app.AlertDialog.Builder;
+import android.app.DialogFragment;
+import android.content.DialogInterface;
+import android.os.Bundle;
+import android.support.v7.app.ActionBarActivity;
+import android.support.v7.widget.Toolbar;
+import android.view.Menu;
+import android.view.MenuInflater;
+import android.view.MenuItem;
+import android.widget.AdapterView;
+import android.widget.ListView;
+
+public class FriendNodeManagerActivity extends ActionBarActivity implements FriendNodeManagerDialog.NodeManagerDialogListener,FriendNodeListFragment.OnItemSelectedListener {
+
+	private GlobalState gs;
+	private ListView list;
+    private FriendNodeListFragment mListFragment;
+    private Menu menu;
+    private Builder discardDialog;
+
+	@Override
+	public void onCreate(Bundle savedInstanceState) {
+		super.onCreate(savedInstanceState);
+		setContentView(R.layout.activity_friend_node_management);
+		this.gs = (GlobalState) getApplication();
+
+
+		this.list = (ListView)findViewById(android.R.id.list);
+
+        Toolbar toolbar = (Toolbar) findViewById(R.id.my_toolbar);
+        // setHasOptionsMenu(true);
+        setSupportActionBar(toolbar);
+
+        mListFragment = (FriendNodeListFragment) getSupportFragmentManager().findFragmentById(R.id.listFragment);
+
+        discardDialog = new AlertDialog.Builder(this)
+                .setTitle(R.string.node_discard)
+                .setMessage(R.string.node_discard_message)
+                .setPositiveButton(android.R.string.yes, new DialogInterface.OnClickListener() {
+                    public void onClick(DialogInterface dialog, int which) {
+                        int selected = list.getCheckedItemPosition();
+                        if(selected == AdapterView.INVALID_POSITION){
+                            return;
+                        }
+                        list.setItemChecked(selected,false);
+                        mListFragment.getValues().remove(selected);
+                        mListFragment.notifyDataSetChanged();
+                        gs.savePreferences();
+                        redrawFriendNodeManagement();
+                    }
+                })
+                .setNegativeButton(android.R.string.no, new DialogInterface.OnClickListener() {
+                    public void onClick(DialogInterface dialog, int which) {
+                        // do nothing
+                    }
+                });
+
+
+	}
+
+    @Override
+    protected void onResume() {
+        super.onResume();
+        mListFragment.notifyDataSetChanged();
+        redrawFriendNodeManagement();
+    }
+
+    @Override
+    protected void onStart() {
+        this.gs.registerActivity(this);
+        super.onStart();
+    }
+
+    @Override
+    protected void onStop() {
+        this.gs.unregisterActivity(this);
+        super.onStop();
+    }
+
+    @Override
+    public boolean onCreateOptionsMenu(Menu menu) {
+        this.menu = menu;
+        // Inflate the menu items for use in the action bar
+        MenuInflater inflater = getMenuInflater();
+        inflater.inflate(R.menu.friend_node_manager_menu, menu);
+        return super.onCreateOptionsMenu(menu);
+    }
+
+    @Override
+    public boolean onOptionsItemSelected(MenuItem item) {
+        // Handle presses on the action bar items
+        switch (item.getItemId()) {
+            case R.id.action_edit:
+                handleNodeEdit();
+                return true;
+            case R.id.action_delete:
+                handleNodeDelete();
+                return true;
+            default:
+                return super.onOptionsItemSelected(item);
+        }
+    }
+
+    public void handleNodeEdit(){
+        DialogFragment newFragment = FriendNodeManagerDialog.newInstance(R.string.node_edit, gs.getFriendNodes().get(list.getCheckedItemPosition()));
+        newFragment.show(getFragmentManager(), "dialog");
+    }
+
+    public void handleNodeDelete(){
+        discardDialog.show();
+    }
+
+	public void redrawFriendNodeManagement(){
+        if(this.menu == null) return;
+		int selected = list.getCheckedItemPosition();
+		if(selected == AdapterView.INVALID_POSITION){
+            this.menu.findItem(R.id.action_edit).setVisible(false);
+            this.menu.findItem(R.id.action_delete).setVisible(false);
+		}else{
+            this.menu.findItem(R.id.action_edit).setVisible(true);
+            this.menu.findItem(R.id.action_delete).setVisible(true);
+		}
+	}
+
+
+    @Override
+    public void doPositiveClick(FriendNode friendNode) {
+        int selected = list.getCheckedItemPosition();
+        if(selected == AdapterView.INVALID_POSITION){
+            return;
+        }
+
+        mListFragment.getValues().set(selected, friendNode);
+
+        mListFragment.notifyDataSetChanged();
+        gs.savePreferences();
+    }
+
+    @Override
+    public void doNegativeClick() {
+
+    }
+}
diff --git a/app/src/main/java/ca/louisbourque/freenetassistant/FriendNodeManagerDialog.java b/app/src/main/java/ca/louisbourque/freenetassistant/FriendNodeManagerDialog.java
new file mode 100644
index 0000000..49ca8b6
--- /dev/null
+++ b/app/src/main/java/ca/louisbourque/freenetassistant/FriendNodeManagerDialog.java
@@ -0,0 +1,86 @@
+package ca.louisbourque.freenetassistant;
+
+import android.app.AlertDialog;
+import android.app.Dialog;
+import android.app.DialogFragment;
+import android.content.DialogInterface;
+import android.os.Bundle;
+import android.widget.ArrayAdapter;
+import android.widget.EditText;
+import android.widget.LinearLayout;
+import android.widget.Spinner;
+
+public class FriendNodeManagerDialog extends DialogFragment {
+
+	public static interface NodeManagerDialogListener {
+        public void doPositiveClick(FriendNode friendNode);
+        public void doNegativeClick();
+	}
+
+    private LinearLayout mView;
+    private FriendNode friendNode;
+    private EditText lnName;
+    private Spinner lnTrust;
+    private Spinner lnVisibility;
+
+    public FriendNodeManagerDialog() {
+        //setViewResource(R.layout.node_dialog_layout);
+    }
+    
+    public static FriendNodeManagerDialog newInstance(int title, FriendNode n) {
+    	FriendNodeManagerDialog frag = new FriendNodeManagerDialog();
+    	frag.setFriendNode(n);
+        Bundle args = new Bundle();
+        args.putInt("title", title);
+        frag.setArguments(args);
+        return frag;
+    }
+
+	private void setFriendNode(FriendNode n) {
+		this.friendNode = n;
+		
+	}
+	
+	@Override
+    public Dialog onCreateDialog(Bundle savedInstanceState) {
+        int title = getArguments().getInt("title");
+        mView = (LinearLayout) getActivity().getLayoutInflater().inflate(R.layout.friend_node_dialog_layout, null, false);
+        
+        
+        this.lnName =(EditText) mView.findViewById(R.id.node_name_value);
+        this.lnTrust =(Spinner) mView.findViewById(R.id.trust_spinner);
+        this.lnVisibility =(Spinner) mView.findViewById(R.id.visibility_spinner);
+        
+        
+        lnName.setText(friendNode.getName());
+        ArrayAdapter<String> adapterT = new ArrayAdapter<String>(getActivity(), android.R.layout.simple_spinner_dropdown_item, Constants.TrustValues);
+        this.lnTrust.setAdapter(adapterT);
+        ArrayAdapter<String> adapterV = new ArrayAdapter<String>(getActivity(), android.R.layout.simple_spinner_dropdown_item, Constants.VisibilityValues);
+        this.lnVisibility.setAdapter(adapterV);
+        this.lnTrust.setSelection(Constants.TrustValues.indexOf(this.friendNode.getTrust()));
+        this.lnVisibility.setSelection(Constants.VisibilityValues.indexOf(this.friendNode.getVisibility()));
+        
+        return new AlertDialog.Builder(getActivity())
+                .setTitle(title)
+                .setPositiveButton(R.string.save,
+                    new DialogInterface.OnClickListener() {
+                        public void onClick(DialogInterface dialog, int whichButton) {
+                            
+                            friendNode.setName(String.valueOf(lnName.getText()));
+                            friendNode.setTrust(lnTrust.getSelectedItem().toString());
+                            friendNode.setVisibility(lnVisibility.getSelectedItem().toString());
+                            ((NodeManagerDialogListener)getActivity()).doPositiveClick(friendNode);
+                        }
+                    }
+                )
+                .setNegativeButton(R.string.cancel,
+                    new DialogInterface.OnClickListener() {
+                        public void onClick(DialogInterface dialog, int whichButton) {
+                            ((NodeManagerDialogListener)getActivity()).doNegativeClick();
+                        }
+                    }
+                )
+                .setView(mView)
+                .create();
+    }
+}
diff --git a/app/src/main/java/ca/louisbourque/freenetassistant/GlobalState.java b/app/src/main/java/ca/louisbourque/freenetassistant/GlobalState.java
index 1013fb6..5fcfe36 100644
--- a/app/src/main/java/ca/louisbourque/freenetassistant/GlobalState.java
+++ b/app/src/main/java/ca/louisbourque/freenetassistant/GlobalState.java
@@ -58,6 +58,7 @@ public class GlobalState extends Application{
 	private StateListener peersListener;
 	
 	private CopyOnWriteArrayList<LocalNode> localNodes;
+    private CopyOnWriteArrayList<FriendNode> friendNodes;
 	private int activeLocalNode;
 	private String deviceID;
 	private int refresh_rate;
@@ -137,24 +138,32 @@ public class GlobalState extends Application{
 	
 	public void savePreferences() {
 		Editor editor = sharedPref.edit();
-		String encoded = null;
+		String encodedLocal = null;
+        String encodedFriends = null;
 		  
 		  try {
-		   ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream();
-		   ObjectOutputStream objectOutputStream = new ObjectOutputStream(byteArrayOutputStream);
-		   objectOutputStream.writeObject(this.localNodes);
-		   objectOutputStream.close();
-		   encoded = new String(Base64.encode(byteArrayOutputStream.toByteArray(), Base64.DEFAULT));
+              ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream();
+              ObjectOutputStream objectOutputStream = new ObjectOutputStream(byteArrayOutputStream);
+              objectOutputStream.writeObject(this.localNodes);
+              objectOutputStream.close();
+              encodedLocal = new String(Base64.encode(byteArrayOutputStream.toByteArray(), Base64.DEFAULT));
+              byteArrayOutputStream = new ByteArrayOutputStream();
+              objectOutputStream = new ObjectOutputStream(byteArrayOutputStream);
+              objectOutputStream.writeObject(this.friendNodes);
+              objectOutputStream.close();
+              encodedFriends = new String(Base64.encode(byteArrayOutputStream.toByteArray(), Base64.DEFAULT));
+
 		  } catch (IOException e) {
 		   e.printStackTrace();
 		   return;
 		  }
 		
-		  editor.putString(Constants.PREF_LOCAL_NODES, encoded.toString());
+		  editor.putString(Constants.PREF_LOCAL_NODES, encodedLocal);
+          editor.putString(Constants.PREF_FRIEND_NODES, encodedFriends);
 		  editor.putInt(Constants.PREF_ACTIVE_LOCAL_NODE, this.activeLocalNode);
 		  editor.putInt(Constants.PREF_REFRESH_RATE, this.refresh_rate);
 		  editor.putBoolean(Constants.PREF_WIFI_ONLY, this.wifiOnly);
-		  editor.commit();
+		  editor.apply();
 	}
 	
 	@SuppressWarnings("unchecked")
@@ -167,17 +176,24 @@ public class GlobalState extends Application{
 			  try {
 			   ObjectInputStream objectInputStream = new ObjectInputStream( new ByteArrayInputStream(bytes) );
 			   this.localNodes = (CopyOnWriteArrayList<LocalNode>)objectInputStream.readObject();
-			  } catch (IOException e) {
-				  e.printStackTrace();
-				  this.localNodes = new CopyOnWriteArrayList<LocalNode>();
-			  } catch (ClassNotFoundException e) {
-				  e.printStackTrace();
-				  this.localNodes = new CopyOnWriteArrayList<LocalNode>();
-			  } catch (ClassCastException e) {
+			  } catch (IOException | ClassNotFoundException | ClassCastException e) {
 				  e.printStackTrace();
 				  this.localNodes = new CopyOnWriteArrayList<LocalNode>();
 			  }
 		}
+        String strFriendNodes = sharedPref.getString(Constants.PREF_FRIEND_NODES, "");
+        if(strFriendNodes.equals("")){
+            this.friendNodes = new CopyOnWriteArrayList<FriendNode>();
+        }else{
+            byte[] bytes = Base64.decode(strFriendNodes.getBytes(),Base64.DEFAULT);
+            try {
+                ObjectInputStream objectInputStream = new ObjectInputStream( new ByteArrayInputStream(bytes) );
+                this.friendNodes = (CopyOnWriteArrayList<FriendNode>)objectInputStream.readObject();
+            } catch (IOException | ClassNotFoundException | ClassCastException e) {
+                e.printStackTrace();
+                this.friendNodes = new CopyOnWriteArrayList<FriendNode>();
+            }
+        }
 		this.activeLocalNode = sharedPref.getInt(Constants.PREF_ACTIVE_LOCAL_NODE, 0);
 		this.refresh_rate = sharedPref.getInt(Constants.PREF_REFRESH_RATE, 0);
 		this.deviceID = sharedPref.getString(Constants.PREF_DEVICE_ID,"");
@@ -187,7 +203,7 @@ public class GlobalState extends Application{
 			Random random = new Random();
 			this.deviceID = new BigInteger(130, random).toString(32);
 			editor.putString(Constants.PREF_DEVICE_ID,this.deviceID);
-			editor.commit();
+			editor.apply();
 		}
 	}
 	
@@ -843,7 +859,7 @@ public void onRefreshRateChange(int integer, boolean need_to_reset_loop) {
         refStr+="ark.pubURI="+myNode.getARK().getPublicURI()+"\n";
         EncodedStr+="ark.pubURI="+myNode.getARK().getPublicURI()+"\n";
         refStr+="auth.negTypes="+myNode.getField("auth.negTypes")+"\n";
-        temp = new String(Base64.encode(myNode.getField("auth.negTypes").toString().getBytes(), Base64.NO_PADDING|Base64.NO_WRAP));
+        temp = new String(Base64.encode(myNode.getField("auth.negTypes").getBytes(), Base64.NO_PADDING|Base64.NO_WRAP));
         EncodedStr+="auth.negTypes=="+temp+"\n";
         refStr+="dsaGroup.g="+myNode.getDSAGroup().getBase()+"\n";
         EncodedStr+="dsaGroup.g="+myNode.getDSAGroup().getBase()+"\n";
@@ -856,7 +872,7 @@ public void onRefreshRateChange(int integer, boolean need_to_reset_loop) {
         refStr+="ecdsa.P256.pub="+myNode.getField("ecdsa.P256.pub")+"\n";
         EncodedStr+="ecdsa.P256.pub="+myNode.getField("ecdsa.P256.pub")+"\n";
         refStr+="physical.udp="+myNode.getPhysicalUDP()+"\n";
-        temp = new String(Base64.encode(myNode.getPhysicalUDP().toString().getBytes(), Base64.NO_PADDING|Base64.NO_WRAP));
+        temp = new String(Base64.encode(myNode.getPhysicalUDP().getBytes(), Base64.NO_PADDING|Base64.NO_WRAP));
         EncodedStr+="physical.udp=="+temp+"\n";
         refStr+="End\n";
         EncodedStr+="End\n";
@@ -869,4 +885,17 @@ public void onRefreshRateChange(int integer, boolean need_to_reset_loop) {
         if(!protocolError.getCodeDescription().equals(protocolError.getExtraDescription())) msg += "("+ protocolError.getExtraDescription() + ")";
         showToast(msg,Toast.LENGTH_LONG);
     }
+
+    public void addFriendNode(FriendNode ref) {
+        if(!this.friendNodes.contains(ref)) {
+            this.friendNodes.add(ref);
+        }else{
+            this.friendNodes.set(this.friendNodes.lastIndexOf(ref), ref);
+        }
+        this.savePreferences();
+    }
+
+    public CopyOnWriteArrayList<FriendNode> getFriendNodes(){
+        return this.friendNodes;
+    }
 }
\ No newline at end of file
diff --git a/app/src/main/java/ca/louisbourque/freenetassistant/MyListFragment.java b/app/src/main/java/ca/louisbourque/freenetassistant/MyNodeListFragment.java
similarity index 81%
rename from app/src/main/java/ca/louisbourque/freenetassistant/MyListFragment.java
rename to app/src/main/java/ca/louisbourque/freenetassistant/MyNodeListFragment.java
index d836de5..b8f5961 100644
--- a/app/src/main/java/ca/louisbourque/freenetassistant/MyListFragment.java
+++ b/app/src/main/java/ca/louisbourque/freenetassistant/MyNodeListFragment.java
@@ -2,11 +2,7 @@ package ca.louisbourque.freenetassistant;
 
 import android.app.Activity;
 import android.content.Context;
-import android.content.Intent;
-import android.database.Cursor;
-import android.media.Image;
 import android.os.Bundle;
-import android.support.v4.content.Loader;
 import android.view.LayoutInflater;
 import android.view.View;
 import android.view.ViewGroup;
@@ -15,10 +11,9 @@ import android.widget.ImageView;
 import android.widget.ListView;
 import android.support.v4.app.ListFragment;
 import android.widget.TextView;
-
 import java.util.concurrent.CopyOnWriteArrayList;
 
-public class MyListFragment extends ListFragment {
+public class MyNodeListFragment extends ListFragment {
 
 
 
@@ -30,7 +25,7 @@ public class MyListFragment extends ListFragment {
     private GlobalState gs;
     // This is the Adapter being used to display the list's data
     private NodeManagerArrayAdapter mAdapter;
-    private ListView list;
+    private int lastChecked = -1;
 
     @Override
     public void onActivityCreated(Bundle savedInstanceState) {
@@ -39,13 +34,13 @@ public class MyListFragment extends ListFragment {
         values = this.gs.getLocalNodeList();
         mAdapter = new NodeManagerArrayAdapter(getActivity(),values);
 
-        this.list = getListView();
+        ListView list = getListView();
 
 
         setListAdapter(mAdapter);
-        this.list.setChoiceMode(ListView.CHOICE_MODE_SINGLE);
-        this.list.setDivider(getResources().getDrawable(R.drawable.divider));
-        this.list.setSelector(getResources().getDrawable(R.drawable.list_selection_background));
+        list.setChoiceMode(ListView.CHOICE_MODE_SINGLE);
+        list.setDivider(getResources().getDrawable(R.drawable.divider));
+        list.setSelector(getResources().getDrawable(R.drawable.list_selection_background));
     }
 
     @Override
@@ -58,7 +53,13 @@ public class MyListFragment extends ListFragment {
 
     @Override
     public void onListItemClick(ListView l, View v, int position, long id) {
-        l.setItemChecked(position,true);
+        if(lastChecked == position){
+            l.setItemChecked(position, false);
+            lastChecked = -1;
+        }else {
+            l.setItemChecked(position, true);
+            lastChecked = position;
+        }
         if(listener != null) {
             listener.redrawNodeManagementActionBar();
         }
@@ -82,7 +83,10 @@ public class MyListFragment extends ListFragment {
         public View getView(int position, View convertView, ViewGroup parent) {
             LayoutInflater inflater = (LayoutInflater) context
                     .getSystemService(Context.LAYOUT_INFLATER_SERVICE);
-            View rowView = inflater.inflate(R.layout.peer, parent, false);
+            View rowView = convertView;
+            if (rowView == null) {
+                rowView = inflater.inflate(R.layout.peer, parent, false);
+            }
             TextView peerName = (TextView) rowView.findViewById(R.id.peer_name);
             TextView peerAddress = (TextView) rowView.findViewById(R.id.peer_address);
             peerName.setText(values.get(position).getName());
diff --git a/app/src/main/java/ca/louisbourque/freenetassistant/NodeManagerActivity.java b/app/src/main/java/ca/louisbourque/freenetassistant/NodeManagerActivity.java
index 77af252..f1a531e 100644
--- a/app/src/main/java/ca/louisbourque/freenetassistant/NodeManagerActivity.java
+++ b/app/src/main/java/ca/louisbourque/freenetassistant/NodeManagerActivity.java
@@ -1,37 +1,25 @@
 package ca.louisbourque.freenetassistant;
 
-import java.util.concurrent.CopyOnWriteArrayList;
-
-
 import android.app.AlertDialog;
 import android.app.AlertDialog.Builder;
 import android.app.DialogFragment;
-import android.app.ListActivity;
-import android.content.Context;
 import android.content.DialogInterface;
 import android.content.Intent;
 import android.os.Bundle;
-import android.support.v4.app.Fragment;
-import android.support.v4.app.ListFragment;
 import android.support.v7.app.ActionBarActivity;
 import android.support.v7.widget.Toolbar;
-import android.view.LayoutInflater;
 import android.view.View;
-import android.view.ViewGroup;
 import android.widget.AdapterView;
-import android.widget.ArrayAdapter;
 import android.widget.ImageButton;
 import android.widget.LinearLayout;
 import android.widget.ListView;
-import android.widget.TextView;
-import android.widget.Toast;
 
-public class NodeManagerActivity extends ActionBarActivity implements NodeManagerDialog.NodeManagerDialogListener,MyListFragment.OnItemSelectedListener {
+public class NodeManagerActivity extends ActionBarActivity implements NodeManagerDialog.NodeManagerDialogListener,MyNodeListFragment.OnItemSelectedListener {
 
 	private GlobalState gs;
 	private LinearLayout actionBar;
 	private ListView list;
-    MyListFragment mListFragment;
+    MyNodeListFragment mListFragment;
 	private Builder discardDialog;
 
 	@Override
@@ -47,7 +35,7 @@ public class NodeManagerActivity extends ActionBarActivity implements NodeManage
         // setHasOptionsMenu(true);
         setSupportActionBar(toolbar);
 
-        mListFragment = (MyListFragment) getSupportFragmentManager().findFragmentById(R.id.listFragment);
+        mListFragment = (MyNodeListFragment) getSupportFragmentManager().findFragmentById(R.id.listFragment);
 		
 		this.actionBar = (LinearLayout)findViewById(R.id.node_management_action_bar);
 		ImageButton addButton = (ImageButton)this.actionBar.findViewById(R.id.node_add);
@@ -96,7 +84,7 @@ public class NodeManagerActivity extends ActionBarActivity implements NodeManage
                 }
                 Intent intent = new Intent(gs, OpenReferenceActivity.class);
                 intent.putExtra(Constants.LOCAL_NODE_SELECTED,selected);
-                startActivityForResult(intent,Constants.Activity_Reference);
+                startActivityForResult(intent, Constants.Activity_Reference);
             }
         });
 		
@@ -185,7 +173,7 @@ public class NodeManagerActivity extends ActionBarActivity implements NodeManage
 			actionBar.findViewById(R.id.node_share).setVisibility(View.INVISIBLE);
 		}else{
             String nodeRef = this.gs.getLocalNodeList().get(selected).getNodeReference();
-            if(nodeRef == null || nodeRef == ""){
+            if(nodeRef == null || nodeRef.equals("")){
                 actionBar.findViewById(R.id.node_share).setVisibility(View.INVISIBLE);
             }else{
                 actionBar.findViewById(R.id.node_share).setVisibility(View.VISIBLE);
diff --git a/app/src/main/java/ca/louisbourque/freenetassistant/OpenReferenceActivity.java b/app/src/main/java/ca/louisbourque/freenetassistant/OpenReferenceActivity.java
index d09f3ce..dc9ac45 100644
--- a/app/src/main/java/ca/louisbourque/freenetassistant/OpenReferenceActivity.java
+++ b/app/src/main/java/ca/louisbourque/freenetassistant/OpenReferenceActivity.java
@@ -29,7 +29,6 @@ import android.nfc.NdefMessage;
 import android.nfc.NdefRecord;
 import android.nfc.NfcAdapter;
 import android.nfc.NfcEvent;
-import android.os.Build;
 import android.os.Bundle;
 import android.os.Message;
 import android.os.Parcelable;
@@ -37,6 +36,9 @@ import android.support.v7.app.ActionBarActivity;
 import android.support.v7.widget.Toolbar;
 import android.util.Base64;
 import android.view.View;
+import android.widget.AdapterView;
+import android.widget.ArrayAdapter;
+import android.widget.Spinner;
 import android.widget.TextView;
 import android.widget.Toast;
 
@@ -45,6 +47,8 @@ public class OpenReferenceActivity extends ActionBarActivity implements NfcAdapt
 	public GlobalState gs;
 	private AddPeer aPeer;
     private String nodeRef;
+    private Spinner lnTrust;
+    private Spinner lnVisibility;
 	
     private String encodedNodeRef;
     NfcAdapter mNfcAdapter;
@@ -80,13 +84,27 @@ public class OpenReferenceActivity extends ActionBarActivity implements NfcAdapt
         String type = intent.getType();
 
         if (NfcAdapter.ACTION_NDEF_DISCOVERED.equals(action)) {
+            //opening friend node from NFC
             this.nodeRef = processNFCIntent(intent);
-            findViewById(R.id.addNodeRef).setVisibility(View.VISIBLE);
+            if(this.gs.isConnected()) {
+                findViewById(R.id.addNodeRef).setVisibility(View.VISIBLE);
+            }else {
+                findViewById(R.id.saveNodeRef).setVisibility(View.VISIBLE);
+            }
+            setupSpinners();
 
         }else if (Intent.ACTION_VIEW.equals(action) && type != null) {
+            //opening friend node from intent
             this.nodeRef = handleSendText(intent); // Handle text being sent
-            findViewById(R.id.addNodeRef).setVisibility(View.VISIBLE);
+            if(this.gs.isConnected()) {
+                findViewById(R.id.addNodeRef).setVisibility(View.VISIBLE);
+            }else {
+                findViewById(R.id.saveNodeRef).setVisibility(View.VISIBLE);
+            }
+            setupSpinners();
         } else {
+            //opening own node
+            findViewById(R.id.trust_visibility_row).setVisibility(View.GONE);
             int selected = intent.getIntExtra(Constants.LOCAL_NODE_SELECTED,-1);
             if(selected >= 0){
                 this.nodeRef = this.gs.getLocalNodeList().get(selected).getNodeReference();
@@ -104,6 +122,43 @@ public class OpenReferenceActivity extends ActionBarActivity implements NfcAdapt
         }
     }
 
+    private void setupSpinners() {
+        this.lnTrust =(Spinner) findViewById(R.id.trust_spinner);
+        this.lnVisibility =(Spinner) findViewById(R.id.visibility_spinner);
+        ArrayAdapter<String> adapterT = new ArrayAdapter<String>(this, android.R.layout.simple_spinner_dropdown_item, Constants.TrustValues);
+        this.lnTrust.setAdapter(adapterT);
+        ArrayAdapter<String> adapterV = new ArrayAdapter<String>(this, android.R.layout.simple_spinner_dropdown_item, Constants.VisibilityValues);
+        this.lnVisibility.setAdapter(adapterV);
+        this.lnTrust.setSelection(Constants.TrustValues.indexOf(this.aPeer.getField("Trust")));
+        this.lnVisibility.setSelection(Constants.VisibilityValues.indexOf(this.aPeer.getField("Visibility")));
+
+        this.lnTrust.setOnItemSelectedListener(new AdapterView.OnItemSelectedListener() {
+            @Override
+            public void onItemSelected(AdapterView<?> parentView, View selectedItemView, int position, long id) {
+                aPeer.setField("Trust", lnTrust.getSelectedItem().toString());
+            }
+
+            @Override
+            public void onNothingSelected(AdapterView<?> parentView) {
+                // do nothing
+            }
+
+        });
+
+        this.lnVisibility.setOnItemSelectedListener(new AdapterView.OnItemSelectedListener() {
+            @Override
+            public void onItemSelected(AdapterView<?> parentView, View selectedItemView, int position, long id) {
+                aPeer.setField("Visibility", lnVisibility.getSelectedItem().toString());
+            }
+
+            @Override
+            public void onNothingSelected(AdapterView<?> parentView) {
+                // do nothing
+            }
+
+        });
+    }
+
     @Override
     public void onNewIntent(Intent intent) {
         // onResume gets called after this to handle the intent
@@ -160,7 +215,6 @@ public class OpenReferenceActivity extends ActionBarActivity implements NfcAdapt
             in.close();
 
 		} catch (IOException e) {
-			// TODO Auto-generated catch block
 			e.printStackTrace();
 		}
         return processStringIntoNode(sb.toString());
@@ -182,117 +236,117 @@ public class OpenReferenceActivity extends ActionBarActivity implements NfcAdapt
         String str2;
         String[] array = in.split("\\r?\\n");
 
-        for(int i = 0;i<array.length;i++){
-            if(array[i].startsWith("identity=")){
-                if(array[i].charAt(9) == '=')
-                    str2 = new String(Base64.decode(array[i].substring(10), Base64.DEFAULT));
+        for (String anArray : array) {
+            if (anArray.startsWith("identity=")) {
+                if (anArray.charAt(9) == '=')
+                    str2 = new String(Base64.decode(anArray.substring(10), Base64.DEFAULT));
                 else
-                    str2 = array[i].substring(9);
+                    str2 = anArray.substring(9);
                 aNode.setIdentity(str2);
-            }else if(array[i].startsWith("opennet=")){
-                if(array[i].charAt(8) == '=')
-                    str2 = new String(Base64.decode(array[i].substring(9), Base64.DEFAULT));
+            } else if (anArray.startsWith("opennet=")) {
+                if (anArray.charAt(8) == '=')
+                    str2 = new String(Base64.decode(anArray.substring(9), Base64.DEFAULT));
                 else
-                    str2 = array[i].substring(8);
+                    str2 = anArray.substring(8);
                 aNode.setOpennet(Boolean.valueOf(str2));
-            }else if(array[i].startsWith("myName=")){
-                if(array[i].charAt(7) == '=')
-                    str2 = new String(Base64.decode(array[i].substring(8), Base64.DEFAULT));
+            } else if (anArray.startsWith("myName=")) {
+                if (anArray.charAt(7) == '=')
+                    str2 = new String(Base64.decode(anArray.substring(8), Base64.DEFAULT));
                 else
-                    str2 = array[i].substring(7);
+                    str2 = anArray.substring(7);
                 aNode.setName(str2);
-            }else if(array[i].startsWith("location=")){
-                if(array[i].charAt(9) == '=')
-                    str2 = new String(Base64.decode(array[i].substring(10), Base64.DEFAULT));
+            } else if (anArray.startsWith("location=")) {
+                if (anArray.charAt(9) == '=')
+                    str2 = new String(Base64.decode(anArray.substring(10), Base64.DEFAULT));
                 else
-                    str2 = array[i].substring(9);
+                    str2 = anArray.substring(9);
                 aNode.setLocation(Double.valueOf(str2));
-            }else if(array[i].startsWith("physical.udp=")){
-                if(array[i].charAt(13) == '=')
-                    str2 = new String(Base64.decode(array[i].substring(14), Base64.DEFAULT));
+            } else if (anArray.startsWith("physical.udp=")) {
+                if (anArray.charAt(13) == '=')
+                    str2 = new String(Base64.decode(anArray.substring(14), Base64.DEFAULT));
                 else
-                    str2 = array[i].substring(13);
+                    str2 = anArray.substring(13);
                 aNode.setPhysicalUDP(str2);
-            }else if(array[i].startsWith("ark.pubURI=")){
+            } else if (anArray.startsWith("ark.pubURI=")) {
 
-                arkPubURI = array[i].substring(11);
-            }else if(array[i].startsWith("ark.privURI=")){
-                if(array[i].charAt(12) == '=')
-                    str2 = new String(Base64.decode(array[i].substring(13), Base64.DEFAULT));
+                arkPubURI = anArray.substring(11);
+            } else if (anArray.startsWith("ark.privURI=")) {
+                if (anArray.charAt(12) == '=')
+                    str2 = new String(Base64.decode(anArray.substring(13), Base64.DEFAULT));
                 else
-                    str2 = array[i].substring(12);
+                    str2 = anArray.substring(12);
                 arkPrivURI = str2;
-            }else if(array[i].startsWith("ark.number=")){
-                if(array[i].charAt(11) == '=')
-                    str2 = new String(Base64.decode(array[i].substring(12), Base64.DEFAULT));
+            } else if (anArray.startsWith("ark.number=")) {
+                if (anArray.charAt(11) == '=')
+                    str2 = new String(Base64.decode(anArray.substring(12), Base64.DEFAULT));
                 else
-                    str2 = array[i].substring(11);
+                    str2 = anArray.substring(11);
                 arkNumber = str2;
-            }else if(array[i].startsWith("dsaPubKey.y=")){
-                if(array[i].charAt(12) == '=')
-                    str2 = new String(Base64.decode(array[i].substring(13), Base64.DEFAULT));
+            } else if (anArray.startsWith("dsaPubKey.y=")) {
+                if (anArray.charAt(12) == '=')
+                    str2 = new String(Base64.decode(anArray.substring(13), Base64.DEFAULT));
                 else
-                    str2 = array[i].substring(12);
+                    str2 = anArray.substring(12);
                 aNode.setDSAPublicKey(str2);
-            }else if(array[i].startsWith("dsaGroup.g=")){
-                if(array[i].charAt(11) == '=')
-                    str2 = new String(Base64.decode(array[i].substring(12), Base64.DEFAULT));
+            } else if (anArray.startsWith("dsaGroup.g=")) {
+                if (anArray.charAt(11) == '=')
+                    str2 = new String(Base64.decode(anArray.substring(12), Base64.DEFAULT));
                 else
-                    str2 = array[i].substring(11);
+                    str2 = anArray.substring(11);
                 dsaGroupG = str2;
-            }else if(array[i].startsWith("dsaGroup.p=")){
-                if(array[i].charAt(11) == '=')
-                    str2 = new String(Base64.decode(array[i].substring(12), Base64.DEFAULT));
+            } else if (anArray.startsWith("dsaGroup.p=")) {
+                if (anArray.charAt(11) == '=')
+                    str2 = new String(Base64.decode(anArray.substring(12), Base64.DEFAULT));
                 else
-                    str2 = array[i].substring(11);
+                    str2 = anArray.substring(11);
                 dsaGroupP = str2;
-            }else if(array[i].startsWith("dsaGroup.q=")){
-                if(array[i].charAt(11) == '=')
-                    str2 = new String(Base64.decode(array[i].substring(12), Base64.DEFAULT));
+            } else if (anArray.startsWith("dsaGroup.q=")) {
+                if (anArray.charAt(11) == '=')
+                    str2 = new String(Base64.decode(anArray.substring(12), Base64.DEFAULT));
                 else
-                    str2 = array[i].substring(11);
+                    str2 = anArray.substring(11);
                 dsaGroupQ = str2;
-            }else if(array[i].startsWith("auth.negTypes=")){
-                if(array[i].charAt(14) == '=')
-                    str2 = new String(Base64.decode(array[i].substring(15), Base64.DEFAULT));
+            } else if (anArray.startsWith("auth.negTypes=")) {
+                if (anArray.charAt(14) == '=')
+                    str2 = new String(Base64.decode(anArray.substring(15), Base64.DEFAULT));
                 else
-                    str2 = array[i].substring(14);
+                    str2 = anArray.substring(14);
                 aNode.setNegotiationTypes(FcpUtils.decodeMultiIntegerField(str2));
-            }else if(array[i].startsWith("version=")){
-                if(array[i].charAt(8) == '=')
-                    str2 = new String(Base64.decode(array[i].substring(9), Base64.DEFAULT));
+            } else if (anArray.startsWith("version=")) {
+                if (anArray.charAt(8) == '=')
+                    str2 = new String(Base64.decode(anArray.substring(9), Base64.DEFAULT));
                 else
-                    str2 = array[i].substring(8);
+                    str2 = anArray.substring(8);
                 aNode.setVersion(new Version(str2));
-            }else if(array[i].startsWith("lastGoodVersion=")){
-                if(array[i].charAt(16) == '=')
-                    str2 = new String(Base64.decode(array[i].substring(17), Base64.DEFAULT));
+            } else if (anArray.startsWith("lastGoodVersion=")) {
+                if (anArray.charAt(16) == '=')
+                    str2 = new String(Base64.decode(anArray.substring(17), Base64.DEFAULT));
                 else
-                    str2 = array[i].substring(16);
+                    str2 = anArray.substring(16);
                 aNode.setLastGoodVersion(new Version(str2));
-            }else if(array[i].startsWith("testnet=")){
-                if(array[i].charAt(8) == '=')
-                    str2 = new String(Base64.decode(array[i].substring(9), Base64.DEFAULT));
+            } else if (anArray.startsWith("testnet=")) {
+                if (anArray.charAt(8) == '=')
+                    str2 = new String(Base64.decode(anArray.substring(9), Base64.DEFAULT));
                 else
-                    str2 = array[i].substring(8);
+                    str2 = anArray.substring(8);
                 aNode.setTestnet(Boolean.valueOf(str2));
-            }else if(array[i].startsWith("sig=")){
-                if(array[i].charAt(4) == '=')
-                    str2 = new String(Base64.decode(array[i].substring(5), Base64.DEFAULT));
+            } else if (anArray.startsWith("sig=")) {
+                if (anArray.charAt(4) == '=')
+                    str2 = new String(Base64.decode(anArray.substring(5), Base64.DEFAULT));
                 else
-                    str2 = array[i].substring(4);
+                    str2 = anArray.substring(4);
                 aNode.setSignature(str2);
-            }else if(array[i].startsWith("ecdsa.P256.pub=")){
-                if(array[i].charAt(15) == '=')
-                    str2 = new String(Base64.decode(array[i].substring(16), Base64.DEFAULT));
+            } else if (anArray.startsWith("ecdsa.P256.pub=")) {
+                if (anArray.charAt(15) == '=')
+                    str2 = new String(Base64.decode(anArray.substring(16), Base64.DEFAULT));
                 else
-                    str2 = array[i].substring(15);
+                    str2 = anArray.substring(15);
                 ecdsaP256pub = str2;
-            }else if(array[i].startsWith("sigP256=")){
-                if(array[i].charAt(8) == '=')
-                    str2 = new String(Base64.decode(array[i].substring(9), Base64.DEFAULT));
+            } else if (anArray.startsWith("sigP256=")) {
+                if (anArray.charAt(8) == '=')
+                    str2 = new String(Base64.decode(anArray.substring(9), Base64.DEFAULT));
                 else
-                    str2 = array[i].substring(8);
+                    str2 = anArray.substring(8);
                 sigP256 = str2;
             }
 
@@ -306,9 +360,8 @@ public class OpenReferenceActivity extends ActionBarActivity implements NfcAdapt
         if(sigP256 != null){
             aPeer.setField("sigP256", sigP256);
         }
-        //TODO: Make these user-selected
-        aPeer.setField("Trust", "NORMAL");
-        aPeer.setField("Visibility", "NO");
+        aPeer.setField("Trust", Constants.DEFAULT_TRUST);
+        aPeer.setField("Visibility", Constants.DEFAULT_VISIBILITY);
 
         return in;
     }
@@ -316,20 +369,30 @@ public class OpenReferenceActivity extends ActionBarActivity implements NfcAdapt
 	public void cancelReference(View view) {
 		finish();
 	}
-	
+
+    public void saveReference(View view) {
+        saveNodeRef();
+        Toast.makeText(this, R.string.savingNodeRef, Toast.LENGTH_SHORT).show();
+        finish();
+    }
+
 	public void addReference(View view) {
 		try {
+            saveNodeRef();
 			this.gs.getQueue().put(Message.obtain(null, 0, Constants.MsgAddNoderef,0,(Object)this.aPeer));
 		} catch (InterruptedException e) {
-			// TODO Auto-generated catch block
 			e.printStackTrace();
 		}
 		setResult(Activity.RESULT_OK);
 		Toast.makeText(this, R.string.addingNodeRef, Toast.LENGTH_SHORT).show();
 		finish();
-		
 	}
 
+    public void saveNodeRef(){
+        FriendNode ref = new FriendNode(this.aPeer.getField("myName"),this.aPeer.getField("identity"),this.aPeer.getField("Trust"),this.aPeer.getField("Visibility"));
+        this.gs.addFriendNode(ref);
+    }
+
     public void shareReference(View view) {
         startActivity(shareReference());
     }
@@ -348,15 +411,17 @@ public class OpenReferenceActivity extends ActionBarActivity implements NfcAdapt
 
 
     private File copyFileToInternal() {
+        InputStream is;
+        OutputStream os;
         try {
-            InputStream is = new ByteArrayInputStream(encodedNodeRef.getBytes());
+            is = new ByteArrayInputStream(encodedNodeRef.getBytes());
             File refDir = new File(getExternalFilesDir(null), "fref");
 
             clearFolder(refDir);
             //Save to a random location, to prevent guess location of ref
             File outFile = new File(refDir, "myref.fref");
             if(refDir.mkdirs() && outFile.createNewFile()){
-                OutputStream os = new FileOutputStream(outFile.getAbsolutePath());
+                os = new FileOutputStream(outFile.getAbsolutePath());
 
                 byte[] buff = new byte[1024];
                 int len;
@@ -370,7 +435,7 @@ public class OpenReferenceActivity extends ActionBarActivity implements NfcAdapt
             outFile.setReadable(true, false);
             return outFile;
         } catch (IOException e) {
-            e.printStackTrace(); // TODO: should close streams properly here
+            e.printStackTrace();
         }
         return null;
     }
diff --git a/app/src/main/java/ca/louisbourque/freenetassistant/SettingsFragment.java b/app/src/main/java/ca/louisbourque/freenetassistant/SettingsFragment.java
index 7ee3658..2289d8b 100644
--- a/app/src/main/java/ca/louisbourque/freenetassistant/SettingsFragment.java
+++ b/app/src/main/java/ca/louisbourque/freenetassistant/SettingsFragment.java
@@ -17,6 +17,8 @@ public class SettingsFragment extends PreferenceFragment implements OnSharedPref
 	private CheckBoxPreference mWifiOnlyPref;
 	private String PREF_KEY_REFRESH_RATE = "pref_key_refresh_rate";
 	private String PREF_KEY_WIFI_ONLY = "pref_key_wifi_only";
+    private String PREF_KEY_NODES = "pref_key_nodes";
+    private String PREF_KEY_FRIEND_NODES = "pref_key_friend_nodes";
 	
     @Override
     public void onCreate(Bundle savedInstanceState) {
@@ -26,7 +28,7 @@ public class SettingsFragment extends PreferenceFragment implements OnSharedPref
         mListPreference = (ListPreference)getPreferenceScreen().findPreference(PREF_KEY_REFRESH_RATE);
         mWifiOnlyPref = (CheckBoxPreference) getPreferenceScreen().findPreference(PREF_KEY_WIFI_ONLY);
         this.gs = (GlobalState) getActivity().getApplication();
-        Preference button = (Preference)findPreference("pref_key_nodes");
+        Preference button = (Preference)findPreference(PREF_KEY_NODES);
         button.setOnPreferenceClickListener(new Preference.OnPreferenceClickListener() {
                         @Override
                         public boolean onPreferenceClick(Preference arg0) { 
@@ -35,6 +37,15 @@ public class SettingsFragment extends PreferenceFragment implements OnSharedPref
                             return true;
                         }
                     });
+        Preference friendButton = (Preference)findPreference(PREF_KEY_FRIEND_NODES);
+        friendButton.setOnPreferenceClickListener(new Preference.OnPreferenceClickListener() {
+            @Override
+            public boolean onPreferenceClick(Preference arg0) {
+                Intent intent = new Intent(getActivity(), FriendNodeManagerActivity.class);
+                startActivity(intent);
+                return true;
+            }
+        });
     }
     
     @Override
