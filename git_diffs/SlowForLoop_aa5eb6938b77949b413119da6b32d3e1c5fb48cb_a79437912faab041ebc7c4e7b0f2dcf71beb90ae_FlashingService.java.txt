diff --git a/app/src/main/java/cc/calliope/mini/App.java b/app/src/main/java/cc/calliope/mini/App.java
deleted file mode 100644
index da8327e..0000000
--- a/app/src/main/java/cc/calliope/mini/App.java
+++ /dev/null
@@ -1,32 +0,0 @@
-package cc.calliope.mini;
-
-import android.app.Application;
-import android.util.Log;
-
-import java.lang.annotation.Retention;
-import java.lang.annotation.RetentionPolicy;
-
-import androidx.annotation.IntDef;
-import cc.calliope.mini.utils.Utils;
-
-public class App extends Application {
-    public static final int APP_STATE_STANDBY = 0;
-    public static final int APP_STATE_CONNECTING = 1;
-    public static final int APP_STATE_FLASHING = 2;
-    public static final int APP_STATE_DISCONNECTING = 3;
-
-    @IntDef({APP_STATE_STANDBY, APP_STATE_CONNECTING, APP_STATE_FLASHING, APP_STATE_DISCONNECTING})
-    @Retention(RetentionPolicy.SOURCE)
-    public @interface AppState {
-    }
-    private int appState;
-
-    public int getAppState() {
-        return appState;
-    }
-
-    public void setAppState(@AppState int appState) {
-        Utils.log(Log.ASSERT, "APP", "State: " + appState);
-        this.appState = appState;
-    }
-}
diff --git a/app/src/main/java/cc/calliope/mini/MyDeviceKt.kt b/app/src/main/java/cc/calliope/mini/DeviceKt.kt
similarity index 96%
rename from app/src/main/java/cc/calliope/mini/MyDeviceKt.kt
rename to app/src/main/java/cc/calliope/mini/DeviceKt.kt
index 5325d80..a1e8933 100644
--- a/app/src/main/java/cc/calliope/mini/MyDeviceKt.kt
+++ b/app/src/main/java/cc/calliope/mini/DeviceKt.kt
@@ -6,7 +6,7 @@ import no.nordicsemi.android.kotlin.ble.core.ServerDevice
 import no.nordicsemi.android.kotlin.ble.core.scanner.BleScanResultData
 import no.nordicsemi.android.kotlin.ble.core.scanner.BleScanResults
 
-class MyDeviceKt(bleScanResults: BleScanResults) {
+class DeviceKt(bleScanResults: BleScanResults) {
     companion object {
         private val RELEVANT_LIMIT: Int = if (Version.VERSION_O_AND_NEWER) 5 else 10 // Секунди
     }
diff --git a/app/src/main/java/cc/calliope/mini/ExtendedBluetoothDevice.java b/app/src/main/java/cc/calliope/mini/ExtendedBluetoothDevice.java
deleted file mode 100644
index 11d3f17..0000000
--- a/app/src/main/java/cc/calliope/mini/ExtendedBluetoothDevice.java
+++ /dev/null
@@ -1,179 +0,0 @@
-/*
- * Copyright (c) 2010 - 2017, Nordic Semiconductor ASA
- * All rights reserved.
- *
- * Redistribution and use in source and binary forms, with or without modification,
- * are permitted provided that the following conditions are met:
- *
- * 1. Redistributions of source code must retain the above copyright notice, this
- *    list of conditions and the following disclaimer.
- *
- * 2. Redistributions in binary form, except as embedded into a Nordic
- *    Semiconductor ASA integrated circuit in a product or a software update for
- *    such product, must reproduce the above copyright notice, this list of
- *    conditions and the following disclaimer in the documentation and/or other
- *    materials provided with the distribution.
- *
- * 3. Neither the name of Nordic Semiconductor ASA nor the names of its
- *    contributors may be used to endorse or promote products derived from this
- *    software without specific prior written permission.
- *
- * 4. This software, with or without modification, must only be used with a
- *    Nordic Semiconductor ASA integrated circuit.
- *
- * 5. Any software provided in binary form under this license must not be reverse
- *    engineered, decompiled, modified and/or disassembled.
- *
- * THIS SOFTWARE IS PROVIDED BY NORDIC SEMICONDUCTOR ASA "AS IS" AND ANY EXPRESS
- * OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
- * OF MERCHANTABILITY, NONINFRINGEMENT, AND FITNESS FOR A PARTICULAR PURPOSE ARE
- * DISCLAIMED. IN NO EVENT SHALL NORDIC SEMICONDUCTOR ASA OR CONTRIBUTORS BE
- * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
- * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE
- * GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
- * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
- * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
- * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
- */
-package cc.calliope.mini;
-
-import android.bluetooth.BluetoothDevice;
-import android.os.Parcel;
-import android.os.Parcelable;
-
-import java.util.Date;
-import java.util.Objects;
-
-import androidx.annotation.NonNull;
-import cc.calliope.mini.utils.Version;
-import no.nordicsemi.android.support.v18.scanner.ScanResult;
-
-public class ExtendedBluetoothDevice implements Parcelable {
-
-    private static final long RELEVANT_LIMIT; //the time during which the device is relevant in ms
-
-    static {
-        if (Version.VERSION_O_AND_NEWER) {
-            RELEVANT_LIMIT = 5000;
-        } else {
-            RELEVANT_LIMIT = 10000;
-        }
-    }
-
-    private final BluetoothDevice device;
-    private String name;
-    private String pattern;
-    private int rssi;
-    private long recentUpdate;
-
-    public ExtendedBluetoothDevice(final ScanResult scanResult) {
-        this.device = scanResult.getDevice();
-        this.name = scanResult.getScanRecord().getDeviceName();
-        this.pattern = "00000";
-        this.rssi = scanResult.getRssi();
-        this.recentUpdate = new Date().getTime();
-    }
-
-    public BluetoothDevice getDevice() {
-        return device;
-    }
-
-    public String getAddress() {
-        return device.getAddress();
-    }
-
-    public String getName() {
-        return name;
-    }
-
-    public String getPattern() {
-        return pattern;
-    }
-
-    public void setName(final String name) {
-        this.name = name;
-    }
-
-    public void setPattern(final String pattern) {
-        this.pattern = pattern;
-    }
-
-    public int getRssi() {
-        return rssi;
-    }
-
-    public void setRssi(final int rssi) {
-        this.rssi = rssi;
-    }
-
-    public float getRecentUpdate() {
-        return recentUpdate;
-    }
-
-    public void setRecentUpdate(long recentUpdate) {
-        this.recentUpdate = recentUpdate;
-    }
-
-    public boolean isRelevant() {
-        long currentTime = new Date().getTime();
-        return currentTime - recentUpdate < RELEVANT_LIMIT;
-    }
-
-    public boolean matches(final ScanResult scanResult) {
-        return device.getAddress().equals(scanResult.getDevice().getAddress());
-    }
-
-    @Override
-    public boolean equals(final Object o) {
-        if (o instanceof ExtendedBluetoothDevice) {
-            final ExtendedBluetoothDevice that = (ExtendedBluetoothDevice) o;
-            return device.getAddress().equals(that.device.getAddress());
-        }
-        return super.equals(o);
-    }
-
-    @Override
-    public int hashCode() {
-        return Objects.hash(device.getAddress());
-    }
-
-    @NonNull
-    @Override
-    public String toString() {
-        return device.getAddress() + " " + pattern;
-    }
-
-    // Parcelable implementation
-
-    private ExtendedBluetoothDevice(final Parcel in) {
-        device = in.readParcelable(BluetoothDevice.class.getClassLoader());
-        name = in.readString();
-        pattern = in.readString();
-        rssi = in.readInt();
-    }
-
-    @Override
-    public void writeToParcel(final Parcel parcel, final int flags) {
-        parcel.writeParcelable(device, flags);
-        parcel.writeString(name);
-        parcel.writeString(pattern);
-        parcel.writeInt(rssi);
-    }
-
-    @Override
-    public int describeContents() {
-        return 0;
-    }
-
-    public static final Creator<ExtendedBluetoothDevice> CREATOR = new Creator<>() {
-        @Override
-        public ExtendedBluetoothDevice createFromParcel(final Parcel source) {
-            return new ExtendedBluetoothDevice(source);
-        }
-
-        @Override
-        public ExtendedBluetoothDevice[] newArray(final int size) {
-            return new ExtendedBluetoothDevice[size];
-        }
-    };
-}
diff --git a/app/src/main/java/cc/calliope/mini/FileWrapper.java b/app/src/main/java/cc/calliope/mini/FileWrapper.java
index c91b91b..4288e9f 100644
--- a/app/src/main/java/cc/calliope/mini/FileWrapper.java
+++ b/app/src/main/java/cc/calliope/mini/FileWrapper.java
@@ -4,44 +4,29 @@ import java.io.File;
 
 import cc.calliope.mini.fragment.editors.Editor;
 
-public class FileWrapper {
-    private final File file;
-    private final Editor editor;
+public record FileWrapper(File file, Editor editor) {
 
-    public FileWrapper(File file, Editor editor) {
-        this.file = file;
-        this.editor = editor;
-    }
-
-    public File getFile() {
-        return file;
-    }
-
-    public Editor getEditor() {
-        return editor;
-    }
-
-    public String getName(){
+    public String getName() {
         return file.getName();
     }
 
-    public long lastModified(){
+    public long lastModified() {
         return file.lastModified();
     }
 
-    public String getAbsolutePath(){
+    public String getAbsolutePath() {
         return file.getAbsolutePath();
     }
 
-    public boolean exists(){
+    public boolean exists() {
         return file.exists();
     }
 
-    public boolean delete(){
+    public boolean delete() {
         return file.delete();
     }
 
-    public boolean renameTo(File dest){
+    public boolean renameTo(File dest) {
         return file.renameTo(dest);
     }
 }
diff --git a/app/src/main/java/cc/calliope/mini/FlashingBaseService.java b/app/src/main/java/cc/calliope/mini/FlashingBaseService.java
index 012a6c7..5c2a06e 100644
--- a/app/src/main/java/cc/calliope/mini/FlashingBaseService.java
+++ b/app/src/main/java/cc/calliope/mini/FlashingBaseService.java
@@ -7,14 +7,17 @@ import android.os.IBinder;
 
 import androidx.annotation.NonNull;
 import androidx.annotation.Nullable;
+import androidx.lifecycle.LifecycleService;
 
-public class FlashingBaseService extends Service implements ProgressListener{
+public class FlashingBaseService extends LifecycleService implements ProgressListener{
     private ProgressCollector progressCollector;
 
     @Override
     public void onCreate() {
         super.onCreate();
         progressCollector = new ProgressCollector(this);
+        getLifecycle().addObserver(progressCollector);
+
         progressCollector.registerReceivers();
     }
 
@@ -24,64 +27,28 @@ public class FlashingBaseService extends Service implements ProgressListener{
         progressCollector.unregisterReceivers();
     }
 
-    @Nullable
-    @Override
-    public IBinder onBind(Intent intent) {
-        return null;
-    }
-
-    @Override
-    public void onDeviceConnecting() {
-
-    }
-
-    @Override
-    public void onProcessStarting() {
-
-    }
-
-    @Override
-    public void onAttemptDfuMode() {
-
-    }
-
-    @Override
-    public void onEnablingDfuMode() {
-
-    }
-
-    @Override
-    public void onFirmwareValidating() {
-
-    }
-
-    @Override
-    public void onDeviceDisconnecting() {
-
-    }
-
     @Override
-    public void onCompleted() {
+    public void onDfuAttempt() {
 
     }
 
     @Override
-    public void onAborted() {
+    public void onConnectionFailed(){
 
     }
 
     @Override
-    public void onStartDfuService(int hardwareVersion) {
+    public void onHardwareVersionReceived(int hardwareVersion) {
 
     }
 
     @Override
-    public void onProgressChanged(int percent) {
+    public void onProgressUpdate(int percent) {
 
     }
 
     @Override
-    public void onBonding(@NonNull BluetoothDevice device, int bondState, int previousBondState) {
+    public void onBluetoothBondingStateChanged(@NonNull BluetoothDevice device, int bondState, int previousBondState) {
 
     }
 
diff --git a/app/src/main/java/cc/calliope/mini/FlashingService.java b/app/src/main/java/cc/calliope/mini/FlashingService.java
index e944e8f..9fef63e 100644
--- a/app/src/main/java/cc/calliope/mini/FlashingService.java
+++ b/app/src/main/java/cc/calliope/mini/FlashingService.java
@@ -1,16 +1,14 @@
 package cc.calliope.mini;
 
 import static cc.calliope.mini.service.DfuControlService.MINI_V1;
-import static cc.calliope.mini.service.DfuControlService.MINI_V2;
 import static cc.calliope.mini.service.DfuControlService.UNIDENTIFIED;
 
-import android.app.Service;
+import android.bluetooth.BluetoothAdapter;
+import android.bluetooth.BluetoothDevice;
 import android.content.Intent;
 import android.content.SharedPreferences;
-import android.os.IBinder;
 import android.util.Log;
 
-import androidx.annotation.Nullable;
 import androidx.preference.PreferenceManager;
 
 import java.io.ByteArrayOutputStream;
@@ -21,26 +19,29 @@ import java.io.FileOutputStream;
 import java.io.IOException;
 import java.nio.ByteBuffer;
 import java.nio.ByteOrder;
-import java.util.Arrays;
 import java.util.zip.ZipEntry;
 import java.util.zip.ZipOutputStream;
 
-import cc.calliope.mini.activity.FlashingActivity;
 import cc.calliope.mini.service.DfuControlService;
 import cc.calliope.mini.service.DfuService;
+import cc.calliope.mini.service.PartialFlashingService;
 import cc.calliope.mini.utils.FileUtils;
-import cc.calliope.mini.utils.StaticExtra;
+import cc.calliope.mini.utils.Settings;
+import cc.calliope.mini.utils.StaticExtras;
 import cc.calliope.mini.utils.Utils;
 import no.nordicsemi.android.dfu.DfuBaseService;
 import no.nordicsemi.android.dfu.DfuServiceInitiator;
 
+import cc.calliope.mini.utils.irmHexUtils;
+
 public class FlashingService extends FlashingBaseService {
-    private static final String TAG = "TEST_TAG";
+    private static final String TAG = "FlashingService";
     private static final int NUMBER_OF_RETRIES = 3;
     private static final int REBOOT_TIME = 2000; // time required by the device to reboot, ms
     private String currentAddress;
     private String currentPattern;
     private String currentPath;
+    private int progress = -10;
 
     private record HexToDfu(String path, int size) {
     }
@@ -57,43 +58,85 @@ public class FlashingService extends FlashingBaseService {
         Utils.log(Log.ASSERT, TAG, "onDestroy");
     }
 
-    @Nullable
     @Override
-    public IBinder onBind(Intent intent) {
-        Utils.log(Log.ASSERT, TAG, "onBind");
-        return null;
+    public int onStartCommand(Intent intent, int flags, int startId) {
+        super.onStartCommand(intent, flags, startId);
+        Utils.log(Log.ASSERT, TAG, "onStartCommand");
+
+        if (Utils.isBluetoothEnabled() && progress < 0) {
+            String path = intent.getStringExtra(StaticExtras.EXTRA_FILE_PATH);
+            if(path != null && !path.isEmpty()) {
+                currentPath = path;
+            }
+            Utils.log(Log.INFO, TAG, "File path: " + currentPath);
+
+            getDevice();
+            if (isValidBluetoothMAC(currentAddress)) {
+                if (Settings.isPartialFlashingEnable(this)) {
+                    startPartialFlashing();
+                } else {
+                    startDfuControlService();
+                }
+            } else {
+                Utils.log(Log.WARN, TAG, "Bluetooth MAC incorrect");
+            }
+        }
+        return START_STICKY;
     }
 
     @Override
-    public int onStartCommand(Intent intent, int flags, int startId) {
-        Utils.log(Log.ASSERT, TAG, "onStartCommand");
+    public void onHardwareVersionReceived(int hardwareVersion) {
+        Utils.log(Log.ASSERT, TAG, "Board version: " + hardwareVersion);
+        startFlashing(hardwareVersion);
+    }
 
-        currentPath = intent.getStringExtra(StaticExtra.EXTRA_FILE_PATH);
-        Utils.log(Log.INFO, TAG, "File path: " + currentPath);
+    @Override
+    public void onDfuAttempt() {
+        startDfuControlService();
+    }
 
-        getDevice();
-        if (isValidBluetoothMAC(currentAddress)) {
-            startDfuControlService();
-        } else {
-            Utils.log(Log.WARN, TAG, "File path: " + currentPath);
+    @Override
+    public void onError(int code, String message) {
+        Utils.log(Log.ASSERT, TAG, "ERROR: " + code + " " + message);
+        if (code == 4110) {
+            String msg = "Device not bound. Please bind the mini and try again.";
+            BluetoothAdapter bluetoothAdapter = BluetoothAdapter.getDefaultAdapter();
+            if (bluetoothAdapter == null || !bluetoothAdapter.isEnabled()) {
+                Utils.log(Log.ERROR, TAG, "Bluetooth not enabled");
+            } else {
+                BluetoothDevice device = bluetoothAdapter.getRemoteDevice(currentAddress);
+                device.createBond();
+            }
         }
+    }
 
-        return START_STICKY;
+    @Override
+    public void onProgressUpdate(int percent){
+        progress = percent;
     }
 
     private void getDevice() {
         SharedPreferences preferences = PreferenceManager.getDefaultSharedPreferences(this);
-        currentAddress = preferences.getString(StaticExtra.DEVICE_ADDRESS, "");
-        currentPattern = preferences.getString(StaticExtra.DEVICE_PATTERN, "ZUZUZ");
+        currentAddress = preferences.getString(StaticExtras.DEVICE_ADDRESS, "");
+        currentPattern = preferences.getString(StaticExtras.DEVICE_PATTERN, "ZUZUZ");
 
         Utils.log(Log.INFO, TAG, "Device: " + currentAddress + " " + currentPattern);
     }
 
+    private void startPartialFlashing() {
+        Utils.log(TAG, "Starting PartialFlashing Service...");
+
+        Intent service = new Intent(this, PartialFlashingService.class);
+        service.putExtra(PartialFlashingService.EXTRA_DEVICE_ADDRESS, currentAddress);
+        service.putExtra(StaticExtras.EXTRA_FILE_PATH, currentPath); // a path or URI must be provided.
+        startService(service);
+    }
+
     private void startDfuControlService() {
         Utils.log(TAG, "Starting DfuControl Service...");
 
         Intent service = new Intent(this, DfuControlService.class);
-        service.putExtra(StaticExtra.DEVICE_ADDRESS, currentAddress);
+        service.putExtra(StaticExtras.DEVICE_ADDRESS, currentAddress);
         startService(service);
     }
 
@@ -114,12 +157,6 @@ public class FlashingService extends FlashingBaseService {
         }
     }
 
-    @Override
-    public void onStartDfuService(int hardwareVersion) {
-        Utils.log(Log.ASSERT, "DeviceInformation", "Board version: " + hardwareVersion);
-        startFlashing(hardwareVersion);
-    }
-
 
     @SuppressWarnings("deprecation")
     private void startFlashing(@DfuControlService.HardwareVersion final int hardwareVersion) {
@@ -183,192 +220,27 @@ public class FlashingService extends FlashingBaseService {
         }
     }
 
-
-    private HexToDfu universalHexToDFU(String inputPath, @DfuControlService.HardwareVersion int hardwareVersion) {
-        FileInputStream fis;
-        ByteArrayOutputStream outputHex;
-        outputHex = new ByteArrayOutputStream();
-
-        ByteArrayOutputStream test = new ByteArrayOutputStream();
-
-        FileOutputStream outputStream;
-
-        int application_size = 0;
-        int next = 0;
-        boolean records_wanted = true;
-        boolean is_fat = false;
-        boolean is_v2 = false;
-        boolean uses_ESA = false;
-        ByteArrayOutputStream lastELA = new ByteArrayOutputStream();
-        ByteArrayOutputStream lastESA = new ByteArrayOutputStream();
-
+    private HexToDfu universalHexToDFU(String inputPath, int hardwareType) {
+        Utils.log(Log.VERBOSE, TAG, "universalHexToDFU");
         try {
-            fis = new FileInputStream(inputPath);
-            byte[] bs = new byte[Integer.valueOf(FileUtils.getFileSize(inputPath))];
+            FileInputStream fis = new FileInputStream(inputPath);
+            int fileSize = Integer.valueOf(FileUtils.getFileSize(inputPath));
+            byte[] bs = new byte[fileSize];
             int i = 0;
             i = fis.read(bs);
 
-            for (int b_x = 0; b_x < bs.length - 1; /* empty */) {
-
-                // Get record from following bytes
-                char b_type = (char) bs[b_x + 8];
-
-                // Find next record start, or EOF
-                next = 1;
-                while ((b_x + next) < i && bs[b_x + next] != ':') {
-                    next++;
-                }
-
-                // Switch type and determine what to do with this record
-                switch (b_type) {
-                    case 'A': // Block start
-                        is_fat = true;
-                        records_wanted = false;
-
-                        // Check data for id
-                        if (bs[b_x + 9] == '9' && bs[b_x + 10] == '9' && bs[b_x + 11] == '0' && bs[b_x + 12] == '0') {
-                            records_wanted = (hardwareVersion == MINI_V1);
-                        } else if (bs[b_x + 9] == '9' && bs[b_x + 10] == '9' && bs[b_x + 11] == '0' && bs[b_x + 12] == '1') {
-                            records_wanted = (hardwareVersion == MINI_V1);
-                        } else if (bs[b_x + 9] == '9' && bs[b_x + 10] == '9' && bs[b_x + 11] == '0' && bs[b_x + 12] == '3') {
-                            records_wanted = (hardwareVersion == MINI_V2);
-                        }
-                        break;
-                    case 'E':
-                        break;
-                    case '4':
-                        ByteArrayOutputStream currentELA = new ByteArrayOutputStream();
-                        currentELA.write(bs, b_x, next);
-
-                        uses_ESA = false;
-
-                        // If ELA has changed write
-                        if (!currentELA.toString().equals(lastELA.toString())) {
-                            lastELA.reset();
-                            lastELA.write(bs, b_x, next);
-                            Utils.log(Log.VERBOSE, TAG, "TEST ELA " + lastELA.toString());
-                            outputHex.write(bs, b_x, next);
-                        }
-
-                        break;
-                    case '2':
-                        uses_ESA = true;
-
-                        ByteArrayOutputStream currentESA = new ByteArrayOutputStream();
-                        currentESA.write(bs, b_x, next);
-
-                        // If ESA has changed write
-                        if (!Arrays.equals(currentESA.toByteArray(), lastESA.toByteArray())) {
-                            lastESA.reset();
-                            lastESA.write(bs, b_x, next);
-                            outputHex.write(bs, b_x, next);
-                        }
-                        break;
-                    case '1':
-                        // EOF
-                        // Ensure KV storage is erased
-                        if (hardwareVersion == MINI_V1) {
-                            String kv_address = ":020000040003F7\n";
-                            String kv_data = ":1000000000000000000000000000000000000000F0\n";
-                            outputHex.write(kv_address.getBytes());
-                            outputHex.write(kv_data.getBytes());
-                        }
-
-                        // Write final block
-                        outputHex.write(bs, b_x, next);
-                        break;
-                    case 'D': // V2 section of Universal Hex
-                        // Remove D
-                        bs[b_x + 8] = '0';
-                        // Find first \n. PXT adds in extra padding occasionally
-                        int first_cr = 0;
-                        while (bs[b_x + first_cr] != '\n') {
-                            first_cr++;
-                        }
-
-                        // Skip 1 word records
-                        // TODO: Pad this record for uPY FS scratch
-                        if (bs[b_x + 2] == '1') break;
-
-                        // Recalculate checksum
-                        int checksum = (charToInt((char) bs[b_x + first_cr - 2]) * 16) + charToInt((char) bs[b_x + first_cr - 1]) + 0xD;
-                        String checksum_hex = Integer.toHexString(checksum);
-                        checksum_hex = "00" + checksum_hex.toUpperCase(); // Pad to ensure we have 2 characters
-                        checksum_hex = checksum_hex.substring(checksum_hex.length() - 2);
-                        bs[b_x + first_cr - 2] = (byte) checksum_hex.charAt(0);
-                        bs[b_x + first_cr - 1] = (byte) checksum_hex.charAt(1);
-                    case '3':
-                    case '5':
-                    case '0':
-                        // Copy record to hex
-                        // Record starts at b_x, next long
-                        // Calculate address of record
-                        int b_a = 0;
-                        if (lastELA.size() > 0 && !uses_ESA) {
-                            b_a = (charToInt((char) lastELA.toByteArray()[9]) << 12) | (charToInt((char) lastELA.toByteArray()[10]) << 8) | (charToInt((char) lastELA.toByteArray()[11]) << 4) | (charToInt((char) lastELA.toByteArray()[12]));
-                            b_a = b_a << 16;
-                        }
-                        if (lastESA.size() > 0 && uses_ESA) {
-                            b_a = (charToInt((char) lastESA.toByteArray()[9]) << 12) | (charToInt((char) lastESA.toByteArray()[10]) << 8) | (charToInt((char) lastESA.toByteArray()[11]) << 4) | (charToInt((char) lastESA.toByteArray()[12]));
-                            b_a = b_a * 16;
-                        }
-
-                        int b_raddr = (charToInt((char) bs[b_x + 3]) << 12) | (charToInt((char) bs[b_x + 4]) << 8) | (charToInt((char) bs[b_x + 5]) << 4) | (charToInt((char) bs[b_x + 6]));
-                        int b_addr = b_a | b_raddr;
-
-                        int lower_bound = 0;
-                        int upper_bound = 0;
-                        //MICROBIT_V1 lower_bound = 0x18000; upper_bound = 0x38000;
-                        //Memory range nRF51 (S130 v2.0.x) 0x0001B000 - 0x0003AC00 (127 kB)
-                        //0x00014000 - 0x0003C800
-                        if (hardwareVersion == MINI_V1) {
-                            lower_bound = 0x18000;
-                            upper_bound = 0x3BBFF;
-                        }
-                        //MICROBIT_V2 lower_bound = 0x27000; upper_bound = 0x71FFF;
-                        //Memory range nRF52833 (S113 v7.0.x) Application area (incl. free space) 0x0001C000 - 0x00078000 (368 kB)
-                        if (hardwareVersion == MINI_V2) {
-                            lower_bound = 0x1C000;
-                            upper_bound = 0x77000;
-                        }
-
-                        // Check for Cortex-M4 Vector Table
-                        if (b_addr == 0x10 && bs[b_x + 41] != 'E' && bs[b_x + 42] != '0') { // Vectors exist
-                            is_v2 = true;
-                        }
-
-                        if ((records_wanted || !is_fat) && b_addr >= lower_bound && b_addr < upper_bound) {
-
-                            outputHex.write(bs, b_x, next);
-                            // Add to app size
-                            application_size = application_size + charToInt((char) bs[b_x + 1]) * 16 + charToInt((char) bs[b_x + 2]);
-                        } else {
-                            // Log.v(TAG, "TEST " + Integer.toHexString(b_addr) + " BA " + b_a + " LELA " + lastELA.toString() + " " + uses_ESA);
-                            // test.write(bs, b_x, next);
-                        }
-
-                        break;
-                    case 'C':
-                    case 'B':
-                        records_wanted = false;
-                        break;
-                    default:
-                        Utils.log(Log.ERROR, TAG, "Record type not recognised; TYPE: " + b_type);
-                }
-
-                // Record handled. Move to next ':'
-                if ((b_x + next) >= i) {
-                    break;
-                } else {
-                    b_x = b_x + next;
-                }
+            Utils.log(Log.VERBOSE, TAG, "universalHexToDFU - read file");
 
+            irmHexUtils irmHexUtil = new irmHexUtils();
+            int hexBlock = hardwareType == MINI_V1
+                    ? irmHexUtils.irmHexBlock01
+                    : irmHexUtils.irmHexBlock03;
+            if ( !irmHexUtil.universalHexToApplicationHex( bs, hexBlock)) {
+                return new HexToDfu(null, -1);
             }
-
-            byte[] output = outputHex.toByteArray();
-            byte[] testBytes = test.toByteArray();
-
-            Utils.log(Log.VERBOSE, TAG, "Finished parsing HEX. Writing application HEX for flashing");
+            byte [] dataHex = irmHexUtil.resultHex;
+            int application_size = irmHexUtil.resultDataSize;
+            Utils.log(Log.VERBOSE, TAG, "universalHexToDFU - Finished parsing HEX");
 
             try {
                 File hexToFlash = new File(this.getCacheDir() + "/application.hex");
@@ -377,29 +249,24 @@ public class FlashingService extends FlashingBaseService {
                 }
                 hexToFlash.createNewFile();
 
-                outputStream = new FileOutputStream(hexToFlash);
-                outputStream.write(output);
+                FileOutputStream outputStream = new FileOutputStream(hexToFlash);
+                outputStream.write( dataHex);
                 outputStream.flush();
 
                 // Should return from here
                 Utils.log(Log.VERBOSE, TAG, hexToFlash.getAbsolutePath());
 
-                /*
-                if(hardwareVersion == MICROBIT_V2 && (!is_v2 && !is_fat)) {
-                    ret[1] = Integer.toString(-1); // Invalidate hex file
-                }
-                 */
-
+                Utils.log(Log.VERBOSE, TAG, "universalHexToDFU - Finished");
                 return new HexToDfu(hexToFlash.getAbsolutePath(), application_size);
             } catch (IOException e) {
                 e.printStackTrace();
             }
 
         } catch (FileNotFoundException e) {
-            Utils.log(Log.ERROR, TAG, "File not found.");
+            Log.e(TAG, "File not found.");
             e.printStackTrace();
         } catch (IOException e) {
-            Utils.log(Log.ERROR, TAG, "IO Exception.");
+            Log.e(TAG, "IO Exception.");
             e.printStackTrace();
         }
 
@@ -407,18 +274,6 @@ public class FlashingService extends FlashingBaseService {
         return new HexToDfu(null, -1);
     }
 
-    /**
-     * Convert a HEX char to int
-     */
-    int charToInt(char in) {
-        // 0 - 9
-        if (in - '0' >= 0 && in - '0' < 10) {
-            return (in - '0');
-        }
-        // A - F
-        return in - 55;
-    }
-
     private String createDFUInitPacket(int hexLength) throws IOException {
         ByteArrayOutputStream outputInitPacket;
         outputInitPacket = new ByteArrayOutputStream();
diff --git a/app/src/main/java/cc/calliope/mini/ProgressCollector.java b/app/src/main/java/cc/calliope/mini/ProgressCollector.java
index 7648975..1564d95 100644
--- a/app/src/main/java/cc/calliope/mini/ProgressCollector.java
+++ b/app/src/main/java/cc/calliope/mini/ProgressCollector.java
@@ -15,6 +15,7 @@ import androidx.annotation.NonNull;
 import androidx.lifecycle.DefaultLifecycleObserver;
 import androidx.lifecycle.LifecycleOwner;
 import androidx.localbroadcastmanager.content.LocalBroadcastManager;
+
 import cc.calliope.mini.service.DfuControlService;
 import cc.calliope.mini.service.DfuService;
 import cc.calliope.mini.utils.Utils;
@@ -24,11 +25,15 @@ import no.nordicsemi.android.error.GattError;
 import static android.bluetooth.BluetoothDevice.ACTION_BOND_STATE_CHANGED;
 import static android.bluetooth.BluetoothDevice.ERROR;
 import static android.bluetooth.BluetoothDevice.EXTRA_BOND_STATE;
+
 import static cc.calliope.mini.service.DfuControlService.UNIDENTIFIED;
 import static cc.calliope.mini.service.DfuControlService.EXTRA_BOARD_VERSION;
 import static cc.calliope.mini.service.DfuControlService.EXTRA_ERROR_CODE;
 import static cc.calliope.mini.service.DfuControlService.EXTRA_ERROR_MESSAGE;
 
+import static no.nordicsemi.android.dfu.DfuBaseService.EXTRA_DATA;
+
+
 public class ProgressCollector extends ContextWrapper implements DefaultLifecycleObserver {
     private static final String TAG = "ProgressCollector";
     private final Context context;
@@ -51,7 +56,7 @@ public class ProgressCollector extends ContextWrapper implements DefaultLifecycl
             if (action.equals(ACTION_BOND_STATE_CHANGED)) {
                 final int bondState = intent.getIntExtra(EXTRA_BOND_STATE, ERROR);
                 final int previousBondState = intent.getIntExtra(BluetoothDevice.EXTRA_PREVIOUS_BOND_STATE, ERROR);
-                listener.onBonding(device, bondState, previousBondState);
+                listener.onBluetoothBondingStateChanged(device, bondState, previousBondState);
             }
         }
     };
@@ -66,20 +71,11 @@ public class ProgressCollector extends ContextWrapper implements DefaultLifecycl
 
             switch (action) {
                 case DfuService.BROADCAST_PROGRESS -> {
-                    int extra = intent.getIntExtra(DfuService.EXTRA_DATA, 0);
-                    switch (extra) {
-                        case DfuService.PROGRESS_CONNECTING -> listener.onDeviceConnecting();
-                        case DfuService.PROGRESS_STARTING -> listener.onProcessStarting();
-                        case DfuService.PROGRESS_ENABLING_DFU_MODE -> listener.onEnablingDfuMode();
-                        case DfuService.PROGRESS_VALIDATING -> listener.onFirmwareValidating();
-                        case DfuService.PROGRESS_DISCONNECTING -> listener.onDeviceDisconnecting();
-                        case DfuService.PROGRESS_COMPLETED -> listener.onCompleted();
-                        case DfuService.PROGRESS_ABORTED -> listener.onAborted();
-                        default -> listener.onProgressChanged(extra);
-                    }
+                    int extra = intent.getIntExtra(EXTRA_DATA, 0);
+                    listener.onProgressUpdate(extra);
                 }
                 case DfuService.BROADCAST_ERROR -> {
-                    int code = intent.getIntExtra(DfuBaseService.EXTRA_DATA, 0);
+                    int code = intent.getIntExtra(EXTRA_DATA, 0);
                     int type = intent.getIntExtra(DfuBaseService.EXTRA_ERROR_TYPE, 0);
                     String message = switch (type) {
                         case DfuBaseService.ERROR_TYPE_COMMUNICATION_STATE ->
@@ -103,12 +99,13 @@ public class ProgressCollector extends ContextWrapper implements DefaultLifecycl
             }
 
             switch (action) {
-                case DfuControlService.BROADCAST_START -> listener.onEnablingDfuMode();
+                case DfuControlService.BROADCAST_START ->
+                        listener.onProgressUpdate(DfuService.PROGRESS_CONNECTING);
                 case DfuControlService.BROADCAST_COMPLETED -> {
                     int boardVersion = intent.getIntExtra(EXTRA_BOARD_VERSION, UNIDENTIFIED);
-                    listener.onStartDfuService(boardVersion);
+                    listener.onHardwareVersionReceived(boardVersion);
                 }
-                case DfuControlService.BROADCAST_FAILED -> listener.onDeviceDisconnecting();
+                case DfuControlService.BROADCAST_CONNECTION_FAILED -> listener.onConnectionFailed();
                 case DfuControlService.BROADCAST_ERROR -> {
                     int code = intent.getIntExtra(EXTRA_ERROR_CODE, -1);
                     String message = intent.getStringExtra(EXTRA_ERROR_MESSAGE);
@@ -129,19 +126,15 @@ public class ProgressCollector extends ContextWrapper implements DefaultLifecycl
             switch (action) {
                 case PartialFlashingBaseService.BROADCAST_PROGRESS -> {
                     int percent = intent.getIntExtra(PartialFlashingBaseService.EXTRA_PROGRESS, 0);
-                    listener.onProgressChanged(percent);
-                }
-                case PartialFlashingBaseService.BROADCAST_START -> listener.onProcessStarting();
-                case PartialFlashingBaseService.BROADCAST_COMPLETE -> {
-                    listener.onCompleted();
-                    listener.onDeviceDisconnecting();
-                }
-                case PartialFlashingBaseService.BROADCAST_PF_FAILED -> {
-                    listener.onError(-1, "Partial Flashing FAILED");
-                }
-                case PartialFlashingBaseService.BROADCAST_PF_ATTEMPT_DFU -> {
-                    listener.onAttemptDfuMode();
+                    listener.onProgressUpdate(percent);
                 }
+                case PartialFlashingBaseService.BROADCAST_START ->
+                        listener.onProgressUpdate(DfuService.PROGRESS_STARTING);
+                case PartialFlashingBaseService.BROADCAST_COMPLETE ->
+                        listener.onProgressUpdate(DfuService.PROGRESS_COMPLETED);
+                case PartialFlashingBaseService.BROADCAST_PF_FAILED ->
+                        listener.onError(-1, "Partial Flashing FAILED");
+                case PartialFlashingBaseService.BROADCAST_PF_ATTEMPT_DFU -> listener.onDfuAttempt();
             }
         }
     };
@@ -160,42 +153,43 @@ public class ProgressCollector extends ContextWrapper implements DefaultLifecycl
 
     @Override
     public void onCreate(@NonNull LifecycleOwner owner) {
-        DefaultLifecycleObserver.super.onCreate(owner);
-        Utils.log(TAG, "onCreate");
+        if (owner instanceof FlashingService)
+            Utils.log(TAG, "onCreate: " + owner);
     }
 
     @Override
     public void onStart(@NonNull LifecycleOwner owner) {
-        DefaultLifecycleObserver.super.onStart(owner);
-        Utils.log(TAG, "onStart");
+        if (owner instanceof FlashingService)
+            Utils.log(TAG, "onStart: " + owner);
     }
 
     @Override
     public void onResume(@NonNull LifecycleOwner owner) {
-        DefaultLifecycleObserver.super.onResume(owner);
-        Utils.log(TAG, "onResume");
+        registerReceivers();
+        if (owner instanceof FlashingService)
+            Utils.log(TAG, "onResume: " + owner);
     }
 
     @Override
     public void onPause(@NonNull LifecycleOwner owner) {
-        DefaultLifecycleObserver.super.onPause(owner);
-        Utils.log(TAG, "onPause");
+        unregisterReceivers();
+        if (owner instanceof FlashingService)
+            Utils.log(TAG, "onPause: " + owner);
     }
 
     @Override
     public void onStop(@NonNull LifecycleOwner owner) {
-        DefaultLifecycleObserver.super.onStop(owner);
-        Utils.log(TAG, "onStop");
+        if (owner instanceof FlashingService)
+            Utils.log(TAG, "onStop: " + owner);
     }
 
     @Override
     public void onDestroy(@NonNull LifecycleOwner owner) {
-        DefaultLifecycleObserver.super.onDestroy(owner);
-        Utils.log(TAG, "onDestroy");
+        if (owner instanceof FlashingService)
+            Utils.log(TAG, "onDestroy: " + owner);
     }
 
     public void registerReceivers() {
-        Utils.log(Log.WARN, TAG, "registerReceivers() listener: " + listener);
         if (listener == null) {
             return;
         }
@@ -214,7 +208,7 @@ public class ProgressCollector extends ContextWrapper implements DefaultLifecycl
         IntentFilter dfuControlServiceFilter = new IntentFilter();
         dfuControlServiceFilter.addAction(DfuControlService.BROADCAST_START);
         dfuControlServiceFilter.addAction(DfuControlService.BROADCAST_COMPLETED);
-        dfuControlServiceFilter.addAction(DfuControlService.BROADCAST_FAILED);
+        dfuControlServiceFilter.addAction(DfuControlService.BROADCAST_CONNECTION_FAILED);
         dfuControlServiceFilter.addAction(DfuControlService.BROADCAST_ERROR);
         LocalBroadcastManager.getInstance(context).registerReceiver(dfuControlServiceReceiver, dfuControlServiceFilter);
 
@@ -230,7 +224,6 @@ public class ProgressCollector extends ContextWrapper implements DefaultLifecycl
     }
 
     public void unregisterReceivers() {
-        Utils.log(Log.WARN, TAG, "unregisterReceivers()");
         unregisterReceiver(bondStateReceiver);
         LocalBroadcastManager.getInstance(context).unregisterReceiver(dfuServiceReceiver);
         LocalBroadcastManager.getInstance(context).unregisterReceiver(dfuControlServiceReceiver);
diff --git a/app/src/main/java/cc/calliope/mini/ProgressListener.java b/app/src/main/java/cc/calliope/mini/ProgressListener.java
index a38efa7..21e67eb 100644
--- a/app/src/main/java/cc/calliope/mini/ProgressListener.java
+++ b/app/src/main/java/cc/calliope/mini/ProgressListener.java
@@ -20,16 +20,10 @@ public interface ProgressListener {
     @interface BondState {
     }
 
-    void onDeviceConnecting();
-    void onProcessStarting();
-    void onAttemptDfuMode();
-    void onEnablingDfuMode();
-    void onFirmwareValidating();
-    void onDeviceDisconnecting();
-    void onCompleted();
-    void onAborted();
-    void onStartDfuService(@HardwareVersion final int hardwareVersion);
-    void onProgressChanged(int percent);
-    void onBonding(@NonNull BluetoothDevice device, @BondState int bondState, @BondState int previousBondState);
+    void onDfuAttempt();
+    void onHardwareVersionReceived(@HardwareVersion final int hardwareVersion);
+    void onProgressUpdate(int progress);
+    void onBluetoothBondingStateChanged(@NonNull BluetoothDevice device, @BondState int bondState, @BondState int previousBondState);
+    void onConnectionFailed();
     void onError(int code, String message);
 }
\ No newline at end of file
diff --git a/app/src/main/java/cc/calliope/mini/ScanViewModelKt.kt b/app/src/main/java/cc/calliope/mini/ScanViewModelKt.kt
index 9525abf..c6f22fb 100644
--- a/app/src/main/java/cc/calliope/mini/ScanViewModelKt.kt
+++ b/app/src/main/java/cc/calliope/mini/ScanViewModelKt.kt
@@ -22,6 +22,7 @@ class ScanViewModelKt(application: Application) : AndroidViewModel(application)
     private val _devices = MutableLiveData<List<BleScanResults>>()
     val devices: LiveData<List<BleScanResults>> get() = _devices
 
+    @SuppressWarnings("MissingPermission")
     fun startScan() {
         val context = getApplication<Application>().applicationContext
         val settings = BleScannerSettings(
diff --git a/app/src/main/java/cc/calliope/mini/activity/FlashingActivity.java b/app/src/main/java/cc/calliope/mini/activity/FlashingActivity.java
index de8ecf2..f387d7a 100644
--- a/app/src/main/java/cc/calliope/mini/activity/FlashingActivity.java
+++ b/app/src/main/java/cc/calliope/mini/activity/FlashingActivity.java
@@ -23,6 +23,7 @@ import androidx.core.app.ActivityCompat;
 
 import com.google.android.material.snackbar.Snackbar;
 
+import cc.calliope.mini.FlashingService;
 import cc.calliope.mini.ProgressCollector;
 import cc.calliope.mini.ProgressListener;
 import cc.calliope.mini.R;
@@ -37,7 +38,7 @@ public class FlashingActivity extends AppCompatActivity implements ProgressListe
     private static final int SNACKBAR_DURATION = 10000; // how long to display the snackbar message.
     private static final int DELAY_TO_FINISH_ACTIVITY = 5000; // delay to finish activity after flashing
     private ActivityDfuBinding binding;
-    private TextView progress;
+    private TextView title;
     private TextView status;
     private BoardProgressBar progressBar;
     private ProgressCollector progressCollector;
@@ -46,7 +47,8 @@ public class FlashingActivity extends AppCompatActivity implements ProgressListe
 
     ActivityResultLauncher<Intent> bluetoothEnableResultLauncher = registerForActivityResult(
             new ActivityResultContracts.StartActivityForResult(), result -> {
-                //initFlashing();
+                Intent serviceIntent = new Intent(this, FlashingService.class);
+                startService(serviceIntent);
             }
     );
 
@@ -54,97 +56,80 @@ public class FlashingActivity extends AppCompatActivity implements ProgressListe
     protected void onCreate(Bundle savedInstanceState) {
         super.onCreate(savedInstanceState);
 
-        //Utils.errorSnackbar(binding.getRoot(), getString(R.string.error_snackbar_no_connected)).show();
+        if(!Utils.isBluetoothEnabled()){
+            showBluetoothDisabledWarning();
+        }
 
         binding = ActivityDfuBinding.inflate(getLayoutInflater());
         setContentView(binding.getRoot());
 
         status = binding.statusTextView;
-        progress = binding.progressTextView;
+        title = binding.titleTextView;
         progressBar = binding.progressBar;
 
         binding.retryButton.setOnClickListener(this::onRetryClicked);
 
         progressCollector = new ProgressCollector(this);
         getLifecycle().addObserver(progressCollector);
-        progressCollector.registerReceivers();
     }
 
     @Override
     protected void onDestroy() {
-        binding = null;
         super.onDestroy();
-        progressCollector.unregisterReceivers();
-    }
-
-    @Override
-    public void onDeviceConnecting() {
-        status.setText(R.string.flashing_device_connecting);
-        Utils.log(Log.WARN, TAG, "onDeviceConnecting");
-    }
-
-    @Override
-    public void onProcessStarting() {
-        status.setText(R.string.flashing_process_starting);
-        Utils.log(Log.WARN, TAG, "onProcessStarting");
-    }
-
-    @Override
-    public void onAttemptDfuMode() {
-    }
-
-    @Override
-    public void onEnablingDfuMode() {
-        status.setText(R.string.flashing_enabling_dfu_mode);
-        Utils.log(Log.WARN, TAG, "onEnablingDfuMode");
-    }
-
-    @Override
-    public void onFirmwareValidating() {
-        status.setText(R.string.flashing_firmware_validating);
-        Utils.log(Log.WARN, TAG, "onFirmwareValidating");
-    }
-
-    @Override
-    public void onDeviceDisconnecting() {
-        status.setText(R.string.flashing_device_disconnecting);
-        finishActivity();
-        Utils.log(Log.WARN, TAG, "onDeviceDisconnecting");
+        binding = null;
     }
 
     @Override
-    public void onCompleted() {
-        progress.setText(String.format(getString(R.string.flashing_percent), 100));
-        status.setText(R.string.flashing_completed);
-        progressBar.setProgress(DfuService.PROGRESS_COMPLETED);
-        Utils.log(Log.WARN, TAG, "onCompleted");
+    public void onDfuAttempt() {
     }
 
     @Override
-    public void onAborted() {
-        status.setText(R.string.flashing_aborted);
-        Utils.log(Log.WARN, TAG, "onAborted");
+    public void onConnectionFailed() {
+        binding.retryButton.setVisibility(View.VISIBLE);
+        status.setText(R.string.error_snackbar_no_connected);
+        Utils.errorSnackbar(binding.getRoot(), getString(R.string.error_snackbar_no_connected)).show();
     }
 
     @Override
-    public void onProgressChanged(int percent) {
-        if (percent >= 0 && percent <= 100) {
-            progress.setText(String.format(getString(R.string.flashing_percent), percent));
-            status.setText(R.string.flashing_uploading);
-            progressBar.setProgress(percent);
+    public void onProgressUpdate(int progress) {
+        switch (progress) {
+            case DfuService.PROGRESS_CONNECTING ->
+                    status.setText(R.string.flashing_device_connecting);
+            case DfuService.PROGRESS_STARTING ->
+                    status.setText(R.string.flashing_process_starting);
+            case DfuService.PROGRESS_ENABLING_DFU_MODE ->
+                    status.setText(R.string.flashing_enabling_dfu_mode);
+            case DfuService.PROGRESS_VALIDATING ->
+                    status.setText(R.string.flashing_firmware_validating);
+            case DfuService.PROGRESS_DISCONNECTING ->
+                    status.setText(R.string.flashing_device_disconnecting);
+            case DfuService.PROGRESS_ABORTED ->
+                    status.setText(R.string.flashing_aborted);
+            case DfuService.PROGRESS_COMPLETED -> {
+                title.setText(String.format(getString(R.string.flashing_percent), 100));
+                status.setText(R.string.flashing_completed);
+                progressBar.setProgress(progress);
+                finishActivity();
+            }
+            default -> {
+                title.setText(String.format(getString(R.string.flashing_percent), progress));
+                status.setText(R.string.flashing_uploading);
+                progressBar.setProgress(progress);
+            }
         }
     }
 
     @Override
-    public void onStartDfuService(int hardwareVersion) {
+    public void onHardwareVersionReceived(int hardwareVersion) {
+
     }
 
     @Override
-    public void onBonding(@NonNull BluetoothDevice device, int bondState, int previousBondState) {
+    public void onBluetoothBondingStateChanged(@NonNull BluetoothDevice device, int bondState, int previousBondState) {
         //if (!currentDevice.getAddress().equals(device.getAddress())) {
         //    return;
         //}
-        progress.setText("");
+        title.setText("");
 
         switch (bondState) {
             case BOND_BONDING -> status.setText(R.string.bonding_started);
@@ -174,6 +159,9 @@ public class FlashingActivity extends AppCompatActivity implements ProgressListe
 
     private void onRetryClicked(View view) {
         view.setVisibility(View.INVISIBLE);
+        Intent serviceIntent = new Intent(this, FlashingService.class);
+//        serviceIntent.putExtra(StaticExtra.EXTRA_FILE_PATH, file.getAbsolutePath());
+        startService(serviceIntent);
         //initFlashing();
     }
 
diff --git a/app/src/main/java/cc/calliope/mini/activity/FlashingActivityOld.java b/app/src/main/java/cc/calliope/mini/activity/FlashingActivityOld.java
index 80cf9c9..aaf58b1 100644
--- a/app/src/main/java/cc/calliope/mini/activity/FlashingActivityOld.java
+++ b/app/src/main/java/cc/calliope/mini/activity/FlashingActivityOld.java
@@ -41,8 +41,8 @@ import cc.calliope.mini.R;
 import cc.calliope.mini.databinding.ActivityDfuBinding;
 import cc.calliope.mini.service.DfuService;
 import cc.calliope.mini.utils.FileUtils;
-import cc.calliope.mini.utils.Preference;
-import cc.calliope.mini.utils.StaticExtra;
+import cc.calliope.mini.utils.Settings;
+import cc.calliope.mini.utils.StaticExtras;
 import cc.calliope.mini.utils.Utils;
 import cc.calliope.mini.utils.Version;
 import cc.calliope.mini.views.BoardProgressBar;
@@ -89,7 +89,7 @@ public class FlashingActivityOld extends AppCompatActivity implements ProgressLi
         setContentView(binding.getRoot());
 
         status = binding.statusTextView;
-        progress = binding.progressTextView;
+        progress = binding.titleTextView;
         progressBar = binding.progressBar;
 
         binding.retryButton.setOnClickListener(this::onRetryClicked);
@@ -108,58 +108,63 @@ public class FlashingActivityOld extends AppCompatActivity implements ProgressLi
         progressCollector.unregisterReceivers();
     }
 
-    @Override
-    public void onDeviceConnecting() {
-        status.setText(R.string.flashing_device_connecting);
-        Utils.log(Log.WARN, TAG, "onDeviceConnecting");
-    }
+//    @Override
+//    public void onDeviceConnecting() {
+//        status.setText(R.string.flashing_device_connecting);
+//        Utils.log(Log.WARN, TAG, "onDeviceConnecting");
+//    }
 
-    @Override
-    public void onProcessStarting() {
-        status.setText(R.string.flashing_process_starting);
-        Utils.log(Log.WARN, TAG, "onProcessStarting");
-    }
+//    @Override
+//    public void onProcessStarting() {
+//        status.setText(R.string.flashing_process_starting);
+//        Utils.log(Log.WARN, TAG, "onProcessStarting");
+//    }
 
     @Override
-    public void onAttemptDfuMode() {
+    public void onDfuAttempt() {
         startDfuControlService();
     }
 
-    @Override
-    public void onEnablingDfuMode() {
-        status.setText(R.string.flashing_enabling_dfu_mode);
-        Utils.log(Log.WARN, TAG, "onEnablingDfuMode");
-    }
-
-    @Override
-    public void onFirmwareValidating() {
-        status.setText(R.string.flashing_firmware_validating);
-        Utils.log(Log.WARN, TAG, "onFirmwareValidating");
-    }
+//    @Override
+//    public void onEnablingDfuMode() {
+//        status.setText(R.string.flashing_enabling_dfu_mode);
+//        Utils.log(Log.WARN, TAG, "onEnablingDfuMode");
+//    }
+
+//    @Override
+//    public void onFirmwareValidating() {
+//        status.setText(R.string.flashing_firmware_validating);
+//        Utils.log(Log.WARN, TAG, "onFirmwareValidating");
+//    }
+//
+//    @Override
+//    public void onDeviceDisconnecting() {
+//        status.setText(R.string.flashing_device_disconnecting);
+//        finishActivity();
+//        Utils.log(Log.WARN, TAG, "onDeviceDisconnecting");
+//    }
+//
+//    @Override
+//    public void onCompleted() {
+//        progress.setText(String.format(getString(R.string.flashing_percent), 100));
+//        status.setText(R.string.flashing_completed);
+//        progressBar.setProgress(DfuService.PROGRESS_COMPLETED);
+//        Utils.log(Log.WARN, TAG, "onCompleted");
+//    }
+//
+//    @Override
+//    public void onAborted() {
+//        status.setText(R.string.flashing_aborted);
+//        Utils.log(Log.WARN, TAG, "onAborted");
+//    }
 
     @Override
-    public void onDeviceDisconnecting() {
-        status.setText(R.string.flashing_device_disconnecting);
-        finishActivity();
-        Utils.log(Log.WARN, TAG, "onDeviceDisconnecting");
-    }
+    public void onConnectionFailed(){
 
-    @Override
-    public void onCompleted() {
-        progress.setText(String.format(getString(R.string.flashing_percent), 100));
-        status.setText(R.string.flashing_completed);
-        progressBar.setProgress(DfuService.PROGRESS_COMPLETED);
-        Utils.log(Log.WARN, TAG, "onCompleted");
-    }
-
-    @Override
-    public void onAborted() {
-        status.setText(R.string.flashing_aborted);
-        Utils.log(Log.WARN, TAG, "onAborted");
     }
 
     @Override
-    public void onProgressChanged(int percent) {
+    public void onProgressUpdate(int percent) {
         if (percent >= 0 && percent <= 100) {
             progress.setText(String.format(getString(R.string.flashing_percent), percent));
             status.setText(R.string.flashing_uploading);
@@ -168,7 +173,7 @@ public class FlashingActivityOld extends AppCompatActivity implements ProgressLi
     }
 
     @Override
-    public void onStartDfuService(int hardwareVersion) {
+    public void onHardwareVersionReceived(int hardwareVersion) {
         Utils.log(Log.ASSERT, "DeviceInformation", "Board version: " + hardwareVersion);
 
         startFlashing(hardwareVersion);
@@ -176,7 +181,7 @@ public class FlashingActivityOld extends AppCompatActivity implements ProgressLi
     }
 
     @Override
-    public void onBonding(@NonNull BluetoothDevice device, int bondState, int previousBondState) {
+    public void onBluetoothBondingStateChanged(@NonNull BluetoothDevice device, int bondState, int previousBondState) {
         if (!currentDevice.getAddress().equals(device.getAddress())) {
             return;
         }
@@ -219,11 +224,11 @@ public class FlashingActivityOld extends AppCompatActivity implements ProgressLi
 
     private void getExtras() {
         SharedPreferences preferences = PreferenceManager.getDefaultSharedPreferences(this);
-        currentAddress = preferences.getString(StaticExtra.DEVICE_ADDRESS, "");
-        currentPattern = preferences.getString(StaticExtra.DEVICE_PATTERN, "ZUZUZ");
+        currentAddress = preferences.getString(StaticExtras.DEVICE_ADDRESS, "");
+        currentPattern = preferences.getString(StaticExtras.DEVICE_PATTERN, "ZUZUZ");
 
         Intent intent = getIntent();
-        currentPath = intent.getStringExtra(StaticExtra.EXTRA_FILE_PATH);
+        currentPath = intent.getStringExtra(StaticExtras.EXTRA_FILE_PATH);
 
         Utils.log(Log.INFO, TAG, "Device: " + currentAddress + " " + currentPattern);
         Utils.log(Log.INFO, TAG, "File path: " + currentPath);
@@ -239,7 +244,7 @@ public class FlashingActivityOld extends AppCompatActivity implements ProgressLi
         BluetoothAdapter bluetoothAdapter = BluetoothAdapter.getDefaultAdapter();
         if (bluetoothAdapter.isEnabled()) {
             currentDevice = bluetoothAdapter.getRemoteDevice(currentAddress);
-            if (Preference.isPartialFlashingEnable(this)) {
+            if (Settings.isPartialFlashingEnable(this)) {
                 startPartialFlashing();
             } else {
                 startDfuControlService();
@@ -254,7 +259,7 @@ public class FlashingActivityOld extends AppCompatActivity implements ProgressLi
 
         Intent service = new Intent(this, PartialFlashingService.class);
         service.putExtra(PartialFlashingService.EXTRA_DEVICE_ADDRESS, currentDevice.getAddress());
-        service.putExtra(StaticExtra.EXTRA_FILE_PATH, currentPath); // a path or URI must be provided.
+        service.putExtra(StaticExtras.EXTRA_FILE_PATH, currentPath); // a path or URI must be provided.
         startService(service);
     }
 
@@ -262,7 +267,7 @@ public class FlashingActivityOld extends AppCompatActivity implements ProgressLi
         Utils.log(TAG, "Starting DfuControl Service...");
 
         Intent service = new Intent(this, DfuControlService.class);
-        service.putExtra(StaticExtra.DEVICE_ADDRESS, currentDevice.getAddress());
+        service.putExtra(StaticExtras.DEVICE_ADDRESS, currentDevice.getAddress());
         startService(service);
     }
 
diff --git a/app/src/main/java/cc/calliope/mini/activity/NotificationActivity.java b/app/src/main/java/cc/calliope/mini/activity/NotificationActivity.java
index bf817e5..8bc297d 100644
--- a/app/src/main/java/cc/calliope/mini/activity/NotificationActivity.java
+++ b/app/src/main/java/cc/calliope/mini/activity/NotificationActivity.java
@@ -13,11 +13,13 @@ public class NotificationActivity extends AppCompatActivity {
 //        GoogleAnalyticsManager.getInstance().sendViewEventStats(NotificationActivity.class.getSimpleName());
 
         // If this activity is the root activity of the task, the app is not running
-        if(isTaskRoot()) {
+        if (isTaskRoot()) {
             // Start the app before finishing
             final Intent intent = new Intent(this, FlashingActivity.class);
             intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
-            intent.putExtras(getIntent().getExtras()); // copy all extras
+            if (getIntent().getExtras() != null){
+                intent.putExtras(getIntent().getExtras()); // copy all extras
+            }
             startActivity(intent);
         }
         // Now finish, which will drop you to the activity at which you were at the top of the task stack
diff --git a/app/src/main/java/cc/calliope/mini/activity/OpenHexActivity.java b/app/src/main/java/cc/calliope/mini/activity/OpenHexActivity.java
index 28447ce..f14f942 100644
--- a/app/src/main/java/cc/calliope/mini/activity/OpenHexActivity.java
+++ b/app/src/main/java/cc/calliope/mini/activity/OpenHexActivity.java
@@ -26,7 +26,7 @@ import cc.calliope.mini.R;
 import cc.calliope.mini.databinding.ActivityHexBinding;
 import cc.calliope.mini.fragment.editors.Editor;
 import cc.calliope.mini.utils.FileUtils;
-import cc.calliope.mini.utils.StaticExtra;
+import cc.calliope.mini.utils.StaticExtras;
 import cc.calliope.mini.utils.Version;
 
 
@@ -134,12 +134,12 @@ public class OpenHexActivity extends ScannerActivity {
     }
 
     private void startDFUActivity(File file) {
-        //final Intent intent = new Intent(this, FlashingActivity.class);
+        final Intent intent = new Intent(this, FlashingActivity.class);
         //intent.putExtra(StaticExtra.EXTRA_FILE_PATH, file.getAbsolutePath());
-        //startActivity(intent);
+        startActivity(intent);
 
         Intent serviceIntent = new Intent(this, FlashingService.class);
-        serviceIntent.putExtra(StaticExtra.EXTRA_FILE_PATH, file.getAbsolutePath());
+        serviceIntent.putExtra(StaticExtras.EXTRA_FILE_PATH, file.getAbsolutePath());
         startService(serviceIntent);
     }
 }
\ No newline at end of file
diff --git a/app/src/main/java/cc/calliope/mini/activity/ScannerActivity.java b/app/src/main/java/cc/calliope/mini/activity/ScannerActivity.java
index a938eaa..5b5d6b8 100644
--- a/app/src/main/java/cc/calliope/mini/activity/ScannerActivity.java
+++ b/app/src/main/java/cc/calliope/mini/activity/ScannerActivity.java
@@ -1,10 +1,12 @@
 package cc.calliope.mini.activity;
 
 import android.bluetooth.BluetoothAdapter;
+import android.bluetooth.BluetoothDevice;
 import android.content.Context;
 import android.content.DialogInterface;
 import android.content.Intent;
 import android.graphics.Color;
+import android.graphics.Point;
 import android.graphics.drawable.ColorDrawable;
 import android.os.Bundle;
 import android.util.DisplayMetrics;
@@ -29,7 +31,8 @@ import androidx.core.view.ViewCompat;
 import androidx.fragment.app.Fragment;
 import androidx.fragment.app.FragmentManager;
 
-import cc.calliope.mini.App;
+import cc.calliope.mini.ProgressCollector;
+import cc.calliope.mini.ProgressListener;
 import cc.calliope.mini.popup.PopupAdapter;
 import cc.calliope.mini.popup.PopupItem;
 import cc.calliope.mini.R;
@@ -40,17 +43,18 @@ import cc.calliope.mini.utils.Version;
 import cc.calliope.mini.views.FobParams;
 import cc.calliope.mini.views.MovableFloatingActionButton;
 
-public abstract class ScannerActivity extends AppCompatActivity implements DialogInterface.OnDismissListener {
+public abstract class ScannerActivity extends AppCompatActivity implements DialogInterface.OnDismissListener, ProgressListener {
     private static final int SNACKBAR_DURATION = 10000; // how long to display the snackbar message.
     private static boolean requestWasSent = false;
     private MovableFloatingActionButton patternFab;
     private ConstraintLayout rootView;
     private int screenWidth;
     private int screenHeight;
-    private App app;
     private PopupWindow popupWindow;
     private int popupMenuWidth;
     private int popupMenuHeight;
+    private ProgressCollector progressCollector;
+    private int progress;
 
     ActivityResultLauncher<Intent> bluetoothEnableResultLauncher = registerForActivityResult(
             new ActivityResultContracts.StartActivityForResult(), result -> {
@@ -61,7 +65,8 @@ public abstract class ScannerActivity extends AppCompatActivity implements Dialo
     protected void onCreate(Bundle savedInstanceState) {
         super.onCreate(savedInstanceState);
 
-        app = (App) getApplication();
+        progressCollector = new ProgressCollector(this);
+        getLifecycle().addObserver(progressCollector);
 
 //        scannerViewModel = new ViewModelProvider(this).get(ScannerViewModel.class);
 //        scannerViewModel.getScannerState().observe(this, this::scanResults);
@@ -77,8 +82,10 @@ public abstract class ScannerActivity extends AppCompatActivity implements Dialo
     public void onResume() {
         super.onResume();
         requestWasSent = false;
+        progress = -10;
         checkPermission();
         readDisplayMetrics();
+        patternFab.setProgress(progress);
     }
 
     @Override
@@ -93,6 +100,36 @@ public abstract class ScannerActivity extends AppCompatActivity implements Dialo
 //        fab.setVisibility(View.VISIBLE);
     }
 
+    @Override
+    public void onConnectionFailed(){
+        patternFab.setProgress(-10);
+        Utils.errorSnackbar(rootView, getString(R.string.error_snackbar_no_connected)).show();
+    }
+    @Override
+    public void onProgressUpdate(int percent) {
+        progress = percent;
+        patternFab.setProgress(percent);
+    }
+
+    @Override
+    public void onBluetoothBondingStateChanged(@NonNull BluetoothDevice device, int bondState, int previousBondState) {
+    }
+
+    @Override
+    public void onDfuAttempt() {
+    }
+
+    @Override
+    public void onHardwareVersionReceived(int hardwareVersion) {
+    }
+
+    @Override
+    public void onError(int code, String message) {
+        patternFab.setProgress(-10);
+        String error = String.format(getString(R.string.flashing_error), code, message);
+        Utils.errorSnackbar(rootView, error).show();
+    }
+
     private void readDisplayMetrics() {
         WindowManager windowManager = (WindowManager) getSystemService(Context.WINDOW_SERVICE);
         DisplayMetrics displayMetrics = new DisplayMetrics();
@@ -205,7 +242,7 @@ public abstract class ScannerActivity extends AppCompatActivity implements Dialo
         Utils.log(Log.ASSERT, "SA", "position: " + position);
         popupWindow.dismiss();
         if (position == 0) {
-            if (app.getAppState() == App.APP_STATE_STANDBY) {
+            if (progress < 0) {
                 showPatternDialog(new FobParams(
                         patternFab.getWidth(),
                         patternFab.getHeight(),
@@ -219,8 +256,8 @@ public abstract class ScannerActivity extends AppCompatActivity implements Dialo
     }
 
     private void showPopupMenu(View view) {
-        Offset offset = getOffset(view);
-        popupWindow.showAsDropDown(view, offset.getX(), offset.getY());
+        Point point = getOffset(view);
+        popupWindow.showAsDropDown(view, point.x, point.y);
         dimBackground(0.5f);  // затемнюємо фон до 50%
         ViewCompat.animate(view)
                 .rotation(45.0F)
@@ -245,34 +282,7 @@ public abstract class ScannerActivity extends AppCompatActivity implements Dialo
         window.setAttributes(layoutParams);
     }
 
-    private class Offset {
-        private final int x;
-        private final int y;
-
-        public Offset(int x, int y) {
-            this.x = x;
-            this.y = y;
-        }
-
-        public int getX() {
-            return x;
-        }
-
-        public int getY() {
-            return y;
-        }
-
-        @NonNull
-        @Override
-        public String toString() {
-            return "Offset{" +
-                    "x=" + x +
-                    ", y=" + y +
-                    '}';
-        }
-    }
-
-    private Offset getOffset(View view) {
+    private Point getOffset(View view) {
         int x;
         int y;
 
@@ -288,7 +298,7 @@ public abstract class ScannerActivity extends AppCompatActivity implements Dialo
             y = (Utils.convertDpToPixel(this, 4) + view.getHeight() + popupMenuHeight) * -1;
         }
 
-        return new Offset(x, y);
+        return new Point(x, y);
     }
 
     private void startFlashingActivity() {
diff --git a/app/src/main/java/cc/calliope/mini/dialog/CustomLinkDialogPreference.java b/app/src/main/java/cc/calliope/mini/dialog/CustomLinkDialogPreference.java
index 4dc7dff..e052c33 100644
--- a/app/src/main/java/cc/calliope/mini/dialog/CustomLinkDialogPreference.java
+++ b/app/src/main/java/cc/calliope/mini/dialog/CustomLinkDialogPreference.java
@@ -4,6 +4,7 @@ import android.content.Context;
 import android.util.AttributeSet;
 import androidx.preference.DialogPreference;
 import cc.calliope.mini.utils.Preference;
+import cc.calliope.mini.utils.Settings;
 
 public class CustomLinkDialogPreference extends DialogPreference {
     public CustomLinkDialogPreference(Context context, AttributeSet attrs) {
@@ -13,7 +14,7 @@ public class CustomLinkDialogPreference extends DialogPreference {
     @Override
     protected void onClick() {
         String dialogTitle = getDialogTitle() == null ? "" : getDialogTitle().toString();
-        String link = Preference.getCustomLink(getContext());
+        String link = Settings.getCustomLink(getContext());
         DialogUtils.showEditDialog(getContext(), dialogTitle, link, output -> {
                     if (shouldPersist()) {
                         persistString(output);
diff --git a/app/src/main/java/cc/calliope/mini/dialog/pattern/PatternDialogFragment.java b/app/src/main/java/cc/calliope/mini/dialog/pattern/PatternDialogFragment.java
index caf9861..daa28d6 100644
--- a/app/src/main/java/cc/calliope/mini/dialog/pattern/PatternDialogFragment.java
+++ b/app/src/main/java/cc/calliope/mini/dialog/pattern/PatternDialogFragment.java
@@ -29,10 +29,10 @@ import androidx.fragment.app.DialogFragment;
 import androidx.lifecycle.Observer;
 import androidx.lifecycle.ViewModelProvider;
 
-import cc.calliope.mini.MyDeviceKt;
+import cc.calliope.mini.DeviceKt;
 import cc.calliope.mini.PatternMatrixView;
 import cc.calliope.mini.ScanViewModelKt;
-import cc.calliope.mini.utils.StaticExtra;
+import cc.calliope.mini.utils.StaticExtras;
 import cc.calliope.mini.views.FobParams;
 import cc.calliope.mini.R;
 import cc.calliope.mini.databinding.DialogPatternBinding;
@@ -45,6 +45,7 @@ public class PatternDialogFragment extends DialogFragment {
     private final static int DIALOG_WIDTH = 220; //dp
     private final static int DIALOG_HEIGHT = 240; //dp
     private static final String FOB_PARAMS_PARCELABLE = "fob_params_parcelable";
+    private static final String TAG = "PatternDialogFragment";
     private DialogPatternBinding binding;
     private String currentPattern;
     private String currentAddress;
@@ -97,13 +98,13 @@ public class PatternDialogFragment extends DialogFragment {
             @Override
             public void onChanged(List<BleScanResults> scanResults) {
                 for (BleScanResults results : scanResults) {
-                    MyDeviceKt device = new MyDeviceKt(results);
+                    DeviceKt device = new DeviceKt(results);
 
                     if (!device.getPattern().isEmpty() && device.getPattern().equals(currentPattern)) {
                         currentAddress = device.getAddress();
                         binding.buttonAction.setBackgroundResource(device.isActual() ? R.drawable.btn_connect_green : R.drawable.btn_connect_aqua);
 
-                        Log.println(Log.DEBUG, "DIALOG",
+                        Utils.log(Log.DEBUG, TAG,
                                 "address: " + device.getAddress() + ", " +
                                         "pattern: " + device.getPattern() + ", " +
                                         "bonded: " + device.isBonded() + ", " +
@@ -142,7 +143,7 @@ public class PatternDialogFragment extends DialogFragment {
             @Override
             public void onGlobalLayout() {
                 view.getViewTreeObserver().removeOnGlobalLayoutListener(this);
-                Log.v("DIALOG", String.format("Window size: width %d; height %d", view.getWidth(), view.getHeight()));
+                Utils.log(Log.DEBUG, TAG, String.format("Window size: width %d; height %d", view.getWidth(), view.getHeight()));
             }
         });
     }
@@ -205,14 +206,14 @@ public class PatternDialogFragment extends DialogFragment {
 
     public void saveCurrentDevice() {
         SharedPreferences.Editor editor = PreferenceManager.getDefaultSharedPreferences(context).edit();
-        editor.putString(StaticExtra.DEVICE_ADDRESS, currentAddress);
-        editor.putString(StaticExtra.DEVICE_PATTERN, currentPattern);
+        editor.putString(StaticExtras.DEVICE_ADDRESS, currentAddress);
+        editor.putString(StaticExtras.DEVICE_PATTERN, currentPattern);
         editor.apply();
     }
 
     public void loadCurrentDevice() {
         SharedPreferences preferences = PreferenceManager.getDefaultSharedPreferences(context);
-        currentAddress = preferences.getString(StaticExtra.DEVICE_ADDRESS, "");
-        currentPattern = preferences.getString(StaticExtra.DEVICE_PATTERN, "ZUZUZ");
+        currentAddress = preferences.getString(StaticExtras.DEVICE_ADDRESS, "");
+        currentPattern = preferences.getString(StaticExtras.DEVICE_PATTERN, "ZUZUZ");
     }
 }
\ No newline at end of file
diff --git a/app/src/main/java/cc/calliope/mini/dialog/pattern/PatternEnum.java b/app/src/main/java/cc/calliope/mini/dialog/pattern/PatternEnum.java
deleted file mode 100644
index bdf20d0..0000000
--- a/app/src/main/java/cc/calliope/mini/dialog/pattern/PatternEnum.java
+++ /dev/null
@@ -1,32 +0,0 @@
-package cc.calliope.mini.dialog.pattern;
-
-import java.util.LinkedHashMap;
-import java.util.Map;
-
-public enum PatternEnum {
-        XX(0f),
-        ZU(1f),
-        VO(2f),
-        GI(3f),
-        PE(4f),
-        TA(5f);
-
-        private final float code;
-
-        PatternEnum(final float code) {
-            this.code = code;
-        }
-
-        private static final Map<Float, PatternEnum> BY_CODE_MAP = new LinkedHashMap<>();
-
-        static {
-            for (PatternEnum pattern : PatternEnum.values()) {
-                BY_CODE_MAP.put(pattern.code, pattern);
-            }
-        }
-
-        public static PatternEnum forCode(float code) {
-            return BY_CODE_MAP.get(code);
-        }
-
-    }
\ No newline at end of file
diff --git a/app/src/main/java/cc/calliope/mini/dialog/scripts/ScriptsFragment.java b/app/src/main/java/cc/calliope/mini/dialog/scripts/ScriptsFragment.java
index 64f2e76..38c9721 100644
--- a/app/src/main/java/cc/calliope/mini/dialog/scripts/ScriptsFragment.java
+++ b/app/src/main/java/cc/calliope/mini/dialog/scripts/ScriptsFragment.java
@@ -47,8 +47,9 @@ import androidx.recyclerview.widget.RecyclerView;
 import cc.calliope.mini.FlashingService;
 import cc.calliope.mini.FileWrapper;
 import cc.calliope.mini.R;
+import cc.calliope.mini.activity.FlashingActivity;
 import cc.calliope.mini.dialog.DialogUtils;
-import cc.calliope.mini.utils.StaticExtra;
+import cc.calliope.mini.utils.StaticExtras;
 import cc.calliope.mini.databinding.FragmentScriptsBinding;
 import cc.calliope.mini.fragment.editors.Editor;
 import cc.calliope.mini.utils.Utils;
@@ -153,12 +154,12 @@ public class ScriptsFragment extends BottomSheetDialogFragment {
     }
 
     private void openDfuActivity(FileWrapper file) {
-//        final Intent intent = new Intent(activity, FlashingActivity.class);
+        final Intent intent = new Intent(activity, FlashingActivity.class);
 //        intent.putExtra(StaticExtra.EXTRA_FILE_PATH, file.getAbsolutePath());
-//        startActivity(intent);
+        startActivity(intent);
 
         Intent serviceIntent = new Intent(activity, FlashingService.class);
-        serviceIntent.putExtra(StaticExtra.EXTRA_FILE_PATH, file.getAbsolutePath());
+        serviceIntent.putExtra(StaticExtras.EXTRA_FILE_PATH, file.getAbsolutePath());
         activity.startService(serviceIntent);
     }
 
@@ -194,9 +195,9 @@ public class ScriptsFragment extends BottomSheetDialogFragment {
         DialogUtils.showEditDialog(activity, title, input, output -> {
             File dir = new File(FilenameUtils.getFullPath(file.getAbsolutePath()));
             if (dir.exists()) {
-                FileWrapper dest = new FileWrapper(new File(dir, output + FILE_EXTENSION), file.getEditor());
+                FileWrapper dest = new FileWrapper(new File(dir, output + FILE_EXTENSION), file.editor());
                 if (file.exists()) {
-                    if (!dest.exists() && file.renameTo(dest.getFile())) {
+                    if (!dest.exists() && file.renameTo(dest.file())) {
                         scriptsRecyclerAdapter.change(file, dest);
                     } else {
                         Utils.errorSnackbar(binding.getRoot(), getString(R.string.error_snackbar_name_exists)).show();
@@ -219,7 +220,7 @@ public class ScriptsFragment extends BottomSheetDialogFragment {
 
     private void shareFile(FileWrapper file) {
         if (file.exists()) {
-            Uri uri = FileProvider.getUriForFile(activity, "cc.calliope.file_provider", file.getFile());
+            Uri uri = FileProvider.getUriForFile(activity, "cc.calliope.file_provider", file.file());
             Intent intent = new Intent(Intent.ACTION_SEND);
 
             intent.setType("text/plain");
diff --git a/app/src/main/java/cc/calliope/mini/dialog/scripts/ScriptsRecyclerAdapter.java b/app/src/main/java/cc/calliope/mini/dialog/scripts/ScriptsRecyclerAdapter.java
index e4bf7a0..e1a937f 100644
--- a/app/src/main/java/cc/calliope/mini/dialog/scripts/ScriptsRecyclerAdapter.java
+++ b/app/src/main/java/cc/calliope/mini/dialog/scripts/ScriptsRecyclerAdapter.java
@@ -128,7 +128,7 @@ public class ScriptsRecyclerAdapter extends RecyclerView.Adapter<ScriptsRecycler
         void setItem(FileWrapper file) {
             this.name.setText(FilenameUtils.removeExtension(file.getName()));
             this.date.setText(Utils.dateFormat(file.lastModified()));
-            this.icon.setImageResource(file.getEditor().getIconResId());
+            this.icon.setImageResource(file.editor().getIconResId());
         }
     }
 }
\ No newline at end of file
diff --git a/app/src/main/java/cc/calliope/mini/fragment/editors/EditorsItemFragment.java b/app/src/main/java/cc/calliope/mini/fragment/editors/EditorsItemFragment.java
index ca38629..94897f8 100644
--- a/app/src/main/java/cc/calliope/mini/fragment/editors/EditorsItemFragment.java
+++ b/app/src/main/java/cc/calliope/mini/fragment/editors/EditorsItemFragment.java
@@ -16,6 +16,7 @@ import androidx.navigation.Navigation;
 import cc.calliope.mini.R;
 import cc.calliope.mini.databinding.FragmentItemBinding;
 import cc.calliope.mini.utils.Preference;
+import cc.calliope.mini.utils.Settings;
 import cc.calliope.mini.utils.Utils;
 
 public class EditorsItemFragment extends Fragment {
@@ -108,7 +109,7 @@ public class EditorsItemFragment extends Fragment {
         if (Utils.isNetworkConnected(activity)) {
             String url = editor.getUrl();
             if (editor == Editor.CUSTOM) {
-                url = Preference.getCustomLink(getContext());
+                url = Settings.getCustomLink(getContext());
             }
             showWebFragment(url, editor.toString());
         } else {
diff --git a/app/src/main/java/cc/calliope/mini/fragment/web/WebFragment.java b/app/src/main/java/cc/calliope/mini/fragment/web/WebFragment.java
index 9031136..fec05d1 100644
--- a/app/src/main/java/cc/calliope/mini/fragment/web/WebFragment.java
+++ b/app/src/main/java/cc/calliope/mini/fragment/web/WebFragment.java
@@ -10,8 +10,9 @@ import androidx.fragment.app.Fragment;
 
 import cc.calliope.mini.FlashingService;
 import cc.calliope.mini.R;
-import cc.calliope.mini.utils.Preference;
-import cc.calliope.mini.utils.StaticExtra;
+import cc.calliope.mini.activity.FlashingActivity;
+import cc.calliope.mini.utils.Settings;
+import cc.calliope.mini.utils.StaticExtras;
 import cc.calliope.mini.utils.FileUtils;
 import cc.calliope.mini.utils.Utils;
 import cc.calliope.mini.utils.Version;
@@ -307,17 +308,17 @@ public class WebFragment extends Fragment implements DownloadListener {
     }
 
     private void startDfuActivity(File file) {
-        boolean autoFlashing = Preference.isAutoFlashingEnable(getContext());
+        boolean autoFlashing = Settings.isAutoFlashingEnable(getContext());
         if (!autoFlashing) {
             return;
         }
 
-        //final Intent intent = new Intent(getActivity(), FlashingActivity.class);
+        final Intent intent = new Intent(getActivity(), FlashingActivity.class);
         //intent.putExtra(StaticExtra.EXTRA_FILE_PATH, file.getAbsolutePath());
-        //startActivity(intent);
+        startActivity(intent);
 
         Intent serviceIntent = new Intent(getActivity(), FlashingService.class);
-        serviceIntent.putExtra(StaticExtra.EXTRA_FILE_PATH, file.getAbsolutePath());
+        serviceIntent.putExtra(StaticExtras.EXTRA_FILE_PATH, file.getAbsolutePath());
         getActivity().startService(serviceIntent);
     }
 
diff --git a/app/src/main/java/cc/calliope/mini/popup/PopupAdapter.java b/app/src/main/java/cc/calliope/mini/popup/PopupAdapter.java
index 0b9336e..d1485df 100644
--- a/app/src/main/java/cc/calliope/mini/popup/PopupAdapter.java
+++ b/app/src/main/java/cc/calliope/mini/popup/PopupAdapter.java
@@ -62,8 +62,8 @@ public class PopupAdapter extends ArrayAdapter<PopupItem> {
             holder = (ViewHolder) view.getTag();
         }
 
-        holder.title.setText(popupItems.get(position).getTitleId());
-        holder.icon.setImageResource(popupItems.get(position).getIconId());
+        holder.title.setText(popupItems.get(position).titleId());
+        holder.icon.setImageResource(popupItems.get(position).iconId());
         return view;
     }
 }
\ No newline at end of file
diff --git a/app/src/main/java/cc/calliope/mini/popup/PopupItem.java b/app/src/main/java/cc/calliope/mini/popup/PopupItem.java
index f502c73..81fb1c9 100644
--- a/app/src/main/java/cc/calliope/mini/popup/PopupItem.java
+++ b/app/src/main/java/cc/calliope/mini/popup/PopupItem.java
@@ -1,19 +1,4 @@
 package cc.calliope.mini.popup;
 
-public class PopupItem {
-    private final int titleId;
-    private final int iconId;
-
-    public PopupItem(int titleId, int iconId) {
-        this.titleId = titleId;
-        this.iconId = iconId;
-    }
-
-    public int getTitleId() {
-        return titleId;
-    }
-
-    public int getIconId() {
-        return iconId;
-    }
+public record PopupItem(int titleId, int iconId) {
 }
diff --git a/app/src/main/java/cc/calliope/mini/service/DfuControlService.java b/app/src/main/java/cc/calliope/mini/service/DfuControlService.java
index 9d214dd..c68d44b 100644
--- a/app/src/main/java/cc/calliope/mini/service/DfuControlService.java
+++ b/app/src/main/java/cc/calliope/mini/service/DfuControlService.java
@@ -25,8 +25,8 @@ import java.util.UUID;
 import androidx.annotation.IntDef;
 import androidx.core.app.ActivityCompat;
 import androidx.localbroadcastmanager.content.LocalBroadcastManager;
-import cc.calliope.mini.App;
-import cc.calliope.mini.utils.StaticExtra;
+
+import cc.calliope.mini.utils.StaticExtras;
 import cc.calliope.mini.utils.Utils;
 import cc.calliope.mini.utils.Version;
 
@@ -49,7 +49,7 @@ public class DfuControlService extends Service {
     private static final int DELAY_TO_CLEAR_CACHE = 2000;
     public static final String BROADCAST_START = "cc.calliope.mini.DFUControlService.BROADCAST_START";
     public static final String BROADCAST_COMPLETED = "cc.calliope.mini.DFUControlService.BROADCAST_COMPLETE";
-    public static final String BROADCAST_FAILED = "cc.calliope.mini.DFUControlService.BROADCAST_FAILED";
+    public static final String BROADCAST_CONNECTION_FAILED = "cc.calliope.mini.DFUControlService.BROADCAST_FAILED";
     public static final String BROADCAST_ERROR = "cc.calliope.mini.DFUControlService.BROADCAST_ERROR";
     public static final String EXTRA_BOARD_VERSION = "cc.calliope.mini.DFUControlService.EXTRA_BOARD_VERSION";
     public static final String EXTRA_ERROR_CODE = "cc.calliope.mini.DFUControlService.EXTRA_ERROR_CODE";
@@ -79,9 +79,8 @@ public class DfuControlService extends Service {
     @Retention(RetentionPolicy.SOURCE)
     public @interface HardwareVersion {
     }
-
     private int boardVersion = UNIDENTIFIED;
-    private App app;
+    private record IntExtra(String name, int value){}
 
     private final BroadcastReceiver bondStateReceiver = new BroadcastReceiver() {
         @Override
@@ -144,7 +143,9 @@ public class DfuControlService extends Service {
             } else {
                 String message = getStringFromResource(GattStatus.get(status).getMessage());
                 gatt.disconnect();
-                sendError(status, message);
+                Utils.log(Log.ERROR, TAG, "Error: " + status + " " + message);
+                sendBroadcast(BROADCAST_CONNECTION_FAILED);
+//                sendError(status, message);
                 //stopService(gatt);
             }
         }
@@ -209,16 +210,11 @@ public class DfuControlService extends Service {
 
     @Override
     public int onStartCommand(Intent intent, int flags, int startId) {
-        Utils.log(Log.DEBUG, TAG, "Сервіс запущений.");
-
         registerReceiver(bondStateReceiver, new IntentFilter(ACTION_BOND_STATE_CHANGED));
 
-        deviceAddress = intent.getStringExtra(StaticExtra.DEVICE_ADDRESS);
+        deviceAddress = intent.getStringExtra(StaticExtras.DEVICE_ADDRESS);
         maxRetries = intent.getIntExtra(EXTRA_MAX_RETRIES_NUMBER, 2);
 
-        app = (App) getApplication();
-        app.setAppState(App.APP_STATE_CONNECTING);
-
         connect();
 
         return START_STICKY;
@@ -229,12 +225,7 @@ public class DfuControlService extends Service {
         super.onDestroy();
         unregisterReceiver(bondStateReceiver);
 
-        final Intent broadcast = new Intent(isComplete ? BROADCAST_COMPLETED : BROADCAST_FAILED);
-        broadcast.putExtra(EXTRA_BOARD_VERSION, boardVersion);
-        LocalBroadcastManager.getInstance(getApplicationContext()).sendBroadcast(broadcast);
-
-        app.setAppState(App.APP_STATE_STANDBY);
-        Utils.log(Log.DEBUG, TAG, "Сервіс зупинений.");
+        sendBroadcast(isComplete ? BROADCAST_COMPLETED : BROADCAST_CONNECTION_FAILED, new IntExtra(EXTRA_BOARD_VERSION, boardVersion));
     }
 
     private void connect() {
@@ -245,12 +236,11 @@ public class DfuControlService extends Service {
         }
         Utils.log(Log.DEBUG, TAG, "Connecting to the device...");
 
-        final Intent broadcast = new Intent(BROADCAST_START);
-        LocalBroadcastManager.getInstance(getApplicationContext()).sendBroadcast(broadcast);
+        sendBroadcast(BROADCAST_START);
 
         BluetoothAdapter adapter = BluetoothAdapter.getDefaultAdapter();
 
-        if(!adapter.isEnabled()){
+        if (!adapter.isEnabled()) {
             return;
         }
 
@@ -365,6 +355,20 @@ public class DfuControlService extends Service {
         Utils.log(Log.ERROR, TAG, message);
     }
 
+    private void sendBroadcast(String action) {
+        sendBroadcast(action, null);
+    }
+
+    private void sendBroadcast(String action, IntExtra... extras) {
+        final Intent broadcast = new Intent(action);
+        if(extras != null){
+            for(IntExtra extra : extras){
+                broadcast.putExtra(extra.name, extra.value);
+            }
+        }
+        LocalBroadcastManager.getInstance(getApplicationContext()).sendBroadcast(broadcast);
+    }
+
     private String getStringFromResource(int resId) {
         try {
             return getResources().getString(resId);
diff --git a/app/src/main/java/cc/calliope/mini/service/DfuService.java b/app/src/main/java/cc/calliope/mini/service/DfuService.java
index 82d9e8f..faf6785 100644
--- a/app/src/main/java/cc/calliope/mini/service/DfuService.java
+++ b/app/src/main/java/cc/calliope/mini/service/DfuService.java
@@ -6,7 +6,7 @@ import android.content.Intent;
 import androidx.annotation.NonNull;
 import androidx.annotation.Nullable;
 import androidx.core.app.NotificationCompat;
-import cc.calliope.mini.App;
+
 import cc.calliope.mini.BuildConfig;
 import cc.calliope.mini.activity.NotificationActivity;
 import cc.calliope.mini.utils.Version;
@@ -14,8 +14,6 @@ import no.nordicsemi.android.dfu.DfuBaseService;
 import no.nordicsemi.android.dfu.DfuServiceInitiator;
 
 public class DfuService extends DfuBaseService{
-    private App app;
-
     @Override
     protected Class<? extends Activity> getNotificationTarget() {
         return NotificationActivity.class;
@@ -28,14 +26,11 @@ public class DfuService extends DfuBaseService{
             DfuServiceInitiator.createDfuNotificationChannel(getApplicationContext());
         }
         super.onCreate();
-        app = (App) getApplication();
-        app.setAppState(App.APP_STATE_FLASHING);
     }
 
     @Override
     public void onDestroy() {
         super.onDestroy();
-        app.setAppState(App.APP_STATE_STANDBY);
     }
 
     @Override
diff --git a/app/src/main/java/cc/calliope/mini/service/PartialFlashingService.java b/app/src/main/java/cc/calliope/mini/service/PartialFlashingService.java
index 61ab39c..adfd406 100644
--- a/app/src/main/java/cc/calliope/mini/service/PartialFlashingService.java
+++ b/app/src/main/java/cc/calliope/mini/service/PartialFlashingService.java
@@ -2,10 +2,7 @@ package cc.calliope.mini.service;
 
 import org.microbit.android.partialflashing.PartialFlashingBaseService;
 
-import cc.calliope.mini.App;
-
 public class PartialFlashingService extends PartialFlashingBaseService {
-    private App app;
 
 //    @Override
 //    protected Class<? extends Activity> getNotificationTarget() {
@@ -15,13 +12,10 @@ public class PartialFlashingService extends PartialFlashingBaseService {
     @Override
     public void onCreate() {
         super.onCreate();
-        app = (App) getApplication();
-        app.setAppState(App.APP_STATE_FLASHING);
     }
 
     @Override
     public void onDestroy() {
         super.onDestroy();
-        app.setAppState(App.APP_STATE_STANDBY);
     }
 }
\ No newline at end of file
diff --git a/app/src/main/java/cc/calliope/mini/utils/FileUtils.java b/app/src/main/java/cc/calliope/mini/utils/FileUtils.java
index f764eb7..fa7fd54 100644
--- a/app/src/main/java/cc/calliope/mini/utils/FileUtils.java
+++ b/app/src/main/java/cc/calliope/mini/utils/FileUtils.java
@@ -24,7 +24,7 @@ public class FileUtils {
 
         File file = new File(dir.getAbsolutePath() + File.separator + filename + FILE_EXTENSION);
 
-        if (!Preference.isRenameFiles(context) && file.exists()) {
+        if (!Settings.isRenameFiles(context) && file.exists()) {
             file.delete();
         } else {
             int i = 1;
diff --git a/app/src/main/java/cc/calliope/mini/utils/Preference.java b/app/src/main/java/cc/calliope/mini/utils/Preference.java
index c0c1982..3c396a1 100644
--- a/app/src/main/java/cc/calliope/mini/utils/Preference.java
+++ b/app/src/main/java/cc/calliope/mini/utils/Preference.java
@@ -8,10 +8,6 @@ import androidx.preference.PreferenceManager;
 import cc.calliope.mini.fragment.editors.Editor;
 
 public class Preference {
-    private static final String PREF_KEY_ENABLE_AUTO_FLASHING = "pref_key_enable_auto_flashing";
-    private static final String PREF_KEY_RENAME_FILES = "pref_key_rename_files";
-    private static final String PREF_KEY_ENABLE_PARTIAL_FLASHING = "pref_key_enable_partial_flashing";
-    private static final String PREF_KEY_CUSTOM_LINK = "pref_key_custom_link";
 
     public static String getString(Context context, String key, String defValue) {
         SharedPreferences sharedPreferences = PreferenceManager.getDefaultSharedPreferences(context);
@@ -27,20 +23,4 @@ public class Preference {
         SharedPreferences sharedPreferences = PreferenceManager.getDefaultSharedPreferences(context);
         sharedPreferences.edit().putBoolean(key, value).apply();
     }
-
-    public static boolean isAutoFlashingEnable(Context context){
-        return getBoolean(context, Preference.PREF_KEY_ENABLE_AUTO_FLASHING, false);
-    }
-
-    public static boolean isPartialFlashingEnable(Context context){
-        return getBoolean(context, Preference.PREF_KEY_ENABLE_PARTIAL_FLASHING, false);
-    }
-
-    public static boolean isRenameFiles(Context context){
-        return getBoolean(context, Preference.PREF_KEY_RENAME_FILES, false);
-    }
-
-    public static String getCustomLink(Context context){
-        return getString(context, PREF_KEY_CUSTOM_LINK, Editor.CUSTOM.getUrl());
-    }
 }
diff --git a/app/src/main/java/cc/calliope/mini/utils/Settings.java b/app/src/main/java/cc/calliope/mini/utils/Settings.java
new file mode 100644
index 0000000..c727ff4
--- /dev/null
+++ b/app/src/main/java/cc/calliope/mini/utils/Settings.java
@@ -0,0 +1,28 @@
+package cc.calliope.mini.utils;
+
+import android.content.Context;
+
+import cc.calliope.mini.fragment.editors.Editor;
+
+public class Settings extends Preference{
+    private static final String PREF_KEY_ENABLE_AUTO_FLASHING = "pref_key_enable_auto_flashing";
+    private static final String PREF_KEY_RENAME_FILES = "pref_key_rename_files";
+    private static final String PREF_KEY_ENABLE_PARTIAL_FLASHING = "pref_key_enable_partial_flashing";
+    private static final String PREF_KEY_CUSTOM_LINK = "pref_key_custom_link";
+
+    public static boolean isAutoFlashingEnable(Context context){
+        return getBoolean(context, PREF_KEY_ENABLE_AUTO_FLASHING, false);
+    }
+
+    public static boolean isPartialFlashingEnable(Context context){
+        return getBoolean(context, PREF_KEY_ENABLE_PARTIAL_FLASHING, false);
+    }
+
+    public static boolean isRenameFiles(Context context){
+        return getBoolean(context, PREF_KEY_RENAME_FILES, false);
+    }
+
+    public static String getCustomLink(Context context){
+        return getString(context, PREF_KEY_CUSTOM_LINK, Editor.CUSTOM.getUrl());
+    }
+}
diff --git a/app/src/main/java/cc/calliope/mini/utils/StaticExtra.java b/app/src/main/java/cc/calliope/mini/utils/StaticExtras.java
similarity index 92%
rename from app/src/main/java/cc/calliope/mini/utils/StaticExtra.java
rename to app/src/main/java/cc/calliope/mini/utils/StaticExtras.java
index d59f8ff..7c5d322 100644
--- a/app/src/main/java/cc/calliope/mini/utils/StaticExtra.java
+++ b/app/src/main/java/cc/calliope/mini/utils/StaticExtras.java
@@ -1,6 +1,6 @@
 package cc.calliope.mini.utils;
 
-public class StaticExtra {
+public class StaticExtras {
     public static final String EXTRA_DEVICE = "cc.calliope.mini.EXTRA_DEVICE";
     public static final String EXTRA_FILE_PATH = "cc.calliope.mini.EXTRA_FILE_PATH";
     public static final String DEVICE_ADDRESS = "cc.calliope.mini.DEVICE_ADDRESS";
diff --git a/app/src/main/java/cc/calliope/mini/utils/Utils.java b/app/src/main/java/cc/calliope/mini/utils/Utils.java
index bfd8518..aa494e4 100644
--- a/app/src/main/java/cc/calliope/mini/utils/Utils.java
+++ b/app/src/main/java/cc/calliope/mini/utils/Utils.java
@@ -2,21 +2,30 @@ package cc.calliope.mini.utils;
 
 import android.bluetooth.BluetoothAdapter;
 import android.content.Context;
+import android.graphics.Point;
 import android.location.LocationManager;
 import android.net.ConnectivityManager;
 import android.text.format.DateFormat;
 import android.util.DisplayMetrics;
 import android.util.Log;
+import android.view.Display;
 import android.view.Gravity;
+import android.view.LayoutInflater;
 import android.view.View;
+import android.view.ViewGroup;
+import android.view.WindowManager;
 import android.widget.FrameLayout;
 import android.widget.LinearLayout;
+import android.widget.TextView;
+import android.widget.Toast;
 
 import com.google.android.material.snackbar.Snackbar;
 
 import java.io.IOException;
 import java.util.Date;
 
+import cc.calliope.mini.R;
+
 public class Utils {
     private static final String TAG = "UTILS";
 
@@ -117,7 +126,11 @@ public class Utils {
         Log.println(priority, TAG, "### " + android.os.Process.myTid() + " # " + message);
     }
 
+    public static void log(int priority, String TAG, String message, Exception e) {
+        log(priority, TAG, message + " " + e.getMessage());
+    }
+
     public static void log(String TAG, String message) {
-        log(Log.VERBOSE, TAG, message);
+        log(Log.INFO, TAG, message);
     }
 }
diff --git a/app/src/main/java/cc/calliope/mini/utils/irmHexUtils.java b/app/src/main/java/cc/calliope/mini/utils/irmHexUtils.java
new file mode 100644
index 0000000..dce340c
--- /dev/null
+++ b/app/src/main/java/cc/calliope/mini/utils/irmHexUtils.java
@@ -0,0 +1,450 @@
+package cc.calliope.mini.utils;
+
+
+/**
+ *  A Class to manipulate micro:bit hex files
+ *
+ *  (c) 2017 - 2024, Micro:bit Educational Foundation and contributors
+ *
+ *  SPDX-License-Identifier: MIT
+ *
+ */
+
+public class irmHexUtils {
+    private final static String TAG = "irmHexUtils";
+    public final static int MINI_V1 = 1;
+    public final static int MINI_V2 = 2;
+
+    // hex file data types for micro:bit v1.X
+    public final static int irmHexBlock00 = 0x9900;
+    public final static int irmHexBlock01 = 0x9901;  // hexBlock parameter to use when the connected micro:bit is v1.X
+    public final static int irmHexBlock02 = 0x9902;
+    // hex file data types for micro:bit v2.X
+    public final static int irmHexBlock03 = 0x9903;  // hexBlock parameter to use when the connected micro:bit is v2.X
+    public final static int irmHexBlock04 = 0x9904;
+    public int scanHexSize;
+    public long scanAddrMin;
+    public long scanAddrNext;
+    public int lineNext;
+    public int lineHidx;
+    public int lineCount;
+    public long lineAddr;
+    public int lineType;
+    public int lineBlockType;
+    public long lastBaseAddr;
+    public long resultAddrMin;
+    public long resultAddrNext;
+    public int resultDataSize;
+    public byte [] resultHex;
+
+    public void scanInit() {
+        scanHexSize = 0;
+        lineNext = 0;
+        lineHidx = 0;
+        scanAddrMin = 0;
+        scanAddrNext = Integer.MAX_VALUE;
+        lineCount = 0;
+        lineAddr = 0;
+        lineType = 0;
+        lineBlockType = 0;
+        lastBaseAddr = 0;
+        resultAddrMin = Long.MAX_VALUE;
+        resultAddrNext = 0;
+    }
+
+    public static int hextodigit( final byte c) {
+        if ( c >= '0' && c <= '9') {
+            return c - '0';
+        }
+        if ( c >= 'A' && c <= 'F') {
+            return 10 + c - 'A';
+        }
+        return -1;
+    }
+
+
+    public static int hextobyte( final byte [] hex, final int idx)
+    {
+        int hi = hextodigit( hex[ idx]);
+        int lo = hextodigit( hex[ idx + 1]);
+        if ( hi < 0 || lo < 0)
+            return -1;
+        return 16 * hi + lo;
+    }
+
+    public static int hextoaddr( final byte [] hex, final int idx) {
+        int hi = hextobyte( hex, idx);
+        int lo = hextobyte( hex, idx + 2);
+        if ( hi < 0 || lo < 0)
+            return -1;
+        return hi * 256 + lo;
+    }
+
+    public boolean parseLine( final byte [] hex)
+    {
+        if ( lineNext > scanHexSize - 3)
+            return false;
+
+        lineHidx = lineNext;
+
+        if ( hex[ lineHidx] != ':')
+            return false;
+
+        lineCount = hextobyte( hex, lineHidx + 1);
+        if ( lineCount < 0)
+            return false;
+
+        int bytes  = 5 + lineCount;
+        int digits = bytes * 2;
+        int next   = digits + 1;  // +1 for colon
+
+        while ( lineHidx + next < scanHexSize)
+        {
+            byte b = hex[ lineHidx + next];
+            if ( b == '\r')
+                next++;
+            else if ( b == '\n')
+                next++;
+            else if ( b == ':')
+                break;
+            else
+                return false;
+        }
+
+        lineNext += next; // bump lineNext to next line or eof
+
+        lineType = hextobyte( hex,  lineHidx + 7);
+        if ( lineType < 0)
+            return false;
+
+        switch ( lineType) {
+            case 0:                 // Data
+            case 0x0D:
+                lineAddr = hextoaddr( hex, lineHidx + 3);
+                if ( lineAddr < 0)
+                    return false;
+                break;
+
+            case 0x0A: {               // Extended Segment Address
+                if (lineCount != 4)
+                    return false;
+                int hi = hextobyte(hex, lineHidx + 9);
+                int lo = hextobyte(hex, lineHidx + 11);
+                lineBlockType = hi * 256 + lo;
+                break;
+            }
+            case 2: {               // Extended Segment Address
+                if (lineCount != 2)
+                    return false;
+                int hi = hextobyte(hex, lineHidx + 9);
+                int lo = hextobyte(hex, lineHidx + 11);
+                lastBaseAddr = (long) hi * (long) 0x1000 + (long) lo * (long) 0x10;
+                break;
+            }
+            case 3:                 // Start Segment Address
+                break;
+
+            case 4: {               // Extended Linear Address
+                if (lineCount != 2)
+                    return false;
+                int hi = hextobyte(hex, lineHidx + 9);
+                int lo = hextobyte(hex, lineHidx + 11);
+                lastBaseAddr = (long) hi * (long) 0x1000000 + (long) lo * (long) 0x10000;
+                break;
+            }
+            case 5:                 // Start Linear Address
+                break;
+        }
+
+        return true;
+    }
+
+    public static int calcSum( final byte [] hex, final int hexIdx) {
+        int count = hextobyte( hex, hexIdx + 1);
+        if ( count < 0)
+            return -1;
+        int bytes  = 5 + count - 1;
+
+        int b;
+        long sum = 0;
+
+        for ( int i = 0; i < bytes; i++)
+        {
+            b = hextobyte( hex, hexIdx + 1 + i * 2);
+            if ( b < 0)
+                return -1;
+            sum += b;
+        }
+
+        b = (int) (sum % 256);
+        return b;
+    }
+
+    public static int lineCheck( final byte [] hex, final int hexIdx) {
+        int count = hextobyte( hex, hexIdx + 1);
+        if ( count < 0)
+            return -1;
+        return hextobyte( hex, hexIdx + 9 + count * 2);
+    }
+
+    public static boolean lineData( final byte [] hex, final int hexIdx, byte [] data, final int idx) {
+        int count = hextobyte( hex, hexIdx + 1);
+        if ( count < 0)
+            return false;
+        for (int i = 0; i < count; i++) {
+            int d = hextobyte(hex, hexIdx + 9 + 2 * i);
+            if (d < 0)
+                return false;
+            data[ idx + i] = (byte) d;
+        }
+        return true;
+    }
+
+    public static boolean hexBlockIsV1( final int hexBlock)
+    {
+        switch ( hexBlock)
+        {
+            case irmHexBlock00:
+            case irmHexBlock01:
+            case irmHexBlock02:
+                return true;
+
+            case irmHexBlock03:
+            case irmHexBlock04:
+                break;
+
+            default:
+                break;
+        }
+
+        return false;
+    }
+
+
+    public static boolean hexBlockIsV2( final int hexBlock)
+    {
+        switch ( hexBlock)
+        {
+            case irmHexBlock00:
+            case irmHexBlock01:
+            case irmHexBlock02:
+                break;
+
+            case irmHexBlock03:
+            case irmHexBlock04:
+                return true;
+
+            default:
+                break;
+        }
+
+        return false;
+    }
+
+
+    public static boolean hexBlocksMatch( final int blockType, final int hexBlock)
+    {
+        if ( hexBlockIsV1( blockType))
+            return hexBlockIsV1( hexBlock);
+
+        if ( hexBlockIsV2( blockType))
+            return hexBlockIsV2( hexBlock);
+
+        return false;
+    }
+
+    // range of addresses allowed in application region
+    // return [ min, next, page]
+    public static long[] hexBlockToAppRegion( int hexBlock)
+    {
+        long min = 0;
+        long next = 0;
+        long page = 0;
+
+        switch ( hexBlock)
+        {
+            case irmHexBlock00:
+            case irmHexBlock01:
+            case irmHexBlock02:
+            {
+                min  = 0x18000;  // min and max addresses allowed in FOTA file
+                next = 0x3C000;
+                page = 0x400;
+                break;
+            }
+            case irmHexBlock03:
+            case irmHexBlock04:
+            {
+                min  = 0x1C000;
+                next = 0x77000;
+                page = 0x1000;
+                break;
+            }
+            default:
+                break;
+        }
+
+        return new long [] { min, next, page};
+    }
+
+    public static boolean bytesmatch( final byte[] b0, final int i0, final byte[] b1, final int i1, final int len) {
+        for (int i = 0; i <= len; i++) {
+            if ( b0[ i0 + i] != b1[ i1 + i]) {
+                return false;
+            }
+        }
+        return true;
+    }
+
+    // Extract data records (0x00, 0x0D) + EOF for specific hexBlock
+    // Fat file is a sequence of ELA, 0x0A, other records, ELA, 0x0A, other records, ... ELA, 0x0A, other records, EOF
+    // 0x0C records, 0x0B records or newlines are used to make each (ELA, 0xA, other) block 512 bytes
+    // return size on success, zero on failure
+    public int scanForDataHex( byte [] datahex, final int hexBlock, final byte [] universalhex, final int universalsize) {
+        scanHexSize = universalsize;
+        resultDataSize = 0;
+
+        int lastType = -1;    // Type of last record added
+        int lastSize = -1;    // index of last record added
+        int hexSize = 0;
+        int hidxELA0 = -1;     // last ELA stored
+        int sizeELA0 = 0;
+
+        boolean dataWanted = false;  // block type matches hexBlock
+        boolean isUniversal = false;
+
+        for (lineNext = 0; lineNext < scanHexSize; /*empty*/) {
+            if (!parseLine( universalhex))
+                return 0;
+
+            int rlen = lineNext - lineHidx;
+            if ( rlen == 0)
+                continue;
+
+            switch ( lineType) {
+                case 0:                 // Data
+                case 0x0D:
+                    if ( !isUniversal || dataWanted) {
+                        long fullAddr = lastBaseAddr + lineAddr;
+                        if ( fullAddr + lineCount > scanAddrMin && fullAddr < scanAddrNext) {
+                            // TODO support part lines?
+                            if ( resultAddrMin > fullAddr) {
+                                resultAddrMin = fullAddr;
+                            }
+                            if ( resultAddrNext < fullAddr + lineCount) {
+                                resultAddrNext = fullAddr + lineCount;
+                            }
+                            if (datahex != null) {
+                                System.arraycopy(universalhex, lineHidx, datahex, hexSize, rlen);
+                                datahex[hexSize + 7] = '0';
+                                datahex[hexSize + 8] = '0';
+                            }
+                            lastSize = hexSize;
+                            lastType = lineType;
+                            hexSize += rlen;
+                        }
+                    }
+                    break;
+
+                case 1:                 //EOF
+                case 2:                 // Extended Segment Address
+                    if ( datahex != null)
+                        System.arraycopy( universalhex, lineHidx, datahex, hexSize, rlen);
+                    lastSize = hexSize;
+                    lastType = lineType;
+                    hexSize += rlen;
+                    break;
+
+                case 3:                 // Start Segment Address
+                    break;
+
+                case 4:                 // Extended Linear Address record
+                    // Add if the address has changed
+                    // If the last record added is ELA, overwrite it
+                    if (sizeELA0 != rlen || !bytesmatch(universalhex, hidxELA0, universalhex, lineHidx, rlen)) {
+                        hidxELA0 = lineHidx;
+                        sizeELA0 = rlen;
+                        if (lastType == lineType)
+                            hexSize = lastSize;
+                        if ( datahex != null)
+                            System.arraycopy( universalhex, hidxELA0, datahex, hexSize, sizeELA0);
+                        lastSize = hexSize;
+                        lastType = lineType;
+                        hexSize += sizeELA0;
+                    }
+                    break;
+
+                case 5:                 // Start Linear Address
+                    break;
+
+                case 0x0A:              // Start block record
+                {
+                    if ( lineCount < 2)
+                        return 0;
+
+                    if ( sizeELA0 == 0)     // must have been at least an ELA record
+                        return 0;
+
+                    isUniversal = true;
+                    dataWanted = hexBlocksMatch(lineBlockType, hexBlock);
+                    break;
+                }
+
+                case 0x0B:              // End block
+                    break;
+
+                case 0x0C:              // End block
+                    break;
+
+                default:
+                    break;
+            }
+        }
+
+        long range = resultAddrNext > resultAddrMin ? resultAddrNext - resultAddrMin : 0;
+
+        resultDataSize = (int) range;
+
+        if ( resultDataSize == 0)
+            hexSize = 0;       // no data for specified hexBlock
+
+        return hexSize;
+    }
+
+    // Scan for single target data hex from universal hex
+    //
+    // return false on failure
+    public boolean scanForDataHex( final byte [] universalHex, final int hexBlock) {
+        resultHex = null;
+
+        try {
+            long hexSize = scanForDataHex( null, hexBlock, universalHex, universalHex.length);
+            if ( hexSize == 0)
+                return false;
+
+            if (hexSize > 0) {
+                resultHex = new byte[ (int) hexSize];
+                if (resultHex == null)
+                    return false;
+                hexSize = scanForDataHex( resultHex, hexBlock, universalHex, universalHex.length);
+                if ( hexSize == 0)
+                    return false;
+            }
+        } catch (Exception e) {
+            return false;
+        }
+        return true;
+    }
+
+    // Extract single target application hex from universal hex
+    //
+    // return false on failure
+    // generated hex is in resultHex
+    public boolean universalHexToApplicationHex( final byte [] universalHex, final int hexBlock) {
+        scanInit();
+        long [] mnp = hexBlockToAppRegion( hexBlock);
+        scanAddrMin = mnp[0];
+        scanAddrNext = mnp[1];
+        return scanForDataHex( universalHex, hexBlock);
+    }
+};
\ No newline at end of file
diff --git a/app/src/main/java/cc/calliope/mini/views/MovableFloatingActionButton.java b/app/src/main/java/cc/calliope/mini/views/MovableFloatingActionButton.java
index 172377f..a7e3830 100644
--- a/app/src/main/java/cc/calliope/mini/views/MovableFloatingActionButton.java
+++ b/app/src/main/java/cc/calliope/mini/views/MovableFloatingActionButton.java
@@ -1,6 +1,5 @@
 package cc.calliope.mini.views;
 
-import android.bluetooth.BluetoothDevice;
 import android.content.Context;
 import android.graphics.Canvas;
 import android.graphics.Color;
@@ -14,13 +13,10 @@ import android.view.ViewGroup;
 
 import com.google.android.material.floatingactionbutton.FloatingActionButton;
 
-import androidx.annotation.NonNull;
 
-import cc.calliope.mini.ProgressCollector;
-import cc.calliope.mini.ProgressListener;
 import cc.calliope.mini.utils.Utils;
 
-public class MovableFloatingActionButton extends FloatingActionButton implements View.OnTouchListener, ProgressListener {
+public class MovableFloatingActionButton extends FloatingActionButton implements View.OnTouchListener{
     private final static float CLICK_DRAG_TOLERANCE = 10; // Often, there will be a slight, unintentional, drag when the user taps the FAB, so we need to account for this.
     private float downRawX, downRawY;
     private float dX, dY;
@@ -29,29 +25,24 @@ public class MovableFloatingActionButton extends FloatingActionButton implements
 
     private int actionBarSize;
     private int progress = 0;
-    private Context context;
-    private ProgressCollector progressCollector;
-//    private boolean flashing;
 
     public MovableFloatingActionButton(Context context) {
         super(context);
-        init(context);
+        init();
     }
 
     public MovableFloatingActionButton(Context context, AttributeSet attrs) {
         super(context, attrs);
-        init(context);
+        init();
     }
 
     public MovableFloatingActionButton(Context context, AttributeSet attrs, int defStyleAttr) {
         super(context, attrs, defStyleAttr);
-        init(context);
+        init();
     }
 
-    private void init(Context context) {
-        this.context = context;
-        progressCollector = new ProgressCollector(context);
-        progressCollector.registerProgressListener(this);
+    private void init() {
+
         setOnTouchListener(this);
         paint = new Paint();
         rectF = new RectF();
@@ -68,13 +59,11 @@ public class MovableFloatingActionButton extends FloatingActionButton implements
     protected void onAttachedToWindow() {
         super.onAttachedToWindow();
 //        setProgress(0);
-        progressCollector.registerReceivers();
     }
 
     @Override
     protected void onDetachedFromWindow() {
         super.onDetachedFromWindow();
-        progressCollector.unregisterReceivers();
     }
 
     @Override
@@ -136,62 +125,7 @@ public class MovableFloatingActionButton extends FloatingActionButton implements
 
     }
 
-    @Override
-    public void onDeviceConnecting() {
-        setProgress(0);
-    }
-
-    @Override
-    public void onProcessStarting() {
-        setProgress(0);
-    }
-
-    @Override
-    public void onEnablingDfuMode() {
-        setProgress(0);
-    }
-
-    @Override
-    public void onFirmwareValidating() {
-        setProgress(0);
-    }
-
-    @Override
-    public void onDeviceDisconnecting() {
-        setProgress(0);
-    }
-
-    @Override
-    public void onCompleted() {
-        setProgress(0);
-    }
 
-    @Override
-    public void onAborted() {
-        setProgress(0);
-    }
-
-    @Override
-    public void onProgressChanged(int percent) {
-        setProgress(percent);
-    }
-
-    @Override
-    public void onBonding(@NonNull BluetoothDevice device, int bondState, int previousBondState) {
-    }
-
-    @Override
-    public void onAttemptDfuMode() {
-    }
-
-    @Override
-    public void onStartDfuService(int hardwareVersion) {
-    }
-
-    @Override
-    public void onError(int code, String message) {
-        setProgress(0);
-    }
 
     public void setProgress(int percent) {
         this.progress = Math.max(percent, 0);
