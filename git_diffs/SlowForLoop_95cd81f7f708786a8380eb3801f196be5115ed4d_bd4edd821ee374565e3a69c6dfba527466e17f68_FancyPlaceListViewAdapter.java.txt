diff --git a/app/src/main/java/com/gabm/fancyplaces/functional/FancyPlaceListViewAdapter.java b/app/src/main/java/com/gabm/fancyplaces/functional/FancyPlacesArrayAdapter.java
similarity index 50%
rename from app/src/main/java/com/gabm/fancyplaces/functional/FancyPlaceListViewAdapter.java
rename to app/src/main/java/com/gabm/fancyplaces/functional/FancyPlacesArrayAdapter.java
index e137b55..e39f3b8 100644
--- a/app/src/main/java/com/gabm/fancyplaces/functional/FancyPlaceListViewAdapter.java
+++ b/app/src/main/java/com/gabm/fancyplaces/functional/FancyPlacesArrayAdapter.java
@@ -27,59 +27,90 @@ import android.widget.ArrayAdapter;
 import com.gabm.fancyplaces.R;
 import com.gabm.fancyplaces.data.FancyPlace;
 import com.gabm.fancyplaces.ui.ListViewItem;
+import com.gabm.fancyplaces.ui.ListViewItemHolder;
 
 import java.util.ArrayList;
+import java.util.HashMap;
 import java.util.List;
+import java.util.Map;
 
 /**
  * Created by gabm on 15/05/15.
  */
-public class FancyPlaceListViewAdapter extends ArrayAdapter<FancyPlace> implements IOnListModeChangeListener {
+public class FancyPlacesArrayAdapter extends ArrayAdapter<FancyPlace> implements IOnListModeChangeListener {
 
-    private List<ListViewItem> listViewItems = new ArrayList<>();
+    private HashMap<FancyPlace, ListViewItem> listViewItems = new HashMap<>();
 
-    public FancyPlaceListViewAdapter(Context context, int resourceId, List<FancyPlace> items) {
+    public FancyPlacesArrayAdapter(Context context, int resourceId, List<FancyPlace> items) {
         super(context, resourceId, items);
     }
 
+    @Override
+    public void remove(FancyPlace object) {
+        listViewItems.remove(object);
+        super.remove(object);
+    }
+
+    public List<FancyPlace> getSelectedFancyPlaces() {
+        ArrayList<FancyPlace> resultList = new ArrayList<>();
+
+        for (Map.Entry<FancyPlace, ListViewItem> entry : listViewItems.entrySet()) {
+            if (entry.getValue().isSelected())
+                resultList.add(entry.getKey());
+        }
+
+        return resultList;
+    }
+
+
     public View getView(final int position, View convertView, ViewGroup parent) {
         FancyPlace fancyPlace = getItem(position);
 
+        LayoutInflater mInflater = (LayoutInflater)getContext().getSystemService(Activity.LAYOUT_INFLATER_SERVICE);
+        ListViewItemHolder holder = null;
         ListViewItem item = null;
 
-        LayoutInflater mInflater = (LayoutInflater)getContext().getSystemService(Activity.LAYOUT_INFLATER_SERVICE);
-        if (convertView == null) {
+        // if holder exists: re-use!
+        if (convertView != null) {
+            holder = (ListViewItemHolder) convertView.getTag();
+        } else {
             convertView = mInflater.inflate(R.layout.list_item_fancy_place, null);
-            item = new ListViewItem(getContext(), convertView);
-
-            convertView.setTag(item);
-        } else
-            item = (ListViewItem) convertView.getTag();
+            holder = new ListViewItemHolder(convertView);
+            convertView.setTag(holder);
+        }
 
+        // if listviewitem exists, re-use!
+        if (listViewItems.containsKey(fancyPlace)) {
+            item = listViewItems.get(fancyPlace);
+            item.setHolder(holder);
+        } else {
+            item = new ListViewItem(getContext(), holder);
+            listViewItems.put(fancyPlace, item);
+        }
 
         item.setFancyPlace(fancyPlace);
 
-        listViewItems.add(item);
-
         return convertView;
     }
 
     public void toggleSelected(int i)
     {
-        listViewItems.get(i).toggleAndAnimateSelected();
+        listViewItems.get(getItem(i)).toggleAndAnimateSelected();
     }
 
     @Override
     public void onListModeChange(int newMode) {
         if (newMode == MODE_NORMAL)
         {
-            for (int i=0; i<listViewItems.size(); i++)
-                listViewItems.get(i).setSelectable(false);
+            for (Map.Entry<FancyPlace, ListViewItem> entry : listViewItems.entrySet()) {
+                entry.getValue().setSelectable(false);
+            }
 
         } else if (newMode == MODE_MULTI_SELECT)
         {
-            for (int i=0; i<listViewItems.size(); i++)
-                listViewItems.get(i).setSelectable(true);
+            for (Map.Entry<FancyPlace, ListViewItem> entry : listViewItems.entrySet()) {
+                entry.getValue().setSelectable(true);
+            }
         }
     }
 }
\ No newline at end of file
diff --git a/app/src/main/java/com/gabm/fancyplaces/functional/ImageFileLoaderTask.java b/app/src/main/java/com/gabm/fancyplaces/functional/ImageFileLoaderTask.java
index 1fca176..1fbe323 100644
--- a/app/src/main/java/com/gabm/fancyplaces/functional/ImageFileLoaderTask.java
+++ b/app/src/main/java/com/gabm/fancyplaces/functional/ImageFileLoaderTask.java
@@ -19,26 +19,17 @@ package com.gabm.fancyplaces.functional;
 
 import android.graphics.Bitmap;
 import android.os.AsyncTask;
-import android.widget.ImageView;
 
 import com.gabm.fancyplaces.data.ImageFile;
 
-import java.lang.ref.WeakReference;
-
 /**
  * Created by gabm on 20/05/15.
  */
 public class ImageFileLoaderTask extends AsyncTask<ImageFile, Void, Bitmap> {
-    private final WeakReference<ImageView> imageViewReference;
     private OnImageLoaderCompletedListener onImageLoaderCompletedListener = null;
 
-    public interface OnImageLoaderCompletedListener {
-        void onImageLoaderCompleted(Bitmap bitmap);
-    }
-
-    public ImageFileLoaderTask(ImageView imageView, OnImageLoaderCompletedListener imageLoaderCompletedListener) {
+    public ImageFileLoaderTask(OnImageLoaderCompletedListener imageLoaderCompletedListener) {
         // Use a WeakReference to ensure the ImageView can be garbage collected
-        imageViewReference = new WeakReference<>(imageView);
         onImageLoaderCompletedListener = imageLoaderCompletedListener;
     }
 
@@ -51,15 +42,14 @@ public class ImageFileLoaderTask extends AsyncTask<ImageFile, Void, Bitmap> {
     // Once complete, see if ImageView is still around and set bitmap.
     @Override
     protected void onPostExecute(Bitmap bitmap) {
-        if (imageViewReference != null && bitmap != null) {
-            final ImageView imageView = imageViewReference.get();
-
-            if (imageView != null) {
-                imageView.setImageBitmap(bitmap);
-            }
+        if (bitmap != null) {
 
             if (onImageLoaderCompletedListener != null)
                 onImageLoaderCompletedListener.onImageLoaderCompleted(bitmap);
         }
     }
+
+    public interface OnImageLoaderCompletedListener {
+        void onImageLoaderCompleted(Bitmap bitmap);
+    }
 }
diff --git a/app/src/main/java/com/gabm/fancyplaces/ui/FPListView.java b/app/src/main/java/com/gabm/fancyplaces/ui/FPListView.java
index 01f3312..26b0e44 100644
--- a/app/src/main/java/com/gabm/fancyplaces/ui/FPListView.java
+++ b/app/src/main/java/com/gabm/fancyplaces/ui/FPListView.java
@@ -21,10 +21,7 @@ import android.app.Activity;
 import android.content.Context;
 import android.os.Bundle;
 import android.support.annotation.Nullable;
-import android.view.ContextMenu;
 import android.view.LayoutInflater;
-import android.view.Menu;
-import android.view.MenuItem;
 import android.view.View;
 import android.view.ViewGroup;
 import android.widget.AdapterView;
@@ -35,6 +32,9 @@ import com.gabm.fancyplaces.functional.IOnListModeChangeListener;
 import com.gabm.fancyplaces.functional.OnFancyPlaceSelectedListener;
 import com.melnykov.fab.FloatingActionButton;
 
+import java.util.ArrayList;
+import java.util.List;
+
 /**
  * Created by gabm on 15/05/15.
  */
@@ -43,7 +43,7 @@ public class FPListView extends TabItem {
     private OnFancyPlaceSelectedListener fancyPlaceSelectedCallback = null;
     private ListView fancyPlacesList = null;
     private MainWindow parent = null;
-    private IOnListModeChangeListener onListModeChangeListener = null;
+    private List<IOnListModeChangeListener> onListModeChangeListeners = new ArrayList<>();
 
 
 
@@ -71,15 +71,12 @@ public class FPListView extends TabItem {
             }
         });
 
-        //registerForContextMenu(fancyPlacesList);
 
         // set adapter
         fancyPlacesList.setAdapter(parent.fancyPlaceArrayAdapter);
-        //fancyPlacesList.setChoiceMode(ListView.CHOICE_MODE_MULTIPLE);
 
         // add on mode change listener
-        onListModeChangeListener = parent.fancyPlaceArrayAdapter;
-
+        onListModeChangeListeners.add(parent.fancyPlaceArrayAdapter);
         changeListMode(IOnListModeChangeListener.MODE_NORMAL);
 
         return v;
@@ -91,6 +88,8 @@ public class FPListView extends TabItem {
 
         try {
             fancyPlaceSelectedCallback = (MainWindow) activity;
+            onListModeChangeListeners.add((MainWindow) activity);
+
             parent = (MainWindow) activity;
         } catch (Exception e) {
             e.printStackTrace();
@@ -102,36 +101,8 @@ public class FPListView extends TabItem {
         return context.getString(R.string.fp_list_view_title);
     }
 
-    @Override
-    public void onCreateContextMenu(ContextMenu menu, View v, ContextMenu.ContextMenuInfo menuInfo) {
-
-        AdapterView.AdapterContextMenuInfo info = (AdapterView.AdapterContextMenuInfo) menuInfo;
-
-        menu.setHeaderTitle(parent.fancyPlaceArrayAdapter.getItem(info.position).getTitle());
-
-        String[] menuItems = {getString(R.string.context_menu_delete)/*, getString(R.string.context_menu_share)*/, "Export to GPX"};
-
-        for (int i = 0; i < menuItems.length; i++) {
-            menu.add(Menu.NONE, i, i, menuItems[i]);
-        }
-
-    }
-
-    @Override
-    public boolean onContextItemSelected(MenuItem item) {
-
-        AdapterView.AdapterContextMenuInfo info = (AdapterView.AdapterContextMenuInfo) item.getMenuInfo();
-        int menuItemIndex = item.getItemId();
-
-        if (menuItemIndex == 0) {
-            // delete
-            fancyPlaceSelectedCallback.onFancyPlaceSelected(info.position, OnFancyPlaceSelectedListener.INTENT_DELETE);
-        } else if (menuItemIndex == 1) {
-            // share
-            //fancyPlaceSelectedCallback.onFancyPlaceSelected(info.position, OnFancyPlaceSelectedListener.INTENT_SHARE);
-            fancyPlaceSelectedCallback.onFancyPlaceSelected(info.position, OnFancyPlaceSelectedListener.INTENT_EXPORT_TO_GPX);
-        }
-        return true;
+    public void setMultiSelectMode(int newMode) {
+        changeListMode(newMode);
     }
 
     protected void changeListMode(int newMode) {
@@ -164,7 +135,11 @@ public class FPListView extends TabItem {
             fancyPlacesList.setOnItemLongClickListener(null);
         }
 
-        onListModeChangeListener.onListModeChange(newMode);
+        notifyListeners(newMode);
     }
 
+    protected void notifyListeners(int newMode) {
+        for (int i = 0; i < onListModeChangeListeners.size(); i++)
+            onListModeChangeListeners.get(i).onListModeChange(newMode);
+    }
 }
\ No newline at end of file
diff --git a/app/src/main/java/com/gabm/fancyplaces/ui/FPOsmDroidView.java b/app/src/main/java/com/gabm/fancyplaces/ui/FPOsmDroidView.java
index e60aa9d..fe601d0 100644
--- a/app/src/main/java/com/gabm/fancyplaces/ui/FPOsmDroidView.java
+++ b/app/src/main/java/com/gabm/fancyplaces/ui/FPOsmDroidView.java
@@ -54,7 +54,6 @@ public class FPOsmDroidView extends TabItem implements LocationHandler.OnLocatio
 
     @Override
     public String getTitle(Context context) {
-
         return context.getString(R.string.fp_map_view_title);
     }
 
diff --git a/app/src/main/java/com/gabm/fancyplaces/ui/LFPState.java b/app/src/main/java/com/gabm/fancyplaces/ui/LFPState.java
index 0f322ec..02f407b 100755
--- a/app/src/main/java/com/gabm/fancyplaces/ui/LFPState.java
+++ b/app/src/main/java/com/gabm/fancyplaces/ui/LFPState.java
@@ -28,6 +28,7 @@ import com.gabm.fancyplaces.data.ImageFile;
 public class LFPState implements Parcelable {
     public int mode = 1;
     public ImageFile OriginalImageFile = null;
+    public int curMenu = 0;
 
     LFPState() {
     }
@@ -35,6 +36,7 @@ public class LFPState implements Parcelable {
     LFPState(Parcel in) {
         mode = in.readInt();
         OriginalImageFile = in.readParcelable(ImageFile.class.getClassLoader());
+        curMenu = in.readInt();
     }
 
     @Override
@@ -46,6 +48,7 @@ public class LFPState implements Parcelable {
     public void writeToParcel(Parcel dest, int flags) {
         dest.writeInt(mode);
         dest.writeParcelable(OriginalImageFile, flags);
+        dest.writeInt(curMenu);
 
     }
 }
diff --git a/app/src/main/java/com/gabm/fancyplaces/ui/ListViewItem.java b/app/src/main/java/com/gabm/fancyplaces/ui/ListViewItem.java
index a655079..1f1f938 100644
--- a/app/src/main/java/com/gabm/fancyplaces/ui/ListViewItem.java
+++ b/app/src/main/java/com/gabm/fancyplaces/ui/ListViewItem.java
@@ -20,12 +20,8 @@ package com.gabm.fancyplaces.ui;
 import android.content.Context;
 import android.graphics.Bitmap;
 import android.graphics.drawable.BitmapDrawable;
-import android.view.View;
 import android.view.animation.Animation;
 import android.view.animation.AnimationUtils;
-import android.widget.ImageView;
-import android.widget.LinearLayout;
-import android.widget.TextView;
 
 import com.gabm.fancyplaces.R;
 import com.gabm.fancyplaces.data.FancyPlace;
@@ -37,10 +33,6 @@ import com.gabm.fancyplaces.functional.ImageFileLoaderTask;
 public class ListViewItem implements ImageFileLoaderTask.OnImageLoaderCompletedListener {
 
     private Bitmap thumbnail;
-    private ImageView thumbnailView;
-    private TextView titleTextView;
-    private LinearLayout backgroundLayoutView;
-    private Context curContext;
 
     private boolean selected = false;
     private boolean selectable = false;
@@ -48,27 +40,49 @@ public class ListViewItem implements ImageFileLoaderTask.OnImageLoaderCompletedL
     private Animation animationBegin;
     private Animation animationEnd;
 
+    private ListViewItemHolder curHolder;
+    private Context curContext;
+    private FancyPlace curFancyPlace;
+
+    public ListViewItem(Context context, ListViewItemHolder holder) {
 
-    public ListViewItem(Context context, View v) {
-        thumbnailView = (ImageView)v.findViewById(R.id.li_fp_thumbnail);
-        titleTextView = (TextView)v.findViewById(R.id.li_fp_title);
-        backgroundLayoutView = (LinearLayout) v.findViewById(R.id.li_background);
         curContext = context;
+        curHolder = holder;
+
 
         animationBegin = AnimationUtils.loadAnimation(context, R.anim.to_middle);
         animationEnd = AnimationUtils.loadAnimation(context, R.anim.from_middle);
 
-        thumbnail = ((BitmapDrawable)thumbnailView.getDrawable()).getBitmap();
+        thumbnail = ((BitmapDrawable) curHolder.thumbnailView.getDrawable()).getBitmap();
+    }
+
+    public void setHolder(ListViewItemHolder holder) {
+        curHolder = holder;
+        updateContent();
     }
 
     public void setFancyPlace(FancyPlace fancyPlace)
     {
-        titleTextView.setText(fancyPlace.getTitle());
-
-        ImageFileLoaderTask backgroundTask = new ImageFileLoaderTask(thumbnailView, this);
+        curFancyPlace = fancyPlace;
 
-        if (fancyPlace.getImage().exists())
+        if (fancyPlace.getImage().exists()) {
+            ImageFileLoaderTask backgroundTask = new ImageFileLoaderTask(this);
             backgroundTask.execute(fancyPlace.getImage());
+        }
+
+        setSelected(isSelected());
+    }
+
+    protected void updateContent() {
+        curHolder.titleTextView.setText(curFancyPlace.getTitle());
+
+        if (selected) {
+            curHolder.backgroundLayoutView.setBackgroundColor(curContext.getResources().getColor(R.color.ColorBackgroundAccent));
+            curHolder.thumbnailView.setImageResource(R.drawable.ic_done_white_48dp);
+        } else {
+            curHolder.backgroundLayoutView.setBackgroundColor(curContext.getResources().getColor(R.color.ColorBackground));
+            curHolder.thumbnailView.setImageBitmap(thumbnail);
+        }
     }
 
     public boolean isSelectable()
@@ -102,19 +116,14 @@ public class ListViewItem implements ImageFileLoaderTask.OnImageLoaderCompletedL
     {
         selected = _selected;
 
-        if (selected) {
-            backgroundLayoutView.setBackgroundColor(curContext.getResources().getColor(R.color.ColorBackgroundAccent));
-            thumbnailView.setImageResource(R.drawable.ic_done_white_48dp);
-        } else {
-            backgroundLayoutView.setBackgroundColor(curContext.getResources().getColor(R.color.ColorBackground));
-            thumbnailView.setImageBitmap(thumbnail);
-        }
+
+        updateContent();
     }
 
     private void startTogglingWithAnimation() {
-        thumbnailView.clearAnimation();
-        thumbnailView.setAnimation(animationBegin);
-        thumbnailView.startAnimation(animationBegin);
+        curHolder.thumbnailView.clearAnimation();
+        curHolder.thumbnailView.setAnimation(animationBegin);
+        curHolder.thumbnailView.startAnimation(animationBegin);
 
         Animation.AnimationListener animListener;
         animListener = new FlipAnimationListener();
@@ -126,6 +135,7 @@ public class ListViewItem implements ImageFileLoaderTask.OnImageLoaderCompletedL
     @Override
     public void onImageLoaderCompleted(Bitmap bitmap) {
         thumbnail = bitmap;
+        updateContent();
     }
 
 
@@ -146,11 +156,11 @@ public class ListViewItem implements ImageFileLoaderTask.OnImageLoaderCompletedL
             if (animation == animationBegin) {
                 setSelected(!isSelected());
 
-                thumbnailView.clearAnimation();
-                thumbnailView.setAnimation(animationEnd);
-                thumbnailView.startAnimation(animationEnd);
+                curHolder.thumbnailView.clearAnimation();
+                curHolder.thumbnailView.setAnimation(animationEnd);
+                curHolder.thumbnailView.startAnimation(animationEnd);
             } else {
-                thumbnailView.clearAnimation();
+                curHolder.thumbnailView.clearAnimation();
             }
         }
     }
diff --git a/app/src/main/java/com/gabm/fancyplaces/ui/ListViewItemHolder.java b/app/src/main/java/com/gabm/fancyplaces/ui/ListViewItemHolder.java
new file mode 100644
index 0000000..dc8ab92
--- /dev/null
+++ b/app/src/main/java/com/gabm/fancyplaces/ui/ListViewItemHolder.java
@@ -0,0 +1,39 @@
+/*
+ * Copyright (C) 2015 Matthias Gabriel
+ *
+ * This program is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation, either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.
+ */
+
+package com.gabm.fancyplaces.ui;
+
+import android.view.View;
+import android.widget.ImageView;
+import android.widget.LinearLayout;
+import android.widget.TextView;
+
+import com.gabm.fancyplaces.R;
+
+/**
+ * Created by gabm on 20/06/15.
+ */
+public class ListViewItemHolder {
+    public ImageView thumbnailView;
+    public TextView titleTextView;
+    public LinearLayout backgroundLayoutView;
+    public ListViewItemHolder(View v) {
+        thumbnailView = (ImageView) v.findViewById(R.id.li_fp_thumbnail);
+        titleTextView = (TextView) v.findViewById(R.id.li_fp_title);
+        backgroundLayoutView = (LinearLayout) v.findViewById(R.id.li_background);
+    }
+}
\ No newline at end of file
diff --git a/app/src/main/java/com/gabm/fancyplaces/ui/MainWindow.java b/app/src/main/java/com/gabm/fancyplaces/ui/MainWindow.java
index 95f96b1..514f29e 100644
--- a/app/src/main/java/com/gabm/fancyplaces/ui/MainWindow.java
+++ b/app/src/main/java/com/gabm/fancyplaces/ui/MainWindow.java
@@ -39,9 +39,10 @@ import com.gabm.fancyplaces.FancyPlacesApplication;
 import com.gabm.fancyplaces.R;
 import com.gabm.fancyplaces.data.FancyPlace;
 import com.gabm.fancyplaces.data.ImageFile;
-import com.gabm.fancyplaces.functional.FancyPlaceListViewAdapter;
+import com.gabm.fancyplaces.functional.FancyPlacesArrayAdapter;
 import com.gabm.fancyplaces.functional.FancyPlacesDatabase;
 import com.gabm.fancyplaces.functional.GPXExporter;
+import com.gabm.fancyplaces.functional.IOnListModeChangeListener;
 import com.gabm.fancyplaces.functional.MainWindowViewpagerAdapter;
 import com.gabm.fancyplaces.functional.OnFancyPlaceSelectedListener;
 
@@ -59,17 +60,18 @@ import java.util.List;
  */
 
 
-public class MainWindow extends AppCompatActivity implements OnFancyPlaceSelectedListener {
+public class MainWindow extends AppCompatActivity implements OnFancyPlaceSelectedListener, IOnListModeChangeListener {
 
     public static int REQUEST_SHOW_EDIT_PLACE = 0;
     private static FancyPlacesApplication curAppContext = null;
-    public FancyPlaceListViewAdapter fancyPlaceArrayAdapter = null;
+    public FancyPlacesArrayAdapter fancyPlaceArrayAdapter = null;
     ViewPager pager;
     MainWindowViewpagerAdapter viewpagerAdapter;
     SlidingTabLayout tabs;
     private FancyPlacesDatabase fancyPlacesDatabase = null;
     private LFPState curState = new LFPState();
     private ArrayList<FancyPlace> fancyPlaces = null;
+    private FPListView fpListView = null;
 
     @Override
     protected void onCreate(Bundle savedInstanceState) {
@@ -91,7 +93,7 @@ public class MainWindow extends AppCompatActivity implements OnFancyPlaceSelecte
         fancyPlacesDatabase = new FancyPlacesDatabase(getApplicationContext());
         fancyPlacesDatabase.open();
         fancyPlaces = (ArrayList<FancyPlace>) fancyPlacesDatabase.getAllFancyPlaces();
-        fancyPlaceArrayAdapter = new FancyPlaceListViewAdapter(getApplicationContext(), R.layout.list_item_fancy_place, fancyPlaces);
+        fancyPlaceArrayAdapter = new FancyPlacesArrayAdapter(getApplicationContext(), R.layout.list_item_fancy_place, fancyPlaces);
 
         ImageFile.curAppContext = curAppContext;
 
@@ -115,6 +117,10 @@ public class MainWindow extends AppCompatActivity implements OnFancyPlaceSelecte
         // Setting the ViewPager For the SlidingTabsLayout
         tabs.setViewPager(pager);
 
+        // set current menu
+        curState.curMenu = R.menu.menu_main_window;
+
+
         // handle sharing data
         /*
         Uri uri = getIntent().getData();
@@ -128,7 +134,8 @@ public class MainWindow extends AppCompatActivity implements OnFancyPlaceSelecte
         ArrayList<TabItem> tabList = new ArrayList<>();
 
         // add to list
-        tabList.add(FPListView.newInstance());
+        fpListView = FPListView.newInstance();
+        tabList.add(fpListView);
         tabList.add(FPOsmDroidView.newInstance());
         return tabList;
     }
@@ -303,7 +310,6 @@ public class MainWindow extends AppCompatActivity implements OnFancyPlaceSelecte
             }
             inputStream.close();
         } catch (IOException e) {
-            // TODO Auto-generated catch block
             e.printStackTrace();
         }
 
@@ -317,18 +323,64 @@ public class MainWindow extends AppCompatActivity implements OnFancyPlaceSelecte
         return true;
     }
 
+    @Override
+    public boolean onPrepareOptionsMenu(Menu menu) {
+        menu.clear();
+
+        getMenuInflater().inflate(curState.curMenu, menu);
+
+        if (curState.curMenu == R.menu.menu_main_window_multi_select) {
+            getSupportActionBar().setDisplayHomeAsUpEnabled(true);
+            getSupportActionBar().setTitle("");
+        } else if (curState.curMenu == R.menu.menu_main_window) {
+            getSupportActionBar().setDisplayHomeAsUpEnabled(false);
+            getSupportActionBar().setTitle(R.string.title_activity_list_fancy_places);
+        }
+
+        return super.onPrepareOptionsMenu(menu);
+    }
+
     @Override
     public boolean onOptionsItemSelected(MenuItem item) {
-        // Handle action bar item clicks here. The action bar will
-        // automatically handle clicks on the Home/Up button, so long
-        // as you specify a parent activity in AndroidManifest.xml.
         int id = item.getItemId();
 
-        if (id == R.id.main_window_about) {
+        switch (id) {
+            case android.R.id.home:
+                fpListView.setMultiSelectMode(IOnListModeChangeListener.MODE_NORMAL);
+                return true;
+            case R.id.main_window_about:
+                showAbout();
+                return true;
+
+            case R.id.main_window_delete:
+                // get selected list
+                List<FancyPlace> fpList = fancyPlaceArrayAdapter.getSelectedFancyPlaces();
+
+                // delete them
+                for (int i = 0; i < fpList.size(); i++) {
+                    fancyPlaceArrayAdapter.remove(fpList.get(i));
+                    fancyPlacesDatabase.deleteFancyPlace(fpList.get(i), true);
+                }
+
+                fpListView.setMultiSelectMode(IOnListModeChangeListener.MODE_NORMAL);
+                return true;
 
-            showAbout();
-            return true;
+            case R.id.main_window_share:
+                // todo: share selected
+                return true;
         }
+
         return false;
     }
+
+    @Override
+    public void onListModeChange(int newMode) {
+        if (newMode == IOnListModeChangeListener.MODE_NORMAL)
+            curState.curMenu = R.menu.menu_main_window;
+        else if (newMode == IOnListModeChangeListener.MODE_MULTI_SELECT)
+            curState.curMenu = R.menu.menu_main_window_multi_select;
+
+        invalidateOptionsMenu();
+
+    }
 }
