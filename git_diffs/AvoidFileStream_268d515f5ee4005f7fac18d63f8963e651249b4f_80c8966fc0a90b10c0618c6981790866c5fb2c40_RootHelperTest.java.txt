diff --git a/app/src/main/java/com/amaze/filemanager/asynchronous/services/AbstractProgressiveService.java b/app/src/main/java/com/amaze/filemanager/asynchronous/services/AbstractProgressiveService.java
index 89638e2b5..abbeabf52 100644
--- a/app/src/main/java/com/amaze/filemanager/asynchronous/services/AbstractProgressiveService.java
+++ b/app/src/main/java/com/amaze/filemanager/asynchronous/services/AbstractProgressiveService.java
@@ -89,21 +89,15 @@ public abstract class AbstractProgressiveService extends Service implements Serv
     /**
      * Publish the results of the progress to notification and {@link DatapointParcelable}
      * and eventually to {@link ProcessViewerFragment}
-     *
-     * @param fileName       file name of current file being copied
-     * @param sourceFiles    total number of files selected by user for copy
-     * @param sourceProgress files been copied out of them
-     * @param totalSize      total size of selected items to copy
-     * @param writtenSize    bytes successfully copied
      * @param speed          number of bytes being copied per sec
      * @param isComplete     whether operation completed or ongoing (not supported at the moment)
      * @param move           if the files are to be moved
-     *                       In case of encryption, this is true for decrypting operation
      */
-    public final void publishResults(String fileName, int sourceFiles, int sourceProgress,
-                                     long totalSize, long writtenSize, long speed, boolean isComplete,
-                                     boolean move) {
+    public final void publishResults(long speed, boolean isComplete, boolean move) {
         if (!getProgressHandler().getCancelled()) {
+            String fileName = getProgressHandler().getFileName();
+            long totalSize = getProgressHandler().getTotalSize();
+            long writtenSize = getProgressHandler().getWrittenSize();
 
             context = getApplicationContext();
 
@@ -192,7 +186,8 @@ public abstract class AbstractProgressiveService extends Service implements Serv
             }
 
             //for processviewer
-            DatapointParcelable intent = new DatapointParcelable(fileName, sourceFiles, sourceProgress,
+            DatapointParcelable intent = new DatapointParcelable(fileName,
+                    getProgressHandler().getSourceSize(), getProgressHandler().getSourceFilesProcessed(),
                     totalSize, writtenSize, speed, move, isComplete);
             //putDataPackage(intent);
             addDatapoint(intent);
diff --git a/app/src/main/java/com/amaze/filemanager/asynchronous/services/CopyService.java b/app/src/main/java/com/amaze/filemanager/asynchronous/services/CopyService.java
index e0ef993e8..1a3223e0b 100644
--- a/app/src/main/java/com/amaze/filemanager/asynchronous/services/CopyService.java
+++ b/app/src/main/java/com/amaze/filemanager/asynchronous/services/CopyService.java
@@ -245,9 +245,8 @@ public class CopyService extends AbstractProgressiveService {
             progressHandler.setSourceSize(totalSourceFiles);
             progressHandler.setTotalSize(totalSize);
 
-            progressHandler.setProgressListener((fileName, sourceFiles1, sourceProgress1, totalSize1, writtenSize, speed) -> {
-                publishResults(fileName, sourceFiles1, sourceProgress1, totalSize1, writtenSize, speed, false, move);
-            });
+            progressHandler.setProgressListener((speed) ->
+                publishResults(speed, false, move));
 
             watcherUtil = new ServiceWatcherUtil(progressHandler);
 
diff --git a/app/src/main/java/com/amaze/filemanager/asynchronous/services/DecryptService.java b/app/src/main/java/com/amaze/filemanager/asynchronous/services/DecryptService.java
index a0d65d2b4..4dc38ba04 100644
--- a/app/src/main/java/com/amaze/filemanager/asynchronous/services/DecryptService.java
+++ b/app/src/main/java/com/amaze/filemanager/asynchronous/services/DecryptService.java
@@ -134,10 +134,8 @@ public class DecryptService extends AbstractProgressiveService {
 
             progressHandler.setSourceSize(1);
             progressHandler.setTotalSize(totalSize);
-            progressHandler.setProgressListener((fileName, sourceFiles, sourceProgress, totalSize, writtenSize, speed) -> {
-                publishResults(fileName, sourceFiles, sourceProgress, totalSize,
-                        writtenSize, speed, false, false);
-            });
+            progressHandler.setProgressListener((speed) ->
+                publishResults(speed, false, false));
             serviceWatcherUtil = new ServiceWatcherUtil(progressHandler);
 
             addFirstDatapoint(baseFile.getName(), 1, totalSize, false);// we're using encrypt as move flag false
diff --git a/app/src/main/java/com/amaze/filemanager/asynchronous/services/EncryptService.java b/app/src/main/java/com/amaze/filemanager/asynchronous/services/EncryptService.java
index 21f0e3f99..f0b9ac844 100644
--- a/app/src/main/java/com/amaze/filemanager/asynchronous/services/EncryptService.java
+++ b/app/src/main/java/com/amaze/filemanager/asynchronous/services/EncryptService.java
@@ -182,10 +182,8 @@ public class EncryptService extends AbstractProgressiveService {
 
             progressHandler.setSourceSize(1);
             progressHandler.setTotalSize(totalSize);
-            progressHandler.setProgressListener((fileName, sourceFiles, sourceProgress, totalSize, writtenSize, speed) -> {
-                publishResults(fileName, sourceFiles, sourceProgress, totalSize,
-                        writtenSize, speed, false, false);
-            });
+            progressHandler.setProgressListener((speed) ->
+                publishResults(speed, false, false));
             serviceWatcherUtil = new ServiceWatcherUtil(progressHandler);
 
             addFirstDatapoint(baseFile.getName(), 1, totalSize, true);// we're using encrypt as move flag false
diff --git a/app/src/main/java/com/amaze/filemanager/asynchronous/services/ExtractService.java b/app/src/main/java/com/amaze/filemanager/asynchronous/services/ExtractService.java
index 81362e5ba..639830d8f 100644
--- a/app/src/main/java/com/amaze/filemanager/asynchronous/services/ExtractService.java
+++ b/app/src/main/java/com/amaze/filemanager/asynchronous/services/ExtractService.java
@@ -51,7 +51,6 @@ import java.io.File;
 import java.io.IOException;
 import java.lang.ref.WeakReference;
 import java.util.ArrayList;
-import java.util.List;
 
 public class ExtractService extends AbstractProgressiveService {
 
@@ -127,9 +126,8 @@ public class ExtractService extends AbstractProgressiveService {
 
         progressHandler.setSourceSize(1);
         progressHandler.setTotalSize(totalSize);
-        progressHandler.setProgressListener((fileName, sourceFiles, sourceProgress, totalSize1, writtenSize, speed) -> {
-            publishResults(fileName, sourceFiles, sourceProgress, totalSize1, writtenSize, speed, false, false);
-        });
+        progressHandler.setProgressListener((speed) ->
+            publishResults(speed, false, false));
 
         super.onStartCommand(intent, flags, startId);
         super.progressHalted();
diff --git a/app/src/main/java/com/amaze/filemanager/asynchronous/services/ZipService.java b/app/src/main/java/com/amaze/filemanager/asynchronous/services/ZipService.java
index 0b121ad65..b8e29f986 100644
--- a/app/src/main/java/com/amaze/filemanager/asynchronous/services/ZipService.java
+++ b/app/src/main/java/com/amaze/filemanager/asynchronous/services/ZipService.java
@@ -221,10 +221,8 @@ public class ZipService extends AbstractProgressiveService {
 
             progressHandler.setSourceSize(baseFiles.size());
             progressHandler.setTotalSize(totalBytes);
-            progressHandler.setProgressListener((fileName, sourceFiles, sourceProgress, totalSize, writtenSize, speed) -> {
-                publishResults(fileName, sourceFiles, sourceProgress, totalSize,
-                        writtenSize, speed, false, false);
-            });
+            progressHandler.setProgressListener((speed) ->
+                publishResults(speed, false, false));
 
 
             zipService.addFirstDatapoint(baseFiles.get(0).getName(), baseFiles.size(), totalBytes, false);
diff --git a/app/src/main/java/com/amaze/filemanager/utils/ProgressHandler.java b/app/src/main/java/com/amaze/filemanager/utils/ProgressHandler.java
index 73fc4db36..f638ffd21 100644
--- a/app/src/main/java/com/amaze/filemanager/utils/ProgressHandler.java
+++ b/app/src/main/java/com/amaze/filemanager/utils/ProgressHandler.java
@@ -73,8 +73,7 @@ public class ProgressHandler {
         long speedRaw = (newPosition - writtenSize);
         this.writtenSize = newPosition;
 
-        progressListener.onProgressed(fileName, sourceFiles, sourceFilesProcessed,
-                totalSize, writtenSize, speedRaw);
+        progressListener.onProgressed(speedRaw);
     }
 
     public void setFileName(String fileName) {
@@ -89,10 +88,18 @@ public class ProgressHandler {
         this.sourceFilesProcessed = sourceFilesProcessed;
     }
 
+    public int getSourceFilesProcessed() {
+        return sourceFilesProcessed;
+    }
+
     public void setSourceSize(int sourceFiles) {
         this.sourceFiles = sourceFiles;
     }
 
+    public int getSourceSize() {
+        return sourceFiles;
+    }
+
     // dynamically setting total size, useful in case files are compressed
     public void setTotalSize(long totalSize) {
         this.totalSize = totalSize;
@@ -125,14 +132,8 @@ public class ProgressHandler {
      */
     public interface ProgressListener {
         /**
-         * @param fileName File name currently being processed (can be recursive, irrespective of selections)
-         * @param sourceFiles how many total number of files did the user selected
-         * @param sourceProgress which file is being processed from total number of files
-         * @param totalSize total size of source files
-         * @param writtenSize where are we at from total number of bytes
          * @param speed raw write speed in bytes
          */
-        void onProgressed(String fileName, int sourceFiles, int sourceProgress, long totalSize,
-                          long writtenSize, long speed);
+        void onProgressed(long speed);
     }
 }
