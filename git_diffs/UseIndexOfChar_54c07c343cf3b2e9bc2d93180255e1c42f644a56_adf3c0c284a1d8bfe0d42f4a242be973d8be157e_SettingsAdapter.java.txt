diff --git a/app/src/main/java/com/github/doomsdayrs/apps/shosetsu/backend/Download_Manager.java b/app/src/main/java/com/github/doomsdayrs/apps/shosetsu/backend/Download_Manager.java
index 484529f37..7b8c72893 100644
--- a/app/src/main/java/com/github/doomsdayrs/apps/shosetsu/backend/Download_Manager.java
+++ b/app/src/main/java/com/github/doomsdayrs/apps/shosetsu/backend/Download_Manager.java
@@ -8,8 +8,8 @@ import android.widget.Toast;
 import com.github.doomsdayrs.apps.shosetsu.backend.database.Database;
 import com.github.doomsdayrs.apps.shosetsu.ui.main.DownloadsFragment;
 import com.github.doomsdayrs.apps.shosetsu.ui.novel.NovelFragmentChapters;
+import com.github.doomsdayrs.apps.shosetsu.variables.DownloadItem;
 import com.github.doomsdayrs.apps.shosetsu.variables.Settings;
-import com.github.doomsdayrs.apps.shosetsu.variables.download.DownloadItem;
 
 import java.io.BufferedReader;
 import java.io.File;
diff --git a/app/src/main/java/com/github/doomsdayrs/apps/shosetsu/backend/database/Database.java b/app/src/main/java/com/github/doomsdayrs/apps/shosetsu/backend/database/Database.java
index 155e8780c..061e092f1 100644
--- a/app/src/main/java/com/github/doomsdayrs/apps/shosetsu/backend/database/Database.java
+++ b/app/src/main/java/com/github/doomsdayrs/apps/shosetsu/backend/database/Database.java
@@ -10,7 +10,7 @@ import com.github.Doomsdayrs.api.novelreader_core.services.core.objects.NovelPag
 import com.github.doomsdayrs.apps.shosetsu.backend.Download_Manager;
 import com.github.doomsdayrs.apps.shosetsu.backend.SettingsController;
 import com.github.doomsdayrs.apps.shosetsu.variables.DefaultScrapers;
-import com.github.doomsdayrs.apps.shosetsu.variables.download.DownloadItem;
+import com.github.doomsdayrs.apps.shosetsu.variables.DownloadItem;
 import com.github.doomsdayrs.apps.shosetsu.variables.enums.Status;
 import com.github.doomsdayrs.apps.shosetsu.variables.recycleObjects.NovelCard;
 
diff --git a/app/src/main/java/com/github/doomsdayrs/apps/shosetsu/ui/adapters/DownloadAdapter.java b/app/src/main/java/com/github/doomsdayrs/apps/shosetsu/ui/adapters/DownloadAdapter.java
index 5aaa31151..5d968c7ca 100644
--- a/app/src/main/java/com/github/doomsdayrs/apps/shosetsu/ui/adapters/DownloadAdapter.java
+++ b/app/src/main/java/com/github/doomsdayrs/apps/shosetsu/ui/adapters/DownloadAdapter.java
@@ -1,15 +1,16 @@
 package com.github.doomsdayrs.apps.shosetsu.ui.adapters;
 
-import androidx.annotation.NonNull;
-import androidx.recyclerview.widget.RecyclerView;
 import android.view.LayoutInflater;
 import android.view.View;
 import android.view.ViewGroup;
 
+import androidx.annotation.NonNull;
+import androidx.recyclerview.widget.RecyclerView;
+
 import com.github.doomsdayrs.apps.shosetsu.R;
 import com.github.doomsdayrs.apps.shosetsu.ui.main.DownloadsFragment;
 import com.github.doomsdayrs.apps.shosetsu.ui.viewholders.DownloadItemViewHolder;
-import com.github.doomsdayrs.apps.shosetsu.variables.download.DownloadItem;
+import com.github.doomsdayrs.apps.shosetsu.variables.DownloadItem;
 
 /*
  * This file is part of Shosetsu.
diff --git a/app/src/main/java/com/github/doomsdayrs/apps/shosetsu/ui/adapters/SettingsAdapter.java b/app/src/main/java/com/github/doomsdayrs/apps/shosetsu/ui/adapters/SettingsAdapter.java
index 70d3a157b..b24ca1bfb 100644
--- a/app/src/main/java/com/github/doomsdayrs/apps/shosetsu/ui/adapters/SettingsAdapter.java
+++ b/app/src/main/java/com/github/doomsdayrs/apps/shosetsu/ui/adapters/SettingsAdapter.java
@@ -1,38 +1,18 @@
 package com.github.doomsdayrs.apps.shosetsu.ui.adapters;
 
-import android.app.Activity;
-import android.content.Intent;
-import android.os.Bundle;
-import android.util.Log;
 import android.view.LayoutInflater;
 import android.view.View;
 import android.view.ViewGroup;
-import android.widget.AdapterView;
-import android.widget.ArrayAdapter;
-import android.widget.Button;
-import android.widget.CheckBox;
-import android.widget.Spinner;
-import android.widget.TextView;
-import android.widget.Toast;
 
 import androidx.annotation.NonNull;
-import androidx.annotation.Nullable;
-import androidx.cardview.widget.CardView;
-import androidx.fragment.app.Fragment;
 import androidx.fragment.app.FragmentManager;
 import androidx.recyclerview.widget.RecyclerView;
 
 import com.github.doomsdayrs.apps.shosetsu.R;
-import com.github.doomsdayrs.apps.shosetsu.backend.Download_Manager;
-import com.github.doomsdayrs.apps.shosetsu.backend.SettingsController;
-import com.github.doomsdayrs.apps.shosetsu.backend.database.Database;
-import com.github.doomsdayrs.apps.shosetsu.variables.Settings;
-import com.github.doomsdayrs.apps.shosetsu.variables.enums.Types;
+import com.github.doomsdayrs.apps.shosetsu.ui.viewholders.SettingsCardViewHolder;
 import com.github.doomsdayrs.apps.shosetsu.variables.recycleObjects.SettingsCard;
 
 import java.util.ArrayList;
-import java.util.List;
-import java.util.Objects;
 
 /*
  * This file is part of Shosetsu.
@@ -52,7 +32,7 @@ import java.util.Objects;
  *
  * @author github.com/doomsdayrs
  */
-public class SettingsAdapter extends RecyclerView.Adapter<SettingsAdapter.SettingsCardViewHolder> {
+public class SettingsAdapter extends RecyclerView.Adapter<SettingsCardViewHolder> {
     private final ArrayList<SettingsCard> settingsCards;
     private final FragmentManager fragmentManager;
 
@@ -78,356 +58,4 @@ public class SettingsAdapter extends RecyclerView.Adapter<SettingsAdapter.Settin
     public int getItemCount() {
         return settingsCards.size();
     }
-
-    static class SettingsCardViewHolder extends RecyclerView.ViewHolder {
-        final TextView library_card_title;
-        final CardView cardView;
-        final FragmentManager fragmentManager;
-
-        SettingsCardViewHolder(@NonNull View itemView, FragmentManager fragmentManager) {
-            super(itemView);
-            library_card_title = itemView.findViewById(R.id.recycler_settings_title);
-            cardView = itemView.findViewById(R.id.settings_card);
-            this.fragmentManager = fragmentManager;
-        }
-
-        void setType(Types type) {
-            cardView.setOnClickListener(new onSettingsClick(type, fragmentManager));
-            library_card_title.setText(type.toString());
-        }
-    }
-
-    static class onSettingsClick implements View.OnClickListener {
-        final Types type;
-        final FragmentManager fragmentManager;
-
-        onSettingsClick(Types id, FragmentManager fragmentManager) {
-            type = id;
-            this.fragmentManager = fragmentManager;
-        }
-
-        @Override
-        public void onClick(View v) {
-            switch (type) {
-                case VIEW: {
-                    Toast.makeText(v.getContext(), "View", Toast.LENGTH_SHORT).show();
-                    fragmentManager.beginTransaction().addToBackStack("tag").replace(R.id.fragment_container, new viewSettings()).commit();
-                }
-                break;
-                case CREDITS: {
-                    Toast.makeText(v.getContext(), "Credits", Toast.LENGTH_SHORT).show();
-                    fragmentManager.beginTransaction().addToBackStack("tag").replace(R.id.fragment_container, new credits()).commit();
-
-                }
-                break;
-                case ADVANCED: {
-                    Toast.makeText(v.getContext(), "Advanced", Toast.LENGTH_SHORT).show();
-                    fragmentManager.beginTransaction().addToBackStack("tag").replace(R.id.fragment_container, new advancedSettings()).commit();
-                }
-                break;
-                case DOWNLOAD: {
-                    Toast.makeText(v.getContext(), "Download", Toast.LENGTH_SHORT).show();
-                    fragmentManager.beginTransaction().addToBackStack("tag").replace(R.id.fragment_container, new downloadSettings()).commit();
-                }
-                break;
-                case BACKUP: {
-                    Toast.makeText(v.getContext(), "Backup", Toast.LENGTH_SHORT).show();
-                    fragmentManager.beginTransaction().addToBackStack("tag").replace(R.id.fragment_container, new backupSettings()).commit();
-                }
-                break;
-                default: {
-                }
-            }
-        }
-    }
-
-    public static class viewSettings extends Fragment {
-        static final List<String> textSizes = new ArrayList<>();
-        static final List<String> paragraphSpaces = new ArrayList<>();
-        static final List<String> indentSizes = new ArrayList<>();
-
-        static {
-            textSizes.add("Small");
-            textSizes.add("Medium");
-            textSizes.add("Large");
-
-            paragraphSpaces.add("None");
-            paragraphSpaces.add("Small");
-            paragraphSpaces.add("Medium");
-            paragraphSpaces.add("Large");
-
-            indentSizes.add("None");
-            indentSizes.add("Small");
-            indentSizes.add("Medium");
-            indentSizes.add("Large");
-        }
-
-        CheckBox nightMode;
-        Spinner paragraphSpacing;
-        Spinner textSize;
-        Spinner indentSize;
-
-        public viewSettings() {
-        }
-
-        @Nullable
-        @Override
-        public View onCreateView(@NonNull LayoutInflater inflater, @Nullable ViewGroup container, @Nullable Bundle savedInstanceState) {
-            Log.d("OnCreateView", "ViewSettings");
-            View view = inflater.inflate(R.layout.settings_view, container, false);
-            nightMode = view.findViewById(R.id.reader_nightMode_checkbox);
-            paragraphSpacing = view.findViewById(R.id.reader_paragraphSpacing);
-            textSize = view.findViewById(R.id.reader_textSize);
-            indentSize = view.findViewById(R.id.reader_indentSize);
-
-            nightMode.setChecked(!SettingsController.isReaderLightMode());
-            nightMode.setOnCheckedChangeListener((buttonView, isChecked) -> SettingsController.swapReaderColor());
-
-            if (getContext() != null) {
-                {
-                    ArrayAdapter<String> dataAdapter = new ArrayAdapter<>(getContext(), android.R.layout.simple_spinner_item, textSizes);
-                    textSize.setAdapter(dataAdapter);
-                    switch ((int) Settings.ReaderTextSize) {
-                        default:
-                        case 14:
-                            textSize.setSelection(0);
-                            break;
-                        case 17:
-                            textSize.setSelection(1);
-                            break;
-                        case 20:
-                            textSize.setSelection(2);
-                            break;
-                    }
-
-                    textSize.setOnItemSelectedListener(new AdapterView.OnItemSelectedListener() {
-                        @Override
-                        public void onItemSelected(AdapterView<?> adapterView, View view, int i, long l) {
-                            if (i >= 0 && i <= 2) {
-                                int size = 14;
-                                switch (i) {
-                                    case 0:
-                                        break;
-                                    case 1:
-                                        size = 17;
-                                        break;
-                                    case 2:
-                                        size = 20;
-                                        break;
-                                }
-                                SettingsController.setTextSize(size);
-                                adapterView.setSelection(i);
-                            }
-                        }
-
-                        @Override
-                        public void onNothingSelected(AdapterView<?> adapterView) {
-                        }
-                    });
-                }
-                {
-                    ArrayAdapter<String> dataAdapter = new ArrayAdapter<>(getContext(), android.R.layout.simple_spinner_item, paragraphSpaces);
-                    //TODO figure out why the itemSelectedListner runs without being selected
-                    int spaceBack = Settings.paragraphSpacing;
-
-                    switch (Settings.paragraphSpacing) {
-                        case 0:
-                            paragraphSpacing.setSelection(0);
-                            break;
-                        case 1:
-                            paragraphSpacing.setSelection(1);
-                            break;
-                        case 2:
-                            paragraphSpacing.setSelection(2);
-                            break;
-                        case 3:
-                            paragraphSpacing.setSelection(3);
-                            break;
-                    }
-
-                    paragraphSpacing.setAdapter(dataAdapter);
-
-                    paragraphSpacing.setOnItemSelectedListener(new AdapterView.OnItemSelectedListener() {
-                        @Override
-                        public void onItemSelected(AdapterView<?> adapterView, View view, int i, long l) {
-                            if (i >= 0 && i <= 3) {
-                                SettingsController.changeParagraphSpacing(i);
-                                adapterView.setSelection(i);
-                            }
-                        }
-
-                        @Override
-                        public void onNothingSelected(AdapterView<?> adapterView) {
-
-                        }
-                    });
-
-                    SettingsController.changeParagraphSpacing(spaceBack);
-                    switch (Settings.paragraphSpacing) {
-                        case 0:
-                            paragraphSpacing.setSelection(0);
-                            break;
-                        case 1:
-                            paragraphSpacing.setSelection(1);
-                            break;
-                        case 2:
-                            paragraphSpacing.setSelection(2);
-                            break;
-                        case 3:
-                            paragraphSpacing.setSelection(3);
-                            break;
-                    }
-
-                }
-
-                {
-                    ArrayAdapter<String> dataAdapter = new ArrayAdapter<>(getContext(), android.R.layout.simple_spinner_item, indentSizes);
-                    //TODO figure out why the itemSelectedListner runs without being selected
-                    int spaceBack = Settings.indentSize;
-                    indentSize.setSelection(Settings.indentSize);
-                    indentSize.setAdapter(dataAdapter);
-                    indentSize.setOnItemSelectedListener(new AdapterView.OnItemSelectedListener() {
-                        @Override
-                        public void onItemSelected(AdapterView<?> adapterView, View view, int i, long l) {
-                            if (i >= 0 && i <= 3) {
-                                SettingsController.changeIndentSize(i);
-                                adapterView.setSelection(i);
-                            }
-                        }
-
-                        @Override
-                        public void onNothingSelected(AdapterView<?> adapterView) {
-
-                        }
-                    });
-                    SettingsController.changeIndentSize(spaceBack);
-                    indentSize.setSelection(Settings.indentSize);
-                }
-            }
-
-            return view;
-        }
-    }
-
-    public static class backupSettings extends Fragment {
-        Button button;
-
-        public backupSettings() {
-        }
-
-        @Nullable
-        @Override
-        public View onCreateView(@NonNull LayoutInflater inflater, @Nullable ViewGroup container, @Nullable Bundle savedInstanceState) {
-            Log.d("OnCreateView", "BackupSettings");
-            View view = inflater.inflate(R.layout.settings_backup, container, false);
-            button = view.findViewById(R.id.settings_backup_now);
-            button.setOnClickListener(view1 -> Database.backupDatabase());
-            return view;
-        }
-    }
-
-    public static class downloadSettings extends Fragment {
-
-        TextView textView;
-
-        public downloadSettings() {
-        }
-
-        @Nullable
-        @Override
-        public View onCreateView(@NonNull LayoutInflater inflater, @Nullable ViewGroup container, @Nullable Bundle savedInstanceState) {
-            Log.d("OnCreateView", "DownloadSettings");
-            View view = inflater.inflate(R.layout.settings_download, container, false);
-            textView = view.findViewById(R.id.settings_download_dir);
-            textView.setText(Download_Manager.shoDir);
-            textView.setOnClickListener(view1 -> performFileSearch());
-            return view;
-        }
-
-        private void setDir(String dir) {
-            SettingsController.download.edit().putString("dir", dir).apply();
-            Download_Manager.shoDir = dir;
-            textView.setText(dir);
-        }
-
-        void performFileSearch() {
-            Toast.makeText(getContext(), "Please make sure this is on the main storage, SD card storage is not functional yet", Toast.LENGTH_LONG).show();
-            Intent i = new Intent(Intent.ACTION_OPEN_DOCUMENT_TREE);
-            i.addCategory(Intent.CATEGORY_DEFAULT);
-            startActivityForResult(Intent.createChooser(i, "Choose directory"), 42);
-        }
-
-        @Override
-        public void onActivityResult(int requestCode, int resultCode, Intent data) {
-            super.onActivityResult(requestCode, resultCode, data);
-            if (requestCode == 42 && resultCode == Activity.RESULT_OK) {
-                // The document selected by the user won't be returned in the intent.
-                // Instead, a URI to that document will be contained in the return intent
-                // provided to this method as a parameter.
-                // Pull that URI using resultData.getData().
-                if (data != null) {
-                    String path = Objects.requireNonNull(data.getData()).getPath();
-                    Log.i("Selected Folder", "Uri: " + path);
-                    setDir(path.substring(Objects.requireNonNull(path).indexOf(":") + 1));
-                }
-            }
-
-        }
-    }
-
-    //TODO Add text size options
-    public static class advancedSettings extends Fragment {
-        static final List<String> strings = new ArrayList<>();
-
-        static {
-            strings.add("Light");
-            strings.add("Dark");
-            strings.add("Night");
-        }
-
-        Spinner spinner;
-
-        public advancedSettings() {
-        }
-
-        @Nullable
-        @Override
-        public View onCreateView(@NonNull LayoutInflater inflater, @Nullable ViewGroup container, @Nullable Bundle savedInstanceState) {
-            Log.d("OnCreateView", "ViewSettings");
-            View view = inflater.inflate(R.layout.settings_advanced, container, false);
-            spinner = view.findViewById(R.id.settings_advanced_spinner);
-            // Creating adapter for spinner
-            if (getContext() != null) {
-                ArrayAdapter<String> dataAdapter = new ArrayAdapter<>(getContext(), android.R.layout.simple_spinner_item, strings);
-                spinner.setAdapter(dataAdapter);
-                spinner.setSelection(Settings.themeMode);
-            }
-            spinner.setOnItemSelectedListener(new AdapterView.OnItemSelectedListener() {
-                @Override
-                public void onItemSelected(AdapterView<?> adapterView, View view, int i, long l) {
-                    if (i >= 0 && i <= 2) {
-                        SettingsController.changeMode(getActivity(), i);
-                        adapterView.setSelection(i);
-                    }
-                }
-
-                @Override
-                public void onNothingSelected(AdapterView<?> adapterView) {
-                }
-            });
-            return view;
-        }
-    }
-
-
-    //TODO Add text size options
-    public static class credits extends Fragment {
-
-        @Nullable
-        @Override
-        public View onCreateView(@NonNull LayoutInflater inflater, @Nullable ViewGroup container, @Nullable Bundle savedInstanceState) {
-            Log.d("OnCreateView", "ViewSettings");
-            return inflater.inflate(R.layout.settings_credits, container, false);
-        }
-    }
 }
diff --git a/app/src/main/java/com/github/doomsdayrs/apps/shosetsu/ui/listeners/OnSettingsCardClick.java b/app/src/main/java/com/github/doomsdayrs/apps/shosetsu/ui/listeners/OnSettingsCardClick.java
new file mode 100644
index 000000000..0cb034df5
--- /dev/null
+++ b/app/src/main/java/com/github/doomsdayrs/apps/shosetsu/ui/listeners/OnSettingsCardClick.java
@@ -0,0 +1,76 @@
+package com.github.doomsdayrs.apps.shosetsu.ui.listeners;
+/*
+ * This file is part of Shosetsu.
+ * Shosetsu is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation, either version 3 of the License, or
+ * (at your option) any later version.
+ * Foobar is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ * You should have received a copy of the GNU General Public License
+ * along with Shosetsu.  If not, see https://www.gnu.org/licenses/ .
+ * ====================================================================
+ * Shosetsu
+ * 13 / 07 / 2019
+ *
+ * @author github.com/doomsdayrs
+ */
+
+import android.view.View;
+import android.widget.Toast;
+
+import androidx.fragment.app.FragmentManager;
+
+import com.github.doomsdayrs.apps.shosetsu.R;
+import com.github.doomsdayrs.apps.shosetsu.ui.main.settings.AdvancedSettings;
+import com.github.doomsdayrs.apps.shosetsu.ui.main.settings.BackupSettings;
+import com.github.doomsdayrs.apps.shosetsu.ui.main.settings.CreditsSettings;
+import com.github.doomsdayrs.apps.shosetsu.ui.main.settings.DownloadSettings;
+import com.github.doomsdayrs.apps.shosetsu.ui.main.settings.ViewSettings;
+import com.github.doomsdayrs.apps.shosetsu.variables.enums.Types;
+
+public class OnSettingsCardClick implements View.OnClickListener {
+    final Types type;
+    final FragmentManager fragmentManager;
+
+    public OnSettingsCardClick(Types id, FragmentManager fragmentManager) {
+        type = id;
+        this.fragmentManager = fragmentManager;
+    }
+
+    @Override
+    public void onClick(View v) {
+        switch (type) {
+            case VIEW: {
+                Toast.makeText(v.getContext(), "View", Toast.LENGTH_SHORT).show();
+                fragmentManager.beginTransaction().addToBackStack("tag").replace(R.id.fragment_container, new ViewSettings()).commit();
+            }
+            break;
+            case CREDITS: {
+                Toast.makeText(v.getContext(), "Credits", Toast.LENGTH_SHORT).show();
+                fragmentManager.beginTransaction().addToBackStack("tag").replace(R.id.fragment_container, new CreditsSettings()).commit();
+
+            }
+            break;
+            case ADVANCED: {
+                Toast.makeText(v.getContext(), "Advanced", Toast.LENGTH_SHORT).show();
+                fragmentManager.beginTransaction().addToBackStack("tag").replace(R.id.fragment_container, new AdvancedSettings()).commit();
+            }
+            break;
+            case DOWNLOAD: {
+                Toast.makeText(v.getContext(), "Download", Toast.LENGTH_SHORT).show();
+                fragmentManager.beginTransaction().addToBackStack("tag").replace(R.id.fragment_container, new DownloadSettings()).commit();
+            }
+            break;
+            case BACKUP: {
+                Toast.makeText(v.getContext(), "Backup", Toast.LENGTH_SHORT).show();
+                fragmentManager.beginTransaction().addToBackStack("tag").replace(R.id.fragment_container, new BackupSettings()).commit();
+            }
+            break;
+            default: {
+            }
+        }
+    }
+}
\ No newline at end of file
diff --git a/app/src/main/java/com/github/doomsdayrs/apps/shosetsu/ui/main/DownloadsFragment.java b/app/src/main/java/com/github/doomsdayrs/apps/shosetsu/ui/main/DownloadsFragment.java
index 64a8c4c6c..6627591fc 100644
--- a/app/src/main/java/com/github/doomsdayrs/apps/shosetsu/ui/main/DownloadsFragment.java
+++ b/app/src/main/java/com/github/doomsdayrs/apps/shosetsu/ui/main/DownloadsFragment.java
@@ -2,11 +2,6 @@ package com.github.doomsdayrs.apps.shosetsu.ui.main;
 
 import android.annotation.SuppressLint;
 import android.os.Bundle;
-import androidx.annotation.NonNull;
-import androidx.annotation.Nullable;
-import androidx.fragment.app.Fragment;
-import androidx.recyclerview.widget.LinearLayoutManager;
-import androidx.recyclerview.widget.RecyclerView;
 import android.util.Log;
 import android.view.LayoutInflater;
 import android.view.Menu;
@@ -15,14 +10,20 @@ import android.view.MenuItem;
 import android.view.View;
 import android.view.ViewGroup;
 
+import androidx.annotation.NonNull;
+import androidx.annotation.Nullable;
+import androidx.fragment.app.Fragment;
+import androidx.recyclerview.widget.LinearLayoutManager;
+import androidx.recyclerview.widget.RecyclerView;
+
 import com.github.doomsdayrs.apps.shosetsu.R;
 import com.github.doomsdayrs.apps.shosetsu.backend.Download_Manager;
-import com.github.doomsdayrs.apps.shosetsu.backend.database.Database;
 import com.github.doomsdayrs.apps.shosetsu.backend.SettingsController;
+import com.github.doomsdayrs.apps.shosetsu.backend.database.Database;
 import com.github.doomsdayrs.apps.shosetsu.ui.adapters.DownloadAdapter;
+import com.github.doomsdayrs.apps.shosetsu.variables.DownloadItem;
 import com.github.doomsdayrs.apps.shosetsu.variables.Settings;
 import com.github.doomsdayrs.apps.shosetsu.variables.Statics;
-import com.github.doomsdayrs.apps.shosetsu.variables.download.DownloadItem;
 
 import java.util.ArrayList;
 import java.util.List;
diff --git a/app/src/main/java/com/github/doomsdayrs/apps/shosetsu/ui/main/settings/AdvancedSettings.java b/app/src/main/java/com/github/doomsdayrs/apps/shosetsu/ui/main/settings/AdvancedSettings.java
new file mode 100644
index 000000000..846eaa87d
--- /dev/null
+++ b/app/src/main/java/com/github/doomsdayrs/apps/shosetsu/ui/main/settings/AdvancedSettings.java
@@ -0,0 +1,83 @@
+package com.github.doomsdayrs.apps.shosetsu.ui.main.settings;
+/*
+ * This file is part of Shosetsu.
+ * Shosetsu is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation, either version 3 of the License, or
+ * (at your option) any later version.
+ * Foobar is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ * You should have received a copy of the GNU General Public License
+ * along with Shosetsu.  If not, see https://www.gnu.org/licenses/ .
+ * ====================================================================
+ * Shosetsu
+ * 13 / 07 / 2019
+ *
+ * @author github.com/doomsdayrs
+ */
+
+import android.os.Bundle;
+import android.util.Log;
+import android.view.LayoutInflater;
+import android.view.View;
+import android.view.ViewGroup;
+import android.widget.AdapterView;
+import android.widget.ArrayAdapter;
+import android.widget.Spinner;
+
+import androidx.annotation.NonNull;
+import androidx.annotation.Nullable;
+import androidx.fragment.app.Fragment;
+
+import com.github.doomsdayrs.apps.shosetsu.R;
+import com.github.doomsdayrs.apps.shosetsu.backend.SettingsController;
+import com.github.doomsdayrs.apps.shosetsu.variables.Settings;
+
+import java.util.ArrayList;
+import java.util.List;
+
+//TODO add text size options
+public class AdvancedSettings extends Fragment {
+    static final List<String> strings = new ArrayList<>();
+
+    static {
+        strings.add("Light");
+        strings.add("Dark");
+        strings.add("Night");
+    }
+
+    Spinner spinner;
+
+    public AdvancedSettings() {
+    }
+
+    @Nullable
+    @Override
+    public View onCreateView(@NonNull LayoutInflater inflater, @Nullable ViewGroup container, @Nullable Bundle savedInstanceState) {
+        Log.d("OnCreateView", "ViewSettings");
+        View view = inflater.inflate(R.layout.settings_advanced, container, false);
+        spinner = view.findViewById(R.id.settings_advanced_spinner);
+        // Creating adapter for spinner
+        if (getContext() != null) {
+            ArrayAdapter<String> dataAdapter = new ArrayAdapter<>(getContext(), android.R.layout.simple_spinner_item, strings);
+            spinner.setAdapter(dataAdapter);
+            spinner.setSelection(Settings.themeMode);
+        }
+        spinner.setOnItemSelectedListener(new AdapterView.OnItemSelectedListener() {
+            @Override
+            public void onItemSelected(AdapterView<?> adapterView, View view, int i, long l) {
+                if (i >= 0 && i <= 2) {
+                    SettingsController.changeMode(getActivity(), i);
+                    adapterView.setSelection(i);
+                }
+            }
+
+            @Override
+            public void onNothingSelected(AdapterView<?> adapterView) {
+            }
+        });
+        return view;
+    }
+}
\ No newline at end of file
diff --git a/app/src/main/java/com/github/doomsdayrs/apps/shosetsu/ui/main/settings/BackupSettings.java b/app/src/main/java/com/github/doomsdayrs/apps/shosetsu/ui/main/settings/BackupSettings.java
new file mode 100644
index 000000000..303021291
--- /dev/null
+++ b/app/src/main/java/com/github/doomsdayrs/apps/shosetsu/ui/main/settings/BackupSettings.java
@@ -0,0 +1,50 @@
+package com.github.doomsdayrs.apps.shosetsu.ui.main.settings;
+/*
+ * This file is part of Shosetsu.
+ * Shosetsu is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation, either version 3 of the License, or
+ * (at your option) any later version.
+ * Foobar is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ * You should have received a copy of the GNU General Public License
+ * along with Shosetsu.  If not, see https://www.gnu.org/licenses/ .
+ * ====================================================================
+ * Shosetsu
+ * 13 / 07 / 2019
+ *
+ * @author github.com/doomsdayrs
+ */
+
+import android.os.Bundle;
+import android.util.Log;
+import android.view.LayoutInflater;
+import android.view.View;
+import android.view.ViewGroup;
+import android.widget.Button;
+
+import androidx.annotation.NonNull;
+import androidx.annotation.Nullable;
+import androidx.fragment.app.Fragment;
+
+import com.github.doomsdayrs.apps.shosetsu.R;
+import com.github.doomsdayrs.apps.shosetsu.backend.database.Database;
+
+public class BackupSettings extends Fragment {
+    Button button;
+
+    public BackupSettings() {
+    }
+
+    @Nullable
+    @Override
+    public View onCreateView(@NonNull LayoutInflater inflater, @Nullable ViewGroup container, @Nullable Bundle savedInstanceState) {
+        Log.d("OnCreateView", "BackupSettings");
+        View view = inflater.inflate(R.layout.settings_backup, container, false);
+        button = view.findViewById(R.id.settings_backup_now);
+        button.setOnClickListener(view1 -> Database.backupDatabase());
+        return view;
+    }
+}
\ No newline at end of file
diff --git a/app/src/main/java/com/github/doomsdayrs/apps/shosetsu/ui/main/settings/CreditsSettings.java b/app/src/main/java/com/github/doomsdayrs/apps/shosetsu/ui/main/settings/CreditsSettings.java
new file mode 100644
index 000000000..73a7ea3d6
--- /dev/null
+++ b/app/src/main/java/com/github/doomsdayrs/apps/shosetsu/ui/main/settings/CreditsSettings.java
@@ -0,0 +1,41 @@
+package com.github.doomsdayrs.apps.shosetsu.ui.main.settings;
+/*
+ * This file is part of Shosetsu.
+ * Shosetsu is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation, either version 3 of the License, or
+ * (at your option) any later version.
+ * Foobar is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ * You should have received a copy of the GNU General Public License
+ * along with Shosetsu.  If not, see https://www.gnu.org/licenses/ .
+ * ====================================================================
+ * Shosetsu
+ * 13 / 07 / 2019
+ *
+ * @author github.com/doomsdayrs
+ */
+
+import android.os.Bundle;
+import android.util.Log;
+import android.view.LayoutInflater;
+import android.view.View;
+import android.view.ViewGroup;
+
+import androidx.annotation.NonNull;
+import androidx.annotation.Nullable;
+import androidx.fragment.app.Fragment;
+
+import com.github.doomsdayrs.apps.shosetsu.R;
+
+public class CreditsSettings extends Fragment {
+
+    @Nullable
+    @Override
+    public View onCreateView(@NonNull LayoutInflater inflater, @Nullable ViewGroup container, @Nullable Bundle savedInstanceState) {
+        Log.d("OnCreateView", "ViewSettings");
+        return inflater.inflate(R.layout.settings_credits, container, false);
+    }
+}
diff --git a/app/src/main/java/com/github/doomsdayrs/apps/shosetsu/ui/main/settings/DownloadSettings.java b/app/src/main/java/com/github/doomsdayrs/apps/shosetsu/ui/main/settings/DownloadSettings.java
new file mode 100644
index 000000000..0006354fe
--- /dev/null
+++ b/app/src/main/java/com/github/doomsdayrs/apps/shosetsu/ui/main/settings/DownloadSettings.java
@@ -0,0 +1,88 @@
+package com.github.doomsdayrs.apps.shosetsu.ui.main.settings;
+/*
+ * This file is part of Shosetsu.
+ * Shosetsu is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation, either version 3 of the License, or
+ * (at your option) any later version.
+ * Foobar is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ * You should have received a copy of the GNU General Public License
+ * along with Shosetsu.  If not, see https://www.gnu.org/licenses/ .
+ * ====================================================================
+ * Shosetsu
+ * 13 / 07 / 2019
+ *
+ * @author github.com/doomsdayrs
+ */
+
+import android.app.Activity;
+import android.content.Intent;
+import android.os.Bundle;
+import android.util.Log;
+import android.view.LayoutInflater;
+import android.view.View;
+import android.view.ViewGroup;
+import android.widget.TextView;
+import android.widget.Toast;
+
+import androidx.annotation.NonNull;
+import androidx.annotation.Nullable;
+import androidx.fragment.app.Fragment;
+
+import com.github.doomsdayrs.apps.shosetsu.R;
+import com.github.doomsdayrs.apps.shosetsu.backend.Download_Manager;
+import com.github.doomsdayrs.apps.shosetsu.backend.SettingsController;
+
+import java.util.Objects;
+
+public class DownloadSettings extends Fragment {
+
+    TextView textView;
+
+    public DownloadSettings() {
+    }
+
+    @Nullable
+    @Override
+    public View onCreateView(@NonNull LayoutInflater inflater, @Nullable ViewGroup container, @Nullable Bundle savedInstanceState) {
+        Log.d("OnCreateView", "DownloadSettings");
+        View view = inflater.inflate(R.layout.settings_download, container, false);
+        textView = view.findViewById(R.id.settings_download_dir);
+        textView.setText(Download_Manager.shoDir);
+        textView.setOnClickListener(view1 -> performFileSearch());
+        return view;
+    }
+
+    private void setDir(String dir) {
+        SettingsController.download.edit().putString("dir", dir).apply();
+        Download_Manager.shoDir = dir;
+        textView.setText(dir);
+    }
+
+    void performFileSearch() {
+        Toast.makeText(getContext(), "Please make sure this is on the main storage, SD card storage is not functional yet", Toast.LENGTH_LONG).show();
+        Intent i = new Intent(Intent.ACTION_OPEN_DOCUMENT_TREE);
+        i.addCategory(Intent.CATEGORY_DEFAULT);
+        startActivityForResult(Intent.createChooser(i, "Choose directory"), 42);
+    }
+
+    @Override
+    public void onActivityResult(int requestCode, int resultCode, Intent data) {
+        super.onActivityResult(requestCode, resultCode, data);
+        if (requestCode == 42 && resultCode == Activity.RESULT_OK) {
+            // The document selected by the user won't be returned in the intent.
+            // Instead, a URI to that document will be contained in the return intent
+            // provided to this method as a parameter.
+            // Pull that URI using resultData.getData().
+            if (data != null) {
+                String path = Objects.requireNonNull(data.getData()).getPath();
+                Log.i("Selected Folder", "Uri: " + path);
+                setDir(path.substring(Objects.requireNonNull(path).indexOf(":") + 1));
+            }
+        }
+
+    }
+}
\ No newline at end of file
diff --git a/app/src/main/java/com/github/doomsdayrs/apps/shosetsu/ui/main/settings/ViewSettings.java b/app/src/main/java/com/github/doomsdayrs/apps/shosetsu/ui/main/settings/ViewSettings.java
new file mode 100644
index 000000000..256ed2926
--- /dev/null
+++ b/app/src/main/java/com/github/doomsdayrs/apps/shosetsu/ui/main/settings/ViewSettings.java
@@ -0,0 +1,207 @@
+package com.github.doomsdayrs.apps.shosetsu.ui.main.settings;
+/*
+ * This file is part of Shosetsu.
+ * Shosetsu is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation, either version 3 of the License, or
+ * (at your option) any later version.
+ * Foobar is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ * You should have received a copy of the GNU General Public License
+ * along with Shosetsu.  If not, see https://www.gnu.org/licenses/ .
+ * ====================================================================
+ * Shosetsu
+ * 13 / 07 / 2019
+ *
+ * @author github.com/doomsdayrs
+ */
+
+import android.os.Bundle;
+import android.util.Log;
+import android.view.LayoutInflater;
+import android.view.ViewGroup;
+import android.widget.AdapterView;
+import android.widget.ArrayAdapter;
+import android.widget.CheckBox;
+import android.widget.Spinner;
+
+import androidx.annotation.NonNull;
+import androidx.annotation.Nullable;
+import androidx.fragment.app.Fragment;
+
+import com.github.doomsdayrs.apps.shosetsu.R;
+import com.github.doomsdayrs.apps.shosetsu.backend.SettingsController;
+import com.github.doomsdayrs.apps.shosetsu.variables.Settings;
+
+import java.util.ArrayList;
+import java.util.List;
+
+public class ViewSettings extends Fragment {
+    static final List<String> textSizes = new ArrayList<>();
+    static final List<String> paragraphSpaces = new ArrayList<>();
+    static final List<String> indentSizes = new ArrayList<>();
+
+    static {
+        textSizes.add("Small");
+        textSizes.add("Medium");
+        textSizes.add("Large");
+
+        paragraphSpaces.add("None");
+        paragraphSpaces.add("Small");
+        paragraphSpaces.add("Medium");
+        paragraphSpaces.add("Large");
+
+        indentSizes.add("None");
+        indentSizes.add("Small");
+        indentSizes.add("Medium");
+        indentSizes.add("Large");
+    }
+
+    CheckBox nightMode;
+    Spinner paragraphSpacing;
+    Spinner textSize;
+    Spinner indentSize;
+
+    public ViewSettings() {
+    }
+
+    @Nullable
+    @Override
+    public android.view.View onCreateView(@NonNull LayoutInflater inflater, @Nullable ViewGroup container, @Nullable Bundle savedInstanceState) {
+        Log.d("OnCreateView", "ViewSettings");
+        android.view.View view = inflater.inflate(R.layout.settings_view, container, false);
+        nightMode = view.findViewById(R.id.reader_nightMode_checkbox);
+        paragraphSpacing = view.findViewById(R.id.reader_paragraphSpacing);
+        textSize = view.findViewById(R.id.reader_textSize);
+        indentSize = view.findViewById(R.id.reader_indentSize);
+
+        nightMode.setChecked(!SettingsController.isReaderLightMode());
+        nightMode.setOnCheckedChangeListener((buttonView, isChecked) -> SettingsController.swapReaderColor());
+
+        if (getContext() != null) {
+            {
+                ArrayAdapter<String> dataAdapter = new ArrayAdapter<>(getContext(), android.R.layout.simple_spinner_item, textSizes);
+                textSize.setAdapter(dataAdapter);
+                switch ((int) Settings.ReaderTextSize) {
+                    default:
+                    case 14:
+                        textSize.setSelection(0);
+                        break;
+                    case 17:
+                        textSize.setSelection(1);
+                        break;
+                    case 20:
+                        textSize.setSelection(2);
+                        break;
+                }
+
+                textSize.setOnItemSelectedListener(new AdapterView.OnItemSelectedListener() {
+                    @Override
+                    public void onItemSelected(AdapterView<?> adapterView, android.view.View view, int i, long l) {
+                        if (i >= 0 && i <= 2) {
+                            int size = 14;
+                            switch (i) {
+                                case 0:
+                                    break;
+                                case 1:
+                                    size = 17;
+                                    break;
+                                case 2:
+                                    size = 20;
+                                    break;
+                            }
+                            SettingsController.setTextSize(size);
+                            adapterView.setSelection(i);
+                        }
+                    }
+
+                    @Override
+                    public void onNothingSelected(AdapterView<?> adapterView) {
+                    }
+                });
+            }
+            {
+                ArrayAdapter<String> dataAdapter = new ArrayAdapter<>(getContext(), android.R.layout.simple_spinner_item, paragraphSpaces);
+                //TODO figure out why the itemSelectedListner runs without being selected
+                int spaceBack = Settings.paragraphSpacing;
+
+                switch (Settings.paragraphSpacing) {
+                    case 0:
+                        paragraphSpacing.setSelection(0);
+                        break;
+                    case 1:
+                        paragraphSpacing.setSelection(1);
+                        break;
+                    case 2:
+                        paragraphSpacing.setSelection(2);
+                        break;
+                    case 3:
+                        paragraphSpacing.setSelection(3);
+                        break;
+                }
+
+                paragraphSpacing.setAdapter(dataAdapter);
+
+                paragraphSpacing.setOnItemSelectedListener(new AdapterView.OnItemSelectedListener() {
+                    @Override
+                    public void onItemSelected(AdapterView<?> adapterView, android.view.View view, int i, long l) {
+                        if (i >= 0 && i <= 3) {
+                            SettingsController.changeParagraphSpacing(i);
+                            adapterView.setSelection(i);
+                        }
+                    }
+
+                    @Override
+                    public void onNothingSelected(AdapterView<?> adapterView) {
+
+                    }
+                });
+
+                SettingsController.changeParagraphSpacing(spaceBack);
+                switch (Settings.paragraphSpacing) {
+                    case 0:
+                        paragraphSpacing.setSelection(0);
+                        break;
+                    case 1:
+                        paragraphSpacing.setSelection(1);
+                        break;
+                    case 2:
+                        paragraphSpacing.setSelection(2);
+                        break;
+                    case 3:
+                        paragraphSpacing.setSelection(3);
+                        break;
+                }
+
+            }
+
+            {
+                ArrayAdapter<String> dataAdapter = new ArrayAdapter<>(getContext(), android.R.layout.simple_spinner_item, indentSizes);
+                //TODO figure out why the itemSelectedListner runs without being selected
+                int spaceBack = Settings.indentSize;
+                indentSize.setSelection(Settings.indentSize);
+                indentSize.setAdapter(dataAdapter);
+                indentSize.setOnItemSelectedListener(new AdapterView.OnItemSelectedListener() {
+                    @Override
+                    public void onItemSelected(AdapterView<?> adapterView, android.view.View view, int i, long l) {
+                        if (i >= 0 && i <= 3) {
+                            SettingsController.changeIndentSize(i);
+                            adapterView.setSelection(i);
+                        }
+                    }
+
+                    @Override
+                    public void onNothingSelected(AdapterView<?> adapterView) {
+
+                    }
+                });
+                SettingsController.changeIndentSize(spaceBack);
+                indentSize.setSelection(Settings.indentSize);
+            }
+        }
+
+        return view;
+    }
+}
diff --git a/app/src/main/java/com/github/doomsdayrs/apps/shosetsu/ui/novel/NovelFragmentChapters.java b/app/src/main/java/com/github/doomsdayrs/apps/shosetsu/ui/novel/NovelFragmentChapters.java
index f22871c3b..266b6f092 100644
--- a/app/src/main/java/com/github/doomsdayrs/apps/shosetsu/ui/novel/NovelFragmentChapters.java
+++ b/app/src/main/java/com/github/doomsdayrs/apps/shosetsu/ui/novel/NovelFragmentChapters.java
@@ -25,7 +25,7 @@ import com.github.doomsdayrs.apps.shosetsu.backend.async.ChapterLoader;
 import com.github.doomsdayrs.apps.shosetsu.backend.database.Database;
 import com.github.doomsdayrs.apps.shosetsu.ui.adapters.novel.ChaptersAdapter;
 import com.github.doomsdayrs.apps.shosetsu.ui.listeners.NovelFragmentChaptersOnFilter;
-import com.github.doomsdayrs.apps.shosetsu.variables.download.DownloadItem;
+import com.github.doomsdayrs.apps.shosetsu.variables.DownloadItem;
 import com.github.doomsdayrs.apps.shosetsu.variables.enums.Status;
 
 import java.util.ArrayList;
diff --git a/app/src/main/java/com/github/doomsdayrs/apps/shosetsu/ui/viewholders/ChaptersViewHolder.java b/app/src/main/java/com/github/doomsdayrs/apps/shosetsu/ui/viewholders/ChaptersViewHolder.java
index 3d9e5867b..b788a160e 100644
--- a/app/src/main/java/com/github/doomsdayrs/apps/shosetsu/ui/viewholders/ChaptersViewHolder.java
+++ b/app/src/main/java/com/github/doomsdayrs/apps/shosetsu/ui/viewholders/ChaptersViewHolder.java
@@ -18,7 +18,7 @@ import com.github.doomsdayrs.apps.shosetsu.backend.database.Database;
 import com.github.doomsdayrs.apps.shosetsu.ui.novel.NovelFragmentChapterReader;
 import com.github.doomsdayrs.apps.shosetsu.ui.novel.NovelFragmentChapters;
 import com.github.doomsdayrs.apps.shosetsu.ui.novel.StaticNovel;
-import com.github.doomsdayrs.apps.shosetsu.variables.download.DownloadItem;
+import com.github.doomsdayrs.apps.shosetsu.variables.DownloadItem;
 import com.github.doomsdayrs.apps.shosetsu.variables.enums.Status;
 import com.google.android.material.card.MaterialCardView;
 
diff --git a/app/src/main/java/com/github/doomsdayrs/apps/shosetsu/ui/viewholders/SettingsCardViewHolder.java b/app/src/main/java/com/github/doomsdayrs/apps/shosetsu/ui/viewholders/SettingsCardViewHolder.java
new file mode 100644
index 000000000..5d40e01fb
--- /dev/null
+++ b/app/src/main/java/com/github/doomsdayrs/apps/shosetsu/ui/viewholders/SettingsCardViewHolder.java
@@ -0,0 +1,49 @@
+package com.github.doomsdayrs.apps.shosetsu.ui.viewholders;
+/*
+ * This file is part of Shosetsu.
+ * Shosetsu is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation, either version 3 of the License, or
+ * (at your option) any later version.
+ * Foobar is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ * You should have received a copy of the GNU General Public License
+ * along with Shosetsu.  If not, see https://www.gnu.org/licenses/ .
+ * ====================================================================
+ * Shosetsu
+ * 13 / 07 / 2019
+ *
+ * @author github.com/doomsdayrs
+ */
+
+import android.view.View;
+import android.widget.TextView;
+
+import androidx.annotation.NonNull;
+import androidx.cardview.widget.CardView;
+import androidx.fragment.app.FragmentManager;
+import androidx.recyclerview.widget.RecyclerView;
+
+import com.github.doomsdayrs.apps.shosetsu.R;
+import com.github.doomsdayrs.apps.shosetsu.ui.listeners.OnSettingsCardClick;
+import com.github.doomsdayrs.apps.shosetsu.variables.enums.Types;
+
+public class SettingsCardViewHolder extends RecyclerView.ViewHolder {
+    final TextView library_card_title;
+    final CardView cardView;
+    final FragmentManager fragmentManager;
+
+    public SettingsCardViewHolder(@NonNull View itemView, FragmentManager fragmentManager) {
+        super(itemView);
+        library_card_title = itemView.findViewById(R.id.recycler_settings_title);
+        cardView = itemView.findViewById(R.id.settings_card);
+        this.fragmentManager = fragmentManager;
+    }
+
+    public void setType(Types type) {
+        cardView.setOnClickListener(new OnSettingsCardClick(type, fragmentManager));
+        library_card_title.setText(type.toString());
+    }
+}
\ No newline at end of file
diff --git a/app/src/main/java/com/github/doomsdayrs/apps/shosetsu/variables/download/DownloadItem.java b/app/src/main/java/com/github/doomsdayrs/apps/shosetsu/variables/DownloadItem.java
similarity index 97%
rename from app/src/main/java/com/github/doomsdayrs/apps/shosetsu/variables/download/DownloadItem.java
rename to app/src/main/java/com/github/doomsdayrs/apps/shosetsu/variables/DownloadItem.java
index 9fc66c52b..120d4ec4c 100644
--- a/app/src/main/java/com/github/doomsdayrs/apps/shosetsu/variables/download/DownloadItem.java
+++ b/app/src/main/java/com/github/doomsdayrs/apps/shosetsu/variables/DownloadItem.java
@@ -1,4 +1,4 @@
-package com.github.doomsdayrs.apps.shosetsu.variables.download;
+package com.github.doomsdayrs.apps.shosetsu.variables;
 
 import com.github.Doomsdayrs.api.novelreader_core.services.core.dep.Formatter;
 
