diff --git a/app/src/floss/java/com/mattgmg/miracastwidget/MainActivity.java b/app/src/floss/java/com/mattgmg/miracastwidget/MainActivity.java
new file mode 100644
index 0000000..572b950
--- /dev/null
+++ b/app/src/floss/java/com/mattgmg/miracastwidget/MainActivity.java
@@ -0,0 +1,121 @@
+package com.mattgmg.miracastwidget;
+
+import android.app.Activity;
+import android.appwidget.AppWidgetManager;
+import android.content.ActivityNotFoundException;
+import android.content.ComponentName;
+import android.content.Intent;
+import android.content.pm.ApplicationInfo;
+import android.content.pm.PackageManager;
+import android.content.pm.ResolveInfo;
+import android.os.Bundle;
+import android.view.Menu;
+import android.widget.Toast;
+
+import java.util.List;
+
+public class MainActivity extends Activity {
+
+	public static final String ACTION_WIFI_DISPLAY_SETTINGS = "android.settings.WIFI_DISPLAY_SETTINGS";
+    public static final String ACTION_CAST_SETTINGS = "android.settings.CAST_SETTINGS";
+    public static final String EXTRA_WIDGET_LAUNCH = "widget_launch";
+
+	@Override
+	protected void onCreate(Bundle savedInstanceState) {
+		super.onCreate(savedInstanceState);
+		setContentView(R.layout.activity_main);
+
+        updateWidget();
+
+        Intent wifiActionIntent = new Intent(ACTION_WIFI_DISPLAY_SETTINGS);
+        Intent castActionIntent = new Intent(ACTION_CAST_SETTINGS);
+
+        ResolveInfo systemResolveInfo = getSystemResolveInfo(wifiActionIntent);
+        if(systemResolveInfo != null){
+            try {
+                Intent systemWifiIntent = new Intent();
+                systemWifiIntent.setClassName(systemResolveInfo.activityInfo.applicationInfo.packageName,
+                                    systemResolveInfo.activityInfo.name);
+                startSettingsActivity(systemWifiIntent);
+                finish();
+                return;
+            } catch (ActivityNotFoundException exception) {
+                // We'll show an error below if the next Intent can't be launched
+                exception.printStackTrace();
+            }
+        }
+
+        systemResolveInfo = getSystemResolveInfo(castActionIntent);
+        if(systemResolveInfo != null) {
+            try {
+                Intent systemCastIntent = new Intent();
+                systemCastIntent.setClassName(systemResolveInfo.activityInfo.applicationInfo.packageName,
+                                    systemResolveInfo.activityInfo.name);
+                startSettingsActivity(systemCastIntent);
+                finish();
+                return;
+            } catch (ActivityNotFoundException exception) {
+                // Show an error in the block below.
+                exception.printStackTrace();
+            }
+        }
+
+        // Show an error and fail
+        showErrorToast();
+        finish();
+	}
+
+    private void updateWidget() {
+        Intent intent = new Intent(this, MiracastWidgetProvider.class);
+        intent.setAction(AppWidgetManager.ACTION_APPWIDGET_UPDATE);
+        int[] ids
+                = AppWidgetManager.getInstance(getApplication())
+                        .getAppWidgetIds(new ComponentName(getApplication(), MiracastWidgetProvider.class));
+        if (ids != null) {
+            intent.putExtra(AppWidgetManager.EXTRA_APPWIDGET_IDS, ids);
+            sendBroadcast(intent);
+        }
+    }
+
+    private void showErrorToast() {
+        String errorMessage = getResources().getString(R.string.error_toast);
+        Toast.makeText(this, errorMessage, Toast.LENGTH_LONG).show();
+    }
+	
+    private ResolveInfo getSystemResolveInfo(Intent intent) {
+        PackageManager pm = getPackageManager();
+        List<ResolveInfo> list = pm.queryIntentActivities(intent, PackageManager.MATCH_DEFAULT_ONLY);
+        for (ResolveInfo info : list) {
+            try {
+                ApplicationInfo activityInfo = pm.getApplicationInfo(info.activityInfo.packageName,
+                                                                   0);
+                if ((activityInfo.flags & ApplicationInfo.FLAG_SYSTEM) != 0) {
+                    return info;
+                }
+            } catch (PackageManager.NameNotFoundException e) {
+                e.printStackTrace();
+            }
+        }
+        return null;
+    }
+	
+    private void startSettingsActivity(Intent intent) {
+        intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK | Intent.FLAG_ACTIVITY_CLEAR_TOP);
+        try {
+            startActivity(intent);
+        } catch (SecurityException e) {
+            // We don't have permission to launch this activity, alert the user and return.
+            e.printStackTrace();
+            showErrorToast();
+        }
+    } 
+
+    @Override
+    public boolean onCreateOptionsMenu(Menu menu) {
+        // Inflate the menu; this adds items to the
+        // action bar if it is present.
+        getMenuInflater().inflate(R.menu.main, menu);
+        return true;
+	}
+
+}
diff --git a/app/src/floss/java/com/mattgmg/miracastwidget/MiracastApplication.java b/app/src/floss/java/com/mattgmg/miracastwidget/MiracastApplication.java
new file mode 100644
index 0000000..f1aa6e7
--- /dev/null
+++ b/app/src/floss/java/com/mattgmg/miracastwidget/MiracastApplication.java
@@ -0,0 +1,10 @@
+package com.mattgmg.miracastwidget;
+
+import androidx.multidex.MultiDexApplication;
+
+/**
+ * An application subclass to contain shared objects. Used right now for Google Analytics.
+ */
+public class MiracastApplication extends MultiDexApplication {
+
+}
diff --git a/app/src/floss/java/com/mattgmg/miracastwidget/MiracastWidgetProvider.java b/app/src/floss/java/com/mattgmg/miracastwidget/MiracastWidgetProvider.java
new file mode 100644
index 0000000..2d0f4ce
--- /dev/null
+++ b/app/src/floss/java/com/mattgmg/miracastwidget/MiracastWidgetProvider.java
@@ -0,0 +1,102 @@
+package com.mattgmg.miracastwidget;
+
+import android.app.PendingIntent;
+import android.appwidget.AppWidgetManager;
+import android.appwidget.AppWidgetProvider;
+import android.content.Context;
+import android.content.Intent;
+import android.hardware.display.DisplayManager;
+import android.hardware.display.DisplayManager.DisplayListener;
+import android.view.Display;
+import android.widget.RemoteViews;
+
+public class MiracastWidgetProvider extends AppWidgetProvider {
+
+	@Override
+	public void onUpdate(Context context, AppWidgetManager appWidgetManager, int[] appWidgetIds) {
+        final int length = appWidgetIds.length;
+
+        for (int i = 0; i < length; i++) {
+            int appWidgetId = appWidgetIds[i];
+
+            Intent intent = new Intent(context, MainActivity.class);
+            intent.putExtra(MainActivity.EXTRA_WIDGET_LAUNCH, true);
+            PendingIntent pendingIntent = PendingIntent.getActivity(context, 0,
+                                                    intent, PendingIntent.FLAG_UPDATE_CURRENT);
+
+            final RemoteViews views = new RemoteViews(context.getPackageName(), R.layout.miracast_widget);
+            views.setOnClickPendingIntent(R.id.widget_layout_parent, pendingIntent);
+            final DisplayManager displayManager = (DisplayManager) context.getSystemService(Context.DISPLAY_SERVICE);
+
+            Display[] displays = displayManager.getDisplays();
+            boolean displaySet = false;
+            int currentDisplay = -1;
+            for(int j = 0; j < displays.length; j++){
+            	Display display = displays[j];
+            	if(display.getDisplayId() != Display.DEFAULT_DISPLAY){
+                    views.setTextViewText(R.id.widget_text, display.getName());
+                    views.setTextColor(R.id.widget_text, context.getResources().getColor(android.R.color.holo_blue_bright));
+                    currentDisplay = display.getDisplayId();
+                    displaySet = true;
+            	}
+            }
+            
+            if(!displaySet){
+                views.setTextViewText(R.id.widget_text, "Cast Screen");
+                views.setTextColor(R.id.widget_text, context.getResources().getColor(android.R.color.white));
+            }
+
+            MiracastDisplayListener displayListener = new MiracastDisplayListener(currentDisplay, views, displayManager, appWidgetManager, appWidgetId, context);
+            displayManager.registerDisplayListener(displayListener, null);
+
+            // Tell the AppWidgetManager to perform an update on the current app widget
+            appWidgetManager.updateAppWidget(appWidgetId, views);
+        }
+    }
+	
+	private class MiracastDisplayListener implements DisplayListener {
+		int mCurrentDisplay = -1;
+		RemoteViews mViews;
+		DisplayManager mDisplayManager;
+		int mAppWidgetId;
+		AppWidgetManager mAppWidgetManager;
+		Context mContext;
+		
+		public MiracastDisplayListener(int currentDisplay, RemoteViews widgetRemoteViews, DisplayManager displayManager, AppWidgetManager appWidgetManager, int appWidgetId, Context context){
+			mCurrentDisplay = currentDisplay;
+			mViews = widgetRemoteViews;
+			mDisplayManager = displayManager;
+			mAppWidgetManager = appWidgetManager;
+			mAppWidgetId = appWidgetId;
+			mContext = context;
+		}
+				
+        @Override
+        public void onDisplayRemoved(int displayId) {
+            if(displayId == mCurrentDisplay){
+                    mCurrentDisplay = -1;
+            }
+            mViews.setTextViewText(R.id.widget_text, "Cast Screen");
+            mViews.setTextColor(R.id.widget_text, mContext.getResources().getColor(android.R.color.white));
+            
+            // Tell the AppWidgetManager to perform an update on the current app widget
+            mAppWidgetManager.updateAppWidget(mAppWidgetId, mViews);
+        }
+                
+        @Override
+        public void onDisplayChanged(int displayId) {
+                        
+        }
+                
+        @Override
+        public void onDisplayAdded(int displayId) {
+            mCurrentDisplay = displayId;
+            Display display = mDisplayManager.getDisplay(displayId);
+            mViews.setTextViewText(R.id.widget_text, display.getName());
+            mViews.setTextColor(R.id.widget_text, mContext.getResources().getColor(android.R.color.holo_blue_bright));
+
+            // Tell the AppWidgetManager to perform an update on the current app widget
+            mAppWidgetManager.updateAppWidget(mAppWidgetId, mViews);
+        }
+	}
+}
diff --git a/app/src/main/java/com/mattgmg/miracastwidget/MainActivity.java b/app/src/play/java/com/mattgmg/miracastwidget/MainActivity.java
similarity index 100%
rename from app/src/main/java/com/mattgmg/miracastwidget/MainActivity.java
rename to app/src/play/java/com/mattgmg/miracastwidget/MainActivity.java
diff --git a/app/src/main/java/com/mattgmg/miracastwidget/MiracastApplication.java b/app/src/play/java/com/mattgmg/miracastwidget/MiracastApplication.java
similarity index 100%
rename from app/src/main/java/com/mattgmg/miracastwidget/MiracastApplication.java
rename to app/src/play/java/com/mattgmg/miracastwidget/MiracastApplication.java
diff --git a/app/src/main/java/com/mattgmg/miracastwidget/MiracastWidgetProvider.java b/app/src/play/java/com/mattgmg/miracastwidget/MiracastWidgetProvider.java
similarity index 100%
rename from app/src/main/java/com/mattgmg/miracastwidget/MiracastWidgetProvider.java
rename to app/src/play/java/com/mattgmg/miracastwidget/MiracastWidgetProvider.java
