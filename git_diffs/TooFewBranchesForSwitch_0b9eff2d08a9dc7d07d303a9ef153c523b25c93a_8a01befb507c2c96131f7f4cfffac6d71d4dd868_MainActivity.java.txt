diff --git a/app/src/main/java/com/akansh/fileserversuit/Constants.java b/app/src/main/java/com/akansh/fileserversuit/Constants.java
index 1b532da..ff1cd16 100644
--- a/app/src/main/java/com/akansh/fileserversuit/Constants.java
+++ b/app/src/main/java/com/akansh/fileserversuit/Constants.java
@@ -18,7 +18,6 @@ public class Constants {
     public static final int SERVER_PORT_DEFAULT = 6060;
     public static final int SERVER_ON = 1;
     public static final int SERVER_OFF = 0;
-    public static final int MATISSE_REQ_CODE = 101;
     public static final int STORAGE_REQ_CODE = 1;
     public static final int CAMERA_REQ_CODE = 2;
     public static final int ITEM_TYPE_SENT = 0;
diff --git a/app/src/main/java/com/akansh/fileserversuit/GalleryUriResolver.java b/app/src/main/java/com/akansh/fileserversuit/GalleryUriResolver.java
deleted file mode 100644
index 9045692..0000000
--- a/app/src/main/java/com/akansh/fileserversuit/GalleryUriResolver.java
+++ /dev/null
@@ -1,215 +0,0 @@
-package com.akansh.fileserversuit;
-
-import android.content.ContentResolver;
-import android.content.ContentUris;
-import android.content.Context;
-import android.database.Cursor;
-import android.net.Uri;
-import android.os.Environment;
-import android.provider.DocumentsContract;
-import android.provider.MediaStore;
-
-public class GalleryUriResolver {
-
-    public static String getUriRealPath(Uri uri,Context ctx)
-    {
-        try {
-            String ret = "";
-            if (ctx != null && uri != null) {
-                if (isContentUri(uri)) {
-                    if (isGooglePhotoDoc(uri.getAuthority())) {
-                        ret = uri.getLastPathSegment();
-                    } else {
-                        ret = getImageRealPath(ctx.getContentResolver(), uri, null);
-                    }
-                } else if (isFileUri(uri)) {
-                    ret = uri.getPath();
-                } else if (isDocumentUri(ctx, uri)) {
-
-                    // Get uri related document id.
-                    String documentId = DocumentsContract.getDocumentId(uri);
-
-                    // Get uri authority.
-                    String uriAuthority = uri.getAuthority();
-
-                    if (isMediaDoc(uriAuthority)) {
-                        String idArr[] = documentId.split(":");
-                        if (idArr.length == 2) {
-                            // First item is document type.
-                            String docType = idArr[0];
-
-                            // Second item is document real id.
-                            String realDocId = idArr[1];
-
-                            // Get content uri by document type.
-                            Uri mediaContentUri = MediaStore.Images.Media.EXTERNAL_CONTENT_URI;
-                            if ("image".equals(docType)) {
-                                mediaContentUri = MediaStore.Images.Media.EXTERNAL_CONTENT_URI;
-                            } else if ("video".equals(docType)) {
-                                mediaContentUri = MediaStore.Video.Media.EXTERNAL_CONTENT_URI;
-                            } else if ("audio".equals(docType)) {
-                                mediaContentUri = MediaStore.Audio.Media.EXTERNAL_CONTENT_URI;
-                            }
-                            // Get where clause with real document id.
-                            String whereClause = MediaStore.Images.Media._ID + " = " + realDocId;
-                            ret = getImageRealPath(ctx.getContentResolver(), mediaContentUri, whereClause);
-                        }
-                    } else if (isDownloadDoc(uriAuthority)) {
-                        // Build download uri.
-                        Uri downloadUri = Uri.parse("content://downloads/public_downloads");
-
-                        // Append download document id at uri end.
-                        Uri downloadUriAppendId = ContentUris.withAppendedId(downloadUri, Long.valueOf(documentId));
-                        ret = getImageRealPath(ctx.getContentResolver(), downloadUriAppendId, null);
-                    } else if (isExternalStoreDoc(uriAuthority)) {
-                        String idArr[] = documentId.split(":");
-                        if (idArr.length == 2) {
-                            String type = idArr[0];
-                            String realDocId = idArr[1];
-                            if ("primary".equalsIgnoreCase(type)) {
-                                ret = Environment.getExternalStorageDirectory() + "/" + realDocId;
-                            }
-                        }
-                    }
-                }
-            }
-            return ret;
-        }catch (Exception e) {
-            return null;
-        }
-    }
-
-    /* Check whether this uri represent a document or not. */
-    private static boolean isDocumentUri(Context ctx, Uri uri)
-    {
-        boolean ret = false;
-        if(ctx != null && uri != null) {
-            ret = DocumentsContract.isDocumentUri(ctx, uri);
-        }
-        return ret;
-    }
-
-    /* Check whether this uri is a content uri or not.
-     *  content uri like content://media/external/images/media/1302716
-     *  */
-    private static boolean isContentUri(Uri uri)
-    {
-        boolean ret = false;
-        if(uri != null) {
-            String uriSchema = uri.getScheme();
-            if("content".equalsIgnoreCase(uriSchema))
-            {
-                ret = true;
-            }
-        }
-        return ret;
-    }
-
-    /* Check whether this uri is a file uri or not.
-     *  file uri like file:///storage/41B7-12F1/DCIM/Camera/IMG_20180211_095139.jpg
-     * */
-    private static boolean isFileUri(Uri uri)
-    {
-        boolean ret = false;
-        if(uri != null) {
-            String uriSchema = uri.getScheme();
-            if("file".equalsIgnoreCase(uriSchema))
-            {
-                ret = true;
-            }
-        }
-        return ret;
-    }
-
-
-    /* Check whether this document is provided by ExternalStorageProvider. */
-    private static boolean isExternalStoreDoc(String uriAuthority)
-    {
-        boolean ret = false;
-
-        if("com.android.externalstorage.documents".equals(uriAuthority))
-        {
-            ret = true;
-        }
-
-        return ret;
-    }
-
-    /* Check whether this document is provided by DownloadsProvider. */
-    private static boolean isDownloadDoc(String uriAuthority)
-    {
-        boolean ret = false;
-
-        if("com.android.providers.downloads.documents".equals(uriAuthority))
-        {
-            ret = true;
-        }
-
-        return ret;
-    }
-
-    /* Check whether this document is provided by MediaProvider. */
-    private static boolean isMediaDoc(String uriAuthority)
-    {
-        boolean ret = false;
-
-        if("com.android.providers.media.documents".equals(uriAuthority))
-        {
-            ret = true;
-        }
-
-        return ret;
-    }
-
-    /* Check whether this document is provided by google photos. */
-    private static boolean isGooglePhotoDoc(String uriAuthority)
-    {
-        boolean ret = false;
-
-        if("com.google.android.apps.photos.content".equals(uriAuthority))
-        {
-            ret = true;
-        }
-
-        return ret;
-    }
-
-    /* Return uri represented document file real local path.*/
-    private static String getImageRealPath(ContentResolver contentResolver, Uri uri, String whereClause)
-    {
-        String ret = "";
-
-        // Query the uri with condition.
-        Cursor cursor = contentResolver.query(uri, null, whereClause, null, null);
-
-        if(cursor!=null)
-        {
-            boolean moveToFirst = cursor.moveToFirst();
-            if(moveToFirst)
-            {
-
-                // Get columns name by uri type.
-                String columnName = MediaStore.Images.Media.DATA;
-
-                if( uri==MediaStore.Images.Media.EXTERNAL_CONTENT_URI )
-                {
-                    columnName = MediaStore.Images.Media.DATA;
-                }else if( uri==MediaStore.Audio.Media.EXTERNAL_CONTENT_URI )
-                {
-                    columnName = MediaStore.Audio.Media.DATA;
-                }else if( uri==MediaStore.Video.Media.EXTERNAL_CONTENT_URI )
-                {
-                    columnName = MediaStore.Video.Media.DATA;
-                }
-
-                // Get column index.
-                int imageColumnIndex = cursor.getColumnIndex(columnName);
-
-                // Get column value which is the uri related file local path.
-                ret = cursor.getString(imageColumnIndex);
-            }
-        }
-
-        return ret;
-    }
-}
diff --git a/app/src/main/java/com/akansh/fileserversuit/Glide4Engine.java b/app/src/main/java/com/akansh/fileserversuit/Glide4Engine.java
deleted file mode 100644
index cca1f12..0000000
--- a/app/src/main/java/com/akansh/fileserversuit/Glide4Engine.java
+++ /dev/null
@@ -1,67 +0,0 @@
-package com.akansh.fileserversuit;
-
-import android.content.Context;
-import android.graphics.drawable.Drawable;
-import android.net.Uri;
-import android.widget.ImageView;
-
-import com.bumptech.glide.Glide;
-import com.bumptech.glide.Priority;
-import com.bumptech.glide.request.RequestOptions;
-import com.zhihu.matisse.engine.ImageEngine;
-
-public class Glide4Engine implements ImageEngine {
-
-    @Override
-    public void loadThumbnail(Context context, int resize, Drawable placeholder, ImageView imageView, Uri uri) {
-        Glide.with(context)
-                .asBitmap() // some .jpeg files are actually gif
-                .load(uri)
-                .apply(new RequestOptions()
-                        .override(resize, resize)
-                        .placeholder(placeholder)
-                        .centerCrop())
-                .into(imageView);
-    }
-
-    @Override
-    public void loadGifThumbnail(Context context, int resize, Drawable placeholder, ImageView imageView,
-                                 Uri uri) {
-        Glide.with(context)
-                .asBitmap() // some .jpeg files are actually gif
-                .load(uri)
-                .apply(new RequestOptions()
-                        .override(resize, resize)
-                        .placeholder(placeholder)
-                        .centerCrop())
-                .into(imageView);
-    }
-
-    @Override
-    public void loadImage(Context context, int resizeX, int resizeY, ImageView imageView, Uri uri) {
-        Glide.with(context)
-                .load(uri)
-                .apply(new RequestOptions()
-                        .override(resizeX, resizeY)
-                        .priority(Priority.HIGH)
-                        .fitCenter())
-                .into(imageView);
-    }
-
-    @Override
-    public void loadGifImage(Context context, int resizeX, int resizeY, ImageView imageView, Uri uri) {
-        Glide.with(context)
-                .asGif()
-                .load(uri)
-                .apply(new RequestOptions()
-                        .override(resizeX, resizeY)
-                        .priority(Priority.HIGH)
-                        .fitCenter())
-                .into(imageView);
-    }
-
-    @Override
-    public boolean supportAnimatedGif() {
-        return true;
-    }
-}
diff --git a/app/src/main/java/com/akansh/fileserversuit/MainActivity.java b/app/src/main/java/com/akansh/fileserversuit/MainActivity.java
index 806513c..d006c6b 100644
--- a/app/src/main/java/com/akansh/fileserversuit/MainActivity.java
+++ b/app/src/main/java/com/akansh/fileserversuit/MainActivity.java
@@ -13,7 +13,6 @@ import android.content.Context;
 import android.content.DialogInterface;
 import android.content.Intent;
 import android.content.IntentFilter;
-import android.content.pm.ActivityInfo;
 import android.content.pm.PackageManager;
 import android.graphics.BitmapFactory;
 import android.graphics.Color;
@@ -24,12 +23,12 @@ import android.net.Uri;
 import android.net.wifi.SupplicantState;
 import android.net.wifi.WifiInfo;
 import android.net.wifi.WifiManager;
-import android.os.AsyncTask;
 import android.os.Build;
 import android.os.Bundle;
 import android.os.Environment;
 import android.os.Handler;
 import android.os.PowerManager;
+import android.provider.MediaStore;
 import android.provider.Settings;
 import android.text.InputType;
 import android.text.method.ScrollingMovementMethod;
@@ -53,6 +52,7 @@ import androidx.appcompat.app.AppCompatActivity;
 import androidx.cardview.widget.CardView;
 import androidx.constraintlayout.widget.ConstraintLayout;
 import androidx.core.app.ActivityCompat;
+import androidx.core.content.ContextCompat;
 import androidx.core.graphics.drawable.RoundedBitmapDrawable;
 import androidx.core.graphics.drawable.RoundedBitmapDrawableFactory;
 import androidx.core.view.GravityCompat;
@@ -69,8 +69,6 @@ import com.google.android.material.navigation.NavigationView;
 import com.google.android.material.snackbar.Snackbar;
 import com.google.android.material.textfield.TextInputLayout;
 import com.google.zxing.qrcode.decoder.ErrorCorrectionLevel;
-import com.zhihu.matisse.Matisse;
-import com.zhihu.matisse.MimeType;
 
 import java.io.File;
 import java.io.FileOutputStream;
@@ -116,6 +114,7 @@ public class MainActivity extends AppCompatActivity {
     ActivityResultLauncher<Intent> folderPickerResultLauncher;
     ActivityResultLauncher<Intent> batteryActivityResultLauncher;
     ActivityResultLauncher<Intent> mutipleFilesActivityResultLauncher;
+    ActivityResultLauncher<Intent> gallerySelectorActivityResultLauncher;
 
     int exit = 0;
     int currentTheme, storageChoice = 0;
@@ -222,6 +221,31 @@ public class MainActivity extends AppCompatActivity {
             }
         });
 
+        gallerySelectorActivityResultLauncher = registerForActivityResult(new ActivityResultContracts.StartActivityForResult(), result -> {
+            if (result.getResultCode() == Activity.RESULT_OK && result.getData() != null) {
+                Intent data = result.getData();
+
+                if (data.getClipData() != null) {
+                    int count = data.getClipData().getItemCount();
+                    for (int i = 0; i < count; i++) {
+                        Uri uri = data.getClipData().getItemAt(i).getUri();
+                        String path = utils.filePickerUriResolve(uri);
+                        if(path != null && !pmode_send_images.contains(path)) {
+                            pmode_send_images.add(path);
+                        }
+                    }
+                    mergeAndUpdatePFilesList();
+                }else if(data.getData() != null){
+                    Uri uri = data.getData();
+                    String path = utils.filePickerUriResolve(uri);
+                    if(path != null && !pmode_send_images.contains(path)) {
+                        pmode_send_images.add(path);
+                    }
+                    mergeAndUpdatePFilesList();
+                }
+            }
+        });
+
         batteryActivityResultLauncher = registerForActivityResult(new ActivityResultContracts.StartActivityForResult(), result -> {
             utils.saveSetting(Constants.ASKED_BATTERY_OPT,true);
         });
@@ -242,7 +266,8 @@ public class MainActivity extends AppCompatActivity {
                 }
             }
         };
-        registerReceiver(updateUIReciver, filter);
+//        registerReceiver(updateUIReciver, filter);
+        ContextCompat.registerReceiver(this, updateUIReciver, filter, ContextCompat.RECEIVER_NOT_EXPORTED);
         FloatingActionButton qrBtn = findViewById(R.id.qrBtn);
         qrBtn.setOnClickListener(v -> toggleQRView());
         hide_logger_btn.setOnClickListener(v -> {
@@ -253,14 +278,10 @@ public class MainActivity extends AppCompatActivity {
             @Override
             public void onClickImageSelect() {
                 try {
-                    Matisse.from(MainActivity.this)
-                            .choose(MimeType.ofAll(), false)
-                            .countable(true)
-                            .restrictOrientation(ActivityInfo.SCREEN_ORIENTATION_UNSPECIFIED)
-                            .maxSelectable(200)
-                            .theme(R.style.Matisse_Dracula)
-                            .imageEngine(new Glide4Engine())
-                            .forResult(Constants.MATISSE_REQ_CODE);
+                    Intent intent = new Intent(Intent.ACTION_PICK);
+                    intent.putExtra(Intent.EXTRA_ALLOW_MULTIPLE, true);
+                    intent.setDataAndType(MediaStore.Images.Media.EXTERNAL_CONTENT_URI, "image/* video/*");
+                    gallerySelectorActivityResultLauncher.launch(intent);
                 } catch (Exception e) {
                     pushLog(e.toString(), true);
                 }
@@ -387,21 +408,6 @@ public class MainActivity extends AppCompatActivity {
         super.onResume();
     }
 
-    @Override
-    public void onActivityResult(int requestCode, final int resultCode, Intent intent) {
-        switch (requestCode) {
-            case Constants.MATISSE_REQ_CODE:
-                if(resultCode == RESULT_OK) {
-                    pmode_send_images=new ArrayList<>();
-                    List<Uri> mSelected = Matisse.obtainResult(intent);
-                    pmode_send_images=utils.uriListResolve(mSelected);
-                    mergeAndUpdatePFilesList();
-                }
-                break;
-        }
-        super.onActivityResult(requestCode, resultCode, intent);
-    }
-
     @Override
     protected void onStart() {
         privateMode();
diff --git a/app/src/main/java/com/akansh/fileserversuit/Utils.java b/app/src/main/java/com/akansh/fileserversuit/Utils.java
index d4b1c49..25cdc9d 100644
--- a/app/src/main/java/com/akansh/fileserversuit/Utils.java
+++ b/app/src/main/java/com/akansh/fileserversuit/Utils.java
@@ -325,14 +325,6 @@ public class Utils {
         return path;
     }
 
-    public List<String> uriListResolve(List<Uri> uriList) {
-        List<String> paths = new ArrayList<>();
-        for (Uri uri : uriList) {
-            paths.add(GalleryUriResolver.getUriRealPath(uri, ctx));
-        }
-        return paths;
-    }
-
     public void verifyImage(File file) {
         BitmapFactory.Options options = new BitmapFactory.Options();
         options.inJustDecodeBounds = true;
