diff --git a/app/src/main/java/com/gianlu/aria2app/Google/UncaughtExceptionHandler.java b/app/src/main/java/com/gianlu/aria2app/Google/UncaughtExceptionHandler.java
index a29b92a5..1660bf3b 100644
--- a/app/src/main/java/com/gianlu/aria2app/Google/UncaughtExceptionHandler.java
+++ b/app/src/main/java/com/gianlu/aria2app/Google/UncaughtExceptionHandler.java
@@ -6,6 +6,7 @@ import android.app.Application;
 import android.content.DialogInterface;
 import android.content.Intent;
 
+import com.gianlu.aria2app.BuildConfig;
 import com.gianlu.aria2app.R;
 import com.gianlu.aria2app.Utils;
 import com.google.android.gms.analytics.HitBuilders;
@@ -23,8 +24,9 @@ public class UncaughtExceptionHandler implements Thread.UncaughtExceptionHandler
 
     @Override
     public void uncaughtException(final Thread thread, final Throwable throwable) {
-        throwable.printStackTrace();
-        Analytics.getDefaultTracker(application).send(new HitBuilders.ExceptionBuilder().setDescription(String.format(Locale.getDefault(), "Thread %d: %s @@ %s", thread.getId(), thread.getName(), throwable.toString() + "\n" + Arrays.toString(throwable.getStackTrace()))).setFatal(true).build());
+        if (BuildConfig.DEBUG) throwable.printStackTrace();
+        if (!BuildConfig.DEBUG)
+            Analytics.getDefaultTracker(application).send(new HitBuilders.ExceptionBuilder().setDescription(String.format(Locale.getDefault(), "Thread %d: %s @@ %s", thread.getId(), thread.getName(), throwable.toString() + "\n" + Arrays.toString(throwable.getStackTrace()))).setFatal(true).build());
 
         final AlertDialog.Builder builder = new AlertDialog.Builder(context);
         builder.setTitle(R.string.fatalException)
diff --git a/app/src/main/java/com/gianlu/aria2app/Main/DrawerManager.java b/app/src/main/java/com/gianlu/aria2app/Main/DrawerManager.java
index 54683395..8a48218c 100644
--- a/app/src/main/java/com/gianlu/aria2app/Main/DrawerManager.java
+++ b/app/src/main/java/com/gianlu/aria2app/Main/DrawerManager.java
@@ -1,9 +1,10 @@
 package com.gianlu.aria2app.Main;
 
+import android.animation.Animator;
 import android.app.Activity;
 import android.graphics.Color;
+import android.support.annotation.ColorRes;
 import android.support.annotation.DrawableRes;
-import android.support.annotation.Nullable;
 import android.support.v4.content.ContextCompat;
 import android.support.v4.view.GravityCompat;
 import android.support.v4.widget.DrawerLayout;
@@ -11,108 +12,153 @@ import android.view.View;
 import android.view.ViewGroup;
 import android.widget.ImageView;
 import android.widget.LinearLayout;
+import android.widget.ListView;
 import android.widget.TextView;
 
+import com.gianlu.aria2app.Main.Profile.MultiModeProfileItem;
+import com.gianlu.aria2app.Main.Profile.ProfileItem;
+import com.gianlu.aria2app.Main.Profile.ProfilesAdapter;
+import com.gianlu.aria2app.Main.Profile.SingleModeProfileItem;
 import com.gianlu.aria2app.R;
+import com.gianlu.aria2app.Utils;
+
+import org.json.JSONException;
+
+import java.io.File;
+import java.io.FileNotFoundException;
+import java.io.FilenameFilter;
+import java.io.IOException;
+import java.util.ArrayList;
+import java.util.List;
 
 public class DrawerManager {
     private Activity context;
     private DrawerLayout drawerLayout;
     private LinearLayout drawerList;
     private LinearLayout drawerFooterList;
+    private ListView drawerProfiles;
+    private LinearLayout drawerProfilesFooter;
     private IDrawerListener listener;
+    private ProfilesAdapter profilesAdapter;
 
+    private boolean isProfilesLockedUntilSelected;
 
     public DrawerManager(Activity context, DrawerLayout drawerLayout) {
         this.context = context;
         this.drawerLayout = drawerLayout;
         this.drawerList = (LinearLayout) drawerLayout.findViewById(R.id.mainDrawer_list);
         this.drawerFooterList = (LinearLayout) drawerLayout.findViewById(R.id.mainDrawer_footerList);
+        this.drawerProfiles = (ListView) drawerLayout.findViewById(R.id.mainDrawer_profiles);
+        this.drawerProfilesFooter = (LinearLayout) drawerLayout.findViewById(R.id.mainDrawer_profilesFooter);
     }
 
-    public void setDrawerListener(IDrawerListener listener) {
+    public DrawerManager setDrawerListener(IDrawerListener listener) {
         this.listener = listener;
+        return this;
+    }
+
+    public DrawerManager openProfiles(boolean lockUntilSelected) {
+        setDrawerState(true, true);
+        setProfilesState(true);
+
+        isProfilesLockedUntilSelected = lockUntilSelected;
+        if (lockUntilSelected) {
+            drawerLayout.setDrawerLockMode(DrawerLayout.LOCK_MODE_LOCKED_OPEN);
+            drawerLayout.findViewById(R.id.mainDrawerHeader_dropdown).setEnabled(false);
+        }
+
+        return this;
+    }
+
+    public DrawerManager setProfilesState(boolean open) {
+        if ((drawerLayout.findViewById(R.id.mainDrawer_profileContainer).getVisibility() == View.INVISIBLE && open)
+                || (drawerLayout.findViewById(R.id.mainDrawer_profileContainer).getVisibility() == View.VISIBLE && !open)) {
+            drawerLayout.findViewById(R.id.mainDrawerHeader_dropdown).callOnClick();
+        }
+
+        return this;
     }
 
-    public void setDrawerState(boolean open) {
+    public DrawerManager setDrawerState(boolean open, boolean animate) {
         if (open)
-            drawerLayout.openDrawer(GravityCompat.START, true);
+            drawerLayout.openDrawer(GravityCompat.START, animate);
         else
-            drawerLayout.closeDrawer(GravityCompat.START, true);
+            drawerLayout.closeDrawer(GravityCompat.START, animate);
+
+        return this;
     }
 
-    private View newItem(@DrawableRes int icon, String title, @Nullable String description, boolean primary) {
-        return newItem(icon, title, description, primary, -1);
+    private View newItem(@DrawableRes int icon, String title, boolean primary) {
+        return newItem(icon, title, primary, -1, -1, -1);
     }
 
-    private View newItem(@DrawableRes int icon, String title, @Nullable String description, boolean primary, int badgeNumber) {
+    private View newItem(@DrawableRes int icon, String title, boolean primary, int badgeNumber, @ColorRes int textColorRes, @ColorRes int tintRes) {
         int textColor;
-        if (primary)
+        if (textColorRes != -1)
+            textColor = ContextCompat.getColor(context, textColorRes);
+        else if (primary)
             textColor = Color.BLACK;
         else
             textColor = ContextCompat.getColor(context, R.color.colorPrimary_ripple);
 
         View view = View.inflate(context, R.layout.material_drawer_item_primary, null);
-        ((ImageView) view.findViewById(R.id.material_drawer_icon)).setImageResource(icon);
-        ((TextView) view.findViewById(R.id.material_drawer_name)).setText(title);
-        ((TextView) view.findViewById(R.id.material_drawer_name)).setTextColor(textColor);
-        if (description == null) {
-            view.findViewById(R.id.material_drawer_description).setVisibility(View.GONE);
-        } else {
-            view.findViewById(R.id.material_drawer_description).setVisibility(View.VISIBLE);
-            ((TextView) view.findViewById(R.id.material_drawer_description)).setText(description);
-            ((TextView) view.findViewById(R.id.material_drawer_description)).setTextColor(textColor);
-        }
+        if (tintRes != -1)
+            view.setBackgroundColor(ContextCompat.getColor(context, tintRes));
+        ((ImageView) view.findViewById(R.id.materialDrawer_itemIcon)).setImageResource(icon);
+        ((TextView) view.findViewById(R.id.materialDrawer_itemName)).setText(title);
+        ((TextView) view.findViewById(R.id.materialDrawer_itemName)).setTextColor(textColor);
         if (badgeNumber == -1) {
-            view.findViewById(R.id.material_drawer_badge_container).setVisibility(View.GONE);
+            view.findViewById(R.id.materialDrawer_itemBadgeContainer).setVisibility(View.GONE);
         } else {
-            view.findViewById(R.id.material_drawer_badge_container).setVisibility(View.VISIBLE);
-            ((TextView) view.findViewById(R.id.material_drawer_badge)).setText(String.valueOf(badgeNumber));
+            view.findViewById(R.id.materialDrawer_itemBadgeContainer).setVisibility(View.VISIBLE);
+            ((TextView) view.findViewById(R.id.materialDrawer_itemBadge)).setText(String.valueOf(badgeNumber));
         }
 
         return view;
     }
 
-    public void updateBadge(int num) {
+    public DrawerManager updateBadge(int num) {
         View view = drawerList.getChildAt(0);
 
         if (num == -1) {
-            view.findViewById(R.id.material_drawer_badge_container).setVisibility(View.GONE);
+            view.findViewById(R.id.materialDrawer_itemBadgeContainer).setVisibility(View.GONE);
         } else {
-            view.findViewById(R.id.material_drawer_badge_container).setVisibility(View.VISIBLE);
-            ((TextView) view.findViewById(R.id.material_drawer_badge)).setText(String.valueOf(num));
+            view.findViewById(R.id.materialDrawer_itemBadgeContainer).setVisibility(View.VISIBLE);
+            ((TextView) view.findViewById(R.id.materialDrawer_itemBadge)).setText(String.valueOf(num));
         }
+
+        return this;
     }
 
-    public void build() {
+    public DrawerManager buildMenu() {
         drawerList.removeAllViews();
 
-        View home = newItem(R.mipmap.ic_launcher, context.getString(R.string.home), null, true, 0);
+        View home = newItem(R.drawable.ic_home_black_48dp, context.getString(R.string.home), true, 0, R.color.colorAccent, R.color.colorAccent_tint);
         home.setOnClickListener(new View.OnClickListener() {
             @Override
             public void onClick(View view) {
                 if (listener != null)
-                    listener.onListItemSelected(DrawerListItems.HOME);
+                    setDrawerState(false, listener.onListItemSelected(DrawerListItems.HOME));
             }
         });
         drawerList.addView(home, 0);
 
-        View terminal = newItem(R.mipmap.ic_launcher, context.getString(R.string.terminal), null, true);
+        View terminal = newItem(R.drawable.ic_developer_board_black_48dp, context.getString(R.string.terminal), true);
         terminal.setOnClickListener(new View.OnClickListener() {
             @Override
             public void onClick(View view) {
                 if (listener != null)
-                    listener.onListItemSelected(DrawerListItems.TERMINAL);
+                    setDrawerState(false, listener.onListItemSelected(DrawerListItems.TERMINAL));
             }
         });
         drawerList.addView(terminal);
 
-        View globalOptions = newItem(R.mipmap.ic_launcher, context.getString(R.string.menu_globalOptions), null, true);
+        View globalOptions = newItem(R.drawable.ic_list_black_48dp, context.getString(R.string.menu_globalOptions), true);
         globalOptions.setOnClickListener(new View.OnClickListener() {
             @Override
             public void onClick(View view) {
                 if (listener != null)
-                    listener.onListItemSelected(DrawerListItems.GLOBAL_OPTIONS);
+                    setDrawerState(false, listener.onListItemSelected(DrawerListItems.GLOBAL_OPTIONS));
             }
         });
         drawerList.addView(globalOptions);
@@ -125,25 +171,245 @@ public class DrawerManager {
         divider.setBackgroundResource(R.color.colorPrimary_ripple);
         drawerFooterList.addView(divider, 0);
 
-        View preferences = newItem(R.mipmap.ic_launcher, context.getString(R.string.menu_preferences), null, false);
+        View preferences = newItem(R.drawable.ic_settings_black_48dp, context.getString(R.string.menu_preferences), false);
         preferences.setOnClickListener(new View.OnClickListener() {
             @Override
             public void onClick(View view) {
                 if (listener != null)
-                    listener.onListItemSelected(DrawerListItems.PREFERENCES);
+                    setDrawerState(false, listener.onListItemSelected(DrawerListItems.PREFERENCES));
             }
         });
         drawerFooterList.addView(preferences);
+
+        View support = newItem(R.drawable.ic_settings_black_48dp, context.getString(R.string.support), false);
+        support.setOnClickListener(new View.OnClickListener() {
+            @Override
+            public void onClick(View view) {
+                if (listener != null)
+                    setDrawerState(false, listener.onListItemSelected(DrawerListItems.SUPPORT));
+            }
+        });
+        drawerFooterList.addView(support);
+
+        final ImageView dropdownToggle = (ImageView) drawerLayout.findViewById(R.id.mainDrawerHeader_dropdown);
+
+        dropdownToggle.setOnClickListener(new View.OnClickListener() {
+            @Override
+            public void onClick(View view) {
+                final View profileContainer = drawerLayout.findViewById(R.id.mainDrawer_profileContainer);
+                final View menuContainer = drawerLayout.findViewById(R.id.mainDrawer_menuContainer);
+
+                if (profileContainer.getVisibility() == View.INVISIBLE) {
+                    dropdownToggle.animate()
+                            .rotation(180)
+                            .setDuration(200)
+                            .start();
+                    profileContainer.setVisibility(View.VISIBLE);
+                    profileContainer.setAlpha(0);
+                    profileContainer.animate()
+                            .alpha(1)
+                            .setListener(new Animator.AnimatorListener() {
+                                @Override
+                                public void onAnimationStart(Animator animator) {
+
+                                }
+
+                                @Override
+                                public void onAnimationEnd(Animator animator) {
+                                    profileContainer.setAlpha(1);
+                                    profilesAdapter.startProfilesTest();
+                                }
+
+                                @Override
+                                public void onAnimationCancel(Animator animator) {
+
+                                }
+
+                                @Override
+                                public void onAnimationRepeat(Animator animator) {
+
+                                }
+                            })
+                            .setDuration(200)
+                            .start();
+
+                    menuContainer.animate()
+                            .alpha(0)
+                            .setDuration(200)
+                            .setListener(new Animator.AnimatorListener() {
+                                @Override
+                                public void onAnimationStart(Animator animator) {
+
+                                }
+
+                                @Override
+                                public void onAnimationEnd(Animator animator) {
+                                    menuContainer.setVisibility(View.INVISIBLE);
+                                }
+
+                                @Override
+                                public void onAnimationCancel(Animator animator) {
+
+                                }
+
+                                @Override
+                                public void onAnimationRepeat(Animator animator) {
+
+                                }
+                            })
+                            .start();
+                } else {
+                    dropdownToggle.animate()
+                            .rotation(0)
+                            .setDuration(200)
+                            .start();
+
+                    menuContainer.setVisibility(View.VISIBLE);
+                    menuContainer.setAlpha(0);
+                    menuContainer.animate()
+                            .alpha(1)
+                            .setListener(new Animator.AnimatorListener() {
+                                @Override
+                                public void onAnimationStart(Animator animator) {
+
+                                }
+
+                                @Override
+                                public void onAnimationEnd(Animator animator) {
+                                    menuContainer.setAlpha(1);
+                                }
+
+                                @Override
+                                public void onAnimationCancel(Animator animator) {
+
+                                }
+
+                                @Override
+                                public void onAnimationRepeat(Animator animator) {
+
+                                }
+                            })
+                            .setDuration(200)
+                            .start();
+
+                    profileContainer.animate()
+                            .alpha(0)
+                            .setDuration(200)
+                            .setListener(new Animator.AnimatorListener() {
+                                @Override
+                                public void onAnimationStart(Animator animator) {
+
+                                }
+
+                                @Override
+                                public void onAnimationEnd(Animator animator) {
+                                    profileContainer.setVisibility(View.INVISIBLE);
+                                }
+
+                                @Override
+                                public void onAnimationCancel(Animator animator) {
+
+                                }
+
+                                @Override
+                                public void onAnimationRepeat(Animator animator) {
+
+                                }
+                            })
+                            .start();
+                }
+            }
+        });
+
+        return this;
+    }
+
+    public DrawerManager buildProfiles() {
+        drawerProfilesFooter.removeAllViews();
+
+        View divider = new View(context);
+        divider.setLayoutParams(new LinearLayout.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT, 2));
+        divider.setBackgroundResource(R.color.colorPrimary_ripple);
+        drawerProfilesFooter.addView(divider, 0);
+
+        View add = newItem(R.drawable.ic_add_black_48dp, context.getString(R.string.addProfile), false);
+        add.setOnClickListener(new View.OnClickListener() {
+            @Override
+            public void onClick(View view) {
+                if (listener != null)
+                    listener.onAddProfile();
+            }
+        });
+        drawerProfilesFooter.addView(add);
+
+        View manage = newItem(R.drawable.ic_settings_black_48dp, context.getString(R.string.manageProfiles), false);
+        manage.setOnClickListener(new View.OnClickListener() {
+            @Override
+            public void onClick(View view) {
+                if (listener != null)
+                    listener.onManageProfiles();
+            }
+        });
+        drawerProfilesFooter.addView(manage);
+
+        // Load profiles
+        List<ProfileItem> profiles = new ArrayList<>();
+        File files[] = context.getFilesDir().listFiles(new FilenameFilter() {
+            @Override
+            public boolean accept(File file, String s) {
+                return s.toLowerCase().endsWith(".profile");
+            }
+        });
+
+        for (File profile : files) {
+            try {
+                if (ProfileItem.isSingleMode(context, profile)) {
+                    profiles.add(SingleModeProfileItem.fromFile(context, profile));
+                } else {
+                    profiles.add(MultiModeProfileItem.fromFile(context, profile));
+                }
+            } catch (FileNotFoundException ex) {
+                Utils.UIToast(context, Utils.TOAST_MESSAGES.FILE_NOT_FOUND, ex);
+            } catch (JSONException | IOException ex) {
+                Utils.UIToast(context, Utils.TOAST_MESSAGES.FATAL_EXCEPTION, ex);
+                ex.printStackTrace();
+            }
+        }
+
+        profilesAdapter = new ProfilesAdapter(context, profiles, new ProfilesAdapter.IProfile() {
+            @Override
+            public void onProfileSelected(SingleModeProfileItem which) {
+                if (isProfilesLockedUntilSelected) {
+                    drawerLayout.setDrawerLockMode(DrawerLayout.LOCK_MODE_UNLOCKED);
+                    drawerLayout.findViewById(R.id.mainDrawerHeader_dropdown).setEnabled(true);
+
+                    isProfilesLockedUntilSelected = false;
+                }
+
+                if (listener != null)
+                    listener.onProfileItemSelected(which);
+            }
+        });
+        drawerProfiles.setAdapter(profilesAdapter);
+
+        return this;
     }
 
     public enum DrawerListItems {
         HOME,
         TERMINAL,
         GLOBAL_OPTIONS,
-        PREFERENCES
+        PREFERENCES,
+        SUPPORT
     }
 
     public interface IDrawerListener {
-        void onListItemSelected(DrawerListItems which);
+        boolean onListItemSelected(DrawerListItems which);
+
+        void onProfileItemSelected(SingleModeProfileItem profile);
+
+        void onAddProfile();
+
+        void onManageProfiles();
     }
 }
diff --git a/app/src/main/java/com/gianlu/aria2app/SelectProfile/AddProfileActivity.java b/app/src/main/java/com/gianlu/aria2app/Main/Profile/AddProfileActivity.java
similarity index 99%
rename from app/src/main/java/com/gianlu/aria2app/SelectProfile/AddProfileActivity.java
rename to app/src/main/java/com/gianlu/aria2app/Main/Profile/AddProfileActivity.java
index e0239a92..e18b5751 100644
--- a/app/src/main/java/com/gianlu/aria2app/SelectProfile/AddProfileActivity.java
+++ b/app/src/main/java/com/gianlu/aria2app/Main/Profile/AddProfileActivity.java
@@ -1,11 +1,10 @@
-package com.gianlu.aria2app.SelectProfile;
+package com.gianlu.aria2app.Main.Profile;
 
 import android.annotation.SuppressLint;
 import android.app.Activity;
 import android.app.AlertDialog;
 import android.content.Context;
 import android.content.DialogInterface;
-import android.content.Intent;
 import android.net.wifi.WifiConfiguration;
 import android.net.wifi.WifiManager;
 import android.os.Bundle;
@@ -35,7 +34,6 @@ import android.widget.TextView;
 import com.gianlu.aria2app.Google.Analytics;
 import com.gianlu.aria2app.NetIO.JTA2.JTA2;
 import com.gianlu.aria2app.R;
-import com.gianlu.aria2app.SelectProfileActivity;
 import com.gianlu.aria2app.Utils;
 import com.google.android.gms.analytics.HitBuilders;
 
@@ -966,11 +964,6 @@ public class AddProfileActivity extends AppCompatActivity {
         onBackPressed();
     }
 
-    @Override
-    public void onBackPressed() {
-        startActivity(new Intent(this, SelectProfileActivity.class).setFlags(Intent.FLAG_ACTIVITY_NEW_TASK | Intent.FLAG_ACTIVITY_CLEAR_TASK));
-    }
-
     private class SingleOnTextChangedListener implements TextWatcher {
         @Override
         public void beforeTextChanged(CharSequence charSequence, int i, int i1, int i2) {
diff --git a/app/src/main/java/com/gianlu/aria2app/SelectProfile/ConditionsCustomAdapter.java b/app/src/main/java/com/gianlu/aria2app/Main/Profile/ConditionsCustomAdapter.java
similarity index 98%
rename from app/src/main/java/com/gianlu/aria2app/SelectProfile/ConditionsCustomAdapter.java
rename to app/src/main/java/com/gianlu/aria2app/Main/Profile/ConditionsCustomAdapter.java
index 1137435f..f3e025c0 100644
--- a/app/src/main/java/com/gianlu/aria2app/SelectProfile/ConditionsCustomAdapter.java
+++ b/app/src/main/java/com/gianlu/aria2app/Main/Profile/ConditionsCustomAdapter.java
@@ -1,4 +1,4 @@
-package com.gianlu.aria2app.SelectProfile;
+package com.gianlu.aria2app.Main.Profile;
 
 import android.annotation.SuppressLint;
 import android.app.Activity;
diff --git a/app/src/main/java/com/gianlu/aria2app/SelectProfile/ConnectivityCondition.java b/app/src/main/java/com/gianlu/aria2app/Main/Profile/ConnectivityCondition.java
similarity index 97%
rename from app/src/main/java/com/gianlu/aria2app/SelectProfile/ConnectivityCondition.java
rename to app/src/main/java/com/gianlu/aria2app/Main/Profile/ConnectivityCondition.java
index 2c42b64b..ced432b9 100644
--- a/app/src/main/java/com/gianlu/aria2app/SelectProfile/ConnectivityCondition.java
+++ b/app/src/main/java/com/gianlu/aria2app/Main/Profile/ConnectivityCondition.java
@@ -1,4 +1,4 @@
-package com.gianlu.aria2app.SelectProfile;
+package com.gianlu.aria2app.Main.Profile;
 
 public class ConnectivityCondition {
     private TYPE type;
diff --git a/app/src/main/java/com/gianlu/aria2app/SelectProfile/DirectDownload.java b/app/src/main/java/com/gianlu/aria2app/Main/Profile/DirectDownload.java
similarity index 98%
rename from app/src/main/java/com/gianlu/aria2app/SelectProfile/DirectDownload.java
rename to app/src/main/java/com/gianlu/aria2app/Main/Profile/DirectDownload.java
index bf5891b9..78135b96 100644
--- a/app/src/main/java/com/gianlu/aria2app/SelectProfile/DirectDownload.java
+++ b/app/src/main/java/com/gianlu/aria2app/Main/Profile/DirectDownload.java
@@ -1,4 +1,4 @@
-package com.gianlu.aria2app.SelectProfile;
+package com.gianlu.aria2app.Main.Profile;
 
 import android.os.Parcel;
 import android.os.Parcelable;
diff --git a/app/src/main/java/com/gianlu/aria2app/SelectProfile/MultiModeProfileItem.java b/app/src/main/java/com/gianlu/aria2app/Main/Profile/MultiModeProfileItem.java
similarity index 99%
rename from app/src/main/java/com/gianlu/aria2app/SelectProfile/MultiModeProfileItem.java
rename to app/src/main/java/com/gianlu/aria2app/Main/Profile/MultiModeProfileItem.java
index d0655a91..11d8d1f4 100644
--- a/app/src/main/java/com/gianlu/aria2app/SelectProfile/MultiModeProfileItem.java
+++ b/app/src/main/java/com/gianlu/aria2app/Main/Profile/MultiModeProfileItem.java
@@ -1,4 +1,4 @@
-package com.gianlu.aria2app.SelectProfile;
+package com.gianlu.aria2app.Main.Profile;
 
 import android.content.Context;
 import android.net.ConnectivityManager;
diff --git a/app/src/main/java/com/gianlu/aria2app/SelectProfile/ProfileItem.java b/app/src/main/java/com/gianlu/aria2app/Main/Profile/ProfileItem.java
similarity index 91%
rename from app/src/main/java/com/gianlu/aria2app/SelectProfile/ProfileItem.java
rename to app/src/main/java/com/gianlu/aria2app/Main/Profile/ProfileItem.java
index d4c610e5..89a8c972 100644
--- a/app/src/main/java/com/gianlu/aria2app/SelectProfile/ProfileItem.java
+++ b/app/src/main/java/com/gianlu/aria2app/Main/Profile/ProfileItem.java
@@ -1,4 +1,4 @@
-package com.gianlu.aria2app.SelectProfile;
+package com.gianlu.aria2app.Main.Profile;
 
 import android.content.Context;
 import android.os.Parcel;
@@ -28,10 +28,10 @@ public class ProfileItem implements Parcelable {
     };
     protected String globalProfileName;
     protected boolean singleMode;
-    protected STATUS status;
+    protected STATUS status = STATUS.UNKNOWN;
     protected String statusMessage;
     protected boolean isDefault;
-    private long latency = -1;
+    private Long latency = -1L;
 
     protected ProfileItem(Parcel in) {
         globalProfileName = in.readString();
@@ -46,10 +46,11 @@ public class ProfileItem implements Parcelable {
     }
 
     public static boolean exists(Context context, String name) {
-        return exists(context, new File(name + ".profile"));
+        return name != null && exists(context, new File(name + ".profile"));
     }
 
     public static boolean exists(Context context, File file) {
+        if (file == null) return false;
         try {
             context.openFileInput(file.getName());
             return true;
@@ -99,11 +100,11 @@ public class ProfileItem implements Parcelable {
         isDefault = aDefault;
     }
 
-    public long getLatency() {
+    public Long getLatency() {
         return latency;
     }
 
-    public void setLatency(long latency) {
+    public void setLatency(Long latency) {
         this.latency = latency;
     }
 
diff --git a/app/src/main/java/com/gianlu/aria2app/Main/Profile/ProfilesAdapter.java b/app/src/main/java/com/gianlu/aria2app/Main/Profile/ProfilesAdapter.java
new file mode 100644
index 00000000..53d94974
--- /dev/null
+++ b/app/src/main/java/com/gianlu/aria2app/Main/Profile/ProfilesAdapter.java
@@ -0,0 +1,236 @@
+package com.gianlu.aria2app.Main.Profile;
+
+import android.annotation.SuppressLint;
+import android.app.Activity;
+import android.view.LayoutInflater;
+import android.view.View;
+import android.view.ViewGroup;
+import android.widget.BaseAdapter;
+import android.widget.ImageView;
+import android.widget.ProgressBar;
+import android.widget.TextView;
+
+import com.gianlu.aria2app.NetIO.JTA2.JTA2;
+import com.gianlu.aria2app.R;
+import com.gianlu.aria2app.Utils;
+import com.neovisionaries.ws.client.WebSocket;
+import com.neovisionaries.ws.client.WebSocketAdapter;
+import com.neovisionaries.ws.client.WebSocketException;
+import com.neovisionaries.ws.client.WebSocketFrame;
+
+import java.io.IOException;
+import java.net.ConnectException;
+import java.net.SocketTimeoutException;
+import java.security.NoSuchAlgorithmException;
+import java.util.List;
+import java.util.Locale;
+import java.util.Map;
+
+public class ProfilesAdapter extends BaseAdapter {
+    private Activity context;
+    private List<ProfileItem> profiles;
+    private IProfile handler;
+
+    public ProfilesAdapter(Activity context, List<ProfileItem> profiles, IProfile handler) {
+        this.context = context;
+        this.profiles = profiles;
+        this.handler = handler;
+    }
+
+    public void startProfilesTest() {
+        for (int i = 0; i < profiles.size(); i++) {
+            runTest(i);
+        }
+    }
+
+    @Override
+    public int getCount() {
+        return profiles.size();
+    }
+
+    public SingleModeProfileItem getItem(int position) {
+        ProfileItem item = profiles.get(position);
+        if (item instanceof SingleModeProfileItem) {
+            return (SingleModeProfileItem) item;
+        } else {
+            return ((MultiModeProfileItem) item).getCurrentProfile(context);
+        }
+    }
+
+    @Override
+    public long getItemId(int i) {
+        return i;
+    }
+
+    @SuppressLint("ViewHolder")
+    @Override
+    public View getView(int i, View view, ViewGroup viewGroup) {
+        view = LayoutInflater.from(context).inflate(R.layout.material_drawer_profile_item, viewGroup, false);
+        final SingleModeProfileItem profile = getItem(i);
+
+        ((TextView) view.findViewById(R.id.materialDrawer_profileName)).setText(profile.getProfileName());
+        ((TextView) view.findViewById(R.id.materialDrawer_profileAddress)).setText(profile.getFullServerAddr());
+
+        if (profile.getLatency() != -1) {
+            view.findViewById(R.id.materialDrawer_profileProgressBar).setVisibility(View.GONE);
+            view.findViewById(R.id.materialDrawer_profilePing).setVisibility(View.VISIBLE);
+            view.findViewById(R.id.materialDrawer_profileStatus).setVisibility(View.VISIBLE);
+
+            ((TextView) view.findViewById(R.id.materialDrawer_profilePing)).setText(String.format(Locale.getDefault(), "%s ms", profile.getLatency()));
+        } else {
+            view.findViewById(R.id.materialDrawer_profileProgressBar).setVisibility(View.VISIBLE);
+            ((ProgressBar) view.findViewById(R.id.materialDrawer_profileProgressBar)).setIndeterminate(true);
+            view.findViewById(R.id.materialDrawer_profilePing).setVisibility(View.INVISIBLE);
+            view.findViewById(R.id.materialDrawer_profileStatus).setVisibility(View.GONE);
+        }
+
+        switch (profile.getStatus()) {
+            case ONLINE:
+                ((ImageView) view.findViewById(R.id.materialDrawer_profileStatus)).setImageResource(R.drawable.ic_done_black_48dp);
+                break;
+            case OFFLINE:
+                ((ImageView) view.findViewById(R.id.materialDrawer_profileStatus)).setImageResource(R.drawable.ic_clear_black_48dp);
+                break;
+            case ERROR:
+                ((ImageView) view.findViewById(R.id.materialDrawer_profileStatus)).setImageResource(R.drawable.ic_error_black_48dp);
+                break;
+            case UNKNOWN:
+                ((ImageView) view.findViewById(R.id.materialDrawer_profileStatus)).setImageResource(R.drawable.ic_help_black_48dp);
+                break;
+        }
+
+        view.setOnClickListener(new View.OnClickListener() {
+            @Override
+            public void onClick(View view) {
+                handler.onProfileSelected(profile);
+            }
+        });
+
+        return view;
+    }
+
+    public void runTest(int pos) {
+        SingleModeProfileItem profile = getItem(pos);
+
+        try {
+            WebSocket webSocket;
+            if (profile.getAuthMethod().equals(JTA2.AUTH_METHOD.HTTP))
+                webSocket = Utils.readyWebSocket(profile.isServerSSL(), profile.getFullServerAddr(), profile.getServerUsername(), profile.getServerPassword());
+            else
+                webSocket = Utils.readyWebSocket(profile.isServerSSL(), profile.getFullServerAddr());
+
+            webSocket.addListener(new StatusWebSocketHandler(profile))
+                    .connectAsynchronously();
+        } catch (IOException | NoSuchAlgorithmException ex) {
+            profile.setStatus(ProfileItem.STATUS.ERROR);
+            profile.setStatusMessage(ex.getMessage());
+
+            notifyDataSetChanged();
+        }
+    }
+
+    public interface IProfile {
+        void onProfileSelected(SingleModeProfileItem which);
+    }
+
+    private class StatusWebSocketHandler extends WebSocketAdapter {
+        private long startTime;
+        private SingleModeProfileItem profile;
+
+        public StatusWebSocketHandler(SingleModeProfileItem profile) {
+            this.profile = profile;
+        }
+
+        @Override
+        public void onConnected(WebSocket websocket, Map<String, List<String>> headers) throws Exception {
+            profile.setStatus(ProfileItem.STATUS.ONLINE);
+            profile.setStatusMessage("Online");
+
+            context.runOnUiThread(new Runnable() {
+                @Override
+                public void run() {
+                    notifyDataSetChanged();
+                }
+            });
+
+            startTime = System.currentTimeMillis();
+            websocket.sendPing();
+        }
+
+        @Override
+        public void onPongFrame(WebSocket websocket, WebSocketFrame frame) throws Exception {
+            profile.setLatency(System.currentTimeMillis() - startTime);
+
+            context.runOnUiThread(new Runnable() {
+                @Override
+                public void run() {
+                    notifyDataSetChanged();
+                }
+            });
+        }
+
+        @Override
+        public void onError(WebSocket websocket, WebSocketException cause) throws Exception {
+            profile.setStatus(ProfileItem.STATUS.OFFLINE);
+            profile.setStatusMessage(cause.getMessage());
+
+            context.runOnUiThread(new Runnable() {
+                @Override
+                public void run() {
+                    notifyDataSetChanged();
+                }
+            });
+        }
+
+        @Override
+        public void onUnexpectedError(WebSocket websocket, WebSocketException cause) throws Exception {
+            Utils.UIToast(context, Utils.TOAST_MESSAGES.WS_EXCEPTION, cause);
+            profile.setStatus(ProfileItem.STATUS.ERROR);
+            profile.setStatusMessage(cause.getMessage());
+
+            context.runOnUiThread(new Runnable() {
+                @Override
+                public void run() {
+                    notifyDataSetChanged();
+                }
+            });
+        }
+
+        @Override
+        public void onConnectError(WebSocket websocket, WebSocketException exception) throws Exception {
+            if (exception.getCause() instanceof ConnectException)
+                profile.setStatus(ProfileItem.STATUS.OFFLINE);
+            else if (exception.getCause() instanceof SocketTimeoutException)
+                profile.setStatus(ProfileItem.STATUS.OFFLINE);
+            else
+                profile.setStatus(ProfileItem.STATUS.ERROR);
+
+            profile.setStatusMessage(exception.getMessage());
+
+            context.runOnUiThread(new Runnable() {
+                @Override
+                public void run() {
+                    notifyDataSetChanged();
+                }
+            });
+        }
+
+        @Override
+        public void onDisconnected(WebSocket websocket, WebSocketFrame serverCloseFrame, WebSocketFrame clientCloseFrame, boolean closedByServer) throws Exception {
+            if (closedByServer) {
+                profile.setStatus(ProfileItem.STATUS.ERROR);
+                profile.setStatusMessage(serverCloseFrame.getCloseReason());
+            } else {
+                profile.setStatus(ProfileItem.STATUS.OFFLINE);
+                profile.setStatusMessage(clientCloseFrame.getCloseReason());
+            }
+
+            context.runOnUiThread(new Runnable() {
+                @Override
+                public void run() {
+                    notifyDataSetChanged();
+                }
+            });
+        }
+    }
+}
diff --git a/app/src/main/java/com/gianlu/aria2app/SelectProfile/ProfilesCustomAdapter.java b/app/src/main/java/com/gianlu/aria2app/Main/Profile/ProfilesCustomAdapter.java
similarity index 98%
rename from app/src/main/java/com/gianlu/aria2app/SelectProfile/ProfilesCustomAdapter.java
rename to app/src/main/java/com/gianlu/aria2app/Main/Profile/ProfilesCustomAdapter.java
index 335b1093..741c93c3 100644
--- a/app/src/main/java/com/gianlu/aria2app/SelectProfile/ProfilesCustomAdapter.java
+++ b/app/src/main/java/com/gianlu/aria2app/Main/Profile/ProfilesCustomAdapter.java
@@ -1,4 +1,4 @@
-package com.gianlu.aria2app.SelectProfile;
+package com.gianlu.aria2app.Main.Profile;
 
 import android.annotation.SuppressLint;
 import android.app.Activity;
@@ -106,7 +106,6 @@ public class ProfilesCustomAdapter extends BaseExpandableListAdapter {
         final ImageButton expand = (ImageButton) view.findViewById(R.id.profileCustomItem_expand);
 
         profileName.setText(item.getGlobalProfileName());
-        latency.setText(String.format(Locale.getDefault(), "%s ms", item.getLatency() == -1 ? "-" : String.valueOf(item.getLatency())));
         serverIP.setText(item.isSingleMode() ? ((SingleModeProfileItem) item).getFullServerAddr() : ((MultiModeProfileItem) item).getCurrentProfile(context).getFullServerAddr());
 
         select.setOnClickListener(new View.OnClickListener() {
diff --git a/app/src/main/java/com/gianlu/aria2app/SelectProfile/SingleModeProfileItem.java b/app/src/main/java/com/gianlu/aria2app/Main/Profile/SingleModeProfileItem.java
similarity index 99%
rename from app/src/main/java/com/gianlu/aria2app/SelectProfile/SingleModeProfileItem.java
rename to app/src/main/java/com/gianlu/aria2app/Main/Profile/SingleModeProfileItem.java
index e5a1d518..b5788fbb 100644
--- a/app/src/main/java/com/gianlu/aria2app/SelectProfile/SingleModeProfileItem.java
+++ b/app/src/main/java/com/gianlu/aria2app/Main/Profile/SingleModeProfileItem.java
@@ -1,4 +1,4 @@
-package com.gianlu.aria2app.SelectProfile;
+package com.gianlu.aria2app.Main.Profile;
 
 import android.content.Context;
 import android.os.Parcel;
diff --git a/app/src/main/java/com/gianlu/aria2app/MainActivity.java b/app/src/main/java/com/gianlu/aria2app/MainActivity.java
index 8f296673..13f04587 100644
--- a/app/src/main/java/com/gianlu/aria2app/MainActivity.java
+++ b/app/src/main/java/com/gianlu/aria2app/MainActivity.java
@@ -1,18 +1,23 @@
 package com.gianlu.aria2app;
 
+import android.animation.Animator;
 import android.annotation.SuppressLint;
 import android.app.ProgressDialog;
 import android.content.DialogInterface;
 import android.content.Intent;
 import android.content.SharedPreferences;
+import android.graphics.Color;
 import android.os.Bundle;
 import android.preference.PreferenceManager;
+import android.support.annotation.NonNull;
+import android.support.annotation.Nullable;
 import android.support.v4.widget.DrawerLayout;
 import android.support.v4.widget.SwipeRefreshLayout;
 import android.support.v7.app.AlertDialog;
 import android.support.v7.app.AppCompatActivity;
 import android.support.v7.widget.LinearLayoutManager;
 import android.support.v7.widget.RecyclerView;
+import android.support.v7.widget.Toolbar;
 import android.view.Menu;
 import android.view.MenuItem;
 import android.view.View;
@@ -31,6 +36,10 @@ import com.gianlu.aria2app.Main.DrawerManager;
 import com.gianlu.aria2app.Main.IThread;
 import com.gianlu.aria2app.Main.LoadDownloads;
 import com.gianlu.aria2app.Main.MainCardAdapter;
+import com.gianlu.aria2app.Main.Profile.AddProfileActivity;
+import com.gianlu.aria2app.Main.Profile.MultiModeProfileItem;
+import com.gianlu.aria2app.Main.Profile.ProfileItem;
+import com.gianlu.aria2app.Main.Profile.SingleModeProfileItem;
 import com.gianlu.aria2app.Main.UpdateUI;
 import com.gianlu.aria2app.NetIO.JTA2.Download;
 import com.gianlu.aria2app.NetIO.JTA2.IOption;
@@ -41,7 +50,7 @@ import com.gianlu.aria2app.Options.LocalParser;
 import com.gianlu.aria2app.Options.OptionAdapter;
 import com.gianlu.aria2app.Options.OptionChild;
 import com.gianlu.aria2app.Options.OptionHeader;
-import com.gianlu.aria2app.SelectProfile.SingleModeProfileItem;
+import com.gianlu.aria2app.Options.Parser;
 import com.gianlu.aria2app.Services.NotificationWebSocketService;
 import com.google.android.gms.analytics.HitBuilders;
 
@@ -62,6 +71,7 @@ import java.util.TimerTask;
 public class MainActivity extends AppCompatActivity {
     private RecyclerView mainRecyclerView;
     private DrawerManager drawerManager;
+    private FloatingActionsMenu fabMenu;
     private LoadDownloads.ILoading loadingHandler;
     private UpdateUI updateUI;
     private LoadDownloads loadDownloads;
@@ -72,18 +82,79 @@ public class MainActivity extends AppCompatActivity {
     protected void onCreate(Bundle savedInstanceState) {
         super.onCreate(savedInstanceState);
         setContentView(R.layout.activity_main);
+        setTitle(R.string.app_name);
+
+        getWindow().getDecorView().setSystemUiVisibility(View.SYSTEM_UI_FLAG_LAYOUT_STABLE | View.SYSTEM_UI_FLAG_LAYOUT_FULLSCREEN);
+        getWindow().setStatusBarColor(Color.TRANSPARENT); // TODO: May need a fix
+
+        Toolbar toolbar = (Toolbar) findViewById(R.id.main_toolbar);
+        assert toolbar != null;
+        setSupportActionBar(toolbar);
 
         UncaughtExceptionHandler.application = getApplication();
         Thread.setDefaultUncaughtExceptionHandler(new UncaughtExceptionHandler(this));
 
         drawerManager = new DrawerManager(this, (DrawerLayout) findViewById(R.id.main_drawer));
-        drawerManager.build();
-        drawerManager.setDrawerListener(new DrawerManager.IDrawerListener() {
-            @Override
-            public void onListItemSelected(DrawerManager.DrawerListItems which) {
+        drawerManager.buildProfiles()
+                .buildMenu()
+                .setDrawerListener(new DrawerManager.IDrawerListener() {
+                    @Override
+                    public boolean onListItemSelected(DrawerManager.DrawerListItems which) {
+                        switch (which) {
+                            case HOME:
+                                reloadPage();
+                                break;
+                            case TERMINAL:
+                                startActivity(new Intent(MainActivity.this, TerminalActivity.class));
+                                break;
+                            case GLOBAL_OPTIONS:
+                                showOptionsDialog();
+                                break;
+                            case PREFERENCES:
+                                startActivity(new Intent(MainActivity.this, MainSettingsActivity.class));
+                                break;
+                            case SUPPORT:
+                                break;
+                        }
 
-            }
-        });
+                        return false;
+                    }
+
+                    @Override
+                    public void onProfileItemSelected(final SingleModeProfileItem profile) {
+                        if (profile.getStatus() != ProfileItem.STATUS.ONLINE) {
+                            AlertDialog.Builder builder = new AlertDialog.Builder(MainActivity.this);
+                            builder.setMessage(R.string.serverOffline)
+                                    .setPositiveButton(android.R.string.yes, new DialogInterface.OnClickListener() {
+                                        @Override
+                                        public void onClick(DialogInterface dialogInterface, int i) {
+                                            startWithProfile(profile, true);
+                                            drawerManager.setDrawerState(false, true);
+                                        }
+                                    })
+                                    .setNegativeButton(android.R.string.no, new DialogInterface.OnClickListener() {
+                                        @Override
+                                        public void onClick(DialogInterface dialogInterface, int i) {
+                                            drawerManager.setDrawerState(true, true);
+                                        }
+                                    }).create().show();
+                        } else {
+                            drawerManager.setDrawerState(false, true);
+                            startWithProfile(profile, true);
+                        }
+                    }
+
+                    @Override
+                    public void onAddProfile() {
+                        startActivity(new Intent(MainActivity.this, AddProfileActivity.class)
+                                .putExtra("edit", false));
+                    }
+
+                    @Override
+                    public void onManageProfiles() {
+
+                    }
+                });
 
         mainRecyclerView = (RecyclerView) findViewById(R.id.main_recyclerView);
         assert mainRecyclerView != null;
@@ -270,11 +341,11 @@ public class MainActivity extends AppCompatActivity {
             }
 
             @Override
-            public void onException(boolean queuing, Exception ex) {
+            public void onException(boolean queuing, final Exception ex) {
                 if (queuing) {
                     WebSocketing.notifyConnection(new WebSocketing.IConnecting() {
                         @Override
-                        public void onConnected() {
+                        public void onDone(boolean connected) {
                             loadDownloads = new LoadDownloads(MainActivity.this, loadingHandler);
                             new Thread(loadDownloads).start();
                         }
@@ -304,6 +375,12 @@ public class MainActivity extends AppCompatActivity {
                             public void onClick(DialogInterface dialogInterface, int i) {
                                 System.exit(0);
                             }
+                        })
+                        .setNeutralButton(R.string.changeProfile, new DialogInterface.OnClickListener() {
+                            @Override
+                            public void onClick(DialogInterface dialogInterface, int i) {
+                                drawerManager.openProfiles(true);
+                            }
                         });
 
                 Utils.UIToast(MainActivity.this, Utils.TOAST_MESSAGES.FAILED_GATHERING_INFORMATION, ex, new Runnable() {
@@ -319,49 +396,129 @@ public class MainActivity extends AppCompatActivity {
         UpdateUI.stop(updateUI);
 
         SharedPreferences sharedPreferences = PreferenceManager.getDefaultSharedPreferences(this);
-        if (getIntent().getParcelableExtra("profile") != null) {
-            SingleModeProfileItem profile = getIntent().getParcelableExtra("profile");
-            setTitle(getResources().getString(R.string.app_name) + " - " + profile.getGlobalProfileName());
-
-            SharedPreferences.Editor editor = sharedPreferences.edit();
-            editor.putString("a2_profileName", profile.getProfileName())
-                    .putString("a2_serverIP", profile.getFullServerAddr())
-                    .putString("a2_authMethod", profile.getAuthMethod().name())
-                    .putString("a2_serverToken", profile.getServerToken())
-                    .putString("a2_serverUsername", profile.getServerUsername())
-                    .putString("a2_serverPassword", profile.getServerPassword())
-                    .putBoolean("a2_serverSSL", profile.isServerSSL())
-                    .putBoolean("a2_directDownload", profile.isDirectDownloadEnabled());
-            if (profile.isDirectDownloadEnabled()) {
-                editor.putString("dd_addr", profile.getDirectDownload().getAddress())
-                        .putBoolean("dd_auth", profile.getDirectDownload().isAuth())
-                        .putString("dd_user", profile.getDirectDownload().getUsername())
-                        .putString("dd_passwd", profile.getDirectDownload().getPassword());
+        long intervalLastSourceRefresh = System.currentTimeMillis() - sharedPreferences.getLong("lastSourceRefresh", System.currentTimeMillis());
+        if ((intervalLastSourceRefresh > 604800000) || (intervalLastSourceRefresh < 100)) {
+            new Parser().refreshSource(this, new Parser.ISourceProcessor() {
+                @Override
+                public void onStarted() {
+                }
+
+                @Override
+                public void onDownloadEnded(String source) {
+                }
+
+                @Override
+                public void onConnectionError(int code, String message) {
+                    Utils.UIToast(MainActivity.this, Utils.TOAST_MESSAGES.CANT_REFRESH_SOURCE, code + ": " + message);
+                }
+
+                @Override
+                public void onError(Exception ex) {
+                    Utils.UIToast(MainActivity.this, Utils.TOAST_MESSAGES.CANT_REFRESH_SOURCE, ex);
+                }
+
+                @Override
+                public void onFailed() {
+                    Utils.UIToast(MainActivity.this, Utils.TOAST_MESSAGES.CANT_REFRESH_SOURCE);
+                }
+
+                @Override
+                public void onEnd() {
+                    Utils.UIToast(MainActivity.this, Utils.TOAST_MESSAGES.SOURCE_REFRESHED);
+                }
+            });
+            sharedPreferences.edit().putLong("lastSourceRefresh", System.currentTimeMillis()).apply();
+        }
+
+        try {
+            SingleModeProfileItem profile = defaultProfile();
+            if (profile == null) {
+                drawerManager.openProfiles(true);
+                return;
             }
-            editor.apply();
-        } else {
-            setTitle(getResources().getString(R.string.app_name) + " - " + sharedPreferences.getString("a2_profileName", getString(R.string.unknown_profile)));
+
+            setTitle(getString(R.string.app_name) + " - " + profile.getGlobalProfileName());
+
+            startWithProfile(profile, false);
+        } catch (IOException | JSONException ex) {
+            Utils.UIToast(this, Utils.TOAST_MESSAGES.FATAL_EXCEPTION, ex);
         }
+
         Integer autoReloadDownloadsListRate = Integer.parseInt(sharedPreferences.getString("a2_downloadListRate", "0")) * 1000;
         boolean enableNotifications = sharedPreferences.getBoolean("a2_enableNotifications", true);
 
-        final FloatingActionsMenu fabMenu = (FloatingActionsMenu) findViewById(R.id.main_fab);
+        fabMenu = (FloatingActionsMenu) findViewById(R.id.main_fab);
         assert fabMenu != null;
         fabMenu.setOnFloatingActionsMenuUpdateListener(new FloatingActionsMenu.OnFloatingActionsMenuUpdateListener() {
             @Override
             public void onMenuExpanded() {
-                View mask = findViewById(R.id.main_opaqueMask);
+                final View mask = findViewById(R.id.main_opaqueMask);
                 assert mask != null;
                 mask.setVisibility(View.VISIBLE);
-                mask.setClickable(true);
+                mask.setAlpha(0);
+                mask.animate()
+                        .alpha(1)
+                        .setDuration(300)
+                        .setListener(new Animator.AnimatorListener() {
+                            @Override
+                            public void onAnimationStart(Animator animator) {
+
+                            }
+
+                            @Override
+                            public void onAnimationEnd(Animator animator) {
+                                mask.setClickable(true);
+                                mask.setOnClickListener(new View.OnClickListener() {
+                                    @Override
+                                    public void onClick(View view) {
+                                        fabMenu.collapse();
+                                    }
+                                });
+                            }
+
+                            @Override
+                            public void onAnimationCancel(Animator animator) {
+
+                            }
+
+                            @Override
+                            public void onAnimationRepeat(Animator animator) {
+
+                            }
+                        })
+                        .start();
             }
 
             @Override
             public void onMenuCollapsed() {
-                View mask = findViewById(R.id.main_opaqueMask);
+                final View mask = findViewById(R.id.main_opaqueMask);
                 assert mask != null;
-                mask.setVisibility(View.GONE);
-                mask.setClickable(false);
+                mask.animate()
+                        .alpha(0)
+                        .setDuration(300)
+                        .setListener(new Animator.AnimatorListener() {
+                            @Override
+                            public void onAnimationStart(Animator animator) {
+
+                            }
+
+                            @Override
+                            public void onAnimationEnd(Animator animator) {
+                                mask.setVisibility(View.GONE);
+                                mask.setClickable(false);
+                            }
+
+                            @Override
+                            public void onAnimationCancel(Animator animator) {
+
+                            }
+
+                            @Override
+                            public void onAnimationRepeat(Animator animator) {
+
+                            }
+                        })
+                        .start();
             }
         });
 
@@ -427,6 +584,45 @@ public class MainActivity extends AppCompatActivity {
         }
     }
 
+    @Nullable
+    public SingleModeProfileItem defaultProfile() throws IOException, JSONException {
+        String lastProfile = PreferenceManager.getDefaultSharedPreferences(this).getString("lastUsedProfile", null);
+
+        if (ProfileItem.exists(this, lastProfile)) {
+            if (ProfileItem.isSingleMode(this, lastProfile))
+                return SingleModeProfileItem.fromString(this, lastProfile);
+            else
+                return MultiModeProfileItem.fromString(this, lastProfile).getCurrentProfile(this);
+        } else {
+            return null;
+        }
+    }
+
+    public void startWithProfile(@NonNull SingleModeProfileItem profile, boolean recreate) {
+        SharedPreferences.Editor editor = PreferenceManager.getDefaultSharedPreferences(this).edit();
+        editor.putString("lastUsedProfile", profile.getGlobalProfileName())
+                .putString("a2_profileName", profile.getProfileName())
+                .putString("a2_serverIP", profile.getFullServerAddr())
+                .putString("a2_authMethod", profile.getAuthMethod().name())
+                .putString("a2_serverToken", profile.getServerToken())
+                .putString("a2_serverUsername", profile.getServerUsername())
+                .putString("a2_serverPassword", profile.getServerPassword())
+                .putBoolean("a2_serverSSL", profile.isServerSSL())
+                .putBoolean("a2_directDownload", profile.isDirectDownloadEnabled());
+
+        if (profile.isDirectDownloadEnabled()) {
+            editor.putString("dd_addr", profile.getDirectDownload().getAddress())
+                    .putBoolean("dd_auth", profile.getDirectDownload().isAuth())
+                    .putString("dd_user", profile.getDirectDownload().getUsername())
+                    .putString("dd_passwd", profile.getDirectDownload().getPassword());
+        }
+        editor.apply();
+
+        WebSocketing.destroyInstance();
+        if (recreate)
+            recreate();
+    }
+
     @Override
     public boolean onCreateOptionsMenu(Menu menu) {
         getMenuInflater().inflate(R.menu.main, menu);
@@ -460,21 +656,21 @@ public class MainActivity extends AppCompatActivity {
         });
     }
 
+    @Override
+    public void onBackPressed() {
+        if (fabMenu.isExpanded()) {
+            fabMenu.collapse();
+        } else {
+            super.onBackPressed();
+        }
+    }
+
     @Override
     public boolean onOptionsItemSelected(MenuItem item) {
         switch (item.getItemId()) {
             case R.id.a2menu_refreshPage:
                 reloadPage();
                 break;
-            case R.id.a2menu_globalOptions:
-                showOptionsDialog();
-                break;
-            case R.id.a2menu_preferences:
-                startActivity(new Intent(this, MainSettingsActivity.class));
-                break;
-            case R.id.a2menu_terminal:
-                startActivity(new Intent(this, TerminalActivity.class));
-                break;
             // Filters
             case R.id.a2menu_active:
                 item.setChecked(!item.isChecked());
diff --git a/app/src/main/java/com/gianlu/aria2app/NetIO/WebSocketing.java b/app/src/main/java/com/gianlu/aria2app/NetIO/WebSocketing.java
index 7a27b4fb..800ff1ae 100644
--- a/app/src/main/java/com/gianlu/aria2app/NetIO/WebSocketing.java
+++ b/app/src/main/java/com/gianlu/aria2app/NetIO/WebSocketing.java
@@ -24,6 +24,7 @@ import java.util.Map;
 public class WebSocketing extends WebSocketAdapter {
     private static WebSocketing webSocketing;
     private static IConnecting handler;
+    private static boolean isDestroying;
     private WebSocket socket;
     private Activity context;
     private Map<Integer, IReceived> requests = new ArrayMap<>();
@@ -36,6 +37,14 @@ public class WebSocketing extends WebSocketAdapter {
                 .connectAsynchronously();
     }
 
+    public static void destroyInstance() {
+        if (webSocketing != null) {
+            isDestroying = true;
+            webSocketing.socket.disconnect();
+            webSocketing = null;
+        }
+    }
+
     public static WebSocketing newInstance(Activity context) throws IOException, NoSuchAlgorithmException {
         if (webSocketing == null) webSocketing = new WebSocketing(context);
         return webSocketing;
@@ -44,7 +53,7 @@ public class WebSocketing extends WebSocketAdapter {
     public static void notifyConnection(IConnecting handler) {
         if (webSocketing != null) {
             if (webSocketing.socket.getState() == WebSocketState.OPEN) {
-                handler.onConnected();
+                handler.onDone(true);
                 return;
             }
         }
@@ -65,7 +74,7 @@ public class WebSocketing extends WebSocketAdapter {
     }
 
     public void send(JSONObject request, IReceived handler) {
-        if (socket.getState() == WebSocketState.CONNECTING) {
+        if (socket.getState() == WebSocketState.CONNECTING || socket.getState() == WebSocketState.CREATED) {
             connectionQueue.add(new Pair<>(request, handler));
             handler.onException(true, new Exception("WebSocket is connecting! Requests queued."));
             return;
@@ -109,7 +118,7 @@ public class WebSocketing extends WebSocketAdapter {
     public void onConnected(WebSocket websocket, Map<String, List<String>> headers) throws Exception {
         Utils.UIToast(context, Utils.TOAST_MESSAGES.WS_OPENED);
         if (handler != null)
-            handler.onConnected();
+            handler.onDone(true);
     }
 
     @Override
@@ -120,16 +129,27 @@ public class WebSocketing extends WebSocketAdapter {
     @Override
     public void onError(WebSocket websocket, WebSocketException cause) throws Exception {
         Utils.UIToast(context, Utils.TOAST_MESSAGES.WS_EXCEPTION, cause);
+        if (handler != null)
+            handler.onDone(false);
     }
 
     @Override
     public void handleCallbackError(WebSocket websocket, Throwable cause) throws Exception {
         Utils.UIToast(context, Utils.TOAST_MESSAGES.UNKNOWN_EXCEPTION, cause);
+        if (handler != null)
+            handler.onDone(false);
     }
 
     @Override
     public void onDisconnected(WebSocket websocket, WebSocketFrame serverCloseFrame, WebSocketFrame clientCloseFrame, boolean closedByServer) throws Exception {
+        if (isDestroying) {
+            isDestroying = false;
+            return;
+        }
+
         Utils.UIToast(context, Utils.TOAST_MESSAGES.WS_CLOSED, "Closed by server: " + closedByServer + "\nServer frame: " + serverCloseFrame + "\nClient frame: " + clientCloseFrame);
+        if (handler != null)
+            handler.onDone(false);
     }
 
     public Activity getContext() {
@@ -144,6 +164,6 @@ public class WebSocketing extends WebSocketAdapter {
     }
 
     public interface IConnecting {
-        void onConnected();
+        void onDone(boolean connected);
     }
 }
diff --git a/app/src/main/java/com/gianlu/aria2app/SelectProfileActivity.java b/app/src/main/java/com/gianlu/aria2app/SelectProfileActivity.java
index cfea623d..48e9b3db 100644
--- a/app/src/main/java/com/gianlu/aria2app/SelectProfileActivity.java
+++ b/app/src/main/java/com/gianlu/aria2app/SelectProfileActivity.java
@@ -1,33 +1,20 @@
 package com.gianlu.aria2app;
 
-import android.app.Activity;
 import android.content.Context;
 import android.content.DialogInterface;
 import android.content.Intent;
-import android.content.SharedPreferences;
 import android.os.Bundle;
-import android.preference.PreferenceManager;
 import android.support.v7.app.AlertDialog;
 import android.support.v7.app.AppCompatActivity;
-import android.view.Menu;
-import android.view.MenuInflater;
-import android.view.MenuItem;
 import android.widget.ExpandableListView;
 
-import com.gianlu.aria2app.Google.Analytics;
 import com.gianlu.aria2app.Google.UncaughtExceptionHandler;
+import com.gianlu.aria2app.Main.Profile.AddProfileActivity;
+import com.gianlu.aria2app.Main.Profile.MultiModeProfileItem;
+import com.gianlu.aria2app.Main.Profile.ProfileItem;
+import com.gianlu.aria2app.Main.Profile.ProfilesCustomAdapter;
+import com.gianlu.aria2app.Main.Profile.SingleModeProfileItem;
 import com.gianlu.aria2app.NetIO.JTA2.JTA2;
-import com.gianlu.aria2app.Options.Parser;
-import com.gianlu.aria2app.SelectProfile.AddProfileActivity;
-import com.gianlu.aria2app.SelectProfile.MultiModeProfileItem;
-import com.gianlu.aria2app.SelectProfile.ProfileItem;
-import com.gianlu.aria2app.SelectProfile.ProfilesCustomAdapter;
-import com.gianlu.aria2app.SelectProfile.SingleModeProfileItem;
-import com.google.android.gms.analytics.HitBuilders;
-import com.neovisionaries.ws.client.WebSocket;
-import com.neovisionaries.ws.client.WebSocketAdapter;
-import com.neovisionaries.ws.client.WebSocketException;
-import com.neovisionaries.ws.client.WebSocketFrame;
 
 import org.json.JSONException;
 
@@ -37,15 +24,10 @@ import java.io.FileOutputStream;
 import java.io.FilenameFilter;
 import java.io.IOException;
 import java.io.OutputStreamWriter;
-import java.net.ConnectException;
-import java.net.SocketTimeoutException;
-import java.security.NoSuchAlgorithmException;
 import java.util.ArrayList;
 import java.util.List;
-import java.util.Map;
 
 public class SelectProfileActivity extends AppCompatActivity {
-    private ExpandableListView listView;
 
     @Override
     protected void onCreate(Bundle savedInstanceState) {
@@ -56,42 +38,7 @@ public class SelectProfileActivity extends AppCompatActivity {
         UncaughtExceptionHandler.application = getApplication();
         Thread.setDefaultUncaughtExceptionHandler(new UncaughtExceptionHandler(this));
 
-        SharedPreferences sharedPreferences = PreferenceManager.getDefaultSharedPreferences(this);
-        long intervalLastSourceRefresh = System.currentTimeMillis() - sharedPreferences.getLong("lastSourceRefresh", System.currentTimeMillis());
-        if ((intervalLastSourceRefresh > 604800000) || (intervalLastSourceRefresh < 100)) {
-            new Parser().refreshSource(this, new Parser.ISourceProcessor() {
-                @Override
-                public void onStarted() {
-                }
-
-                @Override
-                public void onDownloadEnded(String source) {
-                }
-
-                @Override
-                public void onConnectionError(int code, String message) {
-                    Utils.UIToast(SelectProfileActivity.this, Utils.TOAST_MESSAGES.CANT_REFRESH_SOURCE, code + ": " + message);
-                }
-
-                @Override
-                public void onError(Exception ex) {
-                    Utils.UIToast(SelectProfileActivity.this, Utils.TOAST_MESSAGES.CANT_REFRESH_SOURCE, ex);
-                }
-
-                @Override
-                public void onFailed() {
-                    Utils.UIToast(SelectProfileActivity.this, Utils.TOAST_MESSAGES.CANT_REFRESH_SOURCE);
-                }
-
-                @Override
-                public void onEnd() {
-                    Utils.UIToast(SelectProfileActivity.this, Utils.TOAST_MESSAGES.SOURCE_REFRESHED);
-                }
-            });
-            sharedPreferences.edit().putLong("lastSourceRefresh", System.currentTimeMillis()).apply();
-        }
-
-        listView = (ExpandableListView) findViewById(R.id.selectProfile_listView);
+        ExpandableListView listView = (ExpandableListView) findViewById(R.id.selectProfile_listView);
 
         List<ProfileItem> profiles = new ArrayList<>();
         File files[] = getFilesDir().listFiles(new FilenameFilter() {
@@ -156,8 +103,6 @@ public class SelectProfileActivity extends AppCompatActivity {
                     }
                 }));
 
-        new Thread(new LoadProfileStatus(this, listView)).start();
-
 
         if (getIntent().getBooleanExtra("external", false)) {
             if (ProfileItem.exists(this, "Local device")) {
@@ -215,183 +160,4 @@ public class SelectProfileActivity extends AppCompatActivity {
                         false,
                         null).setGlobalProfileName("Local device")));
     }
-
-    @Override
-    public boolean onCreateOptionsMenu(Menu menu) {
-        MenuInflater inflater = getMenuInflater();
-        inflater.inflate(R.menu.select_profile, menu);
-        return super.onCreateOptionsMenu(menu);
-    }
-
-    @Override
-    public boolean onOptionsItemSelected(MenuItem item) {
-        switch (item.getItemId()) {
-            case R.id.selectProfileMenu_add:
-                startActivity(new Intent(this, AddProfileActivity.class).putExtra("edit", false));
-                break;
-            case R.id.selectProfileMenu_refresh:
-                new Thread(new LoadProfileStatus(this, listView)).start();
-
-                if (Analytics.isTrackingAllowed(this))
-                    Analytics.getDefaultTracker(this.getApplication()).send(new HitBuilders.EventBuilder()
-                            .setCategory(Analytics.CATEGORY_USER_INPUT)
-                            .setAction(Analytics.ACTION_REFRESH)
-                            .build());
-                break;
-            case R.id.selectProfileMenu_preferences:
-                startActivity(new Intent(this, MainSettingsActivity.class));
-                finishActivity(0);
-                break;
-        }
-        return super.onOptionsItemSelected(item);
-    }
-
-    class StatusWebSocketHandler extends WebSocketAdapter {
-        private ProfileItem item;
-        private Activity context;
-        private long startTime;
-
-        StatusWebSocketHandler(Activity context, ProfileItem item) {
-            this.context = context;
-            this.item = item;
-        }
-
-        @Override
-        public void onConnected(WebSocket websocket, Map<String, List<String>> headers) throws Exception {
-            item.setStatus(SingleModeProfileItem.STATUS.ONLINE);
-            item.setStatusMessage("Online");
-
-            context.runOnUiThread(new Runnable() {
-                @Override
-                public void run() {
-                    listView.invalidateViews();
-                }
-            });
-
-            startTime = System.currentTimeMillis();
-            websocket.sendPing();
-        }
-
-        @Override
-        public void onPongFrame(WebSocket websocket, WebSocketFrame frame) throws Exception {
-            item.setLatency(System.currentTimeMillis() - startTime);
-            context.runOnUiThread(new Runnable() {
-                @Override
-                public void run() {
-                    listView.invalidateViews();
-                }
-            });
-        }
-
-        @Override
-        public void onError(WebSocket websocket, WebSocketException cause) throws Exception {
-            item.setStatus(SingleModeProfileItem.STATUS.OFFLINE);
-            item.setStatusMessage(cause.getMessage());
-            context.runOnUiThread(new Runnable() {
-                @Override
-                public void run() {
-                    listView.invalidateViews();
-                }
-            });
-        }
-
-        @Override
-        public void onUnexpectedError(WebSocket websocket, WebSocketException cause) throws Exception {
-            Utils.UIToast(context, Utils.TOAST_MESSAGES.WS_EXCEPTION, cause);
-            item.setStatus(SingleModeProfileItem.STATUS.ERROR);
-            item.setStatusMessage(cause.getMessage());
-            context.runOnUiThread(new Runnable() {
-                @Override
-                public void run() {
-                    listView.invalidateViews();
-                }
-            });
-        }
-
-        @Override
-        public void onConnectError(WebSocket websocket, WebSocketException exception) throws Exception {
-            if (exception.getCause() instanceof ConnectException)
-                item.setStatus(ProfileItem.STATUS.OFFLINE);
-            else if (exception.getCause() instanceof SocketTimeoutException)
-                item.setStatus(ProfileItem.STATUS.OFFLINE);
-            else
-                item.setStatus(ProfileItem.STATUS.ERROR);
-
-            item.setStatusMessage(exception.getMessage());
-            context.runOnUiThread(new Runnable() {
-                @Override
-                public void run() {
-                    listView.invalidateViews();
-                }
-            });
-        }
-
-        @Override
-        public void onDisconnected(WebSocket websocket, WebSocketFrame serverCloseFrame, WebSocketFrame clientCloseFrame, boolean closedByServer) throws Exception {
-            if (closedByServer) {
-                item.setStatus(SingleModeProfileItem.STATUS.ERROR);
-                item.setStatusMessage(serverCloseFrame.getCloseReason());
-            } else {
-                item.setStatusMessage(clientCloseFrame.getCloseReason());
-                item.setStatus(SingleModeProfileItem.STATUS.OFFLINE);
-            }
-
-            context.runOnUiThread(new Runnable() {
-                @Override
-                public void run() {
-                    listView.invalidateViews();
-                }
-            });
-        }
-    }
-
-    class LoadProfileStatus implements Runnable {
-        private Activity context;
-        private ExpandableListView listView;
-
-        public LoadProfileStatus(Activity context, ExpandableListView listView) {
-            this.context = context;
-            this.listView = listView;
-        }
-
-        @Override
-        public void run() {
-            for (int c = 0; c < listView.getExpandableListAdapter().getGroupCount(); c++) {
-                check(((ProfilesCustomAdapter) listView.getExpandableListAdapter()).getGroup(c));
-
-                for (int cc = 0; cc < listView.getExpandableListAdapter().getChildrenCount(c); cc++) {
-                    check(((ProfilesCustomAdapter) listView.getExpandableListAdapter()).getChild(c, cc).second);
-                }
-            }
-        }
-
-        private void check(ProfileItem item) {
-            try {
-                SingleModeProfileItem curr;
-                if (item.isSingleMode())
-                    curr = (SingleModeProfileItem) item;
-                else
-                    curr = ((MultiModeProfileItem) item).getCurrentProfile(context);
-
-                WebSocket webSocket;
-                if (curr.getAuthMethod().equals(JTA2.AUTH_METHOD.HTTP))
-                    webSocket = Utils.readyWebSocket(curr.isServerSSL(), curr.getFullServerAddr(), curr.getServerUsername(), curr.getServerPassword());
-                else
-                    webSocket = Utils.readyWebSocket(curr.isServerSSL(), curr.getFullServerAddr());
-
-                webSocket.addListener(new StatusWebSocketHandler(context, item))
-                        .connectAsynchronously();
-            } catch (IOException | NoSuchAlgorithmException ex) {
-                item.setStatus(SingleModeProfileItem.STATUS.ERROR);
-                item.setStatusMessage(ex.getMessage());
-
-                context.runOnUiThread(new Runnable() {
-                    @Override
-                    public void run() {
-                        listView.invalidateViews();
-                    }
-                });
-            }
-        }
-    }
 }
diff --git a/app/src/main/java/com/gianlu/aria2app/Services/NotificationWebSocketService.java b/app/src/main/java/com/gianlu/aria2app/Services/NotificationWebSocketService.java
index e3c0610e..5854c794 100644
--- a/app/src/main/java/com/gianlu/aria2app/Services/NotificationWebSocketService.java
+++ b/app/src/main/java/com/gianlu/aria2app/Services/NotificationWebSocketService.java
@@ -14,11 +14,11 @@ import android.support.v4.app.NotificationManagerCompat;
 import android.support.v4.content.ContextCompat;
 import android.support.v7.app.NotificationCompat;
 
+import com.gianlu.aria2app.Main.Profile.MultiModeProfileItem;
+import com.gianlu.aria2app.Main.Profile.ProfileItem;
+import com.gianlu.aria2app.Main.Profile.SingleModeProfileItem;
 import com.gianlu.aria2app.MainActivity;
 import com.gianlu.aria2app.R;
-import com.gianlu.aria2app.SelectProfile.MultiModeProfileItem;
-import com.gianlu.aria2app.SelectProfile.ProfileItem;
-import com.gianlu.aria2app.SelectProfile.SingleModeProfileItem;
 import com.gianlu.aria2app.Utils;
 import com.neovisionaries.ws.client.WebSocket;
 import com.neovisionaries.ws.client.WebSocketAdapter;
