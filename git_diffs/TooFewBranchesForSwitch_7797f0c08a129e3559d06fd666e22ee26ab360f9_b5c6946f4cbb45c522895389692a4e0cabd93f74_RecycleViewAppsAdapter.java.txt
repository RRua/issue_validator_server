diff --git a/app/src/main/java/com/apk/editor/MainActivity.java b/app/src/main/java/com/apk/editor/MainActivity.java
index d7a30ec..0e03085 100644
--- a/app/src/main/java/com/apk/editor/MainActivity.java
+++ b/app/src/main/java/com/apk/editor/MainActivity.java
@@ -6,13 +6,11 @@ import android.os.Bundle;
 import androidx.appcompat.app.AppCompatActivity;
 import androidx.appcompat.widget.AppCompatImageButton;
 
-import com.apk.editor.activities.DocumentationActivity;
 import com.apk.editor.activities.SettingsActivity;
 import com.apk.editor.fragments.ApplicationsFragment;
 import com.apk.editor.utils.APKEditorUtils;
 import com.apk.editor.utils.BottomNavView;
 import com.google.android.material.bottomnavigation.BottomNavigationView;
-import com.google.android.material.dialog.MaterialAlertDialogBuilder;
 
 /*
  * Created by APK Explorer & Editor <apkeditor@protonmail.com> on March 04, 2021
@@ -38,21 +36,6 @@ public class MainActivity extends AppCompatActivity {
                     new ApplicationsFragment()).commit();
         }
 
-        if (!APKEditorUtils.getBoolean("welcome_message", false, this)) {
-            new MaterialAlertDialogBuilder(this)
-                    .setIcon(R.mipmap.ic_launcher)
-                    .setTitle(R.string.app_name)
-                    .setMessage(getString(R.string.warning_message))
-                    .setCancelable(false)
-                    .setNegativeButton(getString(R.string.cancel), (dialog, id) -> {
-                    })
-                    .setPositiveButton(getString(R.string.documentation), (dialog, id) -> {
-                        Intent documentation = new Intent(this, DocumentationActivity.class);
-                        startActivity(documentation);
-                    }).show();
-            APKEditorUtils.saveBoolean("welcome_message", true, this);
-        }
-
         mSettings.setOnClickListener(v -> {
             Intent settings = new Intent(this, SettingsActivity.class);
             startActivity(settings);
diff --git a/app/src/main/java/com/apk/editor/activities/FilePickerActivity.java b/app/src/main/java/com/apk/editor/activities/FilePickerActivity.java
index 50515b0..d3aee98 100644
--- a/app/src/main/java/com/apk/editor/activities/FilePickerActivity.java
+++ b/app/src/main/java/com/apk/editor/activities/FilePickerActivity.java
@@ -1,13 +1,10 @@
 package com.apk.editor.activities;
 
-import android.annotation.SuppressLint;
 import android.app.Activity;
 import android.content.pm.PackageManager;
-import android.os.AsyncTask;
 import android.os.Build;
 import android.os.Bundle;
 import android.os.Environment;
-import android.os.Handler;
 import android.view.Menu;
 import android.view.View;
 import android.widget.LinearLayout;
@@ -21,16 +18,16 @@ import androidx.recyclerview.widget.GridLayoutManager;
 import androidx.recyclerview.widget.RecyclerView;
 
 import com.apk.editor.R;
-import com.apk.editor.adapters.RecycleViewFilePickerAdapter;
+import com.apk.editor.adapters.FilePickerAdapter;
 import com.apk.editor.utils.APKEditorUtils;
 import com.apk.editor.utils.APKExplorer;
+import com.apk.editor.utils.AsyncTasks;
 import com.apk.editor.utils.Common;
 import com.google.android.material.card.MaterialCardView;
 import com.google.android.material.dialog.MaterialAlertDialogBuilder;
 import com.google.android.material.textview.MaterialTextView;
 
 import java.io.File;
-import java.util.List;
 import java.util.Objects;
 
 /*
@@ -38,11 +35,9 @@ import java.util.Objects;
  */
 public class FilePickerActivity extends AppCompatActivity {
 
-    private AsyncTask<Void, Void, List<String>> mLoader;
-    private final Handler mHandler = new Handler();
     private MaterialTextView mTitle;
     private RecyclerView mRecyclerView;
-    private RecycleViewFilePickerAdapter mRecycleViewAdapter;
+    private FilePickerAdapter mRecycleViewAdapter;
 
     @Override
     protected void onCreate(@Nullable Bundle savedInstanceState) {
@@ -64,14 +59,12 @@ public class FilePickerActivity extends AppCompatActivity {
                     getString(R.string.app_name)) : getString(R.string.permission_denied_message));
             mPermissionLayout.setVisibility(View.VISIBLE);
             mRecyclerView.setVisibility(View.GONE);
-            mPermissionGrant.setOnClickListener(v -> {
-                APKExplorer.requestPermission(this);
-            });
+            mPermissionGrant.setOnClickListener(v -> APKExplorer.requestPermission(this));
             return;
         }
 
         mRecyclerView.setLayoutManager(new GridLayoutManager(this, APKExplorer.getSpanCount(this)));
-        mRecycleViewAdapter = new RecycleViewFilePickerAdapter(APKExplorer.getData(getFilesList(), true, this));
+        mRecycleViewAdapter = new FilePickerAdapter(APKExplorer.getData(getFilesList(), true, this));
         mRecyclerView.setAdapter(mRecycleViewAdapter);
 
         mTitle.setText(Common.getFilePath().equals(Environment.getExternalStorageDirectory().toString() + File.separator) ? getString(R.string.sdcard) : new File(Common.getFilePath()).getName());
@@ -136,39 +129,27 @@ public class FilePickerActivity extends AppCompatActivity {
     }
 
     private void reload(Activity activity) {
-        if (mLoader == null) {
-            mHandler.postDelayed(new Runnable() {
-                @SuppressLint("StaticFieldLeak")
-                @Override
-                public void run() {
-                    mLoader = new AsyncTask<Void, Void, List<String>>() {
-                        @Override
-                        protected void onPreExecute() {
-                            super.onPreExecute();
-                            APKExplorer.getData(getFilesList(), true, activity).clear();
-                            mRecyclerView.setVisibility(View.GONE);
-                        }
-
-                        @Override
-                        protected List<String> doInBackground(Void... voids) {
-                            mRecycleViewAdapter = new RecycleViewFilePickerAdapter(APKExplorer.getData(getFilesList(), true, activity));
-                            return null;
-                        }
-
-                        @Override
-                        protected void onPostExecute(List<String> recyclerViewItems) {
-                            super.onPostExecute(recyclerViewItems);
-                            mRecyclerView.setAdapter(mRecycleViewAdapter);
-                            mTitle.setText(Common.getFilePath().equals(Environment.getExternalStorageDirectory().toString() + File.separator) ? getString(R.string.sdcard)
-                                    : new File(Common.getFilePath()).getName());
-                            mRecyclerView.setVisibility(View.VISIBLE);
-                            mLoader = null;
-                        }
-                    };
-                    mLoader.execute();
-                }
-            }, 250);
-        }
+        new AsyncTasks() {
+
+            @Override
+            public void onPreExecute() {
+                APKExplorer.getData(getFilesList(), true, activity).clear();
+                mRecyclerView.setVisibility(View.GONE);
+            }
+
+            @Override
+            public void doInBackground() {
+                mRecycleViewAdapter = new FilePickerAdapter(APKExplorer.getData(getFilesList(), true, activity));
+            }
+
+            @Override
+            public void onPostExecute() {
+                mRecyclerView.setAdapter(mRecycleViewAdapter);
+                mTitle.setText(Common.getFilePath().equals(Environment.getExternalStorageDirectory().toString() + File.separator) ? getString(R.string.sdcard)
+                        : new File(Common.getFilePath()).getName());
+                mRecyclerView.setVisibility(View.VISIBLE);
+            }
+        }.execute();
     }
 
     @Override
diff --git a/app/src/main/java/com/apk/editor/activities/InstallerActivity.java b/app/src/main/java/com/apk/editor/activities/InstallerActivity.java
index 6b22122..56747c7 100644
--- a/app/src/main/java/com/apk/editor/activities/InstallerActivity.java
+++ b/app/src/main/java/com/apk/editor/activities/InstallerActivity.java
@@ -16,9 +16,11 @@ import com.apk.editor.utils.APKData;
 import com.apk.editor.utils.APKEditorUtils;
 import com.apk.editor.utils.AppData;
 import com.apk.editor.utils.Common;
+import com.apk.editor.utils.recyclerViewItems.PackageItems;
 import com.google.android.material.card.MaterialCardView;
 import com.google.android.material.textview.MaterialTextView;
 
+import java.io.File;
 import java.util.Objects;
 
 /*
@@ -134,6 +136,17 @@ public class InstallerActivity extends AppCompatActivity {
         if (APKEditorUtils.getString("installationStatus", "waiting", this).equals("waiting")) {
             return;
         }
+        if (APKEditorUtils.getString("installationStatus", "waiting", this).equals(getString(R.string.installation_status_success))) {
+            Common.getPackageData().add(new PackageItems(
+                    AppData.getAppName(Common.getPackageName(), this).toString(),
+                    Common.getPackageName(),
+                    AppData.getVersionName(AppData.getSourceDir(Common.getPackageName(), this), this),
+                    new File(AppData.getSourceDir(Common.getPackageName(), this)).length(),
+                    Objects.requireNonNull(AppData.getPackageInfo(Common.getPackageName(), this)).firstInstallTime,
+                    Objects.requireNonNull(AppData.getPackageInfo(Common.getPackageName(), this)).lastUpdateTime,
+                    AppData.getAppIcon(Common.getPackageName(), this)
+            ));
+        }
         if (APKEditorUtils.exist(getCacheDir().getPath() + "/splits")) {
             APKEditorUtils.delete(getCacheDir().getPath() + "/splits");
         }
diff --git a/app/src/main/java/com/apk/editor/activities/InstallerFilePickerActivity.java b/app/src/main/java/com/apk/editor/activities/InstallerFilePickerActivity.java
index d6fd50a..37490ae 100644
--- a/app/src/main/java/com/apk/editor/activities/InstallerFilePickerActivity.java
+++ b/app/src/main/java/com/apk/editor/activities/InstallerFilePickerActivity.java
@@ -3,11 +3,9 @@ package com.apk.editor.activities;
 import android.annotation.SuppressLint;
 import android.app.Activity;
 import android.content.pm.PackageManager;
-import android.os.AsyncTask;
 import android.os.Build;
 import android.os.Bundle;
 import android.os.Environment;
-import android.os.Handler;
 import android.view.Menu;
 import android.view.View;
 import android.widget.LinearLayout;
@@ -21,9 +19,10 @@ import androidx.recyclerview.widget.GridLayoutManager;
 import androidx.recyclerview.widget.RecyclerView;
 
 import com.apk.editor.R;
-import com.apk.editor.adapters.RecycleViewInstallerFilePickerAdapter;
+import com.apk.editor.adapters.InstallerFilePickerAdapter;
 import com.apk.editor.utils.APKEditorUtils;
 import com.apk.editor.utils.APKExplorer;
+import com.apk.editor.utils.AsyncTasks;
 import com.apk.editor.utils.Common;
 import com.apk.editor.utils.SplitAPKInstaller;
 import com.google.android.material.card.MaterialCardView;
@@ -31,7 +30,6 @@ import com.google.android.material.dialog.MaterialAlertDialogBuilder;
 import com.google.android.material.textview.MaterialTextView;
 
 import java.io.File;
-import java.util.List;
 import java.util.Objects;
 
 /*
@@ -39,11 +37,9 @@ import java.util.Objects;
  */
 public class InstallerFilePickerActivity extends AppCompatActivity {
 
-    private AsyncTask<Void, Void, List<String>> mLoader;
-    private final Handler mHandler = new Handler();
     private MaterialTextView mTitle;
     private RecyclerView mRecyclerView;
-    private RecycleViewInstallerFilePickerAdapter mRecycleViewAdapter;
+    private InstallerFilePickerAdapter mRecycleViewAdapter;
     public static final String TITLE_INTENT = "title";
 
     @SuppressLint("StringFormatInvalid")
@@ -73,7 +69,7 @@ public class InstallerFilePickerActivity extends AppCompatActivity {
         }
 
         mRecyclerView.setLayoutManager(new GridLayoutManager(this, APKExplorer.getSpanCount(this)));
-        mRecycleViewAdapter = new RecycleViewInstallerFilePickerAdapter(APKExplorer.getData(getFilesList(), false, this));
+        mRecycleViewAdapter = new InstallerFilePickerAdapter(APKExplorer.getData(getFilesList(), false, this));
         mRecyclerView.setAdapter(mRecycleViewAdapter);
 
         if (getIntent().getStringExtra(TITLE_INTENT) != null) {
@@ -135,48 +131,36 @@ public class InstallerFilePickerActivity extends AppCompatActivity {
     }
 
     private void reload(Activity activity) {
-        if (mLoader == null) {
-            mHandler.postDelayed(new Runnable() {
-                @SuppressLint("StaticFieldLeak")
-                @Override
-                public void run() {
-                    mLoader = new AsyncTask<Void, Void, List<String>>() {
-                        @Override
-                        protected void onPreExecute() {
-                            super.onPreExecute();
-                            APKExplorer.getData(getFilesList(), false, activity).clear();
-                            mRecyclerView.setVisibility(View.GONE);
-                        }
-
-                        @Override
-                        protected List<String> doInBackground(Void... voids) {
-                            mRecycleViewAdapter = new RecycleViewInstallerFilePickerAdapter(APKExplorer.getData(getFilesList(), false, activity));
-                            return null;
-                        }
-
-                        @Override
-                        protected void onPostExecute(List<String> recyclerViewItems) {
-                            super.onPostExecute(recyclerViewItems);
-                            mRecyclerView.setAdapter(mRecycleViewAdapter);
-                            if (getIntent().getStringExtra(TITLE_INTENT) != null) {
-                                mTitle.setText(getIntent().getStringExtra(TITLE_INTENT));
-                            } else {
-                                mTitle.setText(Common.getPath().equals(Environment.getExternalStorageDirectory().toString() + File.separator) ? getString(R.string.sdcard)
-                                        : new File(Common.getPath()).getName());
-                            }
-                            if (Common.getAPKList().isEmpty()) {
-                                Common.getSelectCard().setVisibility(View.GONE);
-                            } else {
-                                Common.getSelectCard().setVisibility(View.VISIBLE);
-                            }
-                            mRecyclerView.setVisibility(View.VISIBLE);
-                            mLoader = null;
-                        }
-                    };
-                    mLoader.execute();
+        new AsyncTasks() {
+
+            @Override
+            public void onPreExecute() {
+                APKExplorer.getData(getFilesList(), false, activity).clear();
+                mRecyclerView.setVisibility(View.GONE);
+            }
+
+            @Override
+            public void doInBackground() {
+                mRecycleViewAdapter = new InstallerFilePickerAdapter(APKExplorer.getData(getFilesList(), false, activity));
+            }
+
+            @Override
+            public void onPostExecute() {
+                mRecyclerView.setAdapter(mRecycleViewAdapter);
+                if (getIntent().getStringExtra(TITLE_INTENT) != null) {
+                    mTitle.setText(getIntent().getStringExtra(TITLE_INTENT));
+                } else {
+                    mTitle.setText(Common.getPath().equals(Environment.getExternalStorageDirectory().toString() + File.separator) ? getString(R.string.sdcard)
+                            : new File(Common.getPath()).getName());
                 }
-            }, 250);
-        }
+                if (Common.getAPKList().isEmpty()) {
+                    Common.getSelectCard().setVisibility(View.GONE);
+                } else {
+                    Common.getSelectCard().setVisibility(View.VISIBLE);
+                }
+                mRecyclerView.setVisibility(View.VISIBLE);
+            }
+        }.execute();
     }
 
     @Override
diff --git a/app/src/main/java/com/apk/editor/activities/SettingsActivity.java b/app/src/main/java/com/apk/editor/activities/SettingsActivity.java
index eff587e..ff9c4a5 100644
--- a/app/src/main/java/com/apk/editor/activities/SettingsActivity.java
+++ b/app/src/main/java/com/apk/editor/activities/SettingsActivity.java
@@ -11,7 +11,7 @@ import androidx.recyclerview.widget.LinearLayoutManager;
 import androidx.recyclerview.widget.RecyclerView;
 
 import com.apk.editor.R;
-import com.apk.editor.adapters.RecycleViewSettingsAdapter;
+import com.apk.editor.adapters.SettingsAdapter;
 import com.apk.editor.utils.AppSettings;
 
 /*
@@ -30,7 +30,7 @@ public class SettingsActivity extends AppCompatActivity {
 
         mRecyclerView.setLayoutManager(new LinearLayoutManager(this));
         mRecyclerView.addItemDecoration(new DividerItemDecoration(this, DividerItemDecoration.VERTICAL));
-        RecycleViewSettingsAdapter mRecycleViewAdapter = new RecycleViewSettingsAdapter(AppSettings.getData(this));
+        SettingsAdapter mRecycleViewAdapter = new SettingsAdapter(AppSettings.getData(this));
         mRecyclerView.setAdapter(mRecycleViewAdapter);
 
         mRecycleViewAdapter.setOnItemClickListener((position, v) ->
diff --git a/app/src/main/java/com/apk/editor/activities/StartActivity.java b/app/src/main/java/com/apk/editor/activities/StartActivity.java
new file mode 100644
index 0000000..490be95
--- /dev/null
+++ b/app/src/main/java/com/apk/editor/activities/StartActivity.java
@@ -0,0 +1,74 @@
+package com.apk.editor.activities;
+
+import android.app.Activity;
+import android.content.Intent;
+import android.os.Bundle;
+import android.view.View;
+import android.widget.ProgressBar;
+
+import androidx.appcompat.app.AppCompatActivity;
+
+import com.apk.editor.MainActivity;
+import com.apk.editor.R;
+import com.apk.editor.utils.APKEditorUtils;
+import com.apk.editor.utils.AppData;
+import com.apk.editor.utils.AsyncTasks;
+import com.apk.editor.utils.Common;
+import com.google.android.material.card.MaterialCardView;
+import com.google.android.material.textview.MaterialTextView;
+
+/*
+ * Created by APK Explorer & Editor <apkeditor@protonmail.com> on March 04, 2021
+ */
+public class StartActivity extends AppCompatActivity {
+
+    private ProgressBar mProgress;
+
+    @Override
+    protected void onCreate(Bundle savedInstanceState) {
+        super.onCreate(savedInstanceState);
+        setContentView(R.layout.activity_start);
+
+        MaterialCardView mStartCard = findViewById(R.id.start_card);
+        MaterialTextView mText = findViewById(R.id.text);
+        mProgress = findViewById(R.id.progress_bar);
+
+        if (!APKEditorUtils.getBoolean("welcome_message", false, this)) {
+            mText.setVisibility(View.VISIBLE);
+            mStartCard.setVisibility(View.VISIBLE);
+            mProgress.setVisibility(View.GONE);
+        } else {
+            acquireData(this);
+        }
+
+        mStartCard.setOnClickListener(v -> {
+            mText.setVisibility(View.GONE);
+            mProgress.setVisibility(View.VISIBLE);
+            mStartCard.setVisibility(View.GONE);
+            acquireData(this);
+        });
+    }
+
+    private void acquireData(Activity activity) {
+        new AsyncTasks() {
+
+            @Override
+            public void onPreExecute() {
+                APKEditorUtils.saveBoolean("welcome_message", true, activity);
+            }
+
+            @Override
+            public void doInBackground() {
+                Common.setPackageData(AppData.getRawData(activity));
+            }
+
+            @Override
+            public void onPostExecute() {
+                Intent mainActivity = new Intent(activity, MainActivity.class);
+                activity.startActivity(mainActivity);
+                activity.finish();
+            }
+        }.execute();
+    }
+
+}
\ No newline at end of file
diff --git a/app/src/main/java/com/apk/editor/adapters/RecycleViewAPKExplorerAdapter.java b/app/src/main/java/com/apk/editor/adapters/APKExplorerAdapter.java
similarity index 91%
rename from app/src/main/java/com/apk/editor/adapters/RecycleViewAPKExplorerAdapter.java
rename to app/src/main/java/com/apk/editor/adapters/APKExplorerAdapter.java
index da11700..6e5e175 100644
--- a/app/src/main/java/com/apk/editor/adapters/RecycleViewAPKExplorerAdapter.java
+++ b/app/src/main/java/com/apk/editor/adapters/APKExplorerAdapter.java
@@ -30,26 +30,26 @@ import java.util.List;
 /*
  * Created by APK Explorer & Editor <apkeditor@protonmail.com> on March 04, 2021
  */
-public class RecycleViewAPKExplorerAdapter extends RecyclerView.Adapter<RecycleViewAPKExplorerAdapter.ViewHolder> {
+public class APKExplorerAdapter extends RecyclerView.Adapter<APKExplorerAdapter.ViewHolder> {
 
     private static ClickListener clickListener;
 
     private static List<String> data;
 
-    public RecycleViewAPKExplorerAdapter(List<String> data) {
-        RecycleViewAPKExplorerAdapter.data = data;
+    public APKExplorerAdapter(List<String> data) {
+        APKExplorerAdapter.data = data;
     }
 
     @NonNull
     @Override
-    public RecycleViewAPKExplorerAdapter.ViewHolder onCreateViewHolder(ViewGroup parent, int viewType) {
+    public APKExplorerAdapter.ViewHolder onCreateViewHolder(ViewGroup parent, int viewType) {
         View rowItem = LayoutInflater.from(parent.getContext()).inflate(R.layout.recycle_view_apkexplorer, parent, false);
-        return new RecycleViewAPKExplorerAdapter.ViewHolder(rowItem);
+        return new APKExplorerAdapter.ViewHolder(rowItem);
     }
 
     @SuppressLint({"UseCompatLoadingForDrawables", "NotifyDataSetChanged"})
     @Override
-    public void onBindViewHolder(@NonNull RecycleViewAPKExplorerAdapter.ViewHolder holder, int position) {
+    public void onBindViewHolder(@NonNull APKExplorerAdapter.ViewHolder holder, int position) {
         if (new File(data.get(position)).isDirectory()) {
             holder.mIcon.setImageDrawable(holder.mTitle.getContext().getResources().getDrawable(R.drawable.ic_folder));
             holder.mIcon.setBackground(holder.mIcon.getContext().getResources().getDrawable(R.drawable.ic_circle));
@@ -76,7 +76,7 @@ public class RecycleViewAPKExplorerAdapter extends RecyclerView.Adapter<RecycleV
             }
         }
         holder.mTitle.setText(new File(data.get(position)).getName());
-        holder.mDescription.setText(AppData.getAPKSize(data.get(position)));
+        holder.mDescription.setText(AppData.getAPKSize(new File(data.get(position)).length()));
         holder.mSettings.setOnClickListener(v -> {
             PopupMenu popupMenu = new PopupMenu(v.getContext(), v);
             Menu menu = popupMenu.getMenu();
@@ -155,7 +155,7 @@ public class RecycleViewAPKExplorerAdapter extends RecyclerView.Adapter<RecycleV
     }
 
     public void setOnItemClickListener(ClickListener clickListener) {
-        RecycleViewAPKExplorerAdapter.clickListener = clickListener;
+        APKExplorerAdapter.clickListener = clickListener;
     }
 
     public interface ClickListener {
diff --git a/app/src/main/java/com/apk/editor/adapters/RecycleViewApksAdapter.java b/app/src/main/java/com/apk/editor/adapters/APKsAdapter.java
similarity index 96%
rename from app/src/main/java/com/apk/editor/adapters/RecycleViewApksAdapter.java
rename to app/src/main/java/com/apk/editor/adapters/APKsAdapter.java
index cc50823..6572f50 100644
--- a/app/src/main/java/com/apk/editor/adapters/RecycleViewApksAdapter.java
+++ b/app/src/main/java/com/apk/editor/adapters/APKsAdapter.java
@@ -33,24 +33,24 @@ import java.util.Objects;
 /*
  * Created by APK Explorer & Editor <apkeditor@protonmail.com> on March 04, 2021
  */
-public class RecycleViewApksAdapter extends RecyclerView.Adapter<RecycleViewApksAdapter.ViewHolder> {
+public class APKsAdapter extends RecyclerView.Adapter<APKsAdapter.ViewHolder> {
 
     private static List<String> data;
 
-    public RecycleViewApksAdapter(List<String> data) {
-        RecycleViewApksAdapter.data = data;
+    public APKsAdapter(List<String> data) {
+        APKsAdapter.data = data;
     }
 
     @NonNull
     @Override
-    public RecycleViewApksAdapter.ViewHolder onCreateViewHolder(ViewGroup parent, int viewType) {
+    public APKsAdapter.ViewHolder onCreateViewHolder(ViewGroup parent, int viewType) {
         View rowItem = LayoutInflater.from(parent.getContext()).inflate(R.layout.recycle_view_apks, parent, false);
         return new ViewHolder(rowItem);
     }
 
     @SuppressLint({"UseCompatLoadingForDrawables", "NotifyDataSetChanged"})
     @Override
-    public void onBindViewHolder(@NonNull RecycleViewApksAdapter.ViewHolder holder, int position) {
+    public void onBindViewHolder(@NonNull APKsAdapter.ViewHolder holder, int position) {
         try {
             if (new File(data.get(position)).isDirectory()) {
                 if (APKData.getAppIcon(data.get(position) + "/base.apk", holder.mAppName.getContext()) != null) {
@@ -121,7 +121,7 @@ public class RecycleViewApksAdapter extends RecyclerView.Adapter<RecycleViewApks
                 if (APKData.getVersionName(data.get(position), holder.mAppName.getContext()) != null) {
                     holder.mVersion.setText(holder.mVersion.getContext().getString(R.string.version, APKData.getVersionName(data.get(position), holder.mAppName.getContext())));
                 }
-                holder.mSize.setText(holder.mSize.getContext().getString(R.string.size, AppData.getAPKSize(data.get(position))));
+                holder.mSize.setText(holder.mSize.getContext().getString(R.string.size, AppData.getAPKSize(new File(data.get(position)).length())));
                 holder.mSize.setTextColor(APKEditorUtils.isDarkTheme(holder.mSize.getContext()) ? Color.GREEN : Color.BLACK);
                 holder.mSize.setVisibility(View.VISIBLE);
                 holder.mCard.setOnClickListener(v -> {
diff --git a/app/src/main/java/com/apk/editor/adapters/RecycleViewAboutAdapter.java b/app/src/main/java/com/apk/editor/adapters/AboutAdapter.java
similarity index 86%
rename from app/src/main/java/com/apk/editor/adapters/RecycleViewAboutAdapter.java
rename to app/src/main/java/com/apk/editor/adapters/AboutAdapter.java
index 75d5cb8..41bf910 100644
--- a/app/src/main/java/com/apk/editor/adapters/RecycleViewAboutAdapter.java
+++ b/app/src/main/java/com/apk/editor/adapters/AboutAdapter.java
@@ -20,7 +20,7 @@ import com.apk.editor.R;
 import com.apk.editor.activities.CreditsActivity;
 import com.apk.editor.activities.DocumentationActivity;
 import com.apk.editor.utils.APKEditorUtils;
-import com.apk.editor.utils.RecycleViewItem;
+import com.apk.editor.utils.recyclerViewItems.AboutItems;
 import com.google.android.material.textview.MaterialTextView;
 
 import java.util.ArrayList;
@@ -28,24 +28,24 @@ import java.util.ArrayList;
 /*
  * Created by APK Explorer & Editor <apkeditor@protonmail.com> on March 04, 2021
  */
-public class RecycleViewAboutAdapter extends RecyclerView.Adapter<RecycleViewAboutAdapter.ViewHolder> {
+public class AboutAdapter extends RecyclerView.Adapter<AboutAdapter.ViewHolder> {
 
-    private static ArrayList<RecycleViewItem> data;
+    private static ArrayList<AboutItems> data;
 
-    public RecycleViewAboutAdapter(ArrayList<RecycleViewItem> data) {
-        RecycleViewAboutAdapter.data = data;
+    public AboutAdapter(ArrayList<AboutItems> data) {
+        AboutAdapter.data = data;
     }
 
     @NonNull
     @Override
-    public RecycleViewAboutAdapter.ViewHolder onCreateViewHolder(ViewGroup parent, int viewType) {
+    public AboutAdapter.ViewHolder onCreateViewHolder(ViewGroup parent, int viewType) {
         View rowItem = LayoutInflater.from(parent.getContext()).inflate(R.layout.recycle_view_about, parent, false);
-        return new RecycleViewAboutAdapter.ViewHolder(rowItem);
+        return new AboutAdapter.ViewHolder(rowItem);
     }
 
     @SuppressLint("UseCompatLoadingForDrawables")
     @Override
-    public void onBindViewHolder(@NonNull RecycleViewAboutAdapter.ViewHolder holder, int position) {
+    public void onBindViewHolder(@NonNull AboutAdapter.ViewHolder holder, int position) {
         holder.Title.setText(data.get(position).getTitle());
         holder.Description.setText(data.get(position).getDescription());
         if (APKEditorUtils.isDarkTheme(holder.Title.getContext())) {
diff --git a/app/src/main/java/com/apk/editor/adapters/RecycleViewAppsAdapter.java b/app/src/main/java/com/apk/editor/adapters/ApplicationsAdapter.java
similarity index 79%
rename from app/src/main/java/com/apk/editor/adapters/RecycleViewAppsAdapter.java
rename to app/src/main/java/com/apk/editor/adapters/ApplicationsAdapter.java
index 63e65d7..f9daee6 100644
--- a/app/src/main/java/com/apk/editor/adapters/RecycleViewAppsAdapter.java
+++ b/app/src/main/java/com/apk/editor/adapters/ApplicationsAdapter.java
@@ -19,6 +19,7 @@ import com.apk.editor.utils.APKEditorUtils;
 import com.apk.editor.utils.APKExplorer;
 import com.apk.editor.utils.AppData;
 import com.apk.editor.utils.Common;
+import com.apk.editor.utils.recyclerViewItems.PackageItems;
 import com.google.android.material.card.MaterialCardView;
 import com.google.android.material.dialog.MaterialAlertDialogBuilder;
 import com.google.android.material.textview.MaterialTextView;
@@ -28,43 +29,43 @@ import java.util.List;
 /*
  * Created by APK Explorer & Editor <apkeditor@protonmail.com> on March 04, 2021
  */
-public class RecycleViewAppsAdapter extends RecyclerView.Adapter<RecycleViewAppsAdapter.ViewHolder> {
+public class ApplicationsAdapter extends RecyclerView.Adapter<ApplicationsAdapter.ViewHolder> {
 
-    private static List<String> data;
+    private static List<PackageItems> data;
 
-    public RecycleViewAppsAdapter(List<String> data) {
-        RecycleViewAppsAdapter.data = data;
+    public ApplicationsAdapter(List<PackageItems> data) {
+        ApplicationsAdapter.data = data;
     }
 
     @NonNull
     @Override
-    public RecycleViewAppsAdapter.ViewHolder onCreateViewHolder(ViewGroup parent, int viewType) {
+    public ApplicationsAdapter.ViewHolder onCreateViewHolder(ViewGroup parent, int viewType) {
         View rowItem = LayoutInflater.from(parent.getContext()).inflate(R.layout.recycle_view, parent, false);
         return new ViewHolder(rowItem);
     }
 
     @Override
-    public void onBindViewHolder(@NonNull RecycleViewAppsAdapter.ViewHolder holder, int position) {
+    public void onBindViewHolder(@NonNull ApplicationsAdapter.ViewHolder holder, int position) {
         try {
-            holder.mAppIcon.setImageDrawable(AppData.getAppIcon(data.get(position), holder.mAppIcon.getContext()));
-            if (Common.getSearchWord() != null && Common.isTextMatched(data.get(position), Common.getSearchWord())) {
-                holder.mAppID.setText(APKEditorUtils.fromHtml(data.get(position).replace(Common.getSearchWord(), "<b><i><font color=\"" +
+            holder.mAppIcon.setImageDrawable(data.get(position).getAppIcon());
+            if (Common.getSearchWord() != null && Common.isTextMatched(data.get(position).getPackageName(), Common.getSearchWord())) {
+                holder.mAppID.setText(APKEditorUtils.fromHtml(data.get(position).getPackageName().replace(Common.getSearchWord(), "<b><i><font color=\"" +
                         Color.RED + "\">" + Common.getSearchWord() + "</font></i></b>")));
             } else {
-                holder.mAppID.setText(data.get(position));
+                holder.mAppID.setText(data.get(position).getPackageName());
             }
-            if (Common.getSearchWord() != null && Common.isTextMatched(AppData.getAppName(data.get(position), holder.mAppName.getContext()).toString(), Common.getSearchWord())) {
-                holder.mAppName.setText(APKEditorUtils.fromHtml(AppData.getAppName(data.get(position), holder.mAppName.getContext()).toString().replace(Common.getSearchWord(),
+            if (Common.getSearchWord() != null && Common.isTextMatched(data.get(position).getAppName(), Common.getSearchWord())) {
+                holder.mAppName.setText(APKEditorUtils.fromHtml(data.get(position).getAppName().replace(Common.getSearchWord(),
                         "<b><i><font color=\"" + Color.RED + "\">" + Common.getSearchWord() + "</font></i></b>")));
             } else {
-                holder.mAppName.setText(AppData.getAppName(data.get(position), holder.mAppName.getContext()));
+                holder.mAppName.setText(data.get(position).getAppName());
             }
-            holder.mVersion.setText(holder.mAppName.getContext().getString(R.string.version, AppData.getVersionName(AppData.getSourceDir(data.get(position), holder.mAppName.getContext()), holder.mAppName.getContext())));
-            holder.mSize.setText(holder.mAppName.getContext().getString(R.string.size, AppData.getAPKSize(AppData.getSourceDir(data.get(position), holder.mAppName.getContext()))));
+            holder.mVersion.setText(holder.mAppName.getContext().getString(R.string.version, data.get(position).getAppVersion()));
+            holder.mSize.setText(holder.mAppName.getContext().getString(R.string.size, AppData.getAPKSize(data.get(position).getAPKSize())));
             holder.mVersion.setTextColor(Color.RED);
             holder.mSize.setTextColor(APKEditorUtils.isDarkTheme(holder.mSize.getContext()) ? Color.GREEN : Color.BLACK);
             holder.mAppIcon.setOnClickListener(v -> {
-                Common.setAppID(data.get(position));
+                Common.setAppID(data.get(position).getPackageName());
                 Intent imageView = new Intent(v.getContext(), ImageViewActivity.class);
                 v.getContext().startActivity(imageView);
             });
@@ -85,7 +86,7 @@ public class RecycleViewAppsAdapter extends RecyclerView.Adapter<RecycleViewApps
                                 R.array.export_options), (dialogInterface, i) -> {
                             switch (i) {
                                 case 0:
-                                    APKData.exportApp(data.get(position), v.getContext());
+                                    APKData.exportApp(data.get(position).getPackageName(), v.getContext());
                                     break;
                                 case 1:
                                     if (!APKEditorUtils.getBoolean("firstSigning", false, v.getContext())) {
@@ -94,7 +95,7 @@ public class RecycleViewAppsAdapter extends RecyclerView.Adapter<RecycleViewApps
                                             APKEditorUtils.saveBoolean("firstSigning", true, v.getContext());
                                             switch (ii) {
                                                 case 0:
-                                                    APKData.signAPK(data.get(position), v.getContext());
+                                                    APKData.signAPK(data.get(position).getPackageName(), v.getContext());
                                                     break;
                                                 case 1:
                                                     Intent signing = new Intent(v.getContext(), APKSignActivity.class);
@@ -105,14 +106,14 @@ public class RecycleViewAppsAdapter extends RecyclerView.Adapter<RecycleViewApps
                                                 .setOnDismissListener(dialogInterfacei -> {
                                                 }).show();
                                     } else {
-                                        APKData.signAPK(data.get(position), v.getContext());
+                                        APKData.signAPK(data.get(position).getPackageName(), v.getContext());
                                     }
                                     break;
                             }
                         }).setOnDismissListener(dialogInterface -> {
                         }).show();
                     } else if (APKEditorUtils.getString("exportAPKs", null, v.getContext()).equals(v.getContext().getString(R.string.export_storage))) {
-                        APKData.exportApp(data.get(position), v.getContext());
+                        APKData.exportApp(data.get(position).getPackageName(), v.getContext());
                     } else {
                         if (!APKEditorUtils.getBoolean("firstSigning", false, v.getContext())) {
                             new MaterialAlertDialogBuilder(v.getContext()).setItems(v.getContext().getResources().getStringArray(
@@ -120,7 +121,7 @@ public class RecycleViewAppsAdapter extends RecyclerView.Adapter<RecycleViewApps
                                 APKEditorUtils.saveBoolean("firstSigning", true, v.getContext());
                                 switch (ii) {
                                     case 0:
-                                        APKData.signAPK(data.get(position), v.getContext());
+                                        APKData.signAPK(data.get(position).getPackageName(), v.getContext());
                                         break;
                                     case 1:
                                         Intent signing = new Intent(v.getContext(), APKSignActivity.class);
@@ -131,17 +132,17 @@ public class RecycleViewAppsAdapter extends RecyclerView.Adapter<RecycleViewApps
                                     .setOnDismissListener(dialogInterfacei -> {
                                     }).show();
                         } else {
-                            APKData.signAPK(data.get(position), v.getContext());
+                            APKData.signAPK(data.get(position).getPackageName(), v.getContext());
                         }
                     }
                 } else {
                     new MaterialAlertDialogBuilder(v.getContext())
-                            .setIcon(AppData.getAppIcon(data.get(position), v.getContext()))
-                            .setTitle(AppData.getAppName(data.get(position), v.getContext()))
-                            .setMessage(v.getContext().getString(R.string.export_app_question, AppData.getAppName(data.get(position), v.getContext())))
+                            .setIcon(data.get(position).getAppIcon())
+                            .setTitle(data.get(position).getAppName())
+                            .setMessage(v.getContext().getString(R.string.export_app_question, data.get(position).getAppName()))
                             .setNegativeButton(R.string.cancel, (dialog, id) -> {
                             })
-                            .setPositiveButton(R.string.export, (dialog, id) -> APKData.exportApp(data.get(position), v.getContext())).show();
+                            .setPositiveButton(R.string.export, (dialog, id) -> APKData.exportApp(data.get(position).getPackageName(), v.getContext())).show();
                 }
                 return false;
             });
@@ -171,7 +172,7 @@ public class RecycleViewAppsAdapter extends RecyclerView.Adapter<RecycleViewApps
 
         @Override
         public void onClick(View view) {
-            APKExplorer.exploreAPK(data.get(getAdapterPosition()), view.getContext());
+            APKExplorer.exploreAPK(data.get(getAdapterPosition()).getPackageName(), view.getContext());
         }
     }
 
diff --git a/app/src/main/java/com/apk/editor/adapters/RecycleViewFilePickerAdapter.java b/app/src/main/java/com/apk/editor/adapters/FilePickerAdapter.java
similarity index 87%
rename from app/src/main/java/com/apk/editor/adapters/RecycleViewFilePickerAdapter.java
rename to app/src/main/java/com/apk/editor/adapters/FilePickerAdapter.java
index 04fe0a4..b4302e2 100644
--- a/app/src/main/java/com/apk/editor/adapters/RecycleViewFilePickerAdapter.java
+++ b/app/src/main/java/com/apk/editor/adapters/FilePickerAdapter.java
@@ -21,26 +21,26 @@ import java.util.List;
 /*
  * Created by APK Explorer & Editor <apkeditor@protonmail.com> on March 05, 2021
  */
-public class RecycleViewFilePickerAdapter extends RecyclerView.Adapter<RecycleViewFilePickerAdapter.ViewHolder> {
+public class FilePickerAdapter extends RecyclerView.Adapter<FilePickerAdapter.ViewHolder> {
 
     private static ClickListener clickListener;
 
     private final List<String> data;
 
-    public RecycleViewFilePickerAdapter(List<String> data) {
+    public FilePickerAdapter(List<String> data) {
         this.data = data;
     }
 
     @NonNull
     @Override
-    public RecycleViewFilePickerAdapter.ViewHolder onCreateViewHolder(ViewGroup parent, int viewType) {
+    public FilePickerAdapter.ViewHolder onCreateViewHolder(ViewGroup parent, int viewType) {
         View rowItem = LayoutInflater.from(parent.getContext()).inflate(R.layout.recycle_view_filepicker, parent, false);
-        return new RecycleViewFilePickerAdapter.ViewHolder(rowItem);
+        return new FilePickerAdapter.ViewHolder(rowItem);
     }
 
     @SuppressLint("UseCompatLoadingForDrawables")
     @Override
-    public void onBindViewHolder(@NonNull RecycleViewFilePickerAdapter.ViewHolder holder, int position) {
+    public void onBindViewHolder(@NonNull FilePickerAdapter.ViewHolder holder, int position) {
         if (new File(this.data.get(position)).isDirectory()) {
             holder.mIcon.setImageDrawable(holder.mTitle.getContext().getResources().getDrawable(R.drawable.ic_folder));
             holder.mIcon.setBackground(holder.mIcon.getContext().getResources().getDrawable(R.drawable.ic_circle));
@@ -90,7 +90,7 @@ public class RecycleViewFilePickerAdapter extends RecyclerView.Adapter<RecycleVi
     }
 
     public void setOnItemClickListener(ClickListener clickListener) {
-        RecycleViewFilePickerAdapter.clickListener = clickListener;
+        FilePickerAdapter.clickListener = clickListener;
     }
 
     public interface ClickListener {
diff --git a/app/src/main/java/com/apk/editor/adapters/RecycleViewInstallerFilePickerAdapter.java b/app/src/main/java/com/apk/editor/adapters/InstallerFilePickerAdapter.java
similarity index 86%
rename from app/src/main/java/com/apk/editor/adapters/RecycleViewInstallerFilePickerAdapter.java
rename to app/src/main/java/com/apk/editor/adapters/InstallerFilePickerAdapter.java
index baa1a95..af0aaa5 100644
--- a/app/src/main/java/com/apk/editor/adapters/RecycleViewInstallerFilePickerAdapter.java
+++ b/app/src/main/java/com/apk/editor/adapters/InstallerFilePickerAdapter.java
@@ -24,26 +24,26 @@ import java.util.List;
 /*
  * Created by APK Explorer & Editor <apkeditor@protonmail.com> on March 21, 2021
  */
-public class RecycleViewInstallerFilePickerAdapter extends RecyclerView.Adapter<RecycleViewInstallerFilePickerAdapter.ViewHolder> {
+public class InstallerFilePickerAdapter extends RecyclerView.Adapter<InstallerFilePickerAdapter.ViewHolder> {
 
     private static ClickListener clickListener;
 
     private final List<String> data;
 
-    public RecycleViewInstallerFilePickerAdapter(List<String> data) {
+    public InstallerFilePickerAdapter(List<String> data) {
         this.data = data;
     }
 
     @NonNull
     @Override
-    public RecycleViewInstallerFilePickerAdapter.ViewHolder onCreateViewHolder(ViewGroup parent, int viewType) {
+    public InstallerFilePickerAdapter.ViewHolder onCreateViewHolder(ViewGroup parent, int viewType) {
         View rowItem = LayoutInflater.from(parent.getContext()).inflate(R.layout.recycle_view_installerfilepicker, parent, false);
-        return new RecycleViewInstallerFilePickerAdapter.ViewHolder(rowItem);
+        return new InstallerFilePickerAdapter.ViewHolder(rowItem);
     }
 
     @SuppressLint("UseCompatLoadingForDrawables")
     @Override
-    public void onBindViewHolder(@NonNull RecycleViewInstallerFilePickerAdapter.ViewHolder holder, int position) {
+    public void onBindViewHolder(@NonNull InstallerFilePickerAdapter.ViewHolder holder, int position) {
         try {
             if (new File(this.data.get(position)).isDirectory()) {
                 holder.mIcon.setImageDrawable(holder.mIcon.getContext().getResources().getDrawable(R.drawable.ic_folder));
@@ -71,14 +71,14 @@ public class RecycleViewInstallerFilePickerAdapter extends RecyclerView.Adapter<
                     }
                     Common.getSelectCard().setVisibility(Common.getAPKList().isEmpty() ? View.GONE : View.VISIBLE);
                 });
-                holder.mSize.setText(AppData.getAPKSize(data.get(position)));
+                holder.mSize.setText(AppData.getAPKSize(new File(data.get(position)).length()));
                 holder.mSize.setVisibility(View.VISIBLE);
                 holder.mCheckBox.setVisibility(View.VISIBLE);
             } else {
                 holder.mIcon.setImageDrawable(holder.mIcon.getContext().getResources().getDrawable(R.drawable.ic_bundle));
                 holder.mIcon.setColorFilter(APKEditorUtils.isDarkTheme(holder.mIcon.getContext()) ? holder.mIcon.getContext()
                         .getResources().getColor(R.color.colorWhite) : holder.mIcon.getContext().getResources().getColor(R.color.colorBlack));
-                holder.mSize.setText(AppData.getAPKSize(data.get(position)));
+                holder.mSize.setText(AppData.getAPKSize(new File(data.get(position)).length()));
                 holder.mSize.setVisibility(View.VISIBLE);
             }
             holder.mTitle.setText(new File(this.data.get(position)).getName());
@@ -112,7 +112,7 @@ public class RecycleViewInstallerFilePickerAdapter extends RecyclerView.Adapter<
     }
 
     public void setOnItemClickListener(ClickListener clickListener) {
-        RecycleViewInstallerFilePickerAdapter.clickListener = clickListener;
+        InstallerFilePickerAdapter.clickListener = clickListener;
     }
 
     public interface ClickListener {
diff --git a/app/src/main/java/com/apk/editor/adapters/RecycleViewProjectsAdapter.java b/app/src/main/java/com/apk/editor/adapters/ProjectsAdapter.java
similarity index 95%
rename from app/src/main/java/com/apk/editor/adapters/RecycleViewProjectsAdapter.java
rename to app/src/main/java/com/apk/editor/adapters/ProjectsAdapter.java
index 4b2b3b3..ef74cd7 100644
--- a/app/src/main/java/com/apk/editor/adapters/RecycleViewProjectsAdapter.java
+++ b/app/src/main/java/com/apk/editor/adapters/ProjectsAdapter.java
@@ -30,24 +30,24 @@ import java.util.List;
 /*
  * Created by APK Explorer & Editor <apkeditor@protonmail.com> on March 06, 2021
  */
-public class RecycleViewProjectsAdapter extends RecyclerView.Adapter<RecycleViewProjectsAdapter.ViewHolder> {
+public class ProjectsAdapter extends RecyclerView.Adapter<ProjectsAdapter.ViewHolder> {
 
     private static List<String> data;
 
-    public RecycleViewProjectsAdapter(List<String> data) {
-        RecycleViewProjectsAdapter.data = data;
+    public ProjectsAdapter(List<String> data) {
+        ProjectsAdapter.data = data;
     }
 
     @NonNull
     @Override
-    public RecycleViewProjectsAdapter.ViewHolder onCreateViewHolder(ViewGroup parent, int viewType) {
+    public ProjectsAdapter.ViewHolder onCreateViewHolder(ViewGroup parent, int viewType) {
         View rowItem = LayoutInflater.from(parent.getContext()).inflate(R.layout.recycle_view_apks, parent, false);
         return new ViewHolder(rowItem);
     }
 
     @SuppressLint({"UseCompatLoadingForDrawables", "NotifyDataSetChanged"})
     @Override
-    public void onBindViewHolder(@NonNull RecycleViewProjectsAdapter.ViewHolder holder, int position) {
+    public void onBindViewHolder(@NonNull ProjectsAdapter.ViewHolder holder, int position) {
         try {
             if (AppData.isAppInstalled(new File(data.get(position)).getName(), holder.mAppIcon.getContext())) {
                 holder.mAppIcon.setImageDrawable(AppData.getAppIcon(new File(data.get(position)).getName(), holder.mAppIcon.getContext()));
diff --git a/app/src/main/java/com/apk/editor/adapters/RecycleViewSettingsAdapter.java b/app/src/main/java/com/apk/editor/adapters/SettingsAdapter.java
similarity index 80%
rename from app/src/main/java/com/apk/editor/adapters/RecycleViewSettingsAdapter.java
rename to app/src/main/java/com/apk/editor/adapters/SettingsAdapter.java
index b753aeb..c7d5b56 100644
--- a/app/src/main/java/com/apk/editor/adapters/RecycleViewSettingsAdapter.java
+++ b/app/src/main/java/com/apk/editor/adapters/SettingsAdapter.java
@@ -12,7 +12,7 @@ import androidx.recyclerview.widget.RecyclerView;
 
 import com.apk.editor.R;
 import com.apk.editor.utils.APKEditorUtils;
-import com.apk.editor.utils.RecycleViewSettingsItem;
+import com.apk.editor.utils.recyclerViewItems.SettingsItems;
 import com.google.android.material.textview.MaterialTextView;
 
 import java.util.ArrayList;
@@ -20,26 +20,26 @@ import java.util.ArrayList;
 /*
  * Created by APK Explorer & Editor <apkeditor@protonmail.com> on March 31, 2021
  */
-public class RecycleViewSettingsAdapter extends RecyclerView.Adapter<RecycleViewSettingsAdapter.ViewHolder> {
+public class SettingsAdapter extends RecyclerView.Adapter<SettingsAdapter.ViewHolder> {
 
     private static ClickListener clickListener;
 
-    private static ArrayList<RecycleViewSettingsItem> data;
+    private static ArrayList<SettingsItems> data;
 
-    public RecycleViewSettingsAdapter(ArrayList<RecycleViewSettingsItem> data) {
-        RecycleViewSettingsAdapter.data = data;
+    public SettingsAdapter(ArrayList<SettingsItems> data) {
+        SettingsAdapter.data = data;
     }
 
     @NonNull
     @Override
-    public RecycleViewSettingsAdapter.ViewHolder onCreateViewHolder(ViewGroup parent, int viewType) {
+    public SettingsAdapter.ViewHolder onCreateViewHolder(ViewGroup parent, int viewType) {
         View rowItem = LayoutInflater.from(parent.getContext()).inflate(R.layout.recycle_view_about, parent, false);
         return new ViewHolder(rowItem);
     }
 
     @SuppressLint("UseCompatLoadingForDrawables")
     @Override
-    public void onBindViewHolder(@NonNull RecycleViewSettingsAdapter.ViewHolder holder, int position) {
+    public void onBindViewHolder(@NonNull SettingsAdapter.ViewHolder holder, int position) {
         holder.Title.setText(data.get(position).getTitle());
         if (data.get(position).getDescription() != null) {
             holder.Description.setText(data.get(position).getDescription());
@@ -81,7 +81,7 @@ public class RecycleViewSettingsAdapter extends RecyclerView.Adapter<RecycleView
     }
 
     public void setOnItemClickListener(ClickListener clickListener) {
-        RecycleViewSettingsAdapter.clickListener = clickListener;
+        SettingsAdapter.clickListener = clickListener;
     }
 
     public interface ClickListener {
diff --git a/app/src/main/java/com/apk/editor/fragments/APKExplorerFragment.java b/app/src/main/java/com/apk/editor/fragments/APKExplorerFragment.java
index 27d342b..3f351f5 100644
--- a/app/src/main/java/com/apk/editor/fragments/APKExplorerFragment.java
+++ b/app/src/main/java/com/apk/editor/fragments/APKExplorerFragment.java
@@ -3,7 +3,6 @@ package com.apk.editor.fragments;
 import android.annotation.SuppressLint;
 import android.app.Activity;
 import android.content.Intent;
-import android.os.AsyncTask;
 import android.os.Bundle;
 import android.view.LayoutInflater;
 import android.view.Menu;
@@ -21,11 +20,12 @@ import com.apk.editor.R;
 import com.apk.editor.activities.APKSignActivity;
 import com.apk.editor.activities.ImageViewActivity;
 import com.apk.editor.activities.TextViewActivity;
-import com.apk.editor.adapters.RecycleViewAPKExplorerAdapter;
+import com.apk.editor.adapters.APKExplorerAdapter;
 import com.apk.editor.utils.APKData;
 import com.apk.editor.utils.APKEditorUtils;
 import com.apk.editor.utils.APKExplorer;
 import com.apk.editor.utils.AppData;
+import com.apk.editor.utils.AsyncTasks;
 import com.apk.editor.utils.Common;
 import com.apk.editor.utils.Projects;
 import com.google.android.material.dialog.MaterialAlertDialogBuilder;
@@ -41,7 +41,7 @@ public class APKExplorerFragment extends androidx.fragment.app.Fragment {
 
     private MaterialTextView mTitle;
     private RecyclerView mRecyclerView;
-    private RecycleViewAPKExplorerAdapter mRecycleViewAdapter;
+    private APKExplorerAdapter mRecycleViewAdapter;
 
     @SuppressLint("StringFormatInvalid")
     @Nullable
@@ -93,7 +93,7 @@ public class APKExplorerFragment extends androidx.fragment.app.Fragment {
         mRecyclerView.setLayoutManager(new GridLayoutManager(requireActivity(), APKExplorer.getSpanCount(requireActivity())));
 
         try {
-            mRecycleViewAdapter = new RecycleViewAPKExplorerAdapter(APKExplorer.getData(getFilesList(), true, requireActivity()));
+            mRecycleViewAdapter = new APKExplorerAdapter(APKExplorer.getData(getFilesList(), true, requireActivity()));
             mRecyclerView.setAdapter(mRecycleViewAdapter);
         } catch (NullPointerException ignored) {
             mRecyclerView.setVisibility(View.GONE);
@@ -207,16 +207,19 @@ public class APKExplorerFragment extends androidx.fragment.app.Fragment {
 
     @SuppressLint("StaticFieldLeak")
     private void reload(Activity activity) {
-        new AsyncTask<Void, Void, Void>() {
+        new AsyncTasks() {
+
+            @Override
+            public void onPreExecute() {
+            }
+
             @Override
-            protected Void doInBackground(Void... voids) {
-                mRecycleViewAdapter = new RecycleViewAPKExplorerAdapter(APKExplorer.getData(getFilesList(), true, activity));
-                return null;
+            public void doInBackground() {
+                mRecycleViewAdapter = new APKExplorerAdapter(APKExplorer.getData(getFilesList(), true, activity));
             }
 
             @Override
-            protected void onPostExecute(Void aVoid) {
-                super.onPostExecute(aVoid);
+            public void onPostExecute() {
                 if (Common.getAppID() != null) {
                     mTitle.setText(Common.getAppID().equals(requireActivity().getCacheDir().getPath() + "/" + (Common.getAppID() != null ?
                             Common.getAppID() : new File(Common.getPath()).getName()) + File.separator) ? AppData.getAppName(Common.getAppID(), activity)
diff --git a/app/src/main/java/com/apk/editor/fragments/APKsFragment.java b/app/src/main/java/com/apk/editor/fragments/APKsFragment.java
index 277ee42..91cc906 100644
--- a/app/src/main/java/com/apk/editor/fragments/APKsFragment.java
+++ b/app/src/main/java/com/apk/editor/fragments/APKsFragment.java
@@ -1,9 +1,7 @@
 package com.apk.editor.fragments;
 
-import android.annotation.SuppressLint;
 import android.app.Activity;
 import android.content.Intent;
-import android.os.AsyncTask;
 import android.os.Bundle;
 import android.os.Environment;
 import android.os.Handler;
@@ -26,17 +24,17 @@ import androidx.recyclerview.widget.RecyclerView;
 
 import com.apk.editor.R;
 import com.apk.editor.activities.InstallerFilePickerActivity;
-import com.apk.editor.adapters.RecycleViewApksAdapter;
+import com.apk.editor.adapters.APKsAdapter;
 import com.apk.editor.utils.APKData;
 import com.apk.editor.utils.APKEditorUtils;
 import com.apk.editor.utils.AppData;
+import com.apk.editor.utils.AsyncTasks;
 import com.apk.editor.utils.Common;
 import com.google.android.material.card.MaterialCardView;
 import com.google.android.material.dialog.MaterialAlertDialogBuilder;
 import com.google.android.material.tabs.TabLayout;
 import com.google.android.material.textview.MaterialTextView;
 
-import java.util.List;
 import java.util.Objects;
 
 /*
@@ -45,13 +43,12 @@ import java.util.Objects;
 public class APKsFragment extends Fragment {
 
     private AppCompatEditText mSearchWord;
-    private AsyncTask<Void, Void, List<String>> mLoader;
     private boolean mExit;
     private final Handler mHandler = new Handler();
     private LinearLayout mProgress;
     private MaterialTextView mAppTitle;
     private RecyclerView mRecyclerView;
-    private RecycleViewApksAdapter mRecycleViewAdapter;
+    private APKsAdapter mRecycleViewAdapter;
 
     @Nullable
     @Override
@@ -219,39 +216,27 @@ public class APKsFragment extends Fragment {
     }
 
     private void loadAPKs(Activity activity) {
-        if (mLoader == null) {
-            mHandler.postDelayed(new Runnable() {
-                @SuppressLint("StaticFieldLeak")
-                @Override
-                public void run() {
-                    mLoader = new AsyncTask<Void, Void, List<String>>() {
-                        @Override
-                        protected void onPreExecute() {
-                            super.onPreExecute();
-                            mRecyclerView.setVisibility(View.GONE);
-                            mProgress.setVisibility(View.VISIBLE);
-                            mRecyclerView.removeAllViews();
-                        }
+        new AsyncTasks() {
 
-                        @Override
-                        protected List<String> doInBackground(Void... voids) {
-                            mRecycleViewAdapter = new RecycleViewApksAdapter(APKData.getData(activity));
-                            return null;
-                        }
+            @Override
+            public void onPreExecute() {
+                mRecyclerView.setVisibility(View.GONE);
+                mProgress.setVisibility(View.VISIBLE);
+                mRecyclerView.removeAllViews();
+            }
 
-                        @Override
-                        protected void onPostExecute(List<String> recyclerViewItems) {
-                            super.onPostExecute(recyclerViewItems);
-                            mRecyclerView.setAdapter(mRecycleViewAdapter);
-                            mRecyclerView.setVisibility(View.VISIBLE);
-                            mProgress.setVisibility(View.GONE);
-                            mLoader = null;
-                        }
-                    };
-                    mLoader.execute();
-                }
-            }, 250);
-        }
+            @Override
+            public void doInBackground() {
+                mRecycleViewAdapter = new APKsAdapter(APKData.getData(activity));
+            }
+
+            @Override
+            public void onPostExecute() {
+                mRecyclerView.setAdapter(mRecycleViewAdapter);
+                mRecyclerView.setVisibility(View.VISIBLE);
+                mProgress.setVisibility(View.GONE);
+            }
+        }.execute();
     }
 
     @Override
diff --git a/app/src/main/java/com/apk/editor/fragments/AboutFragment.java b/app/src/main/java/com/apk/editor/fragments/AboutFragment.java
index a34f1f6..020bfc2 100644
--- a/app/src/main/java/com/apk/editor/fragments/AboutFragment.java
+++ b/app/src/main/java/com/apk/editor/fragments/AboutFragment.java
@@ -16,9 +16,9 @@ import androidx.recyclerview.widget.RecyclerView;
 
 import com.apk.editor.BuildConfig;
 import com.apk.editor.R;
-import com.apk.editor.adapters.RecycleViewAboutAdapter;
+import com.apk.editor.adapters.AboutAdapter;
 import com.apk.editor.utils.APKEditorUtils;
-import com.apk.editor.utils.RecycleViewItem;
+import com.apk.editor.utils.recyclerViewItems.AboutItems;
 
 import java.util.ArrayList;
 
@@ -29,7 +29,7 @@ public class AboutFragment extends Fragment {
 
     private boolean mExit;
     private final Handler mHandler = new Handler();
-    private final ArrayList <RecycleViewItem> mData = new ArrayList<>();
+    private final ArrayList <AboutItems> mData = new ArrayList<>();
 
     @SuppressLint("UseCompatLoadingForDrawables")
     @Nullable
@@ -37,23 +37,23 @@ public class AboutFragment extends Fragment {
     public View onCreateView(LayoutInflater inflater, @Nullable ViewGroup container, @Nullable Bundle savedInstanceState) {
         View mRootView = inflater.inflate(R.layout.fragment_about, container, false);
 
-        mData.add(new RecycleViewItem(getString(R.string.app_name), getString(R.string.version, BuildConfig.VERSION_NAME), getResources().getDrawable(R.mipmap.ic_launcher), null));
-        mData.add(new RecycleViewItem(getString(R.string.source_code), getString(R.string.source_code_summary), getResources().getDrawable(R.drawable.ic_github), "https://github.com/apk-editor/APK-Explorer-Editor"));
-        mData.add(new RecycleViewItem(getString(R.string.support_group), getString(R.string.support_group_summary), getResources().getDrawable(R.drawable.ic_support), "https://t.me/apkexplorer"));
-        mData.add(new RecycleViewItem(getString(R.string.report_issue), getString(R.string.report_issue_summary), getResources().getDrawable(R.drawable.ic_issue), "https://github.com/apk-editor/APK-Explorer-Editor/issues/new"));
-        mData.add(new RecycleViewItem(getString(R.string.invite_friends), getString(R.string.invite_friends_Summary), getResources().getDrawable(R.drawable.ic_share), null));
-        mData.add(new RecycleViewItem(getString(R.string.documentation), getString(R.string.documentation_summary), getResources().getDrawable(R.drawable.ic_book), null));
-        mData.add(new RecycleViewItem(getString(R.string.credits), getString(R.string.credits_summary), getResources().getDrawable(R.drawable.ic_credits), null));
+        mData.add(new AboutItems(getString(R.string.app_name), getString(R.string.version, BuildConfig.VERSION_NAME), getResources().getDrawable(R.mipmap.ic_launcher), null));
+        mData.add(new AboutItems(getString(R.string.source_code), getString(R.string.source_code_summary), getResources().getDrawable(R.drawable.ic_github), "https://github.com/apk-editor/APK-Explorer-Editor"));
+        mData.add(new AboutItems(getString(R.string.support_group), getString(R.string.support_group_summary), getResources().getDrawable(R.drawable.ic_support), "https://t.me/apkexplorer"));
+        mData.add(new AboutItems(getString(R.string.report_issue), getString(R.string.report_issue_summary), getResources().getDrawable(R.drawable.ic_issue), "https://github.com/apk-editor/APK-Explorer-Editor/issues/new"));
+        mData.add(new AboutItems(getString(R.string.invite_friends), getString(R.string.invite_friends_Summary), getResources().getDrawable(R.drawable.ic_share), null));
+        mData.add(new AboutItems(getString(R.string.documentation), getString(R.string.documentation_summary), getResources().getDrawable(R.drawable.ic_book), null));
+        mData.add(new AboutItems(getString(R.string.credits), getString(R.string.credits_summary), getResources().getDrawable(R.drawable.ic_credits), null));
         if (APKEditorUtils.isFullVersion(requireActivity())) {
-            mData.add(new RecycleViewItem(getString(R.string.donations), getString(R.string.donations_summary), getResources().getDrawable(R.drawable.ic_donate), "https://www.paypal.me/menacherry/"));
+            mData.add(new AboutItems(getString(R.string.donations), getString(R.string.donations_summary), getResources().getDrawable(R.drawable.ic_donate), "https://www.paypal.me/menacherry/"));
         } else {
-            mData.add(new RecycleViewItem(getString(R.string.privacy_policy), getString(R.string.privacy_policy_summary), getResources().getDrawable(R.drawable.ic_privacy), "https://github.com/apk-editor/APK-Explorer-Editor/blob/master/privacy-policy.md"));
-            mData.add(new RecycleViewItem(getString(R.string.rate_us), getString(R.string.rate_us_Summary), getResources().getDrawable(R.drawable.ic_rate), "https://play.google.com/store/apps/details?id=com.apk.explorer"));
+            mData.add(new AboutItems(getString(R.string.privacy_policy), getString(R.string.privacy_policy_summary), getResources().getDrawable(R.drawable.ic_privacy), "https://github.com/apk-editor/APK-Explorer-Editor/blob/master/privacy-policy.md"));
+            mData.add(new AboutItems(getString(R.string.rate_us), getString(R.string.rate_us_Summary), getResources().getDrawable(R.drawable.ic_rate), "https://play.google.com/store/apps/details?id=com.apk.explorer"));
         }
 
         RecyclerView mRecyclerView = mRootView.findViewById(R.id.recycler_view);
         mRecyclerView.setLayoutManager(new GridLayoutManager(requireActivity(), APKEditorUtils.getOrientation(requireActivity()) == Configuration.ORIENTATION_LANDSCAPE ? 3 : 2));
-        RecycleViewAboutAdapter mRecycleViewAdapter = new RecycleViewAboutAdapter(mData);
+        AboutAdapter mRecycleViewAdapter = new AboutAdapter(mData);
         mRecyclerView.setAdapter(mRecycleViewAdapter);
 
         requireActivity().getOnBackPressedDispatcher().addCallback(new OnBackPressedCallback(true) {
diff --git a/app/src/main/java/com/apk/editor/fragments/ApplicationsFragment.java b/app/src/main/java/com/apk/editor/fragments/ApplicationsFragment.java
index 1eca45f..9369674 100644
--- a/app/src/main/java/com/apk/editor/fragments/ApplicationsFragment.java
+++ b/app/src/main/java/com/apk/editor/fragments/ApplicationsFragment.java
@@ -1,8 +1,7 @@
 package com.apk.editor.fragments;
 
-import android.annotation.SuppressLint;
 import android.app.Activity;
-import android.os.AsyncTask;
+import android.os.Build;
 import android.os.Bundle;
 import android.os.Handler;
 import android.text.Editable;
@@ -24,14 +23,14 @@ import androidx.recyclerview.widget.LinearLayoutManager;
 import androidx.recyclerview.widget.RecyclerView;
 
 import com.apk.editor.R;
-import com.apk.editor.adapters.RecycleViewAppsAdapter;
+import com.apk.editor.adapters.ApplicationsAdapter;
 import com.apk.editor.utils.APKEditorUtils;
 import com.apk.editor.utils.AppData;
+import com.apk.editor.utils.AsyncTasks;
 import com.apk.editor.utils.Common;
 import com.google.android.material.tabs.TabLayout;
 import com.google.android.material.textview.MaterialTextView;
 
-import java.util.List;
 import java.util.Objects;
 
 /*
@@ -41,13 +40,12 @@ public class ApplicationsFragment extends Fragment {
 
     private AppCompatEditText mSearchWord;
     private AppCompatImageButton mSortButton;
-    private AsyncTask<Void, Void, List<String>> mLoader;
     private boolean mExit;
     private final Handler mHandler = new Handler();
     private LinearLayout mProgress;
     private MaterialTextView mAppTitle;
     private RecyclerView mRecyclerView;
-    private RecycleViewAppsAdapter mRecycleViewAdapter;
+    private ApplicationsAdapter mRecycleViewAdapter;
 
     @Nullable
     @Override
@@ -180,51 +178,49 @@ public class ApplicationsFragment extends Fragment {
     }
 
     private void loadApps(Activity activity) {
-        if (mLoader == null) {
-            mHandler.postDelayed(new Runnable() {
-                @SuppressLint("StaticFieldLeak")
-                @Override
-                public void run() {
-                    mLoader = new AsyncTask<Void, Void, List<String>>() {
-                        @Override
-                        protected void onPreExecute() {
-                            super.onPreExecute();
-                            mRecyclerView.setVisibility(View.GONE);
-                            mProgress.setVisibility(View.VISIBLE);
-                            mRecyclerView.removeAllViews();
-                        }
+        new AsyncTasks() {
 
-                        @Override
-                        protected List<String> doInBackground(Void... voids) {
-                            mRecycleViewAdapter = new RecycleViewAppsAdapter(AppData.getData(activity));
-                            return null;
-                        }
+            @Override
+            public void onPreExecute() {
+                mRecyclerView.setVisibility(View.GONE);
+                mProgress.setVisibility(View.VISIBLE);
+                mRecyclerView.removeAllViews();
+            }
 
-                        @Override
-                        protected void onPostExecute(List<String> recyclerViewItems) {
-                            super.onPostExecute(recyclerViewItems);
-                            mRecyclerView.setAdapter(mRecycleViewAdapter);
-                            mRecyclerView.setVisibility(View.VISIBLE);
-                            mProgress.setVisibility(View.GONE);
-                            mLoader = null;
-                        }
-                    };
-                    mLoader.execute();
-                }
-            }, 250);
-        }
+            @Override
+            public void doInBackground() {
+                mRecycleViewAdapter = new ApplicationsAdapter(AppData.getData(activity));
+            }
+
+            @Override
+            public void onPostExecute() {
+                mRecyclerView.setAdapter(mRecycleViewAdapter);
+                mRecyclerView.setVisibility(View.VISIBLE);
+                mProgress.setVisibility(View.GONE);
+            }
+        }.execute();
     }
 
     private void sortMenu(Activity activity) {
         PopupMenu popupMenu = new PopupMenu(activity, mSortButton);
         Menu menu = popupMenu.getMenu();
         SubMenu sort = menu.addSubMenu(Menu.NONE, 0, Menu.NONE, getString(R.string.sort_by));
-        sort.add(Menu.NONE, 1, Menu.NONE, getString(R.string.sort_by_name)).setCheckable(true)
+
+        sort.add(0, 1, Menu.NONE, getString(R.string.sort_by_name)).setCheckable(true)
                 .setChecked(APKEditorUtils.getBoolean("sort_name", false, activity));
-        sort.add(Menu.NONE, 2, Menu.NONE, getString(R.string.sort_by_id)).setCheckable(true)
+        sort.add(0, 2, Menu.NONE, getString(R.string.sort_by_id)).setCheckable(true)
                 .setChecked(APKEditorUtils.getBoolean("sort_id", true, activity));
-        menu.add(Menu.NONE, 3, Menu.NONE, getString(R.string.sort_order)).setCheckable(true)
+        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.N) {
+            sort.add(0, 3, Menu.NONE, getString(R.string.sort_by_installed)).setCheckable(true)
+                    .setChecked(APKEditorUtils.getBoolean("sort_installed", false, activity));
+            sort.add(0, 4, Menu.NONE, getString(R.string.sort_by_updated)).setCheckable(true)
+                    .setChecked(APKEditorUtils.getBoolean("sort_updated", false, activity));
+            sort.add(0, 5, Menu.NONE, getString(R.string.sort_by_size)).setCheckable(true)
+                    .setChecked(APKEditorUtils.getBoolean("sort_size", false, activity));
+        }
+        menu.add(Menu.NONE, 6, Menu.NONE, getString(R.string.sort_order)).setCheckable(true)
                 .setChecked(APKEditorUtils.getBoolean("az_order", true, activity));
+        sort.setGroupCheckable(0, true, true);
         popupMenu.setOnMenuItemClickListener(item -> {
             switch (item.getItemId()) {
                 case 0:
@@ -233,17 +229,53 @@ public class ApplicationsFragment extends Fragment {
                     if (!APKEditorUtils.getBoolean("sort_name", false, activity)) {
                         APKEditorUtils.saveBoolean("sort_name", true, activity);
                         APKEditorUtils.saveBoolean("sort_id", false, activity);
+                        APKEditorUtils.saveBoolean("sort_installed", false, activity);
+                        APKEditorUtils.saveBoolean("sort_updated", false, activity);
+                        APKEditorUtils.saveBoolean("sort_size", false, activity);
                         loadApps(activity);
                     }
                     break;
                 case 2:
                     if (!APKEditorUtils.getBoolean("sort_id", true, activity)) {
-                        APKEditorUtils.saveBoolean("sort_id", true, activity);
                         APKEditorUtils.saveBoolean("sort_name", false, activity);
+                        APKEditorUtils.saveBoolean("sort_id", true, activity);
+                        APKEditorUtils.saveBoolean("sort_installed", false, activity);
+                        APKEditorUtils.saveBoolean("sort_updated", false, activity);
+                        APKEditorUtils.saveBoolean("sort_size", false, activity);
                         loadApps(activity);
                     }
                     break;
                 case 3:
+                    if (!APKEditorUtils.getBoolean("sort_installed", false, activity)) {
+                        APKEditorUtils.saveBoolean("sort_name", false, activity);
+                        APKEditorUtils.saveBoolean("sort_id", false, activity);
+                        APKEditorUtils.saveBoolean("sort_installed", true, activity);
+                        APKEditorUtils.saveBoolean("sort_updated", false, activity);
+                        APKEditorUtils.saveBoolean("sort_size", false, activity);
+                        loadApps(activity);
+                    }
+                    break;
+                case 4:
+                    if (!APKEditorUtils.getBoolean("sort_updated", false, activity)) {
+                        APKEditorUtils.saveBoolean("sort_name", false, activity);
+                        APKEditorUtils.saveBoolean("sort_id", false, activity);
+                        APKEditorUtils.saveBoolean("sort_installed", false, activity);
+                        APKEditorUtils.saveBoolean("sort_updated", true, activity);
+                        APKEditorUtils.saveBoolean("sort_size", false, activity);
+                        loadApps(activity);
+                    }
+                    break;
+                case 5:
+                    if (!APKEditorUtils.getBoolean("sort_size", false, activity)) {
+                        APKEditorUtils.saveBoolean("sort_name", false, activity);
+                        APKEditorUtils.saveBoolean("sort_id", false, activity);
+                        APKEditorUtils.saveBoolean("sort_installed", false, activity);
+                        APKEditorUtils.saveBoolean("sort_updated", false, activity);
+                        APKEditorUtils.saveBoolean("sort_size", true, activity);
+                        loadApps(activity);
+                    }
+                    break;
+                case 6:
                     APKEditorUtils.saveBoolean("az_order", !APKEditorUtils.getBoolean("az_order", true, activity), activity);
                     loadApps(activity);
                     break;
diff --git a/app/src/main/java/com/apk/editor/fragments/ProjectsFragment.java b/app/src/main/java/com/apk/editor/fragments/ProjectsFragment.java
index 7022f27..eb6a684 100644
--- a/app/src/main/java/com/apk/editor/fragments/ProjectsFragment.java
+++ b/app/src/main/java/com/apk/editor/fragments/ProjectsFragment.java
@@ -1,8 +1,6 @@
 package com.apk.editor.fragments;
 
-import android.annotation.SuppressLint;
 import android.app.Activity;
-import android.os.AsyncTask;
 import android.os.Bundle;
 import android.os.Handler;
 import android.text.Editable;
@@ -23,28 +21,26 @@ import androidx.recyclerview.widget.LinearLayoutManager;
 import androidx.recyclerview.widget.RecyclerView;
 
 import com.apk.editor.R;
-import com.apk.editor.adapters.RecycleViewProjectsAdapter;
+import com.apk.editor.adapters.ProjectsAdapter;
 import com.apk.editor.utils.APKEditorUtils;
 import com.apk.editor.utils.AppData;
+import com.apk.editor.utils.AsyncTasks;
 import com.apk.editor.utils.Common;
 import com.apk.editor.utils.Projects;
 import com.google.android.material.textview.MaterialTextView;
 
-import java.util.List;
-
 /*
  * Created by APK Explorer & Editor <apkeditor@protonmail.com> on March 06, 2021
  */
 public class ProjectsFragment extends Fragment {
 
     private AppCompatEditText mSearchWord;
-    private AsyncTask<Void, Void, List<String>> mLoader;
     private boolean mExit;
     private final Handler mHandler = new Handler();
     private LinearLayout mProgress;
     private MaterialTextView mAppTitle;
     private RecyclerView mRecyclerView;
-    private RecycleViewProjectsAdapter mRecycleViewAdapter;
+    private ProjectsAdapter mRecycleViewAdapter;
 
     @Nullable
     @Override
@@ -135,39 +131,27 @@ public class ProjectsFragment extends Fragment {
     }
 
     private void loadProjects(Activity activity) {
-        if (mLoader == null) {
-            mHandler.postDelayed(new Runnable() {
-                @SuppressLint("StaticFieldLeak")
-                @Override
-                public void run() {
-                    mLoader = new AsyncTask<Void, Void, List<String>>() {
-                        @Override
-                        protected void onPreExecute() {
-                            super.onPreExecute();
-                            mRecyclerView.setVisibility(View.GONE);
-                            mProgress.setVisibility(View.VISIBLE);
-                            mRecyclerView.removeAllViews();
-                        }
-
-                        @Override
-                        protected List<String> doInBackground(Void... voids) {
-                            mRecycleViewAdapter = new RecycleViewProjectsAdapter(Projects.getData(activity));
-                            return null;
-                        }
-
-                        @Override
-                        protected void onPostExecute(List<String> recyclerViewItems) {
-                            super.onPostExecute(recyclerViewItems);
-                            mRecyclerView.setAdapter(mRecycleViewAdapter);
-                            mRecyclerView.setVisibility(View.VISIBLE);
-                            mProgress.setVisibility(View.GONE);
-                            mLoader = null;
-                        }
-                    };
-                    mLoader.execute();
-                }
-            }, 250);
-        }
+        new AsyncTasks() {
+
+            @Override
+            public void onPreExecute() {
+                mRecyclerView.setVisibility(View.GONE);
+                mProgress.setVisibility(View.VISIBLE);
+                mRecyclerView.removeAllViews();
+            }
+
+            @Override
+            public void doInBackground() {
+                mRecycleViewAdapter = new ProjectsAdapter(Projects.getData(activity));
+            }
+
+            @Override
+            public void onPostExecute() {
+                mRecyclerView.setAdapter(mRecycleViewAdapter);
+                mRecyclerView.setVisibility(View.VISIBLE);
+                mProgress.setVisibility(View.GONE);
+            }
+        }.execute();
     }
 
     @Override
diff --git a/app/src/main/java/com/apk/editor/utils/APKData.java b/app/src/main/java/com/apk/editor/utils/APKData.java
index 149bb6f..17d3ba4 100644
--- a/app/src/main/java/com/apk/editor/utils/APKData.java
+++ b/app/src/main/java/com/apk/editor/utils/APKData.java
@@ -7,7 +7,6 @@ import android.content.Intent;
 import android.content.pm.PackageInfo;
 import android.graphics.drawable.Drawable;
 import android.net.Uri;
-import android.os.AsyncTask;
 import android.os.Environment;
 import android.view.WindowManager;
 
@@ -16,7 +15,7 @@ import androidx.core.content.FileProvider;
 import com.apk.editor.BuildConfig;
 import com.apk.editor.R;
 import com.apk.editor.activities.APKTasksActivity;
-import com.apk.editor.apksigner.ApkSigner;
+import com.apk.editor.utils.apkSigner.ApkSigner;
 import com.google.android.material.dialog.MaterialAlertDialogBuilder;
 
 import java.io.File;
@@ -207,12 +206,12 @@ public class APKData {
     }
 
     public static void prepareSignedAPK(Activity activity) {
-        new AsyncTask<Void, Void, Void>() {
+        new AsyncTasks() {
             private final File mTMPZip = new File(activity.getCacheDir(), "tmp.apk");
-            private File mBuilDir;
+            private File mBuildDir;
+
             @Override
-            protected void onPreExecute() {
-                super.onPreExecute();
+            public void onPreExecute() {
                 Common.setFinishStatus(false);
                 Common.isBuilding(true);
                 Common.setStatus(null);
@@ -226,18 +225,18 @@ public class APKData {
             }
 
             @Override
-            protected Void doInBackground(Void... voids) {
+            public void doInBackground() {
                 Common.setStatus(activity.getString(R.string.preparing_source));
                 if (Common.getAppID() != null) {
                     File mExportPath = new File(activity.getCacheDir().getPath(), Common.getAppID());
                     File mBackUpPath = new File(mExportPath, ".aeeBackup");
-                    mBuilDir = new File(mExportPath, ".aeeBuild");
-                    mBuilDir.mkdirs();
-                    prepareSource(mBuilDir, mExportPath, mBackUpPath, activity);
+                    mBuildDir = new File(mExportPath, ".aeeBuild");
+                    mBuildDir.mkdirs();
+                    prepareSource(mBuildDir, mExportPath, mBackUpPath, activity);
                     if (Common.getError() > 0) {
-                        return null;
+                        return;
                     }
-                    APKEditorUtils.zip(mBuilDir, mTMPZip);
+                    APKEditorUtils.zip(mBuildDir, mTMPZip);
                     if (APKData.isAppBundle(AppData.getSourceDir(Common.getAppID(), activity))) {
                         File mParent = new File(getExportAPKsPath(activity), Common.getAppID() + "_aee-signed");
                         mParent.mkdirs();
@@ -262,24 +261,22 @@ public class APKData {
                     }
                     File mExportPath = new File(activity.getCacheDir().getPath() + "/" + new File(Common.getPath()).getName());
                     File mBackUpPath = new File(mExportPath, ".aeeBackup");
-                    mBuilDir = new File(mExportPath, ".aeeBuild");
-                    mBuilDir.mkdirs();
-                    prepareSource(mBuilDir, mExportPath, mBackUpPath, activity);
+                    mBuildDir = new File(mExportPath, ".aeeBuild");
+                    mBuildDir.mkdirs();
+                    prepareSource(mBuildDir, mExportPath, mBackUpPath, activity);
                     if (Common.getError() > 0) {
-                        return null;
+                        return;
                     }
-                    APKEditorUtils.zip(mBuilDir, mTMPZip);
+                    APKEditorUtils.zip(mBuildDir, mTMPZip);
                     Common.setStatus(activity.getString(R.string.signing, new File(getExportAPKsPath(activity), new File(Common.getPath()).getName() + "_aee-signed.apk").getName()));
                     signApks(mTMPZip, new File(getExportAPKsPath(activity), new File(Common.getPath()).getName() + "_aee-signed.apk"), activity);
                 }
-                return null;
             }
 
             @Override
-            protected void onPostExecute(Void aVoid) {
-                super.onPostExecute(aVoid);
+            public void onPostExecute() {
                 APKEditorUtils.delete(mTMPZip.getAbsolutePath());
-                APKEditorUtils.delete(mBuilDir.getAbsolutePath());
+                APKEditorUtils.delete(mBuildDir.getAbsolutePath());
                 if (!Common.isFinished()) {
                     Common.setFinishStatus(true);
                 }
@@ -289,11 +286,11 @@ public class APKData {
     }
 
     public static void signAPK(String packageName, Context context) {
-        new AsyncTask<Void, Void, Void>() {
+        new AsyncTasks() {
             private ProgressDialog mProgressDialog;
+
             @Override
-            protected void onPreExecute() {
-                super.onPreExecute();
+            public void onPreExecute() {
                 mProgressDialog = new ProgressDialog(context);
                 mProgressDialog.setMessage(context.getString(R.string.signing, AppData.getAppName(packageName, context)));
                 mProgressDialog.setCancelable(false);
@@ -301,7 +298,7 @@ public class APKData {
             }
 
             @Override
-            protected Void doInBackground(Void... voids) {
+            public void doInBackground() {
                 if (APKData.isAppBundle(AppData.getSourceDir(packageName, context))) {
                     File mParent = new File(getExportAPKsPath(context),packageName + "_aee-signed");
                     mParent.mkdirs();
@@ -314,12 +311,10 @@ public class APKData {
                     }
                     signApks(new File(AppData.getSourceDir(packageName, context)), new File(getExportAPKsPath(context), packageName + "_aee-signed.apk"), context);
                 }
-                return null;
             }
 
             @Override
-            protected void onPostExecute(Void aVoid) {
-                super.onPostExecute(aVoid);
+            public void onPostExecute() {
                 try {
                     mProgressDialog.dismiss();
                 } catch (IllegalArgumentException ignored) {
@@ -329,12 +324,12 @@ public class APKData {
     }
 
     public static void reSignAPKs(Activity activity) {
-        new AsyncTask<Void, Void, Void>() {
+        new AsyncTasks() {
             private ProgressDialog mProgressDialog;
             private String mPackageName = null, mSignedAPKPath = null;
+
             @Override
-            protected void onPreExecute() {
-                super.onPreExecute();
+            public void onPreExecute() {
                 mProgressDialog = new ProgressDialog(activity);
                 mProgressDialog.setMessage(activity.getString(R.string.resigning_apks));
                 mProgressDialog.setCancelable(false);
@@ -347,7 +342,7 @@ public class APKData {
             }
 
             @Override
-            protected Void doInBackground(Void... voids) {
+            public void doInBackground() {
                 if (mPackageName != null) {
                     if (Common.getAPKList().size() > 1) {
                         File mParent = new File(Projects.getExportPath(activity) + "/" + mPackageName + "_aee-signed");
@@ -362,12 +357,10 @@ public class APKData {
                         signApks(new File(Common.getAPKList().get(0)), new File(Projects.getExportPath(activity) + "/" + mPackageName + "_aee-signed.apk"), activity);
                     }
                 }
-                return null;
             }
 
             @Override
-            protected void onPostExecute(Void aVoid) {
-                super.onPostExecute(aVoid);
+            public void onPostExecute() {
                 try {
                     mProgressDialog.dismiss();
                 } catch (IllegalArgumentException ignored) {
@@ -389,13 +382,13 @@ public class APKData {
     }
 
     public static void reSignAndInstall(Activity activity) {
-        new AsyncTask<Void, Void, Void>() {
+        new AsyncTasks() {
             private File mParent = new File(activity.getCacheDir(), "aee-signed");
             private ProgressDialog mProgressDialog;
             private String mPackageName = null, mSignedAPKPath = null;
+
             @Override
-            protected void onPreExecute() {
-                super.onPreExecute();
+            public void onPreExecute() {
                 mProgressDialog = new ProgressDialog(activity);
                 mProgressDialog.setMessage(activity.getString(R.string.resigning_apks));
                 mProgressDialog.setCancelable(false);
@@ -411,7 +404,7 @@ public class APKData {
             }
 
             @Override
-            protected Void doInBackground(Void... voids) {
+            public void doInBackground() {
                 if (mPackageName != null) {
                     mParent = new File(activity.getCacheDir(), "aee-signed");
                     mParent.mkdirs();
@@ -425,12 +418,10 @@ public class APKData {
                         signApks(new File(Common.getAPKList().get(0)), new File(mParent, "aee-signed.apk"), activity);
                     }
                 }
-                return null;
             }
 
             @Override
-            protected void onPostExecute(Void aVoid) {
-                super.onPostExecute(aVoid);
+            public void onPostExecute() {
                 try {
                     mProgressDialog.dismiss();
                 } catch (IllegalArgumentException ignored) {
@@ -455,11 +446,11 @@ public class APKData {
     }
 
     public static void exportApp(String packageName, Context context) {
-        new AsyncTask<Void, Void, Void>() {
+        new AsyncTasks() {
             private ProgressDialog mProgressDialog;
+
             @Override
-            protected void onPreExecute() {
-                super.onPreExecute();
+            public void onPreExecute() {
                 mProgressDialog = new ProgressDialog(context);
                 mProgressDialog.setMessage(context.getString(R.string.exporting, AppData.getAppName(packageName, context)));
                 mProgressDialog.setCancelable(false);
@@ -467,7 +458,7 @@ public class APKData {
             }
 
             @Override
-            protected Void doInBackground(Void... voids) {
+            public void doInBackground() {
                 if (APKData.isAppBundle(AppData.getSourceDir(packageName, context))) {
                     File mParent = new File(getExportAPKsPath(context) , packageName);
                     mParent.mkdirs();
@@ -482,12 +473,10 @@ public class APKData {
                     }
                     APKEditorUtils.copy(AppData.getSourceDir(packageName, context), getExportAPKsPath(context) + "/" + packageName + ".apk");
                 }
-                return null;
             }
 
             @Override
-            protected void onPostExecute(Void aVoid) {
-                super.onPostExecute(aVoid);
+            public void onPostExecute() {
                 try {
                     mProgressDialog.dismiss();
                 } catch (IllegalArgumentException ignored) {
@@ -497,11 +486,11 @@ public class APKData {
     }
 
     public static void shareAppBundle(String name, String path, Context context) {
-        new AsyncTask<Void, Void, Void>() {
+        new AsyncTasks() {
             private ProgressDialog mProgressDialog;
+
             @Override
-            protected void onPreExecute() {
-                super.onPreExecute();
+            public void onPreExecute() {
                 mProgressDialog = new ProgressDialog(context);
                 mProgressDialog.setMessage(context.getString(R.string.preparing_bundle));
                 mProgressDialog.setCancelable(false);
@@ -513,14 +502,12 @@ public class APKData {
             }
 
             @Override
-            protected Void doInBackground(Void... voids) {
+            public void doInBackground() {
                 APKEditorUtils.zip(new File(path), new File(Projects.getExportPath(context), name + ".xapk"));
-                return null;
             }
 
             @Override
-            protected void onPostExecute(Void aVoid) {
-                super.onPostExecute(aVoid);
+            public void onPostExecute() {
                 try {
                     mProgressDialog.dismiss();
                 } catch (IllegalArgumentException ignored) {
diff --git a/app/src/main/java/com/apk/editor/utils/APKExplorer.java b/app/src/main/java/com/apk/editor/utils/APKExplorer.java
index d4dd6c6..349b10c 100644
--- a/app/src/main/java/com/apk/editor/utils/APKExplorer.java
+++ b/app/src/main/java/com/apk/editor/utils/APKExplorer.java
@@ -11,7 +11,6 @@ import android.graphics.Canvas;
 import android.graphics.drawable.BitmapDrawable;
 import android.graphics.drawable.Drawable;
 import android.net.Uri;
-import android.os.AsyncTask;
 import android.os.Build;
 import android.os.Environment;
 import android.provider.Settings;
@@ -126,7 +125,7 @@ public class APKExplorer {
                     .setTitle(activity.getString(R.string.important))
                     .setMessage(activity.getString(R.string.file_permission_request_message, activity.getString(R.string.app_name)))
                     .setCancelable(false)
-                    .setNegativeButton(activity.getString(R.string.cancel), (dialogInterfacei, ii) -> {
+                    .setNegativeButton(activity.getString(R.string.cancel), (dialog1, id1) -> {
                     })
                     .setPositiveButton(activity.getString(R.string.grant), (dialog1, id1) -> APKExplorer.requestPermission(activity)).show();
         } else {
@@ -287,12 +286,11 @@ public class APKExplorer {
     }
 
     public static void exploreAPK(String packageName, Context context) {
-        new AsyncTask<Void, Void, Void>() {
-            private File mExplorePath;
-            private File mBackUpPath;
+        new AsyncTasks() {
+            private File mBackUpPath, mExplorePath;
+
             @Override
-            protected void onPreExecute() {
-                super.onPreExecute();
+            public void onPreExecute() {
                 Common.setAppID(packageName);
                 mExplorePath = new File(context.getCacheDir().getPath(), packageName);
                 mBackUpPath = new File(mExplorePath, ".aeeBackup");
@@ -305,8 +303,9 @@ public class APKExplorer {
                     Common.setStatus(context.getString(R.string.exploring, AppData.getAppName(packageName, context)));
                 }
             }
+
             @Override
-            protected Void doInBackground(Void... voids) {
+            public void doInBackground() {
                 if (!mExplorePath.exists()) {
                     mExplorePath.mkdirs();
                     APKEditorUtils.unzip(AppData.getSourceDir(packageName, context), mExplorePath.getAbsolutePath());
@@ -323,11 +322,10 @@ public class APKExplorer {
                         }
                     }
                 }
-                return null;
             }
+
             @Override
-            protected void onPostExecute(Void aVoid) {
-                super.onPostExecute(aVoid);
+            public void onPostExecute() {
                 if (!Common.isFinished()) {
                     Common.setFinishStatus(true);
                 }
diff --git a/app/src/main/java/com/apk/editor/utils/AppData.java b/app/src/main/java/com/apk/editor/utils/AppData.java
index 33574d1..48be1db 100644
--- a/app/src/main/java/com/apk/editor/utils/AppData.java
+++ b/app/src/main/java/com/apk/editor/utils/AppData.java
@@ -2,15 +2,20 @@ package com.apk.editor.utils;
 
 import android.content.Context;
 import android.content.pm.ApplicationInfo;
+import android.content.pm.PackageInfo;
 import android.content.pm.PackageManager;
 import android.graphics.drawable.Drawable;
+import android.os.Build;
 import android.view.inputmethod.InputMethodManager;
 
 import androidx.appcompat.widget.AppCompatEditText;
 
+import com.apk.editor.utils.recyclerViewItems.PackageItems;
+
 import java.io.File;
 import java.util.ArrayList;
 import java.util.Collections;
+import java.util.Comparator;
 import java.util.List;
 import java.util.Objects;
 
@@ -19,40 +24,70 @@ import java.util.Objects;
  */
 public class AppData {
 
-    private static final List<String> mData = new ArrayList<>();
-
-    public static List<String> getData(Context context) {
-        boolean mAppType;
-        mData.clear();
+    public static List<PackageItems> getRawData(Context context) {
+        List<PackageItems> mData = new ArrayList<>();
         List<ApplicationInfo> packages = getPackageManager(context).getInstalledApplications(PackageManager.GET_META_DATA);
-        if (APKEditorUtils.getBoolean("sort_name", true, context)) {
-            Collections.sort(packages, new ApplicationInfo.DisplayNameComparator(getPackageManager(context)));
-        } else {
-            Collections.sort(packages, (lhs, rhs) -> String.CASE_INSENSITIVE_ORDER.compare(lhs.packageName, rhs.packageName));
-        }
         for (ApplicationInfo packageInfo: packages) {
-            if (APKEditorUtils.getString("appTypes", "all", context).equals("system")) {
-                mAppType = (packageInfo.flags & ApplicationInfo.FLAG_SYSTEM) != 0;
-            } else if (APKEditorUtils.getString("appTypes", "all", context).equals("user")) {
-                mAppType = (packageInfo.flags & ApplicationInfo.FLAG_SYSTEM) == 0;
+            mData.add(new PackageItems(
+                    getAppName(packageInfo.packageName, context).toString(),
+                    packageInfo.packageName,
+                    getVersionName(getSourceDir(packageInfo.packageName, context), context),
+                    new File(getSourceDir(packageInfo.packageName, context)).length(),
+                    Objects.requireNonNull(getPackageInfo(packageInfo.packageName, context)).firstInstallTime,
+                    Objects.requireNonNull(getPackageInfo(packageInfo.packageName, context)).lastUpdateTime,
+                    getAppIcon(packageInfo.packageName, context)
+            ));
+        }
+        return mData;
+    }
+
+    public static List<PackageItems> getData(Context context) {
+        List<PackageItems> mData = new ArrayList<>();
+        try {
+            boolean mAppType;
+            for (PackageItems packageItem : Common.getPackageData()) {
+                if (APKEditorUtils.getString("appTypes", "all", context).equals("system")) {
+                    mAppType = isSystemApp(packageItem.getPackageName(), context);
+                } else if (APKEditorUtils.getString("appTypes", "all", context).equals("user")) {
+                    mAppType = !isSystemApp(packageItem.getPackageName(), context);
+                } else {
+                    mAppType = true;
+                }
+                if (mAppType) {
+                    if (Common.getSearchWord() == null) {
+                        mData.add(packageItem);
+                    } else if (Common.isTextMatched(packageItem.getAppName(), Common.getSearchWord())
+                            || Common.isTextMatched(packageItem.getPackageName(), Common.getSearchWord())) {
+                        mData.add(packageItem);
+                    }
+                }
+            }
+            if (APKEditorUtils.getBoolean("sort_name", false, context)) {
+                Collections.sort(mData, (lhs, rhs) -> String.CASE_INSENSITIVE_ORDER.compare(lhs.getAppName(), rhs.getAppName()));
+            } else if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.N && APKEditorUtils.getBoolean("sort_size", false, context)) {
+                Collections.sort(mData, Comparator.comparingLong(PackageItems::getAPKSize));
+            } else if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.N && APKEditorUtils.getBoolean("sort_installed", false, context)) {
+                Collections.sort(mData, Comparator.comparingLong(PackageItems::getInstalledTime));
+            } else if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.N && APKEditorUtils.getBoolean("sort_updated", false, context)) {
+                Collections.sort(mData, Comparator.comparingLong(PackageItems::getUpdatedTime));
             } else {
-                mAppType = true;
+                Collections.sort(mData, (lhs, rhs) -> String.CASE_INSENSITIVE_ORDER.compare(lhs.getPackageName(), rhs.getPackageName()));
             }
-            if (mAppType) {
-                if (Common.getSearchWord() == null) {
-                    mData.add(packageInfo.packageName);
-                } else if (Common.isTextMatched(getPackageManager(context).getApplicationLabel(packageInfo).toString(), Common.getSearchWord())
-                        || Common.isTextMatched(packageInfo.packageName, Common.getSearchWord())) {
-                    mData.add(packageInfo.packageName);
-                }
+            if (!APKEditorUtils.getBoolean("az_order", true, context)) {
+                Collections.reverse(mData);
             }
-        }
-        if (!APKEditorUtils.getBoolean("az_order", true, context)) {
-            Collections.reverse(mData);
-        }
+        } catch (NullPointerException ignored) {}
         return mData;
     }
 
+    public static PackageInfo getPackageInfo(String packageName, Context context) {
+        try {
+            return getPackageManager(context).getPackageInfo(packageName, PackageManager.GET_PERMISSIONS);
+        } catch (Exception ignored) {
+        }
+        return null;
+    }
+
     /*
      * Based on the work of https://github.com/ZenerDeveloper
      * Ref: https://github.com/SmartPack/PackageManager/commit/1ac499d0ed8922c02875df029ead80a17f1c40e1
@@ -102,8 +137,15 @@ public class AppData {
         }
     }
 
-    public static String getAPKSize(String path) {
-        long size = new File(path).length() / 1024;
+    public static boolean isSystemApp(String packageName, Context context) {
+        try {
+            return (Objects.requireNonNull(getAppInfo(packageName, context)).flags & ApplicationInfo.FLAG_SYSTEM) != 0;
+        } catch (NullPointerException ignored) {}
+        return false;
+    }
+
+    public static String getAPKSize(long apkSize) {
+        long size = apkSize / 1024;
         long decimal = (size - 1024) / 1024;
         if (size > 1024) {
             return size / 1024 + "." + decimal + " MB";
@@ -113,7 +155,7 @@ public class AppData {
     }
 
     public static String getVersionName(String path, Context context) {
-        return Objects.requireNonNull(getPackageManager(context).getPackageArchiveInfo(path, 0)).versionName;
+        return getPackageManager(context).getPackageArchiveInfo(path, 0).versionName;
     }
 
 }
\ No newline at end of file
diff --git a/app/src/main/java/com/apk/editor/utils/AppSettings.java b/app/src/main/java/com/apk/editor/utils/AppSettings.java
index ee7a675..52a53c2 100644
--- a/app/src/main/java/com/apk/editor/utils/AppSettings.java
+++ b/app/src/main/java/com/apk/editor/utils/AppSettings.java
@@ -5,7 +5,6 @@ import android.app.Activity;
 import android.app.ProgressDialog;
 import android.content.Context;
 import android.content.Intent;
-import android.os.AsyncTask;
 import android.os.Environment;
 
 import androidx.appcompat.app.AppCompatDelegate;
@@ -13,7 +12,8 @@ import androidx.appcompat.app.AppCompatDelegate;
 import com.apk.editor.MainActivity;
 import com.apk.editor.R;
 import com.apk.editor.activities.APKSignActivity;
-import com.apk.editor.adapters.RecycleViewSettingsAdapter;
+import com.apk.editor.adapters.SettingsAdapter;
+import com.apk.editor.utils.recyclerViewItems.SettingsItems;
 import com.google.android.material.dialog.MaterialAlertDialogBuilder;
 
 import java.io.File;
@@ -24,27 +24,27 @@ import java.util.ArrayList;
  */
 public class AppSettings {
 
-    private static final ArrayList <RecycleViewSettingsItem> mData = new ArrayList<>();
+    private static final ArrayList <SettingsItems> mData = new ArrayList<>();
 
     @SuppressLint("UseCompatLoadingForDrawables")
-    public static ArrayList<RecycleViewSettingsItem> getData(Context context) {
+    public static ArrayList<SettingsItems> getData(Context context) {
         mData.clear();
-        mData.add(new RecycleViewSettingsItem(context.getString(R.string.user_interface), null, null));
-        mData.add(new RecycleViewSettingsItem(context.getString(R.string.app_theme), getAppTheme(context), context.getResources().getDrawable(R.drawable.ic_theme)));
-        mData.add(new RecycleViewSettingsItem(context.getString(R.string.language), getLanguage(context), context.getResources().getDrawable(R.drawable.ic_translate)));
-        mData.add(new RecycleViewSettingsItem(context.getString(R.string.settings_general), null, null));
-        mData.add(new RecycleViewSettingsItem(context.getString(R.string.project_exist_action), getProjectExistAction(context), context.getResources().getDrawable(R.drawable.ic_projects)));
-        mData.add(new RecycleViewSettingsItem(context.getString(R.string.export_path_apks), getExportAPKsPath(context), context.getResources().getDrawable(R.drawable.ic_export)));
-        mData.add(new RecycleViewSettingsItem(context.getString(R.string.export_path_resources), getExportPath(context), context.getResources().getDrawable(R.drawable.ic_export)));
+        mData.add(new SettingsItems(context.getString(R.string.user_interface), null, null));
+        mData.add(new SettingsItems(context.getString(R.string.app_theme), getAppTheme(context), context.getResources().getDrawable(R.drawable.ic_theme)));
+        mData.add(new SettingsItems(context.getString(R.string.language), getLanguage(context), context.getResources().getDrawable(R.drawable.ic_translate)));
+        mData.add(new SettingsItems(context.getString(R.string.settings_general), null, null));
+        mData.add(new SettingsItems(context.getString(R.string.project_exist_action), getProjectExistAction(context), context.getResources().getDrawable(R.drawable.ic_projects)));
+        mData.add(new SettingsItems(context.getString(R.string.export_path_apks), getExportAPKsPath(context), context.getResources().getDrawable(R.drawable.ic_export)));
+        mData.add(new SettingsItems(context.getString(R.string.export_path_resources), getExportPath(context), context.getResources().getDrawable(R.drawable.ic_export)));
         if (APKEditorUtils.isFullVersion(context)) {
-            mData.add(new RecycleViewSettingsItem(context.getString(R.string.text_editing), getEditingOptions(context), context.getResources().getDrawable(R.drawable.ic_edit)));
-            mData.add(new RecycleViewSettingsItem(context.getString(R.string.signing_title), null, null));
-            mData.add(new RecycleViewSettingsItem(context.getString(R.string.export_options), getAPKs(context), context.getResources().getDrawable(R.drawable.ic_android)));
-            mData.add(new RecycleViewSettingsItem(context.getString(R.string.installer_action), getInstallerAction(context), context.getResources().getDrawable(R.drawable.ic_installer)));
-            mData.add(new RecycleViewSettingsItem(context.getString(R.string.sign_apk_with), getAPKSign(context), context.getResources().getDrawable(R.drawable.ic_key)));
+            mData.add(new SettingsItems(context.getString(R.string.text_editing), getEditingOptions(context), context.getResources().getDrawable(R.drawable.ic_edit)));
+            mData.add(new SettingsItems(context.getString(R.string.signing_title), null, null));
+            mData.add(new SettingsItems(context.getString(R.string.export_options), getAPKs(context), context.getResources().getDrawable(R.drawable.ic_android)));
+            mData.add(new SettingsItems(context.getString(R.string.installer_action), getInstallerAction(context), context.getResources().getDrawable(R.drawable.ic_installer)));
+            mData.add(new SettingsItems(context.getString(R.string.sign_apk_with), getAPKSign(context), context.getResources().getDrawable(R.drawable.ic_key)));
         }
-        mData.add(new RecycleViewSettingsItem(context.getString(R.string.settings_misc), null, null));
-        mData.add(new RecycleViewSettingsItem(context.getString(R.string.clear_cache), context.getString(R.string.clear_cache_summary), context.getResources().getDrawable(R.drawable.ic_delete)));
+        mData.add(new SettingsItems(context.getString(R.string.settings_misc), null, null));
+        mData.add(new SettingsItems(context.getString(R.string.clear_cache), context.getString(R.string.clear_cache_summary), context.getResources().getDrawable(R.drawable.ic_delete)));
         return mData;
     }
 
@@ -145,7 +145,7 @@ public class AppSettings {
         }
     }
 
-    public static void handleSettingsActions(RecycleViewSettingsAdapter adapter, int position, Activity activity) {
+    public static void handleSettingsActions(SettingsAdapter adapter, int position, Activity activity) {
         if (getData(activity).get(position).getDescription() != null) {
             if (position == 1) {
                 setAppTheme(activity);
@@ -276,19 +276,19 @@ public class AppSettings {
     }
 
     @SuppressLint("UseCompatLoadingForDrawables")
-    private static void setExportAPKsPath(RecycleViewSettingsAdapter adapter, int position, Activity activity) {
+    private static void setExportAPKsPath(SettingsAdapter adapter, int position, Activity activity) {
         new MaterialAlertDialogBuilder(activity).setItems(activity.getResources().getStringArray(
                 R.array.export_path_apk), (dialogInterface, i) -> {
             switch (i) {
                 case 0:
                     APKEditorUtils.saveString("exportAPKsPath", "externalFiles", activity);
-                    mData.set(position, new RecycleViewSettingsItem(activity.getString(R.string.export_path_apks), getExportAPKsPath(activity), activity.getResources().getDrawable(R.drawable.ic_export)));
+                    mData.set(position, new SettingsItems(activity.getString(R.string.export_path_apks), getExportAPKsPath(activity), activity.getResources().getDrawable(R.drawable.ic_export)));
                     adapter.notifyItemChanged(position);
                     transferExportedApps(activity);
                     break;
                 case 1:
                     APKEditorUtils.saveString("exportAPKsPath", "internalStorage", activity);
-                    mData.set(position, new RecycleViewSettingsItem(activity.getString(R.string.export_path_apks), getExportAPKsPath(activity), activity.getResources().getDrawable(R.drawable.ic_export)));
+                    mData.set(position, new SettingsItems(activity.getString(R.string.export_path_apks), getExportAPKsPath(activity), activity.getResources().getDrawable(R.drawable.ic_export)));
                     adapter.notifyItemChanged(position);
                     transferExportedApps(activity);
                     break;
@@ -298,23 +298,23 @@ public class AppSettings {
     }
 
     @SuppressLint("UseCompatLoadingForDrawables")
-    private static void setExportPath(RecycleViewSettingsAdapter adapter, int position, Context context) {
+    private static void setExportPath(SettingsAdapter adapter, int position, Context context) {
         new MaterialAlertDialogBuilder(context).setItems(context.getResources().getStringArray(
                 R.array.export_path), (dialogInterface, i) -> {
             switch (i) {
                 case 0:
                     APKEditorUtils.saveString("exportPath", Environment.getExternalStorageDirectory().toString(), context);
-                    mData.set(position, new RecycleViewSettingsItem(context.getString(R.string.export_path_resources), getExportPath(context), context.getResources().getDrawable(R.drawable.ic_export)));
+                    mData.set(position, new SettingsItems(context.getString(R.string.export_path_resources), getExportPath(context), context.getResources().getDrawable(R.drawable.ic_export)));
                     adapter.notifyItemChanged(position);
                     break;
                 case 1:
                     APKEditorUtils.saveString("exportPath", null, context);
-                    mData.set(position, new RecycleViewSettingsItem(context.getString(R.string.export_path_resources), getExportPath(context), context.getResources().getDrawable(R.drawable.ic_export)));
+                    mData.set(position, new SettingsItems(context.getString(R.string.export_path_resources), getExportPath(context), context.getResources().getDrawable(R.drawable.ic_export)));
                     adapter.notifyItemChanged(position);
                     break;
                 case 2:
                     APKEditorUtils.saveString("exportPath", Environment.getExternalStoragePublicDirectory(Environment.DIRECTORY_DOWNLOADS).toString(), context);
-                    mData.set(position, new RecycleViewSettingsItem(context.getString(R.string.export_path_resources), getExportPath(context), context.getResources().getDrawable(R.drawable.ic_export)));
+                    mData.set(position, new SettingsItems(context.getString(R.string.export_path_resources), getExportPath(context), context.getResources().getDrawable(R.drawable.ic_export)));
                     adapter.notifyItemChanged(position);
                     break;
             }
@@ -323,23 +323,23 @@ public class AppSettings {
     }
 
     @SuppressLint("UseCompatLoadingForDrawables")
-    private static void setAPKs(RecycleViewSettingsAdapter adapter, int position, Context context) {
+    private static void setAPKs(SettingsAdapter adapter, int position, Context context) {
         new MaterialAlertDialogBuilder(context).setItems(context.getResources().getStringArray(
                 R.array.export_apk), (dialogInterface, i) -> {
             switch (i) {
                 case 0:
                     APKEditorUtils.saveString("exportAPKs", context.getString(R.string.export_storage), context);
-                    mData.set(position, new RecycleViewSettingsItem(context.getString(R.string.export_options), getAPKs(context), context.getResources().getDrawable(R.drawable.ic_android)));
+                    mData.set(position, new SettingsItems(context.getString(R.string.export_options), getAPKs(context), context.getResources().getDrawable(R.drawable.ic_android)));
                     adapter.notifyItemChanged(position);
                     break;
                 case 1:
                     APKEditorUtils.saveString("exportAPKs", context.getString(R.string.export_resign), context);
-                    mData.set(position, new RecycleViewSettingsItem(context.getString(R.string.export_options), getAPKs(context), context.getResources().getDrawable(R.drawable.ic_android)));
+                    mData.set(position, new SettingsItems(context.getString(R.string.export_options), getAPKs(context), context.getResources().getDrawable(R.drawable.ic_android)));
                     adapter.notifyItemChanged(position);
                     break;
                 case 2:
                     APKEditorUtils.saveString("exportAPKs", null, context);
-                    mData.set(position, new RecycleViewSettingsItem(context.getString(R.string.export_options), getAPKs(context), context.getResources().getDrawable(R.drawable.ic_android)));
+                    mData.set(position, new SettingsItems(context.getString(R.string.export_options), getAPKs(context), context.getResources().getDrawable(R.drawable.ic_android)));
                     adapter.notifyItemChanged(position);
                     break;
             }
@@ -348,23 +348,23 @@ public class AppSettings {
     }
 
     @SuppressLint("UseCompatLoadingForDrawables")
-    private static void setProjectExistAction(RecycleViewSettingsAdapter adapter, int position, Context context) {
+    private static void setProjectExistAction(SettingsAdapter adapter, int position, Context context) {
         new MaterialAlertDialogBuilder(context).setItems(context.getResources().getStringArray(
                 R.array.project_options), (dialogInterface, i) -> {
             switch (i) {
                 case 0:
                     APKEditorUtils.saveString("projectAction", context.getString(R.string.save), context);
-                    mData.set(position, new RecycleViewSettingsItem(context.getString(R.string.project_exist_action), getProjectExistAction(context), context.getResources().getDrawable(R.drawable.ic_projects)));
+                    mData.set(position, new SettingsItems(context.getString(R.string.project_exist_action), getProjectExistAction(context), context.getResources().getDrawable(R.drawable.ic_projects)));
                     adapter.notifyItemChanged(position);
                     break;
                 case 1:
                     APKEditorUtils.saveString("projectAction", context.getString(R.string.delete), context);
-                    mData.set(position, new RecycleViewSettingsItem(context.getString(R.string.project_exist_action), getProjectExistAction(context), context.getResources().getDrawable(R.drawable.ic_projects)));
+                    mData.set(position, new SettingsItems(context.getString(R.string.project_exist_action), getProjectExistAction(context), context.getResources().getDrawable(R.drawable.ic_projects)));
                     adapter.notifyItemChanged(position);
                     break;
                 case 2:
                     APKEditorUtils.saveString("projectAction", null, context);
-                    mData.set(position, new RecycleViewSettingsItem(context.getString(R.string.project_exist_action), getProjectExistAction(context), context.getResources().getDrawable(R.drawable.ic_projects)));
+                    mData.set(position, new SettingsItems(context.getString(R.string.project_exist_action), getProjectExistAction(context), context.getResources().getDrawable(R.drawable.ic_projects)));
                     adapter.notifyItemChanged(position);
                     break;
             }
@@ -373,13 +373,13 @@ public class AppSettings {
     }
 
     @SuppressLint("UseCompatLoadingForDrawables")
-    private static void setEditingOptions(RecycleViewSettingsAdapter adapter, int position, Context context) {
+    private static void setEditingOptions(SettingsAdapter adapter, int position, Context context) {
         new MaterialAlertDialogBuilder(context).setItems(context.getResources().getStringArray(
                 R.array.editing_options), (dialogInterface, i) -> {
             switch (i) {
                 case 0:
                     APKEditorUtils.saveBoolean("editText", false, context);
-                    mData.set(position, new RecycleViewSettingsItem(context.getString(R.string.text_editing), getEditingOptions(context), context.getResources().getDrawable(R.drawable.ic_edit)));
+                    mData.set(position, new SettingsItems(context.getString(R.string.text_editing), getEditingOptions(context), context.getResources().getDrawable(R.drawable.ic_edit)));
                     adapter.notifyItemChanged(position);
                     break;
                 case 1:
@@ -391,7 +391,7 @@ public class AppSettings {
                             })
                             .setPositiveButton(context.getString(R.string.enable), (dialog, id) -> {
                                 APKEditorUtils.saveBoolean("editText", true, context);
-                                mData.set(position, new RecycleViewSettingsItem(context.getString(R.string.text_editing), getEditingOptions(context), context.getResources().getDrawable(R.drawable.ic_edit)));
+                                mData.set(position, new SettingsItems(context.getString(R.string.text_editing), getEditingOptions(context), context.getResources().getDrawable(R.drawable.ic_edit)));
                                 adapter.notifyItemChanged(position);
                             }).show();
                     break;
@@ -401,23 +401,23 @@ public class AppSettings {
     }
 
     @SuppressLint("UseCompatLoadingForDrawables")
-    private static void setInstallerAction(RecycleViewSettingsAdapter adapter, int position, Context context) {
+    private static void setInstallerAction(SettingsAdapter adapter, int position, Context context) {
         new MaterialAlertDialogBuilder(context).setItems(context.getResources().getStringArray(
                 R.array.installer_options), (dialogInterface, i) -> {
             switch (i) {
                 case 0:
                     APKEditorUtils.saveString("installerAction", context.getString(R.string.install), context);
-                    mData.set(position, new RecycleViewSettingsItem(context.getString(R.string.installer_action), getInstallerAction(context), context.getResources().getDrawable(R.drawable.ic_installer)));
+                    mData.set(position, new SettingsItems(context.getString(R.string.installer_action), getInstallerAction(context), context.getResources().getDrawable(R.drawable.ic_installer)));
                     adapter.notifyItemChanged(position);
                     break;
                 case 1:
                     APKEditorUtils.saveString("installerAction", context.getString(R.string.install_resign), context);
-                    mData.set(position, new RecycleViewSettingsItem(context.getString(R.string.installer_action), getInstallerAction(context), context.getResources().getDrawable(R.drawable.ic_installer)));
+                    mData.set(position, new SettingsItems(context.getString(R.string.installer_action), getInstallerAction(context), context.getResources().getDrawable(R.drawable.ic_installer)));
                     adapter.notifyItemChanged(position);
                     break;
                 case 2:
                     APKEditorUtils.saveString("installerAction", null, context);
-                    mData.set(position, new RecycleViewSettingsItem(context.getString(R.string.installer_action), getInstallerAction(context), context.getResources().getDrawable(R.drawable.ic_installer)));
+                    mData.set(position, new SettingsItems(context.getString(R.string.installer_action), getInstallerAction(context), context.getResources().getDrawable(R.drawable.ic_installer)));
                     adapter.notifyItemChanged(position);
                     break;
             }
@@ -426,7 +426,7 @@ public class AppSettings {
     }
 
     @SuppressLint("UseCompatLoadingForDrawables")
-    private static void setAPKSign(RecycleViewSettingsAdapter adapter, int position, Context context) {
+    private static void setAPKSign(SettingsAdapter adapter, int position, Context context) {
         new MaterialAlertDialogBuilder(context).setItems(context.getResources().getStringArray(
                 R.array.signing_options), (dialogInterface, i) -> {
             switch (i) {
@@ -436,14 +436,14 @@ public class AppSettings {
                         new File(context.getFilesDir(), "signing/APKEditor.pk8").delete();
                         APKEditorUtils.saveString("RSATemplate", null, context);
                         new File(context.getFilesDir(), "signing/APKEditor").delete();
-                        mData.set(position, new RecycleViewSettingsItem(context.getString(R.string.sign_apk_with), getAPKSign(context), context.getResources().getDrawable(R.drawable.ic_key)));
+                        mData.set(position, new SettingsItems(context.getString(R.string.sign_apk_with), getAPKSign(context), context.getResources().getDrawable(R.drawable.ic_key)));
                         adapter.notifyItemChanged(position);
                     }
                     break;
                 case 1:
                     Intent signing = new Intent(context, APKSignActivity.class);
                     context.startActivity(signing);
-                    mData.set(position, new RecycleViewSettingsItem(context.getString(R.string.sign_apk_with), getAPKSign(context), context.getResources().getDrawable(R.drawable.ic_key)));
+                    mData.set(position, new SettingsItems(context.getString(R.string.sign_apk_with), getAPKSign(context), context.getResources().getDrawable(R.drawable.ic_key)));
                     adapter.notifyItemChanged(position);
                     break;
             }
@@ -470,12 +470,12 @@ public class AppSettings {
     }
 
     private static void transferExportedApps(Context context) {
-        new AsyncTask<Void, Void, Void>() {
+        new AsyncTasks() {
             private File sourceDir;
             private ProgressDialog mProgressDialog;
+
             @Override
-            protected void onPreExecute() {
-                super.onPreExecute();
+            public void onPreExecute() {
                 mProgressDialog = new ProgressDialog(context);
                 mProgressDialog.setMessage(context.getString(R.string.transfer_exported_apk));
                 mProgressDialog.setCancelable(false);
@@ -483,7 +483,7 @@ public class AppSettings {
             }
 
             @Override
-            protected Void doInBackground(Void... voids) {
+            public void doInBackground() {
                 File destDir;
                 if (APKEditorUtils.getString("exportAPKsPath", "externalFiles", context).equals("internalStorage")) {
                     sourceDir = context.getExternalFilesDir("");
@@ -493,12 +493,10 @@ public class AppSettings {
                     sourceDir = new File(Environment.getExternalStorageDirectory(), "/AEE/exportedAPKs");
                 }
                 APKEditorUtils.copyDir(sourceDir, destDir);
-                return null;
             }
 
             @Override
-            protected void onPostExecute(Void aVoid) {
-                super.onPostExecute(aVoid);
+            public void onPostExecute() {
                 APKEditorUtils.delete(sourceDir.getAbsolutePath());
                 try {
                     mProgressDialog.dismiss();
diff --git a/app/src/main/java/com/apk/editor/utils/AsyncTasks.java b/app/src/main/java/com/apk/editor/utils/AsyncTasks.java
new file mode 100644
index 0000000..52a7cf2
--- /dev/null
+++ b/app/src/main/java/com/apk/editor/utils/AsyncTasks.java
@@ -0,0 +1,48 @@
+/*
+ * Copyright (C) 2021-2022 sunilpaulmathew <sunil.kde@gmail.com>
+ *
+ * This file is part of Package Manager, a simple, yet powerful application
+ * to manage other application installed on an android device.
+ *
+ */
+
+package com.apk.editor.utils;
+
+import android.os.Handler;
+import android.os.Looper;
+
+import java.util.concurrent.ExecutorService;
+import java.util.concurrent.Executors;
+
+/*
+ * Created by APK Explorer & Editor <apkeditor@protonmail.com> on September 05, 2021
+ * Ref: https://stackoverflow.com/questions/58767733/android-asynctask-api-deprecating-in-android-11-what-are-the-alternatives
+ */
+public abstract class AsyncTasks {
+    private final ExecutorService executors;
+
+    public AsyncTasks() {
+        this.executors = Executors.newSingleThreadExecutor();
+    }
+
+    private void startBackground() {
+        onPreExecute();
+        executors.execute(() -> {
+            doInBackground();
+            new Handler(Looper.getMainLooper()).post(() -> {
+                onPostExecute();
+                if (!executors.isShutdown()) executors.shutdown();
+            });
+        });
+    }
+
+    public void execute() {
+        startBackground();
+    }
+
+    public abstract void onPreExecute();
+
+    public abstract void doInBackground();
+
+    public abstract void onPostExecute();
+}
\ No newline at end of file
diff --git a/app/src/main/java/com/apk/editor/utils/Common.java b/app/src/main/java/com/apk/editor/utils/Common.java
index a27d0b4..9ba6985 100644
--- a/app/src/main/java/com/apk/editor/utils/Common.java
+++ b/app/src/main/java/com/apk/editor/utils/Common.java
@@ -2,6 +2,7 @@ package com.apk.editor.utils;
 
 import android.view.View;
 
+import com.apk.editor.utils.recyclerViewItems.PackageItems;
 import com.google.android.material.card.MaterialCardView;
 
 import java.util.ArrayList;
@@ -13,6 +14,7 @@ import java.util.List;
 public class Common {
 
     private static boolean mBuilding = false, mFinish = false, mPrivateKey = false, mRSATemplate = false;
+    private static List<PackageItems> mPackageData = null;
     private static final List<String> mAPKList = new ArrayList<>(), mErrorList = new ArrayList<>();
     private static int mError = 0, mSuccess = 0;
     private static MaterialCardView mSelect;
@@ -52,6 +54,10 @@ public class Common {
         return mSuccess;
     }
 
+    public static List<PackageItems> getPackageData() {
+        return mPackageData;
+    }
+
     public static List<String> getAPKList() {
         return mAPKList;
     }
@@ -136,6 +142,10 @@ public class Common {
         mPackageName = packageName;
     }
 
+    public static void setPackageData(List<PackageItems> data) {
+        mPackageData = data;
+    }
+
     public static void setPath(String path) {
         mPath = path;
     }
diff --git a/app/src/main/java/com/apk/editor/utils/Projects.java b/app/src/main/java/com/apk/editor/utils/Projects.java
index fb025b9..e168795 100644
--- a/app/src/main/java/com/apk/editor/utils/Projects.java
+++ b/app/src/main/java/com/apk/editor/utils/Projects.java
@@ -2,7 +2,6 @@ package com.apk.editor.utils;
 
 import android.app.ProgressDialog;
 import android.content.Context;
-import android.os.AsyncTask;
 import android.os.Environment;
 
 import com.apk.editor.R;
@@ -18,12 +17,10 @@ import java.util.Objects;
  */
 public class Projects {
 
-    private static final List<String> mData = new ArrayList<>();
-
     public static List<String> getData(Context context) {
-        mData.clear();
+        List<String> mData = new ArrayList<>();
         for (File mFile : Objects.requireNonNull(new File(context.getCacheDir().toString()).listFiles())) {
-            if (mFile.exists() && mFile.isDirectory() && !mFile.getName().matches("WebView|splits|aee-signed")) {
+            if (mFile.exists() && mFile.isDirectory() && new File(mFile, "AndroidManifest.xml").exists()) {
                 if (Common.getSearchWord() == null) {
                     mData.add(mFile.getAbsolutePath());
                 } else if (Common.isTextMatched(mFile.getName(), Common.getSearchWord())) {
@@ -47,11 +44,11 @@ public class Projects {
     }
 
     public static void exportProject(File path, String name, Context context) {
-        new AsyncTask<Void, Void, Void>() {
+        new AsyncTasks() {
             private ProgressDialog mProgressDialog;
+
             @Override
-            protected void onPreExecute() {
-                super.onPreExecute();
+            public void onPreExecute() {
                 mProgressDialog = new ProgressDialog(context);
                 mProgressDialog.setMessage(context.getString(R.string.exporting, path.getName()));
                 mProgressDialog.setCancelable(false);
@@ -62,14 +59,12 @@ public class Projects {
             }
 
             @Override
-            protected Void doInBackground(Void... voids) {
+            public void doInBackground() {
                 APKEditorUtils.copyDir(path, new File(getExportPath(context), name));
-                return null;
             }
 
             @Override
-            protected void onPostExecute(Void aVoid) {
-                super.onPostExecute(aVoid);
+            public void onPostExecute() {
                 try {
                     mProgressDialog.dismiss();
                 } catch (IllegalArgumentException ignored) {
@@ -79,11 +74,11 @@ public class Projects {
     }
 
     public static void deleteProject(File path, Context context) {
-        new AsyncTask<Void, Void, Void>() {
+        new AsyncTasks() {
             private ProgressDialog mProgressDialog;
+
             @Override
-            protected void onPreExecute() {
-                super.onPreExecute();
+            public void onPreExecute() {
                 mProgressDialog = new ProgressDialog(context);
                 mProgressDialog.setMessage(context.getString(R.string.deleting, path.getName()));
                 mProgressDialog.setCancelable(false);
@@ -91,14 +86,12 @@ public class Projects {
             }
 
             @Override
-            protected Void doInBackground(Void... voids) {
+            public void doInBackground() {
                 APKEditorUtils.delete(path.getAbsolutePath());
-                return null;
             }
 
             @Override
-            protected void onPostExecute(Void aVoid) {
-                super.onPostExecute(aVoid);
+            public void onPostExecute() {
                 try {
                     mProgressDialog.dismiss();
                 } catch (IllegalArgumentException ignored) {
diff --git a/app/src/main/java/com/apk/editor/utils/SplitAPKInstaller.java b/app/src/main/java/com/apk/editor/utils/SplitAPKInstaller.java
index 26932d0..a6f65e1 100644
--- a/app/src/main/java/com/apk/editor/utils/SplitAPKInstaller.java
+++ b/app/src/main/java/com/apk/editor/utils/SplitAPKInstaller.java
@@ -6,7 +6,6 @@ import android.app.PendingIntent;
 import android.app.ProgressDialog;
 import android.content.Intent;
 import android.content.pm.PackageInstaller;
-import android.os.AsyncTask;
 
 import com.apk.editor.R;
 import com.apk.editor.activities.InstallerActivity;
@@ -133,29 +132,29 @@ public class SplitAPKInstaller {
     }
 
     public static void handleAppBundle(String path, Activity activity) {
-        new AsyncTask<Void, Void, Void>() {
+        new AsyncTasks() {
             private ProgressDialog mProgressDialog;
+
             @Override
-            protected void onPreExecute() {
-                super.onPreExecute();
+            public void onPreExecute() {
                 mProgressDialog = new ProgressDialog(activity);
                 mProgressDialog.setMessage(activity.getString(R.string.preparing_bundle_install, new File(path).getName()));
                 mProgressDialog.setCancelable(false);
                 mProgressDialog.show();
                 APKEditorUtils.delete(activity.getCacheDir().getPath() + "/splits");
             }
+
             @Override
-            protected Void doInBackground(Void... voids) {
+            public void doInBackground() {
                 if (path.endsWith(".apks")) {
                     APKEditorUtils.unzip(path,  activity.getCacheDir().getPath());
                 } else if (path.endsWith(".xapk") || path.endsWith(".apkm")) {
                     APKEditorUtils.unzip(path,  activity.getCacheDir().getPath() + "/splits");
                 }
-                return null;
             }
+
             @Override
-            protected void onPostExecute(Void aVoid) {
-                super.onPostExecute(aVoid);
+            public void onPostExecute() {
                 try {
                     mProgressDialog.dismiss();
                 } catch (IllegalArgumentException ignored) {
@@ -170,10 +169,10 @@ public class SplitAPKInstaller {
     }
 
     public static void installSplitAPKs(List<String> apks, String path, Activity activity) {
-        new AsyncTask<Void, Void, Void>() {
+        new AsyncTasks() {
+
             @Override
-            protected void onPreExecute() {
-                super.onPreExecute();
+            public void onPreExecute() {
                 APKEditorUtils.saveString("installationStatus", "waiting", activity);
                 Intent installIntent = new Intent(activity, InstallerActivity.class);
                 installIntent.putExtra(InstallerActivity.HEADING_INTENT, activity.getString(R.string.split_apk_installer));
@@ -182,7 +181,7 @@ public class SplitAPKInstaller {
             }
 
             @Override
-            protected Void doInBackground(Void... voids) {
+            public void doInBackground() {
                 int sessionId;
                 final InstallParams installParams = makeInstallParams(getTotalSize(path));
                 sessionId = runInstallCreate(installParams, activity);
@@ -206,21 +205,20 @@ public class SplitAPKInstaller {
                     }
                 } catch (NullPointerException ignored) {}
                 doCommitSession(sessionId, activity);
-                return null;
             }
 
             @Override
-            protected void onPostExecute(Void aVoid) {
-                super.onPostExecute(aVoid);
+            public void onPostExecute() {
+
             }
         }.execute();
     }
 
     public static void installAPK(File APK, Activity activity) {
-        new AsyncTask<Void, Void, Void>() {
+        new AsyncTasks() {
+
             @Override
-            protected void onPreExecute() {
-                super.onPreExecute();
+            public void onPreExecute() {
                 APKEditorUtils.saveString("installationStatus", "waiting", activity);
                 Intent installIntent = new Intent(activity, InstallerActivity.class);
                 installIntent.putExtra(InstallerActivity.HEADING_INTENT, activity.getString(R.string.apk_installer));
@@ -229,7 +227,7 @@ public class SplitAPKInstaller {
             }
 
             @Override
-            protected Void doInBackground(Void... voids) {
+            public void doInBackground() {
                 int sessionId;
                 final InstallParams installParams = makeInstallParams(APK.length());
                 sessionId = runInstallCreate(installParams, activity);
@@ -237,12 +235,11 @@ public class SplitAPKInstaller {
                     runInstallWrite(APK.length(), sessionId, APK.getName(), APK.getAbsolutePath(), activity);
                 } catch (NullPointerException ignored) {}
                 doCommitSession(sessionId, activity);
-                return null;
             }
 
             @Override
-            protected void onPostExecute(Void aVoid) {
-                super.onPostExecute(aVoid);
+            public void onPostExecute() {
+
             }
         }.execute();
     }
diff --git a/app/src/main/java/com/apk/editor/apksigner/APKSignerUtils.java b/app/src/main/java/com/apk/editor/utils/apkSigner/APKSignerUtils.java
similarity index 96%
rename from app/src/main/java/com/apk/editor/apksigner/APKSignerUtils.java
rename to app/src/main/java/com/apk/editor/utils/apkSigner/APKSignerUtils.java
index d22aec0..93cc5ca 100644
--- a/app/src/main/java/com/apk/editor/apksigner/APKSignerUtils.java
+++ b/app/src/main/java/com/apk/editor/utils/apkSigner/APKSignerUtils.java
@@ -1,4 +1,4 @@
-package com.apk.editor.apksigner;
+package com.apk.editor.utils.apkSigner;
 
 import android.util.Base64;
 
diff --git a/app/src/main/java/com/apk/editor/apksigner/ApkSigner.java b/app/src/main/java/com/apk/editor/utils/apkSigner/ApkSigner.java
similarity index 98%
rename from app/src/main/java/com/apk/editor/apksigner/ApkSigner.java
rename to app/src/main/java/com/apk/editor/utils/apkSigner/ApkSigner.java
index bf8231b..b080a9f 100644
--- a/app/src/main/java/com/apk/editor/apksigner/ApkSigner.java
+++ b/app/src/main/java/com/apk/editor/utils/apkSigner/ApkSigner.java
@@ -1,4 +1,4 @@
-package com.apk.editor.apksigner;
+package com.apk.editor.utils.apkSigner;
 
 import com.apk.editor.utils.APKEditorUtils;
 
diff --git a/app/src/main/java/com/apk/editor/apksigner/ManifestGenerator.java b/app/src/main/java/com/apk/editor/utils/apkSigner/ManifestGenerator.java
similarity index 98%
rename from app/src/main/java/com/apk/editor/apksigner/ManifestGenerator.java
rename to app/src/main/java/com/apk/editor/utils/apkSigner/ManifestGenerator.java
index 37a9323..7be18de 100644
--- a/app/src/main/java/com/apk/editor/apksigner/ManifestGenerator.java
+++ b/app/src/main/java/com/apk/editor/utils/apkSigner/ManifestGenerator.java
@@ -1,4 +1,4 @@
-package com.apk.editor.apksigner;
+package com.apk.editor.utils.apkSigner;
 
 import com.apk.editor.BuildConfig;
 
diff --git a/app/src/main/java/com/apk/editor/apksigner/SignatureFileGenerator.java b/app/src/main/java/com/apk/editor/utils/apkSigner/SignatureFileGenerator.java
similarity index 97%
rename from app/src/main/java/com/apk/editor/apksigner/SignatureFileGenerator.java
rename to app/src/main/java/com/apk/editor/utils/apkSigner/SignatureFileGenerator.java
index 4ed1f57..8f99c70 100644
--- a/app/src/main/java/com/apk/editor/apksigner/SignatureFileGenerator.java
+++ b/app/src/main/java/com/apk/editor/utils/apkSigner/SignatureFileGenerator.java
@@ -1,4 +1,4 @@
-package com.apk.editor.apksigner;
+package com.apk.editor.utils.apkSigner;
 
 import com.apk.editor.BuildConfig;
 
diff --git a/app/src/main/java/com/apk/editor/utils/RecycleViewItem.java b/app/src/main/java/com/apk/editor/utils/recyclerViewItems/AboutItems.java
similarity index 77%
rename from app/src/main/java/com/apk/editor/utils/RecycleViewItem.java
rename to app/src/main/java/com/apk/editor/utils/recyclerViewItems/AboutItems.java
index 24bcfc4..8111873 100644
--- a/app/src/main/java/com/apk/editor/utils/RecycleViewItem.java
+++ b/app/src/main/java/com/apk/editor/utils/recyclerViewItems/AboutItems.java
@@ -1,4 +1,4 @@
-package com.apk.editor.utils;
+package com.apk.editor.utils.recyclerViewItems;
 
 import android.graphics.drawable.Drawable;
 
@@ -7,12 +7,12 @@ import java.io.Serializable;
 /*
  * Created by APK Explorer & Editor <apkeditor@protonmail.com> on March 04, 2021
  */
-public class RecycleViewItem implements Serializable {
+public class AboutItems implements Serializable {
 
     private final String mDescription, mTitle, mURL;
     private final Drawable mIcon;
 
-    public RecycleViewItem(String title, String description, Drawable icon, String url) {
+    public AboutItems(String title, String description, Drawable icon, String url) {
         this.mTitle = title;
         this.mDescription = description;
         this.mIcon = icon;
diff --git a/app/src/main/java/com/apk/editor/utils/recyclerViewItems/PackageItems.java b/app/src/main/java/com/apk/editor/utils/recyclerViewItems/PackageItems.java
new file mode 100644
index 0000000..16cd03c
--- /dev/null
+++ b/app/src/main/java/com/apk/editor/utils/recyclerViewItems/PackageItems.java
@@ -0,0 +1,55 @@
+package com.apk.editor.utils.recyclerViewItems;
+
+import android.graphics.drawable.Drawable;
+
+import java.io.Serializable;
+
+/*
+ * Created by APK Explorer & Editor <apkeditor@protonmail.com> on September 05, 2021
+ */
+public class PackageItems implements Serializable {
+
+    private final Drawable mAppIcon;
+    private final long mAPKSize, mInstalledTime, mUpdatedTime;
+    private final String mAppName, mPackageName, mVersion;
+
+    public PackageItems(String name, String packageName, String version, long apkSize, long installedTime,
+                        long updatedTime, Drawable icon) {
+        this.mAppName = name;
+        this.mPackageName = packageName;
+        this.mVersion = version;
+        this.mAPKSize = apkSize;
+        this.mInstalledTime = installedTime;
+        this.mUpdatedTime = updatedTime;
+        this.mAppIcon = icon;
+    }
+
+    public Drawable getAppIcon() {
+        return mAppIcon;
+    }
+
+    public long getAPKSize() {
+        return mAPKSize;
+    }
+
+    public long getInstalledTime() {
+        return mInstalledTime;
+    }
+
+    public long getUpdatedTime() {
+        return mUpdatedTime;
+    }
+
+    public String getAppName() {
+        return mAppName;
+    }
+
+    public String getPackageName() {
+        return mPackageName;
+    }
+
+    public String getAppVersion() {
+        return mVersion;
+    }
+
+}
\ No newline at end of file
diff --git a/app/src/main/java/com/apk/editor/utils/RecycleViewSettingsItem.java b/app/src/main/java/com/apk/editor/utils/recyclerViewItems/SettingsItems.java
similarity index 75%
rename from app/src/main/java/com/apk/editor/utils/RecycleViewSettingsItem.java
rename to app/src/main/java/com/apk/editor/utils/recyclerViewItems/SettingsItems.java
index 26d6635..af49a43 100644
--- a/app/src/main/java/com/apk/editor/utils/RecycleViewSettingsItem.java
+++ b/app/src/main/java/com/apk/editor/utils/recyclerViewItems/SettingsItems.java
@@ -1,4 +1,4 @@
-package com.apk.editor.utils;
+package com.apk.editor.utils.recyclerViewItems;
 
 import android.graphics.drawable.Drawable;
 
@@ -7,12 +7,12 @@ import java.io.Serializable;
 /*
  * Created by APK Explorer & Editor <apkeditor@protonmail.com> on March 31, 2021
  */
-public class RecycleViewSettingsItem implements Serializable {
+public class SettingsItems implements Serializable {
 
     private final String mDescription, mTitle;
     private final Drawable mIcon;
 
-    public RecycleViewSettingsItem(String title, String description, Drawable icon) {
+    public SettingsItems(String title, String description, Drawable icon) {
         this.mTitle = title;
         this.mDescription = description;
         this.mIcon = icon;
