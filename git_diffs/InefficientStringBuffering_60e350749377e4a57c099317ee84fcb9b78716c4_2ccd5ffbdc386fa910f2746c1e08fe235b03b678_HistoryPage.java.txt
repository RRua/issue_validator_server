diff --git a/app/src/main/java/acr/browser/lightning/constant/HistoryPage.java b/app/src/main/java/acr/browser/lightning/constant/HistoryPage.java
index cd2cd3eb..ea2158aa 100644
--- a/app/src/main/java/acr/browser/lightning/constant/HistoryPage.java
+++ b/app/src/main/java/acr/browser/lightning/constant/HistoryPage.java
@@ -19,15 +19,14 @@ import com.anthonycr.bonsai.SingleSubscriber;
 import java.io.File;
 import java.io.FileWriter;
 import java.io.IOException;
-import java.util.Iterator;
 import java.util.List;
 
 import javax.inject.Inject;
 
-import acr.browser.lightning.R;
 import acr.browser.lightning.BrowserApp;
 import acr.browser.lightning.database.HistoryItem;
 import acr.browser.lightning.database.history.HistoryModel;
+import acr.browser.lightning.html.history.HistoryPageBuilder;
 import acr.browser.lightning.utils.Preconditions;
 import acr.browser.lightning.utils.Utils;
 
@@ -37,30 +36,6 @@ public class HistoryPage {
 
     public static final String FILENAME = "history.html";
 
-    private static final String HEADING_1 = "<!DOCTYPE html><html xmlns=http://www.w3.org/1999/xhtml>\n" +
-        "<head>\n" +
-        "<meta content=en-us http-equiv=Content-Language />\n" +
-        "<meta content='text/html; charset=utf-8' http-equiv=Content-Type />\n" +
-        "<meta name=viewport content='width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no'>\n" +
-        "<title>";
-
-    private static final String HEADING_2 = "</title></head><style>body,html {margin: 0px; padding: 0px;}" +
-        ".box { vertical-align:middle;position:relative; display: block; margin: 0px;padding-left:14px;padding-right:14px;padding-top:9px;padding-bottom:9px; background-color:#fff;border-bottom: 1px solid #d2d2d2;font-family: Arial;color: #444;font-size: 12px;}" +
-        ".box a { width: 100%; height: 100%; position: absolute; left: 0; top: 0;}" +
-        ".black {color: black;font-size: 15px;font-family: Arial; white-space: nowrap; overflow: hidden;margin:auto; text-overflow: ellipsis; -o-text-overflow: ellipsis; -ms-text-overflow: ellipsis;}" +
-        ".font {color: gray;font-size: 10px;font-family: Arial; white-space: nowrap; overflow: hidden;margin:auto; text-overflow: ellipsis; -o-text-overflow: ellipsis; -ms-text-overflow: ellipsis;}" +
-        "</style><body><div id=\"content\">";
-
-    private static final String PART1 = "<div class=box><a href='";
-
-    private static final String PART2 = "'></a><p class='black'>";
-
-    private static final String PART3 = "</p><p class='font'>";
-
-    private static final String PART4 = "</p></div>";
-
-    private static final String END = "</div></body></html>";
-
     /**
      * Get the file that the history page is stored in
      * or should be stored in.
@@ -73,14 +48,11 @@ public class HistoryPage {
         return new File(application.getFilesDir(), FILENAME);
     }
 
-    @NonNull private final String mTitle;
-
     @Inject Application mApp;
     @Inject HistoryModel mHistoryModel;
 
     public HistoryPage() {
         BrowserApp.getAppComponent().inject(this);
-        mTitle = mApp.getString(R.string.action_history);
     }
 
     @NonNull
@@ -88,34 +60,21 @@ public class HistoryPage {
         return Single.create(new SingleAction<String>() {
             @Override
             public void onSubscribe(@NonNull final SingleSubscriber<String> subscriber) {
-                final StringBuilder historyBuilder = new StringBuilder(HEADING_1 + mTitle + HEADING_2);
-
                 mHistoryModel.lastHundredVisitedHistoryItems()
                     .subscribe(new SingleOnSubscribe<List<HistoryItem>>() {
                         @Override
                         public void onItem(@Nullable List<HistoryItem> item) {
 
                             Preconditions.checkNonNull(item);
-                            Iterator<HistoryItem> it = item.iterator();
-                            HistoryItem helper;
-                            while (it.hasNext()) {
-                                helper = it.next();
-                                historyBuilder.append(PART1);
-                                historyBuilder.append(helper.getUrl());
-                                historyBuilder.append(PART2);
-                                historyBuilder.append(helper.getTitle());
-                                historyBuilder.append(PART3);
-                                historyBuilder.append(helper.getUrl());
-                                historyBuilder.append(PART4);
-                            }
 
-                            historyBuilder.append(END);
+                            HistoryPageBuilder historyPageBuilder = new HistoryPageBuilder(mApp);
+
                             File historyWebPage = getHistoryPageFile(mApp);
                             FileWriter historyWriter = null;
                             try {
                                 //noinspection IOResourceOpenedButNotSafelyClosed
                                 historyWriter = new FileWriter(historyWebPage, false);
-                                historyWriter.write(historyBuilder.toString());
+                                historyWriter.write(historyPageBuilder.buildPage(item));
                             } catch (IOException e) {
                                 Log.e(TAG, "Unable to write history page to disk", e);
                             } finally {
diff --git a/app/src/main/java/acr/browser/lightning/html/bookmark/BookmarkPageBuilder.kt b/app/src/main/java/acr/browser/lightning/html/bookmark/BookmarkPageBuilder.kt
index 2e86f7ba..0f1958e2 100644
--- a/app/src/main/java/acr/browser/lightning/html/bookmark/BookmarkPageBuilder.kt
+++ b/app/src/main/java/acr/browser/lightning/html/bookmark/BookmarkPageBuilder.kt
@@ -60,8 +60,8 @@ class BookmarkPageBuilder(private val faviconModel: FaviconModel,
                 createViewModelForBookmark(it)
             }
 
-            newElement.select("a").first().attr("href", viewModel.url)
-            newElement.select("img").first().attr("src", viewModel.iconUrl)
+            newElement.getElementsByTag("a").first().attr("href", viewModel.url)
+            newElement.getElementsByTag("img").first().attr("src", viewModel.iconUrl)
             newElement.getElementById("title").appendText(viewModel.title)
             container.appendChild(newElement)
         }
diff --git a/app/src/main/java/acr/browser/lightning/html/history/HistoryPageBuilder.kt b/app/src/main/java/acr/browser/lightning/html/history/HistoryPageBuilder.kt
new file mode 100644
index 00000000..311864da
--- /dev/null
+++ b/app/src/main/java/acr/browser/lightning/html/history/HistoryPageBuilder.kt
@@ -0,0 +1,38 @@
+package acr.browser.lightning.html.history
+
+import acr.browser.lightning.R
+import acr.browser.lightning.database.HistoryItem
+import android.app.Application
+import com.anthonycr.mezzanine.MezzanineGenerator
+import org.jsoup.Jsoup
+
+/**
+ * The builder for the history page.
+ */
+class HistoryPageBuilder(private val app: Application) {
+
+    fun buildPage(historyList: List<HistoryItem>): String {
+        val html = MezzanineGenerator.ListPageReader().provideHtml()
+
+        val document = Jsoup.parse(html).apply {
+            title(app.getString(R.string.action_history))
+        }
+
+        val body = document.body()
+        val repeatableElement = body.getElementById("repeated")
+        val container = body.getElementById("content")
+        repeatableElement.remove()
+
+        historyList.forEach {
+            val newElement = repeatableElement.clone()
+
+            newElement.getElementsByTag("a").first().attr("href", it.url)
+            newElement.getElementById("title").text(it.title)
+            newElement.getElementById("url").text(it.url)
+            container.appendChild(newElement)
+        }
+
+        return document.outerHtml()
+    }
+
+}
\ No newline at end of file
diff --git a/app/src/main/java/acr/browser/lightning/html/history/ListPageReader.kt b/app/src/main/java/acr/browser/lightning/html/history/ListPageReader.kt
new file mode 100644
index 00000000..22052e36
--- /dev/null
+++ b/app/src/main/java/acr/browser/lightning/html/history/ListPageReader.kt
@@ -0,0 +1,13 @@
+package acr.browser.lightning.html.history
+
+import com.anthonycr.mezzanine.FileStream
+
+/**
+ * The store for the list view HTML.
+ */
+@FileStream("app/src/main/html/list.html")
+interface ListPageReader {
+
+    fun provideHtml(): String
+
+}
\ No newline at end of file
