diff --git a/src/main/java/com/codebutler/farebot/FareBotApplication.java b/src/main/java/com/codebutler/farebot/FareBotApplication.java
index 87239c7..c03e0be 100644
--- a/src/main/java/com/codebutler/farebot/FareBotApplication.java
+++ b/src/main/java/com/codebutler/farebot/FareBotApplication.java
@@ -24,10 +24,42 @@ package com.codebutler.farebot;
 
 import android.app.Application;
 import android.os.StrictMode;
+
+import com.codebutler.farebot.card.Card;
+import com.codebutler.farebot.card.classic.ClassicSector;
+import com.codebutler.farebot.card.desfire.DesfireFile;
+import com.codebutler.farebot.card.desfire.DesfireFileSettings;
+import com.codebutler.farebot.card.desfire.InvalidDesfireFile;
+import com.codebutler.farebot.card.desfire.RecordDesfireFile;
 import com.codebutler.farebot.card.felica.DBUtil;
-import com.codebutler.farebot.transit.OVChipDBUtil;
+import com.codebutler.farebot.transit.ovc.OVChipDBUtil;
+import com.codebutler.farebot.xml.Base64String;
+import com.codebutler.farebot.xml.CardConverter;
+import com.codebutler.farebot.xml.ClassicSectorConverter;
+import com.codebutler.farebot.xml.DesfireFileConverter;
+import com.codebutler.farebot.xml.DesfireFileSettingsConverter;
+import com.codebutler.farebot.xml.EpochDateTransform;
+import com.codebutler.farebot.xml.FelicaIDmTransform;
+import com.codebutler.farebot.xml.FelicaPMmTransform;
+import com.codebutler.farebot.xml.HexString;
+import com.codebutler.farebot.xml.SkippableRegistryStrategy;
 import com.crashlytics.android.Crashlytics;
 
+import net.kazzz.felica.lib.FeliCaLib;
+
+import org.simpleframework.xml.Serializer;
+import org.simpleframework.xml.convert.Registry;
+import org.simpleframework.xml.core.Persister;
+import org.simpleframework.xml.strategy.Type;
+import org.simpleframework.xml.strategy.Visitor;
+import org.simpleframework.xml.strategy.VisitorStrategy;
+import org.simpleframework.xml.stream.InputNode;
+import org.simpleframework.xml.stream.NodeMap;
+import org.simpleframework.xml.stream.OutputNode;
+import org.simpleframework.xml.transform.RegistryMatcher;
+
+import java.util.Date;
+
 public class FareBotApplication extends Application {
     public static final String PREF_LAST_READ_ID = "last_read_id";
     public static final String PREF_LAST_READ_AT = "last_read_at";
@@ -36,12 +68,43 @@ public class FareBotApplication extends Application {
 
     private DBUtil mSuicaDBUtil;
     private OVChipDBUtil mOVChipDBUtil;
+    private final Serializer mSerializer;
 
     public FareBotApplication() {
         sInstance = this;
 
-        mSuicaDBUtil  = new DBUtil(this);
+        mSuicaDBUtil = new DBUtil(this);
         mOVChipDBUtil = new OVChipDBUtil(this);
+
+        try {
+            Visitor visitor = new Visitor() {
+                @Override public void read(Type type, NodeMap<InputNode> node) throws Exception { }
+                @Override public void write(Type type, NodeMap<OutputNode> node) throws Exception {
+                    node.remove("class");
+                }
+            };
+            Registry registry = new Registry();
+            RegistryMatcher matcher = new RegistryMatcher();
+            mSerializer = new Persister(new VisitorStrategy(visitor, new SkippableRegistryStrategy(registry)), matcher);
+
+            DesfireFileConverter desfireFileConverter = new DesfireFileConverter(mSerializer);
+            registry.bind(DesfireFile.class, desfireFileConverter);
+            registry.bind(RecordDesfireFile.class, desfireFileConverter);
+            registry.bind(InvalidDesfireFile.class, desfireFileConverter);
+
+            registry.bind(DesfireFileSettings.class, new DesfireFileSettingsConverter());
+            registry.bind(ClassicSector.class, new ClassicSectorConverter());
+            registry.bind(Card.class, new CardConverter(mSerializer));
+
+            matcher.bind(HexString.class, HexString.Transform.class);
+            matcher.bind(Base64String.class, Base64String.Transform.class);
+            matcher.bind(Date.class, EpochDateTransform.class);
+            matcher.bind(FeliCaLib.IDm.class, FelicaIDmTransform.class);
+            matcher.bind(FeliCaLib.PMm.class, FelicaPMmTransform.class);
+
+        } catch (Exception ex) {
+            throw new RuntimeException(ex);
+        }
     }
 
     public static FareBotApplication getInstance() {
@@ -56,6 +119,10 @@ public class FareBotApplication extends Application {
         return mOVChipDBUtil;
     }
 
+    public Serializer getSerializer() {
+        return mSerializer;
+    }
+
     @Override public void onCreate() {
         super.onCreate();
 
diff --git a/src/main/java/com/codebutler/farebot/activity/AddKeyActivity.java b/src/main/java/com/codebutler/farebot/activity/AddKeyActivity.java
index 3960128..189c1da 100644
--- a/src/main/java/com/codebutler/farebot/activity/AddKeyActivity.java
+++ b/src/main/java/com/codebutler/farebot/activity/AddKeyActivity.java
@@ -22,6 +22,7 @@
 
 package com.codebutler.farebot.activity;
 
+import android.app.Activity;
 import android.app.AlertDialog;
 import android.app.PendingIntent;
 import android.content.ContentValues;
@@ -36,14 +37,15 @@ import android.os.Bundle;
 import android.view.View;
 import android.widget.RadioButton;
 import android.widget.TextView;
-import android.app.Activity;
-import com.codebutler.farebot.BetterAsyncTask;
+
 import com.codebutler.farebot.R;
-import com.codebutler.farebot.Utils;
 import com.codebutler.farebot.key.ClassicCardKeys;
 import com.codebutler.farebot.key.ClassicSectorKey;
 import com.codebutler.farebot.provider.CardKeyProvider;
 import com.codebutler.farebot.provider.KeysTableColumns;
+import com.codebutler.farebot.util.BetterAsyncTask;
+import com.codebutler.farebot.util.Utils;
+
 import org.apache.commons.io.IOUtils;
 import org.apache.commons.lang3.ArrayUtils;
 
diff --git a/src/main/java/com/codebutler/farebot/activity/AdvancedCardInfoActivity.java b/src/main/java/com/codebutler/farebot/activity/AdvancedCardInfoActivity.java
index da2bafc..f32f14a 100644
--- a/src/main/java/com/codebutler/farebot/activity/AdvancedCardInfoActivity.java
+++ b/src/main/java/com/codebutler/farebot/activity/AdvancedCardInfoActivity.java
@@ -36,17 +36,20 @@ import android.view.View;
 import android.widget.TextView;
 import android.widget.Toast;
 
+import com.codebutler.farebot.FareBotApplication;
+import com.codebutler.farebot.R;
+import com.codebutler.farebot.card.Card;
 import com.codebutler.farebot.card.CardHasManufacturingInfo;
 import com.codebutler.farebot.card.CardRawDataFragmentClass;
-import com.codebutler.farebot.R;
-import com.codebutler.farebot.ui.TabPagerAdapter;
 import com.codebutler.farebot.card.UnauthorizedException;
 import com.codebutler.farebot.card.UnsupportedCardException;
-import com.codebutler.farebot.Utils;
-import com.codebutler.farebot.card.Card;
 import com.codebutler.farebot.fragment.CardHWDetailFragment;
+import com.codebutler.farebot.ui.TabPagerAdapter;
+import com.codebutler.farebot.util.Utils;
 import com.crashlytics.android.Crashlytics;
 
+import org.simpleframework.xml.Serializer;
+
 import java.text.SimpleDateFormat;
 import java.util.Locale;
 
@@ -67,14 +70,12 @@ public class AdvancedCardInfoActivity extends Activity {
                 reportError();
             }
         });
-        
-        mCard = getIntent().getParcelableExtra(AdvancedCardInfoActivity.EXTRA_CARD);
+
+        Serializer serializer = FareBotApplication.getInstance().getSerializer();
+        mCard = Card.fromXml(serializer, getIntent().getStringExtra(AdvancedCardInfoActivity.EXTRA_CARD));
         
         ViewPager viewPager = (ViewPager) findViewById(R.id.pager);
         mTabsAdapter = new TabPagerAdapter(this, viewPager);
-        
-        Bundle args = new Bundle();
-        args.putParcelable(AdvancedCardInfoActivity.EXTRA_CARD, mCard);
 
         ActionBar actionBar = getActionBar();
         actionBar.setDisplayHomeAsUpEnabled(true);
@@ -108,14 +109,14 @@ public class AdvancedCardInfoActivity extends Activity {
 
         CardHasManufacturingInfo infoAnnotation = mCard.getClass().getAnnotation(CardHasManufacturingInfo.class);
         if (infoAnnotation == null || infoAnnotation.value()) {
-            mTabsAdapter.addTab(actionBar.newTab().setText(R.string.hw_detail), CardHWDetailFragment.class, args);
+            mTabsAdapter.addTab(actionBar.newTab().setText(R.string.hw_detail), CardHWDetailFragment.class, getIntent().getExtras());
         }
 
         CardRawDataFragmentClass annotation = mCard.getClass().getAnnotation(CardRawDataFragmentClass.class);
         if (annotation != null) {
             Class rawDataFragmentClass = annotation.value();
             if (rawDataFragmentClass != null) {
-                mTabsAdapter.addTab(actionBar.newTab().setText(R.string.data), rawDataFragmentClass, args);
+                mTabsAdapter.addTab(actionBar.newTab().setText(R.string.data), rawDataFragmentClass, getIntent().getExtras());
                 actionBar.setNavigationMode(ActionBar.NAVIGATION_MODE_TABS);
             }
         }
@@ -128,8 +129,8 @@ public class AdvancedCardInfoActivity extends Activity {
 
     @Override public boolean onOptionsItemSelected (MenuItem item) {
         try {
-            String xml = Utils.xmlNodeToString(mCard.toXML().getOwnerDocument());
             if (item.getItemId() == R.id.copy_xml) {
+                String xml = mCard.toXml(FareBotApplication.getInstance().getSerializer());
                 @SuppressWarnings("deprecation")
                 ClipboardManager clipboard = (ClipboardManager) getSystemService(CLIPBOARD_SERVICE);
                 clipboard.setText(xml);
@@ -137,6 +138,7 @@ public class AdvancedCardInfoActivity extends Activity {
                 return true;
 
             } else if (item.getItemId() == R.id.share_xml) {
+                String xml = mCard.toXml(FareBotApplication.getInstance().getSerializer());
                 Intent intent = new Intent(Intent.ACTION_SEND);
                 intent.setType("text/plain");
                 intent.putExtra(Intent.EXTRA_TEXT, xml);
@@ -159,7 +161,7 @@ public class AdvancedCardInfoActivity extends Activity {
         DialogInterface.OnClickListener listener = new DialogInterface.OnClickListener() {
             @Override public void onClick(DialogInterface dialog, int which) {
                 try {
-                    Crashlytics.log(Utils.xmlNodeToString(mCard.toXML().getOwnerDocument()));
+                    Crashlytics.log(mCard.toXml(FareBotApplication.getInstance().getSerializer()));
                 } catch (Exception ex) {
                     Crashlytics.logException(ex);
                 }
diff --git a/src/main/java/com/codebutler/farebot/activity/CardInfoActivity.java b/src/main/java/com/codebutler/farebot/activity/CardInfoActivity.java
index ae7e2e2..b9d0e8a 100644
--- a/src/main/java/com/codebutler/farebot/activity/CardInfoActivity.java
+++ b/src/main/java/com/codebutler/farebot/activity/CardInfoActivity.java
@@ -39,20 +39,21 @@ import android.view.Menu;
 import android.view.MenuItem;
 import android.view.View;
 
+import com.codebutler.farebot.FareBotApplication;
 import com.codebutler.farebot.R;
-import com.codebutler.farebot.ui.TabPagerAdapter;
-import com.codebutler.farebot.card.UnsupportedCardException;
-import com.codebutler.farebot.Utils;
 import com.codebutler.farebot.card.Card;
+import com.codebutler.farebot.card.UnsupportedCardException;
 import com.codebutler.farebot.fragment.CardBalanceFragment;
 import com.codebutler.farebot.fragment.CardInfoFragment;
 import com.codebutler.farebot.fragment.CardRefillsFragment;
 import com.codebutler.farebot.fragment.CardSubscriptionsFragment;
 import com.codebutler.farebot.fragment.CardTripsFragment;
 import com.codebutler.farebot.provider.CardsTableColumns;
-import com.codebutler.farebot.transit.EdyTransitData;
-import com.codebutler.farebot.transit.SuicaTransitData;
 import com.codebutler.farebot.transit.TransitData;
+import com.codebutler.farebot.transit.edy.EdyTransitData;
+import com.codebutler.farebot.transit.suica.SuicaTransitData;
+import com.codebutler.farebot.ui.TabPagerAdapter;
+import com.codebutler.farebot.util.Utils;
 
 public class CardInfoActivity extends Activity {
     public static final String EXTRA_TRANSIT_DATA = "transit_data";
@@ -97,7 +98,7 @@ public class CardInfoActivity extends Activity {
 
                     String data = cursor.getString(cursor.getColumnIndex(CardsTableColumns.DATA));
 
-                    mCard        = Card.fromXml(data);
+                    mCard = Card.fromXml(FareBotApplication.getInstance().getSerializer(), data);
                     mTransitData = mCard.parseTransitData();
 
                     SharedPreferences prefs = PreferenceManager.getDefaultSharedPreferences(CardInfoActivity.this);
@@ -133,7 +134,7 @@ public class CardInfoActivity extends Activity {
                 actionBar.setTitle(mTransitData.getCardName() + " " + titleSerial);
 
                 Bundle args = new Bundle();
-                args.putParcelable(AdvancedCardInfoActivity.EXTRA_CARD, mCard);
+                args.putString(AdvancedCardInfoActivity.EXTRA_CARD, mCard.toXml(FareBotApplication.getInstance().getSerializer()));
                 args.putParcelable(EXTRA_TRANSIT_DATA, mTransitData);
                 
                 mTabsAdapter.addTab(actionBar.newTab().setText(R.string.balance), CardBalanceFragment.class, args);
@@ -195,7 +196,7 @@ public class CardInfoActivity extends Activity {
 
     private void showAdvancedInfo (Exception ex) {
         Intent intent = new Intent(this, AdvancedCardInfoActivity.class);
-        intent.putExtra(AdvancedCardInfoActivity.EXTRA_CARD, mCard);
+        intent.putExtra(AdvancedCardInfoActivity.EXTRA_CARD, mCard.toXml(FareBotApplication.getInstance().getSerializer()));
         if (ex != null) {
             intent.putExtra(AdvancedCardInfoActivity.EXTRA_ERROR, ex);
         }
diff --git a/src/main/java/com/codebutler/farebot/activity/CardsActivity.java b/src/main/java/com/codebutler/farebot/activity/CardsActivity.java
index fb1fac5..bc58255 100644
--- a/src/main/java/com/codebutler/farebot/activity/CardsActivity.java
+++ b/src/main/java/com/codebutler/farebot/activity/CardsActivity.java
@@ -23,6 +23,7 @@
 package com.codebutler.farebot.activity;
 
 import android.app.Fragment;
+
 import com.codebutler.farebot.fragment.CardsFragment;
 
 public class CardsActivity extends FragmentWrapperActivity {
diff --git a/src/main/java/com/codebutler/farebot/activity/FragmentWrapperActivity.java b/src/main/java/com/codebutler/farebot/activity/FragmentWrapperActivity.java
index 010dd4a..5452e0a 100644
--- a/src/main/java/com/codebutler/farebot/activity/FragmentWrapperActivity.java
+++ b/src/main/java/com/codebutler/farebot/activity/FragmentWrapperActivity.java
@@ -22,14 +22,15 @@
 
 package com.codebutler.farebot.activity;
 
-import android.content.Intent;
-import android.os.Bundle;
+import android.app.Activity;
 import android.app.Fragment;
 import android.app.FragmentTransaction;
+import android.content.Intent;
+import android.os.Bundle;
+import android.view.MenuItem;
 import android.widget.FrameLayout;
 import android.widget.LinearLayout;
-import android.app.Activity;
-import android.view.MenuItem;
+
 import com.codebutler.farebot.R;
 
 import static android.view.ViewGroup.LayoutParams.MATCH_PARENT;
diff --git a/src/main/java/com/codebutler/farebot/activity/KeysActivity.java b/src/main/java/com/codebutler/farebot/activity/KeysActivity.java
index 40ae13e..5b06edc 100644
--- a/src/main/java/com/codebutler/farebot/activity/KeysActivity.java
+++ b/src/main/java/com/codebutler/farebot/activity/KeysActivity.java
@@ -23,6 +23,7 @@
 package com.codebutler.farebot.activity;
 
 import android.app.Fragment;
+
 import com.codebutler.farebot.fragment.KeysFragment;
 
 public class KeysActivity extends FragmentWrapperActivity {
diff --git a/src/main/java/com/codebutler/farebot/activity/MainActivity.java b/src/main/java/com/codebutler/farebot/activity/MainActivity.java
index 545e6d7..1441dfc 100644
--- a/src/main/java/com/codebutler/farebot/activity/MainActivity.java
+++ b/src/main/java/com/codebutler/farebot/activity/MainActivity.java
@@ -22,6 +22,8 @@
 
 package com.codebutler.farebot.activity;
 
+import android.app.ActionBar;
+import android.app.Activity;
 import android.app.PendingIntent;
 import android.content.Intent;
 import android.net.Uri;
@@ -31,14 +33,13 @@ import android.nfc.tech.MifareClassic;
 import android.nfc.tech.MifareUltralight;
 import android.nfc.tech.NfcF;
 import android.os.Bundle;
-import android.view.View;
-import android.widget.TextView;
-import android.app.ActionBar;
-import android.app.Activity;
 import android.view.Menu;
 import android.view.MenuItem;
+import android.view.View;
+import android.widget.TextView;
+
 import com.codebutler.farebot.R;
-import com.codebutler.farebot.Utils;
+import com.codebutler.farebot.util.Utils;
 
 public class MainActivity extends Activity {
     private NfcAdapter mNfcAdapter;
diff --git a/src/main/java/com/codebutler/farebot/activity/ReadingTagActivity.java b/src/main/java/com/codebutler/farebot/activity/ReadingTagActivity.java
index 34d9b71..737aeee 100644
--- a/src/main/java/com/codebutler/farebot/activity/ReadingTagActivity.java
+++ b/src/main/java/com/codebutler/farebot/activity/ReadingTagActivity.java
@@ -34,14 +34,16 @@ import android.nfc.Tag;
 import android.os.AsyncTask;
 import android.os.Bundle;
 import android.preference.PreferenceManager;
+import android.util.Log;
 
+import com.codebutler.farebot.BuildConfig;
 import com.codebutler.farebot.FareBotApplication;
 import com.codebutler.farebot.R;
-import com.codebutler.farebot.card.UnsupportedTagException;
-import com.codebutler.farebot.Utils;
 import com.codebutler.farebot.card.Card;
+import com.codebutler.farebot.card.UnsupportedTagException;
 import com.codebutler.farebot.provider.CardProvider;
 import com.codebutler.farebot.provider.CardsTableColumns;
+import com.codebutler.farebot.util.Utils;
 
 import java.util.Date;
 
@@ -80,14 +82,14 @@ public class ReadingTagActivity extends Activity {
                     try {
                         Card card = Card.dumpTag(tagId, tag);
 
-                        String cardXml = Utils.xmlNodeToString(card.toXML().getOwnerDocument());
+                        String cardXml = card.toXml(FareBotApplication.getInstance().getSerializer());
 
-                        /*
-                        Log.d("ReadingTagActivity", "Got Card XML");
-                        for (String line : cardXml.split("\n")) {
-                            Log.d("ReadingTagActivity", "Got Card XML: " + line);
+                        if (BuildConfig.DEBUG) {
+                            Log.d("ReadingTagActivity", "Got Card XML");
+                            for (String line : cardXml.split("\n")) {
+                                Log.d("ReadingTagActivity", "Got Card XML: " + line);
+                            }
                         }
-                        */
 
                         String tagIdString = Utils.getHexString(card.getTagId());
 
diff --git a/src/main/java/com/codebutler/farebot/activity/SupportedCardsActivity.java b/src/main/java/com/codebutler/farebot/activity/SupportedCardsActivity.java
index ec3faad..fc7c222 100644
--- a/src/main/java/com/codebutler/farebot/activity/SupportedCardsActivity.java
+++ b/src/main/java/com/codebutler/farebot/activity/SupportedCardsActivity.java
@@ -22,19 +22,20 @@
 
 package com.codebutler.farebot.activity;
 
+import android.app.Activity;
 import android.content.Context;
 import android.content.Intent;
 import android.os.Bundle;
 import android.text.Html;
 import android.text.Spanned;
+import android.view.MenuItem;
 import android.view.View;
 import android.view.ViewGroup;
 import android.widget.ArrayAdapter;
 import android.widget.Gallery;
 import android.widget.ImageView;
 import android.widget.TextView;
-import android.app.Activity;
-import android.view.MenuItem;
+
 import com.codebutler.farebot.R;
 
 import java.util.ArrayList;
diff --git a/src/main/java/com/codebutler/farebot/card/Card.java b/src/main/java/com/codebutler/farebot/card/Card.java
index 0c1bf5a..819f4ea 100644
--- a/src/main/java/com/codebutler/farebot/card/Card.java
+++ b/src/main/java/com/codebutler/farebot/card/Card.java
@@ -23,33 +23,33 @@
 package com.codebutler.farebot.card;
 
 import android.nfc.Tag;
-import android.os.Parcel;
-import android.os.Parcelable;
+import android.util.Log;
 
-import com.codebutler.farebot.Utils;
 import com.codebutler.farebot.card.cepas.CEPASCard;
 import com.codebutler.farebot.card.classic.ClassicCard;
 import com.codebutler.farebot.card.desfire.DesfireCard;
 import com.codebutler.farebot.card.felica.FelicaCard;
 import com.codebutler.farebot.transit.TransitData;
 import com.codebutler.farebot.transit.TransitIdentity;
+import com.codebutler.farebot.util.Utils;
+import com.codebutler.farebot.xml.HexString;
+
 import org.apache.commons.lang3.ArrayUtils;
-import org.w3c.dom.Document;
-import org.w3c.dom.Element;
-import org.xml.sax.InputSource;
-
-import javax.xml.parsers.DocumentBuilder;
-import javax.xml.parsers.DocumentBuilderFactory;
-import javax.xml.parsers.ParserConfigurationException;
-import java.io.StringReader;
+import org.simpleframework.xml.Attribute;
+import org.simpleframework.xml.Serializer;
+
+import java.io.StringWriter;
 import java.util.Date;
 
-public abstract class Card implements Parcelable {
-    private byte[] mTagId;
-    private Date   mScannedAt;
+public abstract class Card {
+    @Attribute(name="type") private String mType;
+    @Attribute(name="id") private HexString mTagId;
+    @Attribute(name="scanned_at") private Date mScannedAt;
+
+    protected Card() { }
 
     protected Card(byte[] tagId, Date scannedAt) {
-        mTagId     = tagId;
+        mTagId = new HexString(tagId);
         mScannedAt = scannedAt;
     }
 
@@ -67,101 +67,40 @@ public abstract class Card implements Parcelable {
             throw new UnsupportedTagException(techs, Utils.getHexString(tag.getId()));
     }
 
-    public static Card fromXml (String xml) throws Exception {
-        DocumentBuilder builder = DocumentBuilderFactory.newInstance().newDocumentBuilder();
-        Document doc = builder.parse(new InputSource(new StringReader(xml)));
-
-        Element rootElement = doc.getDocumentElement();
-
-        CardType type      = CardType.class.getEnumConstants()[Integer.parseInt(rootElement.getAttribute("type"))];
-        byte[]   id        = Utils.hexStringToByteArray(rootElement.getAttribute("id"));
-        Date     scannedAt = rootElement.hasAttribute("scanned_at") ? new Date(Long.valueOf(rootElement.getAttribute("scanned_at"))) : new Date(0);
-        switch (type) {
-            case MifareDesfire:
-                return DesfireCard.fromXml(id, scannedAt, rootElement);
-            case CEPAS:
-                return CEPASCard.fromXML(id, scannedAt, rootElement);
-            case FeliCa:
-                return FelicaCard.fromXml(id, scannedAt, rootElement);
-            case MifareClassic:
-                return ClassicCard.fromXml(id, scannedAt, rootElement);
-            default:
-                throw new UnsupportedOperationException("Unsupported card type: " + type);
+    public static Card fromXml(Serializer serializer, String xml) {
+        try {
+            return serializer.read(Card.class, xml);
+        } catch (Exception ex) {
+            Log.e("Card", "Failed to deserialize", ex);
+            throw new RuntimeException(ex);
         }
     }
 
-    public abstract CardType getCardType();
-
-    public byte[] getTagId () {
-        return mTagId;
-    }
-
-    public Date getScannedAt () {
-        return mScannedAt;
-    }
-
-    public abstract TransitIdentity parseTransitIdentity();
-    public abstract TransitData parseTransitData ();
-
-    public Element toXML () throws Exception {
+    public String toXml(Serializer serializer) {
         try {
-            DocumentBuilder builder = DocumentBuilderFactory.newInstance().newDocumentBuilder();
-            Document doc = builder.newDocument();
-
-            Element element = doc.createElement("card");
-            element.setAttribute("type", String.valueOf(getCardType().toInteger()));
-            element.setAttribute("id", Utils.getHexString(mTagId, null));
-            element.setAttribute("scanned_at", Long.toString(mScannedAt.getTime()));
-            doc.appendChild(element);
-
-            return doc.getDocumentElement();
-        } catch (ParserConfigurationException e) {
-            throw new RuntimeException(e);
+            StringWriter writer = new StringWriter();
+            serializer.write(this, writer);
+            return writer.toString();
+        } catch (Exception ex) {
+            Log.e("Card", "Failed to serialize", ex);
+            throw new RuntimeException(ex);
         }
     }
 
-    public void writeToParcel (Parcel parcel, int flags) {
-        parcel.writeInt(mTagId.length);
-        parcel.writeByteArray(mTagId);
-        parcel.writeLong(mScannedAt.getTime());
-    }
-    
-    public final int describeContents () {
-        return 0;
-    }
-
-    public enum CardType {
-        MifareClassic(0),
-        MifareUltralight(1),
-        MifareDesfire(2),
-        CEPAS(3),
-        FeliCa(4);
-
-        private int mValue;
+    public abstract CardType getCardType();
 
-        CardType (int value) {
-            mValue = value;
-        }
+    public byte[] getTagId() {
+        return mTagId.getData();
+    }
 
-        public int toInteger () {
-            return mValue;
-        }
+    public String getType() {
+        return mType;
+    }
 
-        public String toString () {
-            switch (mValue) {
-                case 0:
-                    return "MIFARE Classic";
-                case 1:
-                    return "MIFARE Ultralight";
-                case 2:
-                    return "MIFARE DESFire";
-                case 3:
-                    return "CEPAS";
-                case 4:
-                    return "FeliCa";
-                default:
-                    return "Unknown";
-            }
-        }
+    public Date getScannedAt() {
+        return mScannedAt;
     }
+
+    public abstract TransitIdentity parseTransitIdentity();
+    public abstract TransitData parseTransitData();
 }
diff --git a/src/main/java/com/codebutler/farebot/card/CardType.java b/src/main/java/com/codebutler/farebot/card/CardType.java
new file mode 100644
index 0000000..81477d5
--- /dev/null
+++ b/src/main/java/com/codebutler/farebot/card/CardType.java
@@ -0,0 +1,40 @@
+package com.codebutler.farebot.card;
+
+public enum CardType {
+    MifareClassic(0),
+    MifareUltralight(1),
+    MifareDesfire(2),
+    CEPAS(3),
+    FeliCa(4);
+
+    public static CardType parseValue(String value) {
+        return CardType.class.getEnumConstants()[Integer.parseInt(value)];
+    }
+
+    private int mValue;
+
+    CardType(int value) {
+        mValue = value;
+    }
+
+    public int toInteger () {
+        return mValue;
+    }
+
+    public String toString () {
+        switch (mValue) {
+            case 0:
+                return "MIFARE Classic";
+            case 1:
+                return "MIFARE Ultralight";
+            case 2:
+                return "MIFARE DESFire";
+            case 3:
+                return "CEPAS";
+            case 4:
+                return "FeliCa";
+            default:
+                return "Unknown";
+        }
+    }
+}
diff --git a/src/main/java/com/codebutler/farebot/card/cepas/CEPASCard.java b/src/main/java/com/codebutler/farebot/card/cepas/CEPASCard.java
index ea5cfee..eb13cac 100644
--- a/src/main/java/com/codebutler/farebot/card/cepas/CEPASCard.java
+++ b/src/main/java/com/codebutler/farebot/card/cepas/CEPASCard.java
@@ -24,28 +24,31 @@ package com.codebutler.farebot.card.cepas;
 
 import android.nfc.Tag;
 import android.nfc.tech.IsoDep;
-import android.os.Parcel;
-import android.os.Parcelable;
+
 import com.codebutler.farebot.card.Card;
-import com.codebutler.farebot.transit.EZLinkTransitData;
+import com.codebutler.farebot.card.CardType;
 import com.codebutler.farebot.transit.TransitData;
 import com.codebutler.farebot.transit.TransitIdentity;
-import org.w3c.dom.Document;
-import org.w3c.dom.Element;
-import org.w3c.dom.NodeList;
+import com.codebutler.farebot.transit.ezlink.EZLinkTransitData;
+import com.codebutler.farebot.util.Utils;
+
+import org.simpleframework.xml.ElementList;
+import org.simpleframework.xml.Root;
 
 import java.util.Date;
+import java.util.List;
 
+@Root(name="card")
 public class CEPASCard extends Card {
-    private CEPASPurse[]   mPurses;
-    private CEPASHistory[] mHistories;
+    @ElementList(name="purses") private List<CEPASPurse> mPurses;
+    @ElementList(name="histories") private List<CEPASHistory> mHistories;
 
-    public static CEPASCard dumpTag (Tag tag) throws Exception {
+    public static CEPASCard dumpTag(Tag tag) throws Exception {
         IsoDep tech = IsoDep.get(tag);
 
         tech.connect();
 
-        CEPASPurse[]   cepasPurses    = new CEPASPurse[16];
+        CEPASPurse[] cepasPurses = new CEPASPurse[16];
         CEPASHistory[] cepasHistories = new CEPASHistory[16];
 
         try {
@@ -57,7 +60,8 @@ public class CEPASCard extends Card {
 
             for (int historyId = 0; historyId < cepasHistories.length; historyId++) {
                 if (cepasPurses[historyId].isValid()) {
-                    cepasHistories[historyId] = cepasTag.getHistory(historyId, Integer.parseInt(Byte.toString(cepasPurses[historyId].getLogfileRecordCount())));
+                    int recordCount = Integer.parseInt(Byte.toString(cepasPurses[historyId].getLogfileRecordCount()));
+                    cepasHistories[historyId] = cepasTag.getHistory(historyId, recordCount);
                 } else {
                     cepasHistories[historyId] = new CEPASHistory(historyId, (byte[]) null);
                 }
@@ -70,13 +74,15 @@ public class CEPASCard extends Card {
         return new CEPASCard(tag.getId(), new Date(), cepasPurses, cepasHistories);
     }
 
-    private CEPASCard (byte[] tagId, Date scannedAt, CEPASPurse[] purses, CEPASHistory[] histories) {
+    private CEPASCard(byte[] tagId, Date scannedAt, CEPASPurse[] purses, CEPASHistory[] histories) {
         super(tagId, scannedAt);
-        mPurses = purses;
-        mHistories = histories;
+        mPurses = Utils.arrayAsList(purses);
+        mHistories = Utils.arrayAsList(histories);
     }
 
-    @Override public CardType getCardType () {
+    private CEPASCard() { /* For XML Serializer */ }
+
+    @Override public CardType getCardType() {
         return CardType.CEPAS;
     }
 
@@ -92,81 +98,11 @@ public class CEPASCard extends Card {
         return null;
     }
 
-    public CEPASPurse getPurse (int purse) {
-        return mPurses[purse];
+    public CEPASPurse getPurse(int purse) {
+        return mPurses.get(purse);
     }
 
-    public CEPASHistory getHistory (int purse) {
-        return mHistories[purse];
-    }
-
-    public static final Parcelable.Creator<CEPASCard> CREATOR = new Parcelable.Creator<CEPASCard>() {
-        public CEPASCard createFromParcel(Parcel source) {
-            int tagIdLength = source.readInt();
-            byte[] tagId = new byte[tagIdLength];
-            source.readByteArray(tagId);
-
-            Date scannedAt = new Date(source.readLong());
-
-            CEPASPurse[] purses = new CEPASPurse[source.readInt()];
-            for(int i=0; i<purses.length; i++)
-                purses[i] = source.readParcelable(CEPASPurse.class.getClassLoader());
-
-            CEPASHistory[] histories = new CEPASHistory[source.readInt()];
-            for(int i=0; i<histories.length; i++)
-                histories[i] = source.readParcelable(CEPASHistory.class.getClassLoader());
-
-
-            return new CEPASCard(tagId, scannedAt, purses, histories);
-        }
-
-        public CEPASCard[] newArray (int size) {
-            return new CEPASCard[size];
-        }
-    };
-
-    public void writeToParcel (Parcel parcel, int flags) {
-        super.writeToParcel(parcel, flags);
-
-        parcel.writeInt(mPurses.length);
-        for (int i = 0; i < mPurses.length; i++)
-            parcel.writeParcelable(mPurses[i], flags);
-
-        parcel.writeInt(mHistories.length);
-        for (int i = 0; i < mHistories.length; i++)
-            parcel.writeParcelable(mHistories[i], flags);
-    }
-
-    public static CEPASCard fromXML (byte[] cardId, Date scannedAt, Element rootElement) {
-        NodeList purseElements = ((Element) rootElement.getElementsByTagName("purses").item(0)).getElementsByTagName("purse");
-        CEPASPurse[] purses = new CEPASPurse[purseElements.getLength()];
-        for(int i = 0; i < purseElements.getLength(); i++)
-            purses[i] = CEPASPurse.fromXML((Element)purseElements.item(i));
-
-        NodeList historyElements = ((Element) rootElement.getElementsByTagName("histories").item(0)).getElementsByTagName("history");
-        CEPASHistory[] histories = new CEPASHistory[historyElements.getLength()];
-        for(int i = 0; i < historyElements.getLength(); i++)
-            histories[i] = CEPASHistory.fromXML((Element)historyElements.item(i));
-
-        return new CEPASCard(cardId, scannedAt, purses, histories);
-    }
-
-    public Element toXML() throws Exception {
-        Element root = super.toXML();
-
-        Document doc = root.getOwnerDocument();
-
-        Element pursesElement    = doc.createElement("purses");
-        Element historiesElement = doc.createElement("histories");
-
-        for (CEPASPurse purse : mPurses)
-            pursesElement.appendChild(purse.toXML(doc));
-        root.appendChild(pursesElement);
-
-        for (CEPASHistory history : mHistories)
-            historiesElement.appendChild(history.toXML(doc));
-        root.appendChild(historiesElement);
-
-        return root;
+    public CEPASHistory getHistory(int purse) {
+        return mHistories.get(purse);
     }
 }
diff --git a/src/main/java/com/codebutler/farebot/card/cepas/CEPASHistory.java b/src/main/java/com/codebutler/farebot/card/cepas/CEPASHistory.java
index 14be311..baaab6b 100644
--- a/src/main/java/com/codebutler/farebot/card/cepas/CEPASHistory.java
+++ b/src/main/java/com/codebutler/farebot/card/cepas/CEPASHistory.java
@@ -22,19 +22,21 @@
 
 package com.codebutler.farebot.card.cepas;
 
-import android.os.Parcel;
-import android.os.Parcelable;
-import org.w3c.dom.Document;
-import org.w3c.dom.Element;
-import org.w3c.dom.NodeList;
+import com.codebutler.farebot.util.Utils;
 
-public class CEPASHistory implements Parcelable {
-    private static CEPASTransaction[] sEmptyTransaction = new CEPASTransaction[0];
+import org.simpleframework.xml.Attribute;
+import org.simpleframework.xml.ElementList;
+import org.simpleframework.xml.Root;
 
-    private int                 mId;
-    private CEPASTransaction[]  mTransactions;
-    private final boolean       mIsValid;
-    private final String        mErrorMessage;
+import java.util.ArrayList;
+import java.util.List;
+
+@Root(name="history")
+public class CEPASHistory {
+    @Attribute(name="id") private int mId;
+    @ElementList(name="transaction", inline=true, required=false) private List<CEPASTransaction> mTransactions;
+    @Attribute(name="valid") private boolean mIsValid;
+    @Attribute(name="error", required=false) private String mErrorMessage;
 
     public static CEPASHistory create (int purseId, byte[] purseData) {
         return new CEPASHistory(purseId, purseData);
@@ -48,19 +50,19 @@ public class CEPASHistory implements Parcelable {
             mErrorMessage = "";
             int recordSize = 16;
             int purseCount = purseData.length / recordSize;
-            mTransactions = new CEPASTransaction[purseCount];
-
+            CEPASTransaction[] transactions = new CEPASTransaction[purseCount];
             for (int i = 0; i < purseData.length; i += recordSize) {
                 byte[] tempData = new byte[recordSize];
                 for (int j = 0; j < tempData.length; j++)
                     tempData[j] = purseData[i+j];
-                mTransactions[i/tempData.length] = new CEPASTransaction(tempData);
+                transactions[i/tempData.length] = new CEPASTransaction(tempData);
             }
+            mTransactions = Utils.arrayAsList(transactions);
         }
         else {
             mIsValid      = false;
             mErrorMessage = "";
-            mTransactions = sEmptyTransaction;
+            mTransactions = new ArrayList<>();
         }
     }
 
@@ -71,17 +73,19 @@ public class CEPASHistory implements Parcelable {
     }
 
     public CEPASHistory (int purseId, CEPASTransaction[] transactions) {
-        mTransactions = transactions;
+        mTransactions = Utils.arrayAsList(transactions);
         mId           = purseId;
         mIsValid      = true;
         mErrorMessage = "";
     }
 
+    private CEPASHistory() { /* For XML Serializer */ }
+
     public int getId () {
         return mId;
     }
 
-    public CEPASTransaction[] getTransactions () {
+    public List<CEPASTransaction> getTransactions () {
         return mTransactions;
     }
 
@@ -92,68 +96,4 @@ public class CEPASHistory implements Parcelable {
     public String getErrorMessage () {
         return mErrorMessage;
     }
-
-    public static final Parcelable.Creator<CEPASHistory> CREATOR = new Parcelable.Creator<CEPASHistory>() {
-        public CEPASHistory createFromParcel(Parcel source) {
-            int purseId = source.readInt();
-
-            if(source.readInt() == 1) {
-                CEPASTransaction[] transactions = new CEPASTransaction[source.readInt()];
-                for(int i=0; i<transactions.length; i++)
-                    transactions[i] = source.readParcelable(CEPASTransaction.class.getClassLoader());
-                return new CEPASHistory(purseId, transactions);
-            }
-            else
-                return new CEPASHistory(purseId, source.readString());
-        }
-
-        public CEPASHistory[] newArray (int size) {
-            return new CEPASHistory[size];
-        }
-    };
-
-    public void writeToParcel (Parcel parcel, int flags) {
-        parcel.writeInt(mId);
-        if (mIsValid) {
-            parcel.writeInt(1);
-            parcel.writeInt(mTransactions.length);
-            for (int i = 0; i < mTransactions.length; i++)
-                parcel.writeParcelable(mTransactions[i], flags);
-        } else {
-            parcel.writeInt(0);
-            parcel.writeString(mErrorMessage);
-        }
-    }
-
-    public int describeContents () {
-        return 0;
-    }
-
-    public static CEPASHistory fromXML (Element element) {
-        int id = Integer.parseInt(element.getAttribute("id"));
-        if (element.getAttribute("valid").equals("false"))
-            return new CEPASHistory(id, element.getAttribute("error"));
-
-        NodeList transactionElements = element.getElementsByTagName("transaction");
-
-        CEPASTransaction[] transactions = new CEPASTransaction[transactionElements.getLength()];
-        for (int i = 0; i < transactionElements.getLength(); i++)
-            transactions[i] = CEPASTransaction.fromXML((Element)transactionElements.item(i));
-
-        return new CEPASHistory(id, transactions);
-    }
-
-    public Element toXML(Document doc) throws Exception {
-        Element history = doc.createElement("history");
-        history.setAttribute("id", Integer.toString(mId));
-        if (!mIsValid) {
-            history.setAttribute("valid", "false");
-            history.setAttribute("error", getErrorMessage());
-        } else {
-            history.setAttribute("valid", "true");
-            for(CEPASTransaction transaction : mTransactions)
-                history.appendChild(transaction.toXML(doc));
-        }
-        return history;
-    }
 }
\ No newline at end of file
diff --git a/src/main/java/com/codebutler/farebot/card/cepas/CEPASPurse.java b/src/main/java/com/codebutler/farebot/card/cepas/CEPASPurse.java
index f635e83..e50c7ec 100644
--- a/src/main/java/com/codebutler/farebot/card/cepas/CEPASPurse.java
+++ b/src/main/java/com/codebutler/farebot/card/cepas/CEPASPurse.java
@@ -22,33 +22,33 @@
 
 package com.codebutler.farebot.card.cepas;
 
-import android.os.Parcel;
-import android.os.Parcelable;
-import com.codebutler.farebot.Utils;
-import org.w3c.dom.Document;
-import org.w3c.dom.Element;
-
-public class CEPASPurse implements Parcelable {
-    private final int              mId;
-    private final byte             mCepasVersion;
-    private final byte             mPurseStatus;
-    private final int              mPurseBalance;
-    private final int              mAutoLoadAmount;
-    private final byte[]           mCAN;
-    private final byte[]           mCSN;
-    private final int              mPurseExpiryDate;
-    private final int              mPurseCreationDate;
-    private final int              mLastCreditTransactionTRP;
-    private final byte[]           mLastCreditTransactionHeader;
-    private final byte             mLogfileRecordCount;
-    private final int              mIssuerDataLength;
-    private final int              mLastTransactionTRP;
-    private final CEPASTransaction mLastTransactionRecord;
-    private final byte[]           mIssuerSpecificData;
-    private final byte             mLastTransactionDebitOptionsByte;
-
-    private final boolean          mIsValid;
-    private final String           mErrorMessage;
+import com.codebutler.farebot.xml.HexString;
+
+import org.simpleframework.xml.Attribute;
+import org.simpleframework.xml.Element;
+import org.simpleframework.xml.Root;
+
+@Root(name="purse")
+public class CEPASPurse {
+    @Attribute(name="auto-load-amount", required=false) private int mAutoLoadAmount;
+    @Attribute(name="can", required=false) private HexString mCAN;
+    @Attribute(name="cepas-version", required=false) private byte mCepasVersion;
+    @Attribute(name="csn", required=false) private HexString mCSN;
+    @Attribute(name="error", required=false) private String mErrorMessage;
+    @Attribute(name="id", required=false) private int mId;
+    @Attribute(name="issuer-data-length", required=false) private int mIssuerDataLength;
+    @Attribute(name="issuer-specific-data", required=false) private HexString mIssuerSpecificData;
+    @Attribute(name="last-credit-transaction-header", required=false) private HexString mLastCreditTransactionHeader;
+    @Attribute(name="last-credit-transaction-trp", required=false) private int mLastCreditTransactionTRP;
+    @Attribute(name="last-transaction-debit-options", required=false) private byte mLastTransactionDebitOptionsByte;
+    @Attribute(name="last-transaction-trp", required=false) private int mLastTransactionTRP;
+    @Attribute(name="logfile-record-count", required=false) private byte mLogfileRecordCount;
+    @Attribute(name="purse-balance", required=false) private int mPurseBalance;
+    @Attribute(name="purse-expiry-date", required=false) private int mPurseExpiryDate;
+    @Attribute(name="purse-status", required=false) private byte mPurseStatus;
+    @Attribute(name="purse-creation-date", required=false) private int mPurseCreationDate;
+    @Attribute(name="valid", required=false) private boolean mIsValid;
+    @Element(name="transaction", required=false) private CEPASTransaction mLastTransactionRecord;
 
     public static CEPASPurse create (int purseId, byte[] purseData) {
         return new CEPASPurse(purseId, purseData);
@@ -78,17 +78,17 @@ public class CEPASPurse implements Parcelable {
         mPurseStatus = purseStatus;
         mPurseBalance = purseBalance;
         mAutoLoadAmount = autoLoadAmount;
-        mCAN = CAN;
-        mCSN = CSN;
+        mCAN = new HexString(CAN);
+        mCSN = new HexString(CSN);
         mPurseExpiryDate = purseExpiryDate;
         mPurseCreationDate = purseCreationDate;
         mLastCreditTransactionTRP = lastCreditTransactionTRP;
-        mLastCreditTransactionHeader = lastCreditTransactionHeader;
+        mLastCreditTransactionHeader = new HexString(lastCreditTransactionHeader);
         mLogfileRecordCount = logfileRecordCount;
         mIssuerDataLength = issuerDataLength;
         mLastTransactionTRP = lastTransactionTRP;
         mLastTransactionRecord = lastTransactionRecord;
-        mIssuerSpecificData = issuerSpecificData;
+        mIssuerSpecificData = new HexString(issuerSpecificData);
         mLastTransactionDebitOptionsByte = lastTransactionDebitOptionsByte;
         mIsValid = true;
         mErrorMessage = "";
@@ -143,13 +143,19 @@ public class CEPASPurse implements Parcelable {
             tmp |= 0xff000000;
         mAutoLoadAmount = tmp;
 
-        mCAN = new byte[8];
-        for (int i=0; i<mCAN.length; i++)
-            mCAN[i] = purseData[8+i];
+        byte[] can = new byte[8];
+        for (int i=0; i<can.length; i++) {
+            can[i] = purseData[8 + i];
+        }
+
+        mCAN = new HexString(can);
+
+        byte[] csn = new byte[8];
+        for (int i=0; i<csn.length; i++) {
+            csn[i] = purseData[16 + i];
+        }
 
-        mCSN = new byte[8];
-        for (int i=0; i<mCSN.length; i++)
-            mCSN[i] = purseData[16+i];
+        mCSN = new HexString(csn);
 
         /* Epoch begins January 1, 1995 */
         mPurseExpiryDate   = 788947200 + (86400 * ((0xff00 & (purseData[24] << 8)) | (0x00ff & (purseData[25] << 0))));
@@ -160,10 +166,13 @@ public class CEPASPurse implements Parcelable {
                                    | (0x0000ff00 & (purseData[30] << 8))
                                    | (0x000000ff & (purseData[31] << 0)));
 
-        mLastCreditTransactionHeader = new byte[8];
+        byte[] lastCreditTransactionHeader = new byte[8];
+
+        for (int i = 0; i < 8; i++) {
+            lastCreditTransactionHeader[i] = purseData[32 + i];
+        }
 
-        for (int i = 0; i < 8; i++)
-            mLastCreditTransactionHeader[i] = purseData[32+i];
+        mLastCreditTransactionHeader = new HexString(lastCreditTransactionHeader);
 
         mLogfileRecordCount = purseData[40];
 
@@ -179,13 +188,17 @@ public class CEPASPurse implements Parcelable {
             mLastTransactionRecord = new CEPASTransaction(tmpTransaction);
         }
 
-        mIssuerSpecificData = new byte[mIssuerDataLength];
-        for (int i = 0; i < mIssuerSpecificData.length; i++)
-            mIssuerSpecificData[i] = purseData[62+i];
+        byte[] issuerSpecificData = new byte[mIssuerDataLength];
+        for (int i = 0; i < issuerSpecificData.length; i++) {
+            issuerSpecificData[i] = purseData[62+i];
+        }
+        mIssuerSpecificData = new HexString(issuerSpecificData);
 
         mLastTransactionDebitOptionsByte = purseData[62+mIssuerDataLength];
     }
 
+    private CEPASPurse() { /* For XML Serializer */ }
+
     public int getId () {
         return mId;
     }
@@ -207,11 +220,11 @@ public class CEPASPurse implements Parcelable {
     }
 
     public byte[] getCAN () {
-        return mCAN;
+        return mCAN.getData();
     }
 
     public byte[] getCSN () {
-        return mCSN;
+        return mCSN.getData();
     }
 
     public int getPurseExpiryDate () {
@@ -227,7 +240,7 @@ public class CEPASPurse implements Parcelable {
     }
 
     public byte[] getLastCreditTransactionHeader () {
-        return mLastCreditTransactionHeader;
+        return mLastCreditTransactionHeader.getData();
     }
 
     public byte getLogfileRecordCount () {
@@ -247,7 +260,7 @@ public class CEPASPurse implements Parcelable {
     }
 
     public byte[] getIssuerSpecificData () {
-        return mIssuerSpecificData;
+        return mIssuerSpecificData.getData();
     }
 
     public byte getLastTransactionDebitOptionsByte () {
@@ -261,176 +274,4 @@ public class CEPASPurse implements Parcelable {
     public String getErrorMessage () {
         return mErrorMessage;
     }
-
-    public static final Parcelable.Creator<CEPASPurse> CREATOR = new Parcelable.Creator<CEPASPurse>() {
-        public CEPASPurse createFromParcel(Parcel source) {
-            int              purseId = source.readInt();
-            byte             cepasVersion;
-            byte             purseStatus;
-            int              purseBalance;
-            int              autoLoadAmount;
-            byte[]           CAN;
-            byte[]           CSN;
-            int              purseExpiryDate;
-            int              purseCreationDate;
-            int              lastCreditTransactionTRP;
-            byte[]           lastCreditTransactionHeader;
-            byte             logfileRecordCount;
-            int              issuerDataLength;
-            int              lastTransactionTRP;
-            CEPASTransaction lastTransactionRecord;
-            byte[]           issuerSpecificData;
-            byte             lastTransactionDebitOptionsByte;
-
-            if (source.readInt() == 0) {
-                return new CEPASPurse(purseId, source.readString());
-            }
-
-            cepasVersion = source.readByte();
-            purseStatus = source.readByte();
-            purseBalance = source.readInt();
-            autoLoadAmount = source.readInt();
-            CAN = new byte[source.readInt()];
-            source.readByteArray(CAN);
-            CSN = new byte[source.readInt()];
-            source.readByteArray(CSN);
-            purseExpiryDate = source.readInt();
-            purseCreationDate = source.readInt();
-            lastCreditTransactionTRP = source.readInt();
-            lastCreditTransactionHeader = new byte[source.readInt()];
-            source.readByteArray(lastCreditTransactionHeader);
-            logfileRecordCount = source.readByte();
-            issuerDataLength = source.readInt();
-            lastTransactionTRP = source.readInt();
-            lastTransactionRecord = source.readParcelable(CEPASTransaction.class.getClassLoader());
-            issuerSpecificData = new byte[source.readInt()];
-            source.readByteArray(issuerSpecificData);
-            lastTransactionDebitOptionsByte = source.readByte();
-            return new CEPASPurse(purseId, cepasVersion, purseStatus, purseBalance,
-                autoLoadAmount, CAN, CSN, purseExpiryDate,
-                purseCreationDate,
-                lastCreditTransactionTRP, lastCreditTransactionHeader,
-                logfileRecordCount, issuerDataLength,
-                lastTransactionTRP, lastTransactionRecord,
-                issuerSpecificData, lastTransactionDebitOptionsByte);
-        }
-
-        public CEPASPurse[] newArray (int size) {
-            return new CEPASPurse[size];
-        }
-    };
-
-    public void writeToParcel (Parcel parcel, int flags) {
-        parcel.writeInt(mId);
-        if (!mIsValid) {
-            parcel.writeInt(0);
-            parcel.writeString(mErrorMessage);
-        } else {
-            parcel.writeInt(1);
-            parcel.writeByte(mCepasVersion);
-            parcel.writeByte(mPurseStatus);
-            parcel.writeInt(mPurseBalance);
-            parcel.writeInt(mAutoLoadAmount);
-            parcel.writeInt(mCAN.length);
-            parcel.writeByteArray(mCAN);
-            parcel.writeInt(mCSN.length);
-            parcel.writeByteArray(mCSN);
-            parcel.writeInt(mPurseExpiryDate);
-            parcel.writeInt(mPurseCreationDate);
-            parcel.writeInt(mLastCreditTransactionTRP);
-            parcel.writeInt(mLastCreditTransactionHeader.length);
-            parcel.writeByteArray(mLastCreditTransactionHeader);
-            parcel.writeByte(mLogfileRecordCount);
-            parcel.writeInt(mIssuerDataLength);
-            parcel.writeInt(mLastTransactionTRP);
-            parcel.writeParcelable(mLastTransactionRecord, flags);
-            parcel.writeInt(mIssuerSpecificData.length);
-            parcel.writeByteArray(mIssuerSpecificData);
-            parcel.writeByte(mLastTransactionDebitOptionsByte);
-        }
-    }
-
-    public int describeContents () {
-        return 0;
-    }
-
-    public static CEPASPurse fromXML (Element element) {
-        int              id;
-        byte             cepasVersion;
-        byte             purseStatus;
-        int              purseBalance;
-        int              autoLoadAmount;
-        byte[]           CAN;
-        byte[]           CSN;
-        int              purseExpiryDate;
-        int              purseCreationDate;
-        int              lastCreditTransactionTRP;
-        byte[]           lastCreditTransactionHeader;
-        byte             logfileRecordCount;
-        int              issuerDataLength;
-        int              lastTransactionTRP;
-        CEPASTransaction lastTransactionRecord;
-        byte[]           issuerSpecificData;
-        byte             lastTransactionDebitOptionsByte;
-
-        id = Integer.parseInt(element.getAttribute("id"));
-        if (element.getAttribute("valid").equals("false"))
-            return new CEPASPurse(id, element.getAttribute("error"));
-
-        cepasVersion = Byte.parseByte(element.getAttribute("cepas-version"));
-        purseStatus = Byte.parseByte(element.getAttribute("purse-status"));
-        purseBalance = Integer.parseInt(element.getAttribute("purse-balance"));
-        autoLoadAmount = Integer.parseInt(element.getAttribute("auto-load-amount"));
-        CAN = Utils.hexStringToByteArray(element.getAttribute("can"));
-        CSN = Utils.hexStringToByteArray(element.getAttribute("csn"));
-        purseExpiryDate = Integer.parseInt(element.getAttribute("purse-expiry-date"));
-        purseCreationDate = Integer.parseInt(element.getAttribute("purse-creation-date"));
-        lastCreditTransactionTRP = Integer.parseInt(element.getAttribute("last-credit-transaction-trp"));
-        lastCreditTransactionHeader = Utils.hexStringToByteArray(element.getAttribute("last-credit-transaction-header"));
-        logfileRecordCount = Byte.parseByte(element.getAttribute("logfile-record-count"));
-        issuerDataLength = Integer.parseInt(element.getAttribute("issuer-data-length"));
-        lastTransactionTRP= Integer.parseInt(element.getAttribute("last-transaction-trp"));
-        issuerSpecificData = Utils.hexStringToByteArray(element.getAttribute("issuer-specific-data"));
-        lastTransactionDebitOptionsByte = Byte.parseByte(element.getAttribute("last-transaction-debit-options"));
-
-        lastTransactionRecord = CEPASTransaction.fromXML((Element)element.getElementsByTagName("transaction").item(0));
-
-        return new CEPASPurse(id, cepasVersion, purseStatus, purseBalance,
-                              autoLoadAmount, CAN, CSN, purseExpiryDate,
-                              purseCreationDate,
-                              lastCreditTransactionTRP, lastCreditTransactionHeader,
-                              logfileRecordCount, issuerDataLength,
-                              lastTransactionTRP, lastTransactionRecord,
-                              issuerSpecificData, lastTransactionDebitOptionsByte);
-    }
-
-    public Element toXML (Document doc) throws Exception {
-        Element purse = doc.createElement("purse");
-        if (!mIsValid) {
-            purse.setAttribute("id", Integer.toString(mId));
-            purse.setAttribute("valid", "false");
-            purse.setAttribute("error", getErrorMessage());
-        } else {
-            purse.setAttribute("valid", "true");
-            purse.setAttribute("id", Integer.toString(mId));
-            purse.setAttribute("cepas-version", Byte.toString(mCepasVersion));
-            purse.setAttribute("purse-status", Byte.toString(mPurseStatus));
-            purse.setAttribute("purse-balance", Integer.toString(mPurseBalance));
-            purse.setAttribute("auto-load-amount", Integer.toString(mAutoLoadAmount));
-            purse.setAttribute("can", Utils.getHexString(mCAN));
-            purse.setAttribute("csn", Utils.getHexString(mCSN));
-            purse.setAttribute("purse-creation-date", Integer.toString(mPurseCreationDate));
-            purse.setAttribute("purse-expiry-date", Integer.toString(mPurseExpiryDate));
-            purse.setAttribute("last-credit-transaction-trp", Integer.toString(mLastCreditTransactionTRP));
-            purse.setAttribute("last-credit-transaction-header", Utils.getHexString(mLastCreditTransactionHeader));
-            purse.setAttribute("logfile-record-count", Byte.toString(mLogfileRecordCount));
-            purse.setAttribute("issuer-data-length", Integer.toString(mIssuerDataLength));
-            purse.setAttribute("last-transaction-trp", Integer.toString(mLastTransactionTRP));
-            purse.setAttribute("issuer-specific-data", Utils.getHexString(mIssuerSpecificData));
-            purse.setAttribute("last-transaction-debit-options", Byte.toString(mLastTransactionDebitOptionsByte));
-            purse.appendChild(mLastTransactionRecord.toXML(doc));
-        }
-
-        return purse;
-    }    
 }
\ No newline at end of file
diff --git a/src/main/java/com/codebutler/farebot/card/cepas/CEPASTransaction.java b/src/main/java/com/codebutler/farebot/card/cepas/CEPASTransaction.java
index 64b6607..7faa756 100644
--- a/src/main/java/com/codebutler/farebot/card/cepas/CEPASTransaction.java
+++ b/src/main/java/com/codebutler/farebot/card/cepas/CEPASTransaction.java
@@ -21,17 +21,18 @@
  */
 package com.codebutler.farebot.card.cepas;
 
-import org.w3c.dom.Document;
-import org.w3c.dom.Element;
-
 import android.os.Parcel;
 import android.os.Parcelable;
 
+import org.simpleframework.xml.Attribute;
+import org.simpleframework.xml.Root;
+
+@Root(name="transaction")
 public class CEPASTransaction implements Parcelable {
-    private final byte   mType;
-    private final int    mAmount;
-    private final int    mDate;
-    private final String mUserData;
+    @Attribute(name = "type") private byte mType;
+    @Attribute(name = "amount") private int mAmount;
+    @Attribute(name = "date") private int mDate;
+    @Attribute(name = "user-data") private String mUserData;
 
     public enum TransactionType {
         MRT,
@@ -44,7 +45,7 @@ public class CEPASTransaction implements Parcelable {
         UNKNOWN,
     }
 
-    public CEPASTransaction (byte[] rawData) {
+    public CEPASTransaction(byte[] rawData) {
         int tmp;
 
         mType = rawData[0];
@@ -57,25 +58,27 @@ public class CEPASTransaction implements Parcelable {
 
         /* Date is expressed "in seconds", but the epoch is January 1 1995, SGT */
         mDate = ((0xff000000 & (rawData[4] << 24))
-               | (0x00ff0000 & (rawData[5] << 16))
-               | (0x0000ff00 & (rawData[6] << 8))
-               | (0x000000ff & (rawData[7] << 0)))
-               + 788947200 - (16*3600);
+                | (0x00ff0000 & (rawData[5] << 16))
+                | (0x0000ff00 & (rawData[6] << 8))
+                | (0x000000ff & (rawData[7] << 0)))
+                + 788947200 - (16 * 3600);
 
         byte[] userData = new byte[9];
         for (int i = 0; i < 8; i++)
-            userData[i] = rawData[i+8];
+            userData[i] = rawData[i + 8];
         userData[8] = '\0';
         mUserData = new String(userData);
     }
 
-    public CEPASTransaction (byte type, int amount, int date, String userData) {
+    public CEPASTransaction(byte type, int amount, int date, String userData) {
         mType = type;
         mAmount = amount;
         mDate = date;
         mUserData = userData;
     }
 
+    private CEPASTransaction() { /* For XML Serializer */ }
+
     public TransactionType getType() {
         if (mType == 48)
             return TransactionType.MRT;
@@ -94,15 +97,15 @@ public class CEPASTransaction implements Parcelable {
         return TransactionType.UNKNOWN;
     }
 
-    public int getAmount () {
+    public int getAmount() {
         return mAmount;
     }
 
-    public int getTimestamp () {
+    public int getTimestamp() {
         return mDate;
     }
 
-    public String getUserData () {
+    public String getUserData() {
         return mUserData;
     }
 
@@ -114,7 +117,6 @@ public class CEPASTransaction implements Parcelable {
             String userData = source.readString();
             return new CEPASTransaction(type, amount, date, userData);
         }
-
         public CEPASTransaction[] newArray(int size) {
             return new CEPASTransaction[size];
         }
@@ -126,27 +128,7 @@ public class CEPASTransaction implements Parcelable {
         parcel.writeInt(mDate);
         parcel.writeString(mUserData);
     }
-
     public int describeContents () {
         return 0;
     }
-
-    public static CEPASTransaction fromXML (Element element) {
-        return new CEPASTransaction(
-            Byte.parseByte(element.getAttribute("type")),
-            Integer.parseInt(element.getAttribute("amount")),
-            Integer.parseInt(element.getAttribute("date")),
-            element.getAttribute("user-data")
-        );
-    }
-
-    public Element toXML (Document doc) throws Exception {
-        Element transaction = doc.createElement("transaction");
-        transaction.setAttribute("type", Byte.toString(mType));
-        transaction.setAttribute("amount", Integer.toString(mAmount));
-        transaction.setAttribute("date", Integer.toString(mDate));
-        transaction.setAttribute("user-data", mUserData);
-
-        return transaction;
-    }
 }
\ No newline at end of file
diff --git a/src/main/java/com/codebutler/farebot/card/classic/ClassicBlock.java b/src/main/java/com/codebutler/farebot/card/classic/ClassicBlock.java
index 2b251c1..4649973 100644
--- a/src/main/java/com/codebutler/farebot/card/classic/ClassicBlock.java
+++ b/src/main/java/com/codebutler/farebot/card/classic/ClassicBlock.java
@@ -23,19 +23,22 @@
 
 package com.codebutler.farebot.card.classic;
 
-import android.util.Base64;
-import org.w3c.dom.Document;
-import org.w3c.dom.Element;
+import com.codebutler.farebot.xml.Base64String;
 
+import org.simpleframework.xml.Attribute;
+import org.simpleframework.xml.Element;
+import org.simpleframework.xml.Root;
+
+@Root(name="block")
 public class ClassicBlock {
     public static final String TYPE_DATA         = "data";
     public static final String TYPE_VALUE        = "value";
     public static final String TYPE_TRAILER      = "trailer";
     public static final String TYPE_MANUFACTURER = "manufacturer";
 
-    private final int    mIndex;
-    private final String mType;
-    private final byte[] mData;
+    @Attribute(name="index") private int mIndex;
+    @Attribute(name="type") private String mType;
+    @Element(name="data") private Base64String mData;
 
     public static ClassicBlock create(String type, int index, byte[] data) {
         if (type.equals(TYPE_DATA) || type.equals(TYPE_VALUE)) {
@@ -44,10 +47,12 @@ public class ClassicBlock {
         return null;
     }
 
+    public ClassicBlock() { }
+
     public ClassicBlock(int index, String type, byte[] data) {
         mIndex = index;
-        mType  = type;
-        mData  = data;
+        mType = type;
+        mData = new Base64String(data);
     }
 
     public int getIndex() {
@@ -59,18 +64,6 @@ public class ClassicBlock {
     }
 
     public byte[] getData() {
-        return mData;
-    }
-
-    public Element toXML(Document doc) {
-        Element blockElement = doc.createElement("block");
-        blockElement.setAttribute("index", String.valueOf(getIndex()));
-        blockElement.setAttribute("type", getType());
-
-        Element dataElement = doc.createElement("data");
-        dataElement.setTextContent(Base64.encodeToString(getData(), Base64.DEFAULT));
-        blockElement.appendChild(dataElement);
-
-        return blockElement;
+        return mData.getData();
     }
 }
diff --git a/src/main/java/com/codebutler/farebot/card/classic/ClassicCard.java b/src/main/java/com/codebutler/farebot/card/classic/ClassicCard.java
index 0ff66b7..ea87507 100644
--- a/src/main/java/com/codebutler/farebot/card/classic/ClassicCard.java
+++ b/src/main/java/com/codebutler/farebot/card/classic/ClassicCard.java
@@ -25,38 +25,42 @@ package com.codebutler.farebot.card.classic;
 
 import android.nfc.Tag;
 import android.nfc.tech.MifareClassic;
-import android.os.Parcel;
+
+import com.codebutler.farebot.card.Card;
 import com.codebutler.farebot.card.CardHasManufacturingInfo;
 import com.codebutler.farebot.card.CardRawDataFragmentClass;
-import com.codebutler.farebot.Utils;
-import com.codebutler.farebot.card.Card;
+import com.codebutler.farebot.card.CardType;
 import com.codebutler.farebot.fragment.ClassicCardRawDataFragment;
 import com.codebutler.farebot.key.CardKeys;
 import com.codebutler.farebot.key.ClassicCardKeys;
 import com.codebutler.farebot.key.ClassicSectorKey;
-import com.codebutler.farebot.transit.BilheteUnicoSPTransitData;
-import com.codebutler.farebot.transit.OVChipTransitData;
 import com.codebutler.farebot.transit.TransitData;
 import com.codebutler.farebot.transit.TransitIdentity;
-import org.w3c.dom.Document;
-import org.w3c.dom.Element;
-import org.w3c.dom.NodeList;
+import com.codebutler.farebot.transit.bilhete_unico.BilheteUnicoSPTransitData;
+import com.codebutler.farebot.transit.ovc.OVChipTransitData;
+import com.codebutler.farebot.util.Utils;
+
+import org.simpleframework.xml.ElementList;
+import org.simpleframework.xml.Root;
 
 import java.io.IOException;
 import java.util.ArrayList;
 import java.util.Date;
 import java.util.List;
 
+@Root(name="card")
 @CardRawDataFragmentClass(ClassicCardRawDataFragment.class)
 @CardHasManufacturingInfo(false)
 public class ClassicCard extends Card {
     public static final byte[] PREAMBLE_KEY = { (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00 };
 
-    private ClassicSector[] mSectors;
+    @ElementList(name="sectors") private List<ClassicSector> mSectors;
+
+    private ClassicCard() { /* For XML Serializer */ }
 
     protected ClassicCard(byte[] tagId, Date scannedAt, ClassicSector[] sectors) {
         super(tagId, scannedAt);
-        mSectors = sectors;
+        mSectors = Utils.arrayAsList(sectors);
     }
 
     public static ClassicCard dumpTag(byte[] tagId, Tag tag) throws Exception {
@@ -118,57 +122,21 @@ public class ClassicCard extends Card {
         }
     }
 
-    public static Card fromXml(byte[] tagId, Date scannedAt, Element rootElement) {
-        Element sectorsElement = (Element) rootElement.getElementsByTagName("sectors").item(0);
-        NodeList sectorElements = sectorsElement.getElementsByTagName("sector");
-
-        ClassicSector[] sectors = new ClassicSector[sectorElements.getLength()];
-        for (int i = 0; i < sectorElements.getLength(); i++) {
-            Element sectorElement = (Element) sectorElements.item(i);
-            sectors[i] = ClassicSector.fromXml(sectorElement);
-        }
-
-        return new ClassicCard(tagId, new Date(), sectors);
-    }
-
-    public static final Creator<ClassicCard> CREATOR = new Creator<ClassicCard>() {
-        @Override public ClassicCard createFromParcel(Parcel source) {
-            try {
-                return (ClassicCard) ClassicCard.fromXml(source.readString());
-            } catch (Exception e) {
-                throw new RuntimeException(e);
-            }
-        }
-
-        @Override public ClassicCard[] newArray(int size) {
-            return new ClassicCard[size];
-        }
-    };
-
-    public Element toXML() throws Exception {
-        Element root = super.toXML();
-        Document doc = root.getOwnerDocument();
-
-        Element sectorsElement = doc.createElement("sectors");
-        for (ClassicSector sector : mSectors) {
-            sectorsElement.appendChild(sector.toXML(doc));
-        }
-        root.appendChild(sectorsElement);
-
-        return root;
-    }
-
     @Override public TransitIdentity parseTransitIdentity() {
-        if (OVChipTransitData.check(this))
+        if (OVChipTransitData.check(this)) {
             return OVChipTransitData.parseTransitIdentity(this);
+        } else if (BilheteUnicoSPTransitData.check(this)) {
+            return BilheteUnicoSPTransitData.parseTransitIdentity(this);
+        }
         return null;
     }
 
     @Override public TransitData parseTransitData() {
-        if (OVChipTransitData.check(this))
+        if (OVChipTransitData.check(this)) {
             return new OVChipTransitData(this);
-        else if (BilheteUnicoSPTransitData.check(this))
+        } else if (BilheteUnicoSPTransitData.check(this)) {
             return new BilheteUnicoSPTransitData(this);
+        }
         return null;
     }
 
@@ -176,19 +144,11 @@ public class ClassicCard extends Card {
         return CardType.MifareClassic;
     }
 
-    public ClassicSector[] getSectors() {
+    public List<ClassicSector> getSectors() {
         return mSectors;
     }
 
     public ClassicSector getSector(int index) {
-        return mSectors[index];
-    }
-
-    public void writeToParcel(Parcel parcel, int flags) {
-        try {
-            parcel.writeString(Utils.xmlNodeToString(toXML().getOwnerDocument()));
-        } catch (Exception e) {
-            throw new RuntimeException(e);
-        }
+        return mSectors.get(index);
     }
 }
\ No newline at end of file
diff --git a/src/main/java/com/codebutler/farebot/card/classic/ClassicSector.java b/src/main/java/com/codebutler/farebot/card/classic/ClassicSector.java
index 004fb17..c41fbd0 100644
--- a/src/main/java/com/codebutler/farebot/card/classic/ClassicSector.java
+++ b/src/main/java/com/codebutler/farebot/card/classic/ClassicSector.java
@@ -23,66 +23,36 @@
 
 package com.codebutler.farebot.card.classic;
 
-import android.util.Base64;
-import org.w3c.dom.Document;
-import org.w3c.dom.Element;
-import org.w3c.dom.Node;
-import org.w3c.dom.NodeList;
+import com.codebutler.farebot.util.Utils;
 
+import org.simpleframework.xml.Attribute;
+import org.simpleframework.xml.ElementList;
+import org.simpleframework.xml.Root;
+
+import java.util.List;
+
+@Root(name="sector")
 public class ClassicSector {
-    private int mIndex;
-    private ClassicBlock[] mBlocks;
+    @Attribute(name="index") private int mIndex;
+    @ElementList(name="blocks") private List<ClassicBlock> mBlocks;
 
-    public static ClassicSector fromXml(Element sectorElement) {
-        int sectorIndex = Integer.parseInt(sectorElement.getAttribute("index"));
-        if (sectorElement.hasAttribute("unauthorized") && sectorElement.getAttribute("unauthorized").equals("true")) {
-            return new UnauthorizedClassicSector(sectorIndex);
-        } else if (sectorElement.hasAttribute("invalid") && sectorElement.getAttribute("invalid").equals("true")) {
-            return new InvalidClassicSector(sectorIndex, sectorElement.getAttribute("error"));
-        } else {
-            Element blocksElement = (Element) sectorElement.getElementsByTagName("blocks").item(0);
-            NodeList blockElements = blocksElement.getElementsByTagName("block");
-            ClassicBlock[] blocks = new ClassicBlock[blockElements.getLength()];
-            for (int j = 0; j < blockElements.getLength(); j++) {
-                Element blockElement = (Element) blockElements.item(j);
-                String type  = blockElement.getAttribute("type");
-                int blockIndex = Integer.parseInt(blockElement.getAttribute("index"));
-                Node dataElement = blockElement.getElementsByTagName("data").item(0);
-                byte[] data = Base64.decode(dataElement.getTextContent().trim(), Base64.DEFAULT);
-                blocks[j] = ClassicBlock.create(type, blockIndex, data);
-            }
-            return new ClassicSector(sectorIndex, blocks);
-        }
-    }
+    protected ClassicSector() { }
 
     public ClassicSector(int index, ClassicBlock[] blocks) {
         mIndex  = index;
-        mBlocks = blocks;
+        mBlocks = Utils.arrayAsList(blocks);
     }
 
     public int getIndex() {
         return mIndex;
     }
 
-    public ClassicBlock[] getBlocks() {
+    public List<ClassicBlock> getBlocks() {
         return mBlocks;
     }
 
     public ClassicBlock getBlock(int index) {
-        return mBlocks[index];
-    }
-
-    public Element toXML(Document doc) {
-        Element sectorElement = doc.createElement("sector");
-        sectorElement.setAttribute("index", String.valueOf(getIndex()));
-
-        Element blocksElement = doc.createElement("blocks");
-        for (ClassicBlock block : getBlocks()) {
-            blocksElement.appendChild(block.toXML(doc));
-        }
-        sectorElement.appendChild(blocksElement);
-
-        return sectorElement;
+        return mBlocks.get(index);
     }
 
     public byte[] readBlocks(int startBlock, int blockCount) {
diff --git a/src/main/java/com/codebutler/farebot/card/classic/InvalidClassicSector.java b/src/main/java/com/codebutler/farebot/card/classic/InvalidClassicSector.java
index 3d88d9e..3053c00 100644
--- a/src/main/java/com/codebutler/farebot/card/classic/InvalidClassicSector.java
+++ b/src/main/java/com/codebutler/farebot/card/classic/InvalidClassicSector.java
@@ -22,25 +22,19 @@
 
 package com.codebutler.farebot.card.classic;
 
-import org.w3c.dom.Document;
-import org.w3c.dom.Element;
+import org.simpleframework.xml.Attribute;
+import org.simpleframework.xml.Root;
 
+@Root(name="sector")
 public class InvalidClassicSector extends ClassicSector {
-    private String mError;
+    @Attribute(name="error") private String mError;
+    @Attribute(name="invalid") public static final boolean mInvalid = true;
 
     public InvalidClassicSector(int index, String error) {
         super(index, null);
         mError = error;
     }
 
-    public Element toXML(Document doc) {
-        Element sectorElement = doc.createElement("sector");
-        sectorElement.setAttribute("index", String.valueOf(getIndex()));
-        sectorElement.setAttribute("invalid", "true");
-        sectorElement.setAttribute("error", mError);
-        return sectorElement;
-    }
-
     public String getError() {
         return mError;
     }
@@ -49,7 +43,7 @@ public class InvalidClassicSector extends ClassicSector {
         throw new IllegalStateException(mError);
     }
 
-    @Override public ClassicBlock[] getBlocks() {
+    @Override public java.util.List<ClassicBlock> getBlocks() {
         throw new IllegalStateException(mError);
     }
 
diff --git a/src/main/java/com/codebutler/farebot/card/classic/UnauthorizedClassicSector.java b/src/main/java/com/codebutler/farebot/card/classic/UnauthorizedClassicSector.java
index 53cda33..50c737e 100644
--- a/src/main/java/com/codebutler/farebot/card/classic/UnauthorizedClassicSector.java
+++ b/src/main/java/com/codebutler/farebot/card/classic/UnauthorizedClassicSector.java
@@ -21,26 +21,25 @@
 package com.codebutler.farebot.card.classic;
 
 import com.codebutler.farebot.card.UnauthorizedException;
-import org.w3c.dom.Document;
-import org.w3c.dom.Element;
 
+import org.simpleframework.xml.Attribute;
+import org.simpleframework.xml.Root;
+
+@Root(name="sector")
 public class UnauthorizedClassicSector extends ClassicSector {
+    @Attribute(name="unauthorized") public static final boolean mUnauthorized = true;
+
+    private UnauthorizedClassicSector() { /** For XML serializer **/ }
+
     public UnauthorizedClassicSector(int sectorIndex) {
         super(sectorIndex, null);
     }
 
-    public Element toXML(Document doc) {
-        Element sectorElement = doc.createElement("sector");
-        sectorElement.setAttribute("index", String.valueOf(getIndex()));
-        sectorElement.setAttribute("unauthorized", "true");
-        return sectorElement;
-    }
-
     @Override public byte[] readBlocks(int startBlock, int blockCount) {
         throw new UnauthorizedException();
     }
 
-    @Override public ClassicBlock[] getBlocks() {
+    @Override public java.util.List<ClassicBlock> getBlocks() {
         throw new UnauthorizedException();
     }
 
diff --git a/src/main/java/com/codebutler/farebot/card/desfire/DesfireApplication.java b/src/main/java/com/codebutler/farebot/card/desfire/DesfireApplication.java
index ace89c5..9484d1d 100644
--- a/src/main/java/com/codebutler/farebot/card/desfire/DesfireApplication.java
+++ b/src/main/java/com/codebutler/farebot/card/desfire/DesfireApplication.java
@@ -22,58 +22,41 @@
 
 package com.codebutler.farebot.card.desfire;
 
-import android.os.Parcel;
-import android.os.Parcelable;
+import com.codebutler.farebot.util.Utils;
 
-public class DesfireApplication implements Parcelable {
-    private int           mId;
-    private DesfireFile[] mFiles;
+import org.simpleframework.xml.Attribute;
+import org.simpleframework.xml.ElementList;
+import org.simpleframework.xml.Root;
 
-    public DesfireApplication (int id, DesfireFile[] files) {
-        mId    = id;
-        mFiles = files;
+import java.util.List;
+
+@Root(name="application")
+public class DesfireApplication {
+    @Attribute(name="id") private String mId;
+    @ElementList(name="files") private List<DesfireFile> mFiles;
+
+    private DesfireApplication() { /* For XML Serializer */ }
+
+    public DesfireApplication(int id, DesfireFile[] files) {
+        mId = String.valueOf(id);
+        mFiles = Utils.arrayAsList(files);
     }
 
-    public int getId () {
-        return mId;
+    public int getId() {
+        return Integer.parseInt(mId);
     }
 
-    public DesfireFile[] getFiles () {
+    public List<DesfireFile> getFiles() {
         return mFiles;
     }
 
-    public DesfireFile getFile (int fileId) {
+    public DesfireFile getFile(int fileId) {
         for (DesfireFile file : mFiles) {
             if (file.getId() == fileId)
                 return file;
         }
         return null;
     }
-
-    public static final Parcelable.Creator<DesfireApplication> CREATOR = new Parcelable.Creator<DesfireApplication>() {
-        public DesfireApplication createFromParcel(Parcel source) {
-            int id = source.readInt();
-
-            DesfireFile[] files = new DesfireFile[source.readInt()];
-            source.readTypedArray(files, DesfireFile.CREATOR);
-
-            return new DesfireApplication(id, files);
-        }
-
-        public DesfireApplication[] newArray (int size) {
-            return new DesfireApplication[size];
-        }
-    };
-
-    public void writeToParcel (Parcel parcel, int flags) {
-        parcel.writeInt(mId);
-        parcel.writeInt(mFiles.length);
-        parcel.writeTypedArray(mFiles, flags);
-    }
-
-    public int describeContents () {
-        return 0;
-    }    
 }
 
 
diff --git a/src/main/java/com/codebutler/farebot/card/desfire/DesfireCard.java b/src/main/java/com/codebutler/farebot/card/desfire/DesfireCard.java
index a53dcdb..42406eb 100644
--- a/src/main/java/com/codebutler/farebot/card/desfire/DesfireCard.java
+++ b/src/main/java/com/codebutler/farebot/card/desfire/DesfireCard.java
@@ -24,36 +24,34 @@ package com.codebutler.farebot.card.desfire;
 
 import android.nfc.Tag;
 import android.nfc.tech.IsoDep;
-import android.os.Parcel;
-import android.os.Parcelable;
-import android.util.Base64;
 
-import com.codebutler.farebot.card.CardRawDataFragmentClass;
-import com.codebutler.farebot.Utils;
 import com.codebutler.farebot.card.Card;
-import com.codebutler.farebot.card.desfire.DesfireFile.InvalidDesfireFile;
+import com.codebutler.farebot.card.CardRawDataFragmentClass;
+import com.codebutler.farebot.card.CardType;
 import com.codebutler.farebot.fragment.DesfireCardRawDataFragment;
-import com.codebutler.farebot.transit.ClipperTransitData;
-import com.codebutler.farebot.transit.HSLTransitData;
-import com.codebutler.farebot.transit.OrcaTransitData;
 import com.codebutler.farebot.transit.TransitData;
 import com.codebutler.farebot.transit.TransitIdentity;
+import com.codebutler.farebot.transit.clipper.ClipperTransitData;
+import com.codebutler.farebot.transit.hsl.HSLTransitData;
+import com.codebutler.farebot.transit.orca.OrcaTransitData;
+import com.codebutler.farebot.util.Utils;
 
-import org.w3c.dom.Document;
-import org.w3c.dom.Element;
-import org.w3c.dom.NodeList;
+import org.simpleframework.xml.Element;
+import org.simpleframework.xml.ElementList;
+import org.simpleframework.xml.Root;
 
 import java.io.IOException;
 import java.util.ArrayList;
 import java.util.Date;
 import java.util.List;
 
+@Root(name="card")
 @CardRawDataFragmentClass(DesfireCardRawDataFragment.class)
 public class DesfireCard extends Card {
-    private DesfireManufacturingData mManfData;
-    private DesfireApplication[]     mApplications;
+    @Element(name="manufacturing-data") private DesfireManufacturingData mManfData;
+    @ElementList(name="applications") private List<DesfireApplication> mApplications;
 
-    public static DesfireCard dumpTag (Tag tag) throws Exception {
+    public static DesfireCard dumpTag(Tag tag) throws Exception {
         List<DesfireApplication> apps = new ArrayList<>();
 
         IsoDep tech = IsoDep.get(tag);
@@ -77,7 +75,7 @@ public class DesfireCard extends Card {
                     try {
                         DesfireFileSettings settings = desfireTag.getFileSettings(fileId);
                         byte[] data;
-                        if (settings instanceof DesfireFileSettings.StandardDesfireFileSettings)
+                        if (settings instanceof StandardDesfireFileSettings)
                             data = desfireTag.readFile(fileId);
                         else
                             data = desfireTag.readRecord(fileId);
@@ -85,7 +83,7 @@ public class DesfireCard extends Card {
                     } catch (IOException ex) {
                         throw ex;
                     } catch (Exception ex) {
-                        files.add(new DesfireFile.InvalidDesfireFile(fileId, ex.toString()));
+                        files.add(new InvalidDesfireFile(fileId, ex.toString()));
                     }
                 }
 
@@ -105,13 +103,15 @@ public class DesfireCard extends Card {
         return new DesfireCard(tag.getId(), new Date(), manufData, appsArray);
     }
 
+    private DesfireCard() { /* For XML Serializer */ }
+
     DesfireCard(byte[] tagId, Date scannedAt, DesfireManufacturingData manfData, DesfireApplication apps[]) {
         super(tagId, scannedAt);
-        mManfData     = manfData;
-        mApplications = apps;
+        mManfData = manfData;
+        mApplications = Utils.arrayAsList(apps);
     }
 
-    @Override public CardType getCardType () {
+    @Override public CardType getCardType() {
         return CardType.MifareDesfire;
     }
 
@@ -135,7 +135,7 @@ public class DesfireCard extends Card {
         return null;
     }
 
-    public DesfireApplication[] getApplications () {
+    public List<DesfireApplication> getApplications() {
         return mApplications;
     }
 
@@ -150,272 +150,4 @@ public class DesfireCard extends Card {
     public DesfireManufacturingData getManufacturingData () {
         return mManfData;
     }
-
-    public static final Parcelable.Creator<DesfireCard> CREATOR = new Parcelable.Creator<DesfireCard>() {
-        public DesfireCard createFromParcel(Parcel source) {
-            int tagIdLength = source.readInt();
-            byte[] tagId = new byte[tagIdLength];
-            source.readByteArray(tagId);
-
-            Date scannedAt = new Date(source.readLong());
-
-            DesfireManufacturingData manfData = source.readParcelable(DesfireManufacturingData.class.getClassLoader());
-
-            DesfireApplication[] apps = new DesfireApplication[source.readInt()];
-            source.readTypedArray(apps, DesfireApplication.CREATOR);
-
-            return new DesfireCard(tagId, scannedAt, manfData, apps);
-        }
-
-        public DesfireCard[] newArray (int size) {
-            return new DesfireCard[size];
-        }
-    };
-
-    public void writeToParcel (Parcel parcel, int flags) {
-        super.writeToParcel(parcel, flags);
-        parcel.writeParcelable(mManfData, flags);
-        parcel.writeInt(mApplications.length);
-        parcel.writeTypedArray(mApplications, flags);
-    }
-    
-    // FIXME: This is such a mess!
-    
-    public static DesfireCard fromXml (byte[] cardId, Date scannedAt, Element element) {
-        Element appsElement = (Element) element.getElementsByTagName("applications").item(0);
-
-        NodeList appElements = appsElement.getElementsByTagName("application");
-
-        DesfireApplication[] apps = new DesfireApplication[appElements.getLength()];
-
-        for (int x = 0; x < appElements.getLength(); x++) {
-            Element appElement = (Element) appElements.item(x);
-
-            int appId = Integer.parseInt(appElement.getAttribute("id"));
-
-            Element filesElement = (Element) appElement.getElementsByTagName("files").item(0);
-
-            NodeList fileElements = filesElement.getElementsByTagName("file");
-
-            DesfireFile[] files = new DesfireFile[fileElements.getLength()];
-
-            for (int y = 0; y < fileElements.getLength(); y++) {
-                Element fileElement = (Element) fileElements.item(y);
-                int fileId = Integer.parseInt(fileElement.getAttribute("id"));
-
-                DesfireFileSettings fileSettings;
-
-                Element settingsElement = (Element) fileElement.getElementsByTagName("settings").item(0);
-
-                Element dataElement = (Element) fileElement.getElementsByTagName("data").item(0);
-
-                if (dataElement != null) {
-                    Element e = (Element) settingsElement.getElementsByTagName("filetype").item(0);
-                    byte fileType = Byte.parseByte(e.getTextContent());
-
-                    e = (Element) settingsElement.getElementsByTagName("commsetting").item(0);
-                    byte commSetting = Byte.parseByte(e.getTextContent());
-
-                    e = (Element) settingsElement.getElementsByTagName("accessrights").item(0);
-                    byte[] accessRights = Utils.hexStringToByteArray(e.getTextContent());
-
-                    switch (fileType) {
-                        case DesfireFileSettings.STANDARD_DATA_FILE:
-                        case DesfireFileSettings.BACKUP_DATA_FILE:
-                            e = (Element) settingsElement.getElementsByTagName("filesize").item(0);
-                            int fileSize = Integer.parseInt(e.getTextContent());
-                            fileSettings = new DesfireFileSettings.StandardDesfireFileSettings(fileType, commSetting, accessRights, fileSize);
-                            break;
-
-                        case DesfireFileSettings.LINEAR_RECORD_FILE:
-                        case DesfireFileSettings.CYCLIC_RECORD_FILE:
-                            e = (Element) settingsElement.getElementsByTagName("recordsize").item(0);
-                            int recordSize = Integer.parseInt(e.getTextContent());
-
-                            e = (Element) settingsElement.getElementsByTagName("maxrecords").item(0);
-                            int maxRecords = Integer.parseInt(e.getTextContent());
-
-                            e = (Element) settingsElement.getElementsByTagName("currecords").item(0);
-                            int curRecords = Integer.parseInt(e.getTextContent());
-
-                            fileSettings = new DesfireFileSettings.RecordDesfireFileSettings(fileType, commSetting, accessRights, recordSize, maxRecords, curRecords);
-                            break;
-
-                        default:
-                            throw new UnsupportedOperationException("Unknown file type: " + fileType);
-                    }
-
-                    byte[] fileData = Base64.decode(dataElement.getTextContent().trim(), Base64.DEFAULT);
-                    files[y] = DesfireFile.create(fileId, fileSettings, fileData);
-                } else {
-                    Element errorElement = (Element) fileElement.getElementsByTagName("error").item(0);
-                    files[y] = new InvalidDesfireFile(fileId, errorElement.getTextContent());
-                }
-            }
-
-            apps[x] = new DesfireApplication(appId, files);
-        }
-
-        DesfireManufacturingData manfData = DesfireManufacturingData.fromXml((Element)element.getElementsByTagName("manufacturing-data").item(0));
-        
-        return new DesfireCard(cardId, scannedAt, manfData, apps);
-    }
-
-    public Element toXML() throws Exception {
-        Element root = super.toXML();
-
-        Document doc = root.getOwnerDocument();
-
-        Element appsElement = doc.createElement("applications");
-
-        for (DesfireApplication app : mApplications) {
-            Element appElement = doc.createElement("application");
-            appElement.setAttribute("id", String.valueOf(app.getId()));
-
-            Element filesElement = doc.createElement("files");
-            for (DesfireFile file : app.getFiles()) {
-                Element fileElement = doc.createElement("file");
-                fileElement.setAttribute("id", String.valueOf(file.getId()));
-
-                if (file instanceof InvalidDesfireFile) {
-                    Element fileDataElement = doc.createElement("error");
-                    fileDataElement.setTextContent(((InvalidDesfireFile)file).getErrorMessage());
-                    fileElement.appendChild(fileDataElement);
-                } else {
-                    DesfireFileSettings settings = file.getFileSettings();
-
-                    Element fileSettingsElement = doc.createElement("settings");
-
-                    Element element = doc.createElement("filetype");
-                    element.setTextContent(String.valueOf(settings.fileType));
-                    fileSettingsElement.appendChild(element);
-
-                    element = doc.createElement("commsetting");
-                    element.setTextContent(String.valueOf(settings.commSetting));
-                    fileSettingsElement.appendChild(element);
-
-                    element = doc.createElement("accessrights");
-                    element.setTextContent(Utils.getHexString(settings.accessRights));
-                    fileSettingsElement.appendChild(element);
-
-                    if (settings instanceof DesfireFileSettings.StandardDesfireFileSettings) {
-                        int fileSize = ((DesfireFileSettings.StandardDesfireFileSettings)settings).fileSize;
-                        element = doc.createElement("filesize");
-                        element.setTextContent(String.valueOf(fileSize));
-                        fileSettingsElement.appendChild(element);
-                    } else if (settings instanceof DesfireFileSettings.RecordDesfireFileSettings) {
-                        int recordSize = ((DesfireFileSettings.RecordDesfireFileSettings)settings).recordSize;
-                        int maxRecords = ((DesfireFileSettings.RecordDesfireFileSettings)settings).maxRecords;
-                        int curRecords = ((DesfireFileSettings.RecordDesfireFileSettings)settings).curRecords;
-
-                        element = doc.createElement("recordsize");
-                        element.setTextContent(String.valueOf(recordSize));
-                        fileSettingsElement.appendChild(element);
-
-                        element = doc.createElement("maxrecords");
-                        element.setTextContent(String.valueOf(maxRecords));
-                        fileSettingsElement.appendChild(element);
-
-                        element = doc.createElement("currecords");
-                        element.setTextContent(String.valueOf(curRecords));
-                        fileSettingsElement.appendChild(element);
-                    } else {
-                        throw new Exception("Unknown file type: " + Integer.toHexString(settings.fileType));
-                    }
-
-                    fileElement.appendChild(fileSettingsElement);
-
-                    Element fileDataElement = doc.createElement("data");
-                    fileDataElement.setTextContent(Base64.encodeToString(file.getData(), Base64.DEFAULT));
-                    fileElement.appendChild(fileDataElement);
-                }
-
-                filesElement.appendChild(fileElement);
-            }
-            appElement.appendChild(filesElement);
-
-            appsElement.appendChild(appElement);
-        }
-        root.appendChild(appsElement);
-
-        DesfireManufacturingData manfData = getManufacturingData();
-
-        Element manfDataElement = doc.createElement("manufacturing-data");
-
-        Element element = doc.createElement("hw-vendor-id");
-        element.setTextContent(Integer.toString(manfData.hwVendorID));
-        manfDataElement.appendChild(element);
-
-        element = doc.createElement("hw-type");
-        element.setTextContent(Integer.toString(manfData.hwType));
-        manfDataElement.appendChild(element);
-
-        element = doc.createElement("hw-sub-type");
-        element.setTextContent(Integer.toString(manfData.hwSubType));
-        manfDataElement.appendChild(element);
-
-        element = doc.createElement("hw-major-version");
-        element.setTextContent(Integer.toString(manfData.hwMajorVersion));
-        manfDataElement.appendChild(element);
-
-        element = doc.createElement("hw-minor-version");
-        element.setTextContent(Integer.toString(manfData.hwMinorVersion));
-        manfDataElement.appendChild(element);
-
-        element = doc.createElement("hw-storage-size");
-        element.setTextContent(Integer.toString(manfData.hwStorageSize));
-        manfDataElement.appendChild(element);
-
-        element = doc.createElement("hw-protocol");
-        element.setTextContent(Integer.toString(manfData.hwProtocol));
-        manfDataElement.appendChild(element);
-
-        element = doc.createElement("sw-vendor-id");
-        element.setTextContent(Integer.toString(manfData.swVendorID));
-        manfDataElement.appendChild(element);
-
-        element = doc.createElement("sw-type");
-        element.setTextContent(Integer.toString(manfData.swType));
-        manfDataElement.appendChild(element);
-
-        element = doc.createElement("sw-sub-type");
-        element.setTextContent(Integer.toString(manfData.swSubType));
-        manfDataElement.appendChild(element);
-
-        element = doc.createElement("sw-major-version");
-        element.setTextContent(Integer.toString(manfData.swMajorVersion));
-        manfDataElement.appendChild(element);
-
-        element = doc.createElement("sw-minor-version");
-        element.setTextContent(Integer.toString(manfData.swMinorVersion));
-        manfDataElement.appendChild(element);
-
-        element = doc.createElement("sw-storage-size");
-        element.setTextContent(Integer.toString(manfData.swStorageSize));
-        manfDataElement.appendChild(element);
-
-        element = doc.createElement("sw-protocol");
-        element.setTextContent(Integer.toString(manfData.swProtocol));
-        manfDataElement.appendChild(element);
-
-        element = doc.createElement("uid");
-        element.setTextContent(Integer.toString(manfData.uid));
-        manfDataElement.appendChild(element);
-
-        element = doc.createElement("batch-no");
-        element.setTextContent(Integer.toString(manfData.batchNo));
-        manfDataElement.appendChild(element);
-
-        element = doc.createElement("week-prod");
-        element.setTextContent(Integer.toString(manfData.weekProd));
-        manfDataElement.appendChild(element);
-
-        element = doc.createElement("year-prod");
-        element.setTextContent(Integer.toString(manfData.yearProd));
-        manfDataElement.appendChild(element);
-
-        root.appendChild(manfDataElement);
-
-        return root;
-    }
 }
diff --git a/src/main/java/com/codebutler/farebot/card/desfire/DesfireFile.java b/src/main/java/com/codebutler/farebot/card/desfire/DesfireFile.java
index f365a64..558f035 100644
--- a/src/main/java/com/codebutler/farebot/card/desfire/DesfireFile.java
+++ b/src/main/java/com/codebutler/farebot/card/desfire/DesfireFile.java
@@ -22,118 +22,43 @@
 
 package com.codebutler.farebot.card.desfire;
 
-import android.os.Parcel;
-import android.os.Parcelable;
+import com.codebutler.farebot.xml.Base64String;
 
-import com.codebutler.farebot.card.desfire.DesfireFileSettings.RecordDesfireFileSettings;
+import org.simpleframework.xml.Attribute;
+import org.simpleframework.xml.Element;
+import org.simpleframework.xml.Root;
 
-import org.apache.commons.lang3.ArrayUtils;
+@Root(name="file")
+public class DesfireFile {
+    @Attribute(name="id") private int mId;
+    @Element(name="settings", required=false) private DesfireFileSettings mSettings;
+    @Element(name="data", required=false) private Base64String mData;
 
-public class DesfireFile implements Parcelable {
-    private int                 mId;
-    private DesfireFileSettings mSettings;
-    private byte[]              mData;
-
-    public static DesfireFile create (int fileId, DesfireFileSettings fileSettings, byte[] fileData) {
-        if (fileSettings instanceof RecordDesfireFileSettings)
+    public static DesfireFile create(int fileId, DesfireFileSettings fileSettings, byte[] fileData) {
+        if (fileSettings instanceof RecordDesfireFileSettings) {
             return new RecordDesfireFile(fileId, fileSettings, fileData);
-        else
+        } else {
             return new DesfireFile(fileId, fileSettings, fileData);
+        }
     }
 
-    private DesfireFile (int fileId, DesfireFileSettings fileSettings, byte[] fileData) {
-        mId       = fileId;
+    DesfireFile() { /* For XML Serializer */ }
+
+    DesfireFile(int fileId, DesfireFileSettings fileSettings, byte[] fileData) {
+        mId = fileId;
         mSettings = fileSettings;
-        mData     = fileData;
+        mData = new Base64String(fileData);
     }
 
-    public DesfireFileSettings getFileSettings () {
+    public DesfireFileSettings getFileSettings() {
         return mSettings;
     }
 
-    public int getId () {
+    public int getId() {
         return mId;
     }
 
-    public byte[] getData () {
-        return mData;
-    }
-
-    public static final Parcelable.Creator<DesfireFile> CREATOR = new Parcelable.Creator<DesfireFile>() {
-        public DesfireFile createFromParcel(Parcel source) {
-            int fileId = source.readInt();
-
-            boolean isError = (source.readInt() == 1);
-
-            if (!isError) {
-                DesfireFileSettings fileSettings = source.readParcelable(DesfireFileSettings.class.getClassLoader());
-                int    dataLength = source.readInt();
-                byte[] fileData   = new byte[dataLength];
-                source.readByteArray(fileData);
-
-                return DesfireFile.create(fileId, fileSettings, fileData);
-            } else {
-                return new InvalidDesfireFile(fileId, source.readString());
-            }
-        }
-
-        public DesfireFile[] newArray (int size) {
-            return new DesfireFile[size];
-        }
-    };
-
-    public void writeToParcel (Parcel parcel, int flags) {
-        parcel.writeInt(mId);
-        if (this instanceof InvalidDesfireFile) {
-            parcel.writeInt(1);
-            parcel.writeString(((InvalidDesfireFile)this).getErrorMessage());
-        } else {
-            parcel.writeInt(0);
-            parcel.writeParcelable(mSettings, 0);
-            parcel.writeInt(mData.length);
-            parcel.writeByteArray(mData);
-        }
-    }
-
-    public int describeContents () {
-        return 0;
-    }
-
-    public static class RecordDesfireFile extends DesfireFile {
-        private DesfireRecord[] mRecords;
-
-        private RecordDesfireFile (int fileId, DesfireFileSettings fileSettings, byte[] fileData) {
-            super(fileId, fileSettings, fileData);
-
-            RecordDesfireFileSettings settings = (RecordDesfireFileSettings) fileSettings;
-
-            DesfireRecord[] records = new DesfireRecord[settings.curRecords];
-            for (int i = 0; i < settings.curRecords; i++) {
-                int offset = settings.recordSize * i;
-                records[i] = new DesfireRecord(ArrayUtils.subarray(getData(), offset, offset + settings.recordSize));
-            }
-            mRecords = records;
-        }
-
-        public DesfireRecord[] getRecords () {
-            return mRecords;
-        }
-    }
-
-    public static class InvalidDesfireFile extends DesfireFile {
-        private String mErrorMessage;
-
-        public InvalidDesfireFile (int fileId, String errorMessage) {
-            super(fileId, null, new byte[0]);
-            mErrorMessage = errorMessage;
-        }
-
-        public String getErrorMessage () {
-            return mErrorMessage;
-        }
-
-        @Override public byte[] getData() {
-            throw new IllegalStateException(String.format("Invalid file: %s", mErrorMessage));
-        }
+    public byte[] getData() {
+        return mData.getData();
     }
 }
\ No newline at end of file
diff --git a/src/main/java/com/codebutler/farebot/card/desfire/DesfireFileSettings.java b/src/main/java/com/codebutler/farebot/card/desfire/DesfireFileSettings.java
index 922561f..adaf210 100644
--- a/src/main/java/com/codebutler/farebot/card/desfire/DesfireFileSettings.java
+++ b/src/main/java/com/codebutler/farebot/card/desfire/DesfireFileSettings.java
@@ -22,26 +22,25 @@
 
 package com.codebutler.farebot.card.desfire;
 
-import android.os.Parcel;
-import android.os.Parcelable;
-import com.codebutler.farebot.Utils;
-import org.apache.commons.lang3.ArrayUtils;
+import com.codebutler.farebot.xml.HexString;
+
+import org.simpleframework.xml.Element;
 
 import java.io.ByteArrayInputStream;
 
-public abstract class DesfireFileSettings implements Parcelable {
-    public final byte   fileType;
-    public final byte   commSetting;
-    public final byte[] accessRights;
+public abstract class DesfireFileSettings {
+    @Element(name="filetype") private byte mFileType;
+    @Element(name="commsettings") private byte mCommSetting;
+    @Element(name="accessrights") private HexString mAccessRights;
 
     /* DesfireFile Types */
-    static final byte STANDARD_DATA_FILE = (byte) 0x00;
-    static final byte BACKUP_DATA_FILE   = (byte) 0x01;
-    static final byte VALUE_FILE         = (byte) 0x02;
-    static final byte LINEAR_RECORD_FILE = (byte) 0x03;
-    static final byte CYCLIC_RECORD_FILE = (byte) 0x04;
+    public static final byte STANDARD_DATA_FILE = (byte) 0x00;
+    public static final byte BACKUP_DATA_FILE   = (byte) 0x01;
+    public static final byte VALUE_FILE         = (byte) 0x02;
+    public static final byte LINEAR_RECORD_FILE = (byte) 0x03;
+    public static final byte CYCLIC_RECORD_FILE = (byte) 0x04;
     
-    public static DesfireFileSettings Create (byte[] data) throws Exception {
+    public static DesfireFileSettings create(byte[] data) throws Exception {
         byte fileType = data[0];
 
         ByteArrayInputStream stream = new ByteArrayInputStream(data);
@@ -56,22 +55,37 @@ public abstract class DesfireFileSettings implements Parcelable {
             throw new Exception("Unknown file type: " + Integer.toHexString(fileType));
     }
 
-    private DesfireFileSettings(ByteArrayInputStream stream) {
-        fileType    = (byte) stream.read();
-        commSetting = (byte) stream.read();
+    DesfireFileSettings() { /* For XML Serializer */ }
+
+    DesfireFileSettings(ByteArrayInputStream stream) {
+        mFileType = (byte) stream.read();
+        mCommSetting = (byte) stream.read();
 
-        accessRights = new byte[2];
+        byte[] accessRights = new byte[2];
         stream.read(accessRights, 0, accessRights.length);
+        this.mAccessRights = new HexString(accessRights);
+    }
+
+    DesfireFileSettings(byte fileType, byte commSetting, byte[] accessRights) {
+        this.mFileType = fileType;
+        this.mCommSetting = commSetting;
+        this.mAccessRights = new HexString(accessRights);
+    }
+
+    public byte getFileType() {
+        return mFileType;
+    }
+
+    public byte getCommSetting() {
+        return mCommSetting;
     }
 
-    private DesfireFileSettings (byte fileType, byte commSetting, byte[] accessRights) {
-        this.fileType     = fileType;
-        this.commSetting  = commSetting;
-        this.accessRights = accessRights;
+    public HexString getAccessRights() {
+        return mAccessRights;
     }
 
     public String getFileTypeName () {
-        switch (fileType) {
+        switch (mFileType) {
             case STANDARD_DATA_FILE:
                 return "Standard";
             case BACKUP_DATA_FILE:
@@ -86,108 +100,4 @@ public abstract class DesfireFileSettings implements Parcelable {
                 return "Unknown";
         }
     }
-
-    public static final Parcelable.Creator<DesfireFileSettings> CREATOR = new Parcelable.Creator<DesfireFileSettings>() {
-        public DesfireFileSettings createFromParcel(Parcel source) {
-            byte fileType       = source.readByte();
-            byte commSetting    = source.readByte();
-            byte[] accessRights = new byte[source.readInt()];
-            source.readByteArray(accessRights);
-
-            if (fileType == STANDARD_DATA_FILE || fileType == BACKUP_DATA_FILE) {
-                int fileSize = source.readInt();
-                return new StandardDesfireFileSettings(fileType, commSetting, accessRights, fileSize);
-            } else if (fileType == LINEAR_RECORD_FILE || fileType == CYCLIC_RECORD_FILE) {
-                int recordSize = source.readInt();
-                int maxRecords = source.readInt();
-                int curRecords = source.readInt();
-                return new RecordDesfireFileSettings(fileType, commSetting, accessRights, recordSize, maxRecords, curRecords);
-            } else {
-                return new UnsupportedDesfireFileSettings(fileType);
-            }
-        }
-
-        public DesfireFileSettings[] newArray(int size) {
-            return new DesfireFileSettings[size];
-        }
-    };
-
-    public void writeToParcel (Parcel parcel, int flags) {
-        parcel.writeByte(fileType);
-        parcel.writeByte(commSetting);
-        parcel.writeInt(accessRights.length);
-        parcel.writeByteArray(accessRights);
-    }
-
-    public int describeContents () {
-        return 0;
-    }
-
-    public static class StandardDesfireFileSettings extends DesfireFileSettings {
-        public final int fileSize;
-
-        private StandardDesfireFileSettings (ByteArrayInputStream stream) {
-            super(stream);
-            byte[] buf = new byte[3];
-            stream.read(buf, 0, buf.length);
-            ArrayUtils.reverse(buf);
-            fileSize = Utils.byteArrayToInt(buf);
-        }
-
-        StandardDesfireFileSettings (byte fileType, byte commSetting, byte[] accessRights, int fileSize) {
-            super(fileType, commSetting, accessRights);
-            this.fileSize = fileSize;
-        }
-
-        @Override public void writeToParcel (Parcel parcel, int flags) {
-            super.writeToParcel(parcel, flags);
-            parcel.writeInt(fileSize);
-        }
-    }
-
-    public static class RecordDesfireFileSettings extends DesfireFileSettings {
-        public final int recordSize;
-        public final int maxRecords;
-        public final int curRecords;
-
-        public RecordDesfireFileSettings(ByteArrayInputStream stream) {
-            super(stream);
-
-            byte[] buf = new byte[3];
-            stream.read(buf, 0, buf.length);
-            ArrayUtils.reverse(buf);
-            recordSize = Utils.byteArrayToInt(buf);
-
-            buf = new byte[3];
-            stream.read(buf, 0, buf.length);
-            ArrayUtils.reverse(buf);
-            maxRecords = Utils.byteArrayToInt(buf);
-
-            buf = new byte[3];
-            stream.read(buf, 0, buf.length);
-            ArrayUtils.reverse(buf);
-            curRecords = Utils.byteArrayToInt(buf);
-        }
-
-        RecordDesfireFileSettings (byte fileType, byte commSetting, byte[] accessRights, int recordSize, int maxRecords, int curRecords) {
-            super(fileType, commSetting, accessRights);
-            this.recordSize = recordSize;
-            this.maxRecords = maxRecords;
-            this.curRecords = curRecords;
-        }
-
-        @Override public void writeToParcel (Parcel parcel, int flags) {
-            super.writeToParcel(parcel, flags);
-            parcel.writeInt(recordSize);
-            parcel.writeInt(maxRecords);
-            parcel.writeInt(curRecords);
-        }
-    }
-
-    public static class UnsupportedDesfireFileSettings extends DesfireFileSettings {
-        public UnsupportedDesfireFileSettings(byte fileType) {
-            super(fileType, Byte.MIN_VALUE, new byte[0]);
-        }
-    }
 }
-
diff --git a/src/main/java/com/codebutler/farebot/card/desfire/DesfireManufacturingData.java b/src/main/java/com/codebutler/farebot/card/desfire/DesfireManufacturingData.java
index dc64f56..d9c4c27 100644
--- a/src/main/java/com/codebutler/farebot/card/desfire/DesfireManufacturingData.java
+++ b/src/main/java/com/codebutler/farebot/card/desfire/DesfireManufacturingData.java
@@ -22,34 +22,37 @@
 
 package com.codebutler.farebot.card.desfire;
 
-import android.os.Parcel;
-import android.os.Parcelable;
-import com.codebutler.farebot.Utils;
-import org.w3c.dom.Element;
+import com.codebutler.farebot.util.Utils;
 
-import java.io.ByteArrayInputStream;
-
-public class DesfireManufacturingData implements Parcelable {
-    public final int hwVendorID;
-    public final int hwType;
-    public final int hwSubType;
-    public final int hwMajorVersion;
-    public final int hwMinorVersion;
-    public final int hwStorageSize;
-    public final int hwProtocol;
+import org.simpleframework.xml.Element;
+import org.simpleframework.xml.Root;
 
-    public final int swVendorID;
-    public final int swType;
-    public final int swSubType;
-    public final int swMajorVersion;
-    public final int swMinorVersion;
-    public final int swStorageSize;
-    public final int swProtocol;
+import java.io.ByteArrayInputStream;
 
-    public final int uid;
-    public final int batchNo;
-    public final int weekProd;
-    public final int yearProd;
+@Root(name="manufacturing-data")
+public class DesfireManufacturingData {
+    @Element(name="hw-vendor-id") public int hwVendorID;
+    @Element(name="hw-type") public int hwType;
+    @Element(name="hw-sub-type") public int hwSubType;
+    @Element(name="hw-major-version") public int hwMajorVersion;
+    @Element(name="hw-minor-version") public int hwMinorVersion;
+    @Element(name="hw-storage-size") public int hwStorageSize;
+    @Element(name="hw-protocol") public int hwProtocol;
+
+    @Element(name="sw-vendor-id") public int swVendorID;
+    @Element(name="sw-type") public int swType;
+    @Element(name="sw-sub-type") public int swSubType;
+    @Element(name="sw-major-version") public int swMajorVersion;
+    @Element(name="sw-minor-version") public int swMinorVersion;
+    @Element(name="sw-storage-size") public int swStorageSize;
+    @Element(name="sw-protocol") public int swProtocol;
+
+    @Element(name="uid") public int uid;
+    @Element(name="batch-no") public int batchNo;
+    @Element(name="week-prod") public int weekProd;
+    @Element(name="year-prod") public int yearProd;
+
+    private DesfireManufacturingData() { /* For XML Serializer */ }
 
     public DesfireManufacturingData (byte[] data) {
         ByteArrayInputStream stream = new ByteArrayInputStream(data);
@@ -83,91 +86,4 @@ public class DesfireManufacturingData implements Parcelable {
         weekProd = stream.read();
         yearProd = stream.read();
     }
-
-    public static DesfireManufacturingData fromXml (Element element) {
-        return new DesfireManufacturingData(element);
-    }
-
-    private DesfireManufacturingData (Element element) {
-        hwVendorID     = Integer.parseInt(element.getElementsByTagName("hw-vendor-id").item(0).getTextContent());
-        hwType         = Integer.parseInt(element.getElementsByTagName("hw-type").item(0).getTextContent());
-        hwSubType      = Integer.parseInt(element.getElementsByTagName("hw-sub-type").item(0).getTextContent());
-        hwMajorVersion = Integer.parseInt(element.getElementsByTagName("hw-major-version").item(0).getTextContent());
-        hwMinorVersion = Integer.parseInt(element.getElementsByTagName("hw-minor-version").item(0).getTextContent());
-        hwStorageSize  = Integer.parseInt(element.getElementsByTagName("hw-storage-size").item(0).getTextContent());
-        hwProtocol     = Integer.parseInt(element.getElementsByTagName("hw-protocol").item(0).getTextContent());
-
-        swVendorID     = Integer.parseInt(element.getElementsByTagName("sw-vendor-id").item(0).getTextContent());
-        swType         = Integer.parseInt(element.getElementsByTagName("sw-type").item(0).getTextContent());
-        swSubType      = Integer.parseInt(element.getElementsByTagName("sw-sub-type").item(0).getTextContent());
-        swMajorVersion = Integer.parseInt(element.getElementsByTagName("sw-major-version").item(0).getTextContent());
-        swMinorVersion = Integer.parseInt(element.getElementsByTagName("sw-minor-version").item(0).getTextContent());
-        swStorageSize  = Integer.parseInt(element.getElementsByTagName("sw-storage-size").item(0).getTextContent());
-        swProtocol     = Integer.parseInt(element.getElementsByTagName("sw-protocol").item(0).getTextContent());
-
-        uid      = Integer.parseInt(element.getElementsByTagName("uid").item(0).getTextContent());
-        batchNo  = Integer.parseInt(element.getElementsByTagName("batch-no").item(0).getTextContent());
-        weekProd = Integer.parseInt(element.getElementsByTagName("week-prod").item(0).getTextContent());
-        yearProd = Integer.parseInt(element.getElementsByTagName("year-prod").item(0).getTextContent());
-    }
-
-    private DesfireManufacturingData (Parcel parcel) {
-        hwVendorID     = parcel.readInt();
-        hwType         = parcel.readInt();
-        hwSubType      = parcel.readInt();
-        hwMajorVersion = parcel.readInt();
-        hwMinorVersion = parcel.readInt();
-        hwStorageSize  = parcel.readInt();
-        hwProtocol     = parcel.readInt();
-
-        swVendorID     = parcel.readInt();
-        swType         = parcel.readInt();
-        swSubType      = parcel.readInt();
-        swMajorVersion = parcel.readInt();
-        swMinorVersion = parcel.readInt();
-        swStorageSize  = parcel.readInt();
-        swProtocol     = parcel.readInt();
-
-        uid      = parcel.readInt();
-        batchNo  = parcel.readInt();
-        weekProd = parcel.readInt();
-        yearProd = parcel.readInt();
-    }
-
-    public void writeToParcel(Parcel parcel, int flags) {
-        parcel.writeInt(hwVendorID);
-        parcel.writeInt(hwType);
-        parcel.writeInt(hwSubType);
-        parcel.writeInt(hwMajorVersion);
-        parcel.writeInt(hwMinorVersion);
-        parcel.writeInt(hwStorageSize);
-        parcel.writeInt(hwProtocol);
-
-        parcel.writeInt(swVendorID);
-        parcel.writeInt(swType);
-        parcel.writeInt(swSubType);
-        parcel.writeInt(swMajorVersion);
-        parcel.writeInt(swMinorVersion);
-        parcel.writeInt(swStorageSize);
-        parcel.writeInt(swProtocol);
-
-        parcel.writeInt(uid);
-        parcel.writeInt(batchNo);
-        parcel.writeInt(weekProd);
-        parcel.writeInt(yearProd);
-    }
-
-    public int describeContents() {
-        return 0;
-    }
-
-    public static final Parcelable.Creator<DesfireManufacturingData> CREATOR = new Parcelable.Creator<DesfireManufacturingData>() {
-        public DesfireManufacturingData createFromParcel(Parcel source) {
-            return new DesfireManufacturingData(source);
-        }
-
-        public DesfireManufacturingData[] newArray(int size) {
-            return new DesfireManufacturingData[size];
-        }
-    };
 }
diff --git a/src/main/java/com/codebutler/farebot/card/desfire/DesfireProtocol.java b/src/main/java/com/codebutler/farebot/card/desfire/DesfireProtocol.java
index 467ee1a..0c5c785 100644
--- a/src/main/java/com/codebutler/farebot/card/desfire/DesfireProtocol.java
+++ b/src/main/java/com/codebutler/farebot/card/desfire/DesfireProtocol.java
@@ -23,7 +23,8 @@
 package com.codebutler.farebot.card.desfire;
 
 import android.nfc.tech.IsoDep;
-import com.codebutler.farebot.Utils;
+
+import com.codebutler.farebot.util.Utils;
 
 import java.io.ByteArrayOutputStream;
 
@@ -93,7 +94,7 @@ public class DesfireProtocol {
 
     public DesfireFileSettings getFileSettings (int fileNo) throws Exception {
         byte[] data = sendRequest(GET_FILE_SETTINGS, new byte[] { (byte) fileNo });
-        return DesfireFileSettings.Create(data);
+        return DesfireFileSettings.create(data);
     }
 
     public byte[] readFile (int fileNo) throws Exception {
diff --git a/src/main/java/com/codebutler/farebot/card/desfire/DesfireRecord.java b/src/main/java/com/codebutler/farebot/card/desfire/DesfireRecord.java
index 8cc8b45..479cc3d 100644
--- a/src/main/java/com/codebutler/farebot/card/desfire/DesfireRecord.java
+++ b/src/main/java/com/codebutler/farebot/card/desfire/DesfireRecord.java
@@ -22,14 +22,18 @@
 
 package com.codebutler.farebot.card.desfire;
 
+import com.codebutler.farebot.xml.Base64String;
+
 public class DesfireRecord {
-    private byte[] mData;
+    private Base64String mData;
+
+    private DesfireRecord() { /* For XML Serializer */ }
 
-    public DesfireRecord (byte[] data) {
-        mData = data;
+    public DesfireRecord(byte[] data) {
+        mData = new Base64String(data);
     }
 
-    public byte[] getData () {
-        return mData;
+    public byte[] getData() {
+        return mData.getData();
     }
 }
diff --git a/src/main/java/com/codebutler/farebot/card/desfire/InvalidDesfireFile.java b/src/main/java/com/codebutler/farebot/card/desfire/InvalidDesfireFile.java
new file mode 100644
index 0000000..26bced5
--- /dev/null
+++ b/src/main/java/com/codebutler/farebot/card/desfire/InvalidDesfireFile.java
@@ -0,0 +1,24 @@
+package com.codebutler.farebot.card.desfire;
+
+import org.simpleframework.xml.Element;
+import org.simpleframework.xml.Root;
+
+@Root(name="file")
+public class InvalidDesfireFile extends DesfireFile {
+    @Element(name="error") private String mErrorMessage;
+
+    private InvalidDesfireFile() { /* For XML Serializer */ }
+
+    public InvalidDesfireFile(int fileId, String errorMessage) {
+        super(fileId, null, new byte[0]);
+        mErrorMessage = errorMessage;
+    }
+
+    public String getErrorMessage () {
+        return mErrorMessage;
+    }
+
+    @Override public byte[] getData() {
+        throw new IllegalStateException(String.format("Invalid file: %s", mErrorMessage));
+    }
+}
diff --git a/src/main/java/com/codebutler/farebot/card/desfire/RecordDesfireFile.java b/src/main/java/com/codebutler/farebot/card/desfire/RecordDesfireFile.java
new file mode 100644
index 0000000..48cb613
--- /dev/null
+++ b/src/main/java/com/codebutler/farebot/card/desfire/RecordDesfireFile.java
@@ -0,0 +1,32 @@
+package com.codebutler.farebot.card.desfire;
+
+import com.codebutler.farebot.util.Utils;
+
+import org.apache.commons.lang3.ArrayUtils;
+import org.simpleframework.xml.Root;
+
+import java.util.List;
+
+@Root(name="file")
+public class RecordDesfireFile extends DesfireFile {
+    private transient List<DesfireRecord> mRecords;
+
+    private RecordDesfireFile() { /* For XML Serializer */ }
+
+    RecordDesfireFile(int fileId, DesfireFileSettings fileSettings, byte[] fileData) {
+        super(fileId, fileSettings, fileData);
+
+        RecordDesfireFileSettings settings = (RecordDesfireFileSettings) fileSettings;
+
+        DesfireRecord[] records = new DesfireRecord[settings.getCurRecords()];
+        for (int i = 0; i < settings.getCurRecords(); i++) {
+            int offset = settings.getRecordSize() * i;
+            records[i] = new DesfireRecord(ArrayUtils.subarray(getData(), offset, offset + settings.getRecordSize()));
+        }
+        mRecords = Utils.arrayAsList(records);
+    }
+
+    public List<DesfireRecord> getRecords() {
+        return mRecords;
+    }
+}
diff --git a/src/main/java/com/codebutler/farebot/card/desfire/RecordDesfireFileSettings.java b/src/main/java/com/codebutler/farebot/card/desfire/RecordDesfireFileSettings.java
new file mode 100644
index 0000000..8442846
--- /dev/null
+++ b/src/main/java/com/codebutler/farebot/card/desfire/RecordDesfireFileSettings.java
@@ -0,0 +1,56 @@
+package com.codebutler.farebot.card.desfire;
+
+import com.codebutler.farebot.util.Utils;
+
+import org.apache.commons.lang3.ArrayUtils;
+import org.simpleframework.xml.Element;
+import org.simpleframework.xml.Root;
+
+import java.io.ByteArrayInputStream;
+
+@Root(name="settings")
+public class RecordDesfireFileSettings extends DesfireFileSettings {
+    @Element(name="recordsize") private int mRecordSize;
+    @Element(name="maxrecords") private int mMaxRecords;
+    @Element(name="currecords") private int mCurRecords;
+
+    private RecordDesfireFileSettings() { /* For XML Serializer */ }
+
+    public RecordDesfireFileSettings(byte fileType, byte commSetting, byte[] accessRights, int recordSize, int maxRecords, int curRecords) {
+        super(fileType, commSetting, accessRights);
+        this.mRecordSize = recordSize;
+        this.mMaxRecords = maxRecords;
+        this.mCurRecords = curRecords;
+    }
+
+    public RecordDesfireFileSettings(ByteArrayInputStream stream) {
+        super(stream);
+
+        byte[] buf = new byte[3];
+        stream.read(buf, 0, buf.length);
+        ArrayUtils.reverse(buf);
+        mRecordSize = Utils.byteArrayToInt(buf);
+
+        buf = new byte[3];
+        stream.read(buf, 0, buf.length);
+        ArrayUtils.reverse(buf);
+        mMaxRecords = Utils.byteArrayToInt(buf);
+
+        buf = new byte[3];
+        stream.read(buf, 0, buf.length);
+        ArrayUtils.reverse(buf);
+        mCurRecords = Utils.byteArrayToInt(buf);
+    }
+
+    public int getRecordSize() {
+        return mRecordSize;
+    }
+
+    public int getMaxRecords() {
+        return mMaxRecords;
+    }
+
+    public int getCurRecords() {
+        return mCurRecords;
+    }
+}
diff --git a/src/main/java/com/codebutler/farebot/card/desfire/StandardDesfireFileSettings.java b/src/main/java/com/codebutler/farebot/card/desfire/StandardDesfireFileSettings.java
new file mode 100644
index 0000000..f821980
--- /dev/null
+++ b/src/main/java/com/codebutler/farebot/card/desfire/StandardDesfireFileSettings.java
@@ -0,0 +1,33 @@
+package com.codebutler.farebot.card.desfire;
+
+import com.codebutler.farebot.util.Utils;
+
+import org.apache.commons.lang3.ArrayUtils;
+import org.simpleframework.xml.Element;
+import org.simpleframework.xml.Root;
+
+import java.io.ByteArrayInputStream;
+
+@Root(name="settings")
+public class StandardDesfireFileSettings extends DesfireFileSettings {
+    @Element(name="filesize") private int mFileSize;
+
+    private StandardDesfireFileSettings() { /* For XML Serializer */ }
+
+    StandardDesfireFileSettings(ByteArrayInputStream stream) {
+        super(stream);
+        byte[] buf = new byte[3];
+        stream.read(buf, 0, buf.length);
+        ArrayUtils.reverse(buf);
+        mFileSize = Utils.byteArrayToInt(buf);
+    }
+
+    public StandardDesfireFileSettings(byte fileType, byte commSetting, byte[] accessRights, int fileSize) {
+        super(fileType, commSetting, accessRights);
+        this.mFileSize = fileSize;
+    }
+
+    public int getFileSize() {
+        return mFileSize;
+    }
+}
diff --git a/src/main/java/com/codebutler/farebot/card/desfire/UnsupportedDesfireFileSettings.java b/src/main/java/com/codebutler/farebot/card/desfire/UnsupportedDesfireFileSettings.java
new file mode 100644
index 0000000..8200eca
--- /dev/null
+++ b/src/main/java/com/codebutler/farebot/card/desfire/UnsupportedDesfireFileSettings.java
@@ -0,0 +1,12 @@
+package com.codebutler.farebot.card.desfire;
+
+import org.simpleframework.xml.Root;
+
+@Root(name="settings")
+public class UnsupportedDesfireFileSettings extends DesfireFileSettings {
+    private UnsupportedDesfireFileSettings() { /* For XML Serializer */ }
+
+    public UnsupportedDesfireFileSettings(byte fileType) {
+        super(fileType, Byte.MIN_VALUE, new byte[0]);
+    }
+}
diff --git a/src/main/java/com/codebutler/farebot/card/felica/DBUtil.java b/src/main/java/com/codebutler/farebot/card/felica/DBUtil.java
index dc015fa..cc685ca 100644
--- a/src/main/java/com/codebutler/farebot/card/felica/DBUtil.java
+++ b/src/main/java/com/codebutler/farebot/card/felica/DBUtil.java
@@ -27,9 +27,14 @@ import android.database.SQLException;
 import android.database.sqlite.SQLiteDatabase;
 import android.database.sqlite.SQLiteException;
 import android.util.Log;
+
 import org.apache.commons.io.IOUtils;
 
-import java.io.*;
+import java.io.File;
+import java.io.FileOutputStream;
+import java.io.IOException;
+import java.io.InputStream;
+import java.io.OutputStream;
 
 public class DBUtil {
     public static final String COLUMN_ID             = "_id";
diff --git a/src/main/java/com/codebutler/farebot/card/felica/FelicaBlock.java b/src/main/java/com/codebutler/farebot/card/felica/FelicaBlock.java
index 7c420c6..cd01039 100644
--- a/src/main/java/com/codebutler/farebot/card/felica/FelicaBlock.java
+++ b/src/main/java/com/codebutler/farebot/card/felica/FelicaBlock.java
@@ -22,32 +22,22 @@
 
 package com.codebutler.farebot.card.felica;
 
-import android.os.Parcel;
-import android.os.Parcelable;
+import com.codebutler.farebot.xml.Base64String;
 
-public class FelicaBlock implements Parcelable {
-    private byte   mAddr;
-    private byte[] mData;
+import org.simpleframework.xml.Attribute;
+import org.simpleframework.xml.Root;
+import org.simpleframework.xml.Text;
 
-    public static Creator<FelicaBlock> CREATOR = new Creator<FelicaBlock>() {
-        public FelicaBlock createFromParcel(Parcel parcel) {
-            byte addr       = parcel.readByte();
-            int  dataLenght = parcel.readInt();
+@Root(name="block")
+public class FelicaBlock {
+    @Attribute(name="address") private byte mAddr;
+    @Text private Base64String mData;
 
-            byte[] data = new byte[dataLenght];
-            parcel.readByteArray(data);
-
-            return new FelicaBlock(addr, data);
-        }
-
-        public FelicaBlock[] newArray(int size) {
-            return new FelicaBlock[size];
-        }
-    };
+    FelicaBlock() { }
 
     public FelicaBlock(byte addr, byte[] data) {
         mAddr = addr;
-        mData = data;
+        mData = new Base64String(data);
     }
 
     public byte getAddress() {
@@ -55,16 +45,6 @@ public class FelicaBlock implements Parcelable {
     }
 
     public byte[] getData() {
-        return mData;
-    }
-
-    public void writeToParcel(Parcel parcel, int flags) {
-        parcel.writeByte(mAddr);
-        parcel.writeInt(mData.length);
-        parcel.writeByteArray(mData);
-    }
-
-    public int describeContents() {
-        return 0;
+        return mData.getData();
     }
 }
diff --git a/src/main/java/com/codebutler/farebot/card/felica/FelicaCard.java b/src/main/java/com/codebutler/farebot/card/felica/FelicaCard.java
index 76b3719..fd8c2df 100644
--- a/src/main/java/com/codebutler/farebot/card/felica/FelicaCard.java
+++ b/src/main/java/com/codebutler/farebot/card/felica/FelicaCard.java
@@ -23,53 +23,36 @@
 package com.codebutler.farebot.card.felica;
 
 import android.nfc.Tag;
-import android.os.Parcel;
-import android.util.Base64;
 import android.util.Log;
-import com.codebutler.farebot.Utils;
+
 import com.codebutler.farebot.card.Card;
-import com.codebutler.farebot.transit.SuicaTransitData;
-import com.codebutler.farebot.transit.EdyTransitData;
+import com.codebutler.farebot.card.CardType;
 import com.codebutler.farebot.transit.TransitData;
 import com.codebutler.farebot.transit.TransitIdentity;
+import com.codebutler.farebot.transit.edy.EdyTransitData;
+import com.codebutler.farebot.transit.suica.SuicaTransitData;
+import com.codebutler.farebot.util.Utils;
+
 import net.kazzz.felica.FeliCaTag;
 import net.kazzz.felica.command.ReadResponse;
 import net.kazzz.felica.lib.FeliCaLib;
+
 import org.apache.commons.lang3.ArrayUtils;
-import org.w3c.dom.Document;
-import org.w3c.dom.Element;
-import org.w3c.dom.NodeList;
+import org.simpleframework.xml.Element;
+import org.simpleframework.xml.ElementList;
+import org.simpleframework.xml.Root;
 
 import java.util.ArrayList;
 import java.util.Date;
 import java.util.List;
 
+@Root(name="card")
 public class FelicaCard extends Card {
-    private FeliCaLib.IDm  mIDm;
-    private FeliCaLib.PMm  mPMm;
-    private FelicaSystem[] mSystems;
-
-    public static Creator<FelicaCard> CREATOR = new Creator<FelicaCard>() {
-        public FelicaCard createFromParcel(Parcel source) {
-            int tagIdLength = source.readInt();
-            byte[] tagId = new byte[tagIdLength];
-            source.readByteArray(tagId);
-
-            Date scannedAt = new Date(source.readLong());
-
-            FeliCaLib.IDm idm = source.readParcelable(FeliCaLib.IDm.class.getClassLoader());
-            FeliCaLib.PMm pmm = source.readParcelable(FeliCaLib.PMm.class.getClassLoader());
-
-            FelicaSystem[] systems = new FelicaSystem[source.readInt()];
-            source.readTypedArray(systems, FelicaSystem.CREATOR);
-            
-            return new FelicaCard(tagId, scannedAt, idm, pmm, systems);
-        }
+    @Element(name="idm") private FeliCaLib.IDm mIDm;
+    @Element(name="pmm") private FeliCaLib.PMm mPMm;
+    @ElementList(name="systems") private List<FelicaSystem> mSystems;
 
-        public FelicaCard[] newArray(int size) {
-            return new FelicaCard[size];
-        }
-    };
+    private FelicaCard() { /* For XML Serializer */ }
 
     // https://github.com/tmurakam/felicalib/blob/master/src/dump/dump.c
     // https://github.com/tmurakam/felica2money/blob/master/src/card/Suica.cs
@@ -141,7 +124,7 @@ public class FelicaCard extends Card {
         super(tagId, scannedAt);
         mIDm     = idm;
         mPMm     = pmm;
-        mSystems = systems;
+        mSystems = Utils.arrayAsList(systems);
     }
 
     public FeliCaLib.IDm getIDm() {
@@ -177,7 +160,7 @@ public class FelicaCard extends Card {
     }
     */
 
-    public FelicaSystem[] getSystems() {
+    public List<FelicaSystem> getSystems() {
         return mSystems;
     }
 
@@ -190,54 +173,6 @@ public class FelicaCard extends Card {
         return null;
     }
 
-    public static FelicaCard fromXml(byte[] tagId, Date scannedAt, Element element) {
-        Element systemsElement = (Element) element.getElementsByTagName("systems").item(0);
-
-        NodeList systemElements = systemsElement.getElementsByTagName("system");
-
-        FeliCaLib.IDm idm = new FeliCaLib.IDm(Base64.decode(element.getElementsByTagName("idm").item(0).getTextContent(), Base64.DEFAULT));
-        FeliCaLib.PMm pmm = new FeliCaLib.PMm(Base64.decode(element.getElementsByTagName("pmm").item(0).getTextContent(), Base64.DEFAULT));
-
-        FelicaSystem[] systems = new FelicaSystem[systemElements.getLength()];
-
-        for (int x = 0; x < systemElements.getLength(); x++) {
-            Element systemElement = (Element) systemElements.item(x);
-
-            int systemCode = Integer.parseInt(systemElement.getAttribute("code"));
-
-            Element servicesElement = (Element) systemElement.getElementsByTagName("services").item(0);
-
-            NodeList serviceElements = servicesElement.getElementsByTagName("service");
-
-            FelicaService[] services = new FelicaService[serviceElements.getLength()];
-
-            for (int y = 0; y < serviceElements.getLength(); y++) {
-                Element serviceElement = (Element) serviceElements.item(y);
-                int serviceCode = Integer.parseInt(serviceElement.getAttribute("code"));
-
-                Element blocksElement = (Element) serviceElement.getElementsByTagName("blocks").item(0);
-
-                NodeList blockElements = blocksElement.getElementsByTagName("block");
-
-                FelicaBlock[] blocks = new FelicaBlock[blockElements.getLength()];
-
-                for (int z = 0; z < blockElements.getLength(); z++) {
-                    Element blockElement = (Element) blockElements.item(z);
-                    byte address = Byte.parseByte(blockElement.getAttribute("address"));
-                    byte[] data = Base64.decode(blockElement.getTextContent(), Base64.DEFAULT);
-
-                    blocks[z] = new FelicaBlock(address, data);
-                }
-
-                services[y] = new FelicaService(serviceCode, blocks);
-            }
-
-            systems[x] = new FelicaSystem(systemCode, services);
-        }
-
-        return new FelicaCard(tagId, scannedAt, idm, pmm, systems);
-    }
-
     @Override public CardType getCardType() {
         return CardType.FeliCa;
     }
@@ -258,60 +193,4 @@ public class FelicaCard extends Card {
             return new EdyTransitData(this);
         return null;
     }
-
-    @Override public Element toXML() throws Exception {
-        Element root = super.toXML();
-
-        Document doc = root.getOwnerDocument();
-
-        Element idmElement = doc.createElement("idm");
-        idmElement.setTextContent(Base64.encodeToString(mIDm.getBytes(), Base64.DEFAULT));
-        root.appendChild(idmElement);
-
-        Element pmmElement = doc.createElement("pmm");
-        pmmElement.setTextContent(Base64.encodeToString(mPMm.getBytes(), Base64.DEFAULT));
-        root.appendChild(pmmElement);
-
-        Element systemsElement = doc.createElement("systems");
-
-        for (FelicaSystem system : mSystems) {
-            Element systemElement = doc.createElement("system");
-            systemElement.setAttribute("code", String.valueOf(system.getCode()));
-
-            Element servicesElement = doc.createElement("services");
-            for (FelicaService service : system.getServices()) {
-                Element serviceElement = doc.createElement("service");
-                serviceElement.setAttribute("code", String.valueOf(service.getServiceCode()));
-
-                Element blocksElement = doc.createElement("blocks");
-                for (FelicaBlock block : service.getBlocks()) {
-                    Element blockElement = doc.createElement("block");
-                    blockElement.setAttribute("address", String.valueOf(block.getAddress()));
-                    blockElement.setTextContent(Base64.encodeToString(block.getData(), Base64.DEFAULT));
-
-                    blocksElement.appendChild(blockElement);
-                }
-
-                serviceElement.appendChild(blocksElement);
-
-                servicesElement.appendChild(serviceElement);
-            }
-
-            systemElement.appendChild(servicesElement);
-
-            systemsElement.appendChild(systemElement);
-        }
-
-        root.appendChild(systemsElement);
-
-        return root;
-    }
-
-    @Override public void writeToParcel(Parcel parcel, int flags) {
-        super.writeToParcel(parcel, flags);
-        parcel.writeParcelable(mIDm, flags);
-        parcel.writeParcelable(mPMm, flags);
-        parcel.writeInt(mSystems.length);
-        parcel.writeTypedArray(mSystems, flags);
-    }
 }
diff --git a/src/main/java/com/codebutler/farebot/card/felica/FelicaService.java b/src/main/java/com/codebutler/farebot/card/felica/FelicaService.java
index 3850722..6c2a794 100644
--- a/src/main/java/com/codebutler/farebot/card/felica/FelicaService.java
+++ b/src/main/java/com/codebutler/farebot/card/felica/FelicaService.java
@@ -22,48 +22,31 @@
 
 package com.codebutler.farebot.card.felica;
 
-import android.os.Parcel;
-import android.os.Parcelable;
+import com.codebutler.farebot.util.Utils;
 
-public class FelicaService implements Parcelable {
-    private int           mServiceCode;
-    private FelicaBlock[] mBlocks;
+import org.simpleframework.xml.Attribute;
+import org.simpleframework.xml.ElementList;
+import org.simpleframework.xml.Root;
 
-    public static Creator<FelicaService> CREATOR = new Creator<FelicaService>() {
-        public FelicaService createFromParcel(Parcel parcel) {
-            int serviceCode = parcel.readInt();
+import java.util.List;
 
-            FelicaBlock[] blocks = new FelicaBlock[parcel.readInt()];
-            parcel.readTypedArray(blocks, FelicaBlock.CREATOR);
+@Root(name="service")
+public class FelicaService {
+    @Attribute(name="code") private int mServiceCode;
+    @ElementList(name="blocks") private List<FelicaBlock> mBlocks;
 
-            return new FelicaService(serviceCode, blocks);
-        }
-
-        public FelicaService[] newArray(int size) {
-            return new FelicaService[size];
-        }
-    };
+    private FelicaService() { /* For XML Serializer */ }
 
     public FelicaService(int serviceCode, FelicaBlock[] blocks) {
         mServiceCode = serviceCode;
-        mBlocks      = blocks;
+        mBlocks = Utils.arrayAsList(blocks);
     }
 
     public int getServiceCode() {
         return mServiceCode;
     }
 
-    public FelicaBlock[] getBlocks() {
+    public List<FelicaBlock> getBlocks() {
         return mBlocks;
     }
-
-    public void writeToParcel(Parcel parcel, int flags) {
-        parcel.writeInt(mServiceCode);
-        parcel.writeInt(mBlocks.length);
-        parcel.writeTypedArray(mBlocks, flags);
-    }
-
-    public int describeContents() {
-        return 0;
-    }
 }
diff --git a/src/main/java/com/codebutler/farebot/card/felica/FelicaSystem.java b/src/main/java/com/codebutler/farebot/card/felica/FelicaSystem.java
index 3ea72ba..52a19b7 100644
--- a/src/main/java/com/codebutler/farebot/card/felica/FelicaSystem.java
+++ b/src/main/java/com/codebutler/farebot/card/felica/FelicaSystem.java
@@ -22,38 +22,31 @@
 
 package com.codebutler.farebot.card.felica;
 
-import android.os.Parcel;
-import android.os.Parcelable;
+import com.codebutler.farebot.util.Utils;
 
-public class FelicaSystem implements Parcelable {
-    private int mCode;
-    private FelicaService[] mServices;
+import org.simpleframework.xml.Attribute;
+import org.simpleframework.xml.ElementList;
+import org.simpleframework.xml.Root;
 
-    public static Creator<FelicaSystem> CREATOR = new Creator<FelicaSystem>() {
-        public FelicaSystem createFromParcel(Parcel parcel) {
-            int systemCode = parcel.readInt();
+import java.util.List;
 
-            FelicaService[] services = new FelicaService[parcel.readInt()];
-            parcel.readTypedArray(services, FelicaService.CREATOR);
+@Root(name="system")
+public class FelicaSystem {
+    @Attribute(name="code") private int mCode;
+    @ElementList(name="services") private List<FelicaService> mServices;
 
-            return new FelicaSystem(systemCode, services);
-        }
-
-        public FelicaSystem[] newArray(int size) {
-            return new FelicaSystem[size];
-        }
-    };
+    private FelicaSystem() { /* For XML Serializer */ }
 
     public FelicaSystem(int code, FelicaService[] services) {
         mCode = code;
-        mServices = services;
+        mServices = Utils.arrayAsList(services);
     }
 
     public int getCode() {
         return mCode;
     }
 
-    public FelicaService[] getServices() {
+    public List<FelicaService> getServices() {
         return mServices;
     }
 
@@ -65,14 +58,4 @@ public class FelicaSystem implements Parcelable {
         }
         return null;
     }
-
-    public void writeToParcel(Parcel parcel, int flags) {
-        parcel.writeInt(mCode);
-        parcel.writeInt(mServices.length);
-        parcel.writeTypedArray(mServices, flags);
-    }
-
-    public int describeContents() {
-        return 0;
-    }
 }
diff --git a/src/main/java/com/codebutler/farebot/fragment/CardBalanceFragment.java b/src/main/java/com/codebutler/farebot/fragment/CardBalanceFragment.java
index fefc82e..e45f6eb 100644
--- a/src/main/java/com/codebutler/farebot/fragment/CardBalanceFragment.java
+++ b/src/main/java/com/codebutler/farebot/fragment/CardBalanceFragment.java
@@ -22,25 +22,30 @@
 
 package com.codebutler.farebot.fragment;
 
+import android.app.Fragment;
 import android.os.Bundle;
 import android.view.LayoutInflater;
 import android.view.View;
 import android.view.ViewGroup;
 import android.widget.TextView;
-import android.app.Fragment;
+
+import com.codebutler.farebot.FareBotApplication;
 import com.codebutler.farebot.R;
 import com.codebutler.farebot.activity.AdvancedCardInfoActivity;
 import com.codebutler.farebot.activity.CardInfoActivity;
 import com.codebutler.farebot.card.Card;
 import com.codebutler.farebot.transit.TransitData;
 
+import org.simpleframework.xml.Serializer;
+
 public class CardBalanceFragment extends Fragment {
     private Card mCard;
     private TransitData mTransitData;
 
     public void onCreate (Bundle savedInstanceState) {
         super.onCreate(savedInstanceState);
-        mCard        = getArguments().getParcelable(AdvancedCardInfoActivity.EXTRA_CARD);
+        Serializer serializer = FareBotApplication.getInstance().getSerializer();
+        mCard        = Card.fromXml(serializer, getArguments().getString(AdvancedCardInfoActivity.EXTRA_CARD));
         mTransitData = getArguments().getParcelable(CardInfoActivity.EXTRA_TRANSIT_DATA);
     }
 
diff --git a/src/main/java/com/codebutler/farebot/fragment/CardHWDetailFragment.java b/src/main/java/com/codebutler/farebot/fragment/CardHWDetailFragment.java
index 08cbebd..da899ac 100644
--- a/src/main/java/com/codebutler/farebot/fragment/CardHWDetailFragment.java
+++ b/src/main/java/com/codebutler/farebot/fragment/CardHWDetailFragment.java
@@ -22,19 +22,23 @@
 
 package com.codebutler.farebot.fragment;
 
-import android.os.Bundle;
 import android.app.ListFragment;
-import com.codebutler.farebot.ui.HeaderListItem;
-import com.codebutler.farebot.ui.ListItem;
-import com.codebutler.farebot.Utils;
+import android.os.Bundle;
+
+import com.codebutler.farebot.FareBotApplication;
 import com.codebutler.farebot.activity.AdvancedCardInfoActivity;
 import com.codebutler.farebot.card.Card;
-import com.codebutler.farebot.card.Card.CardType;
+import com.codebutler.farebot.card.CardType;
 import com.codebutler.farebot.card.cepas.CEPASCard;
 import com.codebutler.farebot.card.cepas.CEPASPurse;
 import com.codebutler.farebot.card.desfire.DesfireCard;
 import com.codebutler.farebot.card.desfire.DesfireManufacturingData;
 import com.codebutler.farebot.card.felica.FelicaCard;
+import com.codebutler.farebot.ui.HeaderListItem;
+import com.codebutler.farebot.ui.ListItem;
+import com.codebutler.farebot.util.Utils;
+
+import org.simpleframework.xml.Serializer;
 
 import java.text.DateFormat;
 import java.text.NumberFormat;
@@ -48,7 +52,8 @@ public class CardHWDetailFragment extends ListFragment {
     @Override public void onCreate (Bundle savedInstanceState) {
         super.onCreate(savedInstanceState);
 
-        mCard = getArguments().getParcelable(AdvancedCardInfoActivity.EXTRA_CARD);
+        Serializer serializer = FareBotApplication.getInstance().getSerializer();
+        mCard = Card.fromXml(serializer, getArguments().getString(AdvancedCardInfoActivity.EXTRA_CARD));
         
         List<ListItem> items = new ArrayList<>();
 
diff --git a/src/main/java/com/codebutler/farebot/fragment/CardInfoFragment.java b/src/main/java/com/codebutler/farebot/fragment/CardInfoFragment.java
index b6d3e56..13d64a2 100644
--- a/src/main/java/com/codebutler/farebot/fragment/CardInfoFragment.java
+++ b/src/main/java/com/codebutler/farebot/fragment/CardInfoFragment.java
@@ -22,21 +22,26 @@
 
 package com.codebutler.farebot.fragment;
 
+import android.app.ListFragment;
 import android.os.Bundle;
 import android.view.View;
-import android.app.ListFragment;
+
+import com.codebutler.farebot.FareBotApplication;
 import com.codebutler.farebot.activity.AdvancedCardInfoActivity;
 import com.codebutler.farebot.activity.CardInfoActivity;
 import com.codebutler.farebot.card.Card;
 import com.codebutler.farebot.transit.TransitData;
 
+import org.simpleframework.xml.Serializer;
+
 public class CardInfoFragment extends ListFragment {
     private Card mCard;
     private TransitData mTransitData;
 
     public void onCreate (Bundle savedInstanceState) {
         super.onCreate(savedInstanceState);
-        mCard        = getArguments().getParcelable(AdvancedCardInfoActivity.EXTRA_CARD);
+        Serializer serializer = FareBotApplication.getInstance().getSerializer();
+        mCard = Card.fromXml(serializer, getArguments().getString(AdvancedCardInfoActivity.EXTRA_CARD));
         mTransitData = getArguments().getParcelable(CardInfoActivity.EXTRA_TRANSIT_DATA);
     }
 
diff --git a/src/main/java/com/codebutler/farebot/fragment/CardRefillsFragment.java b/src/main/java/com/codebutler/farebot/fragment/CardRefillsFragment.java
index 96ab031..52952a0 100644
--- a/src/main/java/com/codebutler/farebot/fragment/CardRefillsFragment.java
+++ b/src/main/java/com/codebutler/farebot/fragment/CardRefillsFragment.java
@@ -23,6 +23,7 @@
 package com.codebutler.farebot.fragment;
 
 import android.app.Activity;
+import android.app.ListFragment;
 import android.content.Context;
 import android.os.Bundle;
 import android.view.LayoutInflater;
@@ -30,7 +31,7 @@ import android.view.View;
 import android.view.ViewGroup;
 import android.widget.ArrayAdapter;
 import android.widget.TextView;
-import android.app.ListFragment;
+
 import com.codebutler.farebot.R;
 import com.codebutler.farebot.activity.CardInfoActivity;
 import com.codebutler.farebot.transit.Refill;
diff --git a/src/main/java/com/codebutler/farebot/fragment/CardSubscriptionsFragment.java b/src/main/java/com/codebutler/farebot/fragment/CardSubscriptionsFragment.java
index d8e6f0b..5d2b6b0 100644
--- a/src/main/java/com/codebutler/farebot/fragment/CardSubscriptionsFragment.java
+++ b/src/main/java/com/codebutler/farebot/fragment/CardSubscriptionsFragment.java
@@ -22,13 +22,15 @@
 
 package com.codebutler.farebot.fragment;
 
+import android.app.ListFragment;
 import android.content.Context;
 import android.os.Bundle;
 import android.view.View;
 import android.view.ViewGroup;
 import android.widget.ArrayAdapter;
 import android.widget.TextView;
-import android.app.ListFragment;
+
+import com.codebutler.farebot.FareBotApplication;
 import com.codebutler.farebot.R;
 import com.codebutler.farebot.activity.AdvancedCardInfoActivity;
 import com.codebutler.farebot.activity.CardInfoActivity;
@@ -36,6 +38,8 @@ import com.codebutler.farebot.card.Card;
 import com.codebutler.farebot.transit.Subscription;
 import com.codebutler.farebot.transit.TransitData;
 
+import org.simpleframework.xml.Serializer;
+
 import java.text.SimpleDateFormat;
 import java.util.Locale;
 
@@ -45,7 +49,8 @@ public class CardSubscriptionsFragment extends ListFragment {
 
     public void onCreate (Bundle savedInstanceState) {
         super.onCreate(savedInstanceState);
-        mCard        = getArguments().getParcelable(AdvancedCardInfoActivity.EXTRA_CARD);
+        Serializer serializer = FareBotApplication.getInstance().getSerializer();
+        mCard = Card.fromXml(serializer, getArguments().getString(AdvancedCardInfoActivity.EXTRA_CARD));
         mTransitData = getArguments().getParcelable(CardInfoActivity.EXTRA_TRANSIT_DATA);
     }
 
diff --git a/src/main/java/com/codebutler/farebot/fragment/CardTripsFragment.java b/src/main/java/com/codebutler/farebot/fragment/CardTripsFragment.java
index 76ddc32..5002fda 100644
--- a/src/main/java/com/codebutler/farebot/fragment/CardTripsFragment.java
+++ b/src/main/java/com/codebutler/farebot/fragment/CardTripsFragment.java
@@ -23,6 +23,7 @@
 package com.codebutler.farebot.fragment;
 
 import android.app.Activity;
+import android.app.ListFragment;
 import android.content.Context;
 import android.content.Intent;
 import android.os.Bundle;
@@ -34,17 +35,20 @@ import android.widget.ArrayAdapter;
 import android.widget.ImageView;
 import android.widget.ListView;
 import android.widget.TextView;
-import android.app.ListFragment;
+
+import com.codebutler.farebot.FareBotApplication;
 import com.codebutler.farebot.R;
 import com.codebutler.farebot.activity.AdvancedCardInfoActivity;
 import com.codebutler.farebot.activity.CardInfoActivity;
 import com.codebutler.farebot.activity.TripMapActivity;
 import com.codebutler.farebot.card.Card;
-import com.codebutler.farebot.transit.OVChipTrip;
-import com.codebutler.farebot.transit.OrcaTransitData;
 import com.codebutler.farebot.transit.TransitData;
 import com.codebutler.farebot.transit.Trip;
+import com.codebutler.farebot.transit.orca.OrcaTrip;
+import com.codebutler.farebot.transit.ovc.OVChipTrip;
+
 import org.apache.commons.lang3.StringUtils;
+import org.simpleframework.xml.Serializer;
 
 import java.text.DateFormat;
 import java.util.ArrayList;
@@ -57,7 +61,8 @@ public class CardTripsFragment extends ListFragment {
 
     public void onCreate (Bundle savedInstanceState) {
         super.onCreate(savedInstanceState);
-        mCard        = getArguments().getParcelable(AdvancedCardInfoActivity.EXTRA_CARD);
+        Serializer serializer = FareBotApplication.getInstance().getSerializer();
+        mCard = Card.fromXml(serializer, getArguments().getString(AdvancedCardInfoActivity.EXTRA_CARD));
         mTransitData = getArguments().getParcelable(CardInfoActivity.EXTRA_TRANSIT_DATA);
     }
 
@@ -162,7 +167,7 @@ public class CardTripsFragment extends ListFragment {
 
             if (trip.getFare() != 0) {
                 fareTextView.setText(trip.getFareString());
-            } else if (trip instanceof OrcaTransitData.OrcaTrip) {
+            } else if (trip instanceof OrcaTrip) {
                 fareTextView.setText(R.string.pass_or_transfer);
             } else if (trip instanceof OVChipTrip) {
                 fareTextView.setText(trip.getFareString());
diff --git a/src/main/java/com/codebutler/farebot/fragment/CardsFragment.java b/src/main/java/com/codebutler/farebot/fragment/CardsFragment.java
index 238c32d..ad1795f 100644
--- a/src/main/java/com/codebutler/farebot/fragment/CardsFragment.java
+++ b/src/main/java/com/codebutler/farebot/fragment/CardsFragment.java
@@ -47,16 +47,19 @@ import android.widget.ResourceCursorAdapter;
 import android.widget.TextView;
 import android.widget.Toast;
 
-import com.codebutler.farebot.ExportHelper;
+import com.codebutler.farebot.FareBotApplication;
 import com.codebutler.farebot.R;
-import com.codebutler.farebot.Utils;
 import com.codebutler.farebot.card.Card;
+import com.codebutler.farebot.card.CardType;
 import com.codebutler.farebot.provider.CardDBHelper;
 import com.codebutler.farebot.provider.CardProvider;
 import com.codebutler.farebot.provider.CardsTableColumns;
 import com.codebutler.farebot.transit.TransitIdentity;
+import com.codebutler.farebot.util.ExportHelper;
+import com.codebutler.farebot.util.Utils;
 
 import org.apache.commons.io.FileUtils;
+import org.simpleframework.xml.Serializer;
 
 import java.io.File;
 import java.text.DateFormat;
@@ -110,8 +113,9 @@ public class CardsFragment extends ListFragment {
 
     @Override public void onListItemClick(ListView l, View v, int position, long id) {
         Uri uri = ContentUris.withAppendedId(CardProvider.CONTENT_URI_CARD, id);
-        startActivity(new Intent(Intent.ACTION_VIEW, uri));
-
+        Intent intent = new Intent(Intent.ACTION_VIEW, uri);
+        //FIXME: Bind to current package !!
+        startActivity(intent);
     }
 
     @Override public void onCreateOptionsMenu(Menu menu, MenuInflater inflater) {
@@ -207,9 +211,9 @@ public class CardsFragment extends ListFragment {
            super(getActivity(), android.R.layout.simple_list_item_2, null, false);
        }
 
-       @Override    public void bindView(View view, Context context, Cursor cursor) {
-           int    type      = cursor.getInt(cursor.getColumnIndex(CardsTableColumns.TYPE));
-           String serial    = cursor.getString(cursor.getColumnIndex(CardsTableColumns.TAG_SERIAL));
+       @Override public void bindView(View view, Context context, Cursor cursor) {
+           int type = cursor.getInt(cursor.getColumnIndex(CardsTableColumns.TYPE));
+           String serial = cursor.getString(cursor.getColumnIndex(CardsTableColumns.TAG_SERIAL));
            Date scannedAt = new Date(cursor.getLong(cursor.getColumnIndex(CardsTableColumns.SCANNED_AT)));
 
            String cacheKey = serial + scannedAt.getTime();
@@ -217,7 +221,8 @@ public class CardsFragment extends ListFragment {
            if (!mDataCache.containsKey(cacheKey)) {
                String data = cursor.getString(cursor.getColumnIndex(CardsTableColumns.DATA));
                try {
-                   mDataCache.put(cacheKey, Card.fromXml(data).parseTransitIdentity());
+                   Serializer serializer = FareBotApplication.getInstance().getSerializer();
+                   mDataCache.put(cacheKey, Card.fromXml(serializer, data).parseTransitIdentity());
                } catch (Exception ex) {
                    String error = String.format("Error: %s", Utils.getErrorMessage(ex));
                    mDataCache.put(cacheKey, new TransitIdentity(error, null));
@@ -239,11 +244,11 @@ public class CardsFragment extends ListFragment {
                textView2.setText(getString(R.string.scanned_at_format, SimpleDateFormat.getTimeInstance(DateFormat.SHORT).format(scannedAt), SimpleDateFormat.getDateInstance(DateFormat.SHORT).format(scannedAt)));
            } else {
                textView1.setText(getString(R.string.unknown_card));
-               textView2.setText(String.format("%s - %s", Card.CardType.values()[type].toString(), serial));
+               textView2.setText(String.format("%s - %s", CardType.values()[type].toString(), serial));
            }
        }
 
-       @Override    protected void onContentChanged() {
+       @Override protected void onContentChanged() {
            super.onContentChanged();
            mDataCache.clear();
        }
diff --git a/src/main/java/com/codebutler/farebot/fragment/ClassicCardRawDataFragment.java b/src/main/java/com/codebutler/farebot/fragment/ClassicCardRawDataFragment.java
index cd736b2..e998b8a 100644
--- a/src/main/java/com/codebutler/farebot/fragment/ClassicCardRawDataFragment.java
+++ b/src/main/java/com/codebutler/farebot/fragment/ClassicCardRawDataFragment.java
@@ -31,22 +31,28 @@ import android.widget.BaseExpandableListAdapter;
 import android.widget.ExpandableListView;
 import android.widget.TextView;
 
-import com.codebutler.farebot.ExpandableListFragment;
+import com.codebutler.farebot.FareBotApplication;
 import com.codebutler.farebot.R;
-import com.codebutler.farebot.Utils;
 import com.codebutler.farebot.activity.AdvancedCardInfoActivity;
+import com.codebutler.farebot.card.Card;
 import com.codebutler.farebot.card.classic.ClassicBlock;
 import com.codebutler.farebot.card.classic.ClassicCard;
 import com.codebutler.farebot.card.classic.ClassicSector;
 import com.codebutler.farebot.card.classic.InvalidClassicSector;
 import com.codebutler.farebot.card.classic.UnauthorizedClassicSector;
+import com.codebutler.farebot.util.Utils;
+
+import org.simpleframework.xml.Serializer;
+
+import java.util.List;
 
 public class ClassicCardRawDataFragment extends ExpandableListFragment {
     private ClassicCard mCard;
 
     public void onCreate (Bundle bundle) {
         super.onCreate(bundle);
-        mCard = getArguments().getParcelable(AdvancedCardInfoActivity.EXTRA_CARD);
+        Serializer serializer = FareBotApplication.getInstance().getSerializer();
+        mCard = (ClassicCard) Card.fromXml(serializer, getArguments().getString(AdvancedCardInfoActivity.EXTRA_CARD));
         setListAdapter(new ClassicRawDataAdapter(getActivity(), mCard));
     }
 
@@ -77,14 +83,14 @@ public class ClassicCardRawDataFragment extends ExpandableListFragment {
         }
 
         @Override public int getGroupCount() {
-            return mCard.getSectors().length;
+            return mCard.getSectors().size();
         }
 
         @Override public int getChildrenCount(int groupPosition) {
             ClassicSector sector = mCard.getSector(groupPosition);
             if (!(sector instanceof UnauthorizedClassicSector)) {
-                ClassicBlock[] blocks = sector.getBlocks();
-                return (blocks == null) ? 0 : blocks.length;
+                List<ClassicBlock> blocks = sector.getBlocks();
+                return (blocks == null) ? 0 : blocks.size();
             } else {
                 return 0;
             }
@@ -95,7 +101,7 @@ public class ClassicCardRawDataFragment extends ExpandableListFragment {
         }
 
         @Override public Object getChild(int groupPosition, int childPosition) {
-            return mCard.getSector(groupPosition).getBlocks()[childPosition];
+            return mCard.getSector(groupPosition).getBlocks().get(childPosition);
         }
 
         @Override public long getGroupId(int groupPosition) {
diff --git a/src/main/java/com/codebutler/farebot/fragment/DesfireCardRawDataFragment.java b/src/main/java/com/codebutler/farebot/fragment/DesfireCardRawDataFragment.java
index e4c13e0..61b5720 100644
--- a/src/main/java/com/codebutler/farebot/fragment/DesfireCardRawDataFragment.java
+++ b/src/main/java/com/codebutler/farebot/fragment/DesfireCardRawDataFragment.java
@@ -31,15 +31,19 @@ import android.widget.BaseExpandableListAdapter;
 import android.widget.ExpandableListView;
 import android.widget.TextView;
 
-import com.codebutler.farebot.ExpandableListFragment;
+import com.codebutler.farebot.FareBotApplication;
 import com.codebutler.farebot.R;
-import com.codebutler.farebot.Utils;
 import com.codebutler.farebot.activity.AdvancedCardInfoActivity;
+import com.codebutler.farebot.card.Card;
 import com.codebutler.farebot.card.desfire.DesfireApplication;
 import com.codebutler.farebot.card.desfire.DesfireCard;
 import com.codebutler.farebot.card.desfire.DesfireFile;
-import com.codebutler.farebot.card.desfire.DesfireFileSettings.RecordDesfireFileSettings;
-import com.codebutler.farebot.card.desfire.DesfireFileSettings.StandardDesfireFileSettings;
+import com.codebutler.farebot.card.desfire.InvalidDesfireFile;
+import com.codebutler.farebot.card.desfire.RecordDesfireFileSettings;
+import com.codebutler.farebot.card.desfire.StandardDesfireFileSettings;
+import com.codebutler.farebot.util.Utils;
+
+import org.simpleframework.xml.Serializer;
 
 public class DesfireCardRawDataFragment extends ExpandableListFragment {
     private DesfireCard mCard;
@@ -48,32 +52,33 @@ public class DesfireCardRawDataFragment extends ExpandableListFragment {
         return inflater.inflate(R.layout.fragment_card_raw_data, null);
     }
 
-    public void onCreate (Bundle savedInstanceState) {
+    public void onCreate(Bundle savedInstanceState) {
         super.onCreate(savedInstanceState);
-        mCard = getArguments().getParcelable(AdvancedCardInfoActivity.EXTRA_CARD);
+        Serializer serializer = FareBotApplication.getInstance().getSerializer();
+        mCard = (DesfireCard) Card.fromXml(serializer, getArguments().getString(AdvancedCardInfoActivity.EXTRA_CARD));
         setListAdapter(new BaseExpandableListAdapter() {
-            public int getGroupCount () {
-                return mCard.getApplications().length;
+            public int getGroupCount() {
+                return mCard.getApplications().size();
             }
 
             public int getChildrenCount (int groupPosition) {
-                return mCard.getApplications()[groupPosition].getFiles().length;
+                return mCard.getApplications().get(groupPosition).getFiles().size();
             }
 
             public Object getGroup (int groupPosition) {
-                return mCard.getApplications()[groupPosition];
+                return mCard.getApplications().get(groupPosition);
             }
 
             public Object getChild (int groupPosition, int childPosition) {
-                return mCard.getApplications()[groupPosition].getFiles()[childPosition];
+                return mCard.getApplications().get(groupPosition).getFiles().get(childPosition);
             }
 
             public long getGroupId (int groupPosition) {
-                return mCard.getApplications()[groupPosition].getId();
+                return mCard.getApplications().get(groupPosition).getId();
             }
 
             public long getChildId (int groupPosition, int childPosition) {
-                return mCard.getApplications()[groupPosition].getFiles()[childPosition].getId();
+                return mCard.getApplications().get(groupPosition).getFiles().get(childPosition).getId();
             }
 
             public boolean hasStableIds () {
@@ -91,7 +96,7 @@ public class DesfireCardRawDataFragment extends ExpandableListFragment {
 
                 TextView textView = (TextView) convertView.findViewById(android.R.id.text1);
 
-                DesfireApplication app = mCard.getApplications()[groupPosition];
+                DesfireApplication app = mCard.getApplications().get(groupPosition);
 
                 textView.setText("Application: 0x" + Integer.toHexString(app.getId()));
 
@@ -106,24 +111,24 @@ public class DesfireCardRawDataFragment extends ExpandableListFragment {
                 TextView textView1 = (TextView) convertView.findViewById(android.R.id.text1);
                 TextView textView2 = (TextView) convertView.findViewById(android.R.id.text2);
 
-                DesfireApplication app = mCard.getApplications()[groupPosition];
-                DesfireFile file = app.getFiles()[childPosition];
+                DesfireApplication app = mCard.getApplications().get(groupPosition);
+                DesfireFile file = app.getFiles().get(childPosition);
 
                 textView1.setText("File: 0x" + Integer.toHexString(file.getId()));
 
-                if (file instanceof DesfireFile.InvalidDesfireFile) {
-                    textView2.setText(((DesfireFile.InvalidDesfireFile) file).getErrorMessage());
+                if (file instanceof InvalidDesfireFile) {
+                    textView2.setText(((InvalidDesfireFile) file).getErrorMessage());
                 } else {
                     if (file.getFileSettings() instanceof StandardDesfireFileSettings) {
                         StandardDesfireFileSettings fileSettings = (StandardDesfireFileSettings) file.getFileSettings();
-                        textView2.setText(String.format("Type: %s, Size: %s", fileSettings.getFileTypeName(), String.valueOf(fileSettings.fileSize)));
+                        textView2.setText(String.format("Type: %s, Size: %s", fileSettings.getFileTypeName(), String.valueOf(fileSettings.getFileSize())));
                     } else if (file.getFileSettings() instanceof RecordDesfireFileSettings) {
                         RecordDesfireFileSettings fileSettings = (RecordDesfireFileSettings) file.getFileSettings();
                         textView2.setText(String.format("Type: %s, Cur Records: %s, Max Records: %s, Record Size: %s",
                                 fileSettings.getFileTypeName(),
-                                String.valueOf(fileSettings.curRecords),
-                                String.valueOf(fileSettings.maxRecords),
-                                String.valueOf(fileSettings.recordSize)));
+                                String.valueOf(fileSettings.getCurRecords()),
+                                String.valueOf(fileSettings.getMaxRecords()),
+                                String.valueOf(fileSettings.getRecordSize())));
                     } else {
                         textView2.setText("Unknown file type");
                     }
@@ -137,7 +142,7 @@ public class DesfireCardRawDataFragment extends ExpandableListFragment {
     @Override public boolean onListChildClick(ExpandableListView parent, View v, int groupPosition, int childPosition, long id) {
         DesfireFile file = (DesfireFile) getExpandableListAdapter().getChild(groupPosition, childPosition);
 
-        if (file instanceof DesfireFile.InvalidDesfireFile) {
+        if (file instanceof InvalidDesfireFile) {
             return false;
         }
 
diff --git a/src/main/java/com/codebutler/farebot/ExpandableListFragment.java b/src/main/java/com/codebutler/farebot/fragment/ExpandableListFragment.java
similarity index 99%
rename from src/main/java/com/codebutler/farebot/ExpandableListFragment.java
rename to src/main/java/com/codebutler/farebot/fragment/ExpandableListFragment.java
index 55ae4d2..2b12cf8 100644
--- a/src/main/java/com/codebutler/farebot/ExpandableListFragment.java
+++ b/src/main/java/com/codebutler/farebot/fragment/ExpandableListFragment.java
@@ -20,7 +20,7 @@
  * along with this program.  If not, see <http://www.gnu.org/licenses/>.
  */
 
-package com.codebutler.farebot;
+package com.codebutler.farebot.fragment;
 
 // From http://stackoverflow.com/questions/6051050/expandablelistfragment-with-loadermanager-for-compatibility-package
 
diff --git a/src/main/java/com/codebutler/farebot/fragment/FelicaCardRawDataFragment.java b/src/main/java/com/codebutler/farebot/fragment/FelicaCardRawDataFragment.java
index 7818022..b9e5c48 100644
--- a/src/main/java/com/codebutler/farebot/fragment/FelicaCardRawDataFragment.java
+++ b/src/main/java/com/codebutler/farebot/fragment/FelicaCardRawDataFragment.java
@@ -37,15 +37,18 @@ import android.widget.ExpandableListView;
 import android.widget.TextView;
 import android.widget.Toast;
 
-import com.codebutler.farebot.card.CardRawDataFragmentClass;
-import com.codebutler.farebot.ExpandableListFragment;
+import com.codebutler.farebot.FareBotApplication;
 import com.codebutler.farebot.R;
-import com.codebutler.farebot.Utils;
 import com.codebutler.farebot.activity.AdvancedCardInfoActivity;
+import com.codebutler.farebot.card.Card;
+import com.codebutler.farebot.card.CardRawDataFragmentClass;
 import com.codebutler.farebot.card.felica.FelicaBlock;
 import com.codebutler.farebot.card.felica.FelicaCard;
 import com.codebutler.farebot.card.felica.FelicaService;
 import com.codebutler.farebot.card.felica.FelicaSystem;
+import com.codebutler.farebot.util.Utils;
+
+import org.simpleframework.xml.Serializer;
 
 import java.util.ArrayList;
 import java.util.List;
@@ -59,7 +62,8 @@ public class FelicaCardRawDataFragment extends ExpandableListFragment {
 
     public void onCreate (Bundle bundle) {
         super.onCreate(bundle);
-        mCard = getArguments().getParcelable(AdvancedCardInfoActivity.EXTRA_CARD);
+        Serializer serializer = FareBotApplication.getInstance().getSerializer();
+        mCard = (FelicaCard) Card.fromXml(serializer, getArguments().getString(AdvancedCardInfoActivity.EXTRA_CARD));
         setListAdapter(new FelicaRawDataAdapter(getActivity(), mCard));
     }
 
@@ -102,27 +106,27 @@ public class FelicaCardRawDataFragment extends ExpandableListFragment {
         }
 
         public int getGroupCount() {
-            return mCard.getSystems().length;
+            return mCard.getSystems().size();
         }
 
         public Object getGroup(int groupPosition) {
-            return mCard.getSystems()[groupPosition];
+            return mCard.getSystems().get(groupPosition);
         }
 
         public long getGroupId(int groupPosition) {
-            return mCard.getSystems()[groupPosition].getCode();
+            return mCard.getSystems().get(groupPosition).getCode();
         }
 
         public int getChildrenCount(int groupPosition) {
-            return mCard.getSystems()[groupPosition].getServices().length;
+            return mCard.getSystems().get(groupPosition).getServices().size();
         }
 
         public Object getChild(int groupPosition, int childPosition) {
-            return mCard.getSystems()[groupPosition].getServices()[childPosition];
+            return mCard.getSystems().get(groupPosition).getServices().get(childPosition);
         }
 
         public long getChildId(int groupPosition, int childPosition) {
-            return mCard.getSystems()[groupPosition].getServices()[childPosition].getServiceCode();
+            return mCard.getSystems().get(groupPosition).getServices().get(childPosition).getServiceCode();
         }
 
         public boolean hasStableIds() {
@@ -140,7 +144,7 @@ public class FelicaCardRawDataFragment extends ExpandableListFragment {
                 view.setLayoutParams(new AbsListView.LayoutParams(MATCH_PARENT, 80));
             }
 
-            FelicaSystem system = mCard.getSystems()[groupPosition];
+            FelicaSystem system = mCard.getSystems().get(groupPosition);
 
             TextView textView = (TextView) view.findViewById(android.R.id.text1);
             textView.setText(String.format("System: 0x%s", Integer.toHexString(system.getCode())));
@@ -158,11 +162,11 @@ public class FelicaCardRawDataFragment extends ExpandableListFragment {
             TextView textView1 = (TextView) view.findViewById(android.R.id.text1);
             TextView textView2 = (TextView) view.findViewById(android.R.id.text2);
 
-            FelicaSystem system = mCard.getSystems()[groupPosition];
-            FelicaService service = system.getServices()[childPosition];
+            FelicaSystem system = mCard.getSystems().get(groupPosition);
+            FelicaService service = system.getServices().get(childPosition);
 
             textView1.setText(String.format("Service: 0x%s", Integer.toHexString(service.getServiceCode())));
-            textView2.setText(String.format("%s block(s)", service.getBlocks().length));
+            textView2.setText(String.format("%s block(s)", service.getBlocks().size()));
 
             return view;
         }
diff --git a/src/main/java/com/codebutler/farebot/fragment/KeysFragment.java b/src/main/java/com/codebutler/farebot/fragment/KeysFragment.java
index 80d7c36..58fb4a4 100644
--- a/src/main/java/com/codebutler/farebot/fragment/KeysFragment.java
+++ b/src/main/java/com/codebutler/farebot/fragment/KeysFragment.java
@@ -42,10 +42,10 @@ import android.widget.CursorAdapter;
 import android.widget.ResourceCursorAdapter;
 import android.widget.TextView;
 
-import com.codebutler.farebot.BetterAsyncTask;
 import com.codebutler.farebot.R;
 import com.codebutler.farebot.provider.CardKeyProvider;
 import com.codebutler.farebot.provider.KeysTableColumns;
+import com.codebutler.farebot.util.BetterAsyncTask;
 
 public class KeysFragment extends ListFragment implements AdapterView.OnItemLongClickListener {
     private ActionMode mActionMode;
diff --git a/src/main/java/com/codebutler/farebot/fragment/ListItemAdapter.java b/src/main/java/com/codebutler/farebot/fragment/ListItemAdapter.java
index 0922d51..69bf164 100644
--- a/src/main/java/com/codebutler/farebot/fragment/ListItemAdapter.java
+++ b/src/main/java/com/codebutler/farebot/fragment/ListItemAdapter.java
@@ -28,9 +28,10 @@ import android.view.View;
 import android.view.ViewGroup;
 import android.widget.ArrayAdapter;
 import android.widget.TextView;
+
+import com.codebutler.farebot.R;
 import com.codebutler.farebot.ui.HeaderListItem;
 import com.codebutler.farebot.ui.ListItem;
-import com.codebutler.farebot.R;
 
 import java.util.List;
 
diff --git a/src/main/java/com/codebutler/farebot/key/CardKeys.java b/src/main/java/com/codebutler/farebot/key/CardKeys.java
index 2ad667d..584d363 100644
--- a/src/main/java/com/codebutler/farebot/key/CardKeys.java
+++ b/src/main/java/com/codebutler/farebot/key/CardKeys.java
@@ -24,10 +24,12 @@ package com.codebutler.farebot.key;
 
 import android.database.Cursor;
 import android.net.Uri;
+
 import com.codebutler.farebot.FareBotApplication;
-import com.codebutler.farebot.Utils;
 import com.codebutler.farebot.provider.CardKeyProvider;
 import com.codebutler.farebot.provider.KeysTableColumns;
+import com.codebutler.farebot.util.Utils;
+
 import org.json.JSONException;
 import org.json.JSONObject;
 
diff --git a/src/main/java/com/codebutler/farebot/key/ClassicSectorKey.java b/src/main/java/com/codebutler/farebot/key/ClassicSectorKey.java
index 6c11133..167bb36 100644
--- a/src/main/java/com/codebutler/farebot/key/ClassicSectorKey.java
+++ b/src/main/java/com/codebutler/farebot/key/ClassicSectorKey.java
@@ -23,7 +23,8 @@
 package com.codebutler.farebot.key;
 
 
-import com.codebutler.farebot.Utils;
+import com.codebutler.farebot.util.Utils;
+
 import org.json.JSONException;
 import org.json.JSONObject;
 
diff --git a/src/main/java/com/codebutler/farebot/provider/BetterContentProvider.java b/src/main/java/com/codebutler/farebot/provider/BetterContentProvider.java
index c6c8573..f75bc44 100644
--- a/src/main/java/com/codebutler/farebot/provider/BetterContentProvider.java
+++ b/src/main/java/com/codebutler/farebot/provider/BetterContentProvider.java
@@ -22,7 +22,11 @@
 
 package com.codebutler.farebot.provider;
 
-import android.content.*;
+import android.content.ContentProvider;
+import android.content.ContentUris;
+import android.content.ContentValues;
+import android.content.Context;
+import android.content.UriMatcher;
 import android.database.Cursor;
 import android.database.sqlite.SQLiteDatabase;
 import android.database.sqlite.SQLiteOpenHelper;
diff --git a/src/main/java/com/codebutler/farebot/transit/ClipperTransitData.java b/src/main/java/com/codebutler/farebot/transit/ClipperTransitData.java
deleted file mode 100644
index 569837c..0000000
--- a/src/main/java/com/codebutler/farebot/transit/ClipperTransitData.java
+++ /dev/null
@@ -1,615 +0,0 @@
-/*
- * ClipperTransitData.java
- *
- * Copyright (C) 2011 Eric Butler
- *
- * Authors:
- * Eric Butler <eric@codebutler.com>
- *
- * Thanks to:
- * An anonymous contributor for reverse engineering Clipper data and providing
- * most of the code here.
- *
- * This program is free software: you can redistribute it and/or modify
- * it under the terms of the GNU General Public License as published by
- * the Free Software Foundation, either version 3 of the License, or
- * (at your option) any later version.
- *
- * This program is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU General Public License for more details.
- *
- * You should have received a copy of the GNU General Public License
- * along with this program.  If not, see <http://www.gnu.org/licenses/>.
- */
-
-package com.codebutler.farebot.transit;
-
-import android.os.Parcel;
-import com.codebutler.farebot.FareBotApplication;
-import com.codebutler.farebot.ui.ListItem;
-import com.codebutler.farebot.R;
-import com.codebutler.farebot.Utils;
-import com.codebutler.farebot.card.Card;
-import com.codebutler.farebot.card.desfire.DesfireCard;
-import com.codebutler.farebot.card.desfire.DesfireFile;
-
-import java.text.NumberFormat;
-import java.util.*;
-
-public class ClipperTransitData extends TransitData {
-    private long            mSerialNumber;
-    private short           mBalance;
-    private ClipperTrip[]   mTrips;
-    private ClipperRefill[] mRefills;
-
-    private static final int  RECORD_LENGTH   = 32;
-    private static final int  AGENCY_ACTRAN   = 0x01;
-    private static final int  AGENCY_BART     = 0x04;
-    private static final int  AGENCY_CALTRAIN = 0x06;
-    private static final int  AGENCY_GGT      = 0x0b;
-    private static final int  AGENCY_SAMTRANS = 0x0f;
-    private static final int  AGENCY_VTA      = 0x11;
-    private static final int  AGENCY_MUNI     = 0x12;
-    private static final int  AGENCY_FERRY    = 0x19;
-
-    private static final long EPOCH_OFFSET    = 0x83aa7f18;
-
-    private static Map<Integer, String> sAgencies = new HashMap<Integer, String>() {{
-        put(AGENCY_ACTRAN,   "Alameda-Contra Costa Transit District");
-        put(AGENCY_BART,     "Bay Area Rapid Transit");
-        put(AGENCY_CALTRAIN, "Caltrain");
-        put(AGENCY_GGT,      "Golden Gate Transit");
-        put(AGENCY_SAMTRANS, "San Mateo County Transit District");
-        put(AGENCY_VTA,      "Santa Clara Valley Transportation Authority");
-        put(AGENCY_MUNI,     "San Francisco Municipal");
-        put(AGENCY_FERRY,    "Golden Gate Ferry");
-    }};
-    
-    private static Map<Integer, String> sShortAgencies = new HashMap<Integer, String>() {{
-        put(AGENCY_ACTRAN,   "ACTransit");
-        put(AGENCY_BART,     "BART");
-        put(AGENCY_CALTRAIN, "Caltrain");
-        put(AGENCY_GGT,      "GGT");
-        put(AGENCY_SAMTRANS, "SAMTRANS");
-        put(AGENCY_VTA,      "VTA");
-        put(AGENCY_MUNI,     "Muni");
-        put(AGENCY_FERRY,    "Ferry");
-    }};
-
-    private static Map<Long, Station> sBartStations = new HashMap<Long, Station>() {{
-        put((long)0x01, new Station("Colma Station",                             "Colma",                "37.68468",  "-122.46626"));
-        put((long)0x02, new Station("Daly City Station",                         "Daly City",            "37.70608",  "-122.46908"));
-        put((long)0x03, new Station("Balboa Park Station",                       "Balboa Park",          "37.721556", "-122.447503"));
-        put((long)0x04, new Station("Glen Park Station",                         "Glen Park",            "37.733118", "-122.433808"));
-        put((long)0x05, new Station("24th St. Mission Station",                  "24th St.",             "37.75226",  "-122.41849"));
-        put((long)0x06, new Station("16th St. Mission Station",                  "16th St.",             "37.765228", "-122.419478"));
-        put((long)0x07, new Station("Civic Center Station",                      "Civic Center",         "37.779538", "-122.413788"));
-        put((long)0x08, new Station("Powell Street Station",                     "Powell St.",           "37.784970", "-122.40701"));
-        put((long)0x09, new Station("Montgomery St. Station",                    "Montgomery",           "37.789336", "-122.401486"));
-        put((long)0x0a, new Station("Embarcadero Station",                       "Embarcadero",          "37.793086", "-122.396276"));
-        put((long)0x0c, new Station("12th Street Oakland City Center",           "12th St.",             "37.802956", "-122.2720367"));
-        put((long)0x0d, new Station("19th Street Oakland Station",               "19th St.",             "37.80762",  "-122.26886"));
-        put((long)0x0f, new Station("Rockridge Station",                         "Rockridge",            "37.84463",  "-122.251825"));
-        put((long)0x13, new Station("Walnut Creek Station",                      "Walnut Creek",         "37.90563",  "-122.06744"));
-        put((long)0x14, new Station("Concord Station",                           "Concord",              "37.97376",  "-122.02903"));
-        put((long)0x15, new Station("North Concord/Martinez Station",            "N. Concord/Martinez",  "38.00318",  "-122.02463"));
-        put((long)0x17, new Station("Pittsburg/Bay Point Station",               "Pittsburg/Bay Pt",     "38.01892",  "-121.94240"));
-        put((long)0x18, new Station("Downtown Berkeley Station",                 "Berkeley",             "37.869868", "-122.268051"));
-        put((long)0x19, new Station("North Berkeley Station",                    "North Berkeley",       "37.874026", "-122.283882"));
-        put((long)0x20, new Station("Coliseum/Oakland Airport BART",             "Coliseum/OAK",         "37.754270", "-122.197757"));
-        put((long)0x1a, new Station("El Cerrito Plaza Station",                  "El Cerrito Plaza",     "37.903959", "-122.299271"));
-        put((long)0x1b, new Station("El Cerrito Del Norte Station",              "El Cerrito Del Norte", "37.925651", "-122.317219"));
-        put((long)0x1c, new Station("Richmond Station",                          "Richmond",             "37.93730",  "-122.35338"));
-        put((long)0x1d, new Station("Lake Merritt Station",                      "Lake Merritt",         "37.79761",  "-122.26564"));
-        put((long)0x1f, new Station("Coliseum/Oakland Airport Station",          "Coliseum/OAK",         "37.75256",  "-122.19806"));
-        put((long)0x22, new Station("Hayward Station",                           "Hayward",              "37.670387", "-122.088002"));
-        put((long)0x23, new Station("South Hayward Station",                     "South Hayward",        "37.634800", "-122.057551"));
-        put((long)0x24, new Station("Union City Station",                        "Union City",           "37.591203", "-122.017854"));
-        put((long)0x25, new Station("Fremont Station",                           "Fremont",              "37.557727", "-121.976395"));
-        put((long)0x26, new Station("Daly City Station",                         "Daly City",            "37.7066",   "-122.4696"));
-        put((long)0x28, new Station("South San Francisco Station",               "South SF",             "37.6744",   "-122.442"));
-        put((long)0x29, new Station("San Bruno Station",                         "San Bruno",            "37.63714",  "-122.415622"));
-        put((long)0x2a, new Station("San Francisco Int'l Airport Station",       "SFO",                  "37.61590",  "-122.39263"));
-        put((long)0x2b, new Station("Millbrae Station",                          "Millbrae",             "37.599935", "-122.386478"));
-    }};
-
-    private static Map<Long, String> sFerryRoutes = new HashMap<Long, String>() {{
-        put((long)0x03, "Larkspur");
-        put((long)0x04, "San Francisco");
-    }};
-
-    private static Map<Long, Station> sFerryTerminals = new HashMap<Long, Station>() {{
-        put((long)0x01, new Station("San Francisco Ferry Building", "San Francisco", "37.795873", "-122.391987"));
-        put((long)0x03, new Station("Larkspur Ferry Terminal", "Larkspur", "37.945509", "-122.50916"));
-    }};
-
-    public static boolean check (Card card) {
-        return (card instanceof DesfireCard) && (((DesfireCard) card).getApplication(0x9011f2) != null);
-    }
-    
-    public static Creator<ClipperTransitData> CREATOR = new Creator<ClipperTransitData>() {
-        public ClipperTransitData createFromParcel(Parcel parcel) {
-            return new ClipperTransitData(parcel);
-        }
-
-        public ClipperTransitData[] newArray(int size) {
-            return new ClipperTransitData[size];
-        }
-    };
-        
-    public static TransitIdentity parseTransitIdentity (Card card) {
-        try {
-           byte[] data = ((DesfireCard) card).getApplication(0x9011f2).getFile(0x08).getData();
-           return new TransitIdentity("Clipper", String.valueOf(Utils.byteArrayToLong(data, 1, 4)));
-       } catch (Exception ex) {
-           throw new RuntimeException("Error parsing Clipper serial", ex);
-       }
-    }
-
-    public ClipperTransitData(Parcel parcel) {
-        mSerialNumber = parcel.readLong();
-        mBalance      = (short) parcel.readLong();
-                
-        mTrips = new ClipperTrip[parcel.readInt()];
-        parcel.readTypedArray(mTrips, ClipperTrip.CREATOR);
-        
-        mRefills = new ClipperRefill[parcel.readInt()];
-        parcel.readTypedArray(mRefills, ClipperRefill.CREATOR);
-    }
-    
-    public ClipperTransitData(Card card) {
-        DesfireCard desfireCard = (DesfireCard) card;
-
-        byte[] data;
-
-        try {
-            data = desfireCard.getApplication(0x9011f2).getFile(0x08).getData();
-            mSerialNumber = Utils.byteArrayToLong(data, 1, 4);
-        } catch (Exception ex) {
-            throw new RuntimeException("Error parsing Clipper serial", ex);
-        }
-
-        try {
-            data = desfireCard.getApplication(0x9011f2).getFile(0x02).getData();
-            mBalance = (short) (((0xFF & data[18]) << 8) | (0xFF & data[19]));
-        } catch (Exception ex) {
-            throw new RuntimeException("Error parsing Clipper balance", ex);
-        }
-
-        try {
-            mTrips = parseTrips(desfireCard);
-        } catch (Exception ex) {
-            throw new RuntimeException("Error parsing Clipper trips", ex);
-        }
-
-        try {
-            mRefills = parseRefills(desfireCard);
-        } catch (Exception ex) {
-            throw new RuntimeException("Error parsing Clipper refills", ex);
-        }
-
-        setBalances();
-    }
-
-    @Override public String getCardName () {
-        return "Clipper";
-    }
-
-    @Override public String getBalanceString () {
-        return NumberFormat.getCurrencyInstance(Locale.US).format(mBalance / 100.0);
-    }
-
-    @Override public String getSerialNumber () {
-        return Long.toString(mSerialNumber);
-    }
-
-    @Override public Trip[] getTrips () {
-        return mTrips;
-    }
-
-    public ClipperRefill[] getRefills () {
-        return mRefills;
-    }
-
-    @Override public Subscription[] getSubscriptions() {
-        return null;
-    }
-
-    @Override public List<ListItem> getInfo() {
-        return null;
-    }
-
-    private ClipperTrip[] parseTrips (DesfireCard card) {
-        DesfireFile file = card.getApplication(0x9011f2).getFile(0x0e);
-
-        /*
-         *  This file reads very much like a record file but it professes to
-         *  be only a regular file.  As such, we'll need to extract the records
-         *  manually.
-         */
-        byte [] data = file.getData();
-        int pos = data.length - RECORD_LENGTH;
-        List<ClipperTrip> result = new ArrayList<>();
-        while (pos > 0) {
-            byte[] slice = Utils.byteArraySlice(data, pos, RECORD_LENGTH);
-            final ClipperTrip trip = createTrip(slice);
-            if (trip != null) {
-                // Some transaction types are temporary -- remove previous trip with the same timestamp.
-                ClipperTrip existingTrip = Utils.findInList(result, new Utils.Matcher<ClipperTrip>() {
-                    @Override public boolean matches(ClipperTrip otherTrip) {
-                        return trip.getTimestamp() == otherTrip.getTimestamp();
-                    }
-                });
-                if (existingTrip != null) {
-                    if (existingTrip.getExitTimestamp() != 0) {
-                        // Old trip has exit timestamp, and is therefore better.
-                        pos -= RECORD_LENGTH;
-                        continue;
-                    } else {
-                        result.remove(existingTrip);
-                    }
-                }
-                result.add(trip);
-            }
-            pos -= RECORD_LENGTH;
-        }
-        ClipperTrip[] useLog = new ClipperTrip[result.size()];
-        result.toArray(useLog);
-
-        Arrays.sort(useLog, new Trip.Comparator());
-
-        return useLog;
-    }
-
-    private ClipperTrip createTrip (byte[] useData) {
-        long timestamp, exitTimestamp, fare, agency, from, to, route;
-
-        timestamp     = Utils.byteArrayToLong(useData,  0xc, 4);
-        exitTimestamp = Utils.byteArrayToLong(useData, 0x10, 4);
-        fare          = Utils.byteArrayToLong(useData,  0x6, 2);
-        agency        = Utils.byteArrayToLong(useData,  0x2, 2);
-        from          = Utils.byteArrayToLong(useData, 0x14, 2);
-        to            = Utils.byteArrayToLong(useData, 0x16, 2);
-        route         = Utils.byteArrayToLong(useData, 0x1c, 2);
-
-        if (agency == 0)
-            return null;
-
-        // Use a magic number to offset the timestamp
-        timestamp -= EPOCH_OFFSET;
-
-        return new ClipperTrip(timestamp, exitTimestamp, fare, agency, from, to, route);
-    }
-
-    private ClipperRefill[] parseRefills (DesfireCard card) {
-        DesfireFile file = card.getApplication(0x9011f2).getFile(0x04);
-
-        /*
-         *  This file reads very much like a record file but it professes to
-         *  be only a regular file.  As such, we'll need to extract the records
-         *  manually.
-         */
-        byte [] data = file.getData();
-        int pos = data.length - RECORD_LENGTH;
-        List<ClipperRefill> result = new ArrayList<>();
-        while (pos > 0) {
-            byte[] slice = Utils.byteArraySlice(data, pos, RECORD_LENGTH);
-            ClipperRefill refill = createRefill(slice);
-            if (refill != null)
-                result.add(refill);
-            pos -= RECORD_LENGTH;
-        }
-        ClipperRefill[] useLog = new ClipperRefill[result.size()];
-        useLog = result.toArray(useLog);
-        Arrays.sort(useLog, new Comparator<ClipperRefill>() {
-            public int compare(ClipperRefill r, ClipperRefill r1) {
-                return Long.valueOf(r1.getTimestamp()).compareTo(r.getTimestamp());
-            }
-        });
-        return useLog;
-    }
-
-    private ClipperRefill createRefill (byte[] useData) {
-        long timestamp, amount, agency, machineid;
-
-        timestamp = Utils.byteArrayToLong(useData, 0x4, 4);
-        agency    = Utils.byteArrayToLong(useData, 0x2, 2);
-        machineid = Utils.byteArrayToLong(useData, 0x8, 4);
-        amount    = Utils.byteArrayToLong(useData, 0xe, 2);
-
-        if (timestamp == 0)
-            return null;
-
-        timestamp -= EPOCH_OFFSET;
-        return new ClipperRefill(timestamp, amount, agency, machineid);
-    }
-
-    private void setBalances() {
-        int trip_idx = 0;
-        int refill_idx = 0;
-        long balance = (long) mBalance;
-
-        while (trip_idx < mTrips.length) {
-            while (refill_idx < mRefills.length &&
-                    mRefills[refill_idx].getTimestamp() >
-                        mTrips[trip_idx].getTimestamp()) {
-                balance -= mRefills[refill_idx].mAmount;
-                refill_idx++;
-            }
-            mTrips[trip_idx].mBalance = balance;
-            balance += mTrips[trip_idx].mFare;
-            trip_idx++;
-        }
-    }
-
-    public static String getAgencyName(int agency) {
-        if (sAgencies.containsKey(agency)) {
-            return sAgencies.get(agency);
-        }
-        return FareBotApplication.getInstance().getString(R.string.unknown_format, "0x" + Long.toString(agency, 16));
-    }
-
-    public static String getShortAgencyName (int agency) {
-        if (sShortAgencies.containsKey(agency)) {
-            return sShortAgencies.get(agency);
-        }
-        return FareBotApplication.getInstance().getString(R.string.unknown_format, "0x" + Long.toString(agency, 16));
-    }
-
-    public void writeToParcel(Parcel parcel, int flags) {
-        parcel.writeLong(mSerialNumber);
-        parcel.writeLong(mBalance);
-
-        parcel.writeInt(mTrips.length);
-        parcel.writeTypedArray(mTrips,  flags);
-
-        parcel.writeInt(mRefills.length);
-        parcel.writeTypedArray(mRefills, flags);
-    }
-
-    public static class ClipperTrip extends Trip {
-        private final long mTimestamp;
-        private final long mExitTimestamp;
-        private final long mFare;
-        private final long mAgency;
-        private final long mFrom;
-        private final long mTo;
-        private final long mRoute;
-        private long mBalance;
-
-        public ClipperTrip (long timestamp, long exitTimestamp, long fare, long agency, long from, long to, long route) {
-            mTimestamp      = timestamp;
-            mExitTimestamp  = exitTimestamp;
-            mFare           = fare;
-            mAgency         = agency;
-            mFrom           = from;
-            mTo             = to;
-            mRoute          = route;
-            mBalance        = 0;
-        }
-
-        public static Creator<ClipperTrip> CREATOR = new Creator<ClipperTrip>() {
-            public ClipperTrip createFromParcel(Parcel parcel) {
-                return new ClipperTrip(parcel);
-            }
-
-            public ClipperTrip[] newArray(int size) {
-                return new ClipperTrip[size];
-            }
-        };
-
-        private ClipperTrip (Parcel parcel) {
-            mTimestamp     = parcel.readLong();
-            mExitTimestamp = parcel.readLong();
-            mFare          = parcel.readLong();
-            mAgency        = parcel.readLong();
-            mFrom          = parcel.readLong();
-            mTo            = parcel.readLong();
-            mRoute         = parcel.readLong();
-            mBalance       = parcel.readLong();
-        }
-
-        @Override public long getTimestamp () {
-            return mTimestamp;
-        }
-
-        @Override public long getExitTimestamp () {
-            return mExitTimestamp;
-        }
-
-        @Override public String getAgencyName () {
-            return ClipperTransitData.getAgencyName((int)mAgency);
-        }
-
-        @Override public String getShortAgencyName () {
-            return ClipperTransitData.getShortAgencyName((int)mAgency);
-        }
-
-        @Override public String getRouteName () {
-            if (mAgency == AGENCY_FERRY &&
-                sFerryRoutes.containsKey(mRoute)) {
-                return sFerryRoutes.get(mRoute);
-            } else {
-                // FIXME: Need to find bus route #s
-                // return "(Route 0x" + Long.toString(mRoute, 16) + ")";
-                return null;
-            }
-        }
-
-        @Override public String getFareString () {
-            return NumberFormat.getCurrencyInstance(Locale.US).format((double)mFare / 100.0);
-        }
-
-        @Override public double getFare () {
-            return mFare;
-        }
-
-        @Override public String getBalanceString () {
-            return NumberFormat.getCurrencyInstance(Locale.US).format((double)mBalance / 100.0);
-        }
-
-        @Override public Station getStartStation() {
-            if (mAgency == AGENCY_BART) {
-                if (sBartStations.containsKey(mFrom)) {
-                    return sBartStations.get(mFrom);
-                }
-            } else if (mAgency == AGENCY_FERRY) {
-                if (sFerryTerminals.containsKey(mFrom)) {
-                    return sFerryTerminals.get(mFrom);
-                }
-            }
-            return null;
-        }
-
-        @Override public Station getEndStation() {
-            if (mAgency == AGENCY_BART) {
-                if (sBartStations.containsKey(mTo)) {
-                    return sBartStations.get(mTo);
-                }
-            } else if (mAgency == AGENCY_FERRY) {
-                if (sFerryTerminals.containsKey(mTo)) {
-                    return sFerryTerminals.get(mTo);
-                }
-            }
-            return null;
-        }
-
-        @Override public String getStartStationName () {
-            if (mAgency == AGENCY_BART || mAgency == AGENCY_FERRY) {
-                Station station = getStartStation();
-                if (station != null)
-                    return station.getShortStationName();
-                else
-                    return "Station #0x" + Long.toString(mFrom, 16);
-            } else if (mAgency == AGENCY_MUNI) {
-                return null; // Coach number is not collected
-            } else if (mAgency == AGENCY_GGT || mAgency == AGENCY_CALTRAIN) {
-                return "Zone #" + mFrom;
-            } else {
-                return "(Unknown Station)";
-            }
-        }
-
-        @Override public String getEndStationName () {
-            if (mAgency == AGENCY_BART) {
-                Station station = getEndStation();
-                if (station != null)
-                    return sBartStations.get(mTo).getShortStationName();
-                else
-                    return "Station #0x" + Long.toString(mTo, 16);
-            } else if (mAgency == AGENCY_MUNI) {
-                return null; // Coach number is not collected
-            } else if (mAgency == AGENCY_GGT || mAgency == AGENCY_CALTRAIN ||
-                       mAgency == AGENCY_FERRY) {
-                if (mTo == 0xffff)
-                    return "(End of line)";
-                return "Zone #" + mTo;
-            } else {
-                return "(Unknown Station)";
-            }
-        }
-
-        @Override public Mode getMode() {
-            if (mAgency == AGENCY_ACTRAN)
-                return Mode.BUS;
-            if (mAgency == AGENCY_BART)
-                return Mode.METRO;
-            if (mAgency == AGENCY_CALTRAIN)
-                return Mode.TRAIN;
-            if (mAgency == AGENCY_GGT)
-                return Mode.BUS;
-            if (mAgency == AGENCY_SAMTRANS)
-                return Mode.BUS;
-            if (mAgency == AGENCY_VTA)
-                return Mode.BUS; // FIXME: or Mode.TRAM for light rail
-            if (mAgency == AGENCY_MUNI)
-                return Mode.BUS; // FIXME: or Mode.TRAM for "Muni Metro"
-            if (mAgency == AGENCY_FERRY)
-                return Mode.FERRY;
-            return Mode.OTHER;
-        }
-
-        @Override public boolean hasTime() {
-            return true;
-        }
-
-        public void writeToParcel(Parcel parcel, int flags) {
-            parcel.writeLong(mTimestamp);
-            parcel.writeLong(mExitTimestamp);
-            parcel.writeLong(mFare);
-            parcel.writeLong(mAgency);
-            parcel.writeLong(mFrom);
-            parcel.writeLong(mTo);
-            parcel.writeLong(mRoute);
-            parcel.writeLong(mBalance);
-        }
-
-        public int describeContents() {
-            return 0;
-        }
-    }
-
-    public static class ClipperRefill extends Refill {
-        private final long mTimestamp;
-        private final long mAmount;
-        private final long mMachineID;
-        private final long mAgency;
-
-        public static Creator<ClipperRefill> CREATOR = new Creator<ClipperRefill>() {
-            public ClipperRefill createFromParcel(Parcel parcel) {
-                return new ClipperRefill(parcel);
-            }
-
-            public ClipperRefill[] newArray(int size) {
-                return new ClipperRefill[size];
-            }
-        };
-
-        public ClipperRefill (long timestamp, long amount, long agency, long machineid) {
-            mTimestamp  = timestamp;
-            mAmount     = amount;
-            mMachineID  = machineid;
-            mAgency     = agency;
-        }
-
-        public ClipperRefill(Parcel parcel) {
-            mTimestamp = parcel.readLong();
-            mAmount    = parcel.readLong();
-            mMachineID = parcel.readLong();
-            mAgency    = parcel.readLong();
-        }
-
-        @Override public long getTimestamp () {
-            return mTimestamp;
-        }
-
-        @Override public long getAmount () {
-            return mAmount;
-        }
-
-        @Override public String getAmountString () {
-            return NumberFormat.getCurrencyInstance(Locale.US).format((double)mAmount / 100.0);
-        }
-
-        public long getMachineID () {
-            return mMachineID;
-        }
-
-        @Override public String getAgencyName () {
-            return ClipperTransitData.getAgencyName((int)mAgency);
-        }
-
-        @Override public String getShortAgencyName () {
-            return ClipperTransitData.getShortAgencyName((int) mAgency);
-        }
-
-        public void writeToParcel(Parcel parcel, int flags) {
-            parcel.writeLong(mTimestamp);
-            parcel.writeLong(mAmount);
-            parcel.writeLong(mMachineID);
-            parcel.writeLong(mAgency);
-        }
-    }
-}
diff --git a/src/main/java/com/codebutler/farebot/transit/EdyTransitData.java b/src/main/java/com/codebutler/farebot/transit/EdyTransitData.java
deleted file mode 100644
index abb2e46..0000000
--- a/src/main/java/com/codebutler/farebot/transit/EdyTransitData.java
+++ /dev/null
@@ -1,314 +0,0 @@
-/*
- * EdyTransitData.java
- *
- * Authors:
- * Chris Norden
- * Eric Butler <eric@codebutler.com>
- *
- * Based on code from http://code.google.com/p/nfc-felica/
- * nfc-felica by Kazzz. See project URL for complete author information.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- *
- */
-
-package com.codebutler.farebot.transit;
-
-import android.app.Application;
-import android.os.Parcel;
-import com.codebutler.farebot.FareBotApplication;
-import com.codebutler.farebot.ui.ListItem;
-import com.codebutler.farebot.R;
-import com.codebutler.farebot.card.felica.FelicaBlock;
-import com.codebutler.farebot.card.felica.FelicaCard;
-import com.codebutler.farebot.card.felica.FelicaService;
-import net.kazzz.felica.lib.FeliCaLib;
-import net.kazzz.felica.lib.Util;
-
-import java.text.NumberFormat;
-import java.util.ArrayList;
-import java.util.Calendar;
-import java.util.Date;
-import java.util.List;
-import java.util.Locale;
-
-public class EdyTransitData extends TransitData {
-    private EdyTrip[] mTrips;
-
-    // defines
-    public static final int FELICA_SERVICE_EDY_ID       = 0x110B;
-    public static final int FELICA_SERVICE_EDY_BALANCE  = 0x1317;
-    public static final int FELICA_SERVICE_EDY_HISTORY  = 0x170F;
-
-    public static final int FELICA_MODE_EDY_DEBIT       = 0x20;
-    public static final int FELICA_MODE_EDY_CHARGE      = 0x02;
-    public static final int FELICA_MODE_EDY_GIFT        = 0x04;
-
-    // private data
-    private byte[]          mSerialNumber = new byte[8];
-    private int             mCurrentBalance;
-
-
-    public Creator<EdyTransitData> CREATOR = new Creator<EdyTransitData>() {
-        public EdyTransitData createFromParcel(Parcel parcel) {
-            return new EdyTransitData(parcel);
-        }
-
-        public EdyTransitData[] newArray(int size) {
-            return new EdyTransitData[size];
-        }
-    };
-
-    public static boolean check(FelicaCard card) {
-        return (card.getSystem(FeliCaLib.SYSTEMCODE_EDY) != null);
-    }
-
-    public static TransitIdentity parseTransitIdentity (FelicaCard card) {
-        return new TransitIdentity("Edy", null);
-    }
-
-    public EdyTransitData(Parcel parcel) {
-        mTrips = new EdyTrip[parcel.readInt()];
-        parcel.readTypedArray(mTrips, EdyTrip.CREATOR);
-    }
-
-    public EdyTransitData(FelicaCard card) {
-        // card ID is in block 0, bytes 2-9, big-endian ordering
-        FelicaService serviceID = card.getSystem(FeliCaLib.SYSTEMCODE_EDY).getService(FELICA_SERVICE_EDY_ID);
-        FelicaBlock[] blocksID = serviceID.getBlocks();
-        FelicaBlock blockID = blocksID[0];
-        byte[] dataID = blockID.getData();
-        for (int i=2; i<10; i++)
-        {
-            mSerialNumber[i-2] = dataID[i];
-        }
-
-        // current balance info in block 0, bytes 0-3, little-endian ordering
-        FelicaService serviceBalance = card.getSystem(FeliCaLib.SYSTEMCODE_EDY).getService(FELICA_SERVICE_EDY_BALANCE);
-        FelicaBlock[] blocksBalance = serviceBalance.getBlocks();
-        FelicaBlock blockBalance = blocksBalance[0];
-        byte[] dataBalance = blockBalance.getData();
-        mCurrentBalance = Util.toInt(dataBalance[3], dataBalance[2], dataBalance[1], dataBalance[0]);
-
-        // now read the transaction history
-        FelicaService serviceHistory = card.getSystem(FeliCaLib.SYSTEMCODE_EDY).getService(FELICA_SERVICE_EDY_HISTORY);
-        List<EdyTrip> trips = new ArrayList<>();
-
-        // Read blocks in order
-        FelicaBlock[] blocks = serviceHistory.getBlocks();
-        for (int i = 0; i < blocks.length; i++) {
-            FelicaBlock block = blocks[i];
-            EdyTrip trip = new EdyTrip(block);
-            trips.add(trip);
-        }
-
-        mTrips = trips.toArray(new EdyTrip[trips.size()]);
-    }
-
-    @Override public String getBalanceString() {
-        NumberFormat format = NumberFormat.getCurrencyInstance(Locale.JAPAN);
-        format.setMaximumFractionDigits(0);
-        return format.format(mCurrentBalance);
-    }
-
-    @Override public String getSerialNumber() {
-        StringBuilder str = new StringBuilder(20);
-        for (int i=0; i<8; i+=2) {
-            str.append(String.format("%02X", mSerialNumber[i]));
-            str.append(String.format("%02X", mSerialNumber[i+1]));
-            if (i < 6)
-                str.append(" ");
-        }
-        return str.toString();
-    }
-
-    @Override public Trip[] getTrips() {
-        return mTrips;
-    }
-
-    @Override public Refill[] getRefills() {
-        return null;
-    }
-
-    @Override public Subscription[] getSubscriptions() {
-        return null;
-    }
-
-    @Override public List<ListItem> getInfo() {
-        return null;
-    }
-
-    @Override public String getCardName() {
-        return "Edy";
-    }
-
-    public void writeToParcel(Parcel parcel, int flags) {
-        parcel.writeInt(mTrips.length);
-        parcel.writeTypedArray(mTrips, flags);
-    }
-
-    public static class EdyTrip extends Trip {
-        private final int mProcessType;
-        private final int mSequenceNumber;
-        private final Date mTimestamp;
-        private final int mTransactionAmount;
-        private final int mBalance;
-
-        public EdyTrip(FelicaBlock block) {
-            byte[] data = block.getData();
-
-//          Data Offsets with values
-//          ------------------------
-//          0x00    type (0x20 = payment, 0x02 = charge, 0x04 = gift)
-//          0x01    sequence number (3 bytes, big-endian)
-//          0x04    date/time (upper 15 bits - added as day offset, lower 17 bits - added as second offset to Jan 1, 2000 00:00:00)
-//          0x08    transaction amount (big-endian)
-//          0x0c    balance (big-endian)
-
-
-            mProcessType = data[0];
-            mSequenceNumber = Util.toInt(data[1], data[2], data[3]);
-            mTimestamp = extractDate(data);
-            mTransactionAmount = Util.toInt(data[8], data[9], data[10], data[11]);
-            mBalance = Util.toInt(data[12], data[13], data[14], data[15]);
-        }
-        
-        public static Creator<EdyTrip> CREATOR = new Creator<EdyTrip>() {
-            public EdyTrip createFromParcel(Parcel parcel) {
-                return new EdyTrip(parcel);
-            }
-
-            public EdyTrip[] newArray(int size) {
-                return new EdyTrip[size];
-            }
-        };
-
-        public EdyTrip (Parcel parcel) {
-            mProcessType = parcel.readInt();
-            mSequenceNumber = parcel.readInt();
-            mTimestamp  = new Date(parcel.readLong());
-            mTransactionAmount = parcel.readInt();
-            mBalance = parcel.readInt();
-        }
-
-        public void writeToParcel(Parcel parcel, int flags) {
-            parcel.writeInt(mProcessType);
-            parcel.writeInt(mSequenceNumber);
-            parcel.writeLong(mTimestamp.getTime());
-            parcel.writeInt(mTransactionAmount);
-            parcel.writeInt(mBalance);
-        }
-
-        public Mode getMode() {
-            if (mProcessType == FELICA_MODE_EDY_DEBIT) {
-                return Mode.POS;
-            } else if (mProcessType == FELICA_MODE_EDY_CHARGE) {
-                return Mode.TICKET_MACHINE;
-            } else if (mProcessType == FELICA_MODE_EDY_GIFT) {
-                return Mode.VENDING_MACHINE;
-            } else {
-                return Mode.OTHER;
-            }
-        }
-
-        public long getTimestamp() {
-            if (mTimestamp != null)
-                return mTimestamp.getTime() / 1000;
-            else
-                return 0;
-        }
-
-        public double getFare () {
-            return mTransactionAmount;
-        }
-
-        public String getFareString () {
-            NumberFormat format = NumberFormat.getCurrencyInstance(Locale.JAPAN);
-            format.setMaximumFractionDigits(0);
-            if (mProcessType != FELICA_MODE_EDY_DEBIT)
-                return "+" + format.format(mTransactionAmount);
-            return format.format(mTransactionAmount);
-        }
-
-        public String getBalanceString () {
-            NumberFormat format = NumberFormat.getCurrencyInstance(Locale.JAPAN);
-            format.setMaximumFractionDigits(0);
-            return format.format(mBalance);
-        }
-
-        // use agency name for the tranaction number
-        public String getShortAgencyName () {
-            return getAgencyName();
-        }
-        public String getAgencyName () {
-            NumberFormat format = NumberFormat.getIntegerInstance();
-            format.setMinimumIntegerDigits(8);
-            format.setGroupingUsed(false);
-            Application app = FareBotApplication.getInstance();
-            String str;
-            if (mProcessType != FELICA_MODE_EDY_DEBIT)
-                str = app.getString(R.string.felica_process_charge);
-            else
-                str = app.getString(R.string.felica_process_merchandise_purchase);
-            str += " " + app.getString(R.string.transaction_sequence) + format.format(mSequenceNumber);
-            return str;
-        }
-
-        public boolean hasTime() {
-            if (mTimestamp != null)
-                return true;
-            else
-                return false;
-        }
-
-        // unused
-        public String getRouteName () {
-            return null;
-        }
-        public String getStartStationName () {
-            return null;
-        }
-        public Station getStartStation () {
-            return null;
-        }
-        public String getEndStationName () {
-            return null;
-        }
-        public Station getEndStation () {
-            return null;
-        }
-        public int describeContents() {
-            return 0;
-        }
-        public long getExitTimestamp() {
-            return 0;
-        }
-    }
-
-    private static Date extractDate(byte[] data) {
-        int fulloffset = Util.toInt(data[4], data[5], data[6], data[7]);
-        if (fulloffset == 0)
-            return null;
-
-        int dateoffset = fulloffset >>> 17;
-        int timeoffset = fulloffset & 0x1ffff;
-
-        Calendar c = Calendar.getInstance();
-        c.set(2000, 0, 1, 0, 0, 0);
-        c.add(Calendar.DATE, dateoffset);
-        c.add(Calendar.SECOND, timeoffset);
-
-        return c.getTime();
-    }
-}
-
diff --git a/src/main/java/com/codebutler/farebot/transit/OrcaTransitData.java b/src/main/java/com/codebutler/farebot/transit/OrcaTransitData.java
deleted file mode 100644
index 855d11e..0000000
--- a/src/main/java/com/codebutler/farebot/transit/OrcaTransitData.java
+++ /dev/null
@@ -1,507 +0,0 @@
-/*
- * OrcaTransitData.java
- *
- * Copyright (C) 2011 Eric Butler
- *
- * Authors:
- * Eric Butler <eric@codebutler.com>
- *
- * Thanks to:
- * Karl Koscher <supersat@cs.washington.edu>
- *
- * This program is free software: you can redistribute it and/or modify
- * it under the terms of the GNU General Public License as published by
- * the Free Software Foundation, either version 3 of the License, or
- * (at your option) any later version.
- *
- * This program is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU General Public License for more details.
- *
- * You should have received a copy of the GNU General Public License
- * along with this program.  If not, see <http://www.gnu.org/licenses/>.
- */
-
-package com.codebutler.farebot.transit;
-
-import android.os.Parcel;
-import com.codebutler.farebot.FareBotApplication;
-import com.codebutler.farebot.ui.ListItem;
-import com.codebutler.farebot.R;
-import com.codebutler.farebot.Utils;
-import com.codebutler.farebot.card.Card;
-import com.codebutler.farebot.card.desfire.DesfireCard;
-import com.codebutler.farebot.card.desfire.DesfireFile;
-import com.codebutler.farebot.card.desfire.DesfireFile.RecordDesfireFile;
-import com.codebutler.farebot.card.desfire.DesfireRecord;
-import org.apache.commons.lang3.ArrayUtils;
-
-import java.text.NumberFormat;
-import java.util.ArrayList;
-import java.util.Arrays;
-import java.util.Collections;
-import java.util.HashMap;
-import java.util.List;
-import java.util.Locale;
-import java.util.Map;
-
-public class OrcaTransitData extends TransitData {
-    private static final int AGENCY_KCM = 0x04;
-    private static final int AGENCY_PT  = 0x06;
-    private static final int AGENCY_ST  = 0x07;
-    private static final int AGENCY_CT  = 0x02;
-    private static final int AGENCY_WSF = 0x08;
-
-    // For future use.
-    private static final int TRANS_TYPE_PURSE_USE   = 0x0c;
-    private static final int TRANS_TYPE_CANCEL_TRIP = 0x01;
-    private static final int TRANS_TYPE_TAP_IN      = 0x03;
-    private static final int TRANS_TYPE_TAP_OUT     = 0x07;
-    private static final int TRANS_TYPE_PASS_USE    = 0x60;
-
-    private int    mSerialNumber;
-    private double mBalance;
-    private Trip[] mTrips;
-
-    public static boolean check (Card card) {
-        return (card instanceof DesfireCard) && (((DesfireCard) card).getApplication(0x3010f2) != null);
-    }
-
-    public static TransitIdentity parseTransitIdentity(Card card) {
-        try {
-            byte[] data = ((DesfireCard) card).getApplication(0xffffff).getFile(0x0f).getData();
-            return new TransitIdentity("ORCA", String.valueOf(Utils.byteArrayToInt(data, 4, 4)));
-        } catch (Exception ex) {
-            throw new RuntimeException("Error parsing ORCA serial", ex);
-        }
-    }
-
-    public OrcaTransitData (Parcel parcel) {
-        mSerialNumber = parcel.readInt();
-        mBalance      = parcel.readDouble();
-
-        parcel.readInt();
-        mTrips = (Trip[]) parcel.readParcelableArray(null);
-    }
-    
-    public OrcaTransitData (Card card) {
-        DesfireCard desfireCard = (DesfireCard) card;
-
-        byte[] data;
-
-        try {
-            data = desfireCard.getApplication(0xffffff).getFile(0x0f).getData();
-            mSerialNumber = Utils.byteArrayToInt(data, 5, 3);
-        } catch (Exception ex) {
-            throw new RuntimeException("Error parsing ORCA serial", ex);
-        }
-
-        try {
-            data = desfireCard.getApplication(0x3010f2).getFile(0x04).getData();
-            mBalance = Utils.byteArrayToInt(data, 41, 2);
-        } catch (Exception ex) {
-            throw new RuntimeException("Error parsing ORCA balance", ex);
-        }
-
-        try {
-            mTrips = parseTrips(desfireCard);
-        } catch (Exception ex) {
-            throw new RuntimeException("Error parsing ORCA trips", ex);
-        }
-    }
-
-    @Override public String getCardName () {
-        return "ORCA";
-    }
-
-    @Override public String getBalanceString () {
-        return NumberFormat.getCurrencyInstance(Locale.US).format(mBalance / 100);
-    }
-
-    @Override public String getSerialNumber () {
-        return Integer.toString(mSerialNumber);
-    }
-
-    @Override public Trip[] getTrips () {
-        return mTrips;
-    }
-
-    @Override public Refill[] getRefills () {
-        return null;
-    }
-
-    @Override public Subscription[] getSubscriptions() {
-        return null;
-    }
-
-    @Override public List<ListItem> getInfo() {
-        return null;
-    }
-
-    private Trip[] parseTrips(DesfireCard card) {
-        List<Trip> trips = new ArrayList<>();
-
-        DesfireFile file = card.getApplication(0x3010f2).getFile(0x02);
-        if (file instanceof RecordDesfireFile) {
-            RecordDesfireFile recordFile = (RecordDesfireFile) card.getApplication(0x3010f2).getFile(0x02);
-
-            OrcaTrip[] useLog = new OrcaTrip[recordFile.getRecords().length];
-            for (int i = 0; i < useLog.length; i++) {
-                useLog[i] = new OrcaTrip(recordFile.getRecords()[i]);
-            }
-            Arrays.sort(useLog, new Trip.Comparator());
-            ArrayUtils.reverse(useLog);
-
-            for (int i = 0; i < useLog.length; i++) {
-                OrcaTrip trip = useLog[i];
-                OrcaTrip nextTrip = (i+1 < useLog.length) ? useLog[i+1] : null;
-
-                if (isSameTrip(trip, nextTrip)) {
-                    trips.add(new MergedOrcaTrip(trip, nextTrip));
-                    i++;
-                    continue;
-                }
-
-                trips.add(trip);
-            }
-        }
-        Collections.sort(trips, new Trip.Comparator());
-        return trips.toArray(new Trip[trips.size()]);
-    }
-
-    private boolean isSameTrip(OrcaTrip firstTrip, OrcaTrip secondTrip) {
-        return firstTrip != null && secondTrip != null &&
-            firstTrip.mTransType == TRANS_TYPE_TAP_IN &&
-            (secondTrip.mTransType ==TRANS_TYPE_TAP_OUT || secondTrip.mTransType == TRANS_TYPE_CANCEL_TRIP) &&
-            firstTrip.mAgency == secondTrip.mAgency;
-    }
-
-    public void writeToParcel(Parcel parcel, int flags) {
-        parcel.writeInt(mSerialNumber);
-        parcel.writeDouble(mBalance);
-
-        if (mTrips != null) {
-            parcel.writeInt(mTrips.length);
-            parcel.writeParcelableArray(mTrips, flags);
-        } else {
-            parcel.writeInt(0);
-        }
-    }
-
-    public static class OrcaTrip extends Trip {
-        private final long mTimestamp;
-        private final long mCoachNum;
-        private final long mFare;
-        private final long mNewBalance;
-        private final long mAgency;
-        private final long mTransType;
-
-        private static Station[] sLinkStations = new Station[] {
-            new Station("Westlake Station",                   "Westlake",      "47.6113968", "-122.337502"),
-            new Station("University Station",                 "University",    "47.6072502", "-122.335754"),
-            new Station("Pioneer Square Station",             "Pioneer Sq",    "47.6021461", "-122.33107"),
-            new Station("International District Station",     "ID",            "47.5976601", "-122.328217"),
-            new Station("Stadium Station",                    "Stadium",       "47.5918121", "-122.327354"),
-            new Station("SODO Station",                       "SODO",          "47.5799484", "-122.327515"),
-            new Station("Beacon Hill Station",                "Beacon Hill",   "47.5791245", "-122.311287"),
-            new Station("Mount Baker Station",                "Mount Baker",   "47.5764389", "-122.297737"),
-            new Station("Columbia City Station",              "Columbia City", "47.5589523", "-122.292343"),
-            new Station("Othello Station",                    "Othello",       "47.5375366", "-122.281471"),
-            new Station("Rainier Beach Station",              "Rainier Beach", "47.5222626", "-122.279579"),
-            new Station("Tukwila International Blvd Station", "Tukwila",       "47.4642754", "-122.288391"),
-            new Station("Seatac Airport Station",             "Sea-Tac",       "47.4445305", "-122.297012")
-        };
-
-        private static Map<Integer, Station> sWSFTerminals = new HashMap<Integer, Station>() {{
-            put(10101, new Station("Seattle Terminal",           "Seattle",    "47.602722", "-122.338512"));
-            put(10103, new Station("Bainbridge Island Terminal", "Bainbridge", "47.62362",  "-122.51082" ));
-        }};
-
-        public OrcaTrip (DesfireRecord record) {
-            byte[] useData = record.getData();
-            long[] usefulData = new long[useData.length];
-    
-            for (int i = 0; i < useData.length; i++) {
-                usefulData[i] = ((long)useData[i]) & 0xFF;
-            }
-    
-            mTimestamp =
-                ((0x0F & usefulData[3]) << 28) |
-                (usefulData[4] << 20) |
-                (usefulData[5] << 12) |
-                (usefulData[6] << 4)  |
-                (usefulData[7] >> 4);
-    
-            mCoachNum = ((usefulData[9] & 0xf) << 12) | (usefulData[10] << 4) | ((usefulData[11] & 0xf0) >> 4);
-
-            if (usefulData[15] == 0x00 || usefulData[15] == 0xFF) {
-                // FIXME: This appears to be some sort of special case for transfers and passes.
-                mFare = 0;
-            } else {
-                mFare = (usefulData[15] << 7) | (usefulData[16] >> 1);
-            }
-
-            mNewBalance = (usefulData[34] << 8) | usefulData[35];
-            mAgency     = usefulData[3] >> 4;
-            mTransType  = (usefulData[17]);
-        }
-        
-        public static Creator<OrcaTrip> CREATOR = new Creator<OrcaTrip>() {
-            public OrcaTrip createFromParcel(Parcel parcel) {
-                return new OrcaTrip(parcel);
-            }
-
-            public OrcaTrip[] newArray(int size) {
-                return new OrcaTrip[size];
-            }
-        };
-
-        private OrcaTrip (Parcel parcel) {
-            mTimestamp  = parcel.readLong();
-            mCoachNum   = parcel.readLong();
-            mFare       = parcel.readLong();
-            mNewBalance = parcel.readLong();
-            mAgency     = parcel.readLong();
-            mTransType  = parcel.readLong();
-        }
-
-        @Override public long getTimestamp() {
-            return mTimestamp;
-        }
-
-        @Override public long getExitTimestamp() {
-            return 0;
-        }
-
-        @Override public String getAgencyName () {
-            switch ((int) mAgency) {
-                case AGENCY_CT:
-                    return "Community Transit";
-                case AGENCY_KCM:
-                    return "King County Metro Transit";
-                case AGENCY_PT:
-                    return "Pierce Transit";
-                case AGENCY_ST:
-                    return "Sound Transit";
-                case AGENCY_WSF:
-                    return "Washington State Ferries";
-            }
-            return String.format("Unknown Agency: %s", mAgency);
-        }
-
-        @Override public String getShortAgencyName () {
-            switch ((int) mAgency) {
-                case AGENCY_CT:
-                    return "CT";
-                case AGENCY_KCM:
-                    return "KCM";
-                case AGENCY_PT:
-                    return "PT";
-                case AGENCY_ST:
-                    return "ST";
-                case AGENCY_WSF:
-                    return "WSF";
-            }
-            return String.format("Unknown Agency: %s", mAgency);
-        }
-
-        @Override public String getRouteName () {
-            if (isLink()) {
-                return "Link Light Rail";
-            } else {
-                // FIXME: Need to find bus route #s
-                if (mAgency == AGENCY_ST) {
-                    return "Express Bus";
-                } else if(mAgency == AGENCY_KCM) {
-                    return "Bus";
-                }
-                return null;
-            }
-        }
-
-        @Override public String getFareString () {
-            return NumberFormat.getCurrencyInstance(Locale.US).format(mFare / 100.0);
-        }
-
-        @Override public double getFare () {
-            return mFare;
-        }
-
-        @Override public String getBalanceString () {
-            return NumberFormat.getCurrencyInstance(Locale.US).format(mNewBalance / 100);
-        }
-
-        @Override public Station getStartStation() {
-            if (isLink()) {
-                int stationNumber = (((int) mCoachNum) % 1000) - 193;
-                if (stationNumber < sLinkStations.length) {
-                    return sLinkStations[stationNumber];
-                }
-            } else if (mAgency == AGENCY_WSF) {
-                return sWSFTerminals.get((int)mCoachNum);
-            }
-            return null;
-        }
-
-        @Override public String getStartStationName () {
-            if (isLink()) {
-                int stationNumber = (((int) mCoachNum) % 1000) - 193;
-                if (stationNumber < sLinkStations.length) {
-                    return sLinkStations[stationNumber].getStationName();
-                } else {
-                    return String.format("Unknown Station #%s", stationNumber);
-                }
-            } else if (mAgency == AGENCY_WSF) {
-                int terminalNumber = (int) mCoachNum;
-                if (sWSFTerminals.containsKey(terminalNumber)) {
-                    return sWSFTerminals.get(terminalNumber).getStationName();
-                } else {
-                    return String.format("Unknown Terminal #%s", terminalNumber);
-                }
-            } else {
-                return String.format("Coach #%s", String.valueOf(mCoachNum));
-            }
-        }
-
-        @Override public String getEndStationName () {
-            // ORCA tracks destination in a separate record
-            return null;
-        }
-
-        @Override public Station getEndStation () {
-            // ORCA tracks destination in a separate record
-            return null;
-        }
-
-        @Override public Mode getMode() {
-            if (isLink()) {
-                return Mode.METRO;
-            } else if (mAgency == AGENCY_WSF) {
-                return Mode.FERRY;
-            } else {
-                return Mode.BUS;
-            }
-        }
-
-        @Override public boolean hasTime() {
-            return true;
-        }
-
-        public long getCoachNumber() {
-            return mCoachNum;
-        }
-
-        public long getTransType() {
-            return mTransType;
-        }
-
-        public void writeToParcel(Parcel parcel, int flags) {
-            parcel.writeLong(mTimestamp);
-            parcel.writeLong(mCoachNum);
-            parcel.writeLong(mFare);
-            parcel.writeLong(mNewBalance);
-            parcel.writeLong(mAgency);
-            parcel.writeLong(mTransType);
-        }
-
-        public int describeContents() {
-            return 0;
-        }
-
-        private boolean isLink () {
-            return (mAgency == OrcaTransitData.AGENCY_ST && mCoachNum > 10000);
-        }
-    }
-
-    public static class MergedOrcaTrip extends Trip {
-        private final OrcaTrip mStartTrip;
-        private final OrcaTrip mEndTrip;
-
-        public static Creator<MergedOrcaTrip> CREATOR = new Creator<MergedOrcaTrip>() {
-            public MergedOrcaTrip createFromParcel(Parcel parcel) {
-                return new MergedOrcaTrip(
-                    (OrcaTrip) parcel.readParcelable(OrcaTrip.class.getClassLoader()),
-                    (OrcaTrip) parcel.readParcelable(OrcaTrip.class.getClassLoader())
-                );
-            }
-
-            public MergedOrcaTrip[] newArray(int size) {
-                return new MergedOrcaTrip[size];
-            }
-        };
-
-        public MergedOrcaTrip(OrcaTrip startTrip, OrcaTrip endTrip) {
-            mStartTrip = startTrip;
-            mEndTrip = endTrip;
-        }
-
-        @Override public long getTimestamp() {
-            return mStartTrip.getTimestamp();
-        }
-
-        @Override public long getExitTimestamp() {
-            return mEndTrip.getTimestamp();
-        }
-
-        @Override public String getRouteName() {
-            return mStartTrip.getRouteName();
-        }
-
-        @Override public String getAgencyName() {
-            return mStartTrip.getAgencyName();
-        }
-
-        @Override public String getShortAgencyName() {
-            return mStartTrip.getShortAgencyName();
-        }
-
-        @Override public String getFareString() {
-            if (mEndTrip.mTransType == TRANS_TYPE_CANCEL_TRIP) {
-                return FareBotApplication.getInstance().getString(R.string.fare_cancelled_format, mStartTrip.getFareString());
-            }
-            return mStartTrip.getFareString();
-        }
-
-        @Override public String getBalanceString() {
-            return mEndTrip.getBalanceString();
-        }
-
-        @Override public String getStartStationName() {
-            return mStartTrip.getStartStationName();
-        }
-
-        @Override public Station getStartStation() {
-            return mStartTrip.getStartStation();
-        }
-
-        @Override public String getEndStationName() {
-            return mEndTrip.getStartStationName();
-        }
-
-        @Override public Station getEndStation() {
-            return mEndTrip.getStartStation();
-        }
-
-        @Override public double getFare() {
-            return mStartTrip.getFare();
-        }
-
-        @Override public Mode getMode() {
-            return mStartTrip.getMode();
-        }
-
-        @Override public boolean hasTime() {
-            return mStartTrip.hasTime();
-        }
-
-        @Override public void writeToParcel(Parcel parcel, int flags) {
-            mStartTrip.writeToParcel(parcel, flags);
-            mEndTrip.writeToParcel(parcel, flags);
-        }
-
-        @Override public int describeContents() {
-            return 0;
-        }
-    }
-}
diff --git a/src/main/java/com/codebutler/farebot/transit/SuicaTransitData.java b/src/main/java/com/codebutler/farebot/transit/SuicaTransitData.java
deleted file mode 100644
index 318342c..0000000
--- a/src/main/java/com/codebutler/farebot/transit/SuicaTransitData.java
+++ /dev/null
@@ -1,662 +0,0 @@
-/*
- * SuicaTransitData.java
- *
- * Authors:
- * Eric Butler <eric@codebutler.com>
- *
- * Based on code from http://code.google.com/p/nfc-felica/
- * nfc-felica by Kazzz. See project URL for complete author information.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- *
- * Thanks to these resources for providing additional information about the Suica format:
- * http://www.denno.net/SFCardFan/
- * http://jennychan.web.fc2.com/format/suica.html
- * http://d.hatena.ne.jp/baroqueworksdev/20110206/1297001722
- * http://handasse.blogspot.com/2008/04/python-pasorisuica.html
- * http://sourceforge.jp/projects/felicalib/wiki/suica
- *
- * Some of these resources have been translated into English at:
- * https://github.com/codebutler/farebot/wiki/Suica
- */
-
-package com.codebutler.farebot.transit;
-
-import android.app.Application;
-import android.database.Cursor;
-import android.database.sqlite.SQLiteDatabase;
-import android.os.Parcel;
-import android.util.Log;
-import com.codebutler.farebot.FareBotApplication;
-import com.codebutler.farebot.ui.ListItem;
-import com.codebutler.farebot.R;
-import com.codebutler.farebot.card.felica.FelicaBlock;
-import com.codebutler.farebot.card.felica.FelicaCard;
-import com.codebutler.farebot.card.felica.FelicaService;
-import net.kazzz.felica.lib.FeliCaLib;
-import net.kazzz.felica.lib.Util;
-import org.apache.commons.lang3.ArrayUtils;
-
-import java.text.NumberFormat;
-import java.util.*;
-
-import static com.codebutler.farebot.card.felica.DBUtil.*;
-
-public class SuicaTransitData extends TransitData {
-    private SuicaTrip[] mTrips;
-
-    public Creator<SuicaTransitData> CREATOR = new Creator<SuicaTransitData>() {
-        public SuicaTransitData createFromParcel(Parcel parcel) {
-            return new SuicaTransitData(parcel);
-        }
-
-        public SuicaTransitData[] newArray(int size) {
-            return new SuicaTransitData[size];
-        }
-    };
-
-    public static boolean check(FelicaCard card) {
-        return (card.getSystem(FeliCaLib.SYSTEMCODE_SUICA) != null);
-    }
-
-    public static TransitIdentity parseTransitIdentity (FelicaCard card) {
-        return new TransitIdentity("Suica", null); // FIXME: Could be ICOCA, etc.
-    }
-
-    public SuicaTransitData(Parcel parcel) {
-        mTrips = new SuicaTrip[parcel.readInt()];
-        parcel.readTypedArray(mTrips, SuicaTrip.CREATOR);
-    }
-
-    public SuicaTransitData(FelicaCard card) {
-        FelicaService service = card.getSystem(FeliCaLib.SYSTEMCODE_SUICA).getService(FeliCaLib.SERVICE_SUICA_HISTORY);
-
-        long previousBalance = -1;
-
-        List<SuicaTrip> trips = new ArrayList<>();
-
-        // Read blocks oldest-to-newest to calculate fare.
-        FelicaBlock[] blocks = service.getBlocks();
-        for (int i = (blocks.length - 1); i >= 0; i--) {
-            FelicaBlock block = blocks[i];
-
-            SuicaTrip trip = new SuicaTrip(block, previousBalance);
-            previousBalance = trip.getBalance();
-
-            if (trip.getTimestamp() == 0) {
-                continue;
-            }
-
-            trips.add(trip);
-        }
-
-        // Return trips in descending order.
-        Collections.reverse(trips);
-        
-        mTrips = trips.toArray(new SuicaTrip[trips.size()]);
-    }
-
-    @Override public String getBalanceString() {
-        if (mTrips.length > 0)
-            return mTrips[0].getBalanceString();
-        return null;
-    }
-
-    @Override public String getSerialNumber() {
-        // FIXME: Find where this is on the card.
-        return null;
-    }
-
-    @Override public Trip[] getTrips() {
-        return mTrips;
-    }
-
-    @Override public Refill[] getRefills() {
-        return null;
-    }
-
-    @Override public Subscription[] getSubscriptions() {
-        return null;
-    }
-
-    @Override public List<ListItem> getInfo() {
-        return null;
-    }
-
-    @Override public String getCardName() {
-        return "Suica"; // FIXME: Could be ICOCA, etc.
-    }
-
-    public void writeToParcel(Parcel parcel, int flags) {
-        parcel.writeInt(mTrips.length);
-        parcel.writeTypedArray(mTrips, flags);
-    }
-
-    public static class SuicaTrip extends Trip {
-        private final long mBalance;
-
-        private final int mConsoleType;
-        private final int mProcessType;
-
-        private final boolean mIsProductSale;
-        private final boolean mIsBus;
-
-        private final boolean mIsCharge;
-
-        private final long mFare;
-        private final Date mTimestamp;
-        private final int  mRegionCode;
-        
-        private int mRailEntranceLineCode;
-        private int mRailEntranceStationCode;
-        private int mRailExitLineCode;
-        private int mRailExitStationCode;
-        
-        private int mBusLineCode;
-        private int mBusStopCode;
-        
-        private Station mStartStation;
-        private Station mEndStation;
-
-        public SuicaTrip(FelicaBlock block, long previousBalance) {
-            byte[] data = block.getData();
-
-            // 00000080000000000000000000000000
-            // 00 00 - console type
-            // 01 00 - process type
-            // 02 00 - ??
-            // 03 80 - ??
-            // 04 00 - date
-            // 05 00 - date
-            // 06 00 - enter line code
-            // 07 00
-            // 08 00
-            // 09 00
-            // 10 00
-            // 11 00
-            // 12 00
-            // 13 00
-            // 14 00
-            // 15 00
-
-
-            mConsoleType = data[0];
-            mProcessType = data[1];
-
-            mIsBus         = mConsoleType == (byte) 0x05;
-            mIsProductSale = (mConsoleType == (byte) 0xc7 || mConsoleType == (byte) 0xc8);
-            mIsCharge = (mProcessType == (byte) 0x02);
-
-            mTimestamp = extractDate(mIsProductSale, data);
-            mBalance   = (long) Util.toInt(data[11], data[10]);
-
-            mRegionCode = data[15] & 0xFF;
-
-            if (previousBalance >= 0) {
-                mFare = (previousBalance - mBalance);
-            } else {
-                // Can't get amount for first record.
-                mFare = 0;
-            }
-
-            // Unused block (new card)
-            if (mTimestamp == null) {
-                return;
-            }
-
-            if (!mIsProductSale && !mIsCharge) {
-                if (mIsBus) {
-                    mBusLineCode  = Util.toInt(data[6], data[7]);
-                    mBusStopCode  = Util.toInt(data[8], data[9]);
-                    mStartStation = getBusStop(mRegionCode, mBusLineCode, mBusStopCode);
-
-                } else {
-                    mRailEntranceLineCode    = data[6] & 0xFF;
-                    mRailEntranceStationCode = data[7] & 0xFF;
-                    mRailExitLineCode        = data[8] & 0xFF;
-                    mRailExitStationCode     = data[9] & 0xFF;
-                    mStartStation = getRailStation(mRegionCode, mRailEntranceLineCode, mRailEntranceStationCode);
-                    mEndStation   = getRailStation(mRegionCode, mRailExitLineCode, mRailExitStationCode);
-                }
-            }
-        }
-        
-        public static Creator<SuicaTrip> CREATOR = new Creator<SuicaTrip>() {
-            public SuicaTrip createFromParcel(Parcel parcel) {
-                return new SuicaTrip(parcel);
-            }
-
-            public SuicaTrip[] newArray(int size) {
-                return new SuicaTrip[size];
-            }
-        };
-
-        public SuicaTrip (Parcel parcel) {
-            mBalance = parcel.readLong();
-            
-            mConsoleType = parcel.readInt();
-            mProcessType = parcel.readInt();
-            
-            mIsProductSale = (parcel.readInt() == 1);
-            mIsBus         = (parcel.readInt() == 1);
-            
-            mIsCharge = (parcel.readInt() == 1);
-            
-            mFare       = parcel.readLong();
-            mTimestamp  = new Date(parcel.readLong());
-            mRegionCode = parcel.readInt();
-
-            mRailEntranceLineCode    = parcel.readInt();
-            mRailEntranceStationCode = parcel.readInt();
-            mRailExitLineCode        = parcel.readInt();
-            mRailExitStationCode     = parcel.readInt();
-            
-            mBusLineCode = parcel.readInt();
-            mBusStopCode = parcel.readInt();
-
-            if (parcel.readInt() == 1)
-                mStartStation = parcel.readParcelable(Station.class.getClassLoader());
-            if (parcel.readInt() == 1)
-                mEndStation = parcel.readParcelable(Station.class.getClassLoader());
-        }
-
-        @Override public long getTimestamp() {
-            if (mTimestamp != null)
-                return mTimestamp.getTime() / 1000;
-            else
-                return 0;
-        }
-
-        @Override public long getExitTimestamp() {
-            return 0;
-        }
-
-        public boolean hasTime() {
-            return mIsProductSale;
-        }
-
-        @Override public String getRouteName() {
-            return (mStartStation != null) ?  mStartStation.getLineName() : (getConsoleType() + " " + getProcessType());
-        }
-
-        @Override public String getAgencyName() {
-            return (mStartStation != null) ? mStartStation.getCompanyName() : null;
-        }
-
-        @Override public String getShortAgencyName() {
-            return getAgencyName();
-        }
-
-        @Override public double getFare() {
-            return mFare;
-        }
-
-        @Override public String getFareString() {
-            NumberFormat format = NumberFormat.getCurrencyInstance(Locale.JAPAN);
-            format.setMaximumFractionDigits(0);
-            if (mFare < 0) return "+" + format.format(-mFare);
-            else return format.format(mFare);
-        }
-
-        public long getBalance() {
-            return mBalance;
-        }
-
-        @Override public String getBalanceString() {
-            NumberFormat format = NumberFormat.getCurrencyInstance(Locale.JAPAN);
-            format.setMaximumFractionDigits(0);
-            return format.format(mBalance);
-        }
-
-        @Override public String getStartStationName() {
-            if (mIsProductSale || mIsCharge)
-                return null;
-
-            if (mStartStation != null) {
-                return mStartStation.getShortStationName();
-            }
-            if (mIsBus) {
-                return String.format("Bus Area 0x%s Line 0x%s Stop 0x%s", Integer.toHexString(mRegionCode), Integer.toHexString(mBusLineCode), Integer.toHexString(mBusStopCode));
-            } else if (!(mRailEntranceLineCode == 0 && mRailEntranceStationCode == 0)) {
-                return String.format("Line 0x%s Station 0x%s", Integer.toHexString(mRailEntranceLineCode), Integer.toHexString(mRailEntranceStationCode));
-            } else {
-                return null;
-            }
-        }
-
-        @Override public Station getStartStation() {
-            return mStartStation;
-        }
-
-        @Override public String getEndStationName() {
-            if (mIsProductSale || mIsCharge || isTVM())
-                return null;
-
-            if (mEndStation != null) {
-                return mEndStation.getShortStationName();
-            }
-            if (!mIsBus) {
-                return String.format("Line 0x%s Station 0x%s", Integer.toHexString(mRailExitLineCode), Integer.toHexString(mRailExitStationCode));
-            } 
-            return null;
-        }
-
-        @Override public Station getEndStation() {
-            return mEndStation;
-        }
-
-        @Override public Mode getMode() {
-            int consoleType = mConsoleType & 0xFF;
-            if (isTVM()) {
-                return Mode.TICKET_MACHINE;
-            } else if (consoleType == 0xc8) {
-                return Mode.VENDING_MACHINE;
-            } else if (consoleType == 0xc7) {
-                return Mode.POS;
-            } else if (mIsBus) {
-                return Mode.BUS;
-            } else {
-                return Mode.METRO;
-            }
-        }
-
-        public String getConsoleType() {
-            return SuicaTransitData.getConsoleTypeName(mConsoleType);
-        }
-   
-        public String getProcessType() {
-            return SuicaTransitData.getProcessTypeName(mProcessType);
-        }
-
-        /*
-        public boolean isBus() {
-            return mIsBus;
-        }
-        
-        public boolean isProductSale() {
-            return mIsProductSale;
-        }
-
-        public boolean isCharge() {
-            return mIsCharge;
-        }
-
-        public int getRegionCode() {
-            return mRegionCode;
-        }
-
-        public int getBusLineCode() {
-            return mBusLineCode;
-        }
-
-        public int getBusStopCode() {
-            return mBusStopCode;
-        }
-
-        public int getRailEntranceLineCode() {
-            return mRailEntranceLineCode;
-        }
-
-        public int getRailEntranceStationCode() {
-            return mRailEntranceStationCode;
-        }
-
-        public int getRailExitLineCode() {
-            return mRailExitLineCode;
-        }
-
-        public int getRailExitStationCode() {
-            return mRailExitStationCode;
-        }
-        */
-
-        public void writeToParcel(Parcel parcel, int flags) {
-            parcel.writeLong(mBalance);
-
-            parcel.writeInt(mConsoleType);
-            parcel.writeInt(mProcessType);
-
-            parcel.writeInt(mIsProductSale ? 1 : 0);
-            parcel.writeInt(mIsBus ? 1 : 0);
-
-            parcel.writeInt(mIsCharge ? 1 : 0);
-
-            parcel.writeLong(mFare);
-            parcel.writeLong(mTimestamp.getTime());
-            parcel.writeInt(mRegionCode);
-
-            parcel.writeInt(mRailEntranceLineCode);
-            parcel.writeInt(mRailEntranceStationCode);
-            parcel.writeInt(mRailExitLineCode);
-            parcel.writeInt(mRailExitStationCode);
-            
-            parcel.writeInt(mBusLineCode);
-            parcel.writeInt(mBusStopCode);
-
-            if (mStartStation != null) {
-                parcel.writeInt(1);
-                parcel.writeParcelable(mStartStation, flags);
-            } else {
-                parcel.writeInt(0);
-            }
-
-            if (mEndStation != null) {
-                parcel.writeInt(1);
-                parcel.writeParcelable(mEndStation, flags);
-            } else {
-                parcel.writeInt(0);
-            }
-        }
-
-        public int describeContents() {
-            return 0;
-        }
-
-        private boolean isTVM() {
-            int consoleType = mConsoleType & 0xFF;
-            int[] tvmConsoleTypes = { 0x03, 0x07, 0x08, 0x12, 0x13, 0x14, 0x15 };
-            return ArrayUtils.contains(tvmConsoleTypes, consoleType);
-        }
-    }
-
-    private static Date extractDate(boolean isProductSale, byte[] data) {
-        int date = Util.toInt(data[4], data[5]);
-        if (date == 0)
-            return null;
-        int yy = date >> 9;
-        int mm = (date >> 5) & 0xf;
-        int dd = date & 0x1f;
-        Calendar c = Calendar.getInstance();
-        c.set(Calendar.YEAR, 2000 + yy);
-        c.set(Calendar.MONTH, mm-1);
-        c.set(Calendar.DAY_OF_MONTH, dd);
-
-        // Product sales have time, too.
-        // 物販だったら時s間もセット
-        if (isProductSale) {
-            int time = Util.toInt(data[6], data[7]);
-            int hh = time >> 11;
-            int min = (time >> 5) & 0x3f;
-            c.set(Calendar.HOUR_OF_DAY, hh);
-            c.set(Calendar.MINUTE, min);
-        } else {
-            c.set(Calendar.HOUR_OF_DAY, 0);
-            c.set(Calendar.MINUTE, 0);
-        }
-        return c.getTime();
-    }
-
-    /**
-     * 機器種別を取得します
-     * <pre>http:// sourceforge.jp/projects/felicalib/wiki/suicaを参考にしています</pre>
-     * @param cType コンソールタイプをセット
-     * @return String 機器タイプが文字列で戻ります
-     */
-    private static String getConsoleTypeName(int cType) {
-        Application app = FareBotApplication.getInstance();
-        switch (cType & 0xff) {
-            case 0x03: return app.getString(R.string.felica_terminal_fare_adjustment);
-            case 0x04: return app.getString(R.string.felica_terminal_portable);
-            case 0x05: return app.getString(R.string.felica_terminal_vehicle); // bus
-            case 0x07: return app.getString(R.string.felica_terminal_ticket);
-            case 0x08: return app.getString(R.string.felica_terminal_ticket);
-            case 0x09: return app.getString(R.string.felica_terminal_deposit_quick_charge);
-            case 0x12: return app.getString(R.string.felica_terminal_tvm_tokyo_monorail);
-            case 0x13: return app.getString(R.string.felica_terminal_tvm_etc);
-            case 0x14: return app.getString(R.string.felica_terminal_tvm_etc);
-            case 0x15: return app.getString(R.string.felica_terminal_tvm_etc);
-            case 0x16: return app.getString(R.string.felica_terminal_ticket_gate);
-            case 0x17: return app.getString(R.string.felica_terminal_simple_ticket_gate);
-            case 0x18: return app.getString(R.string.felica_terminal_booth);
-            case 0x19: return app.getString(R.string.felica_terminal_booth_green);
-            case 0x1a: return app.getString(R.string.felica_terminal_ticket_gate_terminal);
-            case 0x1b: return app.getString(R.string.felica_terminal_mobile_phone);
-            case 0x1c: return app.getString(R.string.felica_terminal_connection_adjustment);
-            case 0x1d: return app.getString(R.string.felica_terminal_transfer_adjustment);
-            case 0x1f: return app.getString(R.string.felica_terminal_simple_deposit);
-            case 0x46: return "VIEW ALTTE";
-            case 0x48: return "VIEW ALTTE";
-            case 0xc7: return app.getString(R.string.felica_terminal_pos);  // sales
-            case 0xc8: return app.getString(R.string.felica_terminal_vending);   // sales
-            default:
-                return String.format("Console 0x%s", Integer.toHexString(cType));
-        }
-    }
-    
-    /**
-     * 処理種別を取得します
-     * <pre>http:// sourceforge.jp/projects/felicalib/wiki/suicaを参考にしています</pre>
-     * @param proc 処理タイプをセット
-     * @return String 処理タイプが文字列で戻ります
-     */
-    private static String getProcessTypeName(int proc) {
-        Application app = FareBotApplication.getInstance();
-        switch (proc & 0xff) {
-            case 0x01: return app.getString(R.string.felica_process_fare_exit_gate);
-            case 0x02: return app.getString(R.string.felica_process_charge);
-            case 0x03: return app.getString(R.string.felica_process_purchase_magnetic);
-            case 0x04: return app.getString(R.string.felica_process_fare_adjustment);
-            case 0x05: return app.getString(R.string.felica_process_admission_payment);
-            case 0x06: return app.getString(R.string.felica_process_booth_exit);
-            case 0x07: return app.getString(R.string.felica_process_issue_new);
-            case 0x08: return app.getString(R.string.felica_process_booth_deduction);
-            case 0x0d: return app.getString(R.string.felica_process_bus_pitapa);                 // Bus
-            case 0x0f: return app.getString(R.string.felica_process_bus_iruca);                  // Bus
-            case 0x11: return app.getString(R.string.felica_process_reissue);
-            case 0x13: return app.getString(R.string.felica_process_payment_shinkansen);
-            case 0x14: return app.getString(R.string.felica_process_entry_a_autocharge);
-            case 0x15: return app.getString(R.string.felica_process_exit_a_autocharge);
-            case 0x1f: return app.getString(R.string.felica_process_deposit_bus);                // Bus
-            case 0x23: return app.getString(R.string.felica_process_purchase_special_ticket);    // Bus
-            case 0x46: return app.getString(R.string.felica_process_merchandise_purchase);       // Sales
-            case 0x48: return app.getString(R.string.felica_process_bonus_charge);
-            case 0x49: return app.getString(R.string.felica_process_register_deposit);           // Sales
-            case 0x4a: return app.getString(R.string.felica_process_merchandise_cancel);         // Sales
-            case 0x4b: return app.getString(R.string.felica_process_merchandise_admission);      // Sales
-            case 0xc6: return app.getString(R.string.felica_process_merchandise_purchase_cash);  // Sales
-            case 0xcb: return app.getString(R.string.felica_process_merchandise_admission_cash); // Sales
-            case 0x84: return app.getString(R.string.felica_process_payment_thirdparty);
-            case 0x85: return app.getString(R.string.felica_process_admission_thirdparty);
-            default:
-                return String.format("Process0x%s", Integer.toHexString(proc));
-        }
-    }
-    
-    /**
-     * パス停留所を取得します
-     * <pre>http:// sourceforge.jp/projects/felicalib/wiki/suicaを参考にしています</pre>
-     * @param lineCode 線区コードをセット
-     * @param stationCode 駅順コードをセット
-     * @return 取得できた場合、序数0に会社名、1停留所名が戻ります
-     */
-    private static Station getBusStop(int regionCode, int lineCode, int stationCode) {
-        int areaCode = (regionCode >> 6);
-
-        try {
-            SQLiteDatabase db = FareBotApplication.getInstance().getSuicaDBUtil().openDatabase();
-            Cursor cursor = db.query(TABLE_IRUCA_STATIONCODE,
-                COLUMNS_IRUCA_STATIONCODE,
-                String.format("%s = ? AND %s = ?", COLUMN_LINECODE, COLUMN_STATIONCODE),
-                new String[] { Integer.toHexString(lineCode), Integer.toHexString(stationCode) },
-                null,
-                null,
-                COLUMN_ID);
-
-            if (!cursor.moveToFirst()) {
-                return null;
-            }
-
-            // FIXME: Figure out a better way to deal with i18n.
-            boolean isJa = Locale.getDefault().getLanguage().equals("ja");
-            String companyName = cursor.getString(cursor.getColumnIndex(isJa ? COLUMN_COMPANYNAME : COLUMN_COMPANYNAME_EN));
-            String stationName = cursor.getString(cursor.getColumnIndex(isJa ? COLUMN_STATIONNAME : COLUMN_STATIONNAME_EN));
-            return new Station(companyName, null, stationName, null, null, null);
-
-        } catch (Exception e) {
-            Log.e("SuicaStationProvider", "getBusStop() error", e);
-            return null;
-        }
-    }
-
-    /**
-     * 地区コード、線区コード、駅順コードから駅名を取得します
-     * <pre>http://sourceforge.jp/projects/felicalib/wiki/suicaを参考にしています</pre>
-     *
-     * @param regionCode 地区コードをセット
-     * @param lineCode 線区コードをセット
-     * @param stationCode 駅順コードをセット
-     * @return 取得できた場合、序数0に会社名、1に路線名、2に駅名が戻ります
-     */
-    private static Station getRailStation(int regionCode, int lineCode, int stationCode) {
-        int areaCode = (regionCode >> 6);
-
-        try {
-            SQLiteDatabase db = FareBotApplication.getInstance().getSuicaDBUtil().openDatabase();
-            Cursor cursor = db.query(
-                 TABLE_STATIONCODE,
-                 COLUMNS_STATIONCODE,
-                 String.format("%s = ? AND %s = ? AND %s = ?", COLUMN_AREACODE, COLUMN_LINECODE, COLUMN_STATIONCODE),
-                 new String[] {
-                     String.valueOf(areaCode & 0xFF),
-                     String.valueOf(lineCode & 0xFF),
-                     String.valueOf(stationCode & 0xFF)
-                 },
-                 null,
-                 null,
-                 COLUMN_ID);
-
-            if (!cursor.moveToFirst()) {
-                Log.w("SuicaTransitData", String.format("FAILED get rail company: r: 0x%s a: 0x%s l: 0x%s s: 0x%s",
-                    Integer.toHexString(regionCode),
-                    Integer.toHexString(areaCode),
-                    Integer.toHexString(lineCode),
-                    Integer.toHexString(stationCode)));
-
-                return null;
-            }
-
-            // FIXME: Figure out a better way to deal with i18n.
-            boolean isJa = Locale.getDefault().getLanguage().equals("ja");
-            String companyName = cursor.getString(cursor.getColumnIndex(isJa ? COLUMN_COMPANYNAME : COLUMN_COMPANYNAME_EN));
-            String lineName    = cursor.getString(cursor.getColumnIndex(isJa ? COLUMN_LINENAME    : COLUMN_LINENAME_EN));
-            String stationName = cursor.getString(cursor.getColumnIndex(isJa ? COLUMN_STATIONNAME : COLUMN_STATIONNAME_EN));
-            String latitude    = cursor.getString(cursor.getColumnIndex(COLUMN_LATITUDE));
-            String longitude   = cursor.getString(cursor.getColumnIndex(COLUMN_LONGITUDE));
-            return new Station(companyName, lineName, stationName, null, latitude, longitude);
-
-        } catch (Exception e) {
-            Log.e("SuicaStationProvider", "Error in getRailStation", e);
-            return null;
-        }
-    }
-}
diff --git a/src/main/java/com/codebutler/farebot/transit/TransitData.java b/src/main/java/com/codebutler/farebot/transit/TransitData.java
index 0dea330..40edb85 100644
--- a/src/main/java/com/codebutler/farebot/transit/TransitData.java
+++ b/src/main/java/com/codebutler/farebot/transit/TransitData.java
@@ -23,6 +23,7 @@
 package com.codebutler.farebot.transit;
 
 import android.os.Parcelable;
+
 import com.codebutler.farebot.ui.ListItem;
 
 import java.util.List;
diff --git a/src/main/java/com/codebutler/farebot/transit/Trip.java b/src/main/java/com/codebutler/farebot/transit/Trip.java
index 825d264..406b80c 100644
--- a/src/main/java/com/codebutler/farebot/transit/Trip.java
+++ b/src/main/java/com/codebutler/farebot/transit/Trip.java
@@ -24,6 +24,7 @@ package com.codebutler.farebot.transit;
 
 import android.os.Parcel;
 import android.os.Parcelable;
+
 import org.apache.commons.lang3.StringUtils;
 
 import java.util.ArrayList;
diff --git a/src/main/java/com/codebutler/farebot/transit/BilheteUnicoSPCredit.java b/src/main/java/com/codebutler/farebot/transit/bilhete_unico/BilheteUnicoSPCredit.java
similarity index 97%
rename from src/main/java/com/codebutler/farebot/transit/BilheteUnicoSPCredit.java
rename to src/main/java/com/codebutler/farebot/transit/bilhete_unico/BilheteUnicoSPCredit.java
index 9ef0cbd..695753a 100644
--- a/src/main/java/com/codebutler/farebot/transit/BilheteUnicoSPCredit.java
+++ b/src/main/java/com/codebutler/farebot/transit/bilhete_unico/BilheteUnicoSPCredit.java
@@ -12,14 +12,14 @@
  * You should have received a copy of the GNU General Public License
  * along with this program.  If not, see <http://www.gnu.org/licenses/>.
  */
-package com.codebutler.farebot.transit;
-
-import java.nio.ByteBuffer;
-import java.nio.ByteOrder;
+package com.codebutler.farebot.transit.bilhete_unico;
 
 import android.os.Parcel;
 import android.os.Parcelable;
 
+import java.nio.ByteBuffer;
+import java.nio.ByteOrder;
+
 public class BilheteUnicoSPCredit implements Parcelable {
     private final int mCredit;
 
diff --git a/src/main/java/com/codebutler/farebot/transit/BilheteUnicoSPTransitData.java b/src/main/java/com/codebutler/farebot/transit/bilhete_unico/BilheteUnicoSPTransitData.java
similarity index 82%
rename from src/main/java/com/codebutler/farebot/transit/BilheteUnicoSPTransitData.java
rename to src/main/java/com/codebutler/farebot/transit/bilhete_unico/BilheteUnicoSPTransitData.java
index 9e6b0d2..10bca22 100644
--- a/src/main/java/com/codebutler/farebot/transit/BilheteUnicoSPTransitData.java
+++ b/src/main/java/com/codebutler/farebot/transit/bilhete_unico/BilheteUnicoSPTransitData.java
@@ -20,12 +20,19 @@
  * along with this program.  If not, see <http://www.gnu.org/licenses/>.
  */
 
-package com.codebutler.farebot.transit;
+package com.codebutler.farebot.transit.bilhete_unico;
 
 import android.os.Parcel;
-import com.codebutler.farebot.ui.ListItem;
+
 import com.codebutler.farebot.card.Card;
 import com.codebutler.farebot.card.classic.ClassicCard;
+import com.codebutler.farebot.transit.Refill;
+import com.codebutler.farebot.transit.Subscription;
+import com.codebutler.farebot.transit.TransitData;
+import com.codebutler.farebot.transit.TransitIdentity;
+import com.codebutler.farebot.transit.Trip;
+import com.codebutler.farebot.transit.ovc.OVChipCredit;
+import com.codebutler.farebot.ui.ListItem;
 
 import java.text.NumberFormat;
 import java.util.Arrays;
@@ -34,6 +41,8 @@ import java.util.List;
 
 public class BilheteUnicoSPTransitData extends TransitData {
 
+    private static final String NAME = "Bilhete Único";
+
     private static final byte[] MANUFACTURER = {
         (byte) 0x62,
         (byte) 0x63,
@@ -57,17 +66,13 @@ public class BilheteUnicoSPTransitData extends TransitData {
         }
     };
 
-    public static boolean check(Card card) {
-        if (!(card instanceof ClassicCard))
-            return false;
-
-        ClassicCard classicCard = (ClassicCard) card;
-        byte[] blockData = classicCard.getSector(0).getBlock(0).getData();
+    public static boolean check(ClassicCard card) {
+        byte[] blockData = card.getSector(0).getBlock(0).getData();
         return Arrays.equals(Arrays.copyOfRange(blockData, 8, 16), MANUFACTURER);
     }
 
-    public static TransitIdentity parseTransitIdentity (Card card) {
-        return null;
+    public static TransitIdentity parseTransitIdentity(Card card) {
+        return new TransitIdentity(NAME, null);
     }
 
     public BilheteUnicoSPTransitData(Parcel parcel) {
@@ -86,7 +91,7 @@ public class BilheteUnicoSPTransitData extends TransitData {
     }
 
     @Override public String getCardName () {
-        return "Bilhete Único";
+        return NAME;
     }
 
     @Override public void writeToParcel(Parcel parcel, int flags) {
diff --git a/src/main/java/com/codebutler/farebot/transit/clipper/ClipperData.java b/src/main/java/com/codebutler/farebot/transit/clipper/ClipperData.java
new file mode 100644
index 0000000..6e68e24
--- /dev/null
+++ b/src/main/java/com/codebutler/farebot/transit/clipper/ClipperData.java
@@ -0,0 +1,88 @@
+package com.codebutler.farebot.transit.clipper;
+
+import com.codebutler.farebot.transit.Station;
+
+import java.util.HashMap;
+import java.util.Map;
+
+final class ClipperData {
+    static final int AGENCY_ACTRAN   = 0x01;
+    static final int AGENCY_BART     = 0x04;
+    static final int AGENCY_CALTRAIN = 0x06;
+    static final int AGENCY_GGT      = 0x0b;
+    static final int AGENCY_SAMTRANS = 0x0f;
+    static final int AGENCY_VTA      = 0x11;
+    static final int AGENCY_MUNI     = 0x12;
+    static final int AGENCY_FERRY    = 0x19;
+
+    static final Map<Integer, String> AGENCIES = new HashMap<Integer, String>() {{
+        put(AGENCY_ACTRAN,   "Alameda-Contra Costa Transit District");
+        put(AGENCY_BART,     "Bay Area Rapid Transit");
+        put(AGENCY_CALTRAIN, "Caltrain");
+        put(AGENCY_GGT,      "Golden Gate Transit");
+        put(AGENCY_SAMTRANS, "San Mateo County Transit District");
+        put(AGENCY_VTA,      "Santa Clara Valley Transportation Authority");
+        put(AGENCY_MUNI,     "San Francisco Municipal");
+        put(AGENCY_FERRY,    "Golden Gate Ferry");
+    }};
+
+    static final Map<Integer, String> SHORT_AGENCIES = new HashMap<Integer, String>() {{
+        put(AGENCY_ACTRAN,   "ACTransit");
+        put(AGENCY_BART,     "BART");
+        put(AGENCY_CALTRAIN, "Caltrain");
+        put(AGENCY_GGT,      "GGT");
+        put(AGENCY_SAMTRANS, "SAMTRANS");
+        put(AGENCY_VTA,      "VTA");
+        put(AGENCY_MUNI,     "Muni");
+        put(AGENCY_FERRY,    "Ferry");
+    }};
+
+    static final Map<Long, Station> BART_STATIONS = new HashMap<Long, Station>() {{
+        put((long)0x01, new Station("Colma Station",                             "Colma",                "37.68468",  "-122.46626"));
+        put((long)0x02, new Station("Daly City Station",                         "Daly City",            "37.70608",  "-122.46908"));
+        put((long)0x03, new Station("Balboa Park Station",                       "Balboa Park",          "37.721556", "-122.447503"));
+        put((long)0x04, new Station("Glen Park Station",                         "Glen Park",            "37.733118", "-122.433808"));
+        put((long)0x05, new Station("24th St. Mission Station",                  "24th St.",             "37.75226",  "-122.41849"));
+        put((long)0x06, new Station("16th St. Mission Station",                  "16th St.",             "37.765228", "-122.419478"));
+        put((long)0x07, new Station("Civic Center Station",                      "Civic Center",         "37.779538", "-122.413788"));
+        put((long)0x08, new Station("Powell Street Station",                     "Powell St.",           "37.784970", "-122.40701"));
+        put((long)0x09, new Station("Montgomery St. Station",                    "Montgomery",           "37.789336", "-122.401486"));
+        put((long)0x0a, new Station("Embarcadero Station",                       "Embarcadero",          "37.793086", "-122.396276"));
+        put((long)0x0c, new Station("12th Street Oakland City Center",           "12th St.",             "37.802956", "-122.2720367"));
+        put((long)0x0d, new Station("19th Street Oakland Station",               "19th St.",             "37.80762",  "-122.26886"));
+        put((long)0x0f, new Station("Rockridge Station",                         "Rockridge",            "37.84463",  "-122.251825"));
+        put((long)0x13, new Station("Walnut Creek Station",                      "Walnut Creek",         "37.90563",  "-122.06744"));
+        put((long)0x14, new Station("Concord Station",                           "Concord",              "37.97376",  "-122.02903"));
+        put((long)0x15, new Station("North Concord/Martinez Station",            "N. Concord/Martinez",  "38.00318",  "-122.02463"));
+        put((long)0x17, new Station("Pittsburg/Bay Point Station",               "Pittsburg/Bay Pt",     "38.01892",  "-121.94240"));
+        put((long)0x18, new Station("Downtown Berkeley Station",                 "Berkeley",             "37.869868", "-122.268051"));
+        put((long)0x19, new Station("North Berkeley Station",                    "North Berkeley",       "37.874026", "-122.283882"));
+        put((long)0x20, new Station("Coliseum/Oakland Airport BART",             "Coliseum/OAK",         "37.754270", "-122.197757"));
+        put((long)0x1a, new Station("El Cerrito Plaza Station",                  "El Cerrito Plaza",     "37.903959", "-122.299271"));
+        put((long)0x1b, new Station("El Cerrito Del Norte Station",              "El Cerrito Del Norte", "37.925651", "-122.317219"));
+        put((long)0x1c, new Station("Richmond Station",                          "Richmond",             "37.93730",  "-122.35338"));
+        put((long)0x1d, new Station("Lake Merritt Station",                      "Lake Merritt",         "37.79761",  "-122.26564"));
+        put((long)0x1f, new Station("Coliseum/Oakland Airport Station",          "Coliseum/OAK",         "37.75256",  "-122.19806"));
+        put((long)0x22, new Station("Hayward Station",                           "Hayward",              "37.670387", "-122.088002"));
+        put((long)0x23, new Station("South Hayward Station",                     "South Hayward",        "37.634800", "-122.057551"));
+        put((long)0x24, new Station("Union City Station",                        "Union City",           "37.591203", "-122.017854"));
+        put((long)0x25, new Station("Fremont Station",                           "Fremont",              "37.557727", "-121.976395"));
+        put((long)0x26, new Station("Daly City Station",                         "Daly City",            "37.7066",   "-122.4696"));
+        put((long)0x28, new Station("South San Francisco Station",               "South SF",             "37.6744",   "-122.442"));
+        put((long)0x29, new Station("San Bruno Station",                         "San Bruno",            "37.63714",  "-122.415622"));
+        put((long)0x2a, new Station("San Francisco Int'l Airport Station",       "SFO",                  "37.61590",  "-122.39263"));
+        put((long)0x2b, new Station("Millbrae Station",                          "Millbrae",             "37.599935", "-122.386478"));
+    }};
+
+    static Map<Long, String> FERRY_ROUTES = new HashMap<Long, String>() {{
+        put((long)0x03, "Larkspur");
+        put((long)0x04, "San Francisco");
+    }};
+
+    static Map<Long, Station> FERRY_TERMINALS = new HashMap<Long, Station>() {{
+        put((long)0x01, new Station("San Francisco Ferry Building", "San Francisco", "37.795873", "-122.391987"));
+        put((long)0x03, new Station("Larkspur Ferry Terminal", "Larkspur", "37.945509", "-122.50916"));
+    }};
+
+    private ClipperData() { }
+}
diff --git a/src/main/java/com/codebutler/farebot/transit/clipper/ClipperRefill.java b/src/main/java/com/codebutler/farebot/transit/clipper/ClipperRefill.java
new file mode 100644
index 0000000..8f30bff
--- /dev/null
+++ b/src/main/java/com/codebutler/farebot/transit/clipper/ClipperRefill.java
@@ -0,0 +1,70 @@
+package com.codebutler.farebot.transit.clipper;
+
+import android.os.Parcel;
+
+import com.codebutler.farebot.transit.Refill;
+
+import java.text.NumberFormat;
+import java.util.Locale;
+
+public class ClipperRefill extends Refill {
+    final long mTimestamp;
+    final long mAmount;
+    final long mMachineID;
+    final long mAgency;
+
+    public static Creator<ClipperRefill> CREATOR = new Creator<ClipperRefill>() {
+        public ClipperRefill createFromParcel(Parcel parcel) {
+            return new ClipperRefill(parcel);
+        }
+
+        public ClipperRefill[] newArray(int size) {
+            return new ClipperRefill[size];
+        }
+    };
+
+    public ClipperRefill(long timestamp, long amount, long agency, long machineid) {
+        mTimestamp  = timestamp;
+        mAmount     = amount;
+        mMachineID  = machineid;
+        mAgency     = agency;
+    }
+
+    public ClipperRefill(Parcel parcel) {
+        mTimestamp = parcel.readLong();
+        mAmount    = parcel.readLong();
+        mMachineID = parcel.readLong();
+        mAgency    = parcel.readLong();
+    }
+
+    @Override public long getTimestamp () {
+        return mTimestamp;
+    }
+
+    @Override public long getAmount () {
+        return mAmount;
+    }
+
+    @Override public String getAmountString () {
+        return NumberFormat.getCurrencyInstance(Locale.US).format((double)mAmount / 100.0);
+    }
+
+    public long getMachineID () {
+        return mMachineID;
+    }
+
+    @Override public String getAgencyName () {
+        return ClipperTransitData.getAgencyName((int)mAgency);
+    }
+
+    @Override public String getShortAgencyName () {
+        return ClipperTransitData.getShortAgencyName((int) mAgency);
+    }
+
+    public void writeToParcel(Parcel parcel, int flags) {
+        parcel.writeLong(mTimestamp);
+        parcel.writeLong(mAmount);
+        parcel.writeLong(mMachineID);
+        parcel.writeLong(mAgency);
+    }
+}
diff --git a/src/main/java/com/codebutler/farebot/transit/clipper/ClipperTransitData.java b/src/main/java/com/codebutler/farebot/transit/clipper/ClipperTransitData.java
new file mode 100644
index 0000000..ffae06d
--- /dev/null
+++ b/src/main/java/com/codebutler/farebot/transit/clipper/ClipperTransitData.java
@@ -0,0 +1,304 @@
+/*
+ * ClipperTransitData.java
+ *
+ * Copyright (C) 2011 Eric Butler
+ *
+ * Authors:
+ * Eric Butler <eric@codebutler.com>
+ *
+ * Thanks to:
+ * An anonymous contributor for reverse engineering Clipper data and providing
+ * most of the code here.
+ *
+ * This program is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation, either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.
+ */
+
+package com.codebutler.farebot.transit.clipper;
+
+import android.os.Parcel;
+
+import com.codebutler.farebot.FareBotApplication;
+import com.codebutler.farebot.R;
+import com.codebutler.farebot.card.Card;
+import com.codebutler.farebot.card.desfire.DesfireCard;
+import com.codebutler.farebot.card.desfire.DesfireFile;
+import com.codebutler.farebot.transit.Subscription;
+import com.codebutler.farebot.transit.TransitData;
+import com.codebutler.farebot.transit.TransitIdentity;
+import com.codebutler.farebot.transit.Trip;
+import com.codebutler.farebot.ui.ListItem;
+import com.codebutler.farebot.util.Utils;
+
+import java.text.NumberFormat;
+import java.util.ArrayList;
+import java.util.Arrays;
+import java.util.Comparator;
+import java.util.List;
+import java.util.Locale;
+
+public class ClipperTransitData extends TransitData {
+    static final int RECORD_LENGTH   = 32;
+
+    private long            mSerialNumber;
+    private short           mBalance;
+    private ClipperTrip[]   mTrips;
+    private ClipperRefill[] mRefills;
+
+    private static final long EPOCH_OFFSET    = 0x83aa7f18;
+
+    public static boolean check (Card card) {
+        return (card instanceof DesfireCard) && (((DesfireCard) card).getApplication(0x9011f2) != null);
+    }
+    
+    public static Creator<ClipperTransitData> CREATOR = new Creator<ClipperTransitData>() {
+        public ClipperTransitData createFromParcel(Parcel parcel) {
+            return new ClipperTransitData(parcel);
+        }
+
+        public ClipperTransitData[] newArray(int size) {
+            return new ClipperTransitData[size];
+        }
+    };
+        
+    public static TransitIdentity parseTransitIdentity (Card card) {
+        try {
+           byte[] data = ((DesfireCard) card).getApplication(0x9011f2).getFile(0x08).getData();
+           return new TransitIdentity("Clipper", String.valueOf(Utils.byteArrayToLong(data, 1, 4)));
+       } catch (Exception ex) {
+           throw new RuntimeException("Error parsing Clipper serial", ex);
+       }
+    }
+
+    public ClipperTransitData(Parcel parcel) {
+        mSerialNumber = parcel.readLong();
+        mBalance      = (short) parcel.readLong();
+                
+        mTrips = new ClipperTrip[parcel.readInt()];
+        parcel.readTypedArray(mTrips, ClipperTrip.CREATOR);
+        
+        mRefills = new ClipperRefill[parcel.readInt()];
+        parcel.readTypedArray(mRefills, ClipperRefill.CREATOR);
+    }
+    
+    public ClipperTransitData(Card card) {
+        DesfireCard desfireCard = (DesfireCard) card;
+
+        byte[] data;
+
+        try {
+            data = desfireCard.getApplication(0x9011f2).getFile(0x08).getData();
+            mSerialNumber = Utils.byteArrayToLong(data, 1, 4);
+        } catch (Exception ex) {
+            throw new RuntimeException("Error parsing Clipper serial", ex);
+        }
+
+        try {
+            data = desfireCard.getApplication(0x9011f2).getFile(0x02).getData();
+            mBalance = (short) (((0xFF & data[18]) << 8) | (0xFF & data[19]));
+        } catch (Exception ex) {
+            throw new RuntimeException("Error parsing Clipper balance", ex);
+        }
+
+        try {
+            mTrips = parseTrips(desfireCard);
+        } catch (Exception ex) {
+            throw new RuntimeException("Error parsing Clipper trips", ex);
+        }
+
+        try {
+            mRefills = parseRefills(desfireCard);
+        } catch (Exception ex) {
+            throw new RuntimeException("Error parsing Clipper refills", ex);
+        }
+
+        setBalances();
+    }
+
+    @Override public String getCardName () {
+        return "Clipper";
+    }
+
+    @Override public String getBalanceString () {
+        return NumberFormat.getCurrencyInstance(Locale.US).format(mBalance / 100.0);
+    }
+
+    @Override public String getSerialNumber () {
+        return Long.toString(mSerialNumber);
+    }
+
+    @Override public Trip[] getTrips () {
+        return mTrips;
+    }
+
+    public ClipperRefill[] getRefills () {
+        return mRefills;
+    }
+
+    @Override public Subscription[] getSubscriptions() {
+        return null;
+    }
+
+    @Override public List<ListItem> getInfo() {
+        return null;
+    }
+
+    private ClipperTrip[] parseTrips (DesfireCard card) {
+        DesfireFile file = card.getApplication(0x9011f2).getFile(0x0e);
+
+        /*
+         *  This file reads very much like a record file but it professes to
+         *  be only a regular file.  As such, we'll need to extract the records
+         *  manually.
+         */
+        byte [] data = file.getData();
+        int pos = data.length - RECORD_LENGTH;
+        List<ClipperTrip> result = new ArrayList<>();
+        while (pos > 0) {
+            byte[] slice = Utils.byteArraySlice(data, pos, RECORD_LENGTH);
+            final ClipperTrip trip = createTrip(slice);
+            if (trip != null) {
+                // Some transaction types are temporary -- remove previous trip with the same timestamp.
+                ClipperTrip existingTrip = Utils.findInList(result, new Utils.Matcher<ClipperTrip>() {
+                    @Override public boolean matches(ClipperTrip otherTrip) {
+                        return trip.getTimestamp() == otherTrip.getTimestamp();
+                    }
+                });
+                if (existingTrip != null) {
+                    if (existingTrip.getExitTimestamp() != 0) {
+                        // Old trip has exit timestamp, and is therefore better.
+                        pos -= RECORD_LENGTH;
+                        continue;
+                    } else {
+                        result.remove(existingTrip);
+                    }
+                }
+                result.add(trip);
+            }
+            pos -= RECORD_LENGTH;
+        }
+        ClipperTrip[] useLog = new ClipperTrip[result.size()];
+        result.toArray(useLog);
+
+        Arrays.sort(useLog, new Trip.Comparator());
+
+        return useLog;
+    }
+
+    private ClipperTrip createTrip (byte[] useData) {
+        long timestamp, exitTimestamp, fare, agency, from, to, route;
+
+        timestamp     = Utils.byteArrayToLong(useData,  0xc, 4);
+        exitTimestamp = Utils.byteArrayToLong(useData, 0x10, 4);
+        fare          = Utils.byteArrayToLong(useData,  0x6, 2);
+        agency        = Utils.byteArrayToLong(useData,  0x2, 2);
+        from          = Utils.byteArrayToLong(useData, 0x14, 2);
+        to            = Utils.byteArrayToLong(useData, 0x16, 2);
+        route         = Utils.byteArrayToLong(useData, 0x1c, 2);
+
+        if (agency == 0)
+            return null;
+
+        // Use a magic number to offset the timestamp
+        timestamp -= EPOCH_OFFSET;
+
+        return new ClipperTrip(timestamp, exitTimestamp, fare, agency, from, to, route);
+    }
+
+    private ClipperRefill[] parseRefills (DesfireCard card) {
+        DesfireFile file = card.getApplication(0x9011f2).getFile(0x04);
+
+        /*
+         *  This file reads very much like a record file but it professes to
+         *  be only a regular file.  As such, we'll need to extract the records
+         *  manually.
+         */
+        byte [] data = file.getData();
+        int pos = data.length - RECORD_LENGTH;
+        List<ClipperRefill> result = new ArrayList<>();
+        while (pos > 0) {
+            byte[] slice = Utils.byteArraySlice(data, pos, RECORD_LENGTH);
+            ClipperRefill refill = createRefill(slice);
+            if (refill != null)
+                result.add(refill);
+            pos -= RECORD_LENGTH;
+        }
+        ClipperRefill[] useLog = new ClipperRefill[result.size()];
+        useLog = result.toArray(useLog);
+        Arrays.sort(useLog, new Comparator<ClipperRefill>() {
+            public int compare(ClipperRefill r, ClipperRefill r1) {
+                return Long.valueOf(r1.getTimestamp()).compareTo(r.getTimestamp());
+            }
+        });
+        return useLog;
+    }
+
+    private ClipperRefill createRefill (byte[] useData) {
+        long timestamp, amount, agency, machineid;
+
+        timestamp = Utils.byteArrayToLong(useData, 0x4, 4);
+        agency    = Utils.byteArrayToLong(useData, 0x2, 2);
+        machineid = Utils.byteArrayToLong(useData, 0x8, 4);
+        amount    = Utils.byteArrayToLong(useData, 0xe, 2);
+
+        if (timestamp == 0)
+            return null;
+
+        timestamp -= EPOCH_OFFSET;
+        return new ClipperRefill(timestamp, amount, agency, machineid);
+    }
+
+    private void setBalances() {
+        int trip_idx = 0;
+        int refill_idx = 0;
+        long balance = (long) mBalance;
+
+        while (trip_idx < mTrips.length) {
+            while (refill_idx < mRefills.length &&
+                    mRefills[refill_idx].getTimestamp() >
+                        mTrips[trip_idx].getTimestamp()) {
+                balance -= mRefills[refill_idx].mAmount;
+                refill_idx++;
+            }
+            mTrips[trip_idx].mBalance = balance;
+            balance += mTrips[trip_idx].mFare;
+            trip_idx++;
+        }
+    }
+
+    public static String getAgencyName(int agency) {
+        if (ClipperData.AGENCIES.containsKey(agency)) {
+            return ClipperData.AGENCIES.get(agency);
+        }
+        return FareBotApplication.getInstance().getString(R.string.unknown_format, "0x" + Long.toString(agency, 16));
+    }
+
+    public static String getShortAgencyName (int agency) {
+        if (ClipperData.SHORT_AGENCIES.containsKey(agency)) {
+            return ClipperData.SHORT_AGENCIES.get(agency);
+        }
+        return FareBotApplication.getInstance().getString(R.string.unknown_format, "0x" + Long.toString(agency, 16));
+    }
+
+    public void writeToParcel(Parcel parcel, int flags) {
+        parcel.writeLong(mSerialNumber);
+        parcel.writeLong(mBalance);
+
+        parcel.writeInt(mTrips.length);
+        parcel.writeTypedArray(mTrips,  flags);
+
+        parcel.writeInt(mRefills.length);
+        parcel.writeTypedArray(mRefills, flags);
+    }
+
+}
diff --git a/src/main/java/com/codebutler/farebot/transit/clipper/ClipperTrip.java b/src/main/java/com/codebutler/farebot/transit/clipper/ClipperTrip.java
new file mode 100644
index 0000000..6109bac
--- /dev/null
+++ b/src/main/java/com/codebutler/farebot/transit/clipper/ClipperTrip.java
@@ -0,0 +1,191 @@
+package com.codebutler.farebot.transit.clipper;
+
+import android.os.Parcel;
+
+import com.codebutler.farebot.transit.Station;
+import com.codebutler.farebot.transit.Trip;
+
+import java.text.NumberFormat;
+import java.util.Locale;
+
+public class ClipperTrip extends Trip {
+    final long mTimestamp;
+    final long mExitTimestamp;
+    final long mFare;
+    final long mAgency;
+    final long mFrom;
+    final long mTo;
+    final long mRoute;
+    long mBalance;
+
+    public ClipperTrip(long timestamp, long exitTimestamp, long fare, long agency, long from, long to, long route) {
+        mTimestamp      = timestamp;
+        mExitTimestamp  = exitTimestamp;
+        mFare           = fare;
+        mAgency         = agency;
+        mFrom           = from;
+        mTo             = to;
+        mRoute          = route;
+        mBalance        = 0;
+    }
+
+    public static Creator<ClipperTrip> CREATOR = new Creator<ClipperTrip>() {
+        public ClipperTrip createFromParcel(Parcel parcel) {
+            return new ClipperTrip(parcel);
+        }
+
+        public ClipperTrip[] newArray(int size) {
+            return new ClipperTrip[size];
+        }
+    };
+
+    ClipperTrip(Parcel parcel) {
+        mTimestamp     = parcel.readLong();
+        mExitTimestamp = parcel.readLong();
+        mFare          = parcel.readLong();
+        mAgency        = parcel.readLong();
+        mFrom          = parcel.readLong();
+        mTo            = parcel.readLong();
+        mRoute         = parcel.readLong();
+        mBalance       = parcel.readLong();
+    }
+
+    @Override public long getTimestamp () {
+        return mTimestamp;
+    }
+
+    @Override public long getExitTimestamp () {
+        return mExitTimestamp;
+    }
+
+    @Override public String getAgencyName () {
+        return ClipperTransitData.getAgencyName((int)mAgency);
+    }
+
+    @Override public String getShortAgencyName () {
+        return ClipperTransitData.getShortAgencyName((int)mAgency);
+    }
+
+    @Override public String getRouteName () {
+        if (mAgency == ClipperData.AGENCY_FERRY &&
+            ClipperData.FERRY_ROUTES.containsKey(mRoute)) {
+            return ClipperData.FERRY_ROUTES.get(mRoute);
+        } else {
+            // FIXME: Need to find bus route #s
+            // return "(Route 0x" + Long.toString(mRoute, 16) + ")";
+            return null;
+        }
+    }
+
+    @Override public String getFareString () {
+        return NumberFormat.getCurrencyInstance(Locale.US).format((double)mFare / 100.0);
+    }
+
+    @Override public double getFare () {
+        return mFare;
+    }
+
+    @Override public String getBalanceString () {
+        return NumberFormat.getCurrencyInstance(Locale.US).format((double)mBalance / 100.0);
+    }
+
+    @Override public Station getStartStation() {
+        if (mAgency == ClipperData.AGENCY_BART) {
+            if (ClipperData.BART_STATIONS.containsKey(mFrom)) {
+                return ClipperData.BART_STATIONS.get(mFrom);
+            }
+        } else if (mAgency == ClipperData.AGENCY_FERRY) {
+            if (ClipperData.FERRY_TERMINALS.containsKey(mFrom)) {
+                return ClipperData.FERRY_TERMINALS.get(mFrom);
+            }
+        }
+        return null;
+    }
+
+    @Override public Station getEndStation() {
+        if (mAgency == ClipperData.AGENCY_BART) {
+            if (ClipperData.BART_STATIONS.containsKey(mTo)) {
+                return ClipperData.BART_STATIONS.get(mTo);
+            }
+        } else if (mAgency == ClipperData.AGENCY_FERRY) {
+            if (ClipperData.FERRY_TERMINALS.containsKey(mTo)) {
+                return ClipperData.FERRY_TERMINALS.get(mTo);
+            }
+        }
+        return null;
+    }
+
+    @Override public String getStartStationName () {
+        if (mAgency == ClipperData.AGENCY_BART || mAgency == ClipperData.AGENCY_FERRY) {
+            Station station = getStartStation();
+            if (station != null)
+                return station.getShortStationName();
+            else
+                return "Station #0x" + Long.toString(mFrom, 16);
+        } else if (mAgency == ClipperData.AGENCY_MUNI) {
+            return null; // Coach number is not collected
+        } else if (mAgency == ClipperData.AGENCY_GGT || mAgency == ClipperData.AGENCY_CALTRAIN) {
+            return "Zone #" + mFrom;
+        } else {
+            return "(Unknown Station)";
+        }
+    }
+
+    @Override public String getEndStationName () {
+        if (mAgency == ClipperData.AGENCY_BART) {
+            Station station = getEndStation();
+            if (station != null)
+                return ClipperData.BART_STATIONS.get(mTo).getShortStationName();
+            else
+                return "Station #0x" + Long.toString(mTo, 16);
+        } else if (mAgency == ClipperData.AGENCY_MUNI) {
+            return null; // Coach number is not collected
+        } else if (mAgency == ClipperData.AGENCY_GGT || mAgency == ClipperData.AGENCY_CALTRAIN ||
+                   mAgency == ClipperData.AGENCY_FERRY) {
+            if (mTo == 0xffff)
+                return "(End of line)";
+            return "Zone #" + mTo;
+        } else {
+            return "(Unknown Station)";
+        }
+    }
+
+    @Override public Mode getMode() {
+        if (mAgency == ClipperData.AGENCY_ACTRAN)
+            return Mode.BUS;
+        if (mAgency == ClipperData.AGENCY_BART)
+            return Mode.METRO;
+        if (mAgency == ClipperData.AGENCY_CALTRAIN)
+            return Mode.TRAIN;
+        if (mAgency == ClipperData.AGENCY_GGT)
+            return Mode.BUS;
+        if (mAgency == ClipperData.AGENCY_SAMTRANS)
+            return Mode.BUS;
+        if (mAgency == ClipperData.AGENCY_VTA)
+            return Mode.BUS; // FIXME: or Mode.TRAM for light rail
+        if (mAgency == ClipperData.AGENCY_MUNI)
+            return Mode.BUS; // FIXME: or Mode.TRAM for "Muni Metro"
+        if (mAgency == ClipperData.AGENCY_FERRY)
+            return Mode.FERRY;
+        return Mode.OTHER;
+    }
+
+    @Override public boolean hasTime() {
+        return true;
+    }
+
+    public void writeToParcel(Parcel parcel, int flags) {
+        parcel.writeLong(mTimestamp);
+        parcel.writeLong(mExitTimestamp);
+        parcel.writeLong(mFare);
+        parcel.writeLong(mAgency);
+        parcel.writeLong(mFrom);
+        parcel.writeLong(mTo);
+        parcel.writeLong(mRoute);
+        parcel.writeLong(mBalance);
+    }
+
+    public int describeContents() {
+        return 0;
+    }
+}
diff --git a/src/main/java/com/codebutler/farebot/transit/edy/EdyTransitData.java b/src/main/java/com/codebutler/farebot/transit/edy/EdyTransitData.java
new file mode 100644
index 0000000..b71c1a5
--- /dev/null
+++ b/src/main/java/com/codebutler/farebot/transit/edy/EdyTransitData.java
@@ -0,0 +1,162 @@
+/*
+ * EdyTransitData.java
+ *
+ * Authors:
+ * Chris Norden
+ * Eric Butler <eric@codebutler.com>
+ *
+ * Based on code from http://code.google.com/p/nfc-felica/
+ * nfc-felica by Kazzz. See project URL for complete author information.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ *
+ */
+
+package com.codebutler.farebot.transit.edy;
+
+import android.os.Parcel;
+
+import com.codebutler.farebot.card.felica.FelicaBlock;
+import com.codebutler.farebot.card.felica.FelicaCard;
+import com.codebutler.farebot.card.felica.FelicaService;
+import com.codebutler.farebot.transit.Refill;
+import com.codebutler.farebot.transit.Subscription;
+import com.codebutler.farebot.transit.TransitData;
+import com.codebutler.farebot.transit.TransitIdentity;
+import com.codebutler.farebot.transit.Trip;
+import com.codebutler.farebot.ui.ListItem;
+
+import net.kazzz.felica.lib.FeliCaLib;
+import net.kazzz.felica.lib.Util;
+
+import java.text.NumberFormat;
+import java.util.ArrayList;
+import java.util.List;
+import java.util.Locale;
+
+public class EdyTransitData extends TransitData {
+    private EdyTrip[] mTrips;
+
+    // defines
+    public static final int FELICA_SERVICE_EDY_ID       = 0x110B;
+    public static final int FELICA_SERVICE_EDY_BALANCE  = 0x1317;
+    public static final int FELICA_SERVICE_EDY_HISTORY  = 0x170F;
+
+    public static final int FELICA_MODE_EDY_DEBIT       = 0x20;
+    public static final int FELICA_MODE_EDY_CHARGE      = 0x02;
+    public static final int FELICA_MODE_EDY_GIFT        = 0x04;
+
+    // private data
+    private byte[]          mSerialNumber = new byte[8];
+    private int             mCurrentBalance;
+
+
+    public Creator<EdyTransitData> CREATOR = new Creator<EdyTransitData>() {
+        public EdyTransitData createFromParcel(Parcel parcel) {
+            return new EdyTransitData(parcel);
+        }
+
+        public EdyTransitData[] newArray(int size) {
+            return new EdyTransitData[size];
+        }
+    };
+
+    public static boolean check(FelicaCard card) {
+        return (card.getSystem(FeliCaLib.SYSTEMCODE_EDY) != null);
+    }
+
+    public static TransitIdentity parseTransitIdentity (FelicaCard card) {
+        return new TransitIdentity("Edy", null);
+    }
+
+    public EdyTransitData(Parcel parcel) {
+        mTrips = new EdyTrip[parcel.readInt()];
+        parcel.readTypedArray(mTrips, EdyTrip.CREATOR);
+    }
+
+    public EdyTransitData(FelicaCard card) {
+        // card ID is in block 0, bytes 2-9, big-endian ordering
+        FelicaService serviceID = card.getSystem(FeliCaLib.SYSTEMCODE_EDY).getService(FELICA_SERVICE_EDY_ID);
+        List<FelicaBlock> blocksID = serviceID.getBlocks();
+        FelicaBlock blockID = blocksID.get(0);
+        byte[] dataID = blockID.getData();
+        for (int i=2; i<10; i++)
+        {
+            mSerialNumber[i-2] = dataID[i];
+        }
+
+        // current balance info in block 0, bytes 0-3, little-endian ordering
+        FelicaService serviceBalance = card.getSystem(FeliCaLib.SYSTEMCODE_EDY).getService(FELICA_SERVICE_EDY_BALANCE);
+        List<FelicaBlock> blocksBalance = serviceBalance.getBlocks();
+        FelicaBlock blockBalance = blocksBalance.get(0);
+        byte[] dataBalance = blockBalance.getData();
+        mCurrentBalance = Util.toInt(dataBalance[3], dataBalance[2], dataBalance[1], dataBalance[0]);
+
+        // now read the transaction history
+        FelicaService serviceHistory = card.getSystem(FeliCaLib.SYSTEMCODE_EDY).getService(FELICA_SERVICE_EDY_HISTORY);
+        List<EdyTrip> trips = new ArrayList<>();
+
+        // Read blocks in order
+        List<FelicaBlock> blocks = serviceHistory.getBlocks();
+        for (int i = 0; i < blocks.size(); i++) {
+            FelicaBlock block = blocks.get(i);
+            EdyTrip trip = new EdyTrip(block);
+            trips.add(trip);
+        }
+
+        mTrips = trips.toArray(new EdyTrip[trips.size()]);
+    }
+
+    @Override public String getBalanceString() {
+        NumberFormat format = NumberFormat.getCurrencyInstance(Locale.JAPAN);
+        format.setMaximumFractionDigits(0);
+        return format.format(mCurrentBalance);
+    }
+
+    @Override public String getSerialNumber() {
+        StringBuilder str = new StringBuilder(20);
+        for (int i=0; i<8; i+=2) {
+            str.append(String.format("%02X", mSerialNumber[i]));
+            str.append(String.format("%02X", mSerialNumber[i+1]));
+            if (i < 6)
+                str.append(" ");
+        }
+        return str.toString();
+    }
+
+    @Override public Trip[] getTrips() {
+        return mTrips;
+    }
+
+    @Override public Refill[] getRefills() {
+        return null;
+    }
+
+    @Override public Subscription[] getSubscriptions() {
+        return null;
+    }
+
+    @Override public List<ListItem> getInfo() {
+        return null;
+    }
+
+    @Override public String getCardName() {
+        return "Edy";
+    }
+
+    public void writeToParcel(Parcel parcel, int flags) {
+        parcel.writeInt(mTrips.length);
+        parcel.writeTypedArray(mTrips, flags);
+    }
+}
+
diff --git a/src/main/java/com/codebutler/farebot/transit/edy/EdyTrip.java b/src/main/java/com/codebutler/farebot/transit/edy/EdyTrip.java
new file mode 100644
index 0000000..479b074
--- /dev/null
+++ b/src/main/java/com/codebutler/farebot/transit/edy/EdyTrip.java
@@ -0,0 +1,154 @@
+package com.codebutler.farebot.transit.edy;
+
+import android.app.Application;
+import android.os.Parcel;
+
+import com.codebutler.farebot.FareBotApplication;
+import com.codebutler.farebot.R;
+import com.codebutler.farebot.card.felica.FelicaBlock;
+import com.codebutler.farebot.transit.Station;
+import com.codebutler.farebot.transit.Trip;
+
+import net.kazzz.felica.lib.Util;
+
+import java.text.NumberFormat;
+import java.util.Date;
+import java.util.Locale;
+
+public class EdyTrip extends Trip {
+    private final int mProcessType;
+    private final int mSequenceNumber;
+    private final Date mTimestamp;
+    private final int mTransactionAmount;
+    private final int mBalance;
+
+    public EdyTrip(FelicaBlock block) {
+        byte[] data = block.getData();
+
+//          Data Offsets with values
+//          ------------------------
+//          0x00    type (0x20 = payment, 0x02 = charge, 0x04 = gift)
+//          0x01    sequence number (3 bytes, big-endian)
+//          0x04    date/time (upper 15 bits - added as day offset, lower 17 bits - added as second offset to Jan 1, 2000 00:00:00)
+//          0x08    transaction amount (big-endian)
+//          0x0c    balance (big-endian)
+
+
+        mProcessType = data[0];
+        mSequenceNumber = Util.toInt(data[1], data[2], data[3]);
+        mTimestamp = EdyUtil.extractDate(data);
+        mTransactionAmount = Util.toInt(data[8], data[9], data[10], data[11]);
+        mBalance = Util.toInt(data[12], data[13], data[14], data[15]);
+    }
+
+    public static Creator<EdyTrip> CREATOR = new Creator<EdyTrip>() {
+        public EdyTrip createFromParcel(Parcel parcel) {
+            return new EdyTrip(parcel);
+        }
+
+        public EdyTrip[] newArray(int size) {
+            return new EdyTrip[size];
+        }
+    };
+
+    public EdyTrip(Parcel parcel) {
+        mProcessType = parcel.readInt();
+        mSequenceNumber = parcel.readInt();
+        mTimestamp  = new Date(parcel.readLong());
+        mTransactionAmount = parcel.readInt();
+        mBalance = parcel.readInt();
+    }
+
+    public void writeToParcel(Parcel parcel, int flags) {
+        parcel.writeInt(mProcessType);
+        parcel.writeInt(mSequenceNumber);
+        parcel.writeLong(mTimestamp.getTime());
+        parcel.writeInt(mTransactionAmount);
+        parcel.writeInt(mBalance);
+    }
+
+    public Mode getMode() {
+        if (mProcessType == EdyTransitData.FELICA_MODE_EDY_DEBIT) {
+            return Mode.POS;
+        } else if (mProcessType == EdyTransitData.FELICA_MODE_EDY_CHARGE) {
+            return Mode.TICKET_MACHINE;
+        } else if (mProcessType == EdyTransitData.FELICA_MODE_EDY_GIFT) {
+            return Mode.VENDING_MACHINE;
+        } else {
+            return Mode.OTHER;
+        }
+    }
+
+    public long getTimestamp() {
+        if (mTimestamp != null)
+            return mTimestamp.getTime() / 1000;
+        else
+            return 0;
+    }
+
+    public double getFare () {
+        return mTransactionAmount;
+    }
+
+    public String getFareString () {
+        NumberFormat format = NumberFormat.getCurrencyInstance(Locale.JAPAN);
+        format.setMaximumFractionDigits(0);
+        if (mProcessType != EdyTransitData.FELICA_MODE_EDY_DEBIT)
+            return "+" + format.format(mTransactionAmount);
+        return format.format(mTransactionAmount);
+    }
+
+    public String getBalanceString () {
+        NumberFormat format = NumberFormat.getCurrencyInstance(Locale.JAPAN);
+        format.setMaximumFractionDigits(0);
+        return format.format(mBalance);
+    }
+
+    // use agency name for the tranaction number
+    public String getShortAgencyName () {
+        return getAgencyName();
+    }
+    public String getAgencyName () {
+        NumberFormat format = NumberFormat.getIntegerInstance();
+        format.setMinimumIntegerDigits(8);
+        format.setGroupingUsed(false);
+        Application app = FareBotApplication.getInstance();
+        String str;
+        if (mProcessType != EdyTransitData.FELICA_MODE_EDY_DEBIT)
+            str = app.getString(R.string.felica_process_charge);
+        else
+            str = app.getString(R.string.felica_process_merchandise_purchase);
+        str += " " + app.getString(R.string.transaction_sequence) + format.format(mSequenceNumber);
+        return str;
+    }
+
+    public boolean hasTime() {
+        if (mTimestamp != null)
+            return true;
+        else
+            return false;
+    }
+
+    // unused
+    public String getRouteName () {
+        return null;
+    }
+    public String getStartStationName () {
+        return null;
+    }
+    public Station getStartStation () {
+        return null;
+    }
+    public String getEndStationName () {
+        return null;
+    }
+    public Station getEndStation () {
+        return null;
+    }
+    public int describeContents() {
+        return 0;
+    }
+    public long getExitTimestamp() {
+        return 0;
+    }
+}
diff --git a/src/main/java/com/codebutler/farebot/transit/edy/EdyUtil.java b/src/main/java/com/codebutler/farebot/transit/edy/EdyUtil.java
new file mode 100644
index 0000000..304d6e3
--- /dev/null
+++ b/src/main/java/com/codebutler/farebot/transit/edy/EdyUtil.java
@@ -0,0 +1,26 @@
+package com.codebutler.farebot.transit.edy;
+
+import net.kazzz.felica.lib.Util;
+
+import java.util.Calendar;
+import java.util.Date;
+
+final class EdyUtil {
+    private EdyUtil() { }
+
+    static Date extractDate(byte[] data) {
+        int fulloffset = Util.toInt(data[4], data[5], data[6], data[7]);
+        if (fulloffset == 0)
+            return null;
+
+        int dateoffset = fulloffset >>> 17;
+        int timeoffset = fulloffset & 0x1ffff;
+
+        Calendar c = Calendar.getInstance();
+        c.set(2000, 0, 1, 0, 0, 0);
+        c.add(Calendar.DATE, dateoffset);
+        c.add(Calendar.SECOND, timeoffset);
+
+        return c.getTime();
+    }
+}
diff --git a/src/main/java/com/codebutler/farebot/transit/EZLinkTransitData.java b/src/main/java/com/codebutler/farebot/transit/ezlink/EZLinkTransitData.java
similarity index 73%
rename from src/main/java/com/codebutler/farebot/transit/EZLinkTransitData.java
rename to src/main/java/com/codebutler/farebot/transit/ezlink/EZLinkTransitData.java
index f021208..5d2f231 100644
--- a/src/main/java/com/codebutler/farebot/transit/EZLinkTransitData.java
+++ b/src/main/java/com/codebutler/farebot/transit/ezlink/EZLinkTransitData.java
@@ -20,24 +20,33 @@
  * along with this program.  If not, see <http://www.gnu.org/licenses/>.
  */
 
-package com.codebutler.farebot.transit;
+package com.codebutler.farebot.transit.ezlink;
 
 import android.os.Parcel;
-import com.codebutler.farebot.ui.ListItem;
-import com.codebutler.farebot.Utils;
+
+import com.codebutler.farebot.card.Card;
 import com.codebutler.farebot.card.cepas.CEPASCard;
 import com.codebutler.farebot.card.cepas.CEPASTransaction;
-import com.codebutler.farebot.card.Card;
+import com.codebutler.farebot.transit.Refill;
+import com.codebutler.farebot.transit.Subscription;
+import com.codebutler.farebot.transit.TransitData;
+import com.codebutler.farebot.transit.TransitIdentity;
+import com.codebutler.farebot.transit.Trip;
+import com.codebutler.farebot.ui.ListItem;
+import com.codebutler.farebot.util.Utils;
 
 import java.text.NumberFormat;
-import java.util.*;
+import java.util.Currency;
+import java.util.HashSet;
+import java.util.List;
+import java.util.TreeMap;
 
 public class EZLinkTransitData extends TransitData {
     private String       mSerialNumber;
     private double       mBalance;
     private EZLinkTrip[] mTrips;
 
-    private static HashSet<String> sbsBuses = new HashSet<String> () {
+    static HashSet<String> sbsBuses = new HashSet<String> () {
         private static final long serialVersionUID = 1L; {
             add("CT18");
             add("CT8");
@@ -518,12 +527,12 @@ public class EZLinkTransitData extends TransitData {
     }
 
     private EZLinkTrip[] parseTrips (CEPASCard card) {
-        CEPASTransaction[] transactions = card.getHistory(3).getTransactions();
+        List<CEPASTransaction> transactions = card.getHistory(3).getTransactions();
         if (transactions != null) {
-            EZLinkTrip[] trips = new EZLinkTrip[transactions.length];
+            EZLinkTrip[] trips = new EZLinkTrip[transactions.size()];
 
             for (int i = 0; i < trips.length; i++)
-                trips[i] = new EZLinkTrip(transactions[i], getCardName());
+                trips[i] = new EZLinkTrip(transactions.get(i), getCardName());
 
             return trips;
         }
@@ -538,177 +547,4 @@ public class EZLinkTransitData extends TransitData {
         parcel.writeTypedArray(mTrips, flags);
     }
 
-    public static class EZLinkTrip extends Trip {
-        private final CEPASTransaction mTransaction;
-        private final String mCardName;
-        
-        public EZLinkTrip (CEPASTransaction transaction, String cardName) {
-            mTransaction = transaction;
-            mCardName = cardName;
-        }
-
-        private EZLinkTrip (Parcel parcel) {
-            mTransaction = parcel.readParcelable(CEPASTransaction.class.getClassLoader());
-            mCardName = parcel.readString();
-        }
-
-        public static Creator<EZLinkTrip> CREATOR = new Creator<EZLinkTrip>() {
-            public EZLinkTrip createFromParcel(Parcel parcel) {
-                return new EZLinkTrip(parcel);
-            }
-            public EZLinkTrip[] newArray(int size) {
-                return new EZLinkTrip[size];
-            }
-        };
-
-        @Override public long getTimestamp() {
-            return mTransaction.getTimestamp();
-        }
-
-        @Override public long getExitTimestamp() {
-            return 0;
-        }
-
-        @Override public String getAgencyName () {
-            if (mTransaction.getType() == CEPASTransaction.TransactionType.BUS || mTransaction.getType() == CEPASTransaction.TransactionType.BUS_REFUND) {
-                String routeString = mTransaction.getUserData().substring(3, 7).replace(" ", "");
-                if (sbsBuses.contains(routeString))
-                    return "SBS";
-                return "SMRT";
-            }
-            if (mTransaction.getType() == CEPASTransaction.TransactionType.CREATION || mTransaction.getType() == CEPASTransaction.TransactionType.TOP_UP || mTransaction.getType() == CEPASTransaction.TransactionType.SERVICE) {
-                return mCardName;
-            }
-            if (mTransaction.getType() == CEPASTransaction.TransactionType.RETAIL) {
-                return "POS";
-            }
-            return "SMRT";
-        }
-
-        @Override public String getShortAgencyName () {
-            if (mTransaction.getType() == CEPASTransaction.TransactionType.BUS || mTransaction.getType() == CEPASTransaction.TransactionType.BUS_REFUND) {
-                String routeString = mTransaction.getUserData().substring(3, 7).replace(" ", "");
-                if (sbsBuses.contains(routeString))
-                    return "SBS";
-                return "SMRT";
-            }
-            if (mTransaction.getType() == CEPASTransaction.TransactionType.CREATION || mTransaction.getType() == CEPASTransaction.TransactionType.TOP_UP || mTransaction.getType() == CEPASTransaction.TransactionType.SERVICE) {
-                if (mCardName.equals("EZ-Link")) return "EZ"; else return mCardName;
-            }
-            if (mTransaction.getType() == CEPASTransaction.TransactionType.RETAIL) {
-                return "POS";
-            }
-            return "SMRT";
-        }
-
-        @Override public String getRouteName () {
-            if (mTransaction.getType() == CEPASTransaction.TransactionType.BUS) {
-                if (mTransaction.getUserData().startsWith("SVC"))
-                    return "Bus #" + mTransaction.getUserData().substring(3, 7).replace(" ", "");
-                return "(Unknown Bus Route)";
-            }
-            else if (mTransaction.getType() == CEPASTransaction.TransactionType.BUS_REFUND)
-                return "Bus Refund";
-            else if (mTransaction.getType() == CEPASTransaction.TransactionType.MRT)
-                return "MRT";
-            else if (mTransaction.getType() == CEPASTransaction.TransactionType.TOP_UP)
-                return "Top-up";
-            else if (mTransaction.getType() == CEPASTransaction.TransactionType.CREATION)
-                return "First use";
-            else if (mTransaction.getType() == CEPASTransaction.TransactionType.RETAIL)
-                return "Retail Purchase";
-            else if (mTransaction.getType() == CEPASTransaction.TransactionType.SERVICE)
-                return "Service Charge";
-            return "(Unknown Route)";
-        }
-
-        @Override public String getFareString () {
-            NumberFormat numberFormat = NumberFormat.getCurrencyInstance();
-            numberFormat.setCurrency(Currency.getInstance("SGD"));
-
-            int balance = -mTransaction.getAmount();
-            if (balance < 0)
-                return "Credit " + numberFormat.format(-balance / 100.0);
-            else
-                return numberFormat.format(balance / 100.0);
-        }
-
-        @Override public double getFare () {
-            if (mTransaction.getType() == CEPASTransaction.TransactionType.CREATION)
-                return 0.0;
-            return mTransaction.getAmount() / 100.0;
-        }
-
-        @Override public String getBalanceString () {
-            return "(???)";
-        }
-
-        @Override public Station getStartStation () {
-            if (mTransaction.getType() == CEPASTransaction.TransactionType.CREATION)
-                return null;
-            if (mTransaction.getUserData().charAt(3) == '-'
-                || mTransaction.getUserData().charAt(3) == ' ') {
-                String startStationAbbr = mTransaction.getUserData().substring(0, 3);
-                return EZLinkTransitData.getStation(startStationAbbr);
-            }
-            return null;
-        }
-
-        @Override public Station getEndStation () {
-            if (mTransaction.getType() == CEPASTransaction.TransactionType.CREATION)
-                return null;
-            if (mTransaction.getUserData().charAt(3) == '-'
-                || mTransaction.getUserData().charAt(3) == ' ') {
-                String endStationAbbr = mTransaction.getUserData().substring(4, 7);
-                return EZLinkTransitData.getStation(endStationAbbr);
-            }
-            return null;
-        }
-
-        @Override public String getStartStationName() {
-            Station startStation = getStartStation();
-            if (startStation != null)
-                return startStation.getStationName();
-            else if (mTransaction.getUserData().charAt(3) == '-'
-                || mTransaction.getUserData().charAt(3) == ' ') {
-                return mTransaction.getUserData().substring(0, 3); // extract startStationAbbr
-            }
-            return mTransaction.getUserData();
-        }
-
-        @Override public String getEndStationName () {
-            Station endStation = getEndStation();
-            if (endStation != null)
-                return endStation.getStationName();
-            else if (mTransaction.getUserData().charAt(3) == '-'
-                || mTransaction.getUserData().charAt(3) == ' ') {
-                return mTransaction.getUserData().substring(4, 7); // extract endStationAbbr
-            }
-            return null;
-        }
-
-        @Override public Mode getMode() {
-            if (mTransaction.getType() == CEPASTransaction.TransactionType.BUS || mTransaction.getType() == CEPASTransaction.TransactionType.BUS_REFUND)
-                return Mode.BUS;
-            else if (mTransaction.getType() == CEPASTransaction.TransactionType.MRT)
-                return Mode.METRO;
-            else if (mTransaction.getType() == CEPASTransaction.TransactionType.TOP_UP)
-                return Mode.TICKET_MACHINE;
-            else if (mTransaction.getType() == CEPASTransaction.TransactionType.RETAIL || mTransaction.getType() == CEPASTransaction.TransactionType.SERVICE)
-                return Mode.POS;
-            return Mode.OTHER;
-        }
-
-        @Override public boolean hasTime() {
-            return true;
-        }
-
-        public void writeToParcel(Parcel parcel, int flags) {
-            parcel.writeParcelable(mTransaction, flags);
-        }
-
-        public int describeContents() {
-            return 0;
-        }
-    }
 }
diff --git a/src/main/java/com/codebutler/farebot/transit/ezlink/EZLinkTrip.java b/src/main/java/com/codebutler/farebot/transit/ezlink/EZLinkTrip.java
new file mode 100644
index 0000000..12129ed
--- /dev/null
+++ b/src/main/java/com/codebutler/farebot/transit/ezlink/EZLinkTrip.java
@@ -0,0 +1,184 @@
+package com.codebutler.farebot.transit.ezlink;
+
+import android.os.Parcel;
+
+import com.codebutler.farebot.card.cepas.CEPASTransaction;
+import com.codebutler.farebot.transit.Station;
+import com.codebutler.farebot.transit.Trip;
+
+import java.text.NumberFormat;
+import java.util.Currency;
+
+public class EZLinkTrip extends Trip {
+    private final CEPASTransaction mTransaction;
+    private final String mCardName;
+
+    public EZLinkTrip(CEPASTransaction transaction, String cardName) {
+        mTransaction = transaction;
+        mCardName = cardName;
+    }
+
+    EZLinkTrip(Parcel parcel) {
+        mTransaction = parcel.readParcelable(CEPASTransaction.class.getClassLoader());
+        mCardName = parcel.readString();
+    }
+
+    public static Creator<EZLinkTrip> CREATOR = new Creator<EZLinkTrip>() {
+        public EZLinkTrip createFromParcel(Parcel parcel) {
+            return new EZLinkTrip(parcel);
+        }
+        public EZLinkTrip[] newArray(int size) {
+            return new EZLinkTrip[size];
+        }
+    };
+
+    @Override public long getTimestamp() {
+        return mTransaction.getTimestamp();
+    }
+
+    @Override public long getExitTimestamp() {
+        return 0;
+    }
+
+    @Override public String getAgencyName () {
+        if (mTransaction.getType() == CEPASTransaction.TransactionType.BUS || mTransaction.getType() == CEPASTransaction.TransactionType.BUS_REFUND) {
+            String routeString = mTransaction.getUserData().substring(3, 7).replace(" ", "");
+            if (EZLinkTransitData.sbsBuses.contains(routeString))
+                return "SBS";
+            return "SMRT";
+        }
+        if (mTransaction.getType() == CEPASTransaction.TransactionType.CREATION || mTransaction.getType() == CEPASTransaction.TransactionType.TOP_UP || mTransaction.getType() == CEPASTransaction.TransactionType.SERVICE) {
+            return mCardName;
+        }
+        if (mTransaction.getType() == CEPASTransaction.TransactionType.RETAIL) {
+            return "POS";
+        }
+        return "SMRT";
+    }
+
+    @Override public String getShortAgencyName () {
+        if (mTransaction.getType() == CEPASTransaction.TransactionType.BUS || mTransaction.getType() == CEPASTransaction.TransactionType.BUS_REFUND) {
+            String routeString = mTransaction.getUserData().substring(3, 7).replace(" ", "");
+            if (EZLinkTransitData.sbsBuses.contains(routeString))
+                return "SBS";
+            return "SMRT";
+        }
+        if (mTransaction.getType() == CEPASTransaction.TransactionType.CREATION || mTransaction.getType() == CEPASTransaction.TransactionType.TOP_UP || mTransaction.getType() == CEPASTransaction.TransactionType.SERVICE) {
+            if (mCardName.equals("EZ-Link")) return "EZ"; else return mCardName;
+        }
+        if (mTransaction.getType() == CEPASTransaction.TransactionType.RETAIL) {
+            return "POS";
+        }
+        return "SMRT";
+    }
+
+    @Override public String getRouteName () {
+        if (mTransaction.getType() == CEPASTransaction.TransactionType.BUS) {
+            if (mTransaction.getUserData().startsWith("SVC"))
+                return "Bus #" + mTransaction.getUserData().substring(3, 7).replace(" ", "");
+            return "(Unknown Bus Route)";
+        }
+        else if (mTransaction.getType() == CEPASTransaction.TransactionType.BUS_REFUND)
+            return "Bus Refund";
+        else if (mTransaction.getType() == CEPASTransaction.TransactionType.MRT)
+            return "MRT";
+        else if (mTransaction.getType() == CEPASTransaction.TransactionType.TOP_UP)
+            return "Top-up";
+        else if (mTransaction.getType() == CEPASTransaction.TransactionType.CREATION)
+            return "First use";
+        else if (mTransaction.getType() == CEPASTransaction.TransactionType.RETAIL)
+            return "Retail Purchase";
+        else if (mTransaction.getType() == CEPASTransaction.TransactionType.SERVICE)
+            return "Service Charge";
+        return "(Unknown Route)";
+    }
+
+    @Override public String getFareString () {
+        NumberFormat numberFormat = NumberFormat.getCurrencyInstance();
+        numberFormat.setCurrency(Currency.getInstance("SGD"));
+
+        int balance = -mTransaction.getAmount();
+        if (balance < 0)
+            return "Credit " + numberFormat.format(-balance / 100.0);
+        else
+            return numberFormat.format(balance / 100.0);
+    }
+
+    @Override public double getFare () {
+        if (mTransaction.getType() == CEPASTransaction.TransactionType.CREATION)
+            return 0.0;
+        return mTransaction.getAmount() / 100.0;
+    }
+
+    @Override public String getBalanceString () {
+        return "(???)";
+    }
+
+    @Override public Station getStartStation () {
+        if (mTransaction.getType() == CEPASTransaction.TransactionType.CREATION)
+            return null;
+        if (mTransaction.getUserData().charAt(3) == '-'
+            || mTransaction.getUserData().charAt(3) == ' ') {
+            String startStationAbbr = mTransaction.getUserData().substring(0, 3);
+            return EZLinkTransitData.getStation(startStationAbbr);
+        }
+        return null;
+    }
+
+    @Override public Station getEndStation () {
+        if (mTransaction.getType() == CEPASTransaction.TransactionType.CREATION)
+            return null;
+        if (mTransaction.getUserData().charAt(3) == '-'
+            || mTransaction.getUserData().charAt(3) == ' ') {
+            String endStationAbbr = mTransaction.getUserData().substring(4, 7);
+            return EZLinkTransitData.getStation(endStationAbbr);
+        }
+        return null;
+    }
+
+    @Override public String getStartStationName() {
+        Station startStation = getStartStation();
+        if (startStation != null)
+            return startStation.getStationName();
+        else if (mTransaction.getUserData().charAt(3) == '-'
+            || mTransaction.getUserData().charAt(3) == ' ') {
+            return mTransaction.getUserData().substring(0, 3); // extract startStationAbbr
+        }
+        return mTransaction.getUserData();
+    }
+
+    @Override public String getEndStationName () {
+        Station endStation = getEndStation();
+        if (endStation != null)
+            return endStation.getStationName();
+        else if (mTransaction.getUserData().charAt(3) == '-'
+            || mTransaction.getUserData().charAt(3) == ' ') {
+            return mTransaction.getUserData().substring(4, 7); // extract endStationAbbr
+        }
+        return null;
+    }
+
+    @Override public Mode getMode() {
+        if (mTransaction.getType() == CEPASTransaction.TransactionType.BUS || mTransaction.getType() == CEPASTransaction.TransactionType.BUS_REFUND)
+            return Mode.BUS;
+        else if (mTransaction.getType() == CEPASTransaction.TransactionType.MRT)
+            return Mode.METRO;
+        else if (mTransaction.getType() == CEPASTransaction.TransactionType.TOP_UP)
+            return Mode.TICKET_MACHINE;
+        else if (mTransaction.getType() == CEPASTransaction.TransactionType.RETAIL || mTransaction.getType() == CEPASTransaction.TransactionType.SERVICE)
+            return Mode.POS;
+        return Mode.OTHER;
+    }
+
+    @Override public boolean hasTime() {
+        return true;
+    }
+
+    public void writeToParcel(Parcel parcel, int flags) {
+        parcel.writeParcelable(mTransaction, flags);
+    }
+
+    public int describeContents() {
+        return 0;
+    }
+}
diff --git a/src/main/java/com/codebutler/farebot/transit/MRTStation.java b/src/main/java/com/codebutler/farebot/transit/ezlink/MRTStation.java
similarity index 92%
rename from src/main/java/com/codebutler/farebot/transit/MRTStation.java
rename to src/main/java/com/codebutler/farebot/transit/ezlink/MRTStation.java
index 9b7fbbc..134dc06 100644
--- a/src/main/java/com/codebutler/farebot/transit/MRTStation.java
+++ b/src/main/java/com/codebutler/farebot/transit/ezlink/MRTStation.java
@@ -20,7 +20,9 @@
  * along with this program.  If not, see <http://www.gnu.org/licenses/>.
  */
 
-package com.codebutler.farebot.transit;
+package com.codebutler.farebot.transit.ezlink;
+
+import com.codebutler.farebot.transit.Station;
 
 public class MRTStation extends Station {
     private final String mCode;
diff --git a/src/main/java/com/codebutler/farebot/transit/hsl/HSLRefill.java b/src/main/java/com/codebutler/farebot/transit/hsl/HSLRefill.java
new file mode 100644
index 0000000..019bc3b
--- /dev/null
+++ b/src/main/java/com/codebutler/farebot/transit/hsl/HSLRefill.java
@@ -0,0 +1,50 @@
+package com.codebutler.farebot.transit.hsl;
+
+import android.os.Parcel;
+
+import com.codebutler.farebot.FareBotApplication;
+import com.codebutler.farebot.R;
+import com.codebutler.farebot.transit.Refill;
+
+import java.text.NumberFormat;
+import java.util.Locale;
+
+public class HSLRefill extends Refill {
+    private final long mRefillTime;
+    private final long mRefillAmount;
+
+    public HSLRefill(byte[] data) {
+        mRefillTime = HSLTransitData.CardDateToTimestamp(HSLTransitData.bitsToLong(20, 14, data), HSLTransitData.bitsToLong(34, 11, data));
+        mRefillAmount = HSLTransitData.bitsToLong(45, 20, data);
+    }
+
+    public HSLRefill(Parcel parcel) {
+        mRefillTime = parcel.readLong();
+        mRefillAmount = parcel.readLong();
+    }
+
+    public void writeToParcel(Parcel dest, int flags) {
+        dest.writeLong(mRefillTime);
+        dest.writeLong(mRefillAmount);
+    }
+
+    @Override public long getTimestamp() {
+        return mRefillTime;
+    }
+
+    @Override public String getAgencyName() {
+        return FareBotApplication.getInstance().getString(R.string.hsl_balance_refill);
+    }
+
+    @Override public String getShortAgencyName() {
+        return FareBotApplication.getInstance().getString(R.string.hsl_balance_refill);
+    }
+
+    @Override public long getAmount() {
+        return mRefillAmount;
+    }
+
+    @Override public String getAmountString() {
+        return NumberFormat.getCurrencyInstance(Locale.GERMANY).format(mRefillAmount / 100.0);
+    }
+}
diff --git a/src/main/java/com/codebutler/farebot/transit/HSLTransitData.java b/src/main/java/com/codebutler/farebot/transit/hsl/HSLTransitData.java
similarity index 71%
rename from src/main/java/com/codebutler/farebot/transit/HSLTransitData.java
rename to src/main/java/com/codebutler/farebot/transit/hsl/HSLTransitData.java
index 49032ac..5747e1f 100644
--- a/src/main/java/com/codebutler/farebot/transit/HSLTransitData.java
+++ b/src/main/java/com/codebutler/farebot/transit/hsl/HSLTransitData.java
@@ -20,17 +20,23 @@
  * along with this program.  If not, see <http://www.gnu.org/licenses/>.
  */
 
-package com.codebutler.farebot.transit;
+package com.codebutler.farebot.transit.hsl;
 
 import android.os.Parcel;
+
 import com.codebutler.farebot.FareBotApplication;
-import com.codebutler.farebot.ui.ListItem;
 import com.codebutler.farebot.R;
-import com.codebutler.farebot.Utils;
 import com.codebutler.farebot.card.Card;
 import com.codebutler.farebot.card.desfire.DesfireCard;
 import com.codebutler.farebot.card.desfire.DesfireFile;
-import com.codebutler.farebot.card.desfire.DesfireRecord;
+import com.codebutler.farebot.card.desfire.RecordDesfireFile;
+import com.codebutler.farebot.transit.Refill;
+import com.codebutler.farebot.transit.Subscription;
+import com.codebutler.farebot.transit.TransitData;
+import com.codebutler.farebot.transit.TransitIdentity;
+import com.codebutler.farebot.transit.Trip;
+import com.codebutler.farebot.ui.ListItem;
+import com.codebutler.farebot.util.Utils;
 
 import java.text.NumberFormat;
 import java.util.ArrayList;
@@ -38,8 +44,6 @@ import java.util.Collections;
 import java.util.List;
 import java.util.Locale;
 
-import static com.codebutler.farebot.card.desfire.DesfireFile.RecordDesfireFile;
-
 public class HSLTransitData extends TransitData {
     private String        mSerialNumber;
     private double        mBalance;
@@ -379,8 +383,8 @@ public class HSLTransitData extends TransitData {
 
 
             List<HSLTrip> useLog = new ArrayList<>();
-            for (int i = 0; i < recordFile.getRecords().length; i++) {
-                useLog.add(new HSLTrip(recordFile.getRecords()[i]));
+            for (int i = 0; i < recordFile.getRecords().size(); i++) {
+                useLog.add(new HSLTrip(recordFile.getRecords().get(i)));
             }
             Collections.sort(useLog, new Trip.Comparator());
             return useLog;
@@ -420,209 +424,4 @@ public class HSLTransitData extends TransitData {
         }
     }
 
-    public static class HSLRefill extends Refill {
-        private final long mRefillTime;
-        private final long mRefillAmount;
-
-        public HSLRefill(byte[] data) {
-            mRefillTime = CardDateToTimestamp(bitsToLong(20, 14, data), bitsToLong(34, 11, data));
-            mRefillAmount = bitsToLong(45, 20, data);
-        }
-
-        public HSLRefill(Parcel parcel) {
-            mRefillTime = parcel.readLong();
-            mRefillAmount = parcel.readLong();
-        }
-
-        public void writeToParcel(Parcel dest, int flags) {
-            dest.writeLong(mRefillTime);
-            dest.writeLong(mRefillAmount);
-        }
-
-        @Override public long getTimestamp() {
-            return mRefillTime;
-        }
-
-        @Override public String getAgencyName() {
-            return FareBotApplication.getInstance().getString(R.string.hsl_balance_refill);
-        }
-
-        @Override public String getShortAgencyName() {
-            return FareBotApplication.getInstance().getString(R.string.hsl_balance_refill);
-        }
-
-        @Override public long getAmount() {
-            return mRefillAmount;
-        }
-
-        @Override public String getAmountString() {
-            return NumberFormat.getCurrencyInstance(Locale.GERMANY).format(mRefillAmount / 100.0);
-        }
-    }
-
-    public static class HSLTrip extends Trip {
-        public String mLine;
-        public long mVehicleNumber;
-        private long mTimestamp;
-        private long mFare;
-        private final long mNewBalance;
-        private long mArvo;
-        private long mExpireTimestamp;
-        private long mPax;
-
-        public HSLTrip(DesfireRecord record) {
-            byte[] useData = record.getData();
-            long[] usefulData = new long[useData.length];
-
-            for (int i = 0; i < useData.length; i++) {
-                usefulData[i] = ((long) useData[i]) & 0xFF;
-            }
-
-            mArvo = bitsToLong(0, 1, usefulData);
-
-            mTimestamp = CardDateToTimestamp(bitsToLong(1, 14, usefulData), bitsToLong(15, 11, usefulData));
-            mExpireTimestamp = CardDateToTimestamp(bitsToLong(26, 14, usefulData), bitsToLong(40, 11, usefulData));
-
-            mFare = bitsToLong(51, 14, usefulData);
-
-            mPax = bitsToLong(65, 5, usefulData);
-            mLine = null;
-            mVehicleNumber = -1;
-
-            mNewBalance = bitsToLong(70, 20, usefulData);
-
-        }
-
-        public double getExpireTimestamp() {
-            return this.mExpireTimestamp;
-        }
-
-        public static Creator<HSLTrip> CREATOR = new Creator<HSLTrip>() {
-            public HSLTrip createFromParcel(Parcel parcel) {
-                return new HSLTrip(parcel);
-            }
-
-            public HSLTrip[] newArray(int size) {
-                return new HSLTrip[size];
-            }
-        };
-
-        private HSLTrip(Parcel parcel) {
-            // mArvo, mTimestamp, mExpireTimestamp, mFare, mPax, mNewBalance
-            mArvo = parcel.readLong();
-            mTimestamp = parcel.readLong();
-            mExpireTimestamp = parcel.readLong();
-            mFare = parcel.readLong();
-            mPax = parcel.readLong();
-            mNewBalance = parcel.readLong();
-            mLine = null;
-            mVehicleNumber = -1;
-        }
-
-        public HSLTrip() {
-            mArvo = mTimestamp = mExpireTimestamp = mFare = mPax = mNewBalance = mVehicleNumber = -1;
-            mLine = null;
-        }
-
-        @Override public long getTimestamp() {
-            return mTimestamp;
-        }
-
-        @Override public long getExitTimestamp() {
-            return 0;
-        }
-
-        @Override public String getAgencyName() {
-            FareBotApplication app = FareBotApplication.getInstance();
-            String pax = app.getString(R.string.hsl_person_format, mPax);
-            if (mArvo == 1) {
-                String mins = app.getString(R.string.hsl_mins_format, ((this.mExpireTimestamp - this.mTimestamp) / 60));
-                String type = app.getString(R.string.hsl_balance_ticket);
-                return String.format("%s, %s, %s", type, pax, mins);
-            } else {
-                String type = app.getString(R.string.hsl_pass_ticket);
-                return String.format("%s, %s", type, pax);
-            }
-        }
-
-        @Override public String getShortAgencyName() {
-            return getAgencyName();
-        }
-
-        @Override public String getRouteName() {
-            if (mLine != null) {
-                 // FIXME: i18n
-                return String.format("Line %s, Vehicle %s", mLine.substring(1), mVehicleNumber);
-            }
-            return null;
-        }
-
-        @Override public String getFareString() {
-            return NumberFormat.getCurrencyInstance(Locale.GERMANY).format(mFare / 100.0);
-        }
-
-        @Override public double getFare() {
-            return mFare;
-        }
-
-        @Override public String getBalanceString() {
-            return NumberFormat.getCurrencyInstance(Locale.GERMANY).format(mNewBalance / 100);
-        }
-
-        @Override public String getEndStationName() {
-            return null;
-        }
-
-        @Override public Station getEndStation() {
-            return null;
-        }
-
-        @Override public Mode getMode() {
-            if (mLine != null) {
-                if (mLine.equals("1300"))
-                    return Mode.METRO;
-                if (mLine.equals("1019"))
-                    return Mode.FERRY;
-                if (mLine.startsWith("100") || mLine.equals("1010"))
-                    return Mode.TRAM;
-                if (mLine.startsWith("3"))
-                    return Mode.TRAIN;
-                return Mode.BUS;
-            } else {
-                return Mode.BUS;
-            }
-        }
-
-        @Override public boolean hasTime() {
-            return false;
-        }
-
-        public long getCoachNumber() {
-            if (mVehicleNumber > -1)
-                return mVehicleNumber;
-            return mPax;
-        }
-
-        @Override public String getStartStationName() {
-            return null;
-        }
-
-        @Override public Station getStartStation() {
-            return null;
-        }
-
-        public void writeToParcel(Parcel parcel, int flags) {
-            // mArvo, mTimestamp, mExpireTimestamp, mFare, mPax, mNewBalance
-            parcel.writeLong(mArvo);
-            parcel.writeLong(mTimestamp);
-            parcel.writeLong(mExpireTimestamp);
-            parcel.writeLong(mFare);
-            parcel.writeLong(mPax);
-            parcel.writeLong(mNewBalance);
-        }
-
-        public int describeContents() {
-            return 0;
-        }
-    }
 }
diff --git a/src/main/java/com/codebutler/farebot/transit/hsl/HSLTrip.java b/src/main/java/com/codebutler/farebot/transit/hsl/HSLTrip.java
new file mode 100644
index 0000000..53d40b7
--- /dev/null
+++ b/src/main/java/com/codebutler/farebot/transit/hsl/HSLTrip.java
@@ -0,0 +1,178 @@
+package com.codebutler.farebot.transit.hsl;
+
+import android.os.Parcel;
+
+import com.codebutler.farebot.FareBotApplication;
+import com.codebutler.farebot.R;
+import com.codebutler.farebot.card.desfire.DesfireRecord;
+import com.codebutler.farebot.transit.Station;
+import com.codebutler.farebot.transit.Trip;
+
+import java.text.NumberFormat;
+import java.util.Locale;
+
+public class HSLTrip extends Trip {
+    String mLine;
+    long mVehicleNumber;
+    long mTimestamp;
+    long mFare;
+    final long mNewBalance;
+    long mArvo;
+    long mExpireTimestamp;
+    long mPax;
+
+    public HSLTrip(DesfireRecord record) {
+        byte[] useData = record.getData();
+        long[] usefulData = new long[useData.length];
+
+        for (int i = 0; i < useData.length; i++) {
+            usefulData[i] = ((long) useData[i]) & 0xFF;
+        }
+
+        mArvo = HSLTransitData.bitsToLong(0, 1, usefulData);
+
+        mTimestamp = HSLTransitData.CardDateToTimestamp(HSLTransitData.bitsToLong(1, 14, usefulData), HSLTransitData.bitsToLong(15, 11, usefulData));
+        mExpireTimestamp = HSLTransitData.CardDateToTimestamp(HSLTransitData.bitsToLong(26, 14, usefulData), HSLTransitData.bitsToLong(40, 11, usefulData));
+
+        mFare = HSLTransitData.bitsToLong(51, 14, usefulData);
+
+        mPax = HSLTransitData.bitsToLong(65, 5, usefulData);
+        mLine = null;
+        mVehicleNumber = -1;
+
+        mNewBalance = HSLTransitData.bitsToLong(70, 20, usefulData);
+
+    }
+
+    public double getExpireTimestamp() {
+        return this.mExpireTimestamp;
+    }
+
+    public static Creator<HSLTrip> CREATOR = new Creator<HSLTrip>() {
+        public HSLTrip createFromParcel(Parcel parcel) {
+            return new HSLTrip(parcel);
+        }
+
+        public HSLTrip[] newArray(int size) {
+            return new HSLTrip[size];
+        }
+    };
+
+    HSLTrip(Parcel parcel) {
+        // mArvo, mTimestamp, mExpireTimestamp, mFare, mPax, mNewBalance
+        mArvo = parcel.readLong();
+        mTimestamp = parcel.readLong();
+        mExpireTimestamp = parcel.readLong();
+        mFare = parcel.readLong();
+        mPax = parcel.readLong();
+        mNewBalance = parcel.readLong();
+        mLine = null;
+        mVehicleNumber = -1;
+    }
+
+    public HSLTrip() {
+        mArvo = mTimestamp = mExpireTimestamp = mFare = mPax = mNewBalance = mVehicleNumber = -1;
+        mLine = null;
+    }
+
+    @Override public long getTimestamp() {
+        return mTimestamp;
+    }
+
+    @Override public long getExitTimestamp() {
+        return 0;
+    }
+
+    @Override public String getAgencyName() {
+        FareBotApplication app = FareBotApplication.getInstance();
+        String pax = app.getString(R.string.hsl_person_format, mPax);
+        if (mArvo == 1) {
+            String mins = app.getString(R.string.hsl_mins_format, ((this.mExpireTimestamp - this.mTimestamp) / 60));
+            String type = app.getString(R.string.hsl_balance_ticket);
+            return String.format("%s, %s, %s", type, pax, mins);
+        } else {
+            String type = app.getString(R.string.hsl_pass_ticket);
+            return String.format("%s, %s", type, pax);
+        }
+    }
+
+    @Override public String getShortAgencyName() {
+        return getAgencyName();
+    }
+
+    @Override public String getRouteName() {
+        if (mLine != null) {
+             // FIXME: i18n
+            return String.format("Line %s, Vehicle %s", mLine.substring(1), mVehicleNumber);
+        }
+        return null;
+    }
+
+    @Override public String getFareString() {
+        return NumberFormat.getCurrencyInstance(Locale.GERMANY).format(mFare / 100.0);
+    }
+
+    @Override public double getFare() {
+        return mFare;
+    }
+
+    @Override public String getBalanceString() {
+        return NumberFormat.getCurrencyInstance(Locale.GERMANY).format(mNewBalance / 100);
+    }
+
+    @Override public String getEndStationName() {
+        return null;
+    }
+
+    @Override public Station getEndStation() {
+        return null;
+    }
+
+    @Override public Mode getMode() {
+        if (mLine != null) {
+            if (mLine.equals("1300"))
+                return Mode.METRO;
+            if (mLine.equals("1019"))
+                return Mode.FERRY;
+            if (mLine.startsWith("100") || mLine.equals("1010"))
+                return Mode.TRAM;
+            if (mLine.startsWith("3"))
+                return Mode.TRAIN;
+            return Mode.BUS;
+        } else {
+            return Mode.BUS;
+        }
+    }
+
+    @Override public boolean hasTime() {
+        return false;
+    }
+
+    public long getCoachNumber() {
+        if (mVehicleNumber > -1)
+            return mVehicleNumber;
+        return mPax;
+    }
+
+    @Override public String getStartStationName() {
+        return null;
+    }
+
+    @Override public Station getStartStation() {
+        return null;
+    }
+
+    public void writeToParcel(Parcel parcel, int flags) {
+        // mArvo, mTimestamp, mExpireTimestamp, mFare, mPax, mNewBalance
+        parcel.writeLong(mArvo);
+        parcel.writeLong(mTimestamp);
+        parcel.writeLong(mExpireTimestamp);
+        parcel.writeLong(mFare);
+        parcel.writeLong(mPax);
+        parcel.writeLong(mNewBalance);
+    }
+
+    public int describeContents() {
+        return 0;
+    }
+}
diff --git a/src/main/java/com/codebutler/farebot/transit/orca/MergedOrcaTrip.java b/src/main/java/com/codebutler/farebot/transit/orca/MergedOrcaTrip.java
new file mode 100644
index 0000000..dbe42dc
--- /dev/null
+++ b/src/main/java/com/codebutler/farebot/transit/orca/MergedOrcaTrip.java
@@ -0,0 +1,99 @@
+package com.codebutler.farebot.transit.orca;
+
+import android.os.Parcel;
+
+import com.codebutler.farebot.FareBotApplication;
+import com.codebutler.farebot.R;
+import com.codebutler.farebot.transit.Station;
+import com.codebutler.farebot.transit.Trip;
+
+public class MergedOrcaTrip extends Trip {
+    private final OrcaTrip mStartTrip;
+    private final OrcaTrip mEndTrip;
+
+    public static Creator<MergedOrcaTrip> CREATOR = new Creator<MergedOrcaTrip>() {
+        public MergedOrcaTrip createFromParcel(Parcel parcel) {
+            return new MergedOrcaTrip(
+                (OrcaTrip) parcel.readParcelable(OrcaTrip.class.getClassLoader()),
+                (OrcaTrip) parcel.readParcelable(OrcaTrip.class.getClassLoader())
+            );
+        }
+
+        public MergedOrcaTrip[] newArray(int size) {
+            return new MergedOrcaTrip[size];
+        }
+    };
+
+    public MergedOrcaTrip(OrcaTrip startTrip, OrcaTrip endTrip) {
+        mStartTrip = startTrip;
+        mEndTrip = endTrip;
+    }
+
+    @Override public long getTimestamp() {
+        return mStartTrip.getTimestamp();
+    }
+
+    @Override public long getExitTimestamp() {
+        return mEndTrip.getTimestamp();
+    }
+
+    @Override public String getRouteName() {
+        return mStartTrip.getRouteName();
+    }
+
+    @Override public String getAgencyName() {
+        return mStartTrip.getAgencyName();
+    }
+
+    @Override public String getShortAgencyName() {
+        return mStartTrip.getShortAgencyName();
+    }
+
+    @Override public String getFareString() {
+        if (mEndTrip.mTransType == OrcaTransitData.TRANS_TYPE_CANCEL_TRIP) {
+            return FareBotApplication.getInstance().getString(R.string.fare_cancelled_format, mStartTrip.getFareString());
+        }
+        return mStartTrip.getFareString();
+    }
+
+    @Override public String getBalanceString() {
+        return mEndTrip.getBalanceString();
+    }
+
+    @Override public String getStartStationName() {
+        return mStartTrip.getStartStationName();
+    }
+
+    @Override public Station getStartStation() {
+        return mStartTrip.getStartStation();
+    }
+
+    @Override public String getEndStationName() {
+        return mEndTrip.getStartStationName();
+    }
+
+    @Override public Station getEndStation() {
+        return mEndTrip.getStartStation();
+    }
+
+    @Override public double getFare() {
+        return mStartTrip.getFare();
+    }
+
+    @Override public Mode getMode() {
+        return mStartTrip.getMode();
+    }
+
+    @Override public boolean hasTime() {
+        return mStartTrip.hasTime();
+    }
+
+    @Override public void writeToParcel(Parcel parcel, int flags) {
+        mStartTrip.writeToParcel(parcel, flags);
+        mEndTrip.writeToParcel(parcel, flags);
+    }
+
+    @Override public int describeContents() {
+        return 0;
+    }
+}
diff --git a/src/main/java/com/codebutler/farebot/transit/orca/OrcaTransitData.java b/src/main/java/com/codebutler/farebot/transit/orca/OrcaTransitData.java
new file mode 100644
index 0000000..929287a
--- /dev/null
+++ b/src/main/java/com/codebutler/farebot/transit/orca/OrcaTransitData.java
@@ -0,0 +1,193 @@
+/*
+ * OrcaTransitData.java
+ *
+ * Copyright (C) 2011 Eric Butler
+ *
+ * Authors:
+ * Eric Butler <eric@codebutler.com>
+ *
+ * Thanks to:
+ * Karl Koscher <supersat@cs.washington.edu>
+ *
+ * This program is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation, either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.
+ */
+
+package com.codebutler.farebot.transit.orca;
+
+import android.os.Parcel;
+
+import com.codebutler.farebot.card.Card;
+import com.codebutler.farebot.card.desfire.DesfireCard;
+import com.codebutler.farebot.card.desfire.DesfireFile;
+import com.codebutler.farebot.card.desfire.RecordDesfireFile;
+import com.codebutler.farebot.transit.Refill;
+import com.codebutler.farebot.transit.Subscription;
+import com.codebutler.farebot.transit.TransitData;
+import com.codebutler.farebot.transit.TransitIdentity;
+import com.codebutler.farebot.transit.Trip;
+import com.codebutler.farebot.ui.ListItem;
+import com.codebutler.farebot.util.Utils;
+
+import org.apache.commons.lang3.ArrayUtils;
+
+import java.text.NumberFormat;
+import java.util.ArrayList;
+import java.util.Arrays;
+import java.util.Collections;
+import java.util.List;
+import java.util.Locale;
+
+public class OrcaTransitData extends TransitData {
+    static final int AGENCY_KCM = 0x04;
+    static final int AGENCY_PT  = 0x06;
+    static final int AGENCY_ST  = 0x07;
+    static final int AGENCY_CT  = 0x02;
+    static final int AGENCY_WSF = 0x08;
+
+    static final int TRANS_TYPE_PURSE_USE   = 0x0c;
+    static final int TRANS_TYPE_CANCEL_TRIP = 0x01;
+    static final int TRANS_TYPE_TAP_IN      = 0x03;
+    static final int TRANS_TYPE_TAP_OUT     = 0x07;
+    static final int TRANS_TYPE_PASS_USE    = 0x60;
+
+    private int    mSerialNumber;
+    private double mBalance;
+    private Trip[] mTrips;
+
+    public static boolean check (Card card) {
+        return (card instanceof DesfireCard) && (((DesfireCard) card).getApplication(0x3010f2) != null);
+    }
+
+    public static TransitIdentity parseTransitIdentity(Card card) {
+        try {
+            byte[] data = ((DesfireCard) card).getApplication(0xffffff).getFile(0x0f).getData();
+            return new TransitIdentity("ORCA", String.valueOf(Utils.byteArrayToInt(data, 4, 4)));
+        } catch (Exception ex) {
+            throw new RuntimeException("Error parsing ORCA serial", ex);
+        }
+    }
+
+    public OrcaTransitData (Parcel parcel) {
+        mSerialNumber = parcel.readInt();
+        mBalance      = parcel.readDouble();
+
+        parcel.readInt();
+        mTrips = (Trip[]) parcel.readParcelableArray(null);
+    }
+    
+    public OrcaTransitData (Card card) {
+        DesfireCard desfireCard = (DesfireCard) card;
+
+        byte[] data;
+
+        try {
+            data = desfireCard.getApplication(0xffffff).getFile(0x0f).getData();
+            mSerialNumber = Utils.byteArrayToInt(data, 5, 3);
+        } catch (Exception ex) {
+            throw new RuntimeException("Error parsing ORCA serial", ex);
+        }
+
+        try {
+            data = desfireCard.getApplication(0x3010f2).getFile(0x04).getData();
+            mBalance = Utils.byteArrayToInt(data, 41, 2);
+        } catch (Exception ex) {
+            throw new RuntimeException("Error parsing ORCA balance", ex);
+        }
+
+        try {
+            mTrips = parseTrips(desfireCard);
+        } catch (Exception ex) {
+            throw new RuntimeException("Error parsing ORCA trips", ex);
+        }
+    }
+
+    @Override public String getCardName () {
+        return "ORCA";
+    }
+
+    @Override public String getBalanceString () {
+        return NumberFormat.getCurrencyInstance(Locale.US).format(mBalance / 100);
+    }
+
+    @Override public String getSerialNumber () {
+        return Integer.toString(mSerialNumber);
+    }
+
+    @Override public Trip[] getTrips () {
+        return mTrips;
+    }
+
+    @Override public Refill[] getRefills () {
+        return null;
+    }
+
+    @Override public Subscription[] getSubscriptions() {
+        return null;
+    }
+
+    @Override public List<ListItem> getInfo() {
+        return null;
+    }
+
+    private Trip[] parseTrips(DesfireCard card) {
+        List<Trip> trips = new ArrayList<>();
+
+        DesfireFile file = card.getApplication(0x3010f2).getFile(0x02);
+        if (file instanceof RecordDesfireFile) {
+            RecordDesfireFile recordFile = (RecordDesfireFile) card.getApplication(0x3010f2).getFile(0x02);
+
+            OrcaTrip[] useLog = new OrcaTrip[recordFile.getRecords().size()];
+            for (int i = 0; i < useLog.length; i++) {
+                useLog[i] = new OrcaTrip(recordFile.getRecords().get(i));
+            }
+            Arrays.sort(useLog, new Trip.Comparator());
+            ArrayUtils.reverse(useLog);
+
+            for (int i = 0; i < useLog.length; i++) {
+                OrcaTrip trip = useLog[i];
+                OrcaTrip nextTrip = (i+1 < useLog.length) ? useLog[i+1] : null;
+
+                if (isSameTrip(trip, nextTrip)) {
+                    trips.add(new MergedOrcaTrip(trip, nextTrip));
+                    i++;
+                    continue;
+                }
+
+                trips.add(trip);
+            }
+        }
+        Collections.sort(trips, new Trip.Comparator());
+        return trips.toArray(new Trip[trips.size()]);
+    }
+
+    private boolean isSameTrip(OrcaTrip firstTrip, OrcaTrip secondTrip) {
+        return firstTrip != null && secondTrip != null &&
+            firstTrip.mTransType == TRANS_TYPE_TAP_IN &&
+            (secondTrip.mTransType ==TRANS_TYPE_TAP_OUT || secondTrip.mTransType == TRANS_TYPE_CANCEL_TRIP) &&
+            firstTrip.mAgency == secondTrip.mAgency;
+    }
+
+    public void writeToParcel(Parcel parcel, int flags) {
+        parcel.writeInt(mSerialNumber);
+        parcel.writeDouble(mBalance);
+
+        if (mTrips != null) {
+            parcel.writeInt(mTrips.length);
+            parcel.writeParcelableArray(mTrips, flags);
+        } else {
+            parcel.writeInt(0);
+        }
+    }
+
+}
diff --git a/src/main/java/com/codebutler/farebot/transit/orca/OrcaTrip.java b/src/main/java/com/codebutler/farebot/transit/orca/OrcaTrip.java
new file mode 100644
index 0000000..4cd7bef
--- /dev/null
+++ b/src/main/java/com/codebutler/farebot/transit/orca/OrcaTrip.java
@@ -0,0 +1,237 @@
+package com.codebutler.farebot.transit.orca;
+
+import android.os.Parcel;
+
+import com.codebutler.farebot.card.desfire.DesfireRecord;
+import com.codebutler.farebot.transit.Station;
+import com.codebutler.farebot.transit.Trip;
+
+import java.text.NumberFormat;
+import java.util.HashMap;
+import java.util.Locale;
+import java.util.Map;
+
+public class OrcaTrip extends Trip {
+    final long mTimestamp;
+    final long mCoachNum;
+    final long mFare;
+    final long mNewBalance;
+    final long mAgency;
+    final long mTransType;
+
+    private static Station[] sLinkStations = new Station[] {
+        new Station("Westlake Station",                   "Westlake",      "47.6113968", "-122.337502"),
+        new Station("University Station",                 "University",    "47.6072502", "-122.335754"),
+        new Station("Pioneer Square Station",             "Pioneer Sq",    "47.6021461", "-122.33107"),
+        new Station("International District Station",     "ID",            "47.5976601", "-122.328217"),
+        new Station("Stadium Station",                    "Stadium",       "47.5918121", "-122.327354"),
+        new Station("SODO Station",                       "SODO",          "47.5799484", "-122.327515"),
+        new Station("Beacon Hill Station",                "Beacon Hill",   "47.5791245", "-122.311287"),
+        new Station("Mount Baker Station",                "Mount Baker",   "47.5764389", "-122.297737"),
+        new Station("Columbia City Station",              "Columbia City", "47.5589523", "-122.292343"),
+        new Station("Othello Station",                    "Othello",       "47.5375366", "-122.281471"),
+        new Station("Rainier Beach Station",              "Rainier Beach", "47.5222626", "-122.279579"),
+        new Station("Tukwila International Blvd Station", "Tukwila",       "47.4642754", "-122.288391"),
+        new Station("Seatac Airport Station",             "Sea-Tac",       "47.4445305", "-122.297012")
+    };
+
+    private static Map<Integer, Station> sWSFTerminals = new HashMap<Integer, Station>() {{
+        put(10101, new Station("Seattle Terminal",           "Seattle",    "47.602722", "-122.338512"));
+        put(10103, new Station("Bainbridge Island Terminal", "Bainbridge", "47.62362",  "-122.51082" ));
+    }};
+
+    public OrcaTrip(DesfireRecord record) {
+        byte[] useData = record.getData();
+        long[] usefulData = new long[useData.length];
+
+        for (int i = 0; i < useData.length; i++) {
+            usefulData[i] = ((long)useData[i]) & 0xFF;
+        }
+
+        mTimestamp =
+            ((0x0F & usefulData[3]) << 28) |
+            (usefulData[4] << 20) |
+            (usefulData[5] << 12) |
+            (usefulData[6] << 4)  |
+            (usefulData[7] >> 4);
+
+        mCoachNum = ((usefulData[9] & 0xf) << 12) | (usefulData[10] << 4) | ((usefulData[11] & 0xf0) >> 4);
+
+        if (usefulData[15] == 0x00 || usefulData[15] == 0xFF) {
+            // FIXME: This appears to be some sort of special case for transfers and passes.
+            mFare = 0;
+        } else {
+            mFare = (usefulData[15] << 7) | (usefulData[16] >> 1);
+        }
+
+        mNewBalance = (usefulData[34] << 8) | usefulData[35];
+        mAgency     = usefulData[3] >> 4;
+        mTransType  = (usefulData[17]);
+    }
+
+    public static Creator<OrcaTrip> CREATOR = new Creator<OrcaTrip>() {
+        public OrcaTrip createFromParcel(Parcel parcel) {
+            return new OrcaTrip(parcel);
+        }
+
+        public OrcaTrip[] newArray(int size) {
+            return new OrcaTrip[size];
+        }
+    };
+
+    OrcaTrip(Parcel parcel) {
+        mTimestamp  = parcel.readLong();
+        mCoachNum   = parcel.readLong();
+        mFare       = parcel.readLong();
+        mNewBalance = parcel.readLong();
+        mAgency     = parcel.readLong();
+        mTransType  = parcel.readLong();
+    }
+
+    @Override public long getTimestamp() {
+        return mTimestamp;
+    }
+
+    @Override public long getExitTimestamp() {
+        return 0;
+    }
+
+    @Override public String getAgencyName () {
+        switch ((int) mAgency) {
+            case OrcaTransitData.AGENCY_CT:
+                return "Community Transit";
+            case OrcaTransitData.AGENCY_KCM:
+                return "King County Metro Transit";
+            case OrcaTransitData.AGENCY_PT:
+                return "Pierce Transit";
+            case OrcaTransitData.AGENCY_ST:
+                return "Sound Transit";
+            case OrcaTransitData.AGENCY_WSF:
+                return "Washington State Ferries";
+        }
+        return String.format("Unknown Agency: %s", mAgency);
+    }
+
+    @Override public String getShortAgencyName () {
+        switch ((int) mAgency) {
+            case OrcaTransitData.AGENCY_CT:
+                return "CT";
+            case OrcaTransitData.AGENCY_KCM:
+                return "KCM";
+            case OrcaTransitData.AGENCY_PT:
+                return "PT";
+            case OrcaTransitData.AGENCY_ST:
+                return "ST";
+            case OrcaTransitData.AGENCY_WSF:
+                return "WSF";
+        }
+        return String.format("Unknown Agency: %s", mAgency);
+    }
+
+    @Override public String getRouteName () {
+        if (isLink()) {
+            return "Link Light Rail";
+        } else {
+            // FIXME: Need to find bus route #s
+            if (mAgency == OrcaTransitData.AGENCY_ST) {
+                return "Express Bus";
+            } else if(mAgency == OrcaTransitData.AGENCY_KCM) {
+                return "Bus";
+            }
+            return null;
+        }
+    }
+
+    @Override public String getFareString () {
+        return NumberFormat.getCurrencyInstance(Locale.US).format(mFare / 100.0);
+    }
+
+    @Override public double getFare () {
+        return mFare;
+    }
+
+    @Override public String getBalanceString () {
+        return NumberFormat.getCurrencyInstance(Locale.US).format(mNewBalance / 100);
+    }
+
+    @Override public Station getStartStation() {
+        if (isLink()) {
+            int stationNumber = (((int) mCoachNum) % 1000) - 193;
+            if (stationNumber < sLinkStations.length) {
+                return sLinkStations[stationNumber];
+            }
+        } else if (mAgency == OrcaTransitData.AGENCY_WSF) {
+            return sWSFTerminals.get((int)mCoachNum);
+        }
+        return null;
+    }
+
+    @Override public String getStartStationName () {
+        if (isLink()) {
+            int stationNumber = (((int) mCoachNum) % 1000) - 193;
+            if (stationNumber < sLinkStations.length) {
+                return sLinkStations[stationNumber].getStationName();
+            } else {
+                return String.format("Unknown Station #%s", stationNumber);
+            }
+        } else if (mAgency == OrcaTransitData.AGENCY_WSF) {
+            int terminalNumber = (int) mCoachNum;
+            if (sWSFTerminals.containsKey(terminalNumber)) {
+                return sWSFTerminals.get(terminalNumber).getStationName();
+            } else {
+                return String.format("Unknown Terminal #%s", terminalNumber);
+            }
+        } else {
+            return String.format("Coach #%s", String.valueOf(mCoachNum));
+        }
+    }
+
+    @Override public String getEndStationName () {
+        // ORCA tracks destination in a separate record
+        return null;
+    }
+
+    @Override public Station getEndStation () {
+        // ORCA tracks destination in a separate record
+        return null;
+    }
+
+    @Override public Mode getMode() {
+        if (isLink()) {
+            return Mode.METRO;
+        } else if (mAgency == OrcaTransitData.AGENCY_WSF) {
+            return Mode.FERRY;
+        } else {
+            return Mode.BUS;
+        }
+    }
+
+    @Override public boolean hasTime() {
+        return true;
+    }
+
+    public long getCoachNumber() {
+        return mCoachNum;
+    }
+
+    public long getTransType() {
+        return mTransType;
+    }
+
+    public void writeToParcel(Parcel parcel, int flags) {
+        parcel.writeLong(mTimestamp);
+        parcel.writeLong(mCoachNum);
+        parcel.writeLong(mFare);
+        parcel.writeLong(mNewBalance);
+        parcel.writeLong(mAgency);
+        parcel.writeLong(mTransType);
+    }
+
+    public int describeContents() {
+        return 0;
+    }
+
+    private boolean isLink () {
+        return (mAgency == OrcaTransitData.AGENCY_ST && mCoachNum > 10000);
+    }
+}
diff --git a/src/main/java/com/codebutler/farebot/transit/OVChipCredit.java b/src/main/java/com/codebutler/farebot/transit/ovc/OVChipCredit.java
similarity index 97%
rename from src/main/java/com/codebutler/farebot/transit/OVChipCredit.java
rename to src/main/java/com/codebutler/farebot/transit/ovc/OVChipCredit.java
index 04e9fa6..6579868 100644
--- a/src/main/java/com/codebutler/farebot/transit/OVChipCredit.java
+++ b/src/main/java/com/codebutler/farebot/transit/ovc/OVChipCredit.java
@@ -21,11 +21,12 @@
  * along with this program.  If not, see <http://www.gnu.org/licenses/>.
  */
 
-package com.codebutler.farebot.transit;
+package com.codebutler.farebot.transit.ovc;
 
 import android.os.Parcel;
 import android.os.Parcelable;
-import com.codebutler.farebot.Utils;
+
+import com.codebutler.farebot.util.Utils;
 
 public class OVChipCredit implements Parcelable {
     private final int mId;
diff --git a/src/main/java/com/codebutler/farebot/transit/OVChipDBUtil.java b/src/main/java/com/codebutler/farebot/transit/ovc/OVChipDBUtil.java
similarity index 95%
rename from src/main/java/com/codebutler/farebot/transit/OVChipDBUtil.java
rename to src/main/java/com/codebutler/farebot/transit/ovc/OVChipDBUtil.java
index 05182aa..8df8db1 100644
--- a/src/main/java/com/codebutler/farebot/transit/OVChipDBUtil.java
+++ b/src/main/java/com/codebutler/farebot/transit/ovc/OVChipDBUtil.java
@@ -21,16 +21,21 @@
  * along with this program.  If not, see <http://www.gnu.org/licenses/>.
  */
 
-package com.codebutler.farebot.transit;
+package com.codebutler.farebot.transit.ovc;
 
 import android.content.Context;
 import android.database.SQLException;
 import android.database.sqlite.SQLiteDatabase;
 import android.database.sqlite.SQLiteException;
 import android.util.Log;
+
 import org.apache.commons.io.IOUtils;
 
-import java.io.*;
+import java.io.File;
+import java.io.FileOutputStream;
+import java.io.IOException;
+import java.io.InputStream;
+import java.io.OutputStream;
 
 public class OVChipDBUtil {
     public static final String TABLE_NAME = "stations_data";
diff --git a/src/main/java/com/codebutler/farebot/transit/OVChipIndex.java b/src/main/java/com/codebutler/farebot/transit/ovc/OVChipIndex.java
similarity index 98%
rename from src/main/java/com/codebutler/farebot/transit/OVChipIndex.java
rename to src/main/java/com/codebutler/farebot/transit/ovc/OVChipIndex.java
index 75c0df6..6fac646 100644
--- a/src/main/java/com/codebutler/farebot/transit/OVChipIndex.java
+++ b/src/main/java/com/codebutler/farebot/transit/ovc/OVChipIndex.java
@@ -21,11 +21,12 @@
  * along with this program.  If not, see <http://www.gnu.org/licenses/>.
  */
 
-package com.codebutler.farebot.transit;
+package com.codebutler.farebot.transit.ovc;
 
 import android.os.Parcel;
 import android.os.Parcelable;
-import com.codebutler.farebot.Utils;
+
+import com.codebutler.farebot.util.Utils;
 
 import java.util.Arrays;
 
diff --git a/src/main/java/com/codebutler/farebot/transit/OVChipInfo.java b/src/main/java/com/codebutler/farebot/transit/ovc/OVChipInfo.java
similarity index 76%
rename from src/main/java/com/codebutler/farebot/transit/OVChipInfo.java
rename to src/main/java/com/codebutler/farebot/transit/ovc/OVChipInfo.java
index eb27186..85c8379 100644
--- a/src/main/java/com/codebutler/farebot/transit/OVChipInfo.java
+++ b/src/main/java/com/codebutler/farebot/transit/ovc/OVChipInfo.java
@@ -21,14 +21,12 @@
  * along with this program.  If not, see <http://www.gnu.org/licenses/>.
  */
 
-package com.codebutler.farebot.transit;
+package com.codebutler.farebot.transit.ovc;
 
 import android.os.Parcel;
 import android.os.Parcelable;
 
-import com.codebutler.farebot.Utils;
-import org.w3c.dom.Document;
-import org.w3c.dom.Element;
+import com.codebutler.farebot.util.Utils;
 
 import java.util.Calendar;
 import java.util.Date;
@@ -170,38 +168,4 @@ public class OVChipInfo implements Parcelable {
         parcel.writeInt(mCharge);
         parcel.writeInt(mUnknown);
     }
-
-    public static OVChipInfo fromXML (Element element) {
-        int company;
-        int expdate;
-        Date birthdate;
-        int active;
-        int limit;
-        int charge;
-        int unknown;
-
-        company = Integer.parseInt(element.getAttribute("company"));
-        expdate = Integer.parseInt(element.getAttribute("expdate"));
-        birthdate = new Date(Long.valueOf(element.getAttribute("birthdate")));
-        active = Integer.parseInt(element.getAttribute("active"));
-        limit = Integer.parseInt(element.getAttribute("limit"));
-        charge = Integer.parseInt(element.getAttribute("charge"));
-        unknown = Integer.parseInt(element.getAttribute("unknown"));
-
-        return new OVChipInfo(company, expdate, birthdate,
-                active, limit, charge, unknown);
-    }
-
-    public Element toXML (Document doc) throws Exception {
-        Element info = doc.createElement("info");
-        info.setAttribute("company", Integer.toString(mCompany));
-        info.setAttribute("expdate", Integer.toString(mExpdate));
-        info.setAttribute("birthdate", Long.toString(mBirthdate.getTime()));
-        info.setAttribute("active", Integer.toString(mActive));
-        info.setAttribute("limit", Integer.toString(mLimit));
-        info.setAttribute("charge", Integer.toString(mCharge));
-        info.setAttribute("unknown", Integer.toString(mUnknown));
-
-        return info;
-    }
 }
diff --git a/src/main/java/com/codebutler/farebot/transit/OVChipParser.java b/src/main/java/com/codebutler/farebot/transit/ovc/OVChipParser.java
similarity index 98%
rename from src/main/java/com/codebutler/farebot/transit/OVChipParser.java
rename to src/main/java/com/codebutler/farebot/transit/ovc/OVChipParser.java
index 962f0ad..c37c285 100644
--- a/src/main/java/com/codebutler/farebot/transit/OVChipParser.java
+++ b/src/main/java/com/codebutler/farebot/transit/ovc/OVChipParser.java
@@ -21,11 +21,11 @@
  * along with this program.  If not, see <http://www.gnu.org/licenses/>.
  */
 
-package com.codebutler.farebot.transit;
+package com.codebutler.farebot.transit.ovc;
 
-import com.codebutler.farebot.Utils;
 import com.codebutler.farebot.card.classic.ClassicCard;
 import com.codebutler.farebot.card.classic.ClassicUtils;
+import com.codebutler.farebot.util.Utils;
 
 public class OVChipParser {
     private final ClassicCard mCard;
diff --git a/src/main/java/com/codebutler/farebot/transit/OVChipPreamble.java b/src/main/java/com/codebutler/farebot/transit/ovc/OVChipPreamble.java
similarity index 73%
rename from src/main/java/com/codebutler/farebot/transit/OVChipPreamble.java
rename to src/main/java/com/codebutler/farebot/transit/ovc/OVChipPreamble.java
index fab69e8..bb03ddd 100644
--- a/src/main/java/com/codebutler/farebot/transit/OVChipPreamble.java
+++ b/src/main/java/com/codebutler/farebot/transit/ovc/OVChipPreamble.java
@@ -21,15 +21,12 @@
  * along with this program.  If not, see <http://www.gnu.org/licenses/>.
  */
 
-package com.codebutler.farebot.transit;
-
-import org.w3c.dom.Document;
-import org.w3c.dom.Element;
+package com.codebutler.farebot.transit.ovc;
 
 import android.os.Parcel;
 import android.os.Parcelable;
 
-import com.codebutler.farebot.Utils;
+import com.codebutler.farebot.util.Utils;
 
 public class OVChipPreamble implements Parcelable {
     private final String mId;
@@ -173,43 +170,4 @@ public class OVChipPreamble implements Parcelable {
         parcel.writeString(mUnknownConstant2);
         parcel.writeInt(mType);
     }
-
-    public static OVChipPreamble fromXML (Element element) {
-        String id;
-        int checkbit;
-        String manufacturer;
-        String publisher;
-        String unknownConstant1;
-        int expdate;
-        String unknownConstant2;
-        int type;
-
-        id = element.getAttribute("id");
-        checkbit = Integer.parseInt(element.getAttribute("checkbit"));
-        manufacturer = element.getAttribute("manufacturer");
-        publisher = element.getAttribute("publisher");
-        unknownConstant1 = element.getAttribute("unknownconstant1");
-        expdate = Integer.parseInt(element.getAttribute("expdate"));
-        unknownConstant2 = element.getAttribute("unknownconstant2");
-        type = Integer.parseInt(element.getAttribute("type"));
-
-        return new OVChipPreamble(id, checkbit,
-                manufacturer, publisher,
-                unknownConstant1, expdate,
-                unknownConstant2, type);
-    }
-
-    public Element toXML (Document doc) throws Exception {
-        Element preamble = doc.createElement("preamble");
-        preamble.setAttribute("id", getId());
-        preamble.setAttribute("checkbit", Integer.toString(mCheckbit));
-        preamble.setAttribute("manufacturer", getManufacturer());
-        preamble.setAttribute("publisher", getPublisher());
-        preamble.setAttribute("unknownconstant1", getUnknownConstant1());
-        preamble.setAttribute("expdate", Integer.toString(mExpdate));
-        preamble.setAttribute("unknownconstant2", getUnknownConstant2());
-        preamble.setAttribute("type", Integer.toString(mType));
-
-        return preamble;
-    }
 }
\ No newline at end of file
diff --git a/src/main/java/com/codebutler/farebot/transit/OVChipSubscription.java b/src/main/java/com/codebutler/farebot/transit/ovc/OVChipSubscription.java
similarity index 98%
rename from src/main/java/com/codebutler/farebot/transit/OVChipSubscription.java
rename to src/main/java/com/codebutler/farebot/transit/ovc/OVChipSubscription.java
index 2d82620..10f7cf6 100644
--- a/src/main/java/com/codebutler/farebot/transit/OVChipSubscription.java
+++ b/src/main/java/com/codebutler/farebot/transit/ovc/OVChipSubscription.java
@@ -21,15 +21,17 @@
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
 
-package com.codebutler.farebot.transit;
+package com.codebutler.farebot.transit.ovc;
 
 import android.os.Parcel;
+
+import com.codebutler.farebot.transit.Subscription;
+import com.codebutler.farebot.util.Utils;
+
 import java.util.Date;
 import java.util.HashMap;
 import java.util.Map;
 
-import com.codebutler.farebot.Utils;
-
 public class OVChipSubscription extends Subscription {
     private final int mId;
     private final int mUnknown1;
diff --git a/src/main/java/com/codebutler/farebot/transit/OVChipTransaction.java b/src/main/java/com/codebutler/farebot/transit/ovc/OVChipTransaction.java
similarity index 99%
rename from src/main/java/com/codebutler/farebot/transit/OVChipTransaction.java
rename to src/main/java/com/codebutler/farebot/transit/ovc/OVChipTransaction.java
index 27e7a42..7d06cea 100644
--- a/src/main/java/com/codebutler/farebot/transit/OVChipTransaction.java
+++ b/src/main/java/com/codebutler/farebot/transit/ovc/OVChipTransaction.java
@@ -21,11 +21,12 @@
  * along with this program.  If not, see <http://www.gnu.org/licenses/>.
  */
 
-package com.codebutler.farebot.transit;
+package com.codebutler.farebot.transit.ovc;
 
 import android.os.Parcel;
 import android.os.Parcelable;
-import com.codebutler.farebot.Utils;
+
+import com.codebutler.farebot.util.Utils;
 
 import java.util.Comparator;
 
diff --git a/src/main/java/com/codebutler/farebot/transit/OVChipTransitData.java b/src/main/java/com/codebutler/farebot/transit/ovc/OVChipTransitData.java
similarity index 97%
rename from src/main/java/com/codebutler/farebot/transit/OVChipTransitData.java
rename to src/main/java/com/codebutler/farebot/transit/ovc/OVChipTransitData.java
index 2b30646..6dddb3e 100644
--- a/src/main/java/com/codebutler/farebot/transit/OVChipTransitData.java
+++ b/src/main/java/com/codebutler/farebot/transit/ovc/OVChipTransitData.java
@@ -21,16 +21,22 @@
  * along with this program.  If not, see <http://www.gnu.org/licenses/>.
  */
 
-package com.codebutler.farebot.transit;
+package com.codebutler.farebot.transit.ovc;
 
 import android.os.Parcel;
+
 import com.codebutler.farebot.FareBotApplication;
-import com.codebutler.farebot.ui.HeaderListItem;
-import com.codebutler.farebot.ui.ListItem;
 import com.codebutler.farebot.R;
-import com.codebutler.farebot.Utils;
 import com.codebutler.farebot.card.Card;
 import com.codebutler.farebot.card.classic.ClassicCard;
+import com.codebutler.farebot.transit.Refill;
+import com.codebutler.farebot.transit.Subscription;
+import com.codebutler.farebot.transit.TransitData;
+import com.codebutler.farebot.transit.TransitIdentity;
+import com.codebutler.farebot.transit.Trip;
+import com.codebutler.farebot.ui.HeaderListItem;
+import com.codebutler.farebot.ui.ListItem;
+import com.codebutler.farebot.util.Utils;
 
 import java.text.DateFormat;
 import java.text.DecimalFormat;
@@ -136,7 +142,7 @@ public class OVChipTransitData extends TransitData {
 
         ClassicCard classicCard = (ClassicCard) card;
 
-        if (classicCard.getSectors().length != 40)
+        if (classicCard.getSectors().size() != 40)
             return false;
 
         // Starting at 0×010, 8400 0000 0603 a000 13ae e401 xxxx 0e80 80e8 seems to exist on all OVC's (with xxxx different).
diff --git a/src/main/java/com/codebutler/farebot/transit/OVChipTrip.java b/src/main/java/com/codebutler/farebot/transit/ovc/OVChipTrip.java
similarity index 98%
rename from src/main/java/com/codebutler/farebot/transit/OVChipTrip.java
rename to src/main/java/com/codebutler/farebot/transit/ovc/OVChipTrip.java
index e28a6cf..6dad9e4 100644
--- a/src/main/java/com/codebutler/farebot/transit/OVChipTrip.java
+++ b/src/main/java/com/codebutler/farebot/transit/ovc/OVChipTrip.java
@@ -21,14 +21,17 @@
  * along with this program.  If not, see <http://www.gnu.org/licenses/>.
  */
 
-package com.codebutler.farebot.transit;
+package com.codebutler.farebot.transit.ovc;
 
 import android.database.Cursor;
 import android.database.sqlite.SQLiteDatabase;
 import android.os.Parcel;
 import android.text.TextUtils;
 import android.util.Log;
+
 import com.codebutler.farebot.FareBotApplication;
+import com.codebutler.farebot.transit.Station;
+import com.codebutler.farebot.transit.Trip;
 
 import java.util.Date;
 
diff --git a/src/main/java/com/codebutler/farebot/transit/suica/SuicaTransitData.java b/src/main/java/com/codebutler/farebot/transit/suica/SuicaTransitData.java
new file mode 100644
index 0000000..54de428
--- /dev/null
+++ b/src/main/java/com/codebutler/farebot/transit/suica/SuicaTransitData.java
@@ -0,0 +1,142 @@
+/*
+ * SuicaTransitData.java
+ *
+ * Authors:
+ * Eric Butler <eric@codebutler.com>
+ *
+ * Based on code from http://code.google.com/p/nfc-felica/
+ * nfc-felica by Kazzz. See project URL for complete author information.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ *
+ * Thanks to these resources for providing additional information about the Suica format:
+ * http://www.denno.net/SFCardFan/
+ * http://jennychan.web.fc2.com/format/suica.html
+ * http://d.hatena.ne.jp/baroqueworksdev/20110206/1297001722
+ * http://handasse.blogspot.com/2008/04/python-pasorisuica.html
+ * http://sourceforge.jp/projects/felicalib/wiki/suica
+ *
+ * Some of these resources have been translated into English at:
+ * https://github.com/codebutler/farebot/wiki/Suica
+ */
+
+package com.codebutler.farebot.transit.suica;
+
+import android.os.Parcel;
+
+import com.codebutler.farebot.card.felica.FelicaBlock;
+import com.codebutler.farebot.card.felica.FelicaCard;
+import com.codebutler.farebot.card.felica.FelicaService;
+import com.codebutler.farebot.transit.Refill;
+import com.codebutler.farebot.transit.Subscription;
+import com.codebutler.farebot.transit.TransitData;
+import com.codebutler.farebot.transit.TransitIdentity;
+import com.codebutler.farebot.transit.Trip;
+import com.codebutler.farebot.ui.ListItem;
+
+import net.kazzz.felica.lib.FeliCaLib;
+
+import java.util.ArrayList;
+import java.util.Collections;
+import java.util.List;
+
+public class SuicaTransitData extends TransitData {
+    private SuicaTrip[] mTrips;
+
+    public Creator<SuicaTransitData> CREATOR = new Creator<SuicaTransitData>() {
+        public SuicaTransitData createFromParcel(Parcel parcel) {
+            return new SuicaTransitData(parcel);
+        }
+
+        public SuicaTransitData[] newArray(int size) {
+            return new SuicaTransitData[size];
+        }
+    };
+
+    public static boolean check(FelicaCard card) {
+        return (card.getSystem(FeliCaLib.SYSTEMCODE_SUICA) != null);
+    }
+
+    public static TransitIdentity parseTransitIdentity (FelicaCard card) {
+        return new TransitIdentity("Suica", null); // FIXME: Could be ICOCA, etc.
+    }
+
+    public SuicaTransitData(Parcel parcel) {
+        mTrips = new SuicaTrip[parcel.readInt()];
+        parcel.readTypedArray(mTrips, SuicaTrip.CREATOR);
+    }
+
+    public SuicaTransitData(FelicaCard card) {
+        FelicaService service = card.getSystem(FeliCaLib.SYSTEMCODE_SUICA).getService(FeliCaLib.SERVICE_SUICA_HISTORY);
+
+        long previousBalance = -1;
+
+        List<SuicaTrip> trips = new ArrayList<>();
+
+        // Read blocks oldest-to-newest to calculate fare.
+        List<FelicaBlock> blocks = service.getBlocks();
+        for (int i = (blocks.size() - 1); i >= 0; i--) {
+            FelicaBlock block = blocks.get(i);
+
+            SuicaTrip trip = new SuicaTrip(block, previousBalance);
+            previousBalance = trip.getBalance();
+
+            if (trip.getTimestamp() == 0) {
+                continue;
+            }
+
+            trips.add(trip);
+        }
+
+        // Return trips in descending order.
+        Collections.reverse(trips);
+        
+        mTrips = trips.toArray(new SuicaTrip[trips.size()]);
+    }
+
+    @Override public String getBalanceString() {
+        if (mTrips.length > 0)
+            return mTrips[0].getBalanceString();
+        return null;
+    }
+
+    @Override public String getSerialNumber() {
+        // FIXME: Find where this is on the card.
+        return null;
+    }
+
+    @Override public Trip[] getTrips() {
+        return mTrips;
+    }
+
+    @Override public Refill[] getRefills() {
+        return null;
+    }
+
+    @Override public Subscription[] getSubscriptions() {
+        return null;
+    }
+
+    @Override public List<ListItem> getInfo() {
+        return null;
+    }
+
+    @Override public String getCardName() {
+        return "Suica"; // FIXME: Could be ICOCA, etc.
+    }
+
+    public void writeToParcel(Parcel parcel, int flags) {
+        parcel.writeInt(mTrips.length);
+        parcel.writeTypedArray(mTrips, flags);
+    }
+}
diff --git a/src/main/java/com/codebutler/farebot/transit/suica/SuicaTrip.java b/src/main/java/com/codebutler/farebot/transit/suica/SuicaTrip.java
new file mode 100644
index 0000000..ca77d66
--- /dev/null
+++ b/src/main/java/com/codebutler/farebot/transit/suica/SuicaTrip.java
@@ -0,0 +1,342 @@
+package com.codebutler.farebot.transit.suica;
+
+import android.os.Parcel;
+
+import com.codebutler.farebot.card.felica.FelicaBlock;
+import com.codebutler.farebot.transit.Station;
+import com.codebutler.farebot.transit.Trip;
+
+import net.kazzz.felica.lib.Util;
+
+import org.apache.commons.lang3.ArrayUtils;
+
+import java.text.NumberFormat;
+import java.util.Date;
+import java.util.Locale;
+
+public class SuicaTrip extends Trip {
+    private final long mBalance;
+
+    private final int mConsoleType;
+    private final int mProcessType;
+
+    private final boolean mIsProductSale;
+    private final boolean mIsBus;
+
+    private final boolean mIsCharge;
+
+    private final long mFare;
+    private final Date mTimestamp;
+    private final int  mRegionCode;
+
+    private int mRailEntranceLineCode;
+    private int mRailEntranceStationCode;
+    private int mRailExitLineCode;
+    private int mRailExitStationCode;
+
+    private int mBusLineCode;
+    private int mBusStopCode;
+
+    private Station mStartStation;
+    private Station mEndStation;
+
+    public SuicaTrip(FelicaBlock block, long previousBalance) {
+        byte[] data = block.getData();
+
+        // 00000080000000000000000000000000
+        // 00 00 - console type
+        // 01 00 - process type
+        // 02 00 - ??
+        // 03 80 - ??
+        // 04 00 - date
+        // 05 00 - date
+        // 06 00 - enter line code
+        // 07 00
+        // 08 00
+        // 09 00
+        // 10 00
+        // 11 00
+        // 12 00
+        // 13 00
+        // 14 00
+        // 15 00
+
+
+        mConsoleType = data[0];
+        mProcessType = data[1];
+
+        mIsBus         = mConsoleType == (byte) 0x05;
+        mIsProductSale = (mConsoleType == (byte) 0xc7 || mConsoleType == (byte) 0xc8);
+        mIsCharge = (mProcessType == (byte) 0x02);
+
+        mTimestamp = SuicaUtil.extractDate(mIsProductSale, data);
+        mBalance   = (long) Util.toInt(data[11], data[10]);
+
+        mRegionCode = data[15] & 0xFF;
+
+        if (previousBalance >= 0) {
+            mFare = (previousBalance - mBalance);
+        } else {
+            // Can't get amount for first record.
+            mFare = 0;
+        }
+
+        // Unused block (new card)
+        if (mTimestamp == null) {
+            return;
+        }
+
+        if (!mIsProductSale && !mIsCharge) {
+            if (mIsBus) {
+                mBusLineCode  = Util.toInt(data[6], data[7]);
+                mBusStopCode  = Util.toInt(data[8], data[9]);
+                mStartStation = SuicaUtil.getBusStop(mRegionCode, mBusLineCode, mBusStopCode);
+
+            } else {
+                mRailEntranceLineCode    = data[6] & 0xFF;
+                mRailEntranceStationCode = data[7] & 0xFF;
+                mRailExitLineCode        = data[8] & 0xFF;
+                mRailExitStationCode     = data[9] & 0xFF;
+                mStartStation = SuicaUtil.getRailStation(mRegionCode, mRailEntranceLineCode, mRailEntranceStationCode);
+                mEndStation   = SuicaUtil.getRailStation(mRegionCode, mRailExitLineCode, mRailExitStationCode);
+            }
+        }
+    }
+
+    public static Creator<SuicaTrip> CREATOR = new Creator<SuicaTrip>() {
+        public SuicaTrip createFromParcel(Parcel parcel) {
+            return new SuicaTrip(parcel);
+        }
+
+        public SuicaTrip[] newArray(int size) {
+            return new SuicaTrip[size];
+        }
+    };
+
+    public SuicaTrip(Parcel parcel) {
+        mBalance = parcel.readLong();
+
+        mConsoleType = parcel.readInt();
+        mProcessType = parcel.readInt();
+
+        mIsProductSale = (parcel.readInt() == 1);
+        mIsBus         = (parcel.readInt() == 1);
+
+        mIsCharge = (parcel.readInt() == 1);
+
+        mFare       = parcel.readLong();
+        mTimestamp  = new Date(parcel.readLong());
+        mRegionCode = parcel.readInt();
+
+        mRailEntranceLineCode    = parcel.readInt();
+        mRailEntranceStationCode = parcel.readInt();
+        mRailExitLineCode        = parcel.readInt();
+        mRailExitStationCode     = parcel.readInt();
+
+        mBusLineCode = parcel.readInt();
+        mBusStopCode = parcel.readInt();
+
+        if (parcel.readInt() == 1)
+            mStartStation = parcel.readParcelable(Station.class.getClassLoader());
+        if (parcel.readInt() == 1)
+            mEndStation = parcel.readParcelable(Station.class.getClassLoader());
+    }
+
+    @Override public long getTimestamp() {
+        if (mTimestamp != null)
+            return mTimestamp.getTime() / 1000;
+        else
+            return 0;
+    }
+
+    @Override public long getExitTimestamp() {
+        return 0;
+    }
+
+    public boolean hasTime() {
+        return mIsProductSale;
+    }
+
+    @Override public String getRouteName() {
+        return (mStartStation != null) ?  mStartStation.getLineName() : (getConsoleType() + " " + getProcessType());
+    }
+
+    @Override public String getAgencyName() {
+        return (mStartStation != null) ? mStartStation.getCompanyName() : null;
+    }
+
+    @Override public String getShortAgencyName() {
+        return getAgencyName();
+    }
+
+    @Override public double getFare() {
+        return mFare;
+    }
+
+    @Override public String getFareString() {
+        NumberFormat format = NumberFormat.getCurrencyInstance(Locale.JAPAN);
+        format.setMaximumFractionDigits(0);
+        if (mFare < 0) return "+" + format.format(-mFare);
+        else return format.format(mFare);
+    }
+
+    public long getBalance() {
+        return mBalance;
+    }
+
+    @Override public String getBalanceString() {
+        NumberFormat format = NumberFormat.getCurrencyInstance(Locale.JAPAN);
+        format.setMaximumFractionDigits(0);
+        return format.format(mBalance);
+    }
+
+    @Override public String getStartStationName() {
+        if (mIsProductSale || mIsCharge)
+            return null;
+
+        if (mStartStation != null) {
+            return mStartStation.getShortStationName();
+        }
+        if (mIsBus) {
+            return String.format("Bus Area 0x%s Line 0x%s Stop 0x%s", Integer.toHexString(mRegionCode), Integer.toHexString(mBusLineCode), Integer.toHexString(mBusStopCode));
+        } else if (!(mRailEntranceLineCode == 0 && mRailEntranceStationCode == 0)) {
+            return String.format("Line 0x%s Station 0x%s", Integer.toHexString(mRailEntranceLineCode), Integer.toHexString(mRailEntranceStationCode));
+        } else {
+            return null;
+        }
+    }
+
+    @Override public Station getStartStation() {
+        return mStartStation;
+    }
+
+    @Override public String getEndStationName() {
+        if (mIsProductSale || mIsCharge || isTVM())
+            return null;
+
+        if (mEndStation != null) {
+            return mEndStation.getShortStationName();
+        }
+        if (!mIsBus) {
+            return String.format("Line 0x%s Station 0x%s", Integer.toHexString(mRailExitLineCode), Integer.toHexString(mRailExitStationCode));
+        }
+        return null;
+    }
+
+    @Override public Station getEndStation() {
+        return mEndStation;
+    }
+
+    @Override public Mode getMode() {
+        int consoleType = mConsoleType & 0xFF;
+        if (isTVM()) {
+            return Mode.TICKET_MACHINE;
+        } else if (consoleType == 0xc8) {
+            return Mode.VENDING_MACHINE;
+        } else if (consoleType == 0xc7) {
+            return Mode.POS;
+        } else if (mIsBus) {
+            return Mode.BUS;
+        } else {
+            return Mode.METRO;
+        }
+    }
+
+    public String getConsoleType() {
+        return SuicaUtil.getConsoleTypeName(mConsoleType);
+    }
+
+    public String getProcessType() {
+        return SuicaUtil.getProcessTypeName(mProcessType);
+    }
+
+    /*
+    public boolean isBus() {
+        return mIsBus;
+    }
+
+    public boolean isProductSale() {
+        return mIsProductSale;
+    }
+
+    public boolean isCharge() {
+        return mIsCharge;
+    }
+
+    public int getRegionCode() {
+        return mRegionCode;
+    }
+
+    public int getBusLineCode() {
+        return mBusLineCode;
+    }
+
+    public int getBusStopCode() {
+        return mBusStopCode;
+    }
+
+    public int getRailEntranceLineCode() {
+        return mRailEntranceLineCode;
+    }
+
+    public int getRailEntranceStationCode() {
+        return mRailEntranceStationCode;
+    }
+
+    public int getRailExitLineCode() {
+        return mRailExitLineCode;
+    }
+
+    public int getRailExitStationCode() {
+        return mRailExitStationCode;
+    }
+    */
+
+    public void writeToParcel(Parcel parcel, int flags) {
+        parcel.writeLong(mBalance);
+
+        parcel.writeInt(mConsoleType);
+        parcel.writeInt(mProcessType);
+
+        parcel.writeInt(mIsProductSale ? 1 : 0);
+        parcel.writeInt(mIsBus ? 1 : 0);
+
+        parcel.writeInt(mIsCharge ? 1 : 0);
+
+        parcel.writeLong(mFare);
+        parcel.writeLong(mTimestamp.getTime());
+        parcel.writeInt(mRegionCode);
+
+        parcel.writeInt(mRailEntranceLineCode);
+        parcel.writeInt(mRailEntranceStationCode);
+        parcel.writeInt(mRailExitLineCode);
+        parcel.writeInt(mRailExitStationCode);
+
+        parcel.writeInt(mBusLineCode);
+        parcel.writeInt(mBusStopCode);
+
+        if (mStartStation != null) {
+            parcel.writeInt(1);
+            parcel.writeParcelable(mStartStation, flags);
+        } else {
+            parcel.writeInt(0);
+        }
+
+        if (mEndStation != null) {
+            parcel.writeInt(1);
+            parcel.writeParcelable(mEndStation, flags);
+        } else {
+            parcel.writeInt(0);
+        }
+    }
+
+    public int describeContents() {
+        return 0;
+    }
+
+    private boolean isTVM() {
+        int consoleType = mConsoleType & 0xFF;
+        int[] tvmConsoleTypes = { 0x03, 0x07, 0x08, 0x12, 0x13, 0x14, 0x15 };
+        return ArrayUtils.contains(tvmConsoleTypes, consoleType);
+    }
+}
diff --git a/src/main/java/com/codebutler/farebot/transit/suica/SuicaUtil.java b/src/main/java/com/codebutler/farebot/transit/suica/SuicaUtil.java
new file mode 100644
index 0000000..ff7257a
--- /dev/null
+++ b/src/main/java/com/codebutler/farebot/transit/suica/SuicaUtil.java
@@ -0,0 +1,228 @@
+package com.codebutler.farebot.transit.suica;
+
+import android.app.Application;
+import android.database.Cursor;
+import android.database.sqlite.SQLiteDatabase;
+import android.util.Log;
+
+import com.codebutler.farebot.FareBotApplication;
+import com.codebutler.farebot.R;
+import com.codebutler.farebot.transit.Station;
+
+import net.kazzz.felica.lib.Util;
+
+import java.util.Calendar;
+import java.util.Date;
+import java.util.Locale;
+
+import static com.codebutler.farebot.card.felica.DBUtil.COLUMNS_IRUCA_STATIONCODE;
+import static com.codebutler.farebot.card.felica.DBUtil.COLUMNS_STATIONCODE;
+import static com.codebutler.farebot.card.felica.DBUtil.COLUMN_AREACODE;
+import static com.codebutler.farebot.card.felica.DBUtil.COLUMN_COMPANYNAME;
+import static com.codebutler.farebot.card.felica.DBUtil.COLUMN_COMPANYNAME_EN;
+import static com.codebutler.farebot.card.felica.DBUtil.COLUMN_ID;
+import static com.codebutler.farebot.card.felica.DBUtil.COLUMN_LATITUDE;
+import static com.codebutler.farebot.card.felica.DBUtil.COLUMN_LINECODE;
+import static com.codebutler.farebot.card.felica.DBUtil.COLUMN_LINENAME;
+import static com.codebutler.farebot.card.felica.DBUtil.COLUMN_LINENAME_EN;
+import static com.codebutler.farebot.card.felica.DBUtil.COLUMN_LONGITUDE;
+import static com.codebutler.farebot.card.felica.DBUtil.COLUMN_STATIONCODE;
+import static com.codebutler.farebot.card.felica.DBUtil.COLUMN_STATIONNAME;
+import static com.codebutler.farebot.card.felica.DBUtil.COLUMN_STATIONNAME_EN;
+import static com.codebutler.farebot.card.felica.DBUtil.TABLE_IRUCA_STATIONCODE;
+import static com.codebutler.farebot.card.felica.DBUtil.TABLE_STATIONCODE;
+
+final class SuicaUtil {
+    private SuicaUtil() { }
+
+    static Date extractDate(boolean isProductSale, byte[] data) {
+        int date = Util.toInt(data[4], data[5]);
+        if (date == 0)
+            return null;
+        int yy = date >> 9;
+        int mm = (date >> 5) & 0xf;
+        int dd = date & 0x1f;
+        Calendar c = Calendar.getInstance();
+        c.set(Calendar.YEAR, 2000 + yy);
+        c.set(Calendar.MONTH, mm-1);
+        c.set(Calendar.DAY_OF_MONTH, dd);
+
+        // Product sales have time, too.
+        // 物販だったら時s間もセット
+        if (isProductSale) {
+            int time = Util.toInt(data[6], data[7]);
+            int hh = time >> 11;
+            int min = (time >> 5) & 0x3f;
+            c.set(Calendar.HOUR_OF_DAY, hh);
+            c.set(Calendar.MINUTE, min);
+        } else {
+            c.set(Calendar.HOUR_OF_DAY, 0);
+            c.set(Calendar.MINUTE, 0);
+        }
+        return c.getTime();
+    }
+
+    /**
+     * 機器種別を取得します
+     * <pre>http:// sourceforge.jp/projects/felicalib/wiki/suicaを参考にしています</pre>
+     * @param cType コンソールタイプをセット
+     * @return String 機器タイプが文字列で戻ります
+     */
+    static String getConsoleTypeName(int cType) {
+        Application app = FareBotApplication.getInstance();
+        switch (cType & 0xff) {
+            case 0x03: return app.getString(R.string.felica_terminal_fare_adjustment);
+            case 0x04: return app.getString(R.string.felica_terminal_portable);
+            case 0x05: return app.getString(R.string.felica_terminal_vehicle); // bus
+            case 0x07: return app.getString(R.string.felica_terminal_ticket);
+            case 0x08: return app.getString(R.string.felica_terminal_ticket);
+            case 0x09: return app.getString(R.string.felica_terminal_deposit_quick_charge);
+            case 0x12: return app.getString(R.string.felica_terminal_tvm_tokyo_monorail);
+            case 0x13: return app.getString(R.string.felica_terminal_tvm_etc);
+            case 0x14: return app.getString(R.string.felica_terminal_tvm_etc);
+            case 0x15: return app.getString(R.string.felica_terminal_tvm_etc);
+            case 0x16: return app.getString(R.string.felica_terminal_ticket_gate);
+            case 0x17: return app.getString(R.string.felica_terminal_simple_ticket_gate);
+            case 0x18: return app.getString(R.string.felica_terminal_booth);
+            case 0x19: return app.getString(R.string.felica_terminal_booth_green);
+            case 0x1a: return app.getString(R.string.felica_terminal_ticket_gate_terminal);
+            case 0x1b: return app.getString(R.string.felica_terminal_mobile_phone);
+            case 0x1c: return app.getString(R.string.felica_terminal_connection_adjustment);
+            case 0x1d: return app.getString(R.string.felica_terminal_transfer_adjustment);
+            case 0x1f: return app.getString(R.string.felica_terminal_simple_deposit);
+            case 0x46: return "VIEW ALTTE";
+            case 0x48: return "VIEW ALTTE";
+            case 0xc7: return app.getString(R.string.felica_terminal_pos);  // sales
+            case 0xc8: return app.getString(R.string.felica_terminal_vending);   // sales
+            default:
+                return String.format("Console 0x%s", Integer.toHexString(cType));
+        }
+    }
+
+    /**
+     * 処理種別を取得します
+     * <pre>http:// sourceforge.jp/projects/felicalib/wiki/suicaを参考にしています</pre>
+     * @param proc 処理タイプをセット
+     * @return String 処理タイプが文字列で戻ります
+     */
+    static String getProcessTypeName(int proc) {
+        Application app = FareBotApplication.getInstance();
+        switch (proc & 0xff) {
+            case 0x01: return app.getString(R.string.felica_process_fare_exit_gate);
+            case 0x02: return app.getString(R.string.felica_process_charge);
+            case 0x03: return app.getString(R.string.felica_process_purchase_magnetic);
+            case 0x04: return app.getString(R.string.felica_process_fare_adjustment);
+            case 0x05: return app.getString(R.string.felica_process_admission_payment);
+            case 0x06: return app.getString(R.string.felica_process_booth_exit);
+            case 0x07: return app.getString(R.string.felica_process_issue_new);
+            case 0x08: return app.getString(R.string.felica_process_booth_deduction);
+            case 0x0d: return app.getString(R.string.felica_process_bus_pitapa);                 // Bus
+            case 0x0f: return app.getString(R.string.felica_process_bus_iruca);                  // Bus
+            case 0x11: return app.getString(R.string.felica_process_reissue);
+            case 0x13: return app.getString(R.string.felica_process_payment_shinkansen);
+            case 0x14: return app.getString(R.string.felica_process_entry_a_autocharge);
+            case 0x15: return app.getString(R.string.felica_process_exit_a_autocharge);
+            case 0x1f: return app.getString(R.string.felica_process_deposit_bus);                // Bus
+            case 0x23: return app.getString(R.string.felica_process_purchase_special_ticket);    // Bus
+            case 0x46: return app.getString(R.string.felica_process_merchandise_purchase);       // Sales
+            case 0x48: return app.getString(R.string.felica_process_bonus_charge);
+            case 0x49: return app.getString(R.string.felica_process_register_deposit);           // Sales
+            case 0x4a: return app.getString(R.string.felica_process_merchandise_cancel);         // Sales
+            case 0x4b: return app.getString(R.string.felica_process_merchandise_admission);      // Sales
+            case 0xc6: return app.getString(R.string.felica_process_merchandise_purchase_cash);  // Sales
+            case 0xcb: return app.getString(R.string.felica_process_merchandise_admission_cash); // Sales
+            case 0x84: return app.getString(R.string.felica_process_payment_thirdparty);
+            case 0x85: return app.getString(R.string.felica_process_admission_thirdparty);
+            default:
+                return String.format("Process0x%s", Integer.toHexString(proc));
+        }
+    }
+
+    /**
+     * パス停留所を取得します
+     * <pre>http:// sourceforge.jp/projects/felicalib/wiki/suicaを参考にしています</pre>
+     * @param lineCode 線区コードをセット
+     * @param stationCode 駅順コードをセット
+     * @return 取得できた場合、序数0に会社名、1停留所名が戻ります
+     */
+    static Station getBusStop(int regionCode, int lineCode, int stationCode) {
+        int areaCode = (regionCode >> 6);
+
+        try {
+            SQLiteDatabase db = FareBotApplication.getInstance().getSuicaDBUtil().openDatabase();
+            Cursor cursor = db.query(TABLE_IRUCA_STATIONCODE,
+                    COLUMNS_IRUCA_STATIONCODE,
+                    String.format("%s = ? AND %s = ?", COLUMN_LINECODE, COLUMN_STATIONCODE),
+                    new String[] { Integer.toHexString(lineCode), Integer.toHexString(stationCode) },
+                    null,
+                    null,
+                    COLUMN_ID);
+
+            if (!cursor.moveToFirst()) {
+                return null;
+            }
+
+            // FIXME: Figure out a better way to deal with i18n.
+            boolean isJa = Locale.getDefault().getLanguage().equals("ja");
+            String companyName = cursor.getString(cursor.getColumnIndex(isJa ? COLUMN_COMPANYNAME : COLUMN_COMPANYNAME_EN));
+            String stationName = cursor.getString(cursor.getColumnIndex(isJa ? COLUMN_STATIONNAME : COLUMN_STATIONNAME_EN));
+            return new Station(companyName, null, stationName, null, null, null);
+
+        } catch (Exception e) {
+            Log.e("SuicaStationProvider", "getBusStop() error", e);
+            return null;
+        }
+    }
+
+    /**
+     * 地区コード、線区コード、駅順コードから駅名を取得します
+     * <pre>http://sourceforge.jp/projects/felicalib/wiki/suicaを参考にしています</pre>
+     *
+     * @param regionCode 地区コードをセット
+     * @param lineCode 線区コードをセット
+     * @param stationCode 駅順コードをセット
+     * @return 取得できた場合、序数0に会社名、1に路線名、2に駅名が戻ります
+     */
+    static Station getRailStation(int regionCode, int lineCode, int stationCode) {
+        int areaCode = (regionCode >> 6);
+
+        try {
+            SQLiteDatabase db = FareBotApplication.getInstance().getSuicaDBUtil().openDatabase();
+            Cursor cursor = db.query(
+                    TABLE_STATIONCODE,
+                    COLUMNS_STATIONCODE,
+                    String.format("%s = ? AND %s = ? AND %s = ?", COLUMN_AREACODE, COLUMN_LINECODE, COLUMN_STATIONCODE),
+                    new String[] {
+                            String.valueOf(areaCode & 0xFF),
+                            String.valueOf(lineCode & 0xFF),
+                            String.valueOf(stationCode & 0xFF)
+                    },
+                    null,
+                    null,
+                    COLUMN_ID);
+
+            if (!cursor.moveToFirst()) {
+                Log.w("SuicaTransitData", String.format("FAILED get rail company: r: 0x%s a: 0x%s l: 0x%s s: 0x%s",
+                        Integer.toHexString(regionCode),
+                        Integer.toHexString(areaCode),
+                        Integer.toHexString(lineCode),
+                        Integer.toHexString(stationCode)));
+
+                return null;
+            }
+
+            // FIXME: Figure out a better way to deal with i18n.
+            boolean isJa = Locale.getDefault().getLanguage().equals("ja");
+            String companyName = cursor.getString(cursor.getColumnIndex(isJa ? COLUMN_COMPANYNAME : COLUMN_COMPANYNAME_EN));
+            String lineName    = cursor.getString(cursor.getColumnIndex(isJa ? COLUMN_LINENAME    : COLUMN_LINENAME_EN));
+            String stationName = cursor.getString(cursor.getColumnIndex(isJa ? COLUMN_STATIONNAME : COLUMN_STATIONNAME_EN));
+            String latitude    = cursor.getString(cursor.getColumnIndex(COLUMN_LATITUDE));
+            String longitude   = cursor.getString(cursor.getColumnIndex(COLUMN_LONGITUDE));
+            return new Station(companyName, lineName, stationName, null, latitude, longitude);
+
+        } catch (Exception e) {
+            Log.e("SuicaStationProvider", "Error in getRailStation", e);
+            return null;
+        }
+    }
+}
diff --git a/src/main/java/com/codebutler/farebot/BetterAsyncTask.java b/src/main/java/com/codebutler/farebot/util/BetterAsyncTask.java
similarity index 98%
rename from src/main/java/com/codebutler/farebot/BetterAsyncTask.java
rename to src/main/java/com/codebutler/farebot/util/BetterAsyncTask.java
index f4ae556..b91988b 100644
--- a/src/main/java/com/codebutler/farebot/BetterAsyncTask.java
+++ b/src/main/java/com/codebutler/farebot/util/BetterAsyncTask.java
@@ -20,7 +20,7 @@
  * along with this program.  If not, see <http://www.gnu.org/licenses/>.
  */
 
-package com.codebutler.farebot;
+package com.codebutler.farebot.util;
 
 import android.app.Activity;
 import android.app.AlertDialog;
@@ -31,6 +31,8 @@ import android.text.TextUtils;
 import android.util.Log;
 import android.widget.ProgressBar;
 
+import com.codebutler.farebot.R;
+
 public abstract class BetterAsyncTask<Result> extends AsyncTask<Void, ProgressBar, BetterAsyncTask.TaskResult<Result>> {
     private static final String TAG = "GliphTask";
 
diff --git a/src/main/java/com/codebutler/farebot/ExportHelper.java b/src/main/java/com/codebutler/farebot/util/ExportHelper.java
similarity index 71%
rename from src/main/java/com/codebutler/farebot/ExportHelper.java
rename to src/main/java/com/codebutler/farebot/util/ExportHelper.java
index eccc082..85227f1 100644
--- a/src/main/java/com/codebutler/farebot/ExportHelper.java
+++ b/src/main/java/com/codebutler/farebot/util/ExportHelper.java
@@ -20,26 +20,39 @@
  * along with this program.  If not, see <http://www.gnu.org/licenses/>.
  */
 
-package com.codebutler.farebot;
+package com.codebutler.farebot.util;
 
 import android.content.ContentValues;
 import android.content.Context;
 import android.database.Cursor;
 import android.net.Uri;
+
 import com.codebutler.farebot.provider.CardDBHelper;
 import com.codebutler.farebot.provider.CardProvider;
 import com.codebutler.farebot.provider.CardsTableColumns;
+
 import org.w3c.dom.Document;
 import org.w3c.dom.Element;
+import org.w3c.dom.Node;
 import org.w3c.dom.NodeList;
 import org.xml.sax.InputSource;
 
+import java.io.StringReader;
+import java.io.StringWriter;
+
 import javax.xml.parsers.DocumentBuilder;
 import javax.xml.parsers.DocumentBuilderFactory;
-import java.io.StringReader;
+import javax.xml.transform.OutputKeys;
+import javax.xml.transform.Result;
+import javax.xml.transform.Source;
+import javax.xml.transform.Transformer;
+import javax.xml.transform.TransformerFactory;
+import javax.xml.transform.dom.DOMSource;
+import javax.xml.transform.stream.StreamResult;
 
 public class ExportHelper {
     public static String exportCardsXml(Context context) throws Exception {
+
         DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
 
         // http://code.google.com/p/android/issues/detail?id=2735
@@ -54,9 +67,9 @@ public class ExportHelper {
         Cursor cursor = CardDBHelper.createCursor(context);
 
         while (cursor.moveToNext()) {
-            int    type   = cursor.getInt(cursor.getColumnIndex(CardsTableColumns.TYPE));
+            int type = cursor.getInt(cursor.getColumnIndex(CardsTableColumns.TYPE));
             String serial = cursor.getString(cursor.getColumnIndex(CardsTableColumns.TAG_SERIAL));
-            String data   = cursor.getString(cursor.getColumnIndex(CardsTableColumns.DATA));
+            String data = cursor.getString(cursor.getColumnIndex(CardsTableColumns.DATA));
 
             Document doc = builder.parse(new InputSource(new StringReader(data)));
             Element rootElement = doc.getDocumentElement();
@@ -64,7 +77,7 @@ public class ExportHelper {
             cardsElement.appendChild(exportDoc.adoptNode(rootElement.cloneNode(true)));
         }
 
-        return Utils.xmlNodeToString(exportDoc);
+        return xmlNodeToString(exportDoc);
     }
 
     public static Uri[] importCardsXml(Context context, String xml) throws Exception {
@@ -85,7 +98,7 @@ public class ExportHelper {
     }
 
     private static Uri importCard(Context context, Element cardElement) throws Exception {
-        String xml = Utils.xmlNodeToString(cardElement);
+        String xml = xmlNodeToString(cardElement);
 
         ContentValues values = new ContentValues();
         values.put(CardsTableColumns.TYPE, cardElement.getAttribute("type"));
@@ -95,4 +108,18 @@ public class ExportHelper {
 
         return context.getContentResolver().insert(CardProvider.CONTENT_URI_CARD, values);
     }
+
+    private static String xmlNodeToString (Node node) throws Exception {
+        // The amount of code required to do simple things in Java is incredible.
+        Source source = new DOMSource(node);
+        StringWriter stringWriter = new StringWriter();
+        Result result = new StreamResult(stringWriter);
+        TransformerFactory factory = TransformerFactory.newInstance();
+        Transformer transformer = factory.newTransformer();
+        transformer.setOutputProperty(OutputKeys.INDENT, "yes");
+        transformer.setOutputProperty("{http://xml.apache.org/xslt}indent-amount", "2");
+        transformer.setURIResolver(null);
+        transformer.transform(source, result);
+        return stringWriter.getBuffer().toString();
+    }
 }
diff --git a/src/main/java/com/codebutler/farebot/Utils.java b/src/main/java/com/codebutler/farebot/util/Utils.java
similarity index 82%
rename from src/main/java/com/codebutler/farebot/Utils.java
rename to src/main/java/com/codebutler/farebot/util/Utils.java
index 18c3fb4..d6ea777 100644
--- a/src/main/java/com/codebutler/farebot/Utils.java
+++ b/src/main/java/com/codebutler/farebot/util/Utils.java
@@ -20,7 +20,7 @@
  * along with this program.  If not, see <http://www.gnu.org/licenses/>.
  */
 
-package com.codebutler.farebot;
+package com.codebutler.farebot.util;
 
 import android.app.Activity;
 import android.app.AlertDialog;
@@ -31,23 +31,25 @@ import android.content.pm.PackageManager;
 import android.nfc.NfcAdapter;
 import android.os.Build;
 import android.provider.Settings;
+import android.text.TextUtils;
 import android.util.Log;
 import android.view.WindowManager;
 
-import org.w3c.dom.Node;
+import com.codebutler.farebot.FareBotApplication;
+import com.codebutler.farebot.R;
 
-import java.io.StringWriter;
+import java.util.ArrayList;
+import java.util.Arrays;
 import java.util.List;
 
-import javax.xml.transform.OutputKeys;
-import javax.xml.transform.Result;
-import javax.xml.transform.Source;
-import javax.xml.transform.Transformer;
-import javax.xml.transform.TransformerFactory;
-import javax.xml.transform.dom.DOMSource;
-import javax.xml.transform.stream.StreamResult;
-
 public class Utils {
+    public static <T> List<T> arrayAsList(T... array) {
+        if (array == null) {
+            return new ArrayList<>();
+        }
+        return Arrays.asList(array);
+    }
+
     public static void checkNfcEnabled(final Activity activity, NfcAdapter adapter) {
         if (adapter != null && adapter.isEnabled()) {
             return;
@@ -95,7 +97,7 @@ public class Utils {
         }
     }
 
-    public static String getHexString (byte[] b) throws Exception {
+    public static String getHexString (byte[] b) {
         String result = "";
         for (int i=0; i < b.length; i++) {
             result += Integer.toString( ( b[i] & 0xff ) + 0x100, 16).substring( 1 );
@@ -165,38 +167,17 @@ public class Utils {
         return ret;
     }
 
-    public static String xmlNodeToString (Node node) throws Exception {
-        // The amount of code required to do simple things in Java is incredible.
-        Source source = new DOMSource(node);
-        StringWriter stringWriter = new StringWriter();
-        Result result = new StreamResult(stringWriter);
-        TransformerFactory factory = TransformerFactory.newInstance();
-        Transformer transformer = factory.newTransformer();
-        transformer.setOutputProperty(OutputKeys.INDENT, "yes");
-        transformer.setOutputProperty("{http://xml.apache.org/xslt}indent-amount", "2");
-        transformer.setURIResolver(null);
-        transformer.transform(source, result);
-        return stringWriter.getBuffer().toString();
-    }
-
     public static String getErrorMessage (Throwable ex) {
+        if (ex.getCause() != null) {
+            ex = ex.getCause();
+        }
         String errorMessage = ex.getLocalizedMessage();
-        if (errorMessage == null)
+        if (TextUtils.isEmpty(errorMessage)) {
             errorMessage = ex.getMessage();
-        if (errorMessage == null)
+        }
+        if (TextUtils.isEmpty(errorMessage)) {
             errorMessage = ex.toString();
-
-        if (ex.getCause() != null) {
-            String causeMessage = ex.getCause().getLocalizedMessage();
-            if (causeMessage == null)
-                causeMessage = ex.getCause().getMessage();
-            if (causeMessage == null)
-                causeMessage = ex.getCause().toString();
-
-            if (causeMessage != null)
-                errorMessage += ": " + causeMessage;
         }
-
         return errorMessage;
     }
 
diff --git a/src/main/java/com/codebutler/farebot/xml/Base64String.java b/src/main/java/com/codebutler/farebot/xml/Base64String.java
new file mode 100644
index 0000000..cea6878
--- /dev/null
+++ b/src/main/java/com/codebutler/farebot/xml/Base64String.java
@@ -0,0 +1,32 @@
+package com.codebutler.farebot.xml;
+
+import android.util.Base64;
+
+public class Base64String {
+    private final byte[] mData;
+
+    public Base64String(byte[] data) {
+        mData = data;
+    }
+
+    public Base64String(String data) {
+        mData = Base64.decode(data, Base64.DEFAULT);
+    }
+
+    public byte[] getData() {
+        return mData;
+    }
+
+    public String toBase64() {
+        return Base64.encodeToString(mData, Base64.NO_WRAP);
+    }
+
+    public static final class Transform implements org.simpleframework.xml.transform.Transform<Base64String> {
+        @Override public Base64String read(String value) throws Exception {
+            return new Base64String(value);
+        }
+        @Override public String write(Base64String value) throws Exception {
+            return value.toBase64();
+        }
+    }
+}
diff --git a/src/main/java/com/codebutler/farebot/xml/CardConverter.java b/src/main/java/com/codebutler/farebot/xml/CardConverter.java
new file mode 100644
index 0000000..1eae556
--- /dev/null
+++ b/src/main/java/com/codebutler/farebot/xml/CardConverter.java
@@ -0,0 +1,41 @@
+package com.codebutler.farebot.xml;
+
+import com.codebutler.farebot.card.Card;
+import com.codebutler.farebot.card.CardType;
+import com.codebutler.farebot.card.cepas.CEPASCard;
+import com.codebutler.farebot.card.classic.ClassicCard;
+import com.codebutler.farebot.card.desfire.DesfireCard;
+import com.codebutler.farebot.card.felica.FelicaCard;
+
+import org.simpleframework.xml.Serializer;
+import org.simpleframework.xml.convert.Converter;
+import org.simpleframework.xml.stream.InputNode;
+import org.simpleframework.xml.stream.OutputNode;
+
+public class CardConverter implements Converter<Card> {
+    private final Serializer mSerializer;
+
+    public CardConverter(Serializer serializer) {
+        mSerializer = serializer;
+    }
+
+    @Override public Card read(InputNode node) throws Exception {
+        CardType type = CardType.parseValue(node.getAttribute("type").getValue());
+        switch (type) {
+            case MifareDesfire:
+                return mSerializer.read(DesfireCard.class, node);
+            case CEPAS:
+                return mSerializer.read(CEPASCard.class, node);
+            case FeliCa:
+                return mSerializer.read(FelicaCard.class, node);
+            case MifareClassic:
+                return mSerializer.read(ClassicCard.class, node);
+            default:
+                throw new UnsupportedOperationException("Unsupported card type: " + type);
+        }
+    }
+
+    @Override public void write(OutputNode node, Card value) throws Exception {
+        throw new SkippableRegistryStrategy.SkipException();
+    }
+}
diff --git a/src/main/java/com/codebutler/farebot/xml/ClassicSectorConverter.java b/src/main/java/com/codebutler/farebot/xml/ClassicSectorConverter.java
new file mode 100644
index 0000000..18eb74f
--- /dev/null
+++ b/src/main/java/com/codebutler/farebot/xml/ClassicSectorConverter.java
@@ -0,0 +1,29 @@
+package com.codebutler.farebot.xml;
+
+import com.codebutler.farebot.card.classic.ClassicSector;
+import com.codebutler.farebot.card.classic.InvalidClassicSector;
+import com.codebutler.farebot.card.classic.UnauthorizedClassicSector;
+
+import org.simpleframework.xml.convert.Converter;
+import org.simpleframework.xml.stream.InputNode;
+import org.simpleframework.xml.stream.OutputNode;
+
+public class ClassicSectorConverter implements Converter<ClassicSector> {
+    @Override public ClassicSector read(InputNode node) throws Exception {
+        int sectorIndex = Integer.parseInt(node.getAttribute("index").getValue());
+
+        if (node.getAttribute("unauthorized") != null && node.getAttribute("unauthorized").getValue().equals("true")) {
+            return new UnauthorizedClassicSector(sectorIndex);
+        }
+
+        if (node.getAttribute("invalid") != null && node.getAttribute("invalid").getValue().equals("true")) {
+            return new InvalidClassicSector(sectorIndex, node.getAttribute("error").getValue());
+        }
+
+        throw new SkippableRegistryStrategy.SkipException();
+    }
+
+    @Override public void write(OutputNode node, ClassicSector value) throws Exception {
+        throw new SkippableRegistryStrategy.SkipException();
+    }
+}
diff --git a/src/main/java/com/codebutler/farebot/xml/DesfireFileConverter.java b/src/main/java/com/codebutler/farebot/xml/DesfireFileConverter.java
new file mode 100644
index 0000000..47d0eb5
--- /dev/null
+++ b/src/main/java/com/codebutler/farebot/xml/DesfireFileConverter.java
@@ -0,0 +1,55 @@
+package com.codebutler.farebot.xml;
+
+import android.util.Base64;
+
+import com.codebutler.farebot.card.desfire.DesfireFile;
+import com.codebutler.farebot.card.desfire.DesfireFileSettings;
+import com.codebutler.farebot.card.desfire.InvalidDesfireFile;
+
+import org.simpleframework.xml.Serializer;
+import org.simpleframework.xml.convert.Converter;
+import org.simpleframework.xml.stream.InputNode;
+import org.simpleframework.xml.stream.OutputNode;
+
+public class DesfireFileConverter implements Converter<DesfireFile> {
+    private final Serializer mSerializer;
+
+    public DesfireFileConverter(Serializer serializer) {
+        mSerializer = serializer;
+    }
+
+    @Override public DesfireFile read(InputNode source) throws Exception {
+        int id = Integer.parseInt(source.getAttribute("id").getValue());
+        DesfireFileSettings settings = null;
+        byte[] data = null;
+        String error = null;
+        while (true) {
+            InputNode node = source.getNext();
+            if (node == null) {
+                break;
+            }
+            switch (node.getName()) {
+                case "settings":
+                    settings = mSerializer.read(DesfireFileSettings.class, node);
+                    break;
+                case "data":
+                    String value = node.getValue();
+                    if (value != null) {
+                        data = Base64.decode(value, Base64.DEFAULT);
+                    }
+                    break;
+                case "error":
+                    error = node.getValue();
+                    break;
+            }
+        }
+        if (data == null || settings == null) {
+            return new InvalidDesfireFile(id, error);
+        }
+        return DesfireFile.create(id, settings, data);
+    }
+
+    @Override public void write(OutputNode node, DesfireFile value) throws Exception {
+        throw new SkippableRegistryStrategy.SkipException();
+    }
+}
diff --git a/src/main/java/com/codebutler/farebot/xml/DesfireFileSettingsConverter.java b/src/main/java/com/codebutler/farebot/xml/DesfireFileSettingsConverter.java
new file mode 100644
index 0000000..904896e
--- /dev/null
+++ b/src/main/java/com/codebutler/farebot/xml/DesfireFileSettingsConverter.java
@@ -0,0 +1,69 @@
+package com.codebutler.farebot.xml;
+
+import com.codebutler.farebot.card.desfire.DesfireFileSettings;
+import com.codebutler.farebot.card.desfire.RecordDesfireFileSettings;
+import com.codebutler.farebot.card.desfire.StandardDesfireFileSettings;
+import com.codebutler.farebot.card.desfire.UnsupportedDesfireFileSettings;
+import com.codebutler.farebot.util.Utils;
+
+import org.simpleframework.xml.convert.Converter;
+import org.simpleframework.xml.stream.InputNode;
+import org.simpleframework.xml.stream.OutputNode;
+
+public class DesfireFileSettingsConverter implements Converter<DesfireFileSettings> {
+    @Override public DesfireFileSettings read(InputNode source) throws Exception {
+        byte fileType = -1;
+        int fileSize = -1;
+        byte commSetting = -1;
+        byte[] accessRights = new byte[0];
+        int recordSize = -1;
+        int maxRecords = -1;
+        int curRecords = -1;
+
+        while (true) {
+            InputNode node = source.getNext();
+            if (node == null) {
+                break;
+            }
+            switch (node.getName()) {
+                case "filetype":
+                    fileType = Byte.parseByte(node.getValue());
+                    break;
+                case "filesize":
+                    fileSize = Integer.parseInt(node.getValue());
+                    break;
+                case "commsetting":
+                    commSetting = Byte.parseByte(node.getValue());
+                    break;
+                case "accessrights":
+                    accessRights = Utils.hexStringToByteArray(node.getValue());
+                    break;
+                case "recordsize":
+                    recordSize = Integer.parseInt(node.getValue());
+                    break;
+                case "maxrecords":
+                    maxRecords = Integer.parseInt(node.getValue());
+                    break;
+                case "currecords":
+                    curRecords = Integer.parseInt(node.getValue());
+                    break;
+            }
+        }
+
+        switch (fileType) {
+            case DesfireFileSettings.STANDARD_DATA_FILE:
+            case DesfireFileSettings.BACKUP_DATA_FILE:
+                return new StandardDesfireFileSettings(fileType, commSetting, accessRights, fileSize);
+            case DesfireFileSettings.LINEAR_RECORD_FILE:
+            case DesfireFileSettings.CYCLIC_RECORD_FILE:
+                return new RecordDesfireFileSettings(fileType, commSetting, accessRights, recordSize, maxRecords,
+                        curRecords);
+            default:
+                return new UnsupportedDesfireFileSettings(fileType);
+        }
+    }
+
+    @Override public void write(OutputNode node, DesfireFileSettings value) throws Exception {
+        throw new SkippableRegistryStrategy.SkipException();
+    }
+}
diff --git a/src/main/java/com/codebutler/farebot/xml/EpochDateTransform.java b/src/main/java/com/codebutler/farebot/xml/EpochDateTransform.java
new file mode 100644
index 0000000..07a206f
--- /dev/null
+++ b/src/main/java/com/codebutler/farebot/xml/EpochDateTransform.java
@@ -0,0 +1,15 @@
+package com.codebutler.farebot.xml;
+
+import org.simpleframework.xml.transform.Transform;
+
+import java.util.Date;
+
+public class EpochDateTransform implements Transform<Date> {
+    @Override public Date read(String value) throws Exception {
+        return new Date(Long.parseLong(value));
+    }
+
+    @Override public String write(Date value) throws Exception {
+        return String.valueOf(value.getTime());
+    }
+}
diff --git a/src/main/java/com/codebutler/farebot/xml/FelicaIDmTransform.java b/src/main/java/com/codebutler/farebot/xml/FelicaIDmTransform.java
new file mode 100644
index 0000000..339a0be
--- /dev/null
+++ b/src/main/java/com/codebutler/farebot/xml/FelicaIDmTransform.java
@@ -0,0 +1,17 @@
+package com.codebutler.farebot.xml;
+
+import android.util.Base64;
+
+import net.kazzz.felica.lib.FeliCaLib;
+
+import org.simpleframework.xml.transform.Transform;
+
+public class FelicaIDmTransform implements Transform<FeliCaLib.IDm> {
+    @Override public FeliCaLib.IDm read(String value) throws Exception {
+        return new FeliCaLib.IDm(Base64.decode(value, Base64.DEFAULT));
+    }
+
+    @Override public String write(FeliCaLib.IDm value) throws Exception {
+        return Base64.encodeToString(value.getBytes(), Base64.NO_WRAP);
+    }
+}
diff --git a/src/main/java/com/codebutler/farebot/xml/FelicaPMmTransform.java b/src/main/java/com/codebutler/farebot/xml/FelicaPMmTransform.java
new file mode 100644
index 0000000..3356f6a
--- /dev/null
+++ b/src/main/java/com/codebutler/farebot/xml/FelicaPMmTransform.java
@@ -0,0 +1,17 @@
+package com.codebutler.farebot.xml;
+
+import android.util.Base64;
+
+import net.kazzz.felica.lib.FeliCaLib;
+
+import org.simpleframework.xml.transform.Transform;
+
+public class FelicaPMmTransform implements Transform<FeliCaLib.PMm> {
+    @Override public FeliCaLib.PMm read(String value) throws Exception {
+        return new FeliCaLib.PMm(Base64.decode(value, Base64.DEFAULT));
+    }
+
+    @Override public String write(FeliCaLib.PMm value) throws Exception {
+        return Base64.encodeToString(value.getBytes(), Base64.NO_WRAP);
+    }
+}
diff --git a/src/main/java/com/codebutler/farebot/xml/HexString.java b/src/main/java/com/codebutler/farebot/xml/HexString.java
new file mode 100644
index 0000000..73b3d9f
--- /dev/null
+++ b/src/main/java/com/codebutler/farebot/xml/HexString.java
@@ -0,0 +1,32 @@
+package com.codebutler.farebot.xml;
+
+import com.codebutler.farebot.util.Utils;
+
+public class HexString {
+    private final byte[] mData;
+
+    public HexString(byte[] data) {
+        mData = data;
+    }
+
+    public HexString(String hex) {
+        mData = Utils.hexStringToByteArray(hex);
+    }
+
+    public byte[] getData() {
+        return mData;
+    }
+
+    public String toHexString() {
+        return Utils.getHexString(mData);
+    }
+
+    public static final class Transform implements org.simpleframework.xml.transform.Transform<HexString> {
+        @Override public HexString read(String value) throws Exception {
+            return new HexString(value);
+        }
+        @Override public String write(HexString value) throws Exception {
+            return value.toHexString();
+        }
+    }
+}
diff --git a/src/main/java/com/codebutler/farebot/xml/SkippableRegistryStrategy.java b/src/main/java/com/codebutler/farebot/xml/SkippableRegistryStrategy.java
new file mode 100644
index 0000000..1016b95
--- /dev/null
+++ b/src/main/java/com/codebutler/farebot/xml/SkippableRegistryStrategy.java
@@ -0,0 +1,41 @@
+package com.codebutler.farebot.xml;
+
+import org.simpleframework.xml.convert.Registry;
+import org.simpleframework.xml.convert.RegistryStrategy;
+import org.simpleframework.xml.strategy.Strategy;
+import org.simpleframework.xml.strategy.Type;
+import org.simpleframework.xml.strategy.Value;
+import org.simpleframework.xml.stream.InputNode;
+import org.simpleframework.xml.stream.NodeMap;
+import org.simpleframework.xml.stream.OutputNode;
+
+import java.util.Map;
+
+public class SkippableRegistryStrategy extends RegistryStrategy {
+    public SkippableRegistryStrategy(Registry registry) {
+        super(registry);
+    }
+
+    public SkippableRegistryStrategy(Registry registry, Strategy strategy) {
+        super(registry, strategy);
+    }
+
+    @SuppressWarnings("unchecked")
+    @Override public Value read(Type type, NodeMap<InputNode> node, Map map) throws Exception {
+        try {
+            return super.read(type, node, map);
+        } catch (SkipException ignored) {
+            return null;
+        }
+    }
+
+    @Override public boolean write(Type type, Object value, NodeMap<OutputNode> node, Map map) throws Exception {
+        try {
+            return super.write(type, value, node, map);
+        } catch (SkipException ignored) {
+            return false;
+        }
+    }
+
+    public static class SkipException extends Exception { }
+}
\ No newline at end of file
