M	QuoteUnquote.cloudLib
M	QuoteUnquote.cloudLib.functions
M	QuoteUnquote.utilsLib
diff --git a/app/src/androidTest/java/com/github/jameshnsears/quoteunquote/QuoteUnquoteModelDouble.java b/app/src/androidTest/java/com/github/jameshnsears/quoteunquote/QuoteUnquoteModelDouble.java
old mode 100644
new mode 100755
index b26f79d..6245982
--- a/app/src/androidTest/java/com/github/jameshnsears/quoteunquote/QuoteUnquoteModelDouble.java
+++ b/app/src/androidTest/java/com/github/jameshnsears/quoteunquote/QuoteUnquoteModelDouble.java
@@ -11,20 +11,16 @@ import java.util.List;
 public class QuoteUnquoteModelDouble extends QuoteUnquoteModel {
     public QuoteUnquoteModelDouble() {
         context = getApplicationContext();
-        databaseRepository = DatabaseRepositoryDouble.getInstance();
+        databaseRepository = DatabaseRepositoryDouble.getInstance(context);
     }
 
-    public int countReported() {
-        return DatabaseRepositoryDouble.getInstance().countReported();
-    }
-
-    public int countPrevious(final int widgetId) {
+    public int countPrevious(int widgetId) {
         return databaseRepository.countPrevious(widgetId, ContentSelection.ALL)
                 + databaseRepository.countPrevious(widgetId, ContentSelection.AUTHOR)
                 + databaseRepository.countPrevious(widgetId, ContentSelection.SEARCH);
     }
 
     public List<QuotationEntity> getAllQuotations() {
-        return this.databaseRepository.getAllQuotations();
+        return databaseRepository.getAllQuotations();
     }
 }
diff --git a/app/src/androidTest/java/com/github/jameshnsears/quoteunquote/QuoteUnquoteModelTest.kt b/app/src/androidTest/java/com/github/jameshnsears/quoteunquote/QuoteUnquoteModelTest.kt
old mode 100644
new mode 100755
index e7a3776..bdf1d68
--- a/app/src/androidTest/java/com/github/jameshnsears/quoteunquote/QuoteUnquoteModelTest.kt
+++ b/app/src/androidTest/java/com/github/jameshnsears/quoteunquote/QuoteUnquoteModelTest.kt
@@ -9,7 +9,11 @@ class QuoteUnquoteModelTest : QuoteUnquoteModelUtility() {
     @Test
     fun countAll() {
         insertQuotationTestData01()
-        assertEquals(2, quoteUnquoteModelDouble.countAll().blockingGet())
+
+        assertEquals(
+            2,
+            quoteUnquoteModelDouble.countAll().blockingGet()
+        )
     }
 
     @Test
diff --git a/app/src/androidTest/java/com/github/jameshnsears/quoteunquote/QuoteUnquoteModelUtility.kt b/app/src/androidTest/java/com/github/jameshnsears/quoteunquote/QuoteUnquoteModelUtility.kt
old mode 100644
new mode 100755
diff --git a/app/src/androidTest/java/com/github/jameshnsears/quoteunquote/WidgetDeletedTest.kt b/app/src/androidTest/java/com/github/jameshnsears/quoteunquote/WidgetDeletedTest.kt
old mode 100644
new mode 100755
index ba9b8fe..3eb2b2a
--- a/app/src/androidTest/java/com/github/jameshnsears/quoteunquote/WidgetDeletedTest.kt
+++ b/app/src/androidTest/java/com/github/jameshnsears/quoteunquote/WidgetDeletedTest.kt
@@ -1,6 +1,5 @@
 package com.github.jameshnsears.quoteunquote
 
-import android.os.Build
 import com.github.jameshnsears.quoteunquote.configure.fragment.appearance.AppearancePreferences
 import com.github.jameshnsears.quoteunquote.configure.fragment.sync.SyncPreferences
 import com.github.jameshnsears.quoteunquote.utils.preference.PreferencesFacade
@@ -15,12 +14,12 @@ import org.junit.Test
 class WidgetDeletedTest : QuoteUnquoteModelUtility() {
     @Test
     fun widgetDeleted() {
-        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.Q) {
+        if (canWorkWithMockk()) {
             setupDatabase()
             setupSharedPreferences()
 
             val quoteUnquoteWidget = spyk<QuoteUnquoteWidget>()
-            every { quoteUnquoteWidget.getQuoteUnquoteModel(any()) } returns quoteUnquoteModelDouble
+            every { quoteUnquoteWidget.getQuoteUnquoteModel(WidgetIdHelper.WIDGET_ID_01, any()) } returns quoteUnquoteModelDouble
 
             quoteUnquoteWidget.onEnabled(context)
             val syncPreferences =
diff --git a/app/src/androidTest/java/com/github/jameshnsears/quoteunquote/WidgetDisabledTest.kt b/app/src/androidTest/java/com/github/jameshnsears/quoteunquote/WidgetDisabledTest.kt
old mode 100644
new mode 100755
index f5cf9fd..0f58aa5
--- a/app/src/androidTest/java/com/github/jameshnsears/quoteunquote/WidgetDisabledTest.kt
+++ b/app/src/androidTest/java/com/github/jameshnsears/quoteunquote/WidgetDisabledTest.kt
@@ -1,6 +1,5 @@
 package com.github.jameshnsears.quoteunquote
 
-import android.os.Build
 import com.github.jameshnsears.quoteunquote.configure.fragment.sync.SyncPreferences
 import com.github.jameshnsears.quoteunquote.utils.preference.PreferencesFacade
 import com.github.jameshnsears.quoteunquote.utils.widget.WidgetIdHelper
@@ -14,11 +13,11 @@ import org.junit.Test
 open class WidgetDisabledTest : QuoteUnquoteModelUtility() {
     @Test
     fun widgetDisabled() {
-        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.Q) {
+        if (canWorkWithMockk()) {
             setupDatabase()
 
             val quoteUnquoteWidget = spyk<QuoteUnquoteWidget>()
-            every { quoteUnquoteWidget.getQuoteUnquoteModel(any()) } returns quoteUnquoteModelDouble
+            every { quoteUnquoteWidget.getQuoteUnquoteModel(WidgetIdHelper.WIDGET_ID_01, any()) } returns quoteUnquoteModelDouble
 
             quoteUnquoteWidget.onEnabled(context)
             val contentPreferences =
diff --git a/app/src/androidTest/java/com/github/jameshnsears/quoteunquote/WidgetHeartColourTest.kt b/app/src/androidTest/java/com/github/jameshnsears/quoteunquote/WidgetHeartColourTest.kt
old mode 100644
new mode 100755
index 8785bad..898cd60
--- a/app/src/androidTest/java/com/github/jameshnsears/quoteunquote/WidgetHeartColourTest.kt
+++ b/app/src/androidTest/java/com/github/jameshnsears/quoteunquote/WidgetHeartColourTest.kt
@@ -1,6 +1,5 @@
 package com.github.jameshnsears.quoteunquote
 
-import android.os.Build
 import android.widget.RemoteViews
 import com.github.jameshnsears.quoteunquote.utils.widget.WidgetIdHelper
 import io.mockk.every
@@ -11,11 +10,11 @@ import org.junit.Test
 class WidgetHeartColourTest : QuoteUnquoteModelUtility() {
     @Test
     fun setHeartColour() {
-        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.Q) {
+        if (canWorkWithMockk()) {
             insertQuotationTestData01()
 
             val quoteUnquoteWidget = spyk<QuoteUnquoteWidget>()
-            every { quoteUnquoteWidget.getQuoteUnquoteModel(any()) } returns quoteUnquoteModelDouble
+            every { quoteUnquoteWidget.getQuoteUnquoteModel(WidgetIdHelper.WIDGET_ID_01, any()) } returns quoteUnquoteModelDouble
 
             quoteUnquoteModelDouble.markAsCurrentNext(WidgetIdHelper.WIDGET_ID_01, false)
 
diff --git a/app/src/androidTest/java/com/github/jameshnsears/quoteunquote/WidgetToolbarFavouriteTest.kt b/app/src/androidTest/java/com/github/jameshnsears/quoteunquote/WidgetToolbarFavouriteTest.kt
old mode 100644
new mode 100755
diff --git a/app/src/androidTest/java/com/github/jameshnsears/quoteunquote/WidgetToolbarFirstTest.kt b/app/src/androidTest/java/com/github/jameshnsears/quoteunquote/WidgetToolbarFirstTest.kt
old mode 100644
new mode 100755
index fbcba20..241efaf
--- a/app/src/androidTest/java/com/github/jameshnsears/quoteunquote/WidgetToolbarFirstTest.kt
+++ b/app/src/androidTest/java/com/github/jameshnsears/quoteunquote/WidgetToolbarFirstTest.kt
@@ -1,7 +1,6 @@
 package com.github.jameshnsears.quoteunquote
 
 import android.appwidget.AppWidgetManager
-import android.os.Build
 import com.github.jameshnsears.quoteunquote.configure.fragment.quotations.QuotationsPreferences
 import com.github.jameshnsears.quoteunquote.utils.ContentSelection
 import com.github.jameshnsears.quoteunquote.utils.widget.WidgetIdHelper
@@ -18,7 +17,7 @@ class WidgetToolbarFirstTest : QuoteUnquoteModelUtility() {
     fun setup() {
         insertQuotationTestData01()
 
-        every { quoteUnquoteWidget.getQuoteUnquoteModel(any()) } returns quoteUnquoteModelDouble
+        every { quoteUnquoteWidget.getQuoteUnquoteModel(WidgetIdHelper.WIDGET_ID_01, any()) } returns quoteUnquoteModelDouble
 
         every {
             appWidgetManager.notifyAppWidgetViewDataChanged(
@@ -32,7 +31,7 @@ class WidgetToolbarFirstTest : QuoteUnquoteModelUtility() {
 
     @Test
     fun firstAll() {
-        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.Q) {
+        if (canWorkWithMockk()) {
             setup()
 
             databaseRepositoryDouble.markAsCurrent(
@@ -57,7 +56,7 @@ class WidgetToolbarFirstTest : QuoteUnquoteModelUtility() {
 
     @Test
     fun firstFavourite() {
-        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.Q) {
+        if (canWorkWithMockk()) {
             setup()
 
             val quotationsPreferences =
@@ -74,7 +73,7 @@ class WidgetToolbarFirstTest : QuoteUnquoteModelUtility() {
 
     @Test
     fun firstAuthor() {
-        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.Q) {
+        if (canWorkWithMockk()) {
             setup()
 
             val quotationsPreferences =
@@ -95,7 +94,7 @@ class WidgetToolbarFirstTest : QuoteUnquoteModelUtility() {
 
     @Test
     fun firstSearch() {
-        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.Q) {
+        if (canWorkWithMockk()) {
             setup()
 
             val quotationsPreferences =
diff --git a/app/src/androidTest/java/com/github/jameshnsears/quoteunquote/WidgetToolbarJumpTest.kt b/app/src/androidTest/java/com/github/jameshnsears/quoteunquote/WidgetToolbarJumpTest.kt
old mode 100644
new mode 100755
diff --git a/app/src/androidTest/java/com/github/jameshnsears/quoteunquote/WidgetToolbarNextTest.kt b/app/src/androidTest/java/com/github/jameshnsears/quoteunquote/WidgetToolbarNextTest.kt
old mode 100644
new mode 100755
diff --git a/app/src/androidTest/java/com/github/jameshnsears/quoteunquote/WidgetToolbarPreviousTest.kt b/app/src/androidTest/java/com/github/jameshnsears/quoteunquote/WidgetToolbarPreviousTest.kt
old mode 100644
new mode 100755
index fba5b5f..0eedc06
--- a/app/src/androidTest/java/com/github/jameshnsears/quoteunquote/WidgetToolbarPreviousTest.kt
+++ b/app/src/androidTest/java/com/github/jameshnsears/quoteunquote/WidgetToolbarPreviousTest.kt
@@ -11,7 +11,9 @@ class WidgetToolbarPreviousTest : QuoteUnquoteModelUtility() {
     fun erase() {
         assertEquals(
             0,
-            databaseRepositoryDouble.countCurrent(WidgetIdHelper.WIDGET_ID_01)
+            databaseRepositoryDouble.countCurrent(
+                WidgetIdHelper.WIDGET_ID_01
+            )
         )
 
         databaseRepositoryDouble.markAsCurrent(WidgetIdHelper.WIDGET_ID_01, "d3456789")
@@ -20,7 +22,9 @@ class WidgetToolbarPreviousTest : QuoteUnquoteModelUtility() {
 
         assertEquals(
             0,
-            databaseRepositoryDouble.countCurrent(WidgetIdHelper.WIDGET_ID_01)
+            databaseRepositoryDouble.countCurrent(
+                WidgetIdHelper.WIDGET_ID_01
+            )
         )
     }
 
diff --git a/app/src/androidTest/java/com/github/jameshnsears/quoteunquote/WidgetToolbarRandomizationTest.kt b/app/src/androidTest/java/com/github/jameshnsears/quoteunquote/WidgetToolbarRandomizationTest.kt
old mode 100644
new mode 100755
index 993335f..27eb75a
--- a/app/src/androidTest/java/com/github/jameshnsears/quoteunquote/WidgetToolbarRandomizationTest.kt
+++ b/app/src/androidTest/java/com/github/jameshnsears/quoteunquote/WidgetToolbarRandomizationTest.kt
@@ -27,11 +27,14 @@ class WidgetToolbarRandomizationTest : QuoteUnquoteModelUtility() {
             Timber.plant(MethodLineLoggingTree())
         }
 
-        databaseRepositoryDouble.eraseEverything()
+        databaseRepositoryDouble.eraseAllDatabsaes()
         insertQuotationTestData01()
         insertQuotationTestData02()
         insertQuotationTestData03()
-        assertEquals(7, quoteUnquoteModelDouble.countAll().blockingGet())
+        assertEquals(
+            7,
+            quoteUnquoteModelDouble.countAll().blockingGet()
+        )
 
         assertEquals(
             0,
@@ -56,7 +59,8 @@ class WidgetToolbarRandomizationTest : QuoteUnquoteModelUtility() {
         assertNextOrder(expectedNextNextOrder)
 
         // use the Next quotations
-        for (i in 1..quoteUnquoteModelDouble.countAll().blockingGet()) {
+        for (i in 1..quoteUnquoteModelDouble.countAll()
+            .blockingGet()) {
             quoteUnquoteModelDouble.markAsCurrentNext(WidgetIdHelper.WIDGET_ID_01, false)
         }
 
@@ -78,12 +82,15 @@ class WidgetToolbarRandomizationTest : QuoteUnquoteModelUtility() {
     }
 
     private fun assertNextOrder(expectedAllQuotationsOrder: MutableList<String>) {
-        assertTrue(expectedAllQuotationsOrder == databaseRepositoryDouble.nextAllDigests)
+        assertTrue(
+            expectedAllQuotationsOrder == databaseRepositoryDouble.getNextAllDigests()
+        )
     }
 
     @Test
     fun traverseContentSelectionRandomly() {
-        for (i in 1..quoteUnquoteModelDouble.countAll().blockingGet()) {
+        for (i in 1..quoteUnquoteModelDouble.countAll()
+            .blockingGet()) {
             quoteUnquoteModelDouble.markAsCurrentNext(WidgetIdHelper.WIDGET_ID_01, true)
         }
 
diff --git a/app/src/androidTest/java/com/github/jameshnsears/quoteunquote/WidgetToolbarShareTest.kt b/app/src/androidTest/java/com/github/jameshnsears/quoteunquote/WidgetToolbarShareTest.kt
old mode 100644
new mode 100755
diff --git a/app/src/androidTest/java/com/github/jameshnsears/quoteunquote/cloud/CloudServiceTest.kt b/app/src/androidTest/java/com/github/jameshnsears/quoteunquote/cloud/CloudServiceTest.kt
deleted file mode 100644
index 4f11a05..0000000
--- a/app/src/androidTest/java/com/github/jameshnsears/quoteunquote/cloud/CloudServiceTest.kt
+++ /dev/null
@@ -1,15 +0,0 @@
-package com.github.jameshnsears.quoteunquote.cloud
-
-import org.junit.Test
-
-class CloudServiceTest {
-    @Test
-    fun cloudServiceBackupTest() {
-        // WIP: 13-transfer_backup_restore
-    }
-
-    @Test
-    fun cloudServiceRestoreTest() {
-        // WIP: 13-transfer_backup_restore
-    }
-}
diff --git a/app/src/androidTest/java/com/github/jameshnsears/quoteunquote/cloud/transfer/GsonTestHelper.kt b/app/src/androidTest/java/com/github/jameshnsears/quoteunquote/cloud/transfer/GsonTestHelper.kt
old mode 100644
new mode 100755
diff --git a/app/src/androidTest/java/com/github/jameshnsears/quoteunquote/cloud/transfer/backup/TransferBackupCurrentTest.kt b/app/src/androidTest/java/com/github/jameshnsears/quoteunquote/cloud/transfer/backup/TransferBackupCurrentTest.kt
old mode 100644
new mode 100755
index ccbf6d4..c284eb1
--- a/app/src/androidTest/java/com/github/jameshnsears/quoteunquote/cloud/transfer/backup/TransferBackupCurrentTest.kt
+++ b/app/src/androidTest/java/com/github/jameshnsears/quoteunquote/cloud/transfer/backup/TransferBackupCurrentTest.kt
@@ -1,18 +1,18 @@
 package com.github.jameshnsears.quoteunquote.cloud.transfer.backup
 
-import android.os.Build
 import com.github.jameshnsears.quoteunquote.cloud.transfer.Current
 import com.github.jameshnsears.quoteunquote.cloud.transfer.GsonTestHelper
 import com.github.jameshnsears.quoteunquote.cloud.transfer.TransferUtility
 import io.mockk.every
 import io.mockk.mockkObject
 import org.junit.Assert.assertEquals
+import org.junit.Assert.assertTrue
 import org.junit.Test
 
 class TransferBackupCurrentTest : GsonTestHelper() {
     @Test
     fun current() {
-        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.Q) {
+        if (canWorkWithMockk()) {
             insertQuotationTestData01()
             insertQuotationTestData02()
 
@@ -33,17 +33,34 @@ class TransferBackupCurrentTest : GsonTestHelper() {
         setDefaultQuotationAll(13)
     }
 
-    fun expectedCurrent(): List<Current> {
+    private fun expectedCurrent(): List<Current> {
         setupTestData()
 
         val currentList = mutableListOf<Current>()
         currentList.add(
-            Current("7a36e553", 12)
+            Current("7a36e553", 12, "internal")
         )
         currentList.add(
-            Current("7a36e553", 13)
+            Current("7a36e553", 13, "internal")
         )
 
         return currentList
     }
+
+    @Test
+    fun currentInternalAndExternal() {
+        populateInternal(14)
+        populateExternal(14)
+
+        mockkObject(TransferUtility)
+        every { TransferUtility.getWidgetIds(context) } returns intArrayOf(14)
+
+        val currentList = TransferBackupCurrent(context).current(databaseRepositoryDouble)
+
+        assertTrue(currentList.size == 2)
+        assertEquals(currentList[0].digest, "d1234567")
+        assertEquals(currentList[0].db, "internal")
+        assertEquals(currentList[1].digest, "00000000")
+        assertEquals(currentList[1].db, "external")
+    }
 }
diff --git a/app/src/androidTest/java/com/github/jameshnsears/quoteunquote/cloud/transfer/backup/TransferBackupFavouriteTest.kt b/app/src/androidTest/java/com/github/jameshnsears/quoteunquote/cloud/transfer/backup/TransferBackupFavouriteTest.kt
old mode 100644
new mode 100755
index 5dc2436..0dd6511
--- a/app/src/androidTest/java/com/github/jameshnsears/quoteunquote/cloud/transfer/backup/TransferBackupFavouriteTest.kt
+++ b/app/src/androidTest/java/com/github/jameshnsears/quoteunquote/cloud/transfer/backup/TransferBackupFavouriteTest.kt
@@ -7,20 +7,37 @@ import org.junit.Test
 
 class TransferBackupFavouriteTest : DatabaseTestHelper() {
     @Test
-    fun favourite() {
+    fun favouriteInternal() {
         insertQuotationTestData01()
         insertQuotationTestData02()
 
         setupTestData()
 
         val favouritesList = TransferBackupFavourite().favourite(databaseRepositoryDouble)
+
         assertTrue(favouritesList.size == 2)
         assertEquals(favouritesList[0].digest, "11111111")
+        assertEquals(favouritesList[0].db, "internal")
         assertEquals(favouritesList[1].digest, "00000000")
+        assertEquals(favouritesList[1].db, "internal")
     }
 
     fun setupTestData() {
         databaseRepositoryDouble.markAsFavourite("00000000")
         databaseRepositoryDouble.markAsFavourite("11111111")
     }
+
+    @Test
+    fun favouriteInternalAndExternal() {
+        populateInternal(10)
+        populateExternal(10)
+
+        val favouritesList = TransferBackupFavourite().favourite(databaseRepositoryDouble)
+
+        assertTrue(favouritesList.size == 2)
+        assertEquals(favouritesList[0].digest, "d1234567")
+        assertEquals(favouritesList[0].db, "internal")
+        assertEquals(favouritesList[1].digest, "00000000")
+        assertEquals(favouritesList[1].db, "external")
+    }
 }
diff --git a/app/src/androidTest/java/com/github/jameshnsears/quoteunquote/cloud/transfer/backup/TransferBackupPreviousTest.kt b/app/src/androidTest/java/com/github/jameshnsears/quoteunquote/cloud/transfer/backup/TransferBackupPreviousTest.kt
old mode 100644
new mode 100755
index ec686b6..ea0f5ea
--- a/app/src/androidTest/java/com/github/jameshnsears/quoteunquote/cloud/transfer/backup/TransferBackupPreviousTest.kt
+++ b/app/src/androidTest/java/com/github/jameshnsears/quoteunquote/cloud/transfer/backup/TransferBackupPreviousTest.kt
@@ -1,8 +1,10 @@
 package com.github.jameshnsears.quoteunquote.cloud.transfer.backup
 
-import android.os.Build
+import com.github.jameshnsears.quoteunquote.cloud.transfer.TransferUtility
 import com.github.jameshnsears.quoteunquote.database.DatabaseTestHelper
 import com.github.jameshnsears.quoteunquote.utils.ContentSelection
+import io.mockk.every
+import io.mockk.mockkObject
 import org.junit.Assert.assertEquals
 import org.junit.Assert.assertTrue
 import org.junit.Test
@@ -10,7 +12,7 @@ import org.junit.Test
 class TransferBackupPreviousTest : DatabaseTestHelper() {
     @Test
     fun previous() {
-        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.Q) {
+        if (canWorkWithMockk()) {
             insertQuotationTestData01()
             insertQuotationTestData02()
 
@@ -21,9 +23,11 @@ class TransferBackupPreviousTest : DatabaseTestHelper() {
             assertEquals(previousList[0].contentType, 4)
             assertEquals(previousList[0].digest, "d3456789")
             assertEquals(previousList[0].widgetId, 13)
+            assertEquals(previousList[0].db, "internal")
             assertEquals(previousList[1].contentType, 3)
             assertEquals(previousList[1].digest, "d1234567")
             assertEquals(previousList[1].widgetId, 12)
+            assertEquals(previousList[1].db, "internal")
         }
     }
 
@@ -33,4 +37,21 @@ class TransferBackupPreviousTest : DatabaseTestHelper() {
         databaseRepositoryDouble.markAsPrevious(12, ContentSelection.AUTHOR, "d1234567")
         databaseRepositoryDouble.markAsPrevious(13, ContentSelection.SEARCH, "d3456789")
     }
+
+    @Test
+    fun currentInternalAndExternal() {
+        populateInternal(14)
+        populateExternal(14)
+
+        mockkObject(TransferUtility)
+        every { TransferUtility.getWidgetIds(context) } returns intArrayOf(14)
+
+        val previousList = TransferBackupPrevious().previous(databaseRepositoryDouble)
+
+        assertTrue(previousList.size == 2)
+        assertEquals(previousList[0].digest, "d1234567")
+        assertEquals(previousList[0].db, "internal")
+        assertEquals(previousList[1].digest, "00000000")
+        assertEquals(previousList[1].db, "external")
+    }
 }
diff --git a/app/src/androidTest/java/com/github/jameshnsears/quoteunquote/cloud/transfer/backup/TransferBackupSettingsTest.kt b/app/src/androidTest/java/com/github/jameshnsears/quoteunquote/cloud/transfer/backup/TransferBackupSettingsTest.kt
old mode 100644
new mode 100755
index 2259898..3b8286a
--- a/app/src/androidTest/java/com/github/jameshnsears/quoteunquote/cloud/transfer/backup/TransferBackupSettingsTest.kt
+++ b/app/src/androidTest/java/com/github/jameshnsears/quoteunquote/cloud/transfer/backup/TransferBackupSettingsTest.kt
@@ -1,6 +1,5 @@
 package com.github.jameshnsears.quoteunquote.cloud.transfer.backup
 
-import android.os.Build
 import androidx.test.core.app.ApplicationProvider.getApplicationContext
 import com.github.jameshnsears.quoteunquote.cloud.transfer.Appearance
 import com.github.jameshnsears.quoteunquote.cloud.transfer.GsonTestHelper
@@ -55,7 +54,7 @@ class TransferBackupSettingsTest : GsonTestHelper() {
 
     @Test
     fun settings() {
-        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.Q) {
+        if (canWorkWithMockk()) {
             mockkObject(TransferUtility)
             every { TransferUtility.getWidgetIds(context) } returns intArrayOf(1)
 
@@ -123,7 +122,10 @@ class TransferBackupSettingsTest : GsonTestHelper() {
         "",
         false,
         false,
+        false,
         -1,
-        ""
+        "",
+        true,
+        false
     )
 }
diff --git a/app/src/androidTest/java/com/github/jameshnsears/quoteunquote/cloud/transfer/backup/TransferBackupTest.kt b/app/src/androidTest/java/com/github/jameshnsears/quoteunquote/cloud/transfer/backup/TransferBackupTest.kt
old mode 100644
new mode 100755
index fbbc02c..a7d1b71
--- a/app/src/androidTest/java/com/github/jameshnsears/quoteunquote/cloud/transfer/backup/TransferBackupTest.kt
+++ b/app/src/androidTest/java/com/github/jameshnsears/quoteunquote/cloud/transfer/backup/TransferBackupTest.kt
@@ -1,186 +1,70 @@
 package com.github.jameshnsears.quoteunquote.cloud.transfer.backup
 
-import android.os.Build
 import com.github.jameshnsears.quoteunquote.cloud.transfer.TransferUtility
 import com.github.jameshnsears.quoteunquote.database.DatabaseTestHelper
 import io.mockk.every
 import io.mockk.mockkObject
 import io.mockk.spyk
-import org.junit.Assert
+import org.junit.Assert.assertEquals
+import org.junit.Assert.assertNotNull
 import org.junit.Test
 
 class TransferBackupTest : DatabaseTestHelper() {
-    /*
-    {
-      "code": "012345672e",
-      "settings": [
-        {
-          "quotations": {
-            "CONTENT_ADD_TO_PREVIOUS_ALL": true,
-            "CONTENT_ALL": false,
-            "CONTENT_AUTHOR": false,
-            "CONTENT_AUTHOR_NAME": "",
-            "CONTENT_FAVOURITES": false,
-            "CONTENT_SEARCH": false,
-            "CONTENT_SEARCH_COUNT": -1,
-            "CONTENT_SEARCH_TEXT": ""
-          },
-          "appearance": {
-            "APPEARANCE_TRANSPARENCY": -1,
-            "APPEARANCE_COLOUR": "#FFF8FD89",
-            "APPEARANCE_TEXT_FAMILY": "Sans Serif",
-            "APPEARANCE_TEXT_STYLE": "Regular",
-            "APPEARANCE_TEXT_SIZE": 16,
-            "APPEARANCE_TEXT_COLOUR": "#FF000000",
-            "APPEARANCE_TOOLBAR_COLOUR": "",
-            "APPEARANCE_TOOLBAR_FIRST": false,
-            "APPEARANCE_TOOLBAR_PREVIOUS": true,
-            "APPEARANCE_TOOLBAR_FAVOURITE": true,
-            "APPEARANCE_TOOLBAR_SHARE": true,
-            "APPEARANCE_TOOLBAR_RANDOM": true,
-            "APPEARANCE_TOOLBAR_SEQUENTIAL": false
-          },
-          "schedule": {
-            "EVENT_NEXT_RANDOM": true,
-            "EVENT_NEXT_SEQUENTIAL": false,
-            "EVENT_DISPLAY_WIDGET": true,
-            "EVENT_DISPLAY_WIDGET_AND_NOTIFICATION": false,
-            "EVENT_DAILY": false,
-            "EVENT_DEVICE_UNLOCK": false,
-            "EVENT_DAILY_MINUTE": -1,
-            "EVENT_DAILY_HOUR": -1
-          },
-          "widget_id": 12
-        },
-        {
-          "quotations": {
-            "CONTENT_ADD_TO_PREVIOUS_ALL": true,
-            "CONTENT_ALL": false,
-            "CONTENT_AUTHOR": false,
-            "CONTENT_AUTHOR_NAME": "",
-            "CONTENT_FAVOURITES": false,
-            "CONTENT_SEARCH": false,
-            "CONTENT_SEARCH_COUNT": -1,
-            "CONTENT_SEARCH_TEXT": ""
-          },
-          "appearance": {
-            "APPEARANCE_TRANSPARENCY": -1,
-            "APPEARANCE_COLOUR": "#FFF8FD89",
-            "APPEARANCE_TEXT_FAMILY": "Sans Serif",
-            "APPEARANCE_TEXT_STYLE": "Regular",
-            "APPEARANCE_TEXT_SIZE": 16,
-            "APPEARANCE_TEXT_COLOUR": "#FF000000",
-            "APPEARANCE_TOOLBAR_COLOUR": "",
-            "APPEARANCE_TOOLBAR_FIRST": false,
-            "APPEARANCE_TOOLBAR_PREVIOUS": true,
-            "APPEARANCE_TOOLBAR_FAVOURITE": true,
-            "APPEARANCE_TOOLBAR_SHARE": true,
-            "APPEARANCE_TOOLBAR_RANDOM": true,
-            "APPEARANCE_TOOLBAR_SEQUENTIAL": false
-          },
-          "schedule": {
-            "EVENT_NEXT_RANDOM": true,
-            "EVENT_NEXT_SEQUENTIAL": false,
-            "EVENT_DISPLAY_WIDGET": true,
-            "EVENT_DISPLAY_WIDGET_AND_NOTIFICATION": false,
-            "EVENT_DAILY": false,
-            "EVENT_DEVICE_UNLOCK": false,
-            "EVENT_DAILY_MINUTE": -1,
-            "EVENT_DAILY_HOUR": -1
-          },
-          "widget_id": 13
-        }
-      ],
-      "current": [
-        {
-          "digest": "7a36e553",
-          "widget_id": 12
-        },
-        {
-          "digest": "7a36e553",
-          "widget_id": 13
-        }
-      ],
-      "previous": [
-        {
-          "content_type": 4,
-          "digest": "d3456789",
-          "navigation": 6,
-          "widget_id": 13
-        },
-        {
-          "content_type": 3,
-          "digest": "d1234567",
-          "navigation": 5,
-          "widget_id": 12
-        },
-        {
-          "content_type": 2,
-          "digest": "d2345678",
-          "navigation": 4,
-          "widget_id": 13
-        },
-        {
-          "content_type": 1,
-          "digest": "d4567890",
-          "navigation": 3,
-          "widget_id": 12
-        },
-        {
-          "content_type": 1,
-          "digest": "7a36e553",
-          "navigation": 2,
-          "widget_id": 13
-        },
-        {
-          "content_type": 1,
-          "digest": "7a36e553",
-          "navigation": 1,
-          "widget_id": 12
-        }
-      ],
-      "favourite": [
-        {
-          "digest": "d4567890",
-          "navigation": 2
-        },
-        {
-          "digest": "d2345678",
-          "navigation": 1
-        }
-      ]
-    }
-    */
-
     @Test
     fun transfer() {
-        val transferCurrentTest = TransferBackupCurrentTest()
-        val transferPreviousTest = TransferBackupPreviousTest()
-        val transferFavouriteTest = TransferBackupFavouriteTest()
-
-        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.Q) {
+        if (canWorkWithMockk()) {
             insertQuotationTestData01()
             insertQuotationTestData02()
 
-            val backupTransfer = spyk(TransferBackup(context))
-            val transferCode = "012345672e"
-            every { backupTransfer.getLocalCode() } returns transferCode
+            val (backupTransfer, transferCode) = getBackupTransfer()
 
             mockkObject(TransferUtility)
             every { TransferUtility.getWidgetIds(context) } returns intArrayOf(12, 13)
 
-            transferCurrentTest.setupTestData()
-            transferPreviousTest.setupTestData()
-            transferFavouriteTest.setupTestData()
+            TransferBackupCurrentTest().setupTestData()
+            TransferBackupPreviousTest().setupTestData()
+            TransferBackupFavouriteTest().setupTestData()
 
             val transfer = backupTransfer.transfer(databaseRepositoryDouble)
-            Assert.assertEquals(transfer.code, transferCode)
+            // val transferAsJson = GsonTestHelper().gson().toJson(transfer)
+
+            assertEquals(transfer.code, transferCode)
 
-            Assert.assertNotNull(transfer.settings)
-            Assert.assertEquals(transfer.settings.size, 2)
-            Assert.assertNotNull(transfer.current)
-            Assert.assertNotNull(transfer.previous)
-            Assert.assertNotNull(transfer.favourites)
+            assertNotNull(transfer.settings)
+            assertEquals(transfer.settings.size, 2)
+            assertNotNull(transfer.current)
+            assertNotNull(transfer.previous)
+            assertNotNull(transfer.favourites)
         }
     }
+
+    @Test
+    fun transferInternalAndExternal() {
+        if (canWorkWithMockk()) {
+            populateExternal(50)
+            populateInternal(50)
+
+            val (backupTransfer, transferCode) = getBackupTransfer()
+
+            mockkObject(TransferUtility)
+            every { TransferUtility.getWidgetIds(context) } returns intArrayOf(50)
+
+            val transfer = backupTransfer.transfer(databaseRepositoryDouble)
+//            val transferAsJson = GsonTestHelper().gson().toJson(transfer)
+
+            assertNotNull(transfer.settings)
+            assertEquals(transfer.settings.size, 1)
+            assertEquals(2, transfer.current.size)
+            assertEquals(2, transfer.previous.size)
+            assertEquals(2, transfer.favourites.size)
+        }
+    }
+
+    private fun getBackupTransfer(): Pair<TransferBackup, String> {
+        val backupTransfer = spyk(TransferBackup(context))
+        val transferCode = "012345672e"
+        every { backupTransfer.getLocalCode() } returns transferCode
+
+        return Pair(backupTransfer, transferCode)
+    }
 }
diff --git a/app/src/androidTest/java/com/github/jameshnsears/quoteunquote/cloud/transfer/restore/RestoreExternalTest.kt b/app/src/androidTest/java/com/github/jameshnsears/quoteunquote/cloud/transfer/restore/RestoreExternalTest.kt
new file mode 100755
index 0000000..d5ff0c2
--- /dev/null
+++ b/app/src/androidTest/java/com/github/jameshnsears/quoteunquote/cloud/transfer/restore/RestoreExternalTest.kt
@@ -0,0 +1,240 @@
+package com.github.jameshnsears.quoteunquote.cloud.transfer.restore
+
+import com.github.jameshnsears.quoteunquote.cloud.transfer.TransferUtility
+import com.github.jameshnsears.quoteunquote.cloud.transfer.backup.TransferBackup
+import io.mockk.every
+import io.mockk.mockkObject
+import org.junit.Assert.assertTrue
+import org.junit.Test
+
+class RestoreExternalTest : TransferRestoreUtility() {
+    @Test
+    fun restoreWhereExternalBeenPopulated() {
+        if (canWorkWithMockk()) {
+            // set up
+            mockkObject(TransferUtility)
+            every { TransferUtility.getWidgetIds(context) } returns intArrayOf(1)
+
+            createSharedPreferencesWithLocalCode(getLocalCode())
+
+            insertInternalQuotations()
+            insertExternalQuotations()
+
+            // restore
+            val restoreTransfer = getTransferAsset("restore_one_widget_with_external.json")
+            TransferRestore().restore(context, databaseRepositoryDouble, restoreTransfer)
+
+            // assert
+            val backupTransfer = TransferBackup(context).transfer(databaseRepositoryDouble)
+            val restoreJson = TransferRestore().asJson(restoreTransfer)
+
+//            val backupJson = TransferBackup(context).asJson(backupTransfer)
+            /*
+{
+  "code": "F9aT8HEW6d",
+  "current": [
+    {
+      "db": "internal",
+      "digest": "d1234567",
+      "widget_id": 1
+    },
+    {
+      "db": "external",
+      "digest": "00000000",
+      "widget_id": 1
+    }
+  ],
+  "favourite": [
+    {
+      "db": "internal",
+      "digest": "d5678901",
+      "navigation": 1
+    },
+    {
+      "db": "external",
+      "digest": "00000000",
+      "navigation": 1
+    }
+  ],
+  "previous": [
+    {
+      "content_type": 1,
+      "db": "internal",
+      "digest": "d1234567",
+      "navigation": 1,
+      "widget_id": 1
+    },
+    {
+      "content_type": 1,
+      "db": "external",
+      "digest": "00000000",
+      "navigation": 1,
+      "widget_id": 1
+    }
+  ],
+  "settings": [
+    {
+      "appearance": {
+        "APPEARANCE_AUTHOR_TEXT_COLOUR": "#FF000000",
+        "APPEARANCE_AUTHOR_TEXT_HIDE": false,
+        "APPEARANCE_AUTHOR_TEXT_SIZE": 16,
+        "APPEARANCE_COLOUR": "#FFFF1493",
+        "APPEARANCE_POSITION_TEXT_COLOUR": "#FF000000",
+        "APPEARANCE_POSITION_TEXT_HIDE": false,
+        "APPEARANCE_POSITION_TEXT_SIZE": 16,
+        "APPEARANCE_TEXT_COLOUR": "#FF0000FF",
+        "APPEARANCE_TEXT_FAMILY": "Monospace",
+        "APPEARANCE_TEXT_FORCE_ITALIC_REGULAR": true,
+        "APPEARANCE_TEXT_SIZE": 18,
+        "APPEARANCE_TEXT_STYLE": "Bold",
+        "APPEARANCE_TOOLBAR_COLOUR": "#FFFFFFFF",
+        "APPEARANCE_TOOLBAR_FAVOURITE": true,
+        "APPEARANCE_TOOLBAR_FIRST": true,
+        "APPEARANCE_REMOVE_SPACE_ABOVE_TOOLBAR": false,
+        "APPEARANCE_TOOLBAR_PREVIOUS": false,
+        "APPEARANCE_TOOLBAR_RANDOM": false,
+        "APPEARANCE_TOOLBAR_SEQUENTIAL": true,
+        "APPEARANCE_TOOLBAR_SHARE": false,
+        "APPEARANCE_TRANSPARENCY": 40
+      },
+      "quotations": {
+        "CONTENT_ADD_TO_PREVIOUS_ALL": true,
+        "CONTENT_ALL": true,
+        "CONTENT_AUTHOR": false,
+        "CONTENT_AUTHOR_NAME": "a0",
+        "CONTENT_FAVOURITES": false,
+        "CONTENT_SEARCH": false,
+        "CONTENT_SEARCH_COUNT": 0,
+        "CONTENT_SEARCH_FAVOURITES_ONLY": false,
+        "CONTENT_SEARCH_TEXT": "some search text",
+        "DATABASE_EXTERNAL": false,
+        "DATABASE_INTERNAL": true
+      },
+      "schedule": {
+        "EVENT_DAILY": true,
+        "EVENT_DAILY_HOUR": 7,
+        "EVENT_DAILY_MINUTE": 1,
+        "EVENT_DEVICE_UNLOCK": true,
+        "EVENT_DISPLAY_WIDGET_AND_NOTIFICATION": true,
+        "EVENT_DISPLAY_WIDGET": false,
+        "EVENT_NEXT_RANDOM": false,
+        "EVENT_NEXT_SEQUENTIAL": true
+      },
+      "widget_id": 1
+    }
+  ]
+}
+            */
+
+            assertTrue(backupTransfer.current.size == 2)
+            assertTrue(backupTransfer.favourites.size == 2)
+            assertTrue(backupTransfer.previous.size == 2)
+        }
+    }
+
+    @Test
+    fun restoreWhereExternalNotBeenPopulated() {
+        if (canWorkWithMockk()) {
+            // set up
+            mockkObject(TransferUtility)
+            every { TransferUtility.getWidgetIds(context) } returns intArrayOf(2)
+
+            createSharedPreferencesWithLocalCode(getLocalCode())
+
+            insertInternalQuotations()
+
+            // restore
+            val restoreTransfer = getTransferAsset("restore_one_widget_with_external.json")
+            TransferRestore().restore(context, databaseRepositoryDouble, restoreTransfer)
+
+            // assert
+            val backupTransfer = TransferBackup(context).transfer(databaseRepositoryDouble)
+            val restoreJson = TransferRestore().asJson(restoreTransfer)
+
+//            val backupJson = TransferBackup(context).asJson(backupTransfer)
+            /*
+{
+  "code": "F9aT8HEW6d",
+  "current": [
+    {
+      "db": "internal",
+      "digest": "d1234567",
+      "widget_id": 2
+    }
+  ],
+  "favourite": [
+    {
+      "db": "internal",
+      "digest": "d5678901",
+      "navigation": 2
+    }
+  ],
+  "previous": [
+    {
+      "content_type": 1,
+      "db": "internal",
+      "digest": "d1234567",
+      "navigation": 2,
+      "widget_id": 2
+    }
+  ],
+  "settings": [
+    {
+      "appearance": {
+        "APPEARANCE_AUTHOR_TEXT_COLOUR": "#FF000000",
+        "APPEARANCE_AUTHOR_TEXT_HIDE": false,
+        "APPEARANCE_AUTHOR_TEXT_SIZE": 16,
+        "APPEARANCE_COLOUR": "#FFFF1493",
+        "APPEARANCE_POSITION_TEXT_COLOUR": "#FF000000",
+        "APPEARANCE_POSITION_TEXT_HIDE": false,
+        "APPEARANCE_POSITION_TEXT_SIZE": 16,
+        "APPEARANCE_TEXT_COLOUR": "#FF0000FF",
+        "APPEARANCE_TEXT_FAMILY": "Monospace",
+        "APPEARANCE_TEXT_FORCE_ITALIC_REGULAR": true,
+        "APPEARANCE_TEXT_SIZE": 18,
+        "APPEARANCE_TEXT_STYLE": "Bold",
+        "APPEARANCE_TOOLBAR_COLOUR": "#FFFFFFFF",
+        "APPEARANCE_TOOLBAR_FAVOURITE": true,
+        "APPEARANCE_TOOLBAR_FIRST": true,
+        "APPEARANCE_REMOVE_SPACE_ABOVE_TOOLBAR": false,
+        "APPEARANCE_TOOLBAR_PREVIOUS": false,
+        "APPEARANCE_TOOLBAR_RANDOM": false,
+        "APPEARANCE_TOOLBAR_SEQUENTIAL": true,
+        "APPEARANCE_TOOLBAR_SHARE": false,
+        "APPEARANCE_TRANSPARENCY": 40
+      },
+      "quotations": {
+        "CONTENT_ADD_TO_PREVIOUS_ALL": true,
+        "CONTENT_ALL": true,
+        "CONTENT_AUTHOR": false,
+        "CONTENT_AUTHOR_NAME": "a0",
+        "CONTENT_FAVOURITES": false,
+        "CONTENT_SEARCH": false,
+        "CONTENT_SEARCH_COUNT": 0,
+        "CONTENT_SEARCH_FAVOURITES_ONLY": false,
+        "CONTENT_SEARCH_TEXT": "some search text",
+        "DATABASE_EXTERNAL": false,
+        "DATABASE_INTERNAL": true
+      },
+      "schedule": {
+        "EVENT_DAILY": true,
+        "EVENT_DAILY_HOUR": 7,
+        "EVENT_DAILY_MINUTE": 1,
+        "EVENT_DEVICE_UNLOCK": true,
+        "EVENT_DISPLAY_WIDGET_AND_NOTIFICATION": true,
+        "EVENT_DISPLAY_WIDGET": false,
+        "EVENT_NEXT_RANDOM": false,
+        "EVENT_NEXT_SEQUENTIAL": true
+      },
+      "widget_id": 2
+    }
+  ]
+}
+            */
+
+            assertTrue(backupTransfer.current.size == 1)
+            assertTrue(backupTransfer.favourites.size == 1)
+            assertTrue(backupTransfer.previous.size == 1)
+        }
+    }
+}
diff --git a/app/src/androidTest/java/com/github/jameshnsears/quoteunquote/cloud/transfer/restore/RestoreOneWidgetTest.kt b/app/src/androidTest/java/com/github/jameshnsears/quoteunquote/cloud/transfer/restore/RestoreOneWidgetTest.kt
old mode 100644
new mode 100755
index e87feda..26b5f5e
--- a/app/src/androidTest/java/com/github/jameshnsears/quoteunquote/cloud/transfer/restore/RestoreOneWidgetTest.kt
+++ b/app/src/androidTest/java/com/github/jameshnsears/quoteunquote/cloud/transfer/restore/RestoreOneWidgetTest.kt
@@ -1,15 +1,15 @@
 package com.github.jameshnsears.quoteunquote.cloud.transfer.restore
 
-import android.os.Build
 import com.github.jameshnsears.quoteunquote.cloud.transfer.backup.TransferBackup
 import org.junit.Assert.assertEquals
+import org.junit.Assert.assertNotEquals
 import org.junit.Assert.assertTrue
 import org.junit.Test
 
 class RestoreOneWidgetTest : TransferRestoreUtility() {
     @Test
     fun restoreOneIntoOne() {
-        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.Q) {
+        if (canWorkWithMockk()) {
             // set up
             setupWidgets(intArrayOf(1))
             markDefaultQuotationAsFavourite()
@@ -34,10 +34,16 @@ class RestoreOneWidgetTest : TransferRestoreUtility() {
                 restoreTransfer.settings[0].appearance,
                 backupTransfer.settings[0].appearance
             )
-            assertEquals(
+            // a restore from a version that had no internal/external database, into one that does
+            assertNotEquals(
                 restoreTransfer.settings[0].quotations,
                 backupTransfer.settings[0].quotations
             )
+            assertNotEquals(
+                restoreTransfer.settings[0].quotations.databaseInternal,
+                backupTransfer.settings[0].quotations.databaseInternal
+            )
+
             assertEquals(
                 restoreTransfer.settings[0].schedule,
                 backupTransfer.settings[0].schedule
@@ -47,7 +53,7 @@ class RestoreOneWidgetTest : TransferRestoreUtility() {
 
     @Test
     fun restoreOneIntoTwo() {
-        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.Q) {
+        if (canWorkWithMockk()) {
             // set up
             setupWidgets(intArrayOf(1, 2))
 
@@ -75,10 +81,14 @@ class RestoreOneWidgetTest : TransferRestoreUtility() {
                 backupTransfer.settings[1].appearance
             )
 
-            assertEquals(
+            assertNotEquals(
                 restoreTransfer.settings[0].quotations,
                 backupTransfer.settings[0].quotations
             )
+            assertNotEquals(
+                restoreTransfer.settings[0].quotations.databaseInternal,
+                backupTransfer.settings[0].quotations.databaseInternal
+            )
             assertEquals(
                 backupTransfer.settings[0].quotations,
                 backupTransfer.settings[1].quotations
diff --git a/app/src/androidTest/java/com/github/jameshnsears/quoteunquote/cloud/transfer/restore/RestoreTwoWidgetsTest.kt b/app/src/androidTest/java/com/github/jameshnsears/quoteunquote/cloud/transfer/restore/RestoreTwoWidgetsTest.kt
old mode 100644
new mode 100755
index c3f6fb8..d371471
--- a/app/src/androidTest/java/com/github/jameshnsears/quoteunquote/cloud/transfer/restore/RestoreTwoWidgetsTest.kt
+++ b/app/src/androidTest/java/com/github/jameshnsears/quoteunquote/cloud/transfer/restore/RestoreTwoWidgetsTest.kt
@@ -1,6 +1,5 @@
 package com.github.jameshnsears.quoteunquote.cloud.transfer.restore
 
-import android.os.Build
 import com.github.jameshnsears.quoteunquote.cloud.transfer.Transfer
 import com.github.jameshnsears.quoteunquote.cloud.transfer.TransferUtility
 import com.github.jameshnsears.quoteunquote.cloud.transfer.backup.TransferBackup
@@ -13,7 +12,7 @@ import org.junit.Test
 class RestoreTwoWidgetsTest : TransferRestoreUtility() {
     @Test
     fun restoreTwoWithFavouritesIntoOne() {
-        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.Q) {
+        if (canWorkWithMockk()) {
             // set up
             setupWidgets(intArrayOf(1))
 
@@ -23,8 +22,8 @@ class RestoreTwoWidgetsTest : TransferRestoreUtility() {
 
             // assert
             val backupTransfer = TransferBackup(context).transfer(databaseRepositoryDouble)
-            val restoreJson = TransferRestore().asJson(restoreTransfer)
-            val backupJson = TransferBackup(context).asJson(backupTransfer)
+//            val restoreJson = TransferRestore().asJson(restoreTransfer)
+//            val backupJson = TransferBackup(context).asJson(backupTransfer)
 
             Assert.assertEquals(getLocalCode(), backupTransfer.code)
 
@@ -37,10 +36,16 @@ class RestoreTwoWidgetsTest : TransferRestoreUtility() {
                 restoreTransfer.settings[0].appearance,
                 backupTransfer.settings[0].appearance
             )
-            Assert.assertEquals(
+
+            Assert.assertNotEquals(
                 restoreTransfer.settings[0].quotations,
                 backupTransfer.settings[0].quotations
             )
+            Assert.assertNotEquals(
+                restoreTransfer.settings[0].quotations.databaseInternal,
+                backupTransfer.settings[0].quotations.databaseInternal
+            )
+
             Assert.assertEquals(
                 restoreTransfer.settings[0].schedule,
                 backupTransfer.settings[0].schedule
@@ -50,7 +55,7 @@ class RestoreTwoWidgetsTest : TransferRestoreUtility() {
 
     @Test
     fun restoreTwoWithFavouritesIntoTwo() {
-        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.Q) {
+        if (canWorkWithMockk()) {
             // set up
             setupWidgets(intArrayOf(1, 2))
 
@@ -74,10 +79,16 @@ class RestoreTwoWidgetsTest : TransferRestoreUtility() {
                 restoreTransfer.settings[0].appearance,
                 backupTransfer.settings[0].appearance
             )
-            Assert.assertEquals(
+
+            Assert.assertNotEquals(
                 restoreTransfer.settings[0].quotations,
                 backupTransfer.settings[0].quotations
             )
+            Assert.assertNotEquals(
+                restoreTransfer.settings[0].quotations.databaseInternal,
+                backupTransfer.settings[0].quotations.databaseInternal
+            )
+
             Assert.assertEquals(
                 restoreTransfer.settings[0].schedule,
                 backupTransfer.settings[0].schedule
@@ -87,10 +98,7 @@ class RestoreTwoWidgetsTest : TransferRestoreUtility() {
                 restoreTransfer.settings[1].appearance,
                 backupTransfer.settings[1].appearance
             )
-            Assert.assertEquals(
-                restoreTransfer.settings[1].quotations,
-                backupTransfer.settings[1].quotations
-            )
+
             Assert.assertEquals(
                 restoreTransfer.settings[1].schedule,
                 backupTransfer.settings[1].schedule
@@ -101,7 +109,7 @@ class RestoreTwoWidgetsTest : TransferRestoreUtility() {
     @Test
     fun restoreTwoIntoOne() {
         // defect raised by user!
-        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.Q) {
+        if (canWorkWithMockk()) {
             // set up
             val restoreTransfer = getTransferAsset("restore_order_test.json")
             setUp(restoreTransfer)
@@ -159,6 +167,8 @@ class RestoreTwoWidgetsTest : TransferRestoreUtility() {
                 )
             )
         }
-        databaseRepositoryDouble.insertQuotations(quotationEntityList.distinct())
+        databaseRepositoryDouble.insertQuotations(
+            quotationEntityList.distinct()
+        )
     }
 }
diff --git a/app/src/androidTest/java/com/github/jameshnsears/quoteunquote/cloud/transfer/restore/TransferRestoreUtility.kt b/app/src/androidTest/java/com/github/jameshnsears/quoteunquote/cloud/transfer/restore/TransferRestoreUtility.kt
old mode 100644
new mode 100755
diff --git a/app/src/androidTest/java/com/github/jameshnsears/quoteunquote/configure/ConfigureActivityDoubleExpressoTest.kt b/app/src/androidTest/java/com/github/jameshnsears/quoteunquote/configure/ConfigureActivityDoubleExpressoTest.kt
deleted file mode 100644
index 3abc28d..0000000
--- a/app/src/androidTest/java/com/github/jameshnsears/quoteunquote/configure/ConfigureActivityDoubleExpressoTest.kt
+++ /dev/null
@@ -1,71 +0,0 @@
-package com.github.jameshnsears.quoteunquote.configure
-
-import android.view.View
-import android.view.ViewGroup
-import androidx.test.espresso.Espresso.onView
-import androidx.test.espresso.action.ViewActions.click
-import androidx.test.espresso.matcher.ViewMatchers.isDisplayed
-import androidx.test.espresso.matcher.ViewMatchers.withContentDescription
-import androidx.test.espresso.matcher.ViewMatchers.withId
-import androidx.test.ext.junit.rules.ActivityScenarioRule
-import androidx.test.ext.junit.runners.AndroidJUnit4
-import androidx.test.filters.LargeTest
-import com.github.jameshnsears.quoteunquote.R
-import org.hamcrest.Description
-import org.hamcrest.Matcher
-import org.hamcrest.Matchers.allOf
-import org.hamcrest.TypeSafeMatcher
-import org.junit.Rule
-import org.junit.Test
-import org.junit.runner.RunWith
-
-@LargeTest
-@RunWith(AndroidJUnit4::class)
-class ConfigureActivityDoubleExpressoTest {
-
-    @Rule
-    @JvmField
-    var mActivityScenarioRule = ActivityScenarioRule(ConfigureActivityDouble::class.java)
-
-    @Test
-    fun pressSync() {
-        // Added a sleep statement to match the app's execution delay.
-        // The recommended way to handle such scenarios is to use Espresso idling resources:
-        // https://google.github.io/android-testing-support-library/docs/espresso/idling-resource/index.html
-        Thread.sleep(7000)
-
-        val bottomNavigationItemView = onView(
-            allOf(
-                withId(R.id.navigationBarSync),
-                withContentDescription("Sync"),
-                childAtPosition(
-                    childAtPosition(
-                        withId(R.id.configureNavigation),
-                        0
-                    ),
-                    3
-                ),
-                isDisplayed()
-            )
-        )
-        bottomNavigationItemView.perform(click())
-    }
-
-    private fun childAtPosition(
-        parentMatcher: Matcher<View>,
-        position: Int
-    ): Matcher<View> {
-        return object : TypeSafeMatcher<View>() {
-            override fun describeTo(description: Description) {
-                description.appendText("Child at position $position in parent ")
-                parentMatcher.describeTo(description)
-            }
-
-            public override fun matchesSafely(view: View): Boolean {
-                val parent = view.parent
-                return parent is ViewGroup && parentMatcher.matches(parent) &&
-                    view == parent.getChildAt(position)
-            }
-        }
-    }
-}
diff --git a/app/src/androidTest/java/com/github/jameshnsears/quoteunquote/configure/fragment/appearance/AppearanceTextFamilySpinnerAdapterTest.kt b/app/src/androidTest/java/com/github/jameshnsears/quoteunquote/configure/fragment/appearance/tabs/style/AppearanceTextFamilySpinnerAdapterTest.kt
old mode 100644
new mode 100755
similarity index 69%
rename from app/src/androidTest/java/com/github/jameshnsears/quoteunquote/configure/fragment/appearance/AppearanceTextFamilySpinnerAdapterTest.kt
rename to app/src/androidTest/java/com/github/jameshnsears/quoteunquote/configure/fragment/appearance/tabs/style/AppearanceTextFamilySpinnerAdapterTest.kt
index a399e93..c4bd715
--- a/app/src/androidTest/java/com/github/jameshnsears/quoteunquote/configure/fragment/appearance/AppearanceTextFamilySpinnerAdapterTest.kt
+++ b/app/src/androidTest/java/com/github/jameshnsears/quoteunquote/configure/fragment/appearance/tabs/style/AppearanceTextFamilySpinnerAdapterTest.kt
@@ -1,7 +1,6 @@
-package com.github.jameshnsears.quoteunquote.configure.fragment.appearance
+package com.github.jameshnsears.quoteunquote.configure.fragment.appearance.tabs.style
 
 import androidx.test.core.app.ApplicationProvider.getApplicationContext
-import com.github.jameshnsears.quoteunquote.configure.fragment.appearance.tabs.style.AppearanceTextFamilySpinnerAdapter
 import org.junit.Assert.assertEquals
 import org.junit.Test
 
@@ -11,8 +10,6 @@ class AppearanceTextFamilySpinnerAdapterTest {
         val appearanceFontSpinnerAdapter =
             AppearanceTextFamilySpinnerAdapter(getApplicationContext())
 
-        // https://www.cs.cmu.edu/~jbigham/pubs/pdfs/2017/colors.pdf
-
         assertEquals(6, appearanceFontSpinnerAdapter.count)
     }
 }
diff --git a/app/src/androidTest/java/com/github/jameshnsears/quoteunquote/configure/fragment/appearance/AppearanceTextStyleSpinnerAdapterTest.kt b/app/src/androidTest/java/com/github/jameshnsears/quoteunquote/configure/fragment/appearance/tabs/style/AppearanceTextStyleSpinnerAdapterTest.kt
old mode 100644
new mode 100755
similarity index 78%
rename from app/src/androidTest/java/com/github/jameshnsears/quoteunquote/configure/fragment/appearance/AppearanceTextStyleSpinnerAdapterTest.kt
rename to app/src/androidTest/java/com/github/jameshnsears/quoteunquote/configure/fragment/appearance/tabs/style/AppearanceTextStyleSpinnerAdapterTest.kt
index 27c6850..417fd68
--- a/app/src/androidTest/java/com/github/jameshnsears/quoteunquote/configure/fragment/appearance/AppearanceTextStyleSpinnerAdapterTest.kt
+++ b/app/src/androidTest/java/com/github/jameshnsears/quoteunquote/configure/fragment/appearance/tabs/style/AppearanceTextStyleSpinnerAdapterTest.kt
@@ -1,7 +1,6 @@
-package com.github.jameshnsears.quoteunquote.configure.fragment.appearance
+package com.github.jameshnsears.quoteunquote.configure.fragment.appearance.tabs.style
 
 import androidx.test.core.app.ApplicationProvider.getApplicationContext
-import com.github.jameshnsears.quoteunquote.configure.fragment.appearance.tabs.style.AppearanceTextStyleSpinnerAdapter
 import org.junit.Assert.assertEquals
 import org.junit.Test
 
diff --git a/app/src/androidTest/java/com/github/jameshnsears/quoteunquote/configure/fragment/quotations/AddReadResultToPreviousAllTest.kt b/app/src/androidTest/java/com/github/jameshnsears/quoteunquote/configure/fragment/quotations/tabs/selection/AddReadResultToPreviousAllTest.kt
old mode 100644
new mode 100755
similarity index 92%
rename from app/src/androidTest/java/com/github/jameshnsears/quoteunquote/configure/fragment/quotations/AddReadResultToPreviousAllTest.kt
rename to app/src/androidTest/java/com/github/jameshnsears/quoteunquote/configure/fragment/quotations/tabs/selection/AddReadResultToPreviousAllTest.kt
index 1fdbd04..badae42
--- a/app/src/androidTest/java/com/github/jameshnsears/quoteunquote/configure/fragment/quotations/AddReadResultToPreviousAllTest.kt
+++ b/app/src/androidTest/java/com/github/jameshnsears/quoteunquote/configure/fragment/quotations/tabs/selection/AddReadResultToPreviousAllTest.kt
@@ -1,6 +1,8 @@
-package com.github.jameshnsears.quoteunquote.configure.fragment.quotations
+package com.github.jameshnsears.quoteunquote.configure.fragment.quotations.tabs.selection
 
 import com.github.jameshnsears.quoteunquote.QuoteUnquoteModelUtility
+import com.github.jameshnsears.quoteunquote.configure.fragment.quotations.QuotationsPreferences
+import com.github.jameshnsears.quoteunquote.database.DatabaseRepositoryDouble
 import com.github.jameshnsears.quoteunquote.utils.ContentSelection
 import com.github.jameshnsears.quoteunquote.utils.widget.WidgetIdHelper
 import junit.framework.TestCase
@@ -9,6 +11,8 @@ import org.junit.Test
 class AddReadResultToPreviousAllTest : QuoteUnquoteModelUtility() {
     @Test
     fun doNotAddResultToPreviousAll() {
+        DatabaseRepositoryDouble.useInternalDatabase = true
+
         setupAuthorWithAddToPreviousAll(false)
 
         setupSearchWithAddToPreviousAll(false)
@@ -29,6 +33,8 @@ class AddReadResultToPreviousAllTest : QuoteUnquoteModelUtility() {
 
     @Test
     fun addResultToPreviousAll() {
+        DatabaseRepositoryDouble.useInternalDatabase = true
+
         setupAuthorWithAddToPreviousAll(true)
 
         TestCase.assertEquals(
diff --git a/app/src/androidTest/java/com/github/jameshnsears/quoteunquote/configure/fragment/sync/SyncJsonSchemaValidationTest.kt b/app/src/androidTest/java/com/github/jameshnsears/quoteunquote/configure/fragment/sync/SyncJsonSchemaValidationTest.kt
old mode 100644
new mode 100755
diff --git a/app/src/androidTest/java/com/github/jameshnsears/quoteunquote/database/DatabaseRepositoryDouble.java b/app/src/androidTest/java/com/github/jameshnsears/quoteunquote/database/DatabaseRepositoryDouble.java
old mode 100644
new mode 100755
index d182925..d9f75b7
--- a/app/src/androidTest/java/com/github/jameshnsears/quoteunquote/database/DatabaseRepositoryDouble.java
+++ b/app/src/androidTest/java/com/github/jameshnsears/quoteunquote/database/DatabaseRepositoryDouble.java
@@ -1,12 +1,16 @@
 package com.github.jameshnsears.quoteunquote.database;
 
+import android.content.Context;
+
 import androidx.annotation.NonNull;
 import androidx.room.Room;
 import androidx.test.core.app.ApplicationProvider;
 
 import com.github.jameshnsears.quoteunquote.database.history.AbstractHistoryDatabase;
+import com.github.jameshnsears.quoteunquote.database.history.external.AbstractHistoryExternalDatabase;
 import com.github.jameshnsears.quoteunquote.database.quotation.AbstractQuotationDatabase;
 import com.github.jameshnsears.quoteunquote.database.quotation.QuotationEntity;
+import com.github.jameshnsears.quoteunquote.database.quotation.external.AbstractQuotationExternalDatabase;
 
 import java.util.List;
 
@@ -14,27 +18,56 @@ public final class DatabaseRepositoryDouble extends DatabaseRepository {
     private static DatabaseRepositoryDouble databaseRepositoryDouble;
 
     private DatabaseRepositoryDouble() {
-        abstractQuotationDatabase = Room.inMemoryDatabaseBuilder(
-                ApplicationProvider.getApplicationContext(),
-                AbstractQuotationDatabase.class)
+        createQuotationsDatabaseInternal();
+        createHistoryDatabaseInternal();
+
+        createQuotationsDatabaseExternal();
+        createHistoryDatabaseExternal();
+    }
+
+    private void createHistoryDatabaseExternal() {
+        abstractHistoryExternalDatabase = Room.inMemoryDatabaseBuilder(
+                        ApplicationProvider.getApplicationContext(),
+                        AbstractHistoryExternalDatabase.class)
                 .allowMainThreadQueries()
                 .build();
+        previousExternalDAO = abstractHistoryExternalDatabase.previousExternalDAO();
+        favouriteExternalDAO = abstractHistoryExternalDatabase.favouritesExternalDAO();
+        reportedExternalDAO = abstractHistoryExternalDatabase.reportedExternalDAO();
+        currentExternalDAO = abstractHistoryExternalDatabase.currentExternalDAO();
+    }
 
-        quotationDAO = abstractQuotationDatabase.quotationsDAO();
-
+    private void createHistoryDatabaseInternal() {
         abstractHistoryDatabase = Room.inMemoryDatabaseBuilder(
-                ApplicationProvider.getApplicationContext(),
-                AbstractHistoryDatabase.class)
+                        ApplicationProvider.getApplicationContext(),
+                        AbstractHistoryDatabase.class)
                 .allowMainThreadQueries()
                 .build();
-
         previousDAO = abstractHistoryDatabase.previousDAO();
         favouriteDAO = abstractHistoryDatabase.favouritesDAO();
         reportedDAO = abstractHistoryDatabase.reportedDAO();
         currentDAO = abstractHistoryDatabase.currentDAO();
     }
 
-    public static synchronized DatabaseRepositoryDouble getInstance() {
+    private void createQuotationsDatabaseExternal() {
+        abstractQuotationExternalDatabase = Room.inMemoryDatabaseBuilder(
+                        ApplicationProvider.getApplicationContext(),
+                        AbstractQuotationExternalDatabase.class)
+                .allowMainThreadQueries()
+                .build();
+        quotationExternalDAO = abstractQuotationExternalDatabase.quotationExternalDAO();
+    }
+
+    private void createQuotationsDatabaseInternal() {
+        abstractQuotationDatabase = Room.inMemoryDatabaseBuilder(
+                        ApplicationProvider.getApplicationContext(),
+                        AbstractQuotationDatabase.class)
+                .allowMainThreadQueries()
+                .build();
+        quotationDAO = abstractQuotationDatabase.quotationDAO();
+    }
+
+    public static synchronized DatabaseRepositoryDouble getInstance(@NonNull Context context) {
         if (databaseRepositoryDouble == null) {
             databaseRepositoryDouble = new DatabaseRepositoryDouble();
         }
@@ -42,26 +75,45 @@ public final class DatabaseRepositoryDouble extends DatabaseRepository {
         return databaseRepositoryDouble;
     }
 
-    public void eraseEverything() {
-        databaseRepositoryDouble.abstractQuotationDatabase.quotationsDAO().erase();
-        super.erase();
+    public void eraseAllDatabsaes() {
+        databaseRepositoryDouble.abstractQuotationDatabase.quotationDAO().erase();
+        previousDAO.erase();
+        currentDAO.erase();
+        favouriteDAO.erase();
+        reportedDAO.erase();
+
+        databaseRepositoryDouble.abstractQuotationExternalDatabase.quotationExternalDAO().erase();
+        previousExternalDAO.erase();
+        currentExternalDAO.erase();
+        favouriteExternalDAO.erase();
+        reportedExternalDAO.erase();
     }
 
-    public void insertQuotations(@NonNull final List<QuotationEntity> quotationEntityList) {
-        for (final QuotationEntity quotationEntity : quotationEntityList) {
-            quotationDAO.insertQuotation(quotationEntity);
+    public int countCurrent(int widgetId) {
+        if (useInternalDatabase) {
+            return currentDAO.countCurrent(widgetId);
+        } else {
+            return currentExternalDAO.countCurrent(widgetId);
         }
     }
 
-    public int countReported() {
-        return reportedDAO.countReported();
+    public List<String> getNextAllDigests() {
+        if (useInternalDatabase) {
+            return quotationDAO.getNextAllDigests();
+        } else {
+            return quotationExternalDAO.getNextAllDigests();
+        }
     }
 
-    public int countCurrent(final int widgetId) {
-        return currentDAO.countCurrent(widgetId);
-    }
+    public void insertQuotations(
+            @NonNull final List<QuotationEntity> quotationEntityList) {
+        for (final QuotationEntity quotationEntity : quotationEntityList) {
 
-    public List<String> getNextAllDigests() {
-        return quotationDAO.getNextAllDigests();
+            if (useInternalDatabase) {
+                quotationDAO.insertQuotation(quotationEntity);
+            } else {
+                quotationExternalDAO.insertQuotation(quotationEntity);
+            }
+        }
     }
 }
diff --git a/app/src/androidTest/java/com/github/jameshnsears/quoteunquote/database/DatabaseSelectionTest.kt b/app/src/androidTest/java/com/github/jameshnsears/quoteunquote/database/DatabaseSelectionTest.kt
new file mode 100755
index 0000000..98de45d
--- /dev/null
+++ b/app/src/androidTest/java/com/github/jameshnsears/quoteunquote/database/DatabaseSelectionTest.kt
@@ -0,0 +1,48 @@
+package com.github.jameshnsears.quoteunquote.database
+
+import com.github.jameshnsears.quoteunquote.QuoteUnquoteModelUtility
+import com.github.jameshnsears.quoteunquote.utils.widget.WidgetIdHelper
+import org.junit.Assert.assertEquals
+import org.junit.Test
+
+class DatabaseSelectionTest : QuoteUnquoteModelUtility() {
+    @Test
+    fun insertInternal() {
+        DatabaseRepository.useInternalDatabase = true
+
+        insertQuotationTestData01()
+        insertQuotationTestData02()
+        insertQuotationTestData03()
+
+        quoteUnquoteModelDouble.toggleFavourite(
+            WidgetIdHelper.WIDGET_ID_01,
+            DatabaseRepository.getDefaultQuotationDigest()
+        )
+
+        assertEquals(
+            7,
+            databaseRepositoryDouble.countAll().blockingGet()
+        )
+        assertEquals(
+            5,
+            databaseRepositoryDouble.authorsAndQuotationCounts.blockingGet().size
+        )
+    }
+
+    @Test
+    fun insertExternal() {
+        DatabaseRepository.useInternalDatabase = false
+
+        insertQuotationTestData01()
+        insertQuotationTestData02()
+
+        assertEquals(
+            5,
+            databaseRepositoryDouble.countAll().blockingGet()
+        )
+        assertEquals(
+            4,
+            databaseRepositoryDouble.authorsAndQuotationCounts.blockingGet().size
+        )
+    }
+}
diff --git a/app/src/androidTest/java/com/github/jameshnsears/quoteunquote/database/DatabaseTestHelper.kt b/app/src/androidTest/java/com/github/jameshnsears/quoteunquote/database/DatabaseTestHelper.kt
old mode 100644
new mode 100755
index 3c79d28..9d82e77
--- a/app/src/androidTest/java/com/github/jameshnsears/quoteunquote/database/DatabaseTestHelper.kt
+++ b/app/src/androidTest/java/com/github/jameshnsears/quoteunquote/database/DatabaseTestHelper.kt
@@ -1,24 +1,28 @@
 package com.github.jameshnsears.quoteunquote.database
 
 import android.content.Context
+import android.os.Build
 import androidx.annotation.NonNull
 import androidx.test.core.app.ApplicationProvider
 import com.github.jameshnsears.quoteunquote.database.quotation.QuotationEntity
 import com.github.jameshnsears.quoteunquote.utils.ContentSelection
 import com.github.jameshnsears.quoteunquote.utils.preference.PreferencesFacade
-import org.junit.After
+import junit.framework.TestCase.assertTrue
+import org.junit.Before
 
 abstract class DatabaseTestHelper {
     @NonNull
-    var databaseRepositoryDouble: DatabaseRepositoryDouble = DatabaseRepositoryDouble.getInstance()
+    var databaseRepositoryDouble: DatabaseRepositoryDouble =
+        DatabaseRepositoryDouble.getInstance(ApplicationProvider.getApplicationContext())
 
     @JvmField
     val context: Context = ApplicationProvider.getApplicationContext()
 
-    @After
-    fun after() {
-        databaseRepositoryDouble.eraseEverything()
+    @Before
+    fun before() {
+        databaseRepositoryDouble.eraseAllDatabsaes()
         PreferencesFacade.erase(context)
+        DatabaseRepository.useInternalDatabase = true
     }
 
     fun insertQuotationTestData01() {
@@ -86,4 +90,82 @@ abstract class DatabaseTestHelper {
     fun getDefaultQuotation(): QuotationEntity {
         return databaseRepositoryDouble.getQuotation(DatabaseRepository.getDefaultQuotationDigest())
     }
+
+    fun populateInternal(widgetId: Int) {
+        DatabaseRepositoryDouble.useInternalDatabase = true
+
+        insertInternalQuotations()
+
+        databaseRepositoryDouble.markAsCurrent(
+            widgetId,
+            "d1234567"
+        )
+
+        databaseRepositoryDouble.markAsPrevious(
+            widgetId,
+            ContentSelection.ALL,
+            "d1234567"
+        )
+
+        databaseRepositoryDouble.markAsFavourite(
+            databaseRepositoryDouble.getCurrentQuotation(widgetId).digest
+        )
+
+        assertTrue(databaseRepositoryDouble.countAll().blockingGet() == 5)
+    }
+
+    fun insertInternalQuotations() {
+        DatabaseRepositoryDouble.useInternalDatabase = true
+
+        insertQuotationTestData01()
+        insertQuotationTestData02()
+    }
+
+    fun populateExternal(widgetId: Int) {
+        DatabaseRepositoryDouble.useInternalDatabase = false
+
+        insertExternalQuotations()
+
+        databaseRepositoryDouble.markAsCurrent(
+            widgetId,
+            DatabaseRepositoryDouble.getDefaultQuotationDigest()
+        )
+
+        databaseRepositoryDouble.markAsPrevious(
+            widgetId,
+            ContentSelection.ALL,
+            DatabaseRepositoryDouble.getDefaultQuotationDigest()
+        )
+
+        databaseRepositoryDouble.markAsFavourite(
+            databaseRepositoryDouble.getCurrentQuotation(widgetId).digest
+        )
+
+        assertTrue(databaseRepositoryDouble.countAll().blockingGet() == 2)
+    }
+
+    fun insertExternalQuotations() {
+        DatabaseRepositoryDouble.useInternalDatabase = false
+
+        val quotationEntityList: MutableList<QuotationEntity> = ArrayList()
+        quotationEntityList.add(
+            QuotationEntity(
+                DatabaseRepository.getDefaultQuotationDigest(),
+                "",
+                "external_a0",
+                "external_q0"
+            )
+        )
+        quotationEntityList.add(
+            QuotationEntity(
+                "00000001",
+                "",
+                "external_a1",
+                "external_q1"
+            )
+        )
+        databaseRepositoryDouble.insertQuotations(quotationEntityList)
+    }
+
+    protected fun canWorkWithMockk() = Build.VERSION.SDK_INT >= Build.VERSION_CODES.Q
 }
diff --git a/app/src/androidTest/java/com/github/jameshnsears/quoteunquote/database/QuotationPositionTest.kt b/app/src/androidTest/java/com/github/jameshnsears/quoteunquote/database/QuotationPositionTest.kt
old mode 100644
new mode 100755
diff --git a/app/src/androidTest/java/com/github/jameshnsears/quoteunquote/database/history/AbstractHistoryDatabaseMigrationTest.kt b/app/src/androidTest/java/com/github/jameshnsears/quoteunquote/database/history/AbstractHistoryDatabaseMigrationTest.kt
deleted file mode 100644
index e669a60..0000000
--- a/app/src/androidTest/java/com/github/jameshnsears/quoteunquote/database/history/AbstractHistoryDatabaseMigrationTest.kt
+++ /dev/null
@@ -1,55 +0,0 @@
-package com.github.jameshnsears.quoteunquote.database.history
-
-import android.content.ContentValues
-import android.database.sqlite.SQLiteDatabase
-import androidx.room.testing.MigrationTestHelper
-import androidx.sqlite.db.framework.FrameworkSQLiteOpenHelperFactory
-import androidx.test.core.app.ApplicationProvider.getApplicationContext
-import androidx.test.ext.junit.runners.AndroidJUnit4
-import androidx.test.platform.app.InstrumentationRegistry
-import com.github.jameshnsears.quoteunquote.database.DatabaseRepository
-import com.github.jameshnsears.quoteunquote.utils.ContentSelection
-import org.junit.Assert.assertEquals
-import org.junit.Rule
-import org.junit.Test
-import org.junit.runner.RunWith
-import java.io.IOException
-
-@RunWith(AndroidJUnit4::class)
-class AbstractHistoryDatabaseMigrationTest {
-    @Rule
-    @JvmField
-    val helper: MigrationTestHelper = MigrationTestHelper(
-        InstrumentationRegistry.getInstrumentation(),
-        AbstractHistoryDatabase::class.java.canonicalName,
-        FrameworkSQLiteOpenHelperFactory()
-    )
-
-    @Test
-    @Throws(IOException::class)
-    fun migrate1To2() {
-        val db = helper.createDatabase(
-            AbstractHistoryDatabase.DATABASE_NAME,
-            1
-        )
-
-        val values = ContentValues()
-        values.put("widget_id", 1)
-        values.put("content_type", ContentSelection.ALL.contentSelection)
-        values.put("digest", "d")
-        db.insert("previous", SQLiteDatabase.CONFLICT_REPLACE, values)
-
-        db.close()
-
-        helper.runMigrationsAndValidate(
-            AbstractHistoryDatabase.DATABASE_NAME,
-            2,
-            true,
-            AbstractHistoryDatabase.MIGRATION_1_2
-        )
-
-        // the migration keeps `previous`
-        val databaseRepository = DatabaseRepository.getInstance(getApplicationContext())
-        assertEquals(1, databaseRepository.countPrevious(1, ContentSelection.ALL))
-    }
-}
diff --git a/app/src/androidTest/java/com/github/jameshnsears/quoteunquote/utils/CSVHelperTest.kt b/app/src/androidTest/java/com/github/jameshnsears/quoteunquote/utils/CSVHelperTest.kt
new file mode 100755
index 0000000..3348e2d
--- /dev/null
+++ b/app/src/androidTest/java/com/github/jameshnsears/quoteunquote/utils/CSVHelperTest.kt
@@ -0,0 +1,153 @@
+package com.github.jameshnsears.quoteunquote.utils
+
+import androidx.test.platform.app.InstrumentationRegistry
+import com.github.jameshnsears.quoteunquote.QuoteUnquoteModelUtility
+import junit.framework.TestCase.assertEquals
+import junit.framework.TestCase.fail
+import org.junit.Test
+import java.io.InputStream
+
+class CSVHelperTest : QuoteUnquoteModelUtility() {
+    @Test
+    fun csvExportOfFavourites() {
+        val inputStream: InputStream = getCsvAsset("Favourites.csv")
+
+        val cvsHelper = CSVHelper()
+        val quotationEntityLinkedHashSet = cvsHelper.csvImportDatabase(inputStream)
+
+        assertEquals(2, quotationEntityLinkedHashSet.size)
+    }
+
+    @Test
+    fun csvImportDatabaseWithHeader() {
+        val inputStream: InputStream = getCsvAsset("ImportWithHeader.csv")
+
+        val cvsHelper = CSVHelper()
+        val quotationEntityLinkedHashSet = cvsHelper.csvImportDatabase(inputStream)
+
+        // header is treated as actual data
+        assertEquals(2, quotationEntityLinkedHashSet.size)
+    }
+
+    @Test
+    fun csvImportDatabaseWithoutHeader() {
+        val inputStream: InputStream = getCsvAsset("ImportMissingHeader.csv")
+
+        val cvsHelper = CSVHelper()
+        val quotationEntityLinkedHashSet = cvsHelper.csvImportDatabase(inputStream)
+
+        assertEquals(1, quotationEntityLinkedHashSet.size)
+    }
+
+    @Test
+    fun csvImportDatabaseOnlyAuthorNoDelimiter() {
+        val inputStream: InputStream = getCsvAsset("ImportOnlyAuthorNoDelimiter.csv")
+
+        val cvsHelper = CSVHelper()
+        try {
+            cvsHelper.csvImportDatabase(inputStream)
+            fail()
+        } catch (exception: CSVHelper.CVSHelperException) {
+            assertEquals(
+                "Index for header 'Quotation' is 1 but CSVRecord only has 1 values!",
+                exception.message
+            )
+        }
+    }
+
+    @Test
+    fun csvImportDatabaseOnlyAuthorWithDelimiter() {
+        val inputStream: InputStream = getCsvAsset("ImportOnlyAuthorWithDelimiter.csv")
+
+        val cvsHelper = CSVHelper()
+        try {
+            cvsHelper.csvImportDatabase(inputStream)
+            fail()
+        } catch (exception: CSVHelper.CVSHelperException) {
+            assertEquals(
+                "Index for header 'Quotation' is 1 but CSVRecord only has 1 values!",
+                exception.message
+            )
+        }
+    }
+
+    @Test
+    fun csvImportDatabaseEmptyButWithDelimiter() {
+        val inputStream: InputStream = getCsvAsset("ImportEmptyButWithDelimiter.csv")
+
+        val cvsHelper = CSVHelper()
+        try {
+            cvsHelper.csvImportDatabase(inputStream)
+            fail()
+        } catch (exception: CSVHelper.CVSHelperException) {
+            assertEquals("empty author", exception.message)
+        }
+    }
+
+    @Test
+    fun csvImportDatabaseMissingQuotation() {
+        val inputStream: InputStream = getCsvAsset("ImportMissingQuotation.csv")
+
+        val cvsHelper = CSVHelper()
+        try {
+            cvsHelper.csvImportDatabase(inputStream)
+            fail()
+        } catch (exception: CSVHelper.CVSHelperException) {
+            assertEquals(
+                "Index for header 'Quotation' is 1 but CSVRecord only has 1 values!",
+                exception.message
+            )
+        }
+    }
+
+    @Test
+    fun csvImportDatabaseImportEmpty() {
+        val inputStream: InputStream = getCsvAsset("ImportEmpty.csv")
+
+        val cvsHelper = CSVHelper()
+        try {
+            cvsHelper.csvImportDatabase(inputStream)
+            fail()
+        } catch (exception: CSVHelper.CVSHelperException) {
+            assertEquals("empty file", exception.message)
+        }
+    }
+
+    @Test
+    fun csvImportWithNewLines() {
+        val inputStream: InputStream = getCsvAsset("ImportWithNewLines.csv")
+
+        val cvsHelper = CSVHelper()
+        val quotationEntityLinkedHashSet = cvsHelper.csvImportDatabase(inputStream)
+
+        assertEquals(13, quotationEntityLinkedHashSet.size)
+    }
+
+    @Test
+    fun csvImportExampleShakespeare() {
+        val inputStream: InputStream = getCsvAsset("Shakespeare.csv")
+
+        val cvsHelper = CSVHelper()
+        val quotationEntityLinkedHashSet = cvsHelper.csvImportDatabase(inputStream)
+
+        assertEquals(1904, quotationEntityLinkedHashSet.size)
+    }
+
+    private fun getCsvAsset(filename: String) =
+        InstrumentationRegistry.getInstrumentation().context.resources.assets
+            .open(
+                filename
+            )
+
+    @Test
+    fun makeDigest() {
+        // confirm same as from python
+        assertEquals(
+            "e5da2450",
+            CSVHelper().makeDigest(
+                "The only thing that interferes with my learning is my education.",
+                "Albert Einstein"
+            )
+        )
+    }
+}
diff --git a/app/src/androidTest/java/espresso/ExpressoConfigurationTest.kt b/app/src/androidTest/java/espresso/ExpressoConfigurationTest.kt
new file mode 100755
index 0000000..69e92c8
--- /dev/null
+++ b/app/src/androidTest/java/espresso/ExpressoConfigurationTest.kt
@@ -0,0 +1,154 @@
+package espresso
+
+import android.view.View
+import android.widget.TextView
+import androidx.test.espresso.Espresso.onView
+import androidx.test.espresso.UiController
+import androidx.test.espresso.ViewAction
+import androidx.test.espresso.ViewInteraction
+import androidx.test.espresso.action.ViewActions.click
+import androidx.test.espresso.assertion.ViewAssertions.matches
+import androidx.test.espresso.matcher.ViewMatchers.isAssignableFrom
+import androidx.test.espresso.matcher.ViewMatchers.isChecked
+import androidx.test.espresso.matcher.ViewMatchers.isDisplayed
+import androidx.test.espresso.matcher.ViewMatchers.isEnabled
+import androidx.test.espresso.matcher.ViewMatchers.isNotChecked
+import androidx.test.espresso.matcher.ViewMatchers.withId
+import androidx.test.espresso.matcher.ViewMatchers.withText
+import androidx.test.ext.junit.rules.ActivityScenarioRule
+import androidx.test.ext.junit.runners.AndroidJUnit4
+import com.github.jameshnsears.quoteunquote.R
+import com.github.jameshnsears.quoteunquote.configure.ConfigureActivityDouble
+import junit.framework.AssertionFailedError
+import org.hamcrest.Matcher
+import org.junit.Assert.assertTrue
+import org.junit.Rule
+import org.junit.Test
+import org.junit.runner.RunWith
+import java.util.concurrent.TimeoutException
+
+@RunWith(AndroidJUnit4::class)
+class ExpressoConfigurationTest {
+    @Rule
+    @JvmField
+    var rule = ActivityScenarioRule(ConfigureActivityDouble::class.java)
+
+    private fun canTestBeRun(): Boolean {
+        // don't run in GitHub Actions
+        return if (System.getenv("CI") == null) {
+            true
+        } else {
+            false
+        }
+    }
+
+    @Test
+    fun pressQuotations() {
+        // don't run in GitHub Actions
+        if (canTestBeRun()) {
+            onView(withId(R.id.navigationBarQuotations))
+                .waitUntilVisible(5000)
+                .check(matches(isDisplayed()))
+
+            /*
+            onView(withText("Hello world!")).check(matches(isDisplayed()));
+            onView(...).perform(typeText("Hello"), click());
+            onView(withId(R.id.name_field)).perform(typeText("Steve"));
+            onView(withId(R.id.greet_button)).perform(click());
+            onView(withText("Hello Steve!")).check(matches(isDisplayed()));
+            onView(withId(R.id.countTV)).check(matches(withText("1")))
+            onView(withId(R.id.editTextUserInput)).perform(typeText(STRING_TO_BE_TYPED),
+                    closeSoftKeyboard());
+            onView(withId(R.id.activityChangeTextBtn)).perform(click());
+            onView(withId(R.id.show_text_view)).check(matches(withText(STRING_TO_BE_TYPED)));
+            */
+        }
+    }
+
+    @Test
+    fun pressAppearance() {
+        if (canTestBeRun()) {
+            onView(withId(R.id.navigationBarAppearance))
+                .waitUntilVisible(5000)
+                .perform(click())
+                .check(matches(isDisplayed()))
+        }
+    }
+
+    @Test
+    fun pressNotifications() {
+        if (canTestBeRun()) {
+            onView(withId(R.id.navigationBarNotification))
+                .waitUntilVisible(5000)
+                .perform(click())
+                .check(matches(isDisplayed()))
+        }
+    }
+
+    @Test
+    fun pressSync() {
+        if (canTestBeRun()) {
+            onView(withId(R.id.navigationBarSync))
+                .waitUntilVisible(5000)
+                .perform(click())
+                .check(matches(isDisplayed()))
+
+            onView(withId(R.id.radioButtonSyncGoogleCloud))
+                .check(matches(isChecked()))
+
+            onView(withId(R.id.radioButtonSyncDevice))
+                .check(matches(isNotChecked()))
+
+            onView(withId(R.id.buttonBackup))
+                .check(matches(isEnabled()))
+
+            onView(withId(R.id.buttonRestore))
+                .check(matches(isEnabled()))
+
+            val textViewLocalCodeValue = onView(withId(R.id.textViewLocalCodeValue))
+            assertTrue(getText(textViewLocalCodeValue).length == 10)
+
+            onView(withId(R.id.textViewLocalCodeValue))
+                .check(matches(isDisplayed()))
+
+            onView(withId(R.id.editTextRemoteCodeValue))
+                .check(matches(withText("")))
+        }
+    }
+
+    fun ViewInteraction.waitUntilVisible(timeout: Long): ViewInteraction {
+        val startTime = System.currentTimeMillis()
+        val endTime = startTime + timeout
+
+        do {
+            try {
+                check(matches(isDisplayed()))
+                return this
+            } catch (e: AssertionFailedError) {
+                Thread.sleep(50)
+            }
+        } while (System.currentTimeMillis() < endTime)
+
+        throw TimeoutException()
+    }
+
+    fun getText(matcher: ViewInteraction): String {
+        var text = String()
+        matcher.perform(object : ViewAction {
+            override fun getConstraints(): Matcher<View> {
+                return isAssignableFrom(TextView::class.java)
+            }
+
+            override fun getDescription(): String {
+                return "Text of the view"
+            }
+
+            override fun perform(uiController: UiController, view: View) {
+                val tv = view as TextView
+                text = tv.text.toString()
+            }
+        })
+
+        return text
+    }
+}
diff --git a/app/src/androidTest/java/uiautomator/UIAutomatorWidgetTest.java b/app/src/androidTest/java/uiautomator/UIAutomatorWidgetTest.java
new file mode 100755
index 0000000..591dc5d
--- /dev/null
+++ b/app/src/androidTest/java/uiautomator/UIAutomatorWidgetTest.java
@@ -0,0 +1,196 @@
+package uiautomator;
+
+import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.assertTrue;
+
+import android.os.Build;
+
+import androidx.test.platform.app.InstrumentationRegistry;
+import androidx.test.uiautomator.By;
+import androidx.test.uiautomator.UiDevice;
+import androidx.test.uiautomator.UiObject2;
+
+import org.junit.FixMethodOrder;
+import org.junit.Test;
+import org.junit.runners.MethodSorters;
+
+@FixMethodOrder(MethodSorters.NAME_ASCENDING)
+public class UIAutomatorWidgetTest extends UiAutomatorUtility {
+    @Test
+    public void test_0_createWidget() {
+        if (canTestBeRun()) {
+            waitForLauncher();
+            dragWidgetOntoHomeScreen();
+            waitForConfigurationScreen();
+            closeConfigurationScreen();
+
+
+        }
+    }
+
+    private boolean canTestBeRun() {
+        // don't run in GitHub Actions
+        if (System.getenv("CI") == null) {
+            // only run at this API level, as this emulator's UI is what we've coded against
+            return Build.VERSION.SDK_INT == Build.VERSION_CODES.R;
+        }
+        return false;
+    }
+
+    @Test
+    public void test_configuration_inspect_0_Quotations() throws InterruptedException {
+        if (canTestBeRun()) {
+            displayConfigurationScreen();
+
+            waitForConfigurationScreen();
+
+            device = UiDevice.getInstance(InstrumentationRegistry.getInstrumentation());
+
+            device.waitForWindowUpdate(device.getLauncherPackageName(), TIMEOUT);
+            Thread.sleep(1000);
+
+            UiObject2 all = device.findObject(
+                    By.desc("All: %d")
+            );
+            assertEquals("All: 10", all.getText());
+
+            UiObject2 previousSwitch = device.findObject(
+                    By.desc("Add displayed Source / Search results to Previous")
+            );
+            assertTrue(previousSwitch.isChecked());
+
+            UiObject2 author = device.findObject(
+                    By.desc("Source: %d")
+            );
+            assertEquals("Source: 5", author.getText());
+
+            UiObject2 favourites = device.findObject(
+                    By.desc("Favourites: %d")
+            );
+            assertEquals("Favourites: 0", favourites.getText());
+
+            UiObject2 search = device.findObject(
+                    By.desc("Search: %d")
+            );
+            assertEquals("Search: 0", search.getText());
+        }
+    }
+
+    @Test
+    public void test_configuration_inspect_1_Appearance() {
+        if (canTestBeRun()) {
+            displayConfigurationScreen();
+
+            waitForConfigurationScreen();
+
+            device = UiDevice.getInstance(InstrumentationRegistry.getInstrumentation());
+
+            UiObject2 appearance = device.findObject(
+                    By.desc("Appearance")
+            );
+            appearance.click();
+
+            closeConfigurationScreen();
+        }
+    }
+
+    @Test
+    public void test_favourite_0_Mark() {
+        if (canTestBeRun()) {
+            device = UiDevice.getInstance(InstrumentationRegistry.getInstrumentation());
+
+            UiObject2 favourite = device.findObject(
+                    By.desc("Favourite, toggle")
+            );
+            favourite.click();
+
+            device.waitForWindowUpdate(device.getLauncherPackageName(), TIMEOUT);
+
+            displayConfigurationScreen();
+
+            waitForConfigurationScreen();
+
+            UiObject2 favourites = device.findObject(
+                    By.desc("Favourites: %d")
+            );
+            assertEquals("Favourites: 1", favourites.getText());
+
+            closeConfigurationScreen();
+        }
+    }
+
+    @Test
+    public void test_favourite_1_Export() {
+        if (canTestBeRun()) {
+            device = UiDevice.getInstance(InstrumentationRegistry.getInstrumentation());
+
+            displayConfigurationScreen();
+
+            waitForConfigurationScreen();
+
+            UiObject2 export = device.findObject(
+                    By.desc("Export")
+            );
+            export.click();
+
+            // unable to get SAVE button in uiautomatorviewer
+            device.waitForWindowUpdate(device.getLauncherPackageName(), TIMEOUT);
+
+            device.pressBack();
+
+            device.pressBack();
+
+            UiObject2 quotation = device.findObject(
+                    By.desc("Quotation")
+            );
+            assertEquals("q1.1\n", quotation.getText());
+        }
+    }
+
+    @Test
+    public void test_next_sequential() {
+        // WIP
+
+        /*
+        content-desc: ...
+        Quotation: press q1.1
+        Appearance: press Appearance
+        Toolbar: press Toolbar
+        Next, sequential: press Next, Sequential
+        press Back button
+
+        Quotation: assert q1.1
+        Author: assert a1
+        Position: assert 1/8
+
+        Next, sequential: press Next, Sequential
+        Quotation: assert q1.2
+        Author: assert a1
+        Position: assert 2/8
+
+        Next, sequential: press Next, Sequential
+        Quotation: assert q1.3
+        Author: assert a1
+        Position: assert 3/8
+
+        Previous: press Previous
+        Quotation: assert q1.2
+        Author: assert a1
+        Position: assert 2/8
+
+        Quotation: press q1.2
+        Author: %d: press Author
+        Selected Author: select a2
+        press Back button
+
+        Quotation: assert q2.1
+        Author: assert a2
+        Position: assert 1/2
+
+        Next, sequential: press Next, Sequential
+        Quotation: assert q2.2
+        Author: assert a2
+        Position: assert 2/2
+        */
+    }
+}
diff --git a/app/src/androidTest/java/uiautomator/UiAutomatorUtility.java b/app/src/androidTest/java/uiautomator/UiAutomatorUtility.java
new file mode 100755
index 0000000..a6fb2ea
--- /dev/null
+++ b/app/src/androidTest/java/uiautomator/UiAutomatorUtility.java
@@ -0,0 +1,74 @@
+package uiautomator;
+
+import android.graphics.Point;
+import android.graphics.Rect;
+
+import androidx.test.platform.app.InstrumentationRegistry;
+import androidx.test.uiautomator.By;
+import androidx.test.uiautomator.UiDevice;
+import androidx.test.uiautomator.UiObject2;
+import androidx.test.uiautomator.Until;
+
+public class UiAutomatorUtility {
+    protected static final int TIMEOUT = 5000;
+    protected UiDevice device;
+
+    protected void waitForLauncher() {
+        device = UiDevice.getInstance(InstrumentationRegistry.getInstrumentation());
+        device.pressHome();
+        device.wait(Until.hasObject(By.pkg(device.getLauncherPackageName()).depth(0)), TIMEOUT);
+    }
+
+    protected void dragWidgetOntoHomeScreen() {
+        // tuned for UI on API 30 / R
+
+        // long press on center of home screen
+        int x = device.getDisplayWidth() / 2;
+        int y = device.getDisplayHeight() / 2;
+        device.swipe(x, y, x, y, 150);
+
+        // launch widgets list
+        device.findObject(By.text("Widgets")).click();
+        device.waitForIdle();
+
+        // scroll to our widget in the list
+        UiObject2 widget = device.findObject(By.text("Quote Unquote"));
+        while (widget == null) {
+            // Swipe bottom to top
+            device.swipe(x, y, x, 0, 25);
+            widget = device.findObject(By.text("Quote Unquote"));
+        }
+
+        // place widget on home screen
+        Rect visibleBounds = widget.getVisibleBounds();
+        Point c = new Point(visibleBounds.left + 150, visibleBounds.bottom + 150);
+        Point dest = new Point(c.x + 250, c.y + 250);
+        Point[] pointArray = {c, c, dest};
+        device.swipe(pointArray, 25);
+    }
+
+    protected void displayConfigurationScreen() {
+        device = UiDevice.getInstance(InstrumentationRegistry.getInstrumentation());
+        device.waitForIdle();
+
+        UiObject2 quotation = device.findObject(
+                By.desc("Quotation")
+        );
+        quotation.click();
+    }
+
+    protected void waitForConfigurationScreen() {
+        device = UiDevice.getInstance(InstrumentationRegistry.getInstrumentation());
+        device.waitForIdle();
+
+        device.wait(Until.hasObject(By.text("Configuration")), UiAutomatorUtility.TIMEOUT);
+    }
+
+    protected void closeConfigurationScreen() {
+        device = UiDevice.getInstance(InstrumentationRegistry.getInstrumentation());
+        device.waitForIdle();
+
+        device.pressBack();
+        device.wait(Until.hasObject(By.text("Quote Unquote")), UiAutomatorUtility.TIMEOUT);
+    }
+}
diff --git a/app/src/main/java/com/github/jameshnsears/quoteunquote/QuoteUnquoteInstructions.kt b/app/src/main/java/com/github/jameshnsears/quoteunquote/QuoteUnquoteInstructions.kt
old mode 100644
new mode 100755
diff --git a/app/src/main/java/com/github/jameshnsears/quoteunquote/QuoteUnquoteModel.java b/app/src/main/java/com/github/jameshnsears/quoteunquote/QuoteUnquoteModel.java
old mode 100644
new mode 100755
index bacdf78..06bce25
--- a/app/src/main/java/com/github/jameshnsears/quoteunquote/QuoteUnquoteModel.java
+++ b/app/src/main/java/com/github/jameshnsears/quoteunquote/QuoteUnquoteModel.java
@@ -16,6 +16,7 @@ import com.github.jameshnsears.quoteunquote.utils.audit.AuditEventHelper;
 
 import java.util.ArrayList;
 import java.util.Collections;
+import java.util.LinkedHashSet;
 import java.util.List;
 import java.util.Locale;
 import java.util.concurrent.ConcurrentHashMap;
@@ -38,9 +39,18 @@ public class QuoteUnquoteModel {
     public QuoteUnquoteModel() {
     }
 
-    public QuoteUnquoteModel(@NonNull final Context widgetContext) {
+    public QuoteUnquoteModel(int widgetId, @NonNull final Context widgetContext) {
         context = widgetContext;
         databaseRepository = DatabaseRepository.getInstance(this.context);
+
+        if (widgetId != -1) {
+            QuotationsPreferences quotationsPreferences = new QuotationsPreferences(widgetId, context);
+            if (quotationsPreferences.getDatabaseExternal()) {
+                databaseRepository.useInternalDatabase = false;
+            } else {
+                databaseRepository.useInternalDatabase = true;
+            }
+        }
     }
 
     private boolean isNextNew(
@@ -490,7 +500,6 @@ public class QuoteUnquoteModel {
         try {
             future.get();
         } catch (@NonNull ExecutionException | InterruptedException e) {
-            Timber.e(e);
             Thread.currentThread().interrupt();
         }
     }
@@ -535,6 +544,28 @@ public class QuoteUnquoteModel {
         return databaseRepository.countAll();
     }
 
+    @NonNull
+    public boolean externalDatabaseContainsQuotations() {
+        final Future<Boolean> future = QuoteUnquoteWidget.getExecutorService().submit(() -> {
+            if (databaseRepository.countAllExternal().blockingGet() > 0) {
+                return true;
+            }
+
+            return false;
+        });
+
+        boolean externalDatabaseContainsQuotations = false;
+
+        try {
+            externalDatabaseContainsQuotations = future.get();
+        } catch (@NonNull ExecutionException | InterruptedException e) {
+            Timber.e(e);
+            Thread.currentThread().interrupt();
+        }
+
+        return externalDatabaseContainsQuotations;
+    }
+
     @NonNull
     public Single<List<AuthorPOJO>> authors() {
         return databaseRepository.getAuthorsAndQuotationCounts();
@@ -584,8 +615,20 @@ public class QuoteUnquoteModel {
     }
 
     @NonNull
-    public Integer countQuotationWithSearchText(@NonNull final String text) {
-        return databaseRepository.countSearchText(text);
+    public Integer countQuotationWithSearchText(@NonNull final String text, boolean favouritesOnly) {
+        final Future<Integer> future = QuoteUnquoteWidget.getExecutorService().submit(() -> {
+            return databaseRepository.countSearchText(text, favouritesOnly);
+        });
+
+        Integer searchCount = 0;
+
+        try {
+            searchCount = future.get();
+        } catch (@NonNull ExecutionException | InterruptedException e) {
+            Thread.currentThread().interrupt();
+        }
+
+        return searchCount;
     }
 
     @NonNull
@@ -638,4 +681,21 @@ public class QuoteUnquoteModel {
 
         return exportedFavourites;
     }
+
+    @NonNull
+    public void insertQuotationsExternal(
+            @NonNull final LinkedHashSet<QuotationEntity> quotations) {
+        final Future future = QuoteUnquoteWidget.getExecutorService().submit(() -> {
+            DatabaseRepository.useInternalDatabase = false;
+            databaseRepository.erase();
+            databaseRepository.insertQuotationsExternal(quotations);
+        });
+
+        try {
+            future.get();
+        } catch (@NonNull ExecutionException | InterruptedException e) {
+            Timber.e(e);
+            Thread.currentThread().interrupt();
+        }
+    }
 }
diff --git a/app/src/main/java/com/github/jameshnsears/quoteunquote/QuoteUnquoteWidget.java b/app/src/main/java/com/github/jameshnsears/quoteunquote/QuoteUnquoteWidget.java
old mode 100644
new mode 100755
index 2d3bfee..ac9834f
--- a/app/src/main/java/com/github/jameshnsears/quoteunquote/QuoteUnquoteWidget.java
+++ b/app/src/main/java/com/github/jameshnsears/quoteunquote/QuoteUnquoteWidget.java
@@ -112,7 +112,7 @@ public class QuoteUnquoteWidget extends AppWidgetProvider {
             quotationsPreferences.setContentLocalCode(CloudTransferHelper.getLocalCode());
         }
 
-        startDatabaseConnectivity(context);
+        startDatabaseConnectivity(-1, context);
     }
 
     @Override
@@ -200,7 +200,7 @@ public class QuoteUnquoteWidget extends AppWidgetProvider {
         try {
             switch (intent.getAction()) {
                 case Intent.ACTION_USER_PRESENT:
-                    startDatabaseConnectivity(context);
+                    startDatabaseConnectivity(widgetId, context);
                     onReceiveDeviceUnlock(context, appWidgetManager);
                     break;
 
@@ -242,7 +242,7 @@ public class QuoteUnquoteWidget extends AppWidgetProvider {
                     onReceiveToolbarPressedFavourite(
                             context,
                             widgetId,
-                            getQuoteUnquoteModel(context).getCurrentQuotation(widgetId).digest,
+                            getQuoteUnquoteModel(widgetId, context).getCurrentQuotation(widgetId).digest,
                             appWidgetManager);
                     break;
 
@@ -302,21 +302,21 @@ public class QuoteUnquoteWidget extends AppWidgetProvider {
 
         final QuotationsPreferences quotationsPreferences = new QuotationsPreferences(widgetId, context);
 
-        int favouritesCount = getQuoteUnquoteModel(context).countFavouritesWithoutRx();
+        int favouritesCount = getQuoteUnquoteModel(widgetId, context).countFavouritesWithoutRx();
 
         if (quotationsPreferences.getContentSelection() == ContentSelection.FAVOURITES) {
             if (favouritesCount == 0) {
                 noFavouritesSoMoveToAll(context, widgetId, quotationsPreferences);
             } else {
-                getQuoteUnquoteModel(context).markAsCurrentDefault(widgetId);
+                getQuoteUnquoteModel(widgetId, context).markAsCurrentDefault(widgetId);
             }
 
             appWidgetManager.notifyAppWidgetViewDataChanged(widgetId, R.id.listViewQuotation);
         }
     }
 
-    private void startDatabaseConnectivity(@NonNull Context context) {
-        setQuoteUnquoteModel(new QuoteUnquoteModel(context));
+    private void startDatabaseConnectivity(int widgetId, @NonNull Context context) {
+        setQuoteUnquoteModel(new QuoteUnquoteModel(widgetId, context));
     }
 
     public void stopDatabaseConnectivity() {
@@ -344,7 +344,7 @@ public class QuoteUnquoteWidget extends AppWidgetProvider {
     public void onReceiveToolbarPressedShare(@NonNull final Context context, final int widgetId) {
         context.startActivity(IntentFactoryHelper.createIntentShare(
                 context.getResources().getString(R.string.app_name),
-                getQuoteUnquoteModel(context).getCurrentQuotation(widgetId).theShareContent()));
+                getQuoteUnquoteModel(widgetId, context).getCurrentQuotation(widgetId).theShareContent()));
     }
 
     private void onReceiveToolbarPressedFavourite(
@@ -354,13 +354,13 @@ public class QuoteUnquoteWidget extends AppWidgetProvider {
             @NonNull final AppWidgetManager appWidgetManager) {
         final QuotationsPreferences quotationsPreferences = new QuotationsPreferences(widgetId, context);
 
-        int favouritesCount = getQuoteUnquoteModel(context).toggleFavourite(widgetId, digest);
+        int favouritesCount = getQuoteUnquoteModel(widgetId, context).toggleFavourite(widgetId, digest);
 
         if (quotationsPreferences.getContentSelection() == ContentSelection.FAVOURITES) {
             if (favouritesCount == 0) {
                 noFavouritesSoMoveToAll(context, widgetId, quotationsPreferences);
             } else {
-                getQuoteUnquoteModel(context).markAsCurrentDefault(widgetId);
+                getQuoteUnquoteModel(widgetId, context).markAsCurrentDefault(widgetId);
             }
 
             appWidgetManager.notifyAppWidgetViewDataChanged(widgetId, R.id.listViewQuotation);
@@ -371,7 +371,7 @@ public class QuoteUnquoteWidget extends AppWidgetProvider {
         updateNotificationIfShowingFavouriteDigest(
                 context,
                 widgetId,
-                getQuoteUnquoteModel(context).getCurrentQuotation(widgetId).digest);
+                getQuoteUnquoteModel(widgetId, context).getCurrentQuotation(widgetId).digest);
     }
 
     private void sendAllWidgetInstancesFavouriteNotification(
@@ -397,7 +397,7 @@ public class QuoteUnquoteWidget extends AppWidgetProvider {
         if (quotationsPreferences.getContentSelection() != ContentSelection.ALL) {
             quotationsPreferences.setContentSelection(ContentSelection.ALL);
             Timber.d("%s", quotationsPreferences.getContentSelection());
-            getQuoteUnquoteModel(context).markAsCurrentDefault(widgetId);
+            getQuoteUnquoteModel(widgetId, context).markAsCurrentDefault(widgetId);
         }
     }
 
@@ -405,8 +405,8 @@ public class QuoteUnquoteWidget extends AppWidgetProvider {
             @NonNull final Context context,
             final int widgetId,
             @NonNull final AppWidgetManager appWidgetManager) {
-        getQuoteUnquoteModel(context).resetPrevious(widgetId, new QuotationsPreferences(widgetId, context).getContentSelection());
-        getQuoteUnquoteModel(context).markAsCurrentDefault(widgetId);
+        getQuoteUnquoteModel(widgetId, context).resetPrevious(widgetId, new QuotationsPreferences(widgetId, context).getContentSelection());
+        getQuoteUnquoteModel(widgetId, context).markAsCurrentDefault(widgetId);
 
         appWidgetManager.notifyAppWidgetViewDataChanged(widgetId, R.id.listViewQuotation);
 
@@ -415,7 +415,7 @@ public class QuoteUnquoteWidget extends AppWidgetProvider {
 
     private void onReceiveToolbarPressedPrevious(
             @NonNull final Context context, final int widgetId, @NonNull final AppWidgetManager appWidgetManager) {
-        getQuoteUnquoteModel(context).markAsCurrentPrevious(widgetId);
+        getQuoteUnquoteModel(widgetId, context).markAsCurrentPrevious(widgetId);
 
         appWidgetManager.notifyAppWidgetViewDataChanged(widgetId, R.id.listViewQuotation);
 
@@ -434,7 +434,7 @@ public class QuoteUnquoteWidget extends AppWidgetProvider {
             final int widgetId,
             @NonNull final AppWidgetManager appWidgetManager) {
         Timber.d("%d", widgetId);
-        getQuoteUnquoteModel(context).markAsCurrentLastPrevious(widgetId);
+        getQuoteUnquoteModel(widgetId, context).markAsCurrentLastPrevious(widgetId);
         appWidgetManager.notifyAppWidgetViewDataChanged(widgetId, R.id.listViewQuotation);
 
         updateNotificationIfExists(context, widgetId);
@@ -452,7 +452,7 @@ public class QuoteUnquoteWidget extends AppWidgetProvider {
             final int widgetId,
             @NonNull final AppWidgetManager appWidgetManager,
             final boolean randomNext) {
-        getQuoteUnquoteModel(context).markAsCurrentNext(widgetId, randomNext);
+        getQuoteUnquoteModel(widgetId, context).markAsCurrentNext(widgetId, randomNext);
         appWidgetManager.notifyAppWidgetViewDataChanged(widgetId, R.id.listViewQuotation);
 
         updateNotificationIfExists(context, widgetId);
@@ -469,7 +469,7 @@ public class QuoteUnquoteWidget extends AppWidgetProvider {
     private void scheduleEvent(@NonNull Context context, int widgetId) {
         NotificationsPreferences notificationsPreferences = new NotificationsPreferences(widgetId, context);
 
-        getQuoteUnquoteModel(context).markAsCurrentNext(widgetId, notificationsPreferences.getEventNextRandom());
+        getQuoteUnquoteModel(widgetId, context).markAsCurrentNext(widgetId, notificationsPreferences.getEventNextRandom());
 
         if (notificationsPreferences.getEventDisplayWidgetAndNotification()) {
             displayNotification(context, widgetId);
@@ -481,7 +481,7 @@ public class QuoteUnquoteWidget extends AppWidgetProvider {
 
     private void displayNotification(@NonNull Context context, int widgetId) {
         QuotationEntity currentQuotation
-                = getQuoteUnquoteModel(context).getCurrentQuotation(widgetId);
+                = getQuoteUnquoteModel(widgetId, context).getCurrentQuotation(widgetId);
 
         if (currentQuotation != null){
             NotificationsPreferences notificationsPreferences = new NotificationsPreferences(widgetId, context);
@@ -491,9 +491,9 @@ public class QuoteUnquoteWidget extends AppWidgetProvider {
                     widgetId,
                     currentQuotation.author,
                     markNotificationAsFavourite(
-                            context, currentQuotation.digest, currentQuotation.quotation),
+                            widgetId, context, currentQuotation.digest, currentQuotation.quotation),
                     currentQuotation.digest,
-                    getQuoteUnquoteModel(context).isFavourite(currentQuotation.digest),
+                    getQuoteUnquoteModel(widgetId, context).isFavourite(currentQuotation.digest),
                     notificationsPreferences.getEventNextSequential(),
                     widgetId);
 
@@ -543,22 +543,22 @@ public class QuoteUnquoteWidget extends AppWidgetProvider {
         NotificationsPreferences notificationsPreferences = new NotificationsPreferences(widgetId, context);
 
         QuotationEntity quotationEntity
-                = getQuoteUnquoteModel(context).getQuotation(digestFromIntent);
+                = getQuoteUnquoteModel(widgetId, context).getQuotation(digestFromIntent);
 
         notificationHelper.displayNotification(
                 context,
                 widgetId,
                 quotationEntity.author,
-                markNotificationAsFavourite(context, digestFromIntent, quotationEntity.quotation),
+                markNotificationAsFavourite(widgetId, context, digestFromIntent, quotationEntity.quotation),
                 digestFromIntent,
-                getQuoteUnquoteModel(context).isFavourite(digestFromIntent),
+                getQuoteUnquoteModel(widgetId, context).isFavourite(digestFromIntent),
                 notificationsPreferences.getEventNextSequential(),
                 widgetId);
     }
 
     private String markNotificationAsFavourite(
-            @NonNull Context context, @NonNull String digest, String quotation) {
-         if (getQuoteUnquoteModel(context).isFavourite(digest)) {
+            int widgetId, @NonNull Context context, @NonNull String digest, String quotation) {
+         if (getQuoteUnquoteModel(widgetId, context).isFavourite(digest)) {
             quotation = "\u2764 " + quotation;
             return quotation;
         }
@@ -582,15 +582,15 @@ public class QuoteUnquoteWidget extends AppWidgetProvider {
             NotificationsPreferences notificationsPreferences = new NotificationsPreferences(widgetId, context);
 
             QuotationEntity quotationEntity
-                    = getQuoteUnquoteModel(context).getQuotation(digestMadeFavouriteInWidget);
+                    = getQuoteUnquoteModel(widgetId, context).getQuotation(digestMadeFavouriteInWidget);
 
             notificationHelper.displayNotification(
                     context,
                     widgetId,
                     quotationEntity.author,
-                    markNotificationAsFavourite(context, digestMadeFavouriteInWidget, quotationEntity.quotation),
+                    markNotificationAsFavourite(widgetId, context, digestMadeFavouriteInWidget, quotationEntity.quotation),
                     digestMadeFavouriteInWidget,
-                    getQuoteUnquoteModel(context).isFavourite(digestMadeFavouriteInWidget),
+                    getQuoteUnquoteModel(widgetId, context).isFavourite(digestMadeFavouriteInWidget),
                     notificationsPreferences.getEventNextSequential(),
                     widgetId);
         }
@@ -602,13 +602,13 @@ public class QuoteUnquoteWidget extends AppWidgetProvider {
             @NonNull final NotificationsDailyAlarm notificationsDailyAlarm) {
         Timber.d("%d", widgetId);
 
-        if (getQuoteUnquoteModel(context).getCurrentQuotation(widgetId) == null) {
-            getQuoteUnquoteModel(context).markAsCurrentDefault(widgetId);
+        if (getQuoteUnquoteModel(widgetId, context).getCurrentQuotation(widgetId) == null) {
+            getQuoteUnquoteModel(widgetId, context).markAsCurrentDefault(widgetId);
         } else if (new QuotationsPreferences(widgetId, context).getContentSelection() != currentContentSelection) {
-            getQuoteUnquoteModel(context).markAsCurrentDefault(widgetId);
-        } else if (new QuotationsPreferences(widgetId, context).getContentSelection() == ContentSelection.AUTHOR
-            && new QuotationsPreferences(widgetId, context).getContentSelectionAuthor() != currentAuthorSelection) {
-            getQuoteUnquoteModel(context).markAsCurrentDefault(widgetId);
+            getQuoteUnquoteModel(widgetId, context).markAsCurrentDefault(widgetId);
+        } else if (new QuotationsPreferences(widgetId, context).getContentSelection().equals(ContentSelection.AUTHOR)
+            && !new QuotationsPreferences(widgetId, context).getContentSelectionAuthor().equals(currentAuthorSelection)) {
+            getQuoteUnquoteModel(widgetId, context).markAsCurrentDefault(widgetId);
         }
 
         notificationsDailyAlarm.setDailyAlarm();
@@ -759,12 +759,12 @@ public class QuoteUnquoteWidget extends AppWidgetProvider {
             @NonNull final RemoteViews remoteViews) {
         Timber.d("%d", widgetId);
 
-        final QuotationEntity quotationEntity = getQuoteUnquoteModel(context).getCurrentQuotation(
+        final QuotationEntity quotationEntity = getQuoteUnquoteModel(widgetId, context).getCurrentQuotation(
                 widgetId);
 
         String appearanceToolbarColour = getAppearancePreferences(context, widgetId).getAppearanceToolbarColour();
 
-        boolean isFavourite = quotationEntity != null && getQuoteUnquoteModel(context).isFavourite(quotationEntity.digest);
+        boolean isFavourite = quotationEntity != null && getQuoteUnquoteModel(widgetId, context).isFavourite(quotationEntity.digest);
 
         if (isFavourite) {
             remoteViews.setImageViewResource(R.id.imageButtonFavourite, R.drawable.ic_toolbar_favorite_red_24);
@@ -801,7 +801,7 @@ public class QuoteUnquoteWidget extends AppWidgetProvider {
 
             NotificationManagerCompat.from(context).cancel(widgetId);
 
-            getQuoteUnquoteModel(context).delete(widgetId);
+            getQuoteUnquoteModel(widgetId, context).delete(widgetId);
             PreferencesFacade.delete(context, widgetId);
 
             final NotificationsDailyAlarm notificationsDailyAlarm = new NotificationsDailyAlarm(context, widgetId);
@@ -815,7 +815,7 @@ public class QuoteUnquoteWidget extends AppWidgetProvider {
         super.onDisabled(context);
 
         try {
-            getQuoteUnquoteModel(context).disable();
+            getQuoteUnquoteModel(-1, context).disable();
             final QuotationsPreferences quotationsPreferences = new QuotationsPreferences(context);
             final String localCode = quotationsPreferences.getContentLocalCode();
             PreferencesFacade.erase(context);
@@ -836,10 +836,12 @@ public class QuoteUnquoteWidget extends AppWidgetProvider {
     }
 
     @Nullable
-    public synchronized QuoteUnquoteModel getQuoteUnquoteModel(@NonNull final Context context) {
+    public synchronized QuoteUnquoteModel getQuoteUnquoteModel(
+            int widgetId, @NonNull final Context context) {
         if (quoteUnquoteModel == null) {
-            quoteUnquoteModel = new QuoteUnquoteModel(context);
+            quoteUnquoteModel = new QuoteUnquoteModel(widgetId, context);
         }
+
         return quoteUnquoteModel;
     }
 
diff --git a/app/src/main/java/com/github/jameshnsears/quoteunquote/cloud/CloudService.java b/app/src/main/java/com/github/jameshnsears/quoteunquote/cloud/CloudService.java
old mode 100644
new mode 100755
diff --git a/app/src/main/java/com/github/jameshnsears/quoteunquote/cloud/CloudServiceBackup.java b/app/src/main/java/com/github/jameshnsears/quoteunquote/cloud/CloudServiceBackup.java
old mode 100644
new mode 100755
index 1ba6448..e833fdf
--- a/app/src/main/java/com/github/jameshnsears/quoteunquote/cloud/CloudServiceBackup.java
+++ b/app/src/main/java/com/github/jameshnsears/quoteunquote/cloud/CloudServiceBackup.java
@@ -42,8 +42,8 @@ public class CloudServiceBackup extends CloudService {
                             context.getString(R.string.fragment_archive_backup_sending),
                             Toast.LENGTH_SHORT).show());
 
-                    // "large" amounts of data can not be sent as an Intent entra
-                    QuoteUnquoteModel quoteUnquoteModel = new QuoteUnquoteModel(context);
+                    // "large" amounts of data can not be sent as an Intent extra
+                    QuoteUnquoteModel quoteUnquoteModel = new QuoteUnquoteModel(-1, context);
                     if (cloudTransfer.backup(quoteUnquoteModel.transferBackup(context))) {
                         handler.post(() -> Toast.makeText(
                                 context,
diff --git a/app/src/main/java/com/github/jameshnsears/quoteunquote/cloud/CloudServiceRestore.java b/app/src/main/java/com/github/jameshnsears/quoteunquote/cloud/CloudServiceRestore.java
old mode 100644
new mode 100755
index fc28cb0..afe0618
--- a/app/src/main/java/com/github/jameshnsears/quoteunquote/cloud/CloudServiceRestore.java
+++ b/app/src/main/java/com/github/jameshnsears/quoteunquote/cloud/CloudServiceRestore.java
@@ -10,6 +10,7 @@ import androidx.annotation.NonNull;
 import com.github.jameshnsears.quoteunquote.R;
 import com.github.jameshnsears.quoteunquote.cloud.transfer.TransferRestoreResponse;
 import com.github.jameshnsears.quoteunquote.cloud.transfer.restore.TransferRestore;
+import com.github.jameshnsears.quoteunquote.configure.fragment.quotations.QuotationsFragmentStateAdapter;
 import com.github.jameshnsears.quoteunquote.configure.fragment.sync.SyncFragment;
 import com.github.jameshnsears.quoteunquote.configure.fragment.sync.SyncPreferences;
 import com.github.jameshnsears.quoteunquote.database.DatabaseRepository;
@@ -78,6 +79,11 @@ public class CloudServiceRestore extends CloudService {
                                 DatabaseRepository.getInstance(context),
                                 transferRestoreResponse.getTransfer());
 
+                        // DatabaseRepository.useInternalDatabase
+
+                        QuotationsFragmentStateAdapter.alignSelectionFragmentWithRestore(
+                                intent.getIntExtra("widgetId", 0), context);
+
                         handler.post(() -> Toast.makeText(
                                 context,
                                 context.getString(R.string.fragment_archive_restore_success),
diff --git a/app/src/main/java/com/github/jameshnsears/quoteunquote/cloud/transfer/TransferCommon.kt b/app/src/main/java/com/github/jameshnsears/quoteunquote/cloud/transfer/TransferCommon.kt
old mode 100644
new mode 100755
diff --git a/app/src/main/java/com/github/jameshnsears/quoteunquote/cloud/transfer/TransferUtility.kt b/app/src/main/java/com/github/jameshnsears/quoteunquote/cloud/transfer/TransferUtility.kt
old mode 100644
new mode 100755
diff --git a/app/src/main/java/com/github/jameshnsears/quoteunquote/cloud/transfer/backup/TransferBackup.kt b/app/src/main/java/com/github/jameshnsears/quoteunquote/cloud/transfer/backup/TransferBackup.kt
old mode 100644
new mode 100755
diff --git a/app/src/main/java/com/github/jameshnsears/quoteunquote/cloud/transfer/backup/TransferBackupCurrent.kt b/app/src/main/java/com/github/jameshnsears/quoteunquote/cloud/transfer/backup/TransferBackupCurrent.kt
old mode 100644
new mode 100755
index 9062a0d..d9bb52f
--- a/app/src/main/java/com/github/jameshnsears/quoteunquote/cloud/transfer/backup/TransferBackupCurrent.kt
+++ b/app/src/main/java/com/github/jameshnsears/quoteunquote/cloud/transfer/backup/TransferBackupCurrent.kt
@@ -7,18 +7,51 @@ import com.github.jameshnsears.quoteunquote.database.DatabaseRepository
 
 open class TransferBackupCurrent(val context: Context) {
     fun current(databaseRepository: DatabaseRepository): List<Current> {
-        val widgetIds = TransferUtility.getWidgetIds(context)
+        val originalUseInternalDatabaseState = DatabaseRepository.useInternalDatabase
+
+        val internalDatabaseCurrent =
+            getCurrentFromDatabase(
+                TransferUtility.getWidgetIds(context),
+                databaseRepository,
+                true
+            )
+        val externalDatabaseCurrent =
+            getCurrentFromDatabase(
+                TransferUtility.getWidgetIds(context),
+                databaseRepository,
+                false
+            )
+
+        DatabaseRepository.useInternalDatabase = originalUseInternalDatabaseState
+
+        return internalDatabaseCurrent + externalDatabaseCurrent
+    }
+
+    private fun getCurrentFromDatabase(
+        widgetIds: IntArray,
+        databaseRepository: DatabaseRepository,
+        useInternalDatabase: Boolean
+    ): List<Current> {
+        DatabaseRepository.useInternalDatabase = useInternalDatabase
 
         val currentList = mutableListOf<Current>()
 
         for (widgetIdsIndex in widgetIds.indices) {
             val widgetId = widgetIds[widgetIdsIndex]
-            currentList.add(
-                Current(
-                    databaseRepository.getCurrentQuotation(widgetId).digest,
-                    widgetId
+
+            if (databaseRepository.getCurrentQuotation(widgetId) != null) {
+                currentList.add(
+                    Current(
+                        databaseRepository.getCurrentQuotation(widgetId).digest,
+                        widgetId,
+                        if (useInternalDatabase) {
+                            "internal"
+                        } else {
+                            "external"
+                        }
+                    )
                 )
-            )
+            }
         }
 
         return currentList
diff --git a/app/src/main/java/com/github/jameshnsears/quoteunquote/cloud/transfer/backup/TransferBackupFavourite.kt b/app/src/main/java/com/github/jameshnsears/quoteunquote/cloud/transfer/backup/TransferBackupFavourite.kt
old mode 100644
new mode 100755
index 9fe5f98..6c9e909
--- a/app/src/main/java/com/github/jameshnsears/quoteunquote/cloud/transfer/backup/TransferBackupFavourite.kt
+++ b/app/src/main/java/com/github/jameshnsears/quoteunquote/cloud/transfer/backup/TransferBackupFavourite.kt
@@ -5,13 +5,34 @@ import com.github.jameshnsears.quoteunquote.database.DatabaseRepository
 
 class TransferBackupFavourite {
     fun favourite(databaseRepository: DatabaseRepository): List<Favourite> {
+        val originalUseInternalDatabaseState = DatabaseRepository.useInternalDatabase
+
+        val internalDatabaseFavourites = getFavouritesFromDatabase(databaseRepository, true)
+        val externalDatabaseFavourites = getFavouritesFromDatabase(databaseRepository, false)
+
+        DatabaseRepository.useInternalDatabase = originalUseInternalDatabaseState
+
+        return internalDatabaseFavourites + externalDatabaseFavourites
+    }
+
+    private fun getFavouritesFromDatabase(
+        databaseRepository: DatabaseRepository,
+        useInternalDatabase: Boolean
+    ): List<Favourite> {
+        DatabaseRepository.useInternalDatabase = useInternalDatabase
+
         val favouriteList = mutableListOf<Favourite>()
 
         for (favourite in databaseRepository.favourites) {
             favouriteList.add(
                 Favourite(
                     favourite.digest,
-                    favourite.navigation
+                    favourite.navigation,
+                    if (useInternalDatabase) {
+                        "internal"
+                    } else {
+                        "external"
+                    }
                 )
             )
         }
diff --git a/app/src/main/java/com/github/jameshnsears/quoteunquote/cloud/transfer/backup/TransferBackupPrevious.kt b/app/src/main/java/com/github/jameshnsears/quoteunquote/cloud/transfer/backup/TransferBackupPrevious.kt
old mode 100644
new mode 100755
index 0a59709..83608c8
--- a/app/src/main/java/com/github/jameshnsears/quoteunquote/cloud/transfer/backup/TransferBackupPrevious.kt
+++ b/app/src/main/java/com/github/jameshnsears/quoteunquote/cloud/transfer/backup/TransferBackupPrevious.kt
@@ -5,6 +5,22 @@ import com.github.jameshnsears.quoteunquote.database.DatabaseRepository
 
 open class TransferBackupPrevious {
     fun previous(databaseRepository: DatabaseRepository): List<Previous> {
+        val originalUseInternalDatabaseState = DatabaseRepository.useInternalDatabase
+
+        val internalDatabasePrevious = getPreviousFromDatabase(databaseRepository, true)
+        val externalDatabasePrevious = getPreviousFromDatabase(databaseRepository, false)
+
+        DatabaseRepository.useInternalDatabase = originalUseInternalDatabaseState
+
+        return internalDatabasePrevious + externalDatabasePrevious
+    }
+
+    private fun getPreviousFromDatabase(
+        databaseRepository: DatabaseRepository,
+        useInternalDatabase: Boolean
+    ): List<Previous> {
+        DatabaseRepository.useInternalDatabase = useInternalDatabase
+
         val previousList = mutableListOf<Previous>()
 
         for (previous in databaseRepository.previous) {
@@ -14,7 +30,12 @@ open class TransferBackupPrevious {
                         previous.contentType.contentSelection,
                         previous.digest,
                         previous.navigation,
-                        previous.widgetId
+                        previous.widgetId,
+                        if (useInternalDatabase) {
+                            "internal"
+                        } else {
+                            "external"
+                        }
                     )
                 )
             }
diff --git a/app/src/main/java/com/github/jameshnsears/quoteunquote/cloud/transfer/backup/TransferBackupSettings.kt b/app/src/main/java/com/github/jameshnsears/quoteunquote/cloud/transfer/backup/TransferBackupSettings.kt
old mode 100644
new mode 100755
index 93659a8..7eac464
--- a/app/src/main/java/com/github/jameshnsears/quoteunquote/cloud/transfer/backup/TransferBackupSettings.kt
+++ b/app/src/main/java/com/github/jameshnsears/quoteunquote/cloud/transfer/backup/TransferBackupSettings.kt
@@ -36,7 +36,6 @@ open class TransferBackupSettings(val context: Context) {
 
     fun settingsQuotations(widgetId: Int, context: Context): Quotations {
         val quotationPreferences = QuotationsPreferences(widgetId, context)
-        quotationPreferences.setContentSelection(quotationPreferences.contentSelection)
 
         var all = false
         var author = false
@@ -53,12 +52,19 @@ open class TransferBackupSettings(val context: Context) {
         return Quotations(
             quotationPreferences.contentAddToPreviousAll,
             all,
+
             author,
             quotationPreferences.contentSelectionAuthor,
+
             favourites,
+
             search,
+            quotationPreferences.contentSelectionSearchFavouritesOnly,
             quotationPreferences.contentSelectionSearchCount,
-            quotationPreferences.contentSelectionSearch
+            quotationPreferences.contentSelectionSearch,
+
+            quotationPreferences.databaseInternal,
+            quotationPreferences.databaseExternal
         )
     }
 
diff --git a/app/src/main/java/com/github/jameshnsears/quoteunquote/cloud/transfer/restore/TransferRestore.kt b/app/src/main/java/com/github/jameshnsears/quoteunquote/cloud/transfer/restore/TransferRestore.kt
old mode 100644
new mode 100755
index eaa641a..91edede
--- a/app/src/main/java/com/github/jameshnsears/quoteunquote/cloud/transfer/restore/TransferRestore.kt
+++ b/app/src/main/java/com/github/jameshnsears/quoteunquote/cloud/transfer/restore/TransferRestore.kt
@@ -29,7 +29,7 @@ class TransferRestore : TransferCommon() {
         return builder.create().toJson(TransferRestoreRequest(remoteCodeValue))
     }
 
-    private fun emptySharedPreferencesExceptArchive(context: Context) {
+    private fun emptySharedPreferencesExceptLocalCode(context: Context) {
         val preferencesFacade = PreferencesFacade(context)
         val localCode =
             preferencesFacade.preferenceHelper!!.getPreferenceString(preferencesFacade.localCode)
@@ -42,7 +42,7 @@ class TransferRestore : TransferCommon() {
     }
 
     fun restore(context: Context, databaseRepository: DatabaseRepository, transfer: Transfer) {
-        emptySharedPreferencesExceptArchive(context)
+        emptySharedPreferencesExceptLocalCode(context)
         databaseRepository.eraseForRestore()
 
         restoreFavourite(databaseRepository, transfer.favourites)
@@ -66,12 +66,23 @@ class TransferRestore : TransferCommon() {
         databaseRepository: DatabaseRepository,
         favouriteList: List<Favourite>
     ) {
+        val useInternalDatabase = DatabaseRepository.useInternalDatabase
+
         for (index in (favouriteList.size - 1) downTo 0 step 1) {
             val favourite = favouriteList[index]
-            if (databaseRepository.getQuotation(favourite.digest) != null) {
+
+            if (favourite.db == "internal" || favourite.db == null) {
+                DatabaseRepository.useInternalDatabase = true
                 databaseRepository.markAsFavourite(favourite.digest)
+            } else {
+                if (databaseRepository.countAllExternal().blockingGet() > 0) {
+                    DatabaseRepository.useInternalDatabase = false
+                    databaseRepository.markAsFavourite(favourite.digest)
+                }
             }
         }
+
+        DatabaseRepository.useInternalDatabase = useInternalDatabase
     }
 
     private fun restoreCurrent(
@@ -79,22 +90,39 @@ class TransferRestore : TransferCommon() {
         databaseRepository: DatabaseRepository,
         currentList: List<Current>
     ) {
+        val useInternalDatabase = DatabaseRepository.useInternalDatabase
+
         for (widgetId in TransferUtility.getWidgetIds(context)) {
             for (currentIndex in (currentList.size - 1) downTo 0 step 1) {
                 val current = currentList[currentIndex]
                 var digest = current.digest
 
-                if (databaseRepository.getQuotation(current.digest) == null) {
-                    digest = DatabaseRepository.getDefaultQuotationDigest()
-                }
-
-                val currentQuotation: QuotationEntity? =
-                    databaseRepository.getCurrentQuotation(widgetId)
-                if (currentQuotation == null || currentQuotation.digest != digest) {
-                    databaseRepository.markAsCurrent(widgetId, digest)
+                if (current.db == "internal" || current.db == null) {
+                    DatabaseRepository.useInternalDatabase = true
+                    restoreCurrentDigest(databaseRepository, widgetId, digest)
+                } else {
+                    if (databaseRepository.countAllExternal().blockingGet() > 0) {
+                        DatabaseRepository.useInternalDatabase = false
+                        restoreCurrentDigest(databaseRepository, widgetId, digest)
+                    }
                 }
             }
         }
+
+        DatabaseRepository.useInternalDatabase = useInternalDatabase
+    }
+
+    private fun restoreCurrentDigest(
+        databaseRepository: DatabaseRepository,
+        widgetId: Int,
+        digest: String
+    ) {
+        val currentQuotation: QuotationEntity? =
+            databaseRepository.getCurrentQuotation(widgetId)
+
+        if (currentQuotation == null || currentQuotation.digest != digest) {
+            databaseRepository.markAsCurrent(widgetId, digest)
+        }
     }
 
     private fun restorePrevious(
@@ -102,6 +130,8 @@ class TransferRestore : TransferCommon() {
         databaseRepository: DatabaseRepository,
         previousList: List<Previous>
     ) {
+        val useInternalDatabase = DatabaseRepository.useInternalDatabase
+
         val favourites = ContentSelection.FAVOURITES.contentSelection
         val author = ContentSelection.AUTHOR.contentSelection
         val search = ContentSelection.SEARCH.contentSelection
@@ -110,33 +140,53 @@ class TransferRestore : TransferCommon() {
             for (widgetId in TransferUtility.getWidgetIds(context)) {
                 val previous = previousList[previousIndex]
 
-                if (databaseRepository.getQuotation(previous.digest) != null) {
-                    var contentSelection = ContentSelection.ALL
-                    when (previous.contentType) {
-                        favourites -> contentSelection = ContentSelection.FAVOURITES
-                        author -> contentSelection = ContentSelection.AUTHOR
-                        search -> contentSelection = ContentSelection.SEARCH
-                    }
+                var contentSelection = ContentSelection.ALL
+                when (previous.contentType) {
+                    favourites -> contentSelection = ContentSelection.FAVOURITES
+                    author -> contentSelection = ContentSelection.AUTHOR
+                    search -> contentSelection = ContentSelection.SEARCH
+                }
 
-                    if (databaseRepository.countPreviousDigest(
-                            widgetId,
-                            contentSelection,
-                            previous.digest
-                        ) == 0
-                    ) {
-                        databaseRepository.markAsPrevious(
+                if (previous.db == "internal" || previous.db == null) {
+                    DatabaseRepository.useInternalDatabase = true
+                    restorePreviousDigest(databaseRepository, widgetId, contentSelection, previous)
+                } else {
+                    if (databaseRepository.countAllExternal().blockingGet() > 0) {
+                        DatabaseRepository.useInternalDatabase = false
+                        restorePreviousDigest(
+                            databaseRepository,
                             widgetId,
                             contentSelection,
-                            previous.digest
+                            previous
                         )
-                    } else {
-                        Timber.d("digest already present: digest=%s", previous.digest)
                     }
-                } else {
-                    Timber.d("unknown digest: digest=%s", previous.digest)
                 }
             }
         }
+
+        DatabaseRepository.useInternalDatabase = useInternalDatabase
+    }
+
+    private fun restorePreviousDigest(
+        databaseRepository: DatabaseRepository,
+        widgetId: Int,
+        contentSelection: ContentSelection,
+        previous: Previous
+    ) {
+        if (databaseRepository.countPreviousDigest(
+                widgetId,
+                contentSelection,
+                previous.digest
+            ) == 0
+        ) {
+            databaseRepository.markAsPrevious(
+                widgetId,
+                contentSelection,
+                previous.digest
+            )
+        } else {
+            Timber.d("digest already present: digest=%s", previous.digest)
+        }
     }
 
     private fun restoreSettings(context: Context, settingsList: List<Settings>) {
@@ -193,18 +243,29 @@ class TransferRestore : TransferCommon() {
         quotations: Quotations
     ) {
         val quotationsPreferences = QuotationsPreferences(widgetId, context)
-        quotationsPreferences.contentSelectionAuthor = quotations.contentAuthorName
-        quotationsPreferences.contentSelectionSearchCount = quotations.contentSearchCount
         quotationsPreferences.contentAddToPreviousAll = quotations.contentAddToPreviousAll
+
+        quotationsPreferences.contentSelectionAuthor = quotations.contentAuthorName
+
         quotationsPreferences.contentSelectionSearch = quotations.contentSearchText
+        quotationsPreferences.contentSelectionSearchCount = quotations.contentSearchCount
+
+        if (quotations.contentAuthor) {
+            quotationsPreferences.contentSelection =
+                ContentSelection.AUTHOR
+        } else if (quotations.contentFavourites) {
+            quotationsPreferences.contentSelection =
+                ContentSelection.FAVOURITES
+        } else if (quotations.contentSearch) {
+            quotationsPreferences.contentSelection =
+                ContentSelection.SEARCH
+        } else {
+            quotationsPreferences.contentSelection = ContentSelection.ALL
+        }
 
-        if (quotations.contentAuthor) quotationsPreferences.contentSelection =
-            ContentSelection.AUTHOR
-        else if (quotations.contentFavourites) quotationsPreferences.contentSelection =
-            ContentSelection.FAVOURITES
-        else if (quotations.contentSearch) quotationsPreferences.contentSelection =
-            ContentSelection.SEARCH
-        else quotationsPreferences.contentSelection = ContentSelection.ALL
+        // we always move back to the Internal after a restore
+        quotationsPreferences.databaseInternal = true
+        quotationsPreferences.databaseExternal = false
     }
 
     private fun restoreSettingsAppearance(
@@ -217,7 +278,8 @@ class TransferRestore : TransferCommon() {
         appearancePreferences.appearanceTransparency = appearance.appearanceTransparency
         appearancePreferences.appearanceTextFamily = appearance.appearanceTextFamily
         appearancePreferences.appearanceTextStyle = appearance.appearanceTextStyle
-        appearancePreferences.appearanceTextForceItalicRegular = appearance.appearanceTextForceItalicRegular
+        appearancePreferences.appearanceTextForceItalicRegular =
+            appearance.appearanceTextForceItalicRegular
         appearancePreferences.appearanceQuotationTextColour = appearance.appearanceTextColour
         appearancePreferences.appearanceQuotationTextSize = appearance.appearanceTextSize
         appearancePreferences.appearanceAuthorTextColour = appearance.appearanceAuthorTextColour
@@ -226,7 +288,8 @@ class TransferRestore : TransferCommon() {
         appearancePreferences.appearancePositionTextColour = appearance.appearancePositionTextColour
         appearancePreferences.appearancePositionTextSize = appearance.appearancePositionTextSize
         appearancePreferences.appearancePositionTextHide = appearance.appearancePositionTextHide
-        appearancePreferences.appearanceToolbarHideSeparator = appearance.appearanceToolbarHideSeparator
+        appearancePreferences.appearanceToolbarHideSeparator =
+            appearance.appearanceToolbarHideSeparator
         appearancePreferences.appearanceToolbarColour = appearance.appearanceToolbarColour
         appearancePreferences.appearanceToolbarFavourite = appearance.appearanceToolbarFavourite
         appearancePreferences.appearanceToolbarFirst = appearance.appearanceToolbarFirst
diff --git a/app/src/main/java/com/github/jameshnsears/quoteunquote/configure/ConfigureActivity.java b/app/src/main/java/com/github/jameshnsears/quoteunquote/configure/ConfigureActivity.java
old mode 100644
new mode 100755
index 4405f17..abe1714
--- a/app/src/main/java/com/github/jameshnsears/quoteunquote/configure/ConfigureActivity.java
+++ b/app/src/main/java/com/github/jameshnsears/quoteunquote/configure/ConfigureActivity.java
@@ -19,6 +19,7 @@ import com.github.jameshnsears.quoteunquote.configure.fragment.appearance.Appear
 import com.github.jameshnsears.quoteunquote.configure.fragment.notifications.NotificationsFragment;
 import com.github.jameshnsears.quoteunquote.configure.fragment.quotations.QuotationsFragment;
 import com.github.jameshnsears.quoteunquote.configure.fragment.quotations.QuotationsPreferences;
+import com.github.jameshnsears.quoteunquote.configure.fragment.quotations.tabs.selection.QuotationsSelectionFragment;
 import com.github.jameshnsears.quoteunquote.configure.fragment.sync.SyncFragment;
 import com.github.jameshnsears.quoteunquote.databinding.ActivityConfigureBinding;
 import com.github.jameshnsears.quoteunquote.utils.IntentFactoryHelper;
@@ -90,7 +91,7 @@ public class ConfigureActivity extends AppCompatActivity {
 
     @Override
     public void onBackPressed() {
-        QuotationsFragment.ensureFragmentContentSearchConsistency(widgetId, getApplicationContext());
+        QuotationsSelectionFragment.ensureFragmentContentSearchConsistency(widgetId, getApplicationContext());
         super.onBackPressed();
     }
 
diff --git a/app/src/main/java/com/github/jameshnsears/quoteunquote/configure/ConfigureActivityDouble.java b/app/src/main/java/com/github/jameshnsears/quoteunquote/configure/ConfigureActivityDouble.java
old mode 100644
new mode 100755
diff --git a/app/src/main/java/com/github/jameshnsears/quoteunquote/configure/fragment/FragmentCommon.java b/app/src/main/java/com/github/jameshnsears/quoteunquote/configure/fragment/FragmentCommon.java
old mode 100644
new mode 100755
index 8c55061..7fddf53
--- a/app/src/main/java/com/github/jameshnsears/quoteunquote/configure/fragment/FragmentCommon.java
+++ b/app/src/main/java/com/github/jameshnsears/quoteunquote/configure/fragment/FragmentCommon.java
@@ -1,9 +1,5 @@
 package com.github.jameshnsears.quoteunquote.configure.fragment;
 
-import android.widget.BaseAdapter;
-import android.widget.Spinner;
-
-import androidx.annotation.NonNull;
 import androidx.fragment.app.Fragment;
 
 public class FragmentCommon extends Fragment {
diff --git a/app/src/main/java/com/github/jameshnsears/quoteunquote/configure/fragment/appearance/AppearanceFragment.java b/app/src/main/java/com/github/jameshnsears/quoteunquote/configure/fragment/appearance/AppearanceFragment.java
old mode 100644
new mode 100755
index 1e97e58..98a3965
--- a/app/src/main/java/com/github/jameshnsears/quoteunquote/configure/fragment/appearance/AppearanceFragment.java
+++ b/app/src/main/java/com/github/jameshnsears/quoteunquote/configure/fragment/appearance/AppearanceFragment.java
@@ -56,12 +56,15 @@ public class AppearanceFragment extends FragmentCommon {
             @NonNull final View view, final @NonNull Bundle savedInstanceState) {
 
         pagerAdapter = new AppearanceFragmentStateAdapter(this, widgetId);
-        fragmentAppearanceBinding.viewPager2.setAdapter(pagerAdapter);
+        fragmentAppearanceBinding.viewPager2Appearance.setAdapter(pagerAdapter);
 
-        String[] tabs = {"Style", "Toolbar"};
+        String[] tabs = {
+                getString(R.string.fragment_appearance_style),
+                getString(R.string.fragment_appearance_toolbar)
+        };
         new TabLayoutMediator(
                 fragmentAppearanceBinding.tabLayout,
-                fragmentAppearanceBinding.viewPager2,
+                fragmentAppearanceBinding.viewPager2Appearance,
                 true,
                 false,
                 (tab, position) -> tab.setText(tabs[position])).attach();
diff --git a/app/src/main/java/com/github/jameshnsears/quoteunquote/configure/fragment/appearance/AppearanceFragmentStateAdapter.java b/app/src/main/java/com/github/jameshnsears/quoteunquote/configure/fragment/appearance/AppearanceFragmentStateAdapter.java
old mode 100644
new mode 100755
diff --git a/app/src/main/java/com/github/jameshnsears/quoteunquote/configure/fragment/appearance/AppearancePreferences.java b/app/src/main/java/com/github/jameshnsears/quoteunquote/configure/fragment/appearance/AppearancePreferences.java
old mode 100644
new mode 100755
diff --git a/app/src/main/java/com/github/jameshnsears/quoteunquote/configure/fragment/appearance/tabs/style/AppearanceStyleFragment.java b/app/src/main/java/com/github/jameshnsears/quoteunquote/configure/fragment/appearance/tabs/style/AppearanceStyleFragment.java
old mode 100644
new mode 100755
index d55bca1..7b69609
--- a/app/src/main/java/com/github/jameshnsears/quoteunquote/configure/fragment/appearance/tabs/style/AppearanceStyleFragment.java
+++ b/app/src/main/java/com/github/jameshnsears/quoteunquote/configure/fragment/appearance/tabs/style/AppearanceStyleFragment.java
@@ -83,7 +83,7 @@ public class AppearanceStyleFragment extends FragmentCommon {
             @NonNull Bundle savedInstanceState) {
         appearancePreferences = new AppearancePreferences(this.widgetId, getContext());
 
-        quoteUnquoteModel = new QuoteUnquoteModel(getContext());
+        quoteUnquoteModel = new QuoteUnquoteModel(widgetId, getContext());
 
         fragmentAppearanceTabStyleBinding
                 = FragmentAppearanceTabStyleBinding.inflate(inflater.cloneInContext(
diff --git a/app/src/main/java/com/github/jameshnsears/quoteunquote/configure/fragment/appearance/tabs/style/AppearanceTextFamilySpinnerAdapter.kt b/app/src/main/java/com/github/jameshnsears/quoteunquote/configure/fragment/appearance/tabs/style/AppearanceTextFamilySpinnerAdapter.kt
old mode 100644
new mode 100755
diff --git a/app/src/main/java/com/github/jameshnsears/quoteunquote/configure/fragment/appearance/tabs/style/AppearanceTextStyleSpinnerAdapter.kt b/app/src/main/java/com/github/jameshnsears/quoteunquote/configure/fragment/appearance/tabs/style/AppearanceTextStyleSpinnerAdapter.kt
old mode 100644
new mode 100755
diff --git a/app/src/main/java/com/github/jameshnsears/quoteunquote/configure/fragment/appearance/tabs/style/text/AppearanceTextDialogAuthor.java b/app/src/main/java/com/github/jameshnsears/quoteunquote/configure/fragment/appearance/tabs/style/text/AppearanceTextDialogAuthor.java
old mode 100644
new mode 100755
index 149fcbc..65f38eb
--- a/app/src/main/java/com/github/jameshnsears/quoteunquote/configure/fragment/appearance/tabs/style/text/AppearanceTextDialogAuthor.java
+++ b/app/src/main/java/com/github/jameshnsears/quoteunquote/configure/fragment/appearance/tabs/style/text/AppearanceTextDialogAuthor.java
@@ -4,13 +4,9 @@ import static android.view.View.VISIBLE;
 
 import android.widget.Spinner;
 
-import androidx.annotation.NonNull;
-
 import com.github.jameshnsears.quoteunquote.R;
 import com.skydoves.colorpickerview.ColorEnvelope;
 
-import timber.log.Timber;
-
 public class AppearanceTextDialogAuthor extends AppearanceTextDialogFragment {
     public AppearanceTextDialogAuthor(int widgetId) {
         super(widgetId, R.string.fragment_appearance_style_text_dialog_author);
diff --git a/app/src/main/java/com/github/jameshnsears/quoteunquote/configure/fragment/appearance/tabs/style/text/AppearanceTextDialogFragment.java b/app/src/main/java/com/github/jameshnsears/quoteunquote/configure/fragment/appearance/tabs/style/text/AppearanceTextDialogFragment.java
old mode 100644
new mode 100755
index dd71950..1eb7d63
--- a/app/src/main/java/com/github/jameshnsears/quoteunquote/configure/fragment/appearance/tabs/style/text/AppearanceTextDialogFragment.java
+++ b/app/src/main/java/com/github/jameshnsears/quoteunquote/configure/fragment/appearance/tabs/style/text/AppearanceTextDialogFragment.java
@@ -11,7 +11,6 @@ import android.view.View;
 import android.view.ViewGroup;
 import android.widget.AdapterView;
 import android.widget.ArrayAdapter;
-import android.widget.BaseAdapter;
 import android.widget.Spinner;
 import android.widget.TextView;
 
@@ -22,8 +21,6 @@ import androidx.fragment.app.DialogFragment;
 
 import com.github.jameshnsears.quoteunquote.R;
 import com.github.jameshnsears.quoteunquote.configure.fragment.appearance.AppearancePreferences;
-import com.github.jameshnsears.quoteunquote.configure.fragment.appearance.tabs.style.AppearanceTextFamilySpinnerAdapter;
-import com.github.jameshnsears.quoteunquote.configure.fragment.appearance.tabs.style.AppearanceTextStyleSpinnerAdapter;
 import com.github.jameshnsears.quoteunquote.databinding.FragmentAppearanceTabStyleDialogBinding;
 import com.skydoves.colorpickerview.ColorEnvelope;
 import com.skydoves.colorpickerview.ColorPickerDialog;
diff --git a/app/src/main/java/com/github/jameshnsears/quoteunquote/configure/fragment/appearance/tabs/style/text/AppearanceTextDialogPosition.java b/app/src/main/java/com/github/jameshnsears/quoteunquote/configure/fragment/appearance/tabs/style/text/AppearanceTextDialogPosition.java
old mode 100644
new mode 100755
index c22198e..44e2731
--- a/app/src/main/java/com/github/jameshnsears/quoteunquote/configure/fragment/appearance/tabs/style/text/AppearanceTextDialogPosition.java
+++ b/app/src/main/java/com/github/jameshnsears/quoteunquote/configure/fragment/appearance/tabs/style/text/AppearanceTextDialogPosition.java
@@ -4,8 +4,6 @@ import static android.view.View.VISIBLE;
 
 import android.widget.Spinner;
 
-import androidx.annotation.NonNull;
-
 import com.github.jameshnsears.quoteunquote.R;
 import com.skydoves.colorpickerview.ColorEnvelope;
 
diff --git a/app/src/main/java/com/github/jameshnsears/quoteunquote/configure/fragment/appearance/tabs/style/text/AppearanceTextDialogQuotation.java b/app/src/main/java/com/github/jameshnsears/quoteunquote/configure/fragment/appearance/tabs/style/text/AppearanceTextDialogQuotation.java
old mode 100644
new mode 100755
diff --git a/app/src/main/java/com/github/jameshnsears/quoteunquote/configure/fragment/appearance/tabs/toolbar/AppearanceToolbarFragment.java b/app/src/main/java/com/github/jameshnsears/quoteunquote/configure/fragment/appearance/tabs/toolbar/AppearanceToolbarFragment.java
old mode 100644
new mode 100755
diff --git a/app/src/main/java/com/github/jameshnsears/quoteunquote/configure/fragment/notifications/NotificationsDailyAlarm.java b/app/src/main/java/com/github/jameshnsears/quoteunquote/configure/fragment/notifications/NotificationsDailyAlarm.java
old mode 100644
new mode 100755
diff --git a/app/src/main/java/com/github/jameshnsears/quoteunquote/configure/fragment/notifications/NotificationsFragment.java b/app/src/main/java/com/github/jameshnsears/quoteunquote/configure/fragment/notifications/NotificationsFragment.java
old mode 100644
new mode 100755
diff --git a/app/src/main/java/com/github/jameshnsears/quoteunquote/configure/fragment/notifications/NotificationsPreferences.java b/app/src/main/java/com/github/jameshnsears/quoteunquote/configure/fragment/notifications/NotificationsPreferences.java
old mode 100644
new mode 100755
diff --git a/app/src/main/java/com/github/jameshnsears/quoteunquote/configure/fragment/quotations/QuotationsFragment.java b/app/src/main/java/com/github/jameshnsears/quoteunquote/configure/fragment/quotations/QuotationsFragment.java
old mode 100644
new mode 100755
index 1c16dd1..4b7f694
--- a/app/src/main/java/com/github/jameshnsears/quoteunquote/configure/fragment/quotations/QuotationsFragment.java
+++ b/app/src/main/java/com/github/jameshnsears/quoteunquote/configure/fragment/quotations/QuotationsFragment.java
@@ -1,72 +1,28 @@
 package com.github.jameshnsears.quoteunquote.configure.fragment.quotations;
 
-import android.app.Activity;
 import android.content.Context;
-import android.content.Intent;
 import android.os.Bundle;
-import android.os.ParcelFileDescriptor;
 import android.view.LayoutInflater;
 import android.view.View;
 import android.view.ViewGroup;
-import android.widget.AdapterView;
-import android.widget.ArrayAdapter;
-import android.widget.Button;
-import android.widget.EditText;
-import android.widget.RadioGroup;
-import android.widget.Toast;
 
-import androidx.activity.result.ActivityResultLauncher;
-import androidx.activity.result.contract.ActivityResultContracts;
 import androidx.annotation.Keep;
 import androidx.annotation.NonNull;
 import androidx.annotation.Nullable;
+import androidx.appcompat.view.ContextThemeWrapper;
 
-import com.github.jameshnsears.quoteunquote.QuoteUnquoteModel;
 import com.github.jameshnsears.quoteunquote.R;
-import com.github.jameshnsears.quoteunquote.configure.ConfigureActivity;
 import com.github.jameshnsears.quoteunquote.configure.fragment.FragmentCommon;
-import com.github.jameshnsears.quoteunquote.database.quotation.AuthorPOJO;
 import com.github.jameshnsears.quoteunquote.databinding.FragmentQuotationsBinding;
-import com.github.jameshnsears.quoteunquote.utils.ContentSelection;
-import com.github.jameshnsears.quoteunquote.utils.CSVHelper;
-import com.github.jameshnsears.quoteunquote.utils.audit.AuditEventHelper;
-import com.jakewharton.rxbinding2.widget.RxTextView;
-
-import java.io.FileOutputStream;
-import java.io.IOException;
-import java.util.ArrayList;
-import java.util.List;
-import java.util.concurrent.ConcurrentHashMap;
-import java.util.concurrent.CountDownLatch;
-import java.util.concurrent.TimeUnit;
-
-import io.reactivex.android.schedulers.AndroidSchedulers;
-import io.reactivex.disposables.CompositeDisposable;
-import io.reactivex.observers.DisposableObserver;
-import io.reactivex.observers.DisposableSingleObserver;
-import io.reactivex.schedulers.Schedulers;
-import timber.log.Timber;
+import com.google.android.material.tabs.TabLayoutMediator;
 
 @Keep
 public class QuotationsFragment extends FragmentCommon {
-    @NonNull
-    private final CompositeDisposable disposables = new CompositeDisposable();
-    @Nullable
-    public QuoteUnquoteModel quoteUnquoteModel;
     @Nullable
     public FragmentQuotationsBinding fragmentQuotationsBinding;
-    @NonNull
-    public CountDownLatch latchAllCount = new CountDownLatch(1);
-    @NonNull
-    public CountDownLatch latchAuthor = new CountDownLatch(1);
-    @NonNull
-    public CountDownLatch latchFavouriteCount = new CountDownLatch(1);
-    @Nullable
-    protected QuotationsPreferences quotationsPreferences;
-    @Nullable
-    private DisposableObserver<Integer> disposableObserver;
+
     @Nullable
-    private ActivityResultLauncher<Intent> activityResultLauncher;
+    private QuotationsFragmentStateAdapter pagerAdapter;
 
     public QuotationsFragment() {
         // dark mode support
@@ -83,446 +39,45 @@ public class QuotationsFragment extends FragmentCommon {
         return fragment;
     }
 
-    public static void ensureFragmentContentSearchConsistency(
-            final int widgetId,
-            @NonNull Context context
-    ) {
-        final QuotationsPreferences quotationsPreferences = new QuotationsPreferences(widgetId, context);
-
-        if (quotationsPreferences.getContentSelection() == ContentSelection.SEARCH
-                && quotationsPreferences.getContentSelectionSearchCount() == 0) {
-            quotationsPreferences.setContentSelection(ContentSelection.ALL);
-            Toast.makeText(
-                    context,
-                    context.getString(R.string.fragment_quotations_search_no_results),
-                    Toast.LENGTH_SHORT).show();
-        }
-    }
-
-    @Override
-    public void onCreate(@NonNull final Bundle savedInstanceState) {
-        super.onCreate(savedInstanceState);
-
-        this.quoteUnquoteModel = new QuoteUnquoteModel(this.getContext());
-    }
-
     @Override
     @NonNull
     public View onCreateView(
             @NonNull final LayoutInflater inflater,
-            @NonNull final ViewGroup container,
-            @NonNull final Bundle savedInstanceState) {
-        this.quotationsPreferences = new QuotationsPreferences(this.widgetId, this.getContext());
+            final @NonNull ViewGroup container,
+            final @NonNull Bundle savedInstanceState) {
+        final Context context = new ContextThemeWrapper(getActivity(), R.style.Theme_MaterialComponents_DayNight);
 
-        this.fragmentQuotationsBinding = FragmentQuotationsBinding.inflate(this.getLayoutInflater());
-        return this.fragmentQuotationsBinding.getRoot();
+        fragmentQuotationsBinding = FragmentQuotationsBinding.inflate(inflater.cloneInContext(context));
+        return fragmentQuotationsBinding.getRoot();
     }
 
     @Override
-    public void onDestroyView() {
-        super.onDestroyView();
-
-        ensureFragmentContentSearchConsistency(this.widgetId, this.getContext());
-
-        this.fragmentQuotationsBinding = null;
-
-        this.shutdown();
-    }
-
-    public void shutdown() {
-        this.disposables.clear();
-        this.disposables.dispose();
-
-        if (this.disposableObserver != null) {
-            this.disposableObserver.dispose();
-        }
-    }
-
-    protected void setSearch() {
-        this.setSearchObserver();
-
-        final String editTextKeywords = this.quotationsPreferences.getContentSelectionSearch();
-
-        if (editTextKeywords.length() > 0) {
-            final ConcurrentHashMap<String, String> properties = new ConcurrentHashMap<>();
-            properties.put("Text", editTextKeywords);
-            AuditEventHelper.auditEvent("SEARCH", properties);
-            this.fragmentQuotationsBinding.editTextSearchText.setText(editTextKeywords);
-        }
-    }
-
-    protected void setSearchObserver() {
-        this.disposableObserver = new DisposableObserver<Integer>() {
-            @Override
-            public void onNext(@NonNull final Integer value) {
-                fragmentQuotationsBinding.radioButtonSearch.setText(
-                        getResources().getString(R.string.fragment_quotations_search, value));
-                quotationsPreferences.setContentSelectionSearchCount(value);
-            }
+    public void onViewCreated(
+            @NonNull final View view, final @NonNull Bundle savedInstanceState) {
 
-            @Override
-            public void onError(@NonNull final Throwable throwable) {
-                Timber.d("onError=%s", throwable.getMessage());
-            }
+        pagerAdapter = new QuotationsFragmentStateAdapter(this, widgetId);
+        fragmentQuotationsBinding.viewPager2Quotations.setAdapter(pagerAdapter);
 
-            @Override
-            public void onComplete() {
-                Timber.d("onComplete");
-            }
+        String[] tabs = {
+                getString(R.string.fragment_quotations_selection),
+                getString(R.string.fragment_quotations_database)
         };
 
-        RxTextView.textChanges(fragmentQuotationsBinding.editTextSearchText)
-                .debounce(25, TimeUnit.MILLISECONDS)
-                .subscribeOn(Schedulers.io())
-                .map(charSequence -> {
-                    final String keywords = charSequence.toString();
-
-                    if (!keywords.equals("")) {
-                        Timber.d("%s", keywords);
-
-                        // remove any prior, different, search results in the history
-                        if (!keywords.equals(quotationsPreferences.getContentSelectionSearch())) {
-                            quoteUnquoteModel.resetPrevious(this.widgetId, ContentSelection.SEARCH);
-                        }
-
-                        quotationsPreferences.setContentSelectionSearch(keywords);
-
-                        return quoteUnquoteModel.countQuotationWithSearchText(keywords);
-                    } else {
-                        quotationsPreferences.setContentSelectionSearch("");
-                        return 0;
-                    }
-                })
-                .observeOn(AndroidSchedulers.mainThread())
-                .subscribe(disposableObserver);
+        new TabLayoutMediator(
+                fragmentQuotationsBinding.tabLayout,
+                fragmentQuotationsBinding.viewPager2Quotations,
+                true,
+                false,
+                (tab, position) -> tab.setText(tabs[position])).attach();
     }
 
     @Override
-    public void onViewCreated(
-            @NonNull final View view, @NonNull final Bundle savedInstanceState) {
-        setInitialCounts();
-
-        setFavouriteCount();
-        setAllCount();
-        setAddToPreviousAll();
-        setAuthor();
-        setSearch();
-
-        createListenerRadioGroup();
-        createListenerAddToPreviousAll();
-        createListenerAuthor();
-        createListenerFavouriteButtonExport();
-
-        handleExportResult();
-
-        setSelection();
-    }
-
-    private void setInitialCounts() {
-        fragmentQuotationsBinding.radioButtonAll.setText(
-                getResources().getString(R.string.fragment_quotations_all,
-                        0));
-
-        fragmentQuotationsBinding.radioButtonAuthor.setText(
-                getResources().getString(R.string.fragment_quotations_author,
-                        0));
-
-        fragmentQuotationsBinding.radioButtonFavourites.setText(
-                getResources().getString(R.string.fragment_quotations_favourites,
-                        0));
-
-        fragmentQuotationsBinding.radioButtonSearch.setText(
-                getResources().getString(R.string.fragment_quotations_search,
-                        0));
-    }
-
-    protected void setAddToPreviousAll() {
-        fragmentQuotationsBinding.switchAddToPreviousAll.setChecked(quotationsPreferences.getContentAddToPreviousAll());
-    }
-
-    public void setAllCount() {
-        disposables.add(quoteUnquoteModel.countAll()
-                .subscribeOn(Schedulers.io())
-                .observeOn(AndroidSchedulers.mainThread())
-                .subscribeWith(
-                        new DisposableSingleObserver<Integer>() {
-                            @Override
-                            public void onSuccess(@NonNull final Integer value) {
-                                fragmentQuotationsBinding.radioButtonAll.setText(
-                                        getResources().getString(R.string.fragment_quotations_all, value));
-
-                                synchronized (this) {
-                                    latchAllCount.countDown();
-                                }
-                            }
-
-                            @Override
-                            public void onError(@NonNull final Throwable throwable) {
-                                Timber.d("onError=%s", throwable.getMessage());
-                            }
-                        }));
-    }
-
-    protected void setAuthor() {
-        disposables.add(quoteUnquoteModel.authors()
-                .subscribeOn(Schedulers.io())
-                .observeOn(AndroidSchedulers.mainThread())
-                .subscribeWith(
-                        new DisposableSingleObserver<List<AuthorPOJO>>() {
-                            @Override
-                            public void onSuccess(@NonNull final List<AuthorPOJO> authorPOJOList) {
-                                final List<String> authors
-                                        = quoteUnquoteModel.authorsSorted(authorPOJOList);
-
-                                final ArrayAdapter<String> adapter = new ArrayAdapter<>(
-                                        getContext(),
-                                        R.layout.spinner_item,
-                                        authors);
-                                adapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);
-                                fragmentQuotationsBinding.spinnerAuthors.setAdapter(adapter);
-
-                                if ("".equals(quotationsPreferences.getContentSelectionAuthor())) {
-                                    quotationsPreferences.setContentSelectionAuthor(authors.get(0));
-                                }
-
-                                setAuthorName();
-
-                                synchronized (this) {
-                                    latchAuthor.countDown();
-                                }
-                            }
-
-                            @Override
-                            public void onError(@NonNull final Throwable throwable) {
-                                Timber.d("onError=%s", throwable.getMessage());
-                            }
-                        }));
-    }
-
-    protected void setAuthorName() {
-        final String authorPreference = quotationsPreferences.getContentSelectionAuthor();
-
-        fragmentQuotationsBinding.spinnerAuthors.setSelection(
-                quoteUnquoteModel.authorsIndex(authorPreference));
-
-        fragmentQuotationsBinding.radioButtonAuthor.setText(
-                getResources().getString(
-                        R.string.fragment_quotations_author,
-                        quoteUnquoteModel.countAuthorQuotations(authorPreference)));
-
-    }
-
-    public void setFavouriteCount() {
-        disposables.add(quoteUnquoteModel.countFavourites()
-                .subscribeOn(Schedulers.io())
-                .observeOn(AndroidSchedulers.mainThread())
-                .subscribeWith(
-                        new DisposableSingleObserver<Integer>() {
-                            @Override
-                            public void onSuccess(@NonNull final Integer value) {
-                                fragmentQuotationsBinding.radioButtonFavourites.setEnabled(true);
-                                if (value == 0) {
-                                    fragmentQuotationsBinding.radioButtonFavourites.setEnabled(false);
-
-                                    fragmentQuotationsBinding.buttonExport.setEnabled(false);
-                                    QuotationsFragment.this.makeButtonAlpha(fragmentQuotationsBinding.buttonExport, false);
-                                    fragmentQuotationsBinding.textViewLocalStorageInstructions.setEnabled(false);
-
-                                    // in case another widget instance changes favourites
-                                    if (QuotationsFragment.this.quotationsPreferences.getContentSelection().equals(ContentSelection.FAVOURITES)) {
-                                        QuotationsFragment.this.quotationsPreferences.setContentSelection(ContentSelection.ALL);
-                                    }
-                                } else {
-                                    fragmentQuotationsBinding.buttonExport.setEnabled(true);
-                                    QuotationsFragment.this.makeButtonAlpha(fragmentQuotationsBinding.buttonExport, true);
-                                    fragmentQuotationsBinding.textViewLocalStorageInstructions.setEnabled(true);
-                                }
-
-                                fragmentQuotationsBinding.radioButtonFavourites.setText(
-                                        getResources().getString(R.string.fragment_quotations_favourites, value));
-
-                                synchronized (this) {
-                                    latchFavouriteCount.countDown();
-                                }
-                            }
-
-                            @Override
-                            public void onError(@NonNull final Throwable throwable) {
-                                Timber.d("onError=%s", throwable.getMessage());
-                            }
-                        }));
-    }
-
-    protected void setSelection() {
-        enableAuthor(false);
-        enableSearch(false);
-
-        switch (quotationsPreferences.getContentSelection()) {
-            case ALL:
-                setSelectionAll();
-                break;
-            case AUTHOR:
-                setSelectionAuthor();
-                break;
-            case FAVOURITES:
-                setSelectionFavourites();
-                break;
-            case SEARCH:
-                setSelectionSearch();
-                break;
-            default:
-                Timber.e("unknown switch");
-                break;
-        }
-    }
-
-    private void setSelectionAll() {
-        fragmentQuotationsBinding.radioButtonAll.setChecked(true);
-    }
-
-    private void setSelectionAuthor() {
-        fragmentQuotationsBinding.radioButtonAuthor.setChecked(true);
-        enableAuthor(true);
-    }
-
-    private void setSelectionFavourites() {
-        fragmentQuotationsBinding.radioButtonFavourites.setChecked(true);
-    }
-
-    private void setSelectionSearch() {
-        fragmentQuotationsBinding.radioButtonSearch.setChecked(true);
-        enableSearch(true);
-
-        fragmentQuotationsBinding.radioButtonSearch.requestFocus();
-
-        final String searchText = quotationsPreferences.getContentSelectionSearch();
-
-        if (!searchText.equals("") && !quotationsPreferences.getContentSelectionSearch().equals(searchText)) {
-            quotationsPreferences.setContentSelectionSearch(searchText);
-
-            final EditText editTextKeywordsSearch = fragmentQuotationsBinding.editTextSearchText;
-            editTextKeywordsSearch.setText(searchText);
-        }
-    }
-
-    protected void createListenerRadioGroup() {
-        final RadioGroup radioGroupContent = fragmentQuotationsBinding.radioGroupContent;
-        radioGroupContent.setOnCheckedChangeListener((group, checkedId) -> {
-
-            enableAuthor(false);
-            enableSearch(false);
-
-            if (checkedId == fragmentQuotationsBinding.radioButtonAll.getId()) {
-                quotationsPreferences.setContentSelection(ContentSelection.ALL);
-            }
-
-            if (checkedId == fragmentQuotationsBinding.radioButtonAuthor.getId()) {
-                enableAuthor(true);
-                quotationsPreferences.setContentSelection(ContentSelection.AUTHOR);
-            }
-
-            if (checkedId == fragmentQuotationsBinding.radioButtonFavourites.getId()) {
-                quotationsPreferences.setContentSelection(ContentSelection.FAVOURITES);
-            }
-
-            if (checkedId == fragmentQuotationsBinding.radioButtonSearch.getId()) {
-                enableSearch(true);
-                quotationsPreferences.setContentSelection(ContentSelection.SEARCH);
-            }
-        });
-    }
-
-    private void enableAuthor(final boolean enable) {
-        fragmentQuotationsBinding.spinnerAuthors.setEnabled(enable);
-    }
-
-    public void makeButtonAlpha(@NonNull final Button button, final boolean enable) {
-        button.setAlpha(enable ? 1 : 0.25f);
-    }
-
-    private void enableSearch(final boolean enable) {
-        fragmentQuotationsBinding.editTextSearchText.setEnabled(enable);
-    }
-
-    protected void createListenerAuthor() {
-        fragmentQuotationsBinding.spinnerAuthors.setOnItemSelectedListener(new AdapterView.OnItemSelectedListener() {
-            @Override
-            public void onItemSelected(final AdapterView<?> parent, final View view, final int position, final long selectedItemId) {
-                final String author = fragmentQuotationsBinding.spinnerAuthors.getSelectedItem().toString();
-                fragmentQuotationsBinding.radioButtonAuthor.setText(
-                        getResources().getString(R.string.fragment_quotations_author,
-                                quoteUnquoteModel.countAuthorQuotations(author)));
-
-                if (!quotationsPreferences.getContentSelectionAuthor().equals(author)) {
-                    Timber.d("author=%s", author);
-                    final ConcurrentHashMap<String, String> properties = new ConcurrentHashMap<>();
-                    properties.put("Author", author);
-                    AuditEventHelper.auditEvent("AUTHOR", properties);
-
-                    quotationsPreferences.setContentSelectionAuthor(author);
-                }
-            }
-
-            @Override
-            public void onNothingSelected(final AdapterView<?> parent) {
-                // do nothing
-            }
-        });
-    }
-
-    protected void createListenerAddToPreviousAll() {
-        fragmentQuotationsBinding.switchAddToPreviousAll.setOnCheckedChangeListener((buttonView, isChecked) ->
-                quotationsPreferences.setContentAddToPreviousAll(isChecked)
-        );
-    }
-
-    protected void createListenerFavouriteButtonExport() {
-        // invoke Storage Access Framework
-        fragmentQuotationsBinding.buttonExport.setOnClickListener(v -> {
-            if (fragmentQuotationsBinding.buttonExport.isEnabled()) {
-                ConfigureActivity.safCalled = true;
-
-                final Intent intent = new Intent(Intent.ACTION_CREATE_DOCUMENT);
-                intent.addCategory(Intent.CATEGORY_OPENABLE);
-                intent.setType("text/csv");
-                intent.putExtra(Intent.EXTRA_TITLE, "Favourites.csv");
-                activityResultLauncher.launch(intent);
-            }
-        });
-    }
-
-    protected final void handleExportResult() {
-        // default: /storage/emulated/0/Download/Favourites.csv
-        activityResultLauncher = registerForActivityResult(
-                new ActivityResultContracts.StartActivityForResult(),
-                activityResult -> {
-                    if (activityResult.getResultCode() == Activity.RESULT_OK) {
-
-                        try {
-                            final ParcelFileDescriptor parcelFileDescriptor
-                                    = getContext().getContentResolver().openFileDescriptor(
-                                    activityResult.getData().getData(), "w");
-                            final FileOutputStream fileOutputStream
-                                    = new FileOutputStream(parcelFileDescriptor.getFileDescriptor());
-
-                            new CSVHelper()
-                                    .csvWriteFavourites(
-                                            fileOutputStream,
-                                            (ArrayList) quoteUnquoteModel.exportFavourites());
-
-                            fileOutputStream.close();
-                            parcelFileDescriptor.close();
+    public void onDestroyView() {
+        fragmentQuotationsBinding = null;
 
-                            Toast.makeText(
-                                    getContext(),
-                                    getContext().getString(R.string.fragment_quotations_favourites_export_success),
-                                    Toast.LENGTH_SHORT).show();
-                        } catch (final IOException e) {
-                            Timber.e(e.getMessage());
-                        }
-                    }
+        QuotationsFragmentStateAdapter.quotationsSelectionFragment.shutdown();
+        QuotationsFragmentStateAdapter.quotationsSelectionFragment = null;
 
-                    ConfigureActivity.safCalled = false;
-                });
+        super.onDestroyView();
     }
 }
diff --git a/app/src/main/java/com/github/jameshnsears/quoteunquote/configure/fragment/quotations/QuotationsFragmentStateAdapter.java b/app/src/main/java/com/github/jameshnsears/quoteunquote/configure/fragment/quotations/QuotationsFragmentStateAdapter.java
new file mode 100755
index 0000000..f924480
--- /dev/null
+++ b/app/src/main/java/com/github/jameshnsears/quoteunquote/configure/fragment/quotations/QuotationsFragmentStateAdapter.java
@@ -0,0 +1,61 @@
+package com.github.jameshnsears.quoteunquote.configure.fragment.quotations;
+
+import android.content.Context;
+
+import androidx.annotation.NonNull;
+import androidx.fragment.app.Fragment;
+import androidx.viewpager2.adapter.FragmentStateAdapter;
+
+import com.github.jameshnsears.quoteunquote.configure.fragment.quotations.tabs.database.QuotationsDatabaseFragment;
+import com.github.jameshnsears.quoteunquote.configure.fragment.quotations.tabs.selection.QuotationsSelectionFragment;
+import com.github.jameshnsears.quoteunquote.database.DatabaseRepository;
+import com.github.jameshnsears.quoteunquote.utils.ContentSelection;
+
+public class QuotationsFragmentStateAdapter extends FragmentStateAdapter {
+    private final int widgetId;
+
+    public static QuotationsSelectionFragment quotationsSelectionFragment;
+
+    public QuotationsFragmentStateAdapter(@NonNull final QuotationsFragment fa, final int widgetId) {
+        super(fa);
+        this.widgetId = widgetId;
+    }
+
+    @NonNull
+    @Override
+    public Fragment createFragment(final int pos) {
+        if (quotationsSelectionFragment == null) {
+            quotationsSelectionFragment = QuotationsSelectionFragment.newInstance(widgetId);
+        }
+
+        switch (pos) {
+            case 0:
+                return quotationsSelectionFragment;
+
+            default:
+                return QuotationsDatabaseFragment.newInstance(widgetId);
+        }
+    }
+
+    public static void alignSelectionFragmentWithSelectedDatabase(int widgetId, @NonNull Context context) {
+        QuotationsPreferences quotationsPreferences = new QuotationsPreferences(widgetId, context);
+        quotationsPreferences.setContentSelection(ContentSelection.ALL);
+        quotationsPreferences.setContentSelectionAuthor("");
+
+        if (quotationsSelectionFragment != null) {
+            quotationsSelectionFragment.initUi();
+        }
+    }
+
+    public static void alignSelectionFragmentWithRestore(int widgetId, @NonNull Context context) {
+        // we always move back to the Internal after a restore
+        DatabaseRepository.useInternalDatabase = true;
+
+        alignSelectionFragmentWithSelectedDatabase(widgetId, context);
+    }
+
+    @Override
+    public int getItemCount() {
+        return 2;
+    }
+}
diff --git a/app/src/main/java/com/github/jameshnsears/quoteunquote/configure/fragment/quotations/QuotationsPreferences.java b/app/src/main/java/com/github/jameshnsears/quoteunquote/configure/fragment/quotations/QuotationsPreferences.java
old mode 100644
new mode 100755
index f5edc57..98cdd93
--- a/app/src/main/java/com/github/jameshnsears/quoteunquote/configure/fragment/quotations/QuotationsPreferences.java
+++ b/app/src/main/java/com/github/jameshnsears/quoteunquote/configure/fragment/quotations/QuotationsPreferences.java
@@ -11,13 +11,36 @@ import timber.log.Timber;
 
 public class QuotationsPreferences extends PreferencesFacade {
     public static final String CONTENT_ALL = "CONTENT_ALL";
+    public static final String CONTENT_ADD_TO_PREVIOUS_ALL = "CONTENT_ADD_TO_PREVIOUS_ALL";
     public static final String CONTENT_AUTHOR = "CONTENT_AUTHOR";
     public static final String CONTENT_AUTHOR_NAME = "CONTENT_AUTHOR_NAME";
     public static final String CONTENT_FAVOURITES = "CONTENT_FAVOURITES";
     public static final String CONTENT_SEARCH = "CONTENT_SEARCH";
+    public static final String CONTENT_SEARCH_FAVOURITES_ONLY = "CONTENT_SEARCH_FAVOURITES_ONLY";
     public static final String CONTENT_SEARCH_COUNT = "CONTENT_SEARCH_COUNT";
     public static final String CONTENT_SEARCH_TEXT = "CONTENT_SEARCH_TEXT";
-    public static final String CONTENT_ADD_TO_PREVIOUS_ALL = "CONTENT_ADD_TO_PREVIOUS_ALL";
+
+    public static final String DATABASE_INTERNAL = "DATABASE_INTERNAL";
+    public static final String DATABASE_EXTERNAL = "DATABASE_EXTERNAL";
+    public static final String DATABASE_EXTERNAL_FILENAME = "DATABASE_EXTERNAL_PATH";
+
+    @NonNull
+    public boolean getDatabaseInternal() {
+        return this.preferenceHelper.getPreferenceBoolean(this.getPreferenceKey(QuotationsPreferences.DATABASE_INTERNAL), true);
+    }
+
+    public void setDatabaseInternal(@NonNull boolean value) {
+        this.preferenceHelper.setPreference(this.getPreferenceKey(QuotationsPreferences.DATABASE_INTERNAL), value);
+    }
+
+    @NonNull
+    public boolean getDatabaseExternal() {
+        return this.preferenceHelper.getPreferenceBoolean(this.getPreferenceKey(QuotationsPreferences.DATABASE_EXTERNAL), false);
+    }
+
+    public void setDatabaseExternal(@NonNull boolean value) {
+        this.preferenceHelper.setPreference(this.getPreferenceKey(QuotationsPreferences.DATABASE_EXTERNAL), value);
+    }
 
     public QuotationsPreferences(@NonNull Context applicationContext) {
         super(0, applicationContext);
@@ -27,6 +50,15 @@ public class QuotationsPreferences extends PreferencesFacade {
         super(widgetId, applicationContext);
     }
 
+    @NonNull
+    public boolean getContentSelectionSearchFavouritesOnly() {
+        return this.preferenceHelper.getPreferenceBoolean(this.getPreferenceKey(QuotationsPreferences.CONTENT_SEARCH_FAVOURITES_ONLY), false);
+    }
+
+    public void setContentSelectionSearchFavouritesOnly(@NonNull boolean value) {
+        this.preferenceHelper.setPreference(this.getPreferenceKey(QuotationsPreferences.CONTENT_SEARCH_FAVOURITES_ONLY), value);
+    }
+
     @NonNull
     public String getContentSelectionAuthor() {
         return this.preferenceHelper.getPreferenceString(this.getPreferenceKey(QuotationsPreferences.CONTENT_AUTHOR_NAME));
diff --git a/app/src/main/java/com/github/jameshnsears/quoteunquote/configure/fragment/quotations/tabs/database/QuotationsDatabaseFragment.java b/app/src/main/java/com/github/jameshnsears/quoteunquote/configure/fragment/quotations/tabs/database/QuotationsDatabaseFragment.java
new file mode 100755
index 0000000..8f5ce5b
--- /dev/null
+++ b/app/src/main/java/com/github/jameshnsears/quoteunquote/configure/fragment/quotations/tabs/database/QuotationsDatabaseFragment.java
@@ -0,0 +1,249 @@
+package com.github.jameshnsears.quoteunquote.configure.fragment.quotations.tabs.database;
+
+import android.app.Activity;
+import android.content.Intent;
+import android.os.Bundle;
+import android.os.ParcelFileDescriptor;
+import android.text.method.LinkMovementMethod;
+import android.view.LayoutInflater;
+import android.view.View;
+import android.view.ViewGroup;
+import android.widget.RadioButton;
+import android.widget.Toast;
+
+import androidx.activity.result.ActivityResultLauncher;
+import androidx.activity.result.contract.ActivityResultContracts;
+import androidx.annotation.Keep;
+import androidx.annotation.NonNull;
+import androidx.annotation.Nullable;
+
+import com.github.jameshnsears.quoteunquote.QuoteUnquoteModel;
+import com.github.jameshnsears.quoteunquote.R;
+import com.github.jameshnsears.quoteunquote.configure.ConfigureActivity;
+import com.github.jameshnsears.quoteunquote.configure.fragment.FragmentCommon;
+import com.github.jameshnsears.quoteunquote.configure.fragment.quotations.QuotationsFragmentStateAdapter;
+import com.github.jameshnsears.quoteunquote.configure.fragment.quotations.QuotationsPreferences;
+import com.github.jameshnsears.quoteunquote.database.DatabaseRepository;
+import com.github.jameshnsears.quoteunquote.database.quotation.QuotationEntity;
+import com.github.jameshnsears.quoteunquote.databinding.FragmentQuotationsTabDatabaseBinding;
+import com.github.jameshnsears.quoteunquote.utils.CSVHelper;
+
+import java.io.FileInputStream;
+import java.io.FileNotFoundException;
+import java.io.IOException;
+import java.util.LinkedHashSet;
+
+import timber.log.Timber;
+
+@Keep
+public class QuotationsDatabaseFragment extends FragmentCommon {
+    @Nullable
+    public FragmentQuotationsTabDatabaseBinding fragmentQuotationsTabDatabaseBinding;
+
+    @Nullable
+    public QuoteUnquoteModel quoteUnquoteModel;
+
+    @Nullable
+    public QuotationsPreferences quotationsPreferences;
+
+    @Nullable
+    private ActivityResultLauncher<Intent> storageAccessFrameworkActivityResultCSV;
+
+    public QuotationsDatabaseFragment() {
+        // dark mode support
+    }
+
+    public QuotationsDatabaseFragment(int widgetId) {
+        super(widgetId);
+    }
+
+    @NonNull
+    public static QuotationsDatabaseFragment newInstance(int widgetId) {
+        QuotationsDatabaseFragment fragment = new QuotationsDatabaseFragment(widgetId);
+        fragment.setArguments(null);
+        return fragment;
+    }
+
+    @Override
+    public void onCreate(@NonNull Bundle savedInstanceState) {
+        super.onCreate(savedInstanceState);
+
+        quoteUnquoteModel = new QuoteUnquoteModel(widgetId, getContext());
+    }
+
+    @Override
+    @NonNull
+    public View onCreateView(
+            @NonNull LayoutInflater inflater,
+            @NonNull ViewGroup container,
+            @NonNull Bundle savedInstanceState) {
+        this.quotationsPreferences = new QuotationsPreferences(this.widgetId, this.getContext());
+
+        this.fragmentQuotationsTabDatabaseBinding = FragmentQuotationsTabDatabaseBinding.inflate(this.getLayoutInflater());
+        return this.fragmentQuotationsTabDatabaseBinding.getRoot();
+    }
+
+    @Override
+    public void onViewCreated(
+            @NonNull View view, @NonNull Bundle savedInstanceState) {
+        this.fragmentQuotationsTabDatabaseBinding.textViewExamples.setMovementMethod(LinkMovementMethod.getInstance());
+
+        this.setDatabase();
+
+        this.createListenerRadioInternal();
+        this.createListenerRadioExternal();
+        this.createListenerImportButton();
+
+        this.setHandleImport();
+    }
+
+    @Override
+    public void onDestroyView() {
+        super.onDestroyView();
+        this.fragmentQuotationsTabDatabaseBinding = null;
+    }
+
+    private void setDatabase() {
+        if (this.quotationsPreferences.getDatabaseInternal()) {
+            this.fragmentQuotationsTabDatabaseBinding.radioButtonDatabaseInternal.setChecked(true);
+            this.fragmentQuotationsTabDatabaseBinding.radioButtonDatabaseExternal.setChecked(false);
+            this.quotationsPreferences.setDatabaseInternal(true);
+            this.quotationsPreferences.setDatabaseExternal(false);
+
+            DatabaseRepository.useInternalDatabase = true;
+        } else {
+            this.fragmentQuotationsTabDatabaseBinding.radioButtonDatabaseInternal.setChecked(false);
+            this.fragmentQuotationsTabDatabaseBinding.radioButtonDatabaseExternal.setChecked(true);
+            this.quotationsPreferences.setDatabaseInternal(false);
+            this.quotationsPreferences.setDatabaseExternal(true);
+
+            DatabaseRepository.useInternalDatabase = false;
+        }
+
+        if (quoteUnquoteModel.externalDatabaseContainsQuotations()) {
+            this.fragmentQuotationsTabDatabaseBinding.radioButtonDatabaseExternal.setEnabled(true);
+        } else {
+            this.fragmentQuotationsTabDatabaseBinding.radioButtonDatabaseExternal.setEnabled(false);
+        }
+    }
+
+    protected void createListenerImportButton() {
+        // invoke Storage Access Framework
+        fragmentQuotationsTabDatabaseBinding.buttonImport.setOnClickListener(v -> {
+            if (fragmentQuotationsTabDatabaseBinding.buttonImport.isEnabled()) {
+                ConfigureActivity.safCalled = true;
+
+                Intent intent = new Intent(Intent.ACTION_OPEN_DOCUMENT);
+                intent.addCategory(Intent.CATEGORY_OPENABLE);
+                intent.setType("text/comma-separated-values");
+                this.storageAccessFrameworkActivityResultCSV.launch(intent);
+            }
+        });
+    }
+
+    private void createListenerRadioInternal() {
+        final RadioButton radioButtonDatabaseInternal = this.fragmentQuotationsTabDatabaseBinding.radioButtonDatabaseInternal;
+        radioButtonDatabaseInternal.setOnCheckedChangeListener((buttonView, isChecked) -> {
+            if (isChecked) {
+                this.fragmentQuotationsTabDatabaseBinding.radioButtonDatabaseInternal.setChecked(true);
+                this.fragmentQuotationsTabDatabaseBinding.radioButtonDatabaseExternal.setChecked(false);
+                this.quotationsPreferences.setDatabaseInternal(true);
+                this.quotationsPreferences.setDatabaseExternal(false);
+
+                DatabaseRepository.useInternalDatabase = true;
+
+                updateQuotationsUI();
+            }
+        });
+    }
+
+    private void createListenerRadioExternal() {
+        final RadioButton radioButtonDatabaseCSV = this.fragmentQuotationsTabDatabaseBinding.radioButtonDatabaseExternal;
+        radioButtonDatabaseCSV.setOnCheckedChangeListener((buttonView, isChecked) -> {
+            if (isChecked) {
+                this.fragmentQuotationsTabDatabaseBinding.radioButtonDatabaseInternal.setChecked(false);
+                this.fragmentQuotationsTabDatabaseBinding.radioButtonDatabaseExternal.setChecked(true);
+                this.fragmentQuotationsTabDatabaseBinding.radioButtonDatabaseExternal.setEnabled(true);
+
+                this.quotationsPreferences.setDatabaseInternal(false);
+                this.quotationsPreferences.setDatabaseExternal(true);
+
+                DatabaseRepository.useInternalDatabase = false;
+
+                updateQuotationsUI();
+            }
+        });
+    }
+
+    private void setHandleImport() {
+        // default: /storage/emulated/0/Download/
+        this.storageAccessFrameworkActivityResultCSV = this.registerForActivityResult(
+                new ActivityResultContracts.StartActivityForResult(),
+                activityResult -> {
+                    Timber.d("%d", activityResult.getResultCode());
+
+                    if (activityResult.getResultCode() == Activity.RESULT_CANCELED) {
+                        Toast.makeText(
+                                this.getContext(),
+                                this.getContext().getString(R.string.fragment_quotations_database_import_no_csv_selected),
+                                Toast.LENGTH_SHORT).show();
+                    } else {
+                        if (activityResult.getResultCode() == Activity.RESULT_OK) {
+                            Toast.makeText(
+                                    this.getContext(),
+                                    this.getContext().getString(R.string.fragment_quotations_database_import_importing),
+                                    Toast.LENGTH_SHORT).show();
+
+                            ParcelFileDescriptor parcelFileDescriptor = null;
+                            FileInputStream fileInputStream = null;
+
+                            try {
+                                parcelFileDescriptor = this.getContext().getContentResolver().openFileDescriptor(
+                                        activityResult.getData().getData(), "r");
+                                fileInputStream
+                                        = new FileInputStream(parcelFileDescriptor.getFileDescriptor());
+
+                                final CSVHelper csvHelper = new CSVHelper();
+                                final LinkedHashSet<QuotationEntity> quotations = csvHelper.csvImportDatabase(fileInputStream);
+
+                                quoteUnquoteModel.insertQuotationsExternal(quotations);
+
+                                fragmentQuotationsTabDatabaseBinding.radioButtonDatabaseExternal.setEnabled(true);
+                                fragmentQuotationsTabDatabaseBinding.radioButtonDatabaseExternal.setChecked(true);
+
+                                updateQuotationsUI();
+
+                                Toast.makeText(
+                                        this.getContext(),
+                                        this.getContext().getString(R.string.fragment_quotations_database_import_success),
+                                        Toast.LENGTH_SHORT).show();
+                            } catch (final CSVHelper.CVSHelperException | FileNotFoundException e) {
+                                Toast.makeText(
+                                        this.getContext(),
+                                        this.getContext().getString(
+                                                R.string.fragment_quotations_database_import_contents,
+                                                e.getMessage()),
+                                        Toast.LENGTH_LONG).show();
+                            } finally {
+                                try {
+                                    if (fileInputStream != null) {
+                                        fileInputStream.close();
+                                    }
+                                    if (parcelFileDescriptor != null) {
+                                        parcelFileDescriptor.close();
+                                    }
+                                } catch (IOException e) {
+                                    Timber.e(e.getMessage());
+                                }
+                            }
+                        }
+
+                        ConfigureActivity.safCalled = false;
+                    }
+                });
+    }
+
+    private void updateQuotationsUI() {
+        QuotationsFragmentStateAdapter.alignSelectionFragmentWithSelectedDatabase(widgetId, getContext());
+    }
+}
diff --git a/app/src/main/java/com/github/jameshnsears/quoteunquote/configure/fragment/quotations/tabs/selection/QuotationsSelectionFragment.java b/app/src/main/java/com/github/jameshnsears/quoteunquote/configure/fragment/quotations/tabs/selection/QuotationsSelectionFragment.java
new file mode 100755
index 0000000..f2cc037
--- /dev/null
+++ b/app/src/main/java/com/github/jameshnsears/quoteunquote/configure/fragment/quotations/tabs/selection/QuotationsSelectionFragment.java
@@ -0,0 +1,550 @@
+package com.github.jameshnsears.quoteunquote.configure.fragment.quotations.tabs.selection;
+
+import android.app.Activity;
+import android.content.Context;
+import android.content.Intent;
+import android.os.Bundle;
+import android.os.ParcelFileDescriptor;
+import android.text.Editable;
+import android.view.LayoutInflater;
+import android.view.View;
+import android.view.ViewGroup;
+import android.widget.AdapterView;
+import android.widget.ArrayAdapter;
+import android.widget.Button;
+import android.widget.EditText;
+import android.widget.RadioGroup;
+import android.widget.Toast;
+
+import androidx.activity.result.ActivityResultLauncher;
+import androidx.activity.result.contract.ActivityResultContracts;
+import androidx.annotation.Keep;
+import androidx.annotation.NonNull;
+import androidx.annotation.Nullable;
+
+import com.github.jameshnsears.quoteunquote.QuoteUnquoteModel;
+import com.github.jameshnsears.quoteunquote.R;
+import com.github.jameshnsears.quoteunquote.configure.ConfigureActivity;
+import com.github.jameshnsears.quoteunquote.configure.fragment.FragmentCommon;
+import com.github.jameshnsears.quoteunquote.configure.fragment.quotations.QuotationsPreferences;
+import com.github.jameshnsears.quoteunquote.database.quotation.AuthorPOJO;
+import com.github.jameshnsears.quoteunquote.databinding.FragmentQuotationsTabSelectionBinding;
+import com.github.jameshnsears.quoteunquote.utils.CSVHelper;
+import com.github.jameshnsears.quoteunquote.utils.ContentSelection;
+import com.github.jameshnsears.quoteunquote.utils.audit.AuditEventHelper;
+import com.jakewharton.rxbinding2.widget.RxTextView;
+
+import java.io.FileOutputStream;
+import java.io.IOException;
+import java.util.ArrayList;
+import java.util.List;
+import java.util.concurrent.ConcurrentHashMap;
+import java.util.concurrent.TimeUnit;
+
+import io.reactivex.android.schedulers.AndroidSchedulers;
+import io.reactivex.disposables.CompositeDisposable;
+import io.reactivex.observers.DisposableObserver;
+import io.reactivex.observers.DisposableSingleObserver;
+import io.reactivex.schedulers.Schedulers;
+import timber.log.Timber;
+
+@Keep
+public class QuotationsSelectionFragment extends FragmentCommon {
+    @NonNull
+    private final CompositeDisposable disposables = new CompositeDisposable();
+    @Nullable
+    public QuoteUnquoteModel quoteUnquoteModel;
+    @Nullable
+    public FragmentQuotationsTabSelectionBinding fragmentQuotationsTabSelectionBinding;
+    @Nullable
+    public QuotationsPreferences quotationsPreferences;
+    @Nullable
+    private DisposableObserver<Integer> disposableObserver;
+    @Nullable
+    private ActivityResultLauncher<Intent> activityResultLauncher;
+
+    public QuotationsSelectionFragment() {
+        // dark mode support
+    }
+
+    public QuotationsSelectionFragment(final int widgetId) {
+        super(widgetId);
+    }
+
+    @NonNull
+    public static QuotationsSelectionFragment newInstance(final int widgetId) {
+        final QuotationsSelectionFragment fragment = new QuotationsSelectionFragment(widgetId);
+        fragment.setArguments(null);
+        return fragment;
+    }
+
+    public static void ensureFragmentContentSearchConsistency(
+            final int widgetId,
+            @NonNull Context context
+    ) {
+        final QuotationsPreferences quotationsPreferences = new QuotationsPreferences(widgetId, context);
+
+        if (quotationsPreferences.getContentSelection() == ContentSelection.SEARCH
+                && quotationsPreferences.getContentSelectionSearchCount() == 0) {
+            quotationsPreferences.setContentSelection(ContentSelection.ALL);
+            Toast.makeText(
+                    context,
+                    context.getString(R.string.fragment_quotations_selection_search_no_results),
+                    Toast.LENGTH_SHORT).show();
+        }
+    }
+
+    @Override
+    public void onCreate(@NonNull final Bundle savedInstanceState) {
+        super.onCreate(savedInstanceState);
+
+        quoteUnquoteModel = new QuoteUnquoteModel(widgetId, getContext());
+    }
+
+    @Override
+    @NonNull
+    public View onCreateView(
+            @NonNull final LayoutInflater inflater,
+            @NonNull final ViewGroup container,
+            @NonNull final Bundle savedInstanceState) {
+        this.quotationsPreferences = new QuotationsPreferences(this.widgetId, this.getContext());
+
+        this.fragmentQuotationsTabSelectionBinding = FragmentQuotationsTabSelectionBinding.inflate(this.getLayoutInflater());
+        return this.fragmentQuotationsTabSelectionBinding.getRoot();
+    }
+
+    @Override
+    public void onDestroyView() {
+        super.onDestroyView();
+
+        ensureFragmentContentSearchConsistency(this.widgetId, this.getContext());
+
+        this.fragmentQuotationsTabSelectionBinding = null;
+
+        this.shutdown();
+    }
+
+    public void shutdown() {
+        this.disposables.clear();
+        this.disposables.dispose();
+
+        if (this.disposableObserver != null) {
+            this.disposableObserver.dispose();
+        }
+    }
+
+    public void setSearch() {
+        setSearchObserver();
+
+        final String editTextKeywords = this.quotationsPreferences.getContentSelectionSearch();
+
+        if (editTextKeywords.length() > 0) {
+            final ConcurrentHashMap<String, String> properties = new ConcurrentHashMap<>();
+            properties.put("Text", editTextKeywords);
+            AuditEventHelper.auditEvent("SEARCH", properties);
+            this.fragmentQuotationsTabSelectionBinding.editTextSearchText.setText(editTextKeywords);
+        }
+    }
+
+    protected void setSearchObserver() {
+        this.disposableObserver = new DisposableObserver<Integer>() {
+            @Override
+            public void onNext(@NonNull final Integer value) {
+                fragmentQuotationsTabSelectionBinding.radioButtonSearch.setText(
+                        getResources().getString(R.string.fragment_quotations_selection_search, value));
+                quotationsPreferences.setContentSelectionSearchCount(value);
+            }
+
+            @Override
+            public void onError(@NonNull final Throwable throwable) {
+                Timber.d("onError=%s", throwable.getMessage());
+            }
+
+            @Override
+            public void onComplete() {
+                Timber.d("onComplete");
+            }
+        };
+
+        RxTextView.textChanges(fragmentQuotationsTabSelectionBinding.editTextSearchText)
+                .debounce(25, TimeUnit.MILLISECONDS)
+                .subscribeOn(Schedulers.io())
+                .map(charSequence -> {
+                    final String keywords = charSequence.toString();
+
+                    if (!keywords.equals("")) {
+                        Timber.d("%s", keywords);
+
+                        // remove any prior, different, search results in the history
+                        if (!keywords.equals(quotationsPreferences.getContentSelectionSearch())) {
+                            quoteUnquoteModel.resetPrevious(this.widgetId, ContentSelection.SEARCH);
+                        }
+
+                        quotationsPreferences.setContentSelectionSearch(keywords);
+
+                        return quoteUnquoteModel.countQuotationWithSearchText(
+                                keywords, quotationsPreferences.getContentSelectionSearchFavouritesOnly());
+                    } else {
+                        quotationsPreferences.setContentSelectionSearch("");
+                        return 0;
+                    }
+                })
+                .observeOn(AndroidSchedulers.mainThread())
+                .subscribe(disposableObserver);
+    }
+
+    @Override
+    public void onViewCreated(
+            @NonNull final View view, @NonNull final Bundle savedInstanceState) {
+        initUi();
+
+        createListenerRadioGroup();
+        createListenerAddToPreviousAll();
+        createListenerAuthor();
+        createListenerFavouriteButtonExport();
+        createListenerSearchFavouritesOnly();
+
+        handleExportResult();
+
+        setSelection();
+    }
+
+    public void initUi() {
+        setInitialCounts();
+
+        setFavouriteCount();
+        setAllCount();
+        setAddToPreviousAll();
+        setAuthor();
+        setSearch();
+
+        setSelection();
+    }
+
+    private void setInitialCounts() {
+        fragmentQuotationsTabSelectionBinding.radioButtonAll.setText(
+                getResources().getString(R.string.fragment_quotations_selection_all,
+                        0));
+
+        fragmentQuotationsTabSelectionBinding.radioButtonAuthor.setText(
+                getResources().getString(R.string.fragment_quotations_selection_author,
+                        0));
+
+        fragmentQuotationsTabSelectionBinding.radioButtonFavourites.setText(
+                getResources().getString(R.string.fragment_quotations_selection_favourites,
+                        0));
+
+        fragmentQuotationsTabSelectionBinding.radioButtonSearch.setText(
+                getResources().getString(R.string.fragment_quotations_selection_search,
+                        0));
+    }
+
+    public void setAddToPreviousAll() {
+        fragmentQuotationsTabSelectionBinding.switchAddToPreviousAll.setChecked(quotationsPreferences.getContentAddToPreviousAll());
+    }
+
+    public void setAllCount() {
+        disposables.add(quoteUnquoteModel.countAll()
+                .subscribeOn(Schedulers.io())
+                .observeOn(AndroidSchedulers.mainThread())
+                .subscribeWith(
+                        new DisposableSingleObserver<Integer>() {
+                            @Override
+                            public void onSuccess(@NonNull final Integer value) {
+                                fragmentQuotationsTabSelectionBinding.radioButtonAll.setText(
+                                        getResources().getString(R.string.fragment_quotations_selection_all, value));
+                            }
+
+                            @Override
+                            public void onError(@NonNull final Throwable throwable) {
+                                Timber.d("onError=%s", throwable.getMessage());
+                            }
+                        }));
+    }
+
+    public void setAuthor() {
+        disposables.add(quoteUnquoteModel.authors()
+                .subscribeOn(Schedulers.io())
+                .observeOn(AndroidSchedulers.mainThread())
+                .subscribeWith(
+                        new DisposableSingleObserver<List<AuthorPOJO>>() {
+                            @Override
+                            public void onSuccess(@NonNull final List<AuthorPOJO> authorPOJOList) {
+                                final List<String> authors
+                                        = quoteUnquoteModel.authorsSorted(authorPOJOList);
+
+                                final ArrayAdapter<String> adapter = new ArrayAdapter<>(
+                                        getContext(),
+                                        R.layout.spinner_item,
+                                        authors);
+                                adapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);
+                                fragmentQuotationsTabSelectionBinding.spinnerAuthors.setAdapter(adapter);
+
+                                if ("".equals(quotationsPreferences.getContentSelectionAuthor())) {
+                                    quotationsPreferences.setContentSelectionAuthor(authors.get(0));
+                                }
+
+                                setAuthorName();
+                            }
+
+                            @Override
+                            public void onError(@NonNull final Throwable throwable) {
+                                Timber.d("onError=%s", throwable.getMessage());
+                            }
+                        }));
+    }
+
+    protected void setAuthorName() {
+        final String authorPreference = quotationsPreferences.getContentSelectionAuthor();
+
+        fragmentQuotationsTabSelectionBinding.spinnerAuthors.setSelection(
+                quoteUnquoteModel.authorsIndex(authorPreference));
+
+        fragmentQuotationsTabSelectionBinding.radioButtonAuthor.setText(
+                getResources().getString(
+                        R.string.fragment_quotations_selection_author,
+                        quoteUnquoteModel.countAuthorQuotations(authorPreference)));
+
+    }
+
+    public void setFavouriteCount() {
+        disposables.add(quoteUnquoteModel.countFavourites()
+                .subscribeOn(Schedulers.io())
+                .observeOn(AndroidSchedulers.mainThread())
+                .subscribeWith(
+                        new DisposableSingleObserver<Integer>() {
+                            @Override
+                            public void onSuccess(@NonNull final Integer value) {
+                                fragmentQuotationsTabSelectionBinding.radioButtonFavourites.setEnabled(true);
+                                if (value == 0) {
+                                    fragmentQuotationsTabSelectionBinding.radioButtonFavourites.setEnabled(false);
+
+                                    fragmentQuotationsTabSelectionBinding.buttonExport.setEnabled(false);
+                                    QuotationsSelectionFragment.this.makeButtonAlpha(fragmentQuotationsTabSelectionBinding.buttonExport, false);
+                                    fragmentQuotationsTabSelectionBinding.textViewLocalStorageInstructions.setEnabled(false);
+
+                                    // in case another widget instance changes favourites
+                                    if (QuotationsSelectionFragment.this.quotationsPreferences.getContentSelection().equals(ContentSelection.FAVOURITES)) {
+                                        QuotationsSelectionFragment.this.quotationsPreferences.setContentSelection(ContentSelection.ALL);
+                                    }
+                                } else {
+                                    fragmentQuotationsTabSelectionBinding.buttonExport.setEnabled(true);
+                                    QuotationsSelectionFragment.this.makeButtonAlpha(fragmentQuotationsTabSelectionBinding.buttonExport, true);
+                                    fragmentQuotationsTabSelectionBinding.textViewLocalStorageInstructions.setEnabled(true);
+                                }
+
+                                fragmentQuotationsTabSelectionBinding.radioButtonFavourites.setText(
+                                        getResources().getString(R.string.fragment_quotations_selection_favourites, value));
+                            }
+
+                            @Override
+                            public void onError(@NonNull final Throwable throwable) {
+                                Timber.d("onError=%s", throwable.getMessage());
+                            }
+                        }));
+    }
+
+    public void setSelection() {
+        enableAuthor(false);
+        enableSearch(false);
+
+        switch (quotationsPreferences.getContentSelection()) {
+            case ALL:
+                setSelectionAll();
+                break;
+            case AUTHOR:
+                setSelectionAuthor();
+                break;
+            case FAVOURITES:
+                setSelectionFavourites();
+                break;
+            case SEARCH:
+                setSelectionSearch();
+                break;
+            default:
+                Timber.e("unknown switch");
+                break;
+        }
+    }
+
+    private void setSelectionAll() {
+        fragmentQuotationsTabSelectionBinding.radioButtonAll.setChecked(true);
+    }
+
+    private void setSelectionAuthor() {
+        fragmentQuotationsTabSelectionBinding.radioButtonAuthor.setChecked(true);
+        enableAuthor(true);
+    }
+
+    private void setSelectionFavourites() {
+        fragmentQuotationsTabSelectionBinding.radioButtonFavourites.setChecked(true);
+    }
+
+    private void setSelectionSearch() {
+        fragmentQuotationsTabSelectionBinding.radioButtonSearch.setChecked(true);
+        enableSearch(true);
+
+        fragmentQuotationsTabSelectionBinding.radioButtonSearch.requestFocus();
+
+        if (quoteUnquoteModel.countFavouritesWithoutRx() > 0) {
+            fragmentQuotationsTabSelectionBinding.switchSearchFavouritesOnly.setEnabled(true);
+        } else {
+            fragmentQuotationsTabSelectionBinding.switchSearchFavouritesOnly.setEnabled(false);
+        }
+
+        fragmentQuotationsTabSelectionBinding.switchSearchFavouritesOnly.setChecked(
+                quotationsPreferences.getContentSelectionSearchFavouritesOnly());
+
+        final String searchText = quotationsPreferences.getContentSelectionSearch();
+
+        if (!searchText.equals("") && !quotationsPreferences.getContentSelectionSearch().equals(searchText)) {
+            quotationsPreferences.setContentSelectionSearch(searchText);
+
+            final EditText editTextKeywordsSearch = fragmentQuotationsTabSelectionBinding.editTextSearchText;
+            editTextKeywordsSearch.setText(searchText);
+        }
+    }
+
+    protected void createListenerRadioGroup() {
+        final RadioGroup radioGroupContent = fragmentQuotationsTabSelectionBinding.radioGroupContent;
+        radioGroupContent.setOnCheckedChangeListener((group, checkedId) -> {
+
+            enableAuthor(false);
+            enableSearch(false);
+
+            if (checkedId == fragmentQuotationsTabSelectionBinding.radioButtonAll.getId()) {
+                quotationsPreferences.setContentSelection(ContentSelection.ALL);
+            }
+
+            if (checkedId == fragmentQuotationsTabSelectionBinding.radioButtonAuthor.getId()) {
+                enableAuthor(true);
+                quotationsPreferences.setContentSelection(ContentSelection.AUTHOR);
+            }
+
+            if (checkedId == fragmentQuotationsTabSelectionBinding.radioButtonFavourites.getId()) {
+                quotationsPreferences.setContentSelection(ContentSelection.FAVOURITES);
+            }
+
+            if (checkedId == fragmentQuotationsTabSelectionBinding.radioButtonSearch.getId()) {
+                enableSearch(true);
+                quotationsPreferences.setContentSelection(ContentSelection.SEARCH);
+            }
+        });
+    }
+
+    private void enableAuthor(final boolean enable) {
+        fragmentQuotationsTabSelectionBinding.spinnerAuthors.setEnabled(enable);
+    }
+
+    public void makeButtonAlpha(@NonNull final Button button, final boolean enable) {
+        button.setAlpha(enable ? 1 : 0.25f);
+    }
+
+    private void enableSearch(final boolean enable) {
+        fragmentQuotationsTabSelectionBinding.editTextSearchText.setEnabled(enable);
+
+        if (quoteUnquoteModel.countFavouritesWithoutRx() > 0) {
+            fragmentQuotationsTabSelectionBinding.switchSearchFavouritesOnly.setEnabled(enable);
+        } else {
+            fragmentQuotationsTabSelectionBinding.switchSearchFavouritesOnly.setEnabled(false);
+        }
+
+        if (quotationsPreferences.getContentSelectionSearchFavouritesOnly()) {
+            fragmentQuotationsTabSelectionBinding.switchSearchFavouritesOnly.setChecked(true);
+        } else {
+            fragmentQuotationsTabSelectionBinding.switchSearchFavouritesOnly.setChecked(false);
+        }
+    }
+
+    protected void createListenerAuthor() {
+        fragmentQuotationsTabSelectionBinding.spinnerAuthors.setOnItemSelectedListener(new AdapterView.OnItemSelectedListener() {
+            @Override
+            public void onItemSelected(final AdapterView<?> parent, final View view, final int position, final long selectedItemId) {
+                final String author = fragmentQuotationsTabSelectionBinding.spinnerAuthors.getSelectedItem().toString();
+                fragmentQuotationsTabSelectionBinding.radioButtonAuthor.setText(
+                        getResources().getString(R.string.fragment_quotations_selection_author,
+                                quoteUnquoteModel.countAuthorQuotations(author)));
+
+                if (!quotationsPreferences.getContentSelectionAuthor().equals(author)) {
+                    Timber.d("author=%s", author);
+                    final ConcurrentHashMap<String, String> properties = new ConcurrentHashMap<>();
+                    properties.put("Author", author);
+                    AuditEventHelper.auditEvent("AUTHOR", properties);
+
+                    quotationsPreferences.setContentSelectionAuthor(author);
+                }
+            }
+
+            @Override
+            public void onNothingSelected(final AdapterView<?> parent) {
+                // do nothing
+            }
+        });
+    }
+
+    protected void createListenerAddToPreviousAll() {
+        fragmentQuotationsTabSelectionBinding.switchAddToPreviousAll.setOnCheckedChangeListener((buttonView, isChecked) ->
+                quotationsPreferences.setContentAddToPreviousAll(isChecked)
+        );
+    }
+
+    protected void createListenerFavouriteButtonExport() {
+        // invoke Storage Access Framework
+        fragmentQuotationsTabSelectionBinding.buttonExport.setOnClickListener(v -> {
+            if (fragmentQuotationsTabSelectionBinding.buttonExport.isEnabled()) {
+                ConfigureActivity.safCalled = true;
+
+                final Intent intent = new Intent(Intent.ACTION_CREATE_DOCUMENT);
+                intent.addCategory(Intent.CATEGORY_OPENABLE);
+                intent.setType("text/csv");
+                intent.putExtra(Intent.EXTRA_TITLE, "Favourites.csv");
+                activityResultLauncher.launch(intent);
+            }
+        });
+    }
+
+    protected void createListenerSearchFavouritesOnly() {
+        fragmentQuotationsTabSelectionBinding.switchSearchFavouritesOnly.setOnCheckedChangeListener((buttonView, isChecked) -> {
+            quotationsPreferences.setContentSelectionSearchFavouritesOnly(isChecked);
+
+            Editable priorText = fragmentQuotationsTabSelectionBinding.editTextSearchText.getText();
+            fragmentQuotationsTabSelectionBinding.editTextSearchText.setText("");
+            fragmentQuotationsTabSelectionBinding.editTextSearchText.append(priorText);
+        });
+    }
+
+    protected final void handleExportResult() {
+        // default: /storage/emulated/0/Download/Favourites.csv
+        activityResultLauncher = registerForActivityResult(
+                new ActivityResultContracts.StartActivityForResult(),
+                activityResult -> {
+                    if (activityResult.getResultCode() == Activity.RESULT_OK) {
+
+                        try {
+                            final ParcelFileDescriptor parcelFileDescriptor
+                                    = getContext().getContentResolver().openFileDescriptor(
+                                    activityResult.getData().getData(), "w");
+                            final FileOutputStream fileOutputStream
+                                    = new FileOutputStream(parcelFileDescriptor.getFileDescriptor());
+
+                            new CSVHelper()
+                                    .csvExportFavourites(
+                                            fileOutputStream,
+                                            (ArrayList) quoteUnquoteModel.exportFavourites());
+
+                            fileOutputStream.close();
+                            parcelFileDescriptor.close();
+
+                            Toast.makeText(
+                                    getContext(),
+                                    getContext().getString(R.string.fragment_quotations_selection_favourites_export_success),
+                                    Toast.LENGTH_SHORT).show();
+                        } catch (final IOException e) {
+                            Timber.e(e.getMessage());
+                        }
+                    }
+
+                    ConfigureActivity.safCalled = false;
+                });
+    }
+}
diff --git a/app/src/main/java/com/github/jameshnsears/quoteunquote/configure/fragment/sync/SyncFragment.java b/app/src/main/java/com/github/jameshnsears/quoteunquote/configure/fragment/sync/SyncFragment.java
old mode 100644
new mode 100755
index 1fd4b2e..85dd3d0
--- a/app/src/main/java/com/github/jameshnsears/quoteunquote/configure/fragment/sync/SyncFragment.java
+++ b/app/src/main/java/com/github/jameshnsears/quoteunquote/configure/fragment/sync/SyncFragment.java
@@ -33,8 +33,9 @@ import com.github.jameshnsears.quoteunquote.cloud.transfer.Transfer;
 import com.github.jameshnsears.quoteunquote.cloud.transfer.restore.TransferRestore;
 import com.github.jameshnsears.quoteunquote.configure.ConfigureActivity;
 import com.github.jameshnsears.quoteunquote.configure.fragment.FragmentCommon;
+import com.github.jameshnsears.quoteunquote.configure.fragment.quotations.QuotationsFragmentStateAdapter;
 import com.github.jameshnsears.quoteunquote.database.DatabaseRepository;
-import com.github.jameshnsears.quoteunquote.databinding.FragmentArchiveBinding;
+import com.github.jameshnsears.quoteunquote.databinding.FragmentSyncBinding;
 import com.google.common.base.Charsets;
 import com.google.common.io.CharStreams;
 import com.google.gson.Gson;
@@ -54,7 +55,7 @@ public class SyncFragment extends FragmentCommon {
     public static String CLOUD_SERVICE_COMPLETED = "CLOUD_SERVICE_COMPLETED";
 
     @Nullable
-    public FragmentArchiveBinding fragmentArchiveBinding;
+    public FragmentSyncBinding fragmentSyncBinding;
 
     @Nullable
     public QuoteUnquoteModel quoteUnquoteModel;
@@ -109,7 +110,7 @@ public class SyncFragment extends FragmentCommon {
     public void onCreate(@NonNull final Bundle savedInstanceState) {
         super.onCreate(savedInstanceState);
 
-        quoteUnquoteModel = new QuoteUnquoteModel(getContext());
+        quoteUnquoteModel = new QuoteUnquoteModel(widgetId, getContext());
 
         if (quoteUnquoteModel.countPrevious(widgetId) == 0) {
             quoteUnquoteModel.markAsCurrentDefault(widgetId);
@@ -133,8 +134,8 @@ public class SyncFragment extends FragmentCommon {
             @NonNull final Bundle savedInstanceState) {
         syncPreferences = new SyncPreferences(widgetId, getContext());
 
-        fragmentArchiveBinding = FragmentArchiveBinding.inflate(getLayoutInflater());
-        return fragmentArchiveBinding.getRoot();
+        fragmentSyncBinding = FragmentSyncBinding.inflate(getLayoutInflater());
+        return fragmentSyncBinding.getRoot();
     }
 
     @Override
@@ -156,7 +157,7 @@ public class SyncFragment extends FragmentCommon {
     @Override
     public void onDestroyView() {
         super.onDestroyView();
-        fragmentArchiveBinding = null;
+        fragmentSyncBinding = null;
     }
 
     private void setSyncFields() {
@@ -166,40 +167,40 @@ public class SyncFragment extends FragmentCommon {
         }
 
         if (syncPreferences.getArchiveGoogleCloud()) {
-            fragmentArchiveBinding.radioButtonGoogleCloud.setChecked(true);
-            fragmentArchiveBinding.radioButtonDevice.setChecked(false);
-            fragmentArchiveBinding.editTextRemoteCodeValue.setEnabled(true);
-            fragmentArchiveBinding.editTextRemoteCodeValue.setText("");
+            fragmentSyncBinding.radioButtonSyncGoogleCloud.setChecked(true);
+            fragmentSyncBinding.radioButtonSyncDevice.setChecked(false);
+            fragmentSyncBinding.editTextRemoteCodeValue.setEnabled(true);
+            fragmentSyncBinding.editTextRemoteCodeValue.setText("");
         } else {
-            fragmentArchiveBinding.radioButtonGoogleCloud.setChecked(false);
-            fragmentArchiveBinding.radioButtonDevice.setChecked(true);
-            fragmentArchiveBinding.editTextRemoteCodeValue.setEnabled(false);
-            fragmentArchiveBinding.editTextRemoteCodeValue.setText("");
+            fragmentSyncBinding.radioButtonSyncGoogleCloud.setChecked(false);
+            fragmentSyncBinding.radioButtonSyncDevice.setChecked(true);
+            fragmentSyncBinding.editTextRemoteCodeValue.setEnabled(false);
+            fragmentSyncBinding.editTextRemoteCodeValue.setText("");
         }
     }
 
     private void createListenerRadioGoogleCloud() {
-        RadioButton radioButtonGoogleCloud = fragmentArchiveBinding.radioButtonGoogleCloud;
+        RadioButton radioButtonGoogleCloud = fragmentSyncBinding.radioButtonSyncGoogleCloud;
         radioButtonGoogleCloud.setOnCheckedChangeListener((buttonView, isChecked) -> {
             if (isChecked) {
                 syncPreferences.setArchiveGoogleCloud(true);
                 syncPreferences.setArchiveSharedStorage(false);
 
-                fragmentArchiveBinding.editTextRemoteCodeValue.setEnabled(true);
-                fragmentArchiveBinding.editTextRemoteCodeValue.setText("");
+                fragmentSyncBinding.editTextRemoteCodeValue.setEnabled(true);
+                fragmentSyncBinding.editTextRemoteCodeValue.setText("");
             }
         });
     }
 
     private void createListenerRadioDevice() {
-        RadioButton radioButtonDevice = fragmentArchiveBinding.radioButtonDevice;
+        RadioButton radioButtonDevice = fragmentSyncBinding.radioButtonSyncDevice;
         radioButtonDevice.setOnCheckedChangeListener((buttonView, isChecked) -> {
             if (isChecked) {
                 syncPreferences.setArchiveGoogleCloud(false);
                 syncPreferences.setArchiveSharedStorage(true);
 
-                fragmentArchiveBinding.editTextRemoteCodeValue.setEnabled(false);
-                fragmentArchiveBinding.editTextRemoteCodeValue.setText("");
+                fragmentSyncBinding.editTextRemoteCodeValue.setEnabled(false);
+                fragmentSyncBinding.editTextRemoteCodeValue.setText("");
             }
         });
     }
@@ -210,15 +211,15 @@ public class SyncFragment extends FragmentCommon {
             syncPreferences.setTransferLocalCode(CloudTransferHelper.getLocalCode());
         }
 
-        fragmentArchiveBinding.textViewLocalCodeValue.setText(syncPreferences.getTransferLocalCode());
+        fragmentSyncBinding.textViewLocalCodeValue.setText(syncPreferences.getTransferLocalCode());
     }
 
     protected void createListenerButtonBackup() {
-        fragmentArchiveBinding.buttonBackup.setOnClickListener(v -> {
+        fragmentSyncBinding.buttonBackup.setOnClickListener(v -> {
             enableUI(false);
 
             if (syncPreferences.getArchiveGoogleCloud()) {
-                fragmentArchiveBinding.editTextRemoteCodeValue.setEnabled(false);
+                fragmentSyncBinding.editTextRemoteCodeValue.setEnabled(false);
                 backupGoogleCloud();
             } else {
                 backupSharedStorage();
@@ -235,35 +236,45 @@ public class SyncFragment extends FragmentCommon {
         // API 25 doesn't save the extension!
         intent.setType("application/json");
 
-        intent.putExtra(Intent.EXTRA_TITLE, fragmentArchiveBinding.textViewLocalCodeValue.getText().toString());
+        intent.putExtra(Intent.EXTRA_TITLE, fragmentSyncBinding.textViewLocalCodeValue.getText().toString());
         storageAccessFrameworkActivityResultBackup.launch(intent);
     }
 
-    private final void handleDeviceBackupResult() {
+    private void handleDeviceBackupResult() {
         // default: /storage/emulated/0/Download/<10 character code>.json
         storageAccessFrameworkActivityResultBackup = registerForActivityResult(
                 new ActivityResultContracts.StartActivityForResult(),
                 activityResult -> {
                     if (activityResult.getResultCode() == Activity.RESULT_OK) {
+                        ParcelFileDescriptor parcelFileDescriptor = null;
+                        FileOutputStream fileOutputStream = null;
                         try {
-                            final ParcelFileDescriptor parcelFileDescriptor
+                            parcelFileDescriptor
                                     = getContext().getContentResolver().openFileDescriptor(
                                     activityResult.getData().getData(), "w");
-                            final FileOutputStream fileOutputStream
+                            fileOutputStream
                                     = new FileOutputStream(parcelFileDescriptor.getFileDescriptor());
 
                             final String exportableString = quoteUnquoteModel.transferBackup(getContext());
                             fileOutputStream.write(exportableString.getBytes());
 
-                            fileOutputStream.close();
-                            parcelFileDescriptor.close();
-
                             Toast.makeText(
                                     getContext(),
                                     getContext().getString(R.string.fragment_archive_backup_success),
                                     Toast.LENGTH_SHORT).show();
                         } catch (final IOException e) {
                             Timber.e(e.getMessage());
+                        } finally {
+                            try {
+                                if (fileOutputStream != null) {
+                                    fileOutputStream.close();
+                                }
+                                if (parcelFileDescriptor != null) {
+                                    parcelFileDescriptor.close();
+                                }
+                            } catch (final IOException e) {
+                                Timber.e(e.getMessage());
+                            }
                         }
                     }
 
@@ -278,7 +289,7 @@ public class SyncFragment extends FragmentCommon {
         final Intent intent = new Intent(Intent.ACTION_OPEN_DOCUMENT);
         intent.addCategory(Intent.CATEGORY_OPENABLE);
         intent.setType("application/json");
-        intent.putExtra(Intent.EXTRA_TITLE, fragmentArchiveBinding.textViewLocalCodeValue.getText().toString());
+        intent.putExtra(Intent.EXTRA_TITLE, fragmentSyncBinding.textViewLocalCodeValue.getText().toString());
         storageAccessFrameworkActivityResultRestore.launch(intent);
     }
 
@@ -305,6 +316,8 @@ public class SyncFragment extends FragmentCommon {
                                 if (isJsonValid && transfer != null) {
                                     restoreDeviceJson(transfer);
 
+                                    QuotationsFragmentStateAdapter.alignSelectionFragmentWithRestore(widgetId, getContext());
+
                                     Toast.makeText(
                                             getContext(),
                                             getContext().getString(R.string.fragment_archive_restore_success),
@@ -397,11 +410,11 @@ public class SyncFragment extends FragmentCommon {
     }
 
     protected void createListenerButtonRestore() {
-        fragmentArchiveBinding.buttonRestore.setOnClickListener(v -> {
+        fragmentSyncBinding.buttonRestore.setOnClickListener(v -> {
             enableUI(false);
 
             if (syncPreferences.getArchiveGoogleCloud()) {
-                fragmentArchiveBinding.editTextRemoteCodeValue.setEnabled(false);
+                fragmentSyncBinding.editTextRemoteCodeValue.setEnabled(false);
                 restoreGoogleCloud();
             } else {
                 ConfigureActivity.safCalled = true;
@@ -411,39 +424,39 @@ public class SyncFragment extends FragmentCommon {
     }
 
     public void enableUI(boolean enableUI) {
-        fragmentArchiveBinding.radioButtonGoogleCloud.setEnabled(enableUI);
-        fragmentArchiveBinding.radioButtonDevice.setEnabled(enableUI);
-        fragmentArchiveBinding.editTextRemoteCodeValue.setEnabled(enableUI);
-        enableButton(fragmentArchiveBinding.buttonBackup, enableUI);
-        enableButton(fragmentArchiveBinding.buttonRestore, enableUI);
+        fragmentSyncBinding.radioButtonSyncGoogleCloud.setEnabled(enableUI);
+        fragmentSyncBinding.radioButtonSyncDevice.setEnabled(enableUI);
+        fragmentSyncBinding.editTextRemoteCodeValue.setEnabled(enableUI);
+        enableButton(fragmentSyncBinding.buttonBackup, enableUI);
+        enableButton(fragmentSyncBinding.buttonRestore, enableUI);
 
         if (syncPreferences.getArchiveGoogleCloud()) {
-            fragmentArchiveBinding.radioButtonGoogleCloud.setChecked(true);
-            fragmentArchiveBinding.editTextRemoteCodeValue.setEnabled(true);
+            fragmentSyncBinding.radioButtonSyncGoogleCloud.setChecked(true);
+            fragmentSyncBinding.editTextRemoteCodeValue.setEnabled(true);
         } else {
-            fragmentArchiveBinding.radioButtonDevice.setChecked(true);
-            fragmentArchiveBinding.editTextRemoteCodeValue.setEnabled(false);
+            fragmentSyncBinding.radioButtonSyncDevice.setChecked(true);
+            fragmentSyncBinding.editTextRemoteCodeValue.setEnabled(false);
         }
 
         if (quoteUnquoteModel.countPrevious(widgetId) == 0) {
-            fragmentArchiveBinding.buttonBackup.setEnabled(false);
-            enableButton(fragmentArchiveBinding.buttonBackup, false);
+            fragmentSyncBinding.buttonBackup.setEnabled(false);
+            enableButton(fragmentSyncBinding.buttonBackup, false);
         }
     }
 
     private void backupGoogleCloud() {
         final Intent serviceIntent = new Intent(getContext(), CloudServiceBackup.class);
         serviceIntent.putExtra(
-                "localCodeValue", fragmentArchiveBinding.textViewLocalCodeValue.getText().toString());
+                "localCodeValue", fragmentSyncBinding.textViewLocalCodeValue.getText().toString());
 
         getContext().startService(serviceIntent);
     }
 
     private void restoreGoogleCloud() {
-        Timber.d("remoteCode=%s", fragmentArchiveBinding.editTextRemoteCodeValue.getText().toString());
+        Timber.d("remoteCode=%s", fragmentSyncBinding.editTextRemoteCodeValue.getText().toString());
 
         // correct length?
-        if (fragmentArchiveBinding.editTextRemoteCodeValue.getText().toString().length() != 10) {
+        if (fragmentSyncBinding.editTextRemoteCodeValue.getText().toString().length() != 10) {
             Toast.makeText(
                     getContext(),
                     getContext().getString(R.string.fragment_archive_restore_token_missing),
@@ -453,7 +466,7 @@ public class SyncFragment extends FragmentCommon {
         }
 
         // crc wrong?
-        if (!CloudTransferHelper.isRemoteCodeValid(fragmentArchiveBinding.editTextRemoteCodeValue.getText().toString())) {
+        if (!CloudTransferHelper.isRemoteCodeValid(fragmentSyncBinding.editTextRemoteCodeValue.getText().toString())) {
             Toast.makeText(
                     getContext(),
                     getContext().getString(R.string.fragment_archive_restore_token_invalid),
@@ -462,12 +475,12 @@ public class SyncFragment extends FragmentCommon {
             return;
         }
 
-        fragmentArchiveBinding.radioButtonDevice.setEnabled(false);
-        fragmentArchiveBinding.editTextRemoteCodeValue.setEnabled(false);
+        fragmentSyncBinding.radioButtonSyncDevice.setEnabled(false);
+        fragmentSyncBinding.editTextRemoteCodeValue.setEnabled(false);
 
         final Intent serviceIntent = new Intent(getContext(), CloudServiceRestore.class);
         serviceIntent.putExtra(
-                "remoteCodeValue", fragmentArchiveBinding.editTextRemoteCodeValue.getText().toString());
+                "remoteCodeValue", fragmentSyncBinding.editTextRemoteCodeValue.getText().toString());
         serviceIntent.putExtra("widgetId", widgetId);
 
         getContext().startService(serviceIntent);
diff --git a/app/src/main/java/com/github/jameshnsears/quoteunquote/configure/fragment/sync/SyncJsonSchemaValidation.kt b/app/src/main/java/com/github/jameshnsears/quoteunquote/configure/fragment/sync/SyncJsonSchemaValidation.kt
old mode 100644
new mode 100755
index bb5e8fc..6d20068
--- a/app/src/main/java/com/github/jameshnsears/quoteunquote/configure/fragment/sync/SyncJsonSchemaValidation.kt
+++ b/app/src/main/java/com/github/jameshnsears/quoteunquote/configure/fragment/sync/SyncJsonSchemaValidation.kt
@@ -31,7 +31,7 @@ class SyncJsonSchemaValidation {
             val inputStream =
                 context.resources.assets
                     .open(
-                        "archive.scheme.json"
+                        "sync.scheme.json"
                     )
             return inputStream.bufferedReader().use(BufferedReader::readText)
         }
diff --git a/app/src/main/java/com/github/jameshnsears/quoteunquote/configure/fragment/sync/SyncPreferences.java b/app/src/main/java/com/github/jameshnsears/quoteunquote/configure/fragment/sync/SyncPreferences.java
old mode 100644
new mode 100755
diff --git a/app/src/main/java/com/github/jameshnsears/quoteunquote/database/DatabaseRepository.java b/app/src/main/java/com/github/jameshnsears/quoteunquote/database/DatabaseRepository.java
old mode 100644
new mode 100755
index 7158d66..05bec80
--- a/app/src/main/java/com/github/jameshnsears/quoteunquote/database/DatabaseRepository.java
+++ b/app/src/main/java/com/github/jameshnsears/quoteunquote/database/DatabaseRepository.java
@@ -15,11 +15,12 @@ import com.github.jameshnsears.quoteunquote.database.history.FavouriteEntity;
 import com.github.jameshnsears.quoteunquote.database.history.PreviousDAO;
 import com.github.jameshnsears.quoteunquote.database.history.PreviousEntity;
 import com.github.jameshnsears.quoteunquote.database.history.ReportedDAO;
-import com.github.jameshnsears.quoteunquote.database.history.ReportedEntity;
+import com.github.jameshnsears.quoteunquote.database.history.external.AbstractHistoryExternalDatabase;
 import com.github.jameshnsears.quoteunquote.database.quotation.AbstractQuotationDatabase;
 import com.github.jameshnsears.quoteunquote.database.quotation.AuthorPOJO;
 import com.github.jameshnsears.quoteunquote.database.quotation.QuotationDAO;
 import com.github.jameshnsears.quoteunquote.database.quotation.QuotationEntity;
+import com.github.jameshnsears.quoteunquote.database.quotation.external.AbstractQuotationExternalDatabase;
 import com.github.jameshnsears.quoteunquote.utils.ContentSelection;
 
 import java.security.SecureRandom;
@@ -35,91 +36,141 @@ import timber.log.Timber;
 public class DatabaseRepository {
     @NonNull
     public static DatabaseRepository databaseRepository;
+
+    @Nullable
+    public static boolean useInternalDatabase = true;
+
     @NonNull
     protected final SecureRandom secureRandom = new SecureRandom();
-    @Nullable
-    public PreviousDAO previousDAO;
+
     @Nullable
     public AbstractQuotationDatabase abstractQuotationDatabase;
     @Nullable
+    public AbstractQuotationExternalDatabase abstractQuotationExternalDatabase;
+    @Nullable
     public AbstractHistoryDatabase abstractHistoryDatabase;
     @Nullable
+    public PreviousDAO previousDAO;
+    @Nullable
+    public AbstractHistoryExternalDatabase abstractHistoryExternalDatabase;
+    @Nullable
+    public PreviousDAO previousExternalDAO;
+    @Nullable
     protected QuotationDAO quotationDAO;
     @Nullable
+    protected QuotationDAO quotationExternalDAO;
+    @Nullable
     protected FavouriteDAO favouriteDAO;
     @Nullable
     protected ReportedDAO reportedDAO;
     @Nullable
     protected CurrentDAO currentDAO;
+    @Nullable
+    protected FavouriteDAO favouriteExternalDAO;
+    @Nullable
+    protected ReportedDAO reportedExternalDAO;
+    @Nullable
+    protected CurrentDAO currentExternalDAO;
 
     public DatabaseRepository() {
         //
     }
 
-    private DatabaseRepository(@NonNull final Context context) {
+    protected DatabaseRepository(@NonNull final Context context) {
         abstractQuotationDatabase = AbstractQuotationDatabase.getDatabase(context);
-        quotationDAO = abstractQuotationDatabase.quotationsDAO();
+        quotationDAO = abstractQuotationDatabase.quotationDAO();
+
+        abstractQuotationExternalDatabase = AbstractQuotationExternalDatabase.getDatabase(context);
+        quotationExternalDAO = abstractQuotationExternalDatabase.quotationExternalDAO();
+
         abstractHistoryDatabase = AbstractHistoryDatabase.getDatabase(context);
         previousDAO = abstractHistoryDatabase.previousDAO();
         favouriteDAO = abstractHistoryDatabase.favouritesDAO();
         reportedDAO = abstractHistoryDatabase.reportedDAO();
         currentDAO = abstractHistoryDatabase.currentDAO();
-    }
 
-    public static void resetDatabaseInstances(@NonNull final Context context) {
-        AbstractQuotationDatabase.quotationDatabase = null;
-        AbstractHistoryDatabase.historyDatabase = null;
-        DatabaseRepository.getInstance(context);
+        abstractHistoryExternalDatabase = AbstractHistoryExternalDatabase.getDatabase(context);
+        previousExternalDAO = abstractHistoryExternalDatabase.previousExternalDAO();
+        favouriteExternalDAO = abstractHistoryExternalDatabase.favouritesExternalDAO();
+        reportedExternalDAO = abstractHistoryExternalDatabase.reportedExternalDAO();
+        currentExternalDAO = abstractHistoryExternalDatabase.currentExternalDAO();
     }
 
     public static void close(@NonNull final Context context) {
         AbstractQuotationDatabase.getDatabase(context).close();
         AbstractQuotationDatabase.quotationDatabase = null;
 
+        AbstractQuotationExternalDatabase.getDatabase(context).close();
+        AbstractQuotationExternalDatabase.quotationExternalDatabase = null;
+
         AbstractHistoryDatabase.getDatabase(context).close();
         AbstractHistoryDatabase.historyDatabase = null;
+
+        AbstractHistoryExternalDatabase.getDatabase(context).close();
+        AbstractHistoryExternalDatabase.historyExternalDatabase = null;
     }
 
     @NonNull
     public static synchronized DatabaseRepository getInstance(@NonNull final Context context) {
-        if (DatabaseRepository.databaseRepository == null) {
-            DatabaseRepository.databaseRepository = new DatabaseRepository(context);
+        if (databaseRepository == null) {
+            databaseRepository = new DatabaseRepository(context);
         }
 
-        return DatabaseRepository.databaseRepository;
+        return databaseRepository;
     }
 
     @NonNull
     public static String getDefaultQuotationDigest() {
-        if (BuildConfig.FLAVOR.equals("emanuelkebede")) {
-            return "e8fa8bc3";
+        if (useInternalDatabase()) {
+            return "7a36e553";
+        } else {
+            return "00000000";
         }
+    }
 
-        if (BuildConfig.DEBUG) {
-            return "7a36e553";
+    @NonNull
+    public Single<Integer> countAll() {
+        if (useInternalDatabase()) {
+            return quotationDAO.countAll();
         }
 
-        return "1624c314";
+        return countAllExternal();
     }
 
     @NonNull
-    public Single<Integer> countAll() {
-        return quotationDAO.countAll();
+    public Single<Integer> countAllExternal() {
+        return quotationExternalDAO.countAll();
     }
 
     public int countPrevious(final int widgetId, @NonNull final ContentSelection contentSelection) {
-        return previousDAO.countPrevious(widgetId, contentSelection);
+        if (useInternalDatabase()) {
+            return previousDAO.countPrevious(widgetId, contentSelection);
+        }
+
+        return previousExternalDAO.countPrevious(widgetId, contentSelection);
+    }
+
+    private static boolean useInternalDatabase() {
+        return useInternalDatabase;
     }
 
     public int countPreviousDigest(
             final int widgetId,
             @NonNull final ContentSelection contentSelection,
             @NonNull String digest) {
-        return previousDAO.countPreviousDigest(widgetId, contentSelection, digest);
+        if (useInternalDatabase()) {
+            return previousDAO.countPreviousDigest(widgetId, contentSelection, digest);
+        }
+
+        return previousExternalDAO.countPreviousDigest(widgetId, contentSelection, digest);
     }
 
     public int countPrevious(final int widgetId) {
-        return previousDAO.countPrevious(widgetId);
+        if (useInternalDatabase()) {
+            return previousDAO.countPrevious(widgetId);
+        }
+
+        return previousExternalDAO.countPrevious(widgetId);
     }
 
     public int positionInPrevious(
@@ -143,21 +194,42 @@ public class DatabaseRepository {
 
         switch (quotationsPreferences.getContentSelection()) {
             case FAVOURITES:
-                countTotalNext = favouriteDAO.countFavourites().blockingGet();
+                if (useInternalDatabase()) {
+                    countTotalNext = favouriteDAO.countFavourites().blockingGet();
+                } else {
+                    countTotalNext = favouriteExternalDAO.countFavourites().blockingGet();
+                }
                 break;
 
             case AUTHOR:
-                countTotalNext = quotationDAO.getDigestsForAuthor(quotationsPreferences.getContentSelectionAuthor()).size();
+                if (useInternalDatabase()) {
+                    countTotalNext
+                            = quotationDAO.getDigestsForAuthor(
+                            quotationsPreferences.getContentSelectionAuthor()).size();
+                } else {
+                    countTotalNext
+                            = quotationExternalDAO.getDigestsForAuthor(
+                            quotationsPreferences.getContentSelectionAuthor()).size();
+                }
                 break;
 
             case SEARCH:
-                countTotalNext = quotationDAO.getSearchTextDigests(
-                        "%" + quotationsPreferences.getContentSelectionSearch() + "%").size();
+                if (useInternalDatabase()) {
+                    countTotalNext = quotationDAO.getSearchTextDigests(
+                            "%" + quotationsPreferences.getContentSelectionSearch() + "%").size();
+                } else {
+                    countTotalNext = quotationExternalDAO.getSearchTextDigests(
+                            "%" + quotationsPreferences.getContentSelectionSearch() + "%").size();
+                }
                 break;
 
             default:
                 // ALL:
-                countTotalNext = quotationDAO.countAll().blockingGet();
+                if (useInternalDatabase()) {
+                    countTotalNext = quotationDAO.countAll().blockingGet();
+                } else {
+                    countTotalNext = quotationExternalDAO.countAll().blockingGet();
+                }
                 break;
         }
         return countTotalNext;
@@ -172,10 +244,20 @@ public class DatabaseRepository {
 
         if (contentSelection == ContentSelection.AUTHOR) {
             previousDigests = new HashSet<>(getPreviousDigests(widgetId, ContentSelection.AUTHOR));
-            availableDigests = new HashSet<>(quotationDAO.getDigestsForAuthor(criteria));
+            if (useInternalDatabase()) {
+                availableDigests = new HashSet<>(quotationDAO.getDigestsForAuthor(criteria));
+            } else {
+                availableDigests = new HashSet<>(quotationExternalDAO.getDigestsForAuthor(criteria));
+            }
         } else {
             previousDigests = new HashSet<>(getPreviousDigests(widgetId, ContentSelection.SEARCH));
-            availableDigests = new HashSet<>(quotationDAO.getSearchTextDigests("%" + criteria + "%"));
+            if (useInternalDatabase()) {
+                availableDigests
+                        = new HashSet<>(quotationDAO.getSearchTextDigests("%" + criteria + "%"));
+            } else {
+                availableDigests
+                        = new HashSet<>(quotationExternalDAO.getSearchTextDigests("%" + criteria + "%"));
+            }
         }
 
         int countPrevious = 0;
@@ -190,72 +272,144 @@ public class DatabaseRepository {
 
     @NonNull
     public Single<Integer> countFavourites() {
-        return favouriteDAO.countFavourites();
+        if (useInternalDatabase()) {
+            return favouriteDAO.countFavourites();
+        } else {
+            return favouriteExternalDAO.countFavourites();
+        }
     }
 
     @NonNull
     public QuotationEntity getNextQuotation(final int widgetId, @NonNull final ContentSelection contentSelection) {
-        return getQuotation(previousDAO.getLastPrevious(widgetId, contentSelection).digest);
+        if (useInternalDatabase()) {
+            return getQuotation(previousDAO.getLastPrevious(widgetId, contentSelection).digest);
+        } else {
+            return getQuotation(previousExternalDAO.getLastPrevious(widgetId, contentSelection).digest);
+        }
     }
 
     @NonNull
     public String getLastPreviousDigest(final int widgetId, @NonNull final ContentSelection contentSelection) {
-        return previousDAO.getLastPrevious(widgetId, contentSelection).digest;
+        if (useInternalDatabase()) {
+            return previousDAO.getLastPrevious(widgetId, contentSelection).digest;
+        } else {
+            return previousExternalDAO.getLastPrevious(widgetId, contentSelection).digest;
+        }
     }
 
     @NonNull
     public List<String> getPreviousDigests(final int widgetId, @NonNull final ContentSelection contentSelection) {
-        return previousDAO.getPreviousDigests(widgetId, contentSelection);
+        if (useInternalDatabase()) {
+            return previousDAO.getPreviousDigests(widgetId, contentSelection);
+        } else {
+            return previousExternalDAO.getPreviousDigests(widgetId, contentSelection);
+        }
     }
 
     @NonNull
     public List<PreviousEntity> getPrevious() {
-        return previousDAO.getLastPrevious();
+        if (useInternalDatabase()) {
+            return previousDAO.getLastPrevious();
+        } else {
+            return previousExternalDAO.getLastPrevious();
+        }
     }
 
     @NonNull
     public List<String> getFavouriteDigests() {
-        return favouriteDAO.getFavouriteDigests();
+        if (useInternalDatabase()) {
+            return favouriteDAO.getFavouriteDigests();
+        } else {
+            return favouriteExternalDAO.getFavouriteDigests();
+        }
     }
 
     @NonNull
     public List<FavouriteEntity> getFavourites() {
-        return favouriteDAO.getFavourites();
+        if (useInternalDatabase()) {
+            return favouriteDAO.getFavourites();
+        } else {
+            return favouriteExternalDAO.getFavourites();
+        }
     }
 
     @NonNull
     public Single<List<AuthorPOJO>> getAuthorsAndQuotationCounts() {
-        if (BuildConfig.DEBUG) {
+        if (useInternalDatabase()) {
             return quotationDAO.getAuthorsAndQuotationCounts(1);
+        } else {
+            return quotationExternalDAO.getAuthorsAndQuotationCounts(1);
         }
-        return quotationDAO.getAuthorsAndQuotationCounts(5);
     }
 
     @NonNull
-    public Integer countSearchText(@NonNull final String text) {
-        return quotationDAO.countSearchText("%" + text + "%");
+    public Integer countSearchText(@NonNull final String text, boolean favouritesOnly) {
+        if (favouritesOnly) {
+            int searchCount = 0;
+            if (useInternalDatabase()) {
+                for (String digest : favouriteDAO.getFavouriteDigests()) {
+                    QuotationEntity quotationEntity = quotationDAO.getQuotation(digest);
+                    if (quotationEntity.author.contains(text) || quotationEntity.quotation.contains(text)) {
+                        searchCount += 1;
+                    }
+                }
+            } else {
+                for (String digest : favouriteExternalDAO.getFavouriteDigests()) {
+                    QuotationEntity quotationEntity = quotationExternalDAO.getQuotation(digest);
+                    if (quotationEntity.author.contains(text) || quotationEntity.quotation.contains(text)) {
+                        searchCount += 1;
+                    }
+                }
+            }
+
+            return searchCount;
+        } else {
+            if (useInternalDatabase()) {
+                return quotationDAO.countSearchText("%" + text + "%");
+            } else {
+                return quotationExternalDAO.countSearchText("%" + text + "%");
+            }
+        }
     }
 
     @NonNull
     public List<QuotationEntity> getAllQuotations() {
-        return quotationDAO.getAllQuotations();
+        if (useInternalDatabase()) {
+            return quotationDAO.getAllQuotations();
+        } else {
+            return quotationExternalDAO.getAllQuotations();
+        }
     }
 
     @NonNull
     public QuotationEntity getQuotation(@NonNull final String digest) {
-        return quotationDAO.getQuotation(digest);
+        if (useInternalDatabase()) {
+            return quotationDAO.getQuotation(digest);
+        } else {
+            return quotationExternalDAO.getQuotation(digest);
+        }
     }
 
     public void markAsPrevious(
             final int widgetId,
             @NonNull final ContentSelection contentSelection,
             @NonNull final String digest) {
-        previousDAO.markAsPrevious(new PreviousEntity(widgetId, contentSelection, digest));
+        if (useInternalDatabase()) {
+            previousDAO.markAsPrevious(new PreviousEntity(widgetId, contentSelection, digest));
+        } else {
+            previousExternalDAO.markAsPrevious(new PreviousEntity(widgetId, contentSelection, digest));
+        }
     }
 
     public void markAsFavourite(@NonNull final String digest) {
-        if (favouriteDAO.isFavourite(digest) == 0) {
-            favouriteDAO.markAsFavourite(new FavouriteEntity(digest));
+        if (useInternalDatabase()) {
+            if (favouriteDAO.isFavourite(digest) == 0) {
+                favouriteDAO.markAsFavourite(new FavouriteEntity(digest));
+            }
+        } else {
+            if (favouriteExternalDAO.isFavourite(digest) == 0) {
+                favouriteExternalDAO.markAsFavourite(new FavouriteEntity(digest));
+            }
         }
     }
 
@@ -263,13 +417,25 @@ public class DatabaseRepository {
             final int widgetId,
             @NonNull final String digest) {
         Timber.d("digest=%s", digest);
-        currentDAO.erase(widgetId);
-        currentDAO.markAsCurrent(new CurrentEntity(widgetId, digest));
+        if (useInternalDatabase()) {
+            currentDAO.erase(widgetId);
+            currentDAO.markAsCurrent(new CurrentEntity(widgetId, digest));
+        } else {
+            currentExternalDAO.erase(widgetId);
+            currentExternalDAO.markAsCurrent(new CurrentEntity(widgetId, digest));
+        }
     }
 
     @NonNull
     public QuotationEntity getCurrentQuotation(final int widgetId) {
-        QuotationEntity quotationEntity = getQuotation(currentDAO.getCurrentDigest(widgetId));
+        QuotationEntity quotationEntity;
+
+        if (useInternalDatabase()) {
+            quotationEntity = getQuotation(currentDAO.getCurrentDigest(widgetId));
+        } else {
+            quotationEntity = getQuotation(currentExternalDAO.getCurrentDigest(widgetId));
+        }
+
         if (quotationEntity != null) {
             Timber.d("digest=%s", quotationEntity.digest);
         }
@@ -336,28 +502,50 @@ public class DatabaseRepository {
 
         switch (contentSelection) {
             case FAVOURITES:
-                nextQuotationDigests
-                        = new LinkedHashSet<>(favouriteDAO.getNextFavouriteDigests());
+                if (useInternalDatabase()) {
+                    nextQuotationDigests
+                            = new LinkedHashSet<>(favouriteDAO.getNextFavouriteDigests());
+                } else {
+                    nextQuotationDigests
+                            = new LinkedHashSet<>(favouriteExternalDAO.getNextFavouriteDigests());
+                }
                 nextQuotationDigests.removeAll(previousDigests);
                 break;
 
             case AUTHOR:
-                final LinkedHashSet<String> authorDigests
-                        = new LinkedHashSet<>(quotationDAO.getNextAuthorDigest(searchString));
+                LinkedHashSet<String> authorDigests;
+                if (useInternalDatabase()) {
+                    authorDigests
+                            = new LinkedHashSet<>(quotationDAO.getNextAuthorDigest(searchString));
+                } else {
+                    authorDigests
+                            = new LinkedHashSet<>(quotationExternalDAO.getNextAuthorDigest(searchString));
+                }
                 authorDigests.removeAll(previousDigests);
                 nextQuotationDigests = authorDigests;
                 break;
 
             case SEARCH:
-                final LinkedHashSet<String> searchDigests
-                        = new LinkedHashSet<>(quotationDAO.getNextSearchTextDigests("%" + searchString + "%"));
+                final LinkedHashSet<String> searchDigests;
+                if (useInternalDatabase()) {
+                    searchDigests
+                            = new LinkedHashSet<>(quotationDAO.getNextSearchTextDigests("%" + searchString + "%"));
+                } else {
+                    searchDigests
+                            = new LinkedHashSet<>(quotationExternalDAO.getNextSearchTextDigests("%" + searchString + "%"));
+                }
                 searchDigests.removeAll(previousDigests);
                 nextQuotationDigests = searchDigests;
                 break;
 
             default:
                 // ALL:
-                final LinkedHashSet<String> allDigests = new LinkedHashSet<>(quotationDAO.getNextAllDigests());
+                final LinkedHashSet<String> allDigests;
+                if (useInternalDatabase()) {
+                    allDigests = new LinkedHashSet<>(quotationDAO.getNextAllDigests());
+                } else {
+                    allDigests = new LinkedHashSet<>(quotationExternalDAO.getNextAllDigests());
+                }
                 allDigests.removeAll(previousDigests);
                 nextQuotationDigests = allDigests;
                 break;
@@ -372,35 +560,75 @@ public class DatabaseRepository {
 
     public void eraseFavourite(final int widgetId, @NonNull final String digest) {
         Timber.d("digest=%s", digest);
-        favouriteDAO.deleteFavourite(digest);
-        previousDAO.erase(widgetId, ContentSelection.FAVOURITES, digest);
+
+        if (useInternalDatabase()) {
+            favouriteDAO.deleteFavourite(digest);
+            previousDAO.erase(widgetId, ContentSelection.FAVOURITES, digest);
+        } else {
+            favouriteExternalDAO.deleteFavourite(digest);
+            previousExternalDAO.erase(widgetId, ContentSelection.FAVOURITES, digest);
+        }
     }
 
     public void erase() {
-        previousDAO.erase();
-        currentDAO.erase();
-        favouriteDAO.erase();
-        reportedDAO.erase();
+        if (useInternalDatabase()) {
+            previousDAO.erase();
+            currentDAO.erase();
+            favouriteDAO.erase();
+            reportedDAO.erase();
+        } else {
+            quotationExternalDAO.erase();
+
+            previousExternalDAO.erase();
+            currentExternalDAO.erase();
+            favouriteExternalDAO.erase();
+            reportedExternalDAO.erase();
+        }
     }
 
     public void eraseForRestore() {
         previousDAO.erase();
         currentDAO.erase();
+        previousExternalDAO.erase();
+        currentExternalDAO.erase();
     }
 
     public void erase(final int widgetId) {
-        previousDAO.erase(widgetId);
-        currentDAO.erase(widgetId);
+        if (useInternalDatabase()) {
+            previousDAO.erase(widgetId);
+            currentDAO.erase(widgetId);
+        } else {
+            previousExternalDAO.erase(widgetId);
+            currentExternalDAO.erase(widgetId);
+        }
     }
 
     public void erase(final int widgetId, @NonNull final ContentSelection contentSelection) {
         Timber.d("contentType=%d", contentSelection.getContentSelection());
-        previousDAO.erase(widgetId, contentSelection);
-        currentDAO.erase(widgetId);
+
+        if (useInternalDatabase()) {
+            previousDAO.erase(widgetId, contentSelection);
+            currentDAO.erase(widgetId);
+        } else {
+            previousExternalDAO.erase(widgetId, contentSelection);
+            currentExternalDAO.erase(widgetId);
+        }
     }
 
     @NonNull
     public Boolean isFavourite(@NonNull final String digest) {
-        return favouriteDAO.isFavourite(digest) > 0;
+        if (useInternalDatabase()) {
+            return favouriteDAO.isFavourite(digest) > 0;
+        } else {
+            return favouriteExternalDAO.isFavourite(digest) > 0;
+        }
+    }
+
+    public void insertQuotationsExternal(
+            @NonNull final LinkedHashSet<QuotationEntity> quotationEntityList) {
+
+        for (final QuotationEntity quotationEntity : quotationEntityList) {
+            quotationExternalDAO.insertQuotation(quotationEntity);
+        }
     }
 }
diff --git a/app/src/main/java/com/github/jameshnsears/quoteunquote/database/history/AbstractHistoryDatabase.java b/app/src/main/java/com/github/jameshnsears/quoteunquote/database/history/AbstractHistoryDatabase.java
old mode 100644
new mode 100755
diff --git a/app/src/main/java/com/github/jameshnsears/quoteunquote/database/history/CurrentDAO.java b/app/src/main/java/com/github/jameshnsears/quoteunquote/database/history/CurrentDAO.java
old mode 100644
new mode 100755
diff --git a/app/src/main/java/com/github/jameshnsears/quoteunquote/database/history/CurrentEntity.java b/app/src/main/java/com/github/jameshnsears/quoteunquote/database/history/CurrentEntity.java
old mode 100644
new mode 100755
diff --git a/app/src/main/java/com/github/jameshnsears/quoteunquote/database/history/FavouriteDAO.java b/app/src/main/java/com/github/jameshnsears/quoteunquote/database/history/FavouriteDAO.java
old mode 100644
new mode 100755
diff --git a/app/src/main/java/com/github/jameshnsears/quoteunquote/database/history/FavouriteEntity.java b/app/src/main/java/com/github/jameshnsears/quoteunquote/database/history/FavouriteEntity.java
old mode 100644
new mode 100755
diff --git a/app/src/main/java/com/github/jameshnsears/quoteunquote/database/history/PreviousDAO.java b/app/src/main/java/com/github/jameshnsears/quoteunquote/database/history/PreviousDAO.java
old mode 100644
new mode 100755
diff --git a/app/src/main/java/com/github/jameshnsears/quoteunquote/database/history/PreviousEntity.java b/app/src/main/java/com/github/jameshnsears/quoteunquote/database/history/PreviousEntity.java
old mode 100644
new mode 100755
diff --git a/app/src/main/java/com/github/jameshnsears/quoteunquote/database/history/ReportedDAO.java b/app/src/main/java/com/github/jameshnsears/quoteunquote/database/history/ReportedDAO.java
old mode 100644
new mode 100755
diff --git a/app/src/main/java/com/github/jameshnsears/quoteunquote/database/history/ReportedEntity.java b/app/src/main/java/com/github/jameshnsears/quoteunquote/database/history/ReportedEntity.java
old mode 100644
new mode 100755
diff --git a/app/src/main/java/com/github/jameshnsears/quoteunquote/database/history/external/AbstractHistoryExternalDatabase.java b/app/src/main/java/com/github/jameshnsears/quoteunquote/database/history/external/AbstractHistoryExternalDatabase.java
new file mode 100755
index 0000000..77f0a25
--- /dev/null
+++ b/app/src/main/java/com/github/jameshnsears/quoteunquote/database/history/external/AbstractHistoryExternalDatabase.java
@@ -0,0 +1,53 @@
+package com.github.jameshnsears.quoteunquote.database.history.external;
+
+import android.content.Context;
+
+import androidx.annotation.NonNull;
+import androidx.annotation.Nullable;
+import androidx.room.Database;
+import androidx.room.Room;
+import androidx.room.RoomDatabase;
+
+import com.github.jameshnsears.quoteunquote.database.history.CurrentDAO;
+import com.github.jameshnsears.quoteunquote.database.history.CurrentEntity;
+import com.github.jameshnsears.quoteunquote.database.history.FavouriteDAO;
+import com.github.jameshnsears.quoteunquote.database.history.FavouriteEntity;
+import com.github.jameshnsears.quoteunquote.database.history.PreviousDAO;
+import com.github.jameshnsears.quoteunquote.database.history.PreviousEntity;
+import com.github.jameshnsears.quoteunquote.database.history.ReportedDAO;
+import com.github.jameshnsears.quoteunquote.database.history.ReportedEntity;
+
+import timber.log.Timber;
+
+@Database(
+        entities = {PreviousEntity.class, FavouriteEntity.class, ReportedEntity.class, CurrentEntity.class},
+        version = 1)
+public abstract class AbstractHistoryExternalDatabase extends RoomDatabase {
+    @NonNull
+    public static final String DATABASE_NAME = "history.external.db";
+
+    @Nullable
+    public static AbstractHistoryExternalDatabase historyExternalDatabase;
+
+    @NonNull
+    public static AbstractHistoryExternalDatabase getDatabase(@NonNull final Context context) {
+        synchronized (AbstractHistoryExternalDatabase.class) {
+            Timber.d("%b", historyExternalDatabase == null);
+            if (historyExternalDatabase == null) {
+                historyExternalDatabase = Room.databaseBuilder(context,
+                        AbstractHistoryExternalDatabase.class, DATABASE_NAME)
+                        .build();
+            }
+
+            return historyExternalDatabase;
+        }
+    }
+
+    public abstract PreviousDAO previousExternalDAO();
+
+    public abstract FavouriteDAO favouritesExternalDAO();
+
+    public abstract ReportedDAO reportedExternalDAO();
+
+    public abstract CurrentDAO currentExternalDAO();
+}
diff --git a/app/src/main/java/com/github/jameshnsears/quoteunquote/database/quotation/AbstractQuotationDatabase.java b/app/src/main/java/com/github/jameshnsears/quoteunquote/database/quotation/AbstractQuotationDatabase.java
old mode 100644
new mode 100755
index bced525..2d2ebf8
--- a/app/src/main/java/com/github/jameshnsears/quoteunquote/database/quotation/AbstractQuotationDatabase.java
+++ b/app/src/main/java/com/github/jameshnsears/quoteunquote/database/quotation/AbstractQuotationDatabase.java
@@ -10,7 +10,7 @@ import androidx.room.RoomDatabase;
 
 import com.github.jameshnsears.quoteunquote.BuildConfig;
 
-@Database(entities = QuotationEntity.class, version = 28)
+@Database(entities = QuotationEntity.class, version = 30)
 public abstract class AbstractQuotationDatabase extends RoomDatabase {
     @Nullable
     public static AbstractQuotationDatabase quotationDatabase;
@@ -30,5 +30,5 @@ public abstract class AbstractQuotationDatabase extends RoomDatabase {
         }
     }
 
-    public abstract QuotationDAO quotationsDAO();
+    public abstract QuotationDAO quotationDAO();
 }
diff --git a/app/src/main/java/com/github/jameshnsears/quoteunquote/database/quotation/AuthorPOJO.java b/app/src/main/java/com/github/jameshnsears/quoteunquote/database/quotation/AuthorPOJO.java
old mode 100644
new mode 100755
diff --git a/app/src/main/java/com/github/jameshnsears/quoteunquote/database/quotation/QuotationDAO.java b/app/src/main/java/com/github/jameshnsears/quoteunquote/database/quotation/QuotationDAO.java
old mode 100644
new mode 100755
diff --git a/app/src/main/java/com/github/jameshnsears/quoteunquote/database/quotation/QuotationEntity.java b/app/src/main/java/com/github/jameshnsears/quoteunquote/database/quotation/QuotationEntity.java
old mode 100644
new mode 100755
index 8692d63..a198a23
--- a/app/src/main/java/com/github/jameshnsears/quoteunquote/database/quotation/QuotationEntity.java
+++ b/app/src/main/java/com/github/jameshnsears/quoteunquote/database/quotation/QuotationEntity.java
@@ -48,6 +48,6 @@ public class QuotationEntity {
 
     @NonNull
     public String theShareContent() {
-        return this.theQuotation() + "\n" + this.theAuthor();
+        return quotation + "\n\n" + author;
     }
 }
diff --git a/app/src/main/java/com/github/jameshnsears/quoteunquote/database/quotation/external/AbstractQuotationExternalDatabase.java b/app/src/main/java/com/github/jameshnsears/quoteunquote/database/quotation/external/AbstractQuotationExternalDatabase.java
new file mode 100755
index 0000000..d11699e
--- /dev/null
+++ b/app/src/main/java/com/github/jameshnsears/quoteunquote/database/quotation/external/AbstractQuotationExternalDatabase.java
@@ -0,0 +1,36 @@
+package com.github.jameshnsears.quoteunquote.database.quotation.external;
+
+import android.content.Context;
+
+import androidx.annotation.NonNull;
+import androidx.annotation.Nullable;
+import androidx.room.Database;
+import androidx.room.Room;
+import androidx.room.RoomDatabase;
+
+import com.github.jameshnsears.quoteunquote.database.quotation.QuotationDAO;
+import com.github.jameshnsears.quoteunquote.database.quotation.QuotationEntity;
+
+@Database(entities = QuotationEntity.class, version = 1)
+public abstract class AbstractQuotationExternalDatabase extends RoomDatabase {
+    @NonNull
+    public static final String DATABASE_NAME = "quotations.external.db";
+
+    @Nullable
+    public static AbstractQuotationExternalDatabase quotationExternalDatabase;
+
+    @NonNull
+    public static AbstractQuotationExternalDatabase getDatabase(@NonNull Context context) {
+        synchronized (AbstractQuotationExternalDatabase.class) {
+            if (quotationExternalDatabase == null) {
+                quotationExternalDatabase = Room.databaseBuilder(context,
+                                AbstractQuotationExternalDatabase.class, DATABASE_NAME)
+                        .createFromAsset(DATABASE_NAME)
+                        .build();
+            }
+            return quotationExternalDatabase;
+        }
+    }
+
+    public abstract QuotationDAO quotationExternalDAO();
+}
diff --git a/app/src/main/java/com/github/jameshnsears/quoteunquote/listview/ListViewLayoutIdHelper.kt b/app/src/main/java/com/github/jameshnsears/quoteunquote/listview/ListViewLayoutIdHelper.kt
old mode 100644
new mode 100755
diff --git a/app/src/main/java/com/github/jameshnsears/quoteunquote/listview/ListViewProvider.java b/app/src/main/java/com/github/jameshnsears/quoteunquote/listview/ListViewProvider.java
old mode 100644
new mode 100755
index 99f851f..eaf2316
--- a/app/src/main/java/com/github/jameshnsears/quoteunquote/listview/ListViewProvider.java
+++ b/app/src/main/java/com/github/jameshnsears/quoteunquote/listview/ListViewProvider.java
@@ -47,13 +47,13 @@ class ListViewProvider implements RemoteViewsService.RemoteViewsFactory {
             widgetId = intent.getIntExtra(AppWidgetManager.EXTRA_APPWIDGET_ID, 0);
             Timber.d("%d", widgetId);
 
-            setQuoteUnquoteModel(new QuoteUnquoteModel(context));
+            setQuoteUnquoteModel(new QuoteUnquoteModel(widgetId, context));
 
             quotationEntity = getQuoteUnquoteModel().getCurrentQuotation(widgetId);
         }
     }
 
-    private String getPosition() {
+    private synchronized String getPosition() {
         QuotationsPreferences quotationsPreferences = new QuotationsPreferences(widgetId, context);
 
         String quotationPosition = getQuoteUnquoteModel().getCurrentPosition(
@@ -119,12 +119,14 @@ class ListViewProvider implements RemoteViewsService.RemoteViewsFactory {
                 R.id.textViewRowQuotation,
                 IntentFactoryHelper.createIntent(widgetId));
 
-        remoteViews.setOnClickFillInIntent(
-                R.id.textViewRowAuthor,
-                IntentFactoryHelper.createClickFillInIntent(
-                        "wikipedia",
-                        quotationEntity.wikipedia,
-                        widgetId));
+        if (quotationEntity.wikipedia != null) {
+            remoteViews.setOnClickFillInIntent(
+                    R.id.textViewRowAuthor,
+                    IntentFactoryHelper.createClickFillInIntent(
+                            "wikipedia",
+                            quotationEntity.wikipedia,
+                            widgetId));
+        }
 
         remoteViews.setOnClickFillInIntent(
                 R.id.textViewRowPosition,
@@ -137,8 +139,6 @@ class ListViewProvider implements RemoteViewsService.RemoteViewsFactory {
             String textFamily, String textStyle, boolean forceItalicRegular) {
         int layoutId = 0;
 
-
-
         switch (textFamily) {
             case "Cursive":
                 if (forceItalicRegular) {
@@ -203,12 +203,12 @@ class ListViewProvider implements RemoteViewsService.RemoteViewsFactory {
                         appearancePreferences.getAppearanceTextStyle(),
                         appearancePreferences.getAppearanceTextForceItalicRegular()));
 
-        synchronized (this) {
-            if (!quotationList.isEmpty() && !"".equals(quotationEntity.theQuotation())) {
-                setRemoteViewQuotation(remoteViews);
-                setRemoteViewAuthor(remoteViews);
-                setRemoteViewPosition(remoteViews);
-            }
+        if (!quotationList.isEmpty()
+                && !"".equals(quotationEntity.theQuotation())
+                && !"".equals(getPosition())) {
+            setRemoteViewQuotation(remoteViews);
+            setRemoteViewAuthor(remoteViews);
+            setRemoteViewPosition(remoteViews);
         }
 
         return remoteViews;
diff --git a/app/src/main/java/com/github/jameshnsears/quoteunquote/listview/ListViewService.java b/app/src/main/java/com/github/jameshnsears/quoteunquote/listview/ListViewService.java
old mode 100644
new mode 100755
diff --git a/app/src/main/java/com/github/jameshnsears/quoteunquote/utils/CSVHelper.java b/app/src/main/java/com/github/jameshnsears/quoteunquote/utils/CSVHelper.java
old mode 100644
new mode 100755
index 82114ad..9e83299
--- a/app/src/main/java/com/github/jameshnsears/quoteunquote/utils/CSVHelper.java
+++ b/app/src/main/java/com/github/jameshnsears/quoteunquote/utils/CSVHelper.java
@@ -1,28 +1,32 @@
 package com.github.jameshnsears.quoteunquote.utils;
 
 import com.github.jameshnsears.quoteunquote.database.quotation.QuotationEntity;
+import com.google.common.hash.Hashing;
 
 import org.apache.commons.csv.CSVFormat;
+import org.apache.commons.csv.CSVParser;
 import org.apache.commons.csv.CSVPrinter;
+import org.apache.commons.csv.CSVRecord;
 import org.apache.commons.csv.QuoteMode;
 
 import java.io.FileOutputStream;
 import java.io.IOException;
+import java.io.InputStream;
 import java.io.OutputStreamWriter;
+import java.nio.charset.Charset;
+import java.nio.charset.StandardCharsets;
 import java.util.ArrayList;
+import java.util.LinkedHashSet;
+
+import timber.log.Timber;
 
 public class CSVHelper {
-    public void csvWriteFavourites(FileOutputStream fileOutputStream, ArrayList<QuotationEntity> exportableFavourites) throws IOException {
+    private static String[] headers = {"Author", "Quotation"};
+
+    public void csvExportFavourites(FileOutputStream fileOutputStream, ArrayList<QuotationEntity> exportableFavourites) throws IOException {
         final OutputStreamWriter outputStreamWriter = new OutputStreamWriter(fileOutputStream);
-        CSVFormat csvFormat = CSVFormat.Builder.create()
-                .setDelimiter("||")
-                .setRecordSeparator("\n")
-                .setEscape('\\')
-                .setQuoteMode(QuoteMode.NONE)
-                .setHeader("Author","Quotation")
-                .build();
 
-        final CSVPrinter csvPrinter = new CSVPrinter(outputStreamWriter, csvFormat);
+        final CSVPrinter csvPrinter = new CSVPrinter(outputStreamWriter, getCsvFormatForExport());
 
         for (final QuotationEntity quotationEntityFavourite : exportableFavourites) {
             csvPrinter.printRecord(
@@ -34,4 +38,108 @@ public class CSVHelper {
         csvPrinter.close();
         outputStreamWriter.close();
     }
+
+    private CSVFormat getCsvFormatForExport() {
+        return CSVFormat.Builder.create()
+                .setDelimiter("||")
+                .setRecordSeparator("\n")
+                .setEscape('\\')
+                .setQuoteMode(QuoteMode.NONE)
+                .setHeader(headers)
+                .setSkipHeaderRecord(true)
+                .build();
+    }
+
+    private CSVFormat getCsvFormatForImport() {
+        return CSVFormat.Builder.create()
+                .setDelimiter("||")
+                .setRecordSeparator("\n")
+                .setEscape('\\')
+                .setQuoteMode(QuoteMode.NONE)
+                .setHeader(headers)
+                .build();
+    }
+
+    public LinkedHashSet<QuotationEntity> csvImportDatabase(InputStream inputStream) throws CVSHelperException {
+        CSVParser parser = null;
+
+        LinkedHashSet<QuotationEntity> quotationEntityLinkedHashSet = new LinkedHashSet<>();
+
+        try {
+            parser = CSVParser.parse(inputStream, Charset.defaultCharset(), getCsvFormatForImport());
+            int recordCount = 0;
+            for (CSVRecord record : parser) {
+                String author = record.get("Author");
+                testNotEmptyAuthor(author);
+
+                String quotation = record.get("Quotation");
+                testNotEmptyQuotation(quotation);
+
+
+                String digest = makeDigest(recordCount, author, quotation);
+
+                recordCount += 1;
+
+                QuotationEntity q = new QuotationEntity(
+                        digest,
+                        "?",
+                        author,
+                        quotation);
+                if (!quotationEntityLinkedHashSet.contains(q)) {
+                    quotationEntityLinkedHashSet.add(q);
+                }
+            }
+        } catch (IllegalArgumentException | IOException exception) {
+            throw new CVSHelperException(exception.getMessage());
+        } finally {
+            if (parser != null) {
+                try {
+                    parser.close();
+                } catch (IOException e) {
+                    Timber.e(e.getMessage());
+                }
+            }
+        }
+
+        if (quotationEntityLinkedHashSet.size() == 0) {
+            throw new CVSHelperException("empty file");
+        }
+
+        return quotationEntityLinkedHashSet;
+    }
+
+    private String makeDigest(int recordCount, String author, String quotation) {
+        String digest;
+        if (recordCount == 0) {
+            digest = "00000000";
+        } else {
+            digest = makeDigest(quotation, author);
+        }
+        return digest;
+    }
+
+    private void testNotEmptyQuotation(String quotation) throws CVSHelperException {
+        if (quotation.equals("") || quotation.length() <= 1) {
+            throw new CVSHelperException("empty quotation");
+        }
+    }
+
+    private void testNotEmptyAuthor(String author) throws CVSHelperException {
+        if (author.equals("")) {
+            throw new CVSHelperException("empty author");
+        }
+    }
+
+    public String makeDigest(String quotation, String author) {
+        String rawString = quotation + author;
+        return Hashing.sha256()
+                .hashBytes(rawString.getBytes(StandardCharsets.UTF_8))
+                .toString().substring(0, 8);
+    }
+
+    public class CVSHelperException extends Exception {
+        public CVSHelperException(String errorMessage) {
+            super(errorMessage);
+        }
+    }
 }
diff --git a/app/src/main/java/com/github/jameshnsears/quoteunquote/utils/ContentSelection.java b/app/src/main/java/com/github/jameshnsears/quoteunquote/utils/ContentSelection.java
old mode 100644
new mode 100755
diff --git a/app/src/main/java/com/github/jameshnsears/quoteunquote/utils/IntentFactoryHelper.java b/app/src/main/java/com/github/jameshnsears/quoteunquote/utils/IntentFactoryHelper.java
old mode 100644
new mode 100755
diff --git a/app/src/main/java/com/github/jameshnsears/quoteunquote/utils/notification/NotificationHelper.java b/app/src/main/java/com/github/jameshnsears/quoteunquote/utils/notification/NotificationHelper.java
old mode 100644
new mode 100755
diff --git a/app/src/main/java/com/github/jameshnsears/quoteunquote/utils/preference/PreferencesFacade.java b/app/src/main/java/com/github/jameshnsears/quoteunquote/utils/preference/PreferencesFacade.java
old mode 100644
new mode 100755
diff --git a/app/src/test/java/com/github/jameshnsears/quoteunquote/QuoteUnquoteWidgetTest.kt b/app/src/test/java/com/github/jameshnsears/quoteunquote/QuoteUnquoteWidgetTest.kt
old mode 100644
new mode 100755
diff --git a/app/src/test/java/com/github/jameshnsears/quoteunquote/configure/fragment/appearance/AppearanceFragmentPreferencesTest.kt b/app/src/test/java/com/github/jameshnsears/quoteunquote/configure/fragment/appearance/AppearanceFragmentPreferencesTest.kt
old mode 100644
new mode 100755
diff --git a/app/src/test/java/com/github/jameshnsears/quoteunquote/configure/fragment/appearance/tabs/style/AppearanceStyleFragmentDouble.kt b/app/src/test/java/com/github/jameshnsears/quoteunquote/configure/fragment/appearance/tabs/style/AppearanceStyleFragmentDouble.kt
old mode 100644
new mode 100755
diff --git a/app/src/test/java/com/github/jameshnsears/quoteunquote/configure/fragment/appearance/tabs/style/text/AppearanceTextDialogAuthorDouble.kt b/app/src/test/java/com/github/jameshnsears/quoteunquote/configure/fragment/appearance/tabs/style/text/AppearanceTextDialogAuthorDouble.kt
old mode 100644
new mode 100755
diff --git a/app/src/test/java/com/github/jameshnsears/quoteunquote/configure/fragment/appearance/tabs/style/text/AppearanceTextDialogPositionDouble.kt b/app/src/test/java/com/github/jameshnsears/quoteunquote/configure/fragment/appearance/tabs/style/text/AppearanceTextDialogPositionDouble.kt
old mode 100644
new mode 100755
diff --git a/app/src/test/java/com/github/jameshnsears/quoteunquote/configure/fragment/appearance/tabs/style/text/AppearanceTextDialogQuotationDouble.kt b/app/src/test/java/com/github/jameshnsears/quoteunquote/configure/fragment/appearance/tabs/style/text/AppearanceTextDialogQuotationDouble.kt
old mode 100644
new mode 100755
diff --git a/app/src/test/java/com/github/jameshnsears/quoteunquote/configure/fragment/appearance/tabs/toolbar/AppearanceToolbarFragmentDouble.kt b/app/src/test/java/com/github/jameshnsears/quoteunquote/configure/fragment/appearance/tabs/toolbar/AppearanceToolbarFragmentDouble.kt
old mode 100644
new mode 100755
diff --git a/app/src/test/java/com/github/jameshnsears/quoteunquote/configure/fragment/notifications/NotificationsFragmentDouble.kt b/app/src/test/java/com/github/jameshnsears/quoteunquote/configure/fragment/notifications/NotificationsFragmentDouble.kt
old mode 100644
new mode 100755
diff --git a/app/src/test/java/com/github/jameshnsears/quoteunquote/configure/fragment/notifications/NotificationsFragmentPreferencesTest.kt b/app/src/test/java/com/github/jameshnsears/quoteunquote/configure/fragment/notifications/NotificationsFragmentPreferencesTest.kt
old mode 100644
new mode 100755
diff --git a/app/src/test/java/com/github/jameshnsears/quoteunquote/configure/fragment/notifications/NotificationsFragmentTest.kt b/app/src/test/java/com/github/jameshnsears/quoteunquote/configure/fragment/notifications/NotificationsFragmentTest.kt
old mode 100644
new mode 100755
diff --git a/app/src/test/java/com/github/jameshnsears/quoteunquote/configure/fragment/quotations/QuotationsFragmentAuthorTest.kt b/app/src/test/java/com/github/jameshnsears/quoteunquote/configure/fragment/quotations/tabs/selection/QuotationsFragmentAuthorTest.kt
old mode 100644
new mode 100755
similarity index 79%
rename from app/src/test/java/com/github/jameshnsears/quoteunquote/configure/fragment/quotations/QuotationsFragmentAuthorTest.kt
rename to app/src/test/java/com/github/jameshnsears/quoteunquote/configure/fragment/quotations/tabs/selection/QuotationsFragmentAuthorTest.kt
index 1cfffec..31b6fcf
--- a/app/src/test/java/com/github/jameshnsears/quoteunquote/configure/fragment/quotations/QuotationsFragmentAuthorTest.kt
+++ b/app/src/test/java/com/github/jameshnsears/quoteunquote/configure/fragment/quotations/tabs/selection/QuotationsFragmentAuthorTest.kt
@@ -1,4 +1,4 @@
-package com.github.jameshnsears.quoteunquote.configure.fragment.quotations
+package com.github.jameshnsears.quoteunquote.configure.fragment.quotations.tabs.selection
 
 import android.os.Build
 import android.os.Bundle
@@ -18,7 +18,7 @@ import org.robolectric.annotation.Config
 @RunWith(AndroidJUnit4::class)
 @Config(sdk = [Build.VERSION_CODES.P])
 class QuotationsFragmentAuthorTest {
-    private lateinit var scenario: FragmentScenario<QuotationsFragment>
+    private lateinit var scenario: FragmentScenario<QuotationsSelectionFragment>
 
     @Before
     fun before() {
@@ -32,7 +32,7 @@ class QuotationsFragmentAuthorTest {
                     classLoader: ClassLoader,
                     className: String
                 ): Fragment {
-                    return QuotationsFragmentTest.QuotationsFragmentDouble()
+                    return QuotationsSelectionFragmentTest.QuotationsSelectionFragmentDouble()
                 }
             }
         )
@@ -42,14 +42,14 @@ class QuotationsFragmentAuthorTest {
     fun setAuthor() {
         scenario.onFragment { fragment ->
             assertEquals("x", fragment.quotationsPreferences?.contentSelectionAuthor)
-            fragment.fragmentQuotationsBinding?.spinnerAuthors?.setSelection(1)
+            fragment.fragmentQuotationsTabSelectionBinding?.spinnerAuthors?.setSelection(1)
             assertEquals("a", fragment.quotationsPreferences?.contentSelectionAuthor)
             fragment.shutdown()
         }
 
         // visit settings page again
         scenario.onFragment { fragment ->
-            assertEquals("a", fragment.fragmentQuotationsBinding?.spinnerAuthors?.selectedItem)
+            assertEquals("a", fragment.fragmentQuotationsTabSelectionBinding?.spinnerAuthors?.selectedItem)
             fragment.shutdown()
         }
     }
diff --git a/app/src/test/java/com/github/jameshnsears/quoteunquote/configure/fragment/quotations/QuotationsFragmentTest.kt b/app/src/test/java/com/github/jameshnsears/quoteunquote/configure/fragment/quotations/tabs/selection/QuotationsSelectionFragmentTest.kt
old mode 100644
new mode 100755
similarity index 86%
rename from app/src/test/java/com/github/jameshnsears/quoteunquote/configure/fragment/quotations/QuotationsFragmentTest.kt
rename to app/src/test/java/com/github/jameshnsears/quoteunquote/configure/fragment/quotations/tabs/selection/QuotationsSelectionFragmentTest.kt
index d7f680d..9ac7384
--- a/app/src/test/java/com/github/jameshnsears/quoteunquote/configure/fragment/quotations/QuotationsFragmentTest.kt
+++ b/app/src/test/java/com/github/jameshnsears/quoteunquote/configure/fragment/quotations/tabs/selection/QuotationsSelectionFragmentTest.kt
@@ -1,4 +1,4 @@
-package com.github.jameshnsears.quoteunquote.configure.fragment.quotations
+package com.github.jameshnsears.quoteunquote.configure.fragment.quotations.tabs.selection
 
 import android.os.Build
 import android.os.Bundle
@@ -28,13 +28,14 @@ import org.robolectric.annotation.Config
 
 @RunWith(AndroidJUnit4::class)
 @Config(sdk = [Build.VERSION_CODES.P])
-class QuotationsFragmentTest : ShadowLoggingHelper() {
-    class QuotationsFragmentDouble : QuotationsFragment(WidgetIdHelper.WIDGET_ID_01) {
+class QuotationsSelectionFragmentTest : ShadowLoggingHelper() {
+    class QuotationsSelectionFragmentDouble : QuotationsSelectionFragment(WidgetIdHelper.WIDGET_ID_01) {
         override fun onCreate(savedInstanceState: Bundle?) {
             super.onCreate(savedInstanceState)
 
             val quoteUnquoteModel = mockk<QuoteUnquoteModel>()
             every { quoteUnquoteModel.countAll() } returns Single.just(7)
+            every { quoteUnquoteModel.countFavouritesWithoutRx() } returns 1
 
             val authors = listOf(AuthorPOJO("a1"))
             every { quoteUnquoteModel.authors() } returns Single.just(authors)
@@ -48,7 +49,7 @@ class QuotationsFragmentTest : ShadowLoggingHelper() {
         }
     }
 
-    private lateinit var scenario: FragmentScenario<QuotationsFragment>
+    private lateinit var scenario: FragmentScenario<QuotationsSelectionFragment>
 
     @Before
     fun before() {
@@ -62,7 +63,7 @@ class QuotationsFragmentTest : ShadowLoggingHelper() {
                     classLoader: ClassLoader,
                     className: String
                 ): Fragment {
-                    return QuotationsFragmentDouble()
+                    return QuotationsSelectionFragmentDouble()
                 }
             }
         )
@@ -79,21 +80,21 @@ class QuotationsFragmentTest : ShadowLoggingHelper() {
             if (BuildConfig.DEBUG) {
                 assertEquals(
                     "All: 7",
-                    fragment.fragmentQuotationsBinding?.radioButtonAll?.text.toString()
+                    fragment.fragmentQuotationsTabSelectionBinding?.radioButtonAll?.text.toString()
                 )
                 assertEquals(
-                    "Author: 1",
-                    fragment.fragmentQuotationsBinding?.radioButtonAuthor?.text.toString()
+                    "Source: 1",
+                    fragment.fragmentQuotationsTabSelectionBinding?.radioButtonAuthor?.text.toString()
                 )
                 assertEquals(
                     "Favourites: 0",
-                    fragment.fragmentQuotationsBinding?.radioButtonFavourites?.text.toString()
+                    fragment.fragmentQuotationsTabSelectionBinding?.radioButtonFavourites?.text.toString()
                 )
             }
 
             assertEquals(
                 "",
-                fragment.fragmentQuotationsBinding?.editTextSearchText?.text.toString()
+                fragment.fragmentQuotationsTabSelectionBinding?.editTextSearchText?.text.toString()
             )
 
             fragment.shutdown()
diff --git a/app/src/test/java/com/github/jameshnsears/quoteunquote/database/DatabaseNextQuotationPerformanceTest.java b/app/src/test/java/com/github/jameshnsears/quoteunquote/database/DatabaseNextQuotationPerformanceTest.java
old mode 100644
new mode 100755
diff --git a/app/src/test/java/com/github/jameshnsears/quoteunquote/database/DatabaseQuotationEntityTest.kt b/app/src/test/java/com/github/jameshnsears/quoteunquote/database/DatabaseQuotationEntityTest.kt
old mode 100644
new mode 100755
index 0260388..9ebf1fa
--- a/app/src/test/java/com/github/jameshnsears/quoteunquote/database/DatabaseQuotationEntityTest.kt
+++ b/app/src/test/java/com/github/jameshnsears/quoteunquote/database/DatabaseQuotationEntityTest.kt
@@ -21,6 +21,6 @@ class DatabaseQuotationEntityTest : ShadowLoggingHelper() {
             "quotation"
         )
 
-        assertEquals("quotation\n\nauthor\n", quotationEntity.theShareContent())
+        assertEquals("quotation\n\nauthor", quotationEntity.theShareContent())
     }
 }
diff --git a/app/src/test/java/com/github/jameshnsears/quoteunquote/database/DatabaseQuotationsRandomTest.kt b/app/src/test/java/com/github/jameshnsears/quoteunquote/database/DatabaseQuotationsRandomTest.kt
old mode 100644
new mode 100755
diff --git a/app/src/test/java/com/github/jameshnsears/quoteunquote/utils/IntentFactoryHelperTest.kt b/app/src/test/java/com/github/jameshnsears/quoteunquote/utils/IntentFactoryHelperTest.kt
old mode 100644
new mode 100755
diff --git a/app/src/test/java/com/github/jameshnsears/quoteunquote/utils/logging/ShadowLoggingHelper.kt b/app/src/test/java/com/github/jameshnsears/quoteunquote/utils/logging/ShadowLoggingHelper.kt
old mode 100644
new mode 100755
