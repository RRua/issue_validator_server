package com.DartChecker;

import android.annotation.SuppressLint;
import android.annotation.TargetApi;
import android.app.AlertDialog;
import android.content.Context;
import android.content.DialogInterface;
import android.content.Intent;
import android.content.SharedPreferences;
import android.content.res.Configuration;
import android.content.res.Resources;
import android.os.Build;
import android.os.Handler;

import androidx.constraintlayout.widget.ConstraintLayout;
import androidx.constraintlayout.widget.Guideline;
import androidx.appcompat.app.AppCompatActivity;
import android.os.Bundle;
import android.util.TypedValue;
import android.view.View;
import android.widget.AdapterView;
import android.widget.ArrayAdapter;
import android.widget.Button;
import android.widget.Spinner;
import android.widget.TextView;
import android.widget.Toast;

import java.text.DecimalFormat;
import java.text.DecimalFormatSymbols;
import java.util.ArrayList;
import java.util.Locale;
import java.util.Random;

public class matchcalc extends AppCompatActivity {

    @Override
    protected void attachBaseContext(Context base) {
        super.attachBaseContext(updateBaseContextLocale(base));
    }

    private Context updateBaseContextLocale(Context context) {
        final SharedPreferences settings = context.getSharedPreferences("Einstellungen", 0);
        String language = Locale.getDefault().getLanguage();
        if (settings.contains("Sprache")) {
            language = settings.getString("Sprache", "en");
        }
        Locale locale = new Locale(language);
        Locale.setDefault(locale);
        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN_MR1) {
            return updateResourcesLocale(context, locale);
        }

        return updateResourcesLocaleLegacy(context, locale);
    }

    @TargetApi(Build.VERSION_CODES.N_MR1)
    private Context updateResourcesLocale(Context context, Locale locale) {
        Configuration configuration = new Configuration(context.getResources().getConfiguration());
        configuration.setLocale(locale);
        return context.createConfigurationContext(configuration);
    }

    private Context updateResourcesLocaleLegacy(Context context, Locale locale) {
        Resources resources = context.getResources();
        Configuration configuration = resources.getConfiguration();
        configuration.locale = locale;
        resources.updateConfiguration(configuration, resources.getDisplayMetrics());
        return context;
    }

    private static class aufnahme {
        int geworfenePunkte;
        Boolean busted;
    }

    private final ArrayList<aufnahme> wuerfe = new ArrayList<>();
    private aufnahme aktuellerwurf;
    private final MainActivity.spieler spieler1 = new MainActivity.spieler();
    private final MainActivity.spieler spieler2 = new MainActivity.spieler();
    private final MainActivity.spieler spieler3 = new MainActivity.spieler();
    private final MainActivity.spieler spieler4 = new MainActivity.spieler();
    private final MainActivity.spieler spieler5 = new MainActivity.spieler();
    private final MainActivity.spieler spieler6 = new MainActivity.spieler();
    private final MainActivity.spieler spieler7 = new MainActivity.spieler();
    private final MainActivity.spieler spieler8 = new MainActivity.spieler();
    private final DecimalFormatSymbols symbols = new DecimalFormatSymbols(Locale.US);
    private final DecimalFormat formater = new DecimalFormat("###.##", symbols);
    private Integer spieleranzahl;
    private boolean doubleout,
                    masterout,
                    suddendeath;
    private int maxPunkte,
            suddendeathdarts,
            checkoutzahl;
    private TextView score;
    private TextView v1;
    private TextView v2;
    private TextView v3;
    private TextView name;
    private TextView durchschnitt;
    private TextView pfeile;
    private TextView listenName1;
    private TextView listenName2;
    private TextView listenName3;
    private TextView listenName4;
    private TextView listenName5;
    private TextView listenName6;
    private TextView listenName7;
    private TextView listenPunkte1;
    private TextView listenPunkte2;
    private TextView listenPunkte3;
    private TextView listenPunkte4;
    private TextView listenPunkte5;
    private TextView listenPunkte6;
    private TextView listenPunkte7;
    private TextView listenvorschlag1;
    private TextView listenvorschlag2;
    private TextView listenvorschlag3;
    private TextView listenvorschlag4;
    private TextView listenvorschlag5;
    private TextView listenvorschlag6;
    private TextView listenvorschlag7;
    private TextView setanzeige;
    private TextView leganzeige;
    private TextView scoreeingabe;

    private int faktor;
    private int changetime = 1500;
    private float fdummy;
    private int dummy;
    private int dummy2 = 0;
    private long startTime = 0;
    private long spielzeit = 0;
    private String rundenname;
    private int dummy3 = 0;
    private int legs;
    private int sets;
    private boolean matchgame = false;
    private boolean letzterwurf = false;

        private final View.OnClickListener undoclick = new View.OnClickListener() {
        @Override
        public void onClick(View v) {
            if ( (wuerfe.isEmpty())) {
                Toast.makeText(getApplicationContext(), getResources().getString(R.string.keinundo), Toast.LENGTH_SHORT).show();
                return;
            }
            // sicherheitsabfrage
            AlertDialog alertDialog = new AlertDialog.Builder(matchcalc.this).create();
            alertDialog.setTitle(getResources().getString(R.string.achtung));
            alertDialog.setMessage(getResources().getString(R.string.willstduUndo));
            alertDialog.setButton(AlertDialog.BUTTON_POSITIVE, getResources().getString(R.string.jaichw),
                    new DialogInterface.OnClickListener() {
                        public void onClick(DialogInterface dialog, int which) {
                            dialog.dismiss();
                            // zur sicherheit, falls zuvor ein undo stattfand ohne darauf folgende punkteingabe (also undo auf undo)
                            rundenname = name.getText().toString();
                            if (rundenname.equals(spieler1.spielerName)) {
                                spieler1.score = Integer.parseInt(score.getText().toString());
                                spieler1.geworfenePfeile = Integer.parseInt(pfeile.getText().toString());
                                spieler1.durchschnitt = Float.valueOf(durchschnitt.getText().toString());
                            } else
                            if (rundenname.equals(spieler2.spielerName)) {
                                spieler2.score = Integer.parseInt(score.getText().toString());
                                spieler2.geworfenePfeile = Integer.parseInt(pfeile.getText().toString());
                                spieler2.durchschnitt = Float.valueOf(durchschnitt.getText().toString());
                            } else
                            if (rundenname.equals(spieler3.spielerName)) {
                                spieler3.score = Integer.parseInt(score.getText().toString());
                                spieler3.geworfenePfeile = Integer.parseInt(pfeile.getText().toString());
                                spieler3.durchschnitt = Float.valueOf(durchschnitt.getText().toString());
                            } else
                            if (rundenname.equals(spieler4.spielerName)) {
                                spieler4.score = Integer.parseInt(score.getText().toString());
                                spieler4.geworfenePfeile = Integer.parseInt(pfeile.getText().toString());
                                spieler4.durchschnitt = Float.valueOf(durchschnitt.getText().toString());
                            } else
                            if (rundenname.equals(spieler5.spielerName)) {
                                spieler5.score = Integer.parseInt(score.getText().toString());
                                spieler5.geworfenePfeile = Integer.parseInt(pfeile.getText().toString());
                                spieler5.durchschnitt = Float.valueOf(durchschnitt.getText().toString());
                            } else
                            if (rundenname.equals(spieler6.spielerName)) {
                                spieler6.score = Integer.parseInt(score.getText().toString());
                                spieler6.geworfenePfeile = Integer.parseInt(pfeile.getText().toString());
                                spieler6.durchschnitt = Float.valueOf(durchschnitt.getText().toString());
                            } else
                            if (rundenname.equals(spieler7.spielerName)) {
                                spieler7.score = Integer.parseInt(score.getText().toString());
                                spieler7.geworfenePfeile = Integer.parseInt(pfeile.getText().toString());
                                spieler7.durchschnitt = Float.valueOf(durchschnitt.getText().toString());
                            } else
                            if (rundenname.equals(spieler8.spielerName)) {
                                spieler8.score = Integer.parseInt(score.getText().toString());
                                spieler8.geworfenePfeile = Integer.parseInt(pfeile.getText().toString());
                                spieler8.durchschnitt = Float.valueOf(durchschnitt.getText().toString());
                            }

                            lastplayer();  //stellt anzeige her und bereinigt bei bedarf die statistik
                            dummy = Integer.parseInt(score.getText().toString());
                            rundenname = name.getText().toString();

                            if (!wuerfe.get(wuerfe.size()-1).busted) {
                                dummy += wuerfe.get(wuerfe.size()-1).geworfenePunkte;
                            }
                            score.setText(String.valueOf(dummy));
                            pfeile.setText(Integer.toString(Integer.parseInt(pfeile.getText().toString()) - 3));
                            fdummy = (maxPunkte - dummy);
                            if ((fdummy > 0) && (Integer.parseInt(pfeile.getText().toString()) >= 3))
                                durchschnitt.setText(formater.format((fdummy / Integer.parseInt(pfeile.getText().toString()) * 3)));
                            else
                                durchschnitt.setText("0");
                            vorschlagsetzen(dummy);

                            scoreeingabe.setText(String.valueOf(wuerfe.get(wuerfe.size()-1).geworfenePunkte));

                            Toast.makeText(getApplicationContext(),"undo: "+wuerfe.get(wuerfe.size()-1).geworfenePunkte+" "+getResources().getString(R.string.von_spieler)+" "+rundenname,Toast.LENGTH_SHORT).show();
                            wuerfe.remove(wuerfe.size()-1);
                        }
                    });
            alertDialog.setButton(AlertDialog.BUTTON_NEGATIVE, getResources().getString(R.string.nein), new DialogInterface.OnClickListener() {
                @Override
                public void onClick(DialogInterface dialog, int which) {
                    dialog.dismiss();
                }
            });
            alertDialog.show();
            final SharedPreferences settings = getApplicationContext().getSharedPreferences("Einstellungen", 0);
            if (settings.contains("Undosicherheitsabfrage")) {
                if (!settings.getBoolean("Undosicherheitsabfrage",false)) {
                    alertDialog.hide();
                    alertDialog.getButton(AlertDialog.BUTTON_POSITIVE).performClick();
                }
            }
        }
    };

    private final View.OnClickListener setleganzeigeclick = new View.OnClickListener() {
        @Override
        public void onClick(View v) {
            TextView aufnahmetv = findViewById(R.id.aufnahmetv);
            aufnahmetv.setVisibility(View.INVISIBLE);
            if (aufnahmetv.getText().length() <= 3) nextplayer();
            buttonfreeze(false);
        }
    };



    private final View.OnClickListener buttonclick = new View.OnClickListener() {
        @SuppressLint("NonConstantResourceId")
        @Override
        public void onClick(View v) {

            int sender = v.getId();
            Button eingabe = findViewById(sender);
            rundenname = name.getText().toString();  // aktueller spieler
            int ergebnis;
            ergebnis = Integer.parseInt(score.getText().toString());

            // welche taste wurde gedrückt?
            int dart;
            switch (sender) {
                case R.id.delete:
                    dart = 0;
                    scoreeingabe.setText("0");
                    return;

                case R.id.daneben:
                    dart = -1;
                    break;

                default:
                    try {
                        dart = Integer.parseInt(eingabe.getText().toString());
                    } catch (Exception e) {
                        dart = 255;         //fehlerausgabe - sollte niemals eintreten
                    }

                    if (scoreeingabe.getText().toString().equals("0")) scoreeingabe.setText(eingabe.getText());
                    else scoreeingabe.setText(scoreeingabe.getText().toString().concat(eingabe.getText().toString()));
                    return;
            }



            if (dart == -1) {
                int punkteeingabe = Integer.parseInt(scoreeingabe.getText().toString());
                if (punkteeingabe > 180) {
                    Toast.makeText(getApplicationContext(),getResources().getString(R.string.mehrals180),Toast.LENGTH_SHORT).show();
                    return;
                } else if (punkteeingabe == 179 || punkteeingabe == 178 || punkteeingabe == 176 || punkteeingabe == 175
                         || punkteeingabe == 173 || punkteeingabe == 172 || punkteeingabe == 169 || punkteeingabe == 166 || punkteeingabe == 163) {
                    Toast.makeText(getApplicationContext(), getResources().getString(R.string.unmoeglich),Toast.LENGTH_SHORT).show();
                    return;
                }

                dummy = ergebnis - Integer.parseInt(scoreeingabe.getText().toString());

                // Abfrage: Doppel oder Trippelfeld getroffen?
                DialogInterface.OnClickListener dialogClickListener = new DialogInterface.OnClickListener() {
                    @Override
                    public void onClick(DialogInterface dialog, int which) {
                        switch (which) {
                            case DialogInterface.BUTTON_POSITIVE:
                                if (doubleout) faktor = 2;
                                if (masterout) faktor = 3;
                                rest_buttonclick();
                                break;

                            case DialogInterface.BUTTON_NEGATIVE:
                                // falls masterout nicht getroffen, frag, ob wenigstens doppelfeld getroffen
                                if (masterout) {
                                    DialogInterface.OnClickListener dialogClickListener2 = new DialogInterface.OnClickListener() {
                                        @Override
                                        public void onClick(DialogInterface dialog, int which) {
                                            switch (which) {
                                                case DialogInterface.BUTTON_POSITIVE:
                                                    if (doubleout) faktor = 2;
                                                    break;

                                                case DialogInterface.BUTTON_NEGATIVE:
                                                    faktor = 1;
                                                    break;
                                            }
                                            rest_buttonclick();
                                        }
                                    };
                                    AlertDialog.Builder letzterdart2 = new AlertDialog.Builder(matchcalc.this);
                                    letzterdart2.setMessage(getResources().getString(R.string.lastDouble)).setPositiveButton(getResources().getString(R.string.ja), dialogClickListener2)
                                            .setNegativeButton(getResources().getString(R.string.nein), dialogClickListener2).show();
                                } else faktor = 1;
                                break;
                        }


                    }
                };

                AlertDialog.Builder letzterdart = new AlertDialog.Builder(matchcalc.this);
                faktor = 1;
                if (masterout && dummy == 0)
                    letzterdart.setMessage(getResources().getString(R.string.lastTriple)).setPositiveButton(getResources().getString(R.string.ja), dialogClickListener)
                            .setNegativeButton(getResources().getString(R.string.nein), dialogClickListener).show();
                 else if (doubleout && dummy == 0)
                    letzterdart.setMessage(getResources().getString(R.string.lastDouble)).setPositiveButton(getResources().getString(R.string.ja), dialogClickListener)
                            .setNegativeButton(getResources().getString(R.string.nein), dialogClickListener).show();
                else rest_buttonclick();
             }
        }
    };


    private void rest_buttonclick() {
        rundenname = name.getText().toString();  // aktueller spieler
        int ergebnis;
        ergebnis = Integer.parseInt(score.getText().toString());
        dummy = ergebnis - Integer.parseInt(scoreeingabe.getText().toString());
        aktuellerwurf = new aufnahme();
        // die Möglichkeiten des Überwerfens
        if ( (dummy < 0) || ((doubleout || masterout) && dummy == 1) || ( (dummy == 0 && ( (doubleout && !(faktor == 2)) || (masterout && !(faktor == 3)) )) )) {

            if (doubleout && dummy == 1)
                Toast.makeText(getApplicationContext(), getResources().getString(R.string.keindoubleo), Toast.LENGTH_SHORT).show();
            else
                Toast.makeText(getApplicationContext(), getResources().getString(R.string.uberworfen), Toast.LENGTH_SHORT).show();

            //wurf speichern für undo
           aktuellerwurf.geworfenePunkte=0;
           aktuellerwurf.busted=true;
           wuerfe.add(aktuellerwurf);
           scoreeingabe.setText("0");

            pfeile.setText(Integer.toString(Integer.parseInt(pfeile.getText().toString()) + 3));
            fdummy = maxPunkte - Integer.parseInt(score.getText().toString());
            durchschnitt.setText(formater.format((fdummy / Integer.parseInt(pfeile.getText().toString()) * 3)));
            nextplayer_with_freeze();
        }
        //spieler gewinnt!
        else if ((dummy == 0 && !doubleout) || (dummy == 0 && doubleout && faktor == 2) || (dummy == 0 && masterout && faktor == 3) ) {
            DialogInterface.OnClickListener dialogClickListener = new DialogInterface.OnClickListener() {
                @Override
                public void onClick(DialogInterface dialog, int which) {
                    int anzahlpfeile=0;
                    switch (which) {
                        case DialogInterface.BUTTON_POSITIVE:
                            if (Integer.parseInt(scoreeingabe.getText().toString())>60) {
                                Toast.makeText(getApplicationContext(), getResources().getString(R.string.unmoeglich), Toast.LENGTH_LONG).show();
                                return;
                            }
                            anzahlpfeile=1;
                            break;
                        case DialogInterface.BUTTON_NEGATIVE:
                            if (Integer.parseInt(scoreeingabe.getText().toString())>120) {
                                Toast.makeText(getApplicationContext(), getResources().getString(R.string.unmoeglich), Toast.LENGTH_LONG).show();
                                return;
                            }
                            anzahlpfeile = 2;
                            break;
                        case DialogInterface.BUTTON_NEUTRAL:
                            if (Integer.parseInt(scoreeingabe.getText().toString())>180) {
                                Toast.makeText(getApplicationContext(), getResources().getString(R.string.unmoeglich), Toast.LENGTH_LONG).show();
                                return;
                            }
                            anzahlpfeile=3;
                            break;
                    }
                    letzterwurf = true;
                    Toast.makeText(getApplicationContext(), String.format(getResources().getString(R.string.gewinnt), rundenname), Toast.LENGTH_SHORT).show();
                    pfeile.setText(Integer.toString(Integer.parseInt(pfeile.getText().toString()) + anzahlpfeile));
                    score.setText(String.valueOf(dummy));
                    fdummy = maxPunkte - Integer.parseInt(score.getText().toString());
                    if (Integer.parseInt(pfeile.getText().toString()) < 3)
                        durchschnitt.setText(String.valueOf(maxPunkte));
                    else
                        durchschnitt.setText(formater.format((fdummy / Integer.parseInt(pfeile.getText().toString()) * 3)));
                    // ergebnisübersicht aufrufen - gewinnerreihenfolge bestimmen

                    aktuellerwurf.busted=false;
                    aktuellerwurf.geworfenePunkte=Integer.parseInt(scoreeingabe.getText().toString());
                    scoreeingabe.setText("0");
                    wuerfe.add(aktuellerwurf);
                    if (matchgame) {
                        legfinished();
                    } else {
                        spielzeit= (System.currentTimeMillis()-startTime)/1000;
                        Intent intent = new Intent(matchcalc.this, spielende.class);
                        intent.putExtra("anzahl", spieleranzahl);
                        intent.putExtra("erster", rundenname);
                        intent.putExtra("ersterschnitt", Float.valueOf(durchschnitt.getText().toString()));
                        intent.putExtra("ersterpfeile", Integer.parseInt(pfeile.getText().toString()));
                        intent.putExtra("spielzeit",spielzeit);
                        MainActivity.spieler saf, s2, s3, s4, s5, s6, s7, s8;
                        switch (spieleranzahl) {
                            case 1:
                                break;
                            case 2:
                                if (rundenname.equals(spieler1.spielerName))
                                    s2 = spieler2;
                                else
                                    s2 = spieler1;
                                intent.putExtra("zweiter", s2.spielerName);
                                intent.putExtra("zweiterschnitt", s2.durchschnitt);
                                intent.putExtra("zweiterpfeile", s2.geworfenePfeile);
                                intent.putExtra("zweiterrest", s2.score);
                                break;
                            case 3:
                                if (rundenname.equals(spieler1.spielerName) && spieler2.score <= spieler3.score) {
                                    s2 = spieler2;
                                    s3 = spieler3;
                                } else if (rundenname.equals(spieler1.spielerName) && spieler2.score > spieler3.score) {
                                    s2 = spieler3;
                                    s3 = spieler2;
                                } else if (rundenname.equals(spieler2.spielerName) && spieler1.score <= spieler3.score) {
                                    s2 = spieler1;
                                    s3 = spieler3;
                                } else if (rundenname.equals(spieler2.spielerName) && spieler1.score > spieler3.score) {
                                    s2 = spieler3;
                                    s3 = spieler1;
                                } else if (rundenname.equals(spieler3.spielerName) && spieler1.score <= spieler2.score) {
                                    s2 = spieler1;
                                    s3 = spieler2;
                                } else // if (rundenname.equals(spieler3.spielerName) && spieler1.score > spieler2.score)
                                {
                                    s2 = spieler2;
                                    s3 = spieler1;
                                }
                                intent.putExtra("zweiter", s2.spielerName);
                                intent.putExtra("zweiterschnitt", s2.durchschnitt);
                                intent.putExtra("zweiterpfeile", s2.geworfenePfeile);
                                intent.putExtra("zweiterrest", s2.score);
                                intent.putExtra("dritter", s3.spielerName);
                                intent.putExtra("dritterschnitt", s3.durchschnitt);
                                intent.putExtra("dritterpfeile", s3.geworfenePfeile);
                                intent.putExtra("dritterrest", s3.score);
                                break;

                            case 4:
                                if (rundenname.equals(spieler1.spielerName)) {
                                    s2 = spieler2;
                                    s3 = spieler3;
                                    s4 = spieler4;
                                } else if (rundenname.equals(spieler2.spielerName)) {
                                    s2 = spieler1;
                                    s3 = spieler3;
                                    s4 = spieler4;
                                } else if (rundenname.equals(spieler3.spielerName)) {
                                    s2 = spieler1;
                                    s3 = spieler2;
                                    s4 = spieler4;
                                } else {
                                    s2 = spieler1;
                                    s3 = spieler2;
                                    s4 = spieler3;
                                }

                                boolean changed = true;
                                while (changed)             //kleines bubblesort für die spielerreihenfolge nach punkten
                                {
                                    changed = false;
                                    if (s2.score > s3.score) {
                                        saf = s2;
                                        s2 = s3;
                                        s3 = saf;
                                        changed = true;
                                    }
                                    if (s3.score > s4.score) {
                                        saf = s3;
                                        s3 = s4;
                                        s4 = saf;
                                        changed = true;
                                    }
                                }

                                intent.putExtra("zweiter", s2.spielerName);
                                intent.putExtra("zweiterschnitt", s2.durchschnitt);
                                intent.putExtra("zweiterpfeile", s2.geworfenePfeile);
                                intent.putExtra("zweiterrest", s2.score);
                                intent.putExtra("dritter", s3.spielerName);
                                intent.putExtra("dritterschnitt", s3.durchschnitt);
                                intent.putExtra("dritterpfeile", s3.geworfenePfeile);
                                intent.putExtra("dritterrest", s3.score);
                                intent.putExtra("vierter", s4.spielerName);
                                intent.putExtra("vierterschnitt", s4.durchschnitt);
                                intent.putExtra("vierterpfeile", s4.geworfenePfeile);
                                intent.putExtra("vierterrest", s4.score);
                                break;
                            case 5:
                                if (rundenname.equals(spieler2.spielerName)) s2=spieler1;  else s2=spieler2;
                                if (rundenname.equals(spieler3.spielerName)) s3=spieler1;  else s3=spieler3;
                                if (rundenname.equals(spieler4.spielerName)) s4=spieler1;  else s4=spieler4;
                                if (rundenname.equals(spieler5.spielerName)) s5=spieler1;  else s5=spieler5;
                                changed = true;
                                while (changed)             //kleines bubblesort für die spielerreihenfolge nach punkten
                                {
                                    changed = false;
                                    if (s2.score > s3.score) {
                                        saf = s2;
                                        s2 = s3;
                                        s3 = saf;
                                        changed = true;
                                    }
                                    if (s3.score > s4.score) {
                                        saf = s3;
                                        s3 = s4;
                                        s4 = saf;
                                        changed = true;
                                    }
                                    if (s4.score > s5.score) {
                                        saf = s4;
                                        s4 = s5;
                                        s5 = saf;
                                        changed = true;
                                    }
                                }
                                intent.putExtra("zweiter", s2.spielerName);
                                intent.putExtra("zweiterschnitt", s2.durchschnitt);
                                intent.putExtra("zweiterpfeile", s2.geworfenePfeile);
                                intent.putExtra("zweiterrest", s2.score);
                                intent.putExtra("dritter", s3.spielerName);
                                intent.putExtra("dritterschnitt", s3.durchschnitt);
                                intent.putExtra("dritterpfeile", s3.geworfenePfeile);
                                intent.putExtra("dritterrest", s3.score);
                                intent.putExtra("vierter", s4.spielerName);
                                intent.putExtra("vierterschnitt", s4.durchschnitt);
                                intent.putExtra("vierterpfeile", s4.geworfenePfeile);
                                intent.putExtra("vierterrest", s4.score);
                                intent.putExtra("zweiter", s2.spielerName);
                                intent.putExtra("zweiterschnitt", s2.durchschnitt);
                                intent.putExtra("zweiterpfeile", s2.geworfenePfeile);
                                intent.putExtra("zweiterrest", s2.score);
                                intent.putExtra("dritter", s3.spielerName);
                                intent.putExtra("dritterschnitt", s3.durchschnitt);
                                intent.putExtra("dritterpfeile", s3.geworfenePfeile);
                                intent.putExtra("dritterrest", s3.score);
                                intent.putExtra("vierter", s4.spielerName);
                                intent.putExtra("vierterschnitt", s4.durchschnitt);
                                intent.putExtra("vierterpfeile", s4.geworfenePfeile);
                                intent.putExtra("vierterrest", s4.score);
                                intent.putExtra("fuenfter", s5.spielerName);
                                intent.putExtra("fuenfterschnitt", s5.durchschnitt);
                                intent.putExtra("fuenfterpfeile", s5.geworfenePfeile);
                                intent.putExtra("fuenfterrest", s5.score);
                                break;
                            case  6:
                                if (rundenname.equals(spieler2.spielerName)) s2=spieler1;  else s2=spieler2;
                                if (rundenname.equals(spieler3.spielerName)) s3=spieler1;  else s3=spieler3;
                                if (rundenname.equals(spieler4.spielerName)) s4=spieler1;  else s4=spieler4;
                                if (rundenname.equals(spieler5.spielerName)) s5=spieler1;  else s5=spieler5;
                                if (rundenname.equals(spieler6.spielerName)) s6=spieler1;  else s6=spieler6;

                                changed = true;
                                while (changed)             //kleines bubblesort für die spielerreihenfolge nach punkten
                                {
                                    changed = false;
                                    if (s2.score > s3.score) {
                                        saf = s2;
                                        s2 = s3;
                                        s3 = saf;
                                        changed = true;
                                    }
                                    if (s3.score > s4.score) {
                                        saf = s3;
                                        s3 = s4;
                                        s4 = saf;
                                        changed = true;
                                    }
                                    if (s4.score > s5.score) {
                                        saf = s4;
                                        s4 = s5;
                                        s5 = saf;
                                        changed = true;
                                    }
                                    if (s5.score > s6.score) {
                                        saf = s5;
                                        s5 = s6;
                                        s6 = saf;
                                        changed = true;
                                    }
                                }
                                intent.putExtra("zweiter", s2.spielerName);
                                intent.putExtra("zweiterschnitt", s2.durchschnitt);
                                intent.putExtra("zweiterpfeile", s2.geworfenePfeile);
                                intent.putExtra("zweiterrest", s2.score);
                                intent.putExtra("dritter", s3.spielerName);
                                intent.putExtra("dritterschnitt", s3.durchschnitt);
                                intent.putExtra("dritterpfeile", s3.geworfenePfeile);
                                intent.putExtra("dritterrest", s3.score);
                                intent.putExtra("vierter", s4.spielerName);
                                intent.putExtra("vierterschnitt", s4.durchschnitt);
                                intent.putExtra("vierterpfeile", s4.geworfenePfeile);
                                intent.putExtra("vierterrest", s4.score);
                                intent.putExtra("fuenfter", s5.spielerName);
                                intent.putExtra("fuenfterschnitt", s5.durchschnitt);
                                intent.putExtra("fuenfterpfeile", s5.geworfenePfeile);
                                intent.putExtra("fuenfterrest", s5.score);
                                intent.putExtra("sechster", s6.spielerName);
                                intent.putExtra("sechsterschnitt", s6.durchschnitt);
                                intent.putExtra("sechsterpfeile", s6.geworfenePfeile);
                                intent.putExtra("sechsterrest", s6.score);
                                break;
                            case 7:
                                if (rundenname.equals(spieler2.spielerName)) s2=spieler1;  else s2=spieler2;
                                if (rundenname.equals(spieler3.spielerName)) s3=spieler1;  else s3=spieler3;
                                if (rundenname.equals(spieler4.spielerName)) s4=spieler1;  else s4=spieler4;
                                if (rundenname.equals(spieler5.spielerName)) s5=spieler1;  else s5=spieler5;
                                if (rundenname.equals(spieler6.spielerName)) s6=spieler1;  else s6=spieler6;
                                if (rundenname.equals(spieler7.spielerName)) s7=spieler1;  else s7=spieler7;

                                changed = true;
                                while (changed)             //kleines bubblesort für die spielerreihenfolge nach punkten
                                {
                                    changed = false;
                                    if (s2.score > s3.score) {
                                        saf = s2;
                                        s2 = s3;
                                        s3 = saf;
                                        changed = true;
                                    }
                                    if (s3.score > s4.score) {
                                        saf = s3;
                                        s3 = s4;
                                        s4 = saf;
                                        changed = true;
                                    }
                                    if (s4.score > s5.score) {
                                        saf = s4;
                                        s4 = s5;
                                        s5 = saf;
                                        changed = true;
                                    }
                                    if (s5.score > s6.score) {
                                        saf = s5;
                                        s5 = s6;
                                        s6 = saf;
                                        changed = true;
                                    }
                                    if (s6.score > s7.score) {
                                        saf = s6;
                                        s6 = s7;
                                        s7 = saf;
                                        changed = true;
                                    }
                                }
                                intent.putExtra("zweiter", s2.spielerName);
                                intent.putExtra("zweiterschnitt", s2.durchschnitt);
                                intent.putExtra("zweiterpfeile", s2.geworfenePfeile);
                                intent.putExtra("zweiterrest", s2.score);
                                intent.putExtra("dritter", s3.spielerName);
                                intent.putExtra("dritterschnitt", s3.durchschnitt);
                                intent.putExtra("dritterpfeile", s3.geworfenePfeile);
                                intent.putExtra("dritterrest", s3.score);
                                intent.putExtra("vierter", s4.spielerName);
                                intent.putExtra("vierterschnitt", s4.durchschnitt);
                                intent.putExtra("vierterpfeile", s4.geworfenePfeile);
                                intent.putExtra("vierterrest", s4.score);
                                intent.putExtra("fuenfter", s5.spielerName);
                                intent.putExtra("fuenfterschnitt", s5.durchschnitt);
                                intent.putExtra("fuenfterpfeile", s5.geworfenePfeile);
                                intent.putExtra("fuenfterrest", s5.score);
                                intent.putExtra("sechster", s6.spielerName);
                                intent.putExtra("sechsterschnitt", s6.durchschnitt);
                                intent.putExtra("sechsterpfeile", s6.geworfenePfeile);
                                intent.putExtra("sechsterrest", s6.score);
                                intent.putExtra("siebenter", s7.spielerName);
                                intent.putExtra("siebenterschnitt", s7.durchschnitt);
                                intent.putExtra("siebenterpfeile", s7.geworfenePfeile);
                                intent.putExtra("siebenterrest", s7.score);
                                break;
                            case 8:
                                if (rundenname.equals(spieler2.spielerName)) s2=spieler1;  else s2=spieler2;
                                if (rundenname.equals(spieler3.spielerName)) s3=spieler1;  else s3=spieler3;
                                if (rundenname.equals(spieler4.spielerName)) s4=spieler1;  else s4=spieler4;
                                if (rundenname.equals(spieler5.spielerName)) s5=spieler1;  else s5=spieler5;
                                if (rundenname.equals(spieler6.spielerName)) s6=spieler1;  else s6=spieler6;
                                if (rundenname.equals(spieler7.spielerName)) s7=spieler1;  else s7=spieler7;
                                if (rundenname.equals(spieler8.spielerName)) s8=spieler1;  else s8=spieler8;

                                changed = true;
                                while (changed)             //kleines bubblesort für die spielerreihenfolge nach punkten
                                {
                                    changed = false;
                                    if (s2.score > s3.score) {
                                        saf = s2;
                                        s2 = s3;
                                        s3 = saf;
                                        changed = true;
                                    }
                                    if (s3.score > s4.score) {
                                        saf = s3;
                                        s3 = s4;
                                        s4 = saf;
                                        changed = true;
                                    }
                                    if (s4.score > s5.score) {
                                        saf = s4;
                                        s4 = s5;
                                        s5 = saf;
                                        changed = true;
                                    }
                                    if (s5.score > s6.score) {
                                        saf = s5;
                                        s5 = s6;
                                        s6 = saf;
                                        changed = true;
                                    }
                                    if (s6.score > s7.score) {
                                        saf = s6;
                                        s6 = s7;
                                        s7 = saf;
                                        changed = true;
                                    }
                                    if (s7.score > s8.score) {
                                        saf = s7;
                                        s7 = s8;
                                        s8 = saf;
                                        changed = true;
                                    }
                                }
                                intent.putExtra("zweiter", s2.spielerName);
                                intent.putExtra("zweiterschnitt", s2.durchschnitt);
                                intent.putExtra("zweiterpfeile", s2.geworfenePfeile);
                                intent.putExtra("zweiterrest", s2.score);
                                intent.putExtra("dritter", s3.spielerName);
                                intent.putExtra("dritterschnitt", s3.durchschnitt);
                                intent.putExtra("dritterpfeile", s3.geworfenePfeile);
                                intent.putExtra("dritterrest", s3.score);
                                intent.putExtra("vierter", s4.spielerName);
                                intent.putExtra("vierterschnitt", s4.durchschnitt);
                                intent.putExtra("vierterpfeile", s4.geworfenePfeile);
                                intent.putExtra("vierterrest", s4.score);
                                intent.putExtra("fuenfter", s5.spielerName);
                                intent.putExtra("fuenfterschnitt", s5.durchschnitt);
                                intent.putExtra("fuenfterpfeile", s5.geworfenePfeile);
                                intent.putExtra("fuenfterrest", s5.score);
                                intent.putExtra("sechster", s6.spielerName);
                                intent.putExtra("sechsterschnitt", s6.durchschnitt);
                                intent.putExtra("sechsterpfeile", s6.geworfenePfeile);
                                intent.putExtra("sechsterrest", s6.score);
                                intent.putExtra("siebenter", s7.spielerName);
                                intent.putExtra("siebenterschnitt", s7.durchschnitt);
                                intent.putExtra("siebenterpfeile", s7.geworfenePfeile);
                                intent.putExtra("siebenterrest", s7.score);
                                intent.putExtra("achter", s8.spielerName);
                                intent.putExtra("achterschnitt", s8.durchschnitt);
                                intent.putExtra("achterpfeile", s8.geworfenePfeile);
                                intent.putExtra("achterrest", s8.score);
                                break;
                        }
                        spielerwertespeichern();
                        startActivity(intent);
                        finish();
                    }
                }
            };

            AlertDialog.Builder letzterdart = new AlertDialog.Builder(matchcalc.this);
                letzterdart.setMessage(getResources().getString(R.string.wievieledarts)).setPositiveButton("1", dialogClickListener)
                        .setNegativeButton("2", dialogClickListener)
                        .setNeutralButton("3",dialogClickListener)
                        .show();
        }
        //regelfall!
        else {
            letzterwurf = false;
            //vorschläge?!
            vorschlagsetzen(dummy);
            ergebnis = dummy;
            score.setText(Integer.toString(ergebnis));
            pfeile.setText(Integer.toString(Integer.parseInt(pfeile.getText().toString()) + 3));
            fdummy = (maxPunkte - ergebnis);
            durchschnitt.setText(formater.format((fdummy / Integer.parseInt(pfeile.getText().toString()) * 3)));
            //eingabe sichern für undo
            aktuellerwurf.busted=false;
            aktuellerwurf.geworfenePunkte=Integer.parseInt(scoreeingabe.getText().toString());
            wuerfe.add(aktuellerwurf);
            nextplayer_with_freeze();
            // zeit abwarten bis daten der runde gespeichert wurden (und für suddendeatherreicht() abrufbar sind)
            new Handler().postDelayed(new Runnable() {
                @Override
                public void run() {
                    if (suddendeath && suddendeatherreicht()) suddendeathend();
                }
            }, changetime);
        }

    }

    private void suddendeathend() {
        letzterwurf = true;
        if (matchgame) {
            legfinishedinsuddendeath();
        } else {
            spielzeit= (System.currentTimeMillis()-startTime)/1000;
            Intent intent = new Intent(matchcalc.this, spielende.class);
            intent.putExtra("anzahl", spieleranzahl);
            intent.putExtra("spielzeit",spielzeit);
            intent.putExtra("suddendeath",suddendeath);
            MainActivity.spieler s1,saf, s2, s3, s4, s5,s6,s7,s8;
            s1 = spieler1;
            s2 = spieler2;
            boolean changed=true;

            switch (spieleranzahl) {
                case 1:
                    intent.putExtra("erster", s1.spielerName);
                    intent.putExtra("ersterschnitt", s1.durchschnitt);
                    intent.putExtra("ersterpfeile", s1.geworfenePfeile);
                    intent.putExtra("ersterrest", s1.score);
                    break;
                case 2:
                    if (spieler1.score<spieler2.score) {
                        s1 = spieler1;
                        s2 = spieler2;
                    }
                    else {
                        s1 = spieler2;
                        s2 = spieler1;
                    }
                    intent.putExtra("erster", s1.spielerName);
                    intent.putExtra("ersterschnitt", s1.durchschnitt);
                    intent.putExtra("ersterpfeile", s1.geworfenePfeile);
                    intent.putExtra("ersterrest", s1.score);
                    intent.putExtra("zweiter", s2.spielerName);
                    intent.putExtra("zweiterschnitt", s2.durchschnitt);
                    intent.putExtra("zweiterpfeile", s2.geworfenePfeile);
                    intent.putExtra("zweiterrest", s2.score);
                    break;
                case 3:
                    s1=spieler1;
                    s2=spieler2;
                    s3=spieler3;
                    while (changed)             //kleines bubblesort für die spielerreihenfolge nach punkten
                    {
                        changed = false;
                        if (s1.score > s2.score) {
                            saf = s1;
                            s1 = s2;
                            s2 = saf;
                            changed = true;
                        }
                        if (s2.score > s3.score) {
                            saf = s2;
                            s2 = s3;
                            s3 = saf;
                            changed = true;
                        }
                    }

                    intent.putExtra("erster", s1.spielerName);
                    intent.putExtra("ersterschnitt", s1.durchschnitt);
                    intent.putExtra("ersterpfeile", s1.geworfenePfeile);
                    intent.putExtra("ersterrest", s1.score);
                    intent.putExtra("zweiter", s2.spielerName);
                    intent.putExtra("zweiterschnitt", s2.durchschnitt);
                    intent.putExtra("zweiterpfeile", s2.geworfenePfeile);
                    intent.putExtra("zweiterrest", s2.score);
                    intent.putExtra("dritter", s3.spielerName);
                    intent.putExtra("dritterschnitt", s3.durchschnitt);
                    intent.putExtra("dritterpfeile", s3.geworfenePfeile);
                    intent.putExtra("dritterrest", s3.score);
                    break;

                case 4:
                    s1=spieler1;
                    s2=spieler2;
                    s3=spieler3;
                    s4=spieler4;
                    while (changed)             //kleines bubblesort für die spielerreihenfolge nach punkten
                    {
                        changed = false;
                        if (s1.score > s2.score) {
                            saf = s1;
                            s1 = s2;
                            s2 = saf;
                            changed = true;
                        }
                        if (s2.score > s3.score) {
                            saf = s2;
                            s2 = s3;
                            s3 = saf;
                            changed = true;
                        }
                        if (s3.score > s4.score) {
                            saf = s3;
                            s3 = s4;
                            s4 = saf;
                            changed = true;
                        }
                    }
                    intent.putExtra("erster", s1.spielerName);
                    intent.putExtra("ersterschnitt", s1.durchschnitt);
                    intent.putExtra("ersterpfeile", s1.geworfenePfeile);
                    intent.putExtra("ersterrest", s1.score);
                    intent.putExtra("zweiter", s2.spielerName);
                    intent.putExtra("zweiterschnitt", s2.durchschnitt);
                    intent.putExtra("zweiterpfeile", s2.geworfenePfeile);
                    intent.putExtra("zweiterrest", s2.score);
                    intent.putExtra("dritter", s3.spielerName);
                    intent.putExtra("dritterschnitt", s3.durchschnitt);
                    intent.putExtra("dritterpfeile", s3.geworfenePfeile);
                    intent.putExtra("dritterrest", s3.score);
                    intent.putExtra("vierter", s4.spielerName);
                    intent.putExtra("vierterschnitt", s4.durchschnitt);
                    intent.putExtra("vierterpfeile", s4.geworfenePfeile);
                    intent.putExtra("vierterrest", s4.score);
                    break;
                case 5:
                    s1=spieler1;
                    s2=spieler2;
                    s3=spieler3;
                    s4=spieler4;
                    s5=spieler5;
                    while (changed)             //kleines bubblesort für die spielerreihenfolge nach punkten
                    {
                        changed = false;
                        if (s1.score > s2.score) {
                            saf = s1;
                            s1 = s2;
                            s2 = saf;
                            changed = true;
                        }
                        if (s2.score > s3.score) {
                            saf = s2;
                            s2 = s3;
                            s3 = saf;
                            changed = true;
                        }
                        if (s3.score > s4.score) {
                            saf = s3;
                            s3 = s4;
                            s4 = saf;
                            changed = true;
                        }
                        if (s4.score > s5.score) {
                            saf = s4;
                            s4 = s5;
                            s5 = saf;
                            changed = true;
                        }
                    }
                    intent.putExtra("zweiter", s2.spielerName);
                    intent.putExtra("zweiterschnitt", s2.durchschnitt);
                    intent.putExtra("zweiterpfeile", s2.geworfenePfeile);
                    intent.putExtra("zweiterrest", s2.score);
                    intent.putExtra("dritter", s3.spielerName);
                    intent.putExtra("dritterschnitt", s3.durchschnitt);
                    intent.putExtra("dritterpfeile", s3.geworfenePfeile);
                    intent.putExtra("dritterrest", s3.score);
                    intent.putExtra("vierter", s4.spielerName);
                    intent.putExtra("vierterschnitt", s4.durchschnitt);
                    intent.putExtra("vierterpfeile", s4.geworfenePfeile);
                    intent.putExtra("vierterrest", s4.score);
                    intent.putExtra("fuenfter", s5.spielerName);
                    intent.putExtra("fuenfterschnitt", s5.durchschnitt);
                    intent.putExtra("fuenfterpfeile", s5.geworfenePfeile);
                    intent.putExtra("fuenfterrest", s5.score);
                    break;
                case 6:
                    s1=spieler1;
                    s2=spieler2;
                    s3=spieler3;
                    s4=spieler4;
                    s5=spieler5;
                    s6=spieler6;
                    while (changed)             //kleines bubblesort für die spielerreihenfolge nach punkten
                    {
                        changed = false;
                        if (s1.score > s2.score) {
                            saf = s1;
                            s1 = s2;
                            s2 = saf;
                            changed = true;
                        }
                        if (s2.score > s3.score) {
                            saf = s2;
                            s2 = s3;
                            s3 = saf;
                            changed = true;
                        }
                        if (s3.score > s4.score) {
                            saf = s3;
                            s3 = s4;
                            s4 = saf;
                            changed = true;
                        }
                        if (s4.score > s5.score) {
                            saf = s4;
                            s4 = s5;
                            s5 = saf;
                            changed = true;
                        }
                        if (s5.score > s6.score) {
                            saf = s5;
                            s5 = s6;
                            s6 = saf;
                            changed = true;
                        }
                    }
                    intent.putExtra("zweiter", s2.spielerName);
                    intent.putExtra("zweiterschnitt", s2.durchschnitt);
                    intent.putExtra("zweiterpfeile", s2.geworfenePfeile);
                    intent.putExtra("zweiterrest", s2.score);
                    intent.putExtra("dritter", s3.spielerName);
                    intent.putExtra("dritterschnitt", s3.durchschnitt);
                    intent.putExtra("dritterpfeile", s3.geworfenePfeile);
                    intent.putExtra("dritterrest", s3.score);
                    intent.putExtra("vierter", s4.spielerName);
                    intent.putExtra("vierterschnitt", s4.durchschnitt);
                    intent.putExtra("vierterpfeile", s4.geworfenePfeile);
                    intent.putExtra("vierterrest", s4.score);
                    intent.putExtra("fuenfter", s5.spielerName);
                    intent.putExtra("fuenfterschnitt", s5.durchschnitt);
                    intent.putExtra("fuenfterpfeile", s5.geworfenePfeile);
                    intent.putExtra("fuenfterrest", s5.score);
                    intent.putExtra("sechster", s6.spielerName);
                    intent.putExtra("sechsterschnitt", s6.durchschnitt);
                    intent.putExtra("sechsterpfeile", s6.geworfenePfeile);
                    intent.putExtra("sechsterrest", s6.score);
                    break;
                case 7:
                    s1=spieler1;
                    s2=spieler2;
                    s3=spieler3;
                    s4=spieler4;
                    s5=spieler5;
                    s6=spieler6;
                    s7=spieler7;
                    while (changed)             //kleines bubblesort für die spielerreihenfolge nach punkten
                    {
                        changed = false;
                        if (s1.score > s2.score) {
                            saf = s1;
                            s1 = s2;
                            s2 = saf;
                            changed = true;
                        }
                        if (s2.score > s3.score) {
                            saf = s2;
                            s2 = s3;
                            s3 = saf;
                            changed = true;
                        }
                        if (s3.score > s4.score) {
                            saf = s3;
                            s3 = s4;
                            s4 = saf;
                            changed = true;
                        }
                        if (s4.score > s5.score) {
                            saf = s4;
                            s4 = s5;
                            s5 = saf;
                            changed = true;
                        }
                        if (s5.score > s6.score) {
                            saf = s5;
                            s5 = s6;
                            s6 = saf;
                            changed = true;
                        }
                        if (s6.score > s7.score) {
                            saf = s6;
                            s6 = s7;
                            s7 = saf;
                            changed = true;
                        }
                    }
                    intent.putExtra("zweiter", s2.spielerName);
                    intent.putExtra("zweiterschnitt", s2.durchschnitt);
                    intent.putExtra("zweiterpfeile", s2.geworfenePfeile);
                    intent.putExtra("zweiterrest", s2.score);
                    intent.putExtra("dritter", s3.spielerName);
                    intent.putExtra("dritterschnitt", s3.durchschnitt);
                    intent.putExtra("dritterpfeile", s3.geworfenePfeile);
                    intent.putExtra("dritterrest", s3.score);
                    intent.putExtra("vierter", s4.spielerName);
                    intent.putExtra("vierterschnitt", s4.durchschnitt);
                    intent.putExtra("vierterpfeile", s4.geworfenePfeile);
                    intent.putExtra("vierterrest", s4.score);
                    intent.putExtra("fuenfter", s5.spielerName);
                    intent.putExtra("fuenfterschnitt", s5.durchschnitt);
                    intent.putExtra("fuenfterpfeile", s5.geworfenePfeile);
                    intent.putExtra("fuenfterrest", s5.score);
                    intent.putExtra("sechster", s6.spielerName);
                    intent.putExtra("sechsterschnitt", s6.durchschnitt);
                    intent.putExtra("sechsterpfeile", s6.geworfenePfeile);
                    intent.putExtra("sechsterrest", s6.score);
                    intent.putExtra("siebenter", s7.spielerName);
                    intent.putExtra("siebenterschnitt", s7.durchschnitt);
                    intent.putExtra("siebenterpfeile", s7.geworfenePfeile);
                    intent.putExtra("siebenterrest", s7.score);
                    break;
                case 8:
                    s1=spieler1;
                    s2=spieler2;
                    s3=spieler3;
                    s4=spieler4;
                    s5=spieler5;
                    s6=spieler6;
                    s7=spieler7;
                    s8=spieler8;
                    while (changed)             //kleines bubblesort für die spielerreihenfolge nach punkten
                    {
                        changed = false;
                        if (s1.score > s2.score) {
                            saf = s1;
                            s1 = s2;
                            s2 = saf;
                            changed = true;
                        }
                        if (s2.score > s3.score) {
                            saf = s2;
                            s2 = s3;
                            s3 = saf;
                            changed = true;
                        }
                        if (s3.score > s4.score) {
                            saf = s3;
                            s3 = s4;
                            s4 = saf;
                            changed = true;
                        }
                        if (s4.score > s5.score) {
                            saf = s4;
                            s4 = s5;
                            s5 = saf;
                            changed = true;
                        }
                        if (s5.score > s6.score) {
                            saf = s5;
                            s5 = s6;
                            s6 = saf;
                            changed = true;
                        }
                        if (s6.score > s7.score) {
                            saf = s6;
                            s6 = s7;
                            s7 = saf;
                            changed = true;
                        }
                        if (s7.score > s8.score) {
                            saf = s7;
                            s7 = s8;
                            s8 = saf;
                            changed = true;
                        }
                    }
                    intent.putExtra("zweiter", s2.spielerName);
                    intent.putExtra("zweiterschnitt", s2.durchschnitt);
                    intent.putExtra("zweiterpfeile", s2.geworfenePfeile);
                    intent.putExtra("zweiterrest", s2.score);
                    intent.putExtra("dritter", s3.spielerName);
                    intent.putExtra("dritterschnitt", s3.durchschnitt);
                    intent.putExtra("dritterpfeile", s3.geworfenePfeile);
                    intent.putExtra("dritterrest", s3.score);
                    intent.putExtra("vierter", s4.spielerName);
                    intent.putExtra("vierterschnitt", s4.durchschnitt);
                    intent.putExtra("vierterpfeile", s4.geworfenePfeile);
                    intent.putExtra("vierterrest", s4.score);
                    intent.putExtra("fuenfter", s5.spielerName);
                    intent.putExtra("fuenfterschnitt", s5.durchschnitt);
                    intent.putExtra("fuenfterpfeile", s5.geworfenePfeile);
                    intent.putExtra("fuenfterrest", s5.score);
                    intent.putExtra("sechster", s6.spielerName);
                    intent.putExtra("sechsterschnitt", s6.durchschnitt);
                    intent.putExtra("sechsterpfeile", s6.geworfenePfeile);
                    intent.putExtra("sechsterrest", s6.score);
                    intent.putExtra("siebenter", s7.spielerName);
                    intent.putExtra("siebenterschnitt", s7.durchschnitt);
                    intent.putExtra("siebenterpfeile", s7.geworfenePfeile);
                    intent.putExtra("siebenterrest", s7.score);
                    intent.putExtra("achter", s8.spielerName);
                    intent.putExtra("achterschnitt", s8.durchschnitt);
                    intent.putExtra("achterpfeile", s8.geworfenePfeile);
                    intent.putExtra("achterrest", s8.score);
                    break;
            }
            if ((s1.score==s2.score) && (spieleranzahl >= 2)) {
                Toast.makeText(getApplicationContext(), String.format(getResources().getString(R.string.gleicherPunktestand), s1.spielerName, s2.spielerName)+" "+getResources().getString(R.string.besten3darts),Toast.LENGTH_LONG).show();
                return;
            }
            else  // suddendeathEnde - hinweis
                Toast.makeText(getApplicationContext(), getResources().getString(R.string.suddendeatherreicht), Toast.LENGTH_LONG).show();
            startActivity(intent);
            finish();
        }
    }

    private int gespielte_legs = 0;


    private void setleganzeige(boolean set, boolean leg) {
        String str = "";
        String ls = "";
        if (android.os.Build.VERSION.SDK_INT >= android.os.Build.VERSION_CODES.KITKAT) {
            ls = System.lineSeparator();
        }
        if (set)
            str = rundenname.concat(" ").concat(getResources().getString(R.string.gewinnt_set)).concat(ls);
        if (leg)
            str = rundenname.concat(" ").concat(getResources().getString(R.string.gewinnt_leg)).concat(ls);
        str = str.concat(ls).concat(spieler1.spielerName).concat(":").concat(spieler2.spielerName).concat(ls).concat(ls);
        if (set)
            str = str.concat("Set ").concat(Integer.toString(spieler1.sets)).concat(":").concat(String.valueOf(spieler2.sets)).concat(ls);
        if (leg)
            str = str.concat("Leg ").concat(Integer.toString(spieler1.legs)).concat(":").concat(String.valueOf(spieler2.legs));
        buttonfreeze(true);
        final TextView aufnahmetv = findViewById(R.id.aufnahmetv);
        aufnahmetv.setMaxLines(10);
        aufnahmetv.setText(str);
        aufnahmetv.setVisibility(View.VISIBLE);
        new Handler().postDelayed(new Runnable() {
            @Override
            public void run() {
                buttonfreeze(false);
                aufnahmetv.setVisibility(View.INVISIBLE);
                aufnahmetv.setMaxLines(1);
            }
        }, (15000));
    }

    private void legfinishedinsuddendeath(){
        //spielerwerte speichern (jedes beendete leg geht in die statistik  als spiel ein(<-beschreibung sollte in stat erweitert werden um "(inkl. legs)"!)
        gespielte_legs++;
        if (spieler1.score<spieler2.score) {
            spieler1.legs++;
            spieler1.legswon++;
            spielerspeichern(spieler1, true);
            spielerspeichern(spieler2, false);
            // leg grenze erreicht?
            if ((spieler1.legs >= legs) && (spieler2.legs < spieler1.legs)) {
                spieler1.sets++;
                setleganzeige(true, false);
                spieler1.legs = 0;
                spieler2.legs = 0;
                // set grenze erreicht?
                if ((spieler1.sets >= sets) && (spieler2.sets < spieler1.sets)) {
                    Toast.makeText(getApplicationContext(), rundenname + " " + getResources().getString(R.string.gewinnt_match) + " " + spieler1.sets + ":" + spieler2.sets, Toast.LENGTH_LONG).show();
                    //gewonnene_sets etc. endgültig speichern und gewonnene_set_matches
                    //finish match! (intent to spielerende..)
                    MainActivity.spieler s11, s22;
                    if (spieler1.spielerName.equals(spieler3.spielerName)) {
                        zwischenspeichern(spieler1, spieler3);
                        zwischenspeichern(spieler2, spieler4);
                        s11 = spieler3;
                        s22 = spieler4;
                    }
                    //spieler1.spielerName=spieler4.spielerName und spieler2.spielerName=spieler3.SpielerName
                    else {
                        zwischenspeichern(spieler2, spieler3);
                        zwischenspeichern(spieler1, spieler4);
                        s11 = spieler4;
                        s22 = spieler3;
                    }
                    Intent intent = new Intent(matchcalc.this, spielende.class);
                    intent.putExtra("anzahl", spieleranzahl);
                    intent.putExtra("match", true);
                    spielzeit= (System.currentTimeMillis()-startTime)/1000;

                    intent.putExtra("erster", s11.spielerName);
                    intent.putExtra("ersterschnitt", s11.durchschnitt);
                    intent.putExtra("ersterpfeile", s11.geworfenePfeile);
                    intent.putExtra("erster180", s11.anzahl180);
                    intent.putExtra("erster140", s11.anzahluber140);
                    intent.putExtra("erster100", s11.anzahluber100);
                    intent.putExtra("erster60", s11.anzahluber60);
                    intent.putExtra("erstercheckout", s11.checkoutmax);
                    intent.putExtra("ersterwurf", s11.besterWurf);
                    intent.putExtra("erstersets", s11.sets);
                    intent.putExtra("ersterlegs", s11.legswon);

                    intent.putExtra("zweiter", s22.spielerName);
                    intent.putExtra("zweiterschnitt", s22.durchschnitt);
                    intent.putExtra("zweiterpfeile", s22.geworfenePfeile);
                    intent.putExtra("zweiter180", s22.anzahl180);
                    intent.putExtra("zweiter140", s22.anzahluber140);
                    intent.putExtra("zweiter100", s22.anzahluber100);
                    intent.putExtra("zweiter60", s22.anzahluber60);
                    intent.putExtra("zweitercheckout", s22.checkoutmax);
                    intent.putExtra("zweiterwurf", s22.besterWurf);
                    intent.putExtra("zweitersets", s22.sets);
                    intent.putExtra("zweiterlegs", s22.legswon);
                    intent.putExtra("spielzeit",spielzeit);

                    // matchwon und lost speichern

                    MainActivity.spieler rdummy;
                    // position(index) von player finden

                    int i, z, y = -1;
                    z = MainActivity.allespieler.size();
                    for (i = 0; i < z; i++) {
                        if (MainActivity.allespieler.get(i).spielerName.equals(spieler1.spielerName))
                            y = i;
                    }
                    if (y == -1) {
                        Toast.makeText(getApplicationContext(), getResources().getString(R.string.fehlerbeims) + spieler1.spielerName + getResources().getString(R.string.namenichtg), Toast.LENGTH_LONG).show();
                        return;
                    }
                    rdummy = MainActivity.allespieler.get(y);
                    rdummy.matcheswon++;
                    MainActivity.allespieler.set(y, rdummy);

                    y = -1;
                    for (i = 0; i < z; i++) {
                        if (MainActivity.allespieler.get(i).spielerName.equals(spieler2.spielerName))
                            y = i;
                    }
                    if (y == -1) {
                        Toast.makeText(getApplicationContext(), getResources().getString(R.string.fehlerbeims) + spieler2.spielerName + getResources().getString(R.string.namenichtg), Toast.LENGTH_LONG).show();
                        return;
                    }
                    rdummy = MainActivity.allespieler.get(y);
                    rdummy.matcheslost++;
                    MainActivity.allespieler.set(y, rdummy);
                    MainActivity.speichern(this,suddendeath);

                    startActivity(intent);
                    finish();

                }
            } else setleganzeige(false, true);
        } else if (spieler2.score<spieler1.score) {
            spieler2.legs++;
            spieler2.legswon++;
            spielerspeichern(spieler2, true);
            spielerspeichern(spieler1, false);
            // set oder leg grenze erreicht?
            if ((spieler2.legs >= legs) && (spieler1.legs < spieler2.legs)) {
                Toast.makeText(getApplicationContext(), rundenname + " " + getResources().getString(R.string.gewinnt_set) + " " + spieler2.legs + ":" + spieler1.legs, Toast.LENGTH_LONG).show();
                spieler2.sets++;
                setleganzeige(true, false);
                spieler1.legs = 0;
                spieler2.legs = 0;
                if ((spieler2.sets >= sets) && (spieler1.sets < spieler2.sets)) {
                    Toast.makeText(getApplicationContext(), rundenname + " " + getResources().getString(R.string.gewinnt_match) + " " + spieler2.sets + ":" + spieler1.sets, Toast.LENGTH_LONG).show();
                    spieler2.matcheswon++;
                    spieler1.matcheslost++;
                    //gewonnene_sets endgültig speichern und gewonnene_set_matches
                    //finish match! (intent to spielerende..)
                    MainActivity.spieler s11, s22;
                    if (spieler1.spielerName.equals(spieler3.spielerName)) {
                        zwischenspeichern(spieler1, spieler3);
                        zwischenspeichern(spieler2, spieler4);
                        s11 = spieler4;
                        s22 = spieler3;
                    }
                    //spieler1.spielerName=spieler4.spielerName und spieler2.spielerName=spieler3.SpielerName
                    else {
                        zwischenspeichern(spieler2, spieler3);
                        zwischenspeichern(spieler1, spieler4);
                        s11 = spieler3;
                        s22 = spieler4;
                    }
                    Intent intent = new Intent(matchcalc.this, spielende.class);
                    intent.putExtra("anzahl", spieleranzahl);
                    intent.putExtra("match", true);
                    spielzeit= (System.currentTimeMillis()-startTime)/1000;

                    intent.putExtra("erster", s11.spielerName);
                    intent.putExtra("ersterschnitt", s11.durchschnitt);
                    intent.putExtra("ersterpfeile", s11.geworfenePfeile);
                    intent.putExtra("erster180", s11.anzahl180);
                    intent.putExtra("erster140", s11.anzahluber140);
                    intent.putExtra("erster100", s11.anzahluber100);
                    intent.putExtra("erster60", s11.anzahluber60);
                    intent.putExtra("erstercheckout", s11.checkoutmax);
                    intent.putExtra("ersterwurf", s11.besterWurf);
                    intent.putExtra("erstersets", s11.sets);
                    intent.putExtra("ersterlegs", s11.legswon);


                    intent.putExtra("zweiter", s22.spielerName);
                    intent.putExtra("zweiterschnitt", s22.durchschnitt);
                    intent.putExtra("zweiterpfeile", s22.geworfenePfeile);
                    intent.putExtra("zweiter180", s22.anzahl180);
                    intent.putExtra("zweiter140", s22.anzahluber140);
                    intent.putExtra("zweiter100", s22.anzahluber100);
                    intent.putExtra("zweiter60", s22.anzahluber60);
                    intent.putExtra("zweitercheckout", s22.checkoutmax);
                    intent.putExtra("zweiterwurf", s22.besterWurf);
                    intent.putExtra("zweitersets", s22.sets);
                    intent.putExtra("zweiterlegs", s22.legswon);
                    intent.putExtra("spielzeit",spielzeit);

                    // matchwon und lost speichern

                    MainActivity.spieler rdummy;
                    // position(index) von player finden

                    int i, z, y = -1;
                    z = MainActivity.allespieler.size();
                    for (i = 0; i < z; i++) {
                        if (MainActivity.allespieler.get(i).spielerName.equals(spieler2.spielerName))
                            y = i;
                    }
                    if (y == -1) {
                        Toast.makeText(getApplicationContext(), getResources().getString(R.string.fehlerbeims) + spieler2.spielerName + getResources().getString(R.string.namenichtg), Toast.LENGTH_LONG).show();
                        return;
                    }
                    rdummy = MainActivity.allespieler.get(y);
                    rdummy.matcheswon++;
                    MainActivity.allespieler.set(y, rdummy);

                    y = -1;
                    for (i = 0; i < z; i++) {
                        if (MainActivity.allespieler.get(i).spielerName.equals(spieler1.spielerName))
                            y = i;
                    }
                    if (y == -1) {
                        Toast.makeText(getApplicationContext(), getResources().getString(R.string.fehlerbeims) + spieler1.spielerName + getResources().getString(R.string.namenichtg), Toast.LENGTH_LONG).show();
                        return;
                    }
                    rdummy = MainActivity.allespieler.get(y);
                    rdummy.matcheslost++;
                    MainActivity.allespieler.set(y, rdummy);
                    MainActivity.speichern(this,suddendeath);

                    startActivity(intent);
                    finish();


                }
            } else setleganzeige(false, true);
        }
        //match geht weiter
        //spielerwerte zwischenspeichern für endergebnis

        if (spieler1.spielerName.equals(spieler3.spielerName)) {
            zwischenspeichern(spieler1, spieler3);
            zwischenspeichern(spieler2, spieler4);
        }

        //spieler1.spielerName=spieler4.spielerName und spieler2.spielerName=spieler3.SpielerName
        else {
            zwischenspeichern(spieler2, spieler3);
            zwischenspeichern(spieler1, spieler4);
        }

        //und score&co. zurücksetzen für weitere legs/sets!
        String namesave = spieler1.spielerName;
        int legss = spieler1.legs;
        int setss = spieler1.sets;
        int legswon = spieler1.legswon;

        spieler1.durchschnitt = 0;
        spieler1.AnzahlSpiele = 0;
        spieler1.geworfenePfeile = 0;
        spieler1.anzahl180 = 0;
        spieler1.anzahluber140 = 0;
        spieler1.anzahluber100 = 0;
        spieler1.anzahluber60 = 0;
        spieler1.besterWurf = 0;
        spieler1.checkoutmax = 0;
        spieler1.spielerName = spieler2.spielerName;
        spieler1.sets = spieler2.sets;
        spieler1.legs = spieler2.legs;
        spieler1.score = maxPunkte;
        spieler1.legswon = spieler2.legswon;

        spieler2.durchschnitt = 0;
        spieler2.AnzahlSpiele = 0;
        spieler2.geworfenePfeile = 0;
        spieler2.anzahl180 = 0;
        spieler2.anzahluber140 = 0;
        spieler2.anzahluber100 = 0;
        spieler2.anzahluber60 = 0;
        spieler2.besterWurf = 0;
        spieler2.checkoutmax = 0;
        spieler2.spielerName = namesave;
        spieler2.legs = legss;
        spieler2.sets = setss;
        spieler2.score = maxPunkte;
        spieler2.legswon = legswon;

        score.setText(String.valueOf(maxPunkte));
        durchschnitt.setText("0");
        pfeile.setText("0");
        name.setText(spieler1.spielerName);
        vorschlagsetzen(maxPunkte);
        leganzeige.setText(String.valueOf(spieler1.legs));
        setanzeige.setText(String.valueOf(spieler1.sets));

        listenName1.setText(spieler2.spielerName);
        listenPunkte1.setText(maxPunkte + "  Ø: 0");
        listenvorschlag1.setText("");
        listenvorschlag1.setVisibility(View.GONE);
        int runden=0;
        TextView suddendeathleft = findViewById(R.id.suddendeathroundsleft);
        final SharedPreferences settings = getApplicationContext().getSharedPreferences("Einstellungen", 0);
        if (settings.contains("sddarts")) runden = settings.getInt("sddarts",20);
        suddendeathleft.setText(String.valueOf(runden));
    }

    private void legfinished() {
        //spielerwerte speichern (jedes beendete leg geht in die statistik  als spiel ein(<-beschreibung sollte in stat erweitert werden um "(inkl. legs)"!)
        gespielte_legs++;
        if (rundenname.equals(spieler1.spielerName)) {
            spieler1.legs++;
            spieler1.legswon++;
            wurfstatistik(spieler1, true);
            spielerspeichern(spieler1, true);
            spielerspeichern(spieler2, false);
            // set oder leg grenze erreicht?
            if ((spieler1.legs >= legs) && (spieler2.legs < spieler1.legs)) {
                spieler1.sets++;
                setleganzeige(true, false);
                spieler1.legs = 0;
                spieler2.legs = 0;
                if ((spieler1.sets >= sets) && (spieler2.sets < spieler1.sets)) {
                    Toast.makeText(getApplicationContext(), rundenname + " " + getResources().getString(R.string.gewinnt_match) + " " + spieler1.sets + ":" + spieler2.sets, Toast.LENGTH_LONG).show();
                    //gewonnene_sets etc. endgültig speichern und gewonnene_set_matches
                    //finish match! (intent to spielerende..)
                    MainActivity.spieler s11, s22;
                    if (spieler1.spielerName.equals(spieler3.spielerName)) {
                        zwischenspeichern(spieler1, spieler3);
                        zwischenspeichern(spieler2, spieler4);
                        s11 = spieler3;
                        s22 = spieler4;
                    }
                    //spieler1.spielerName=spieler4.spielerName und spieler2.spielerName=spieler3.SpielerName
                    else {
                        zwischenspeichern(spieler2, spieler3);
                        zwischenspeichern(spieler1, spieler4);
                        s11 = spieler4;
                        s22 = spieler3;
                    }
                    Intent intent = new Intent(matchcalc.this, spielende.class);
                    intent.putExtra("anzahl", spieleranzahl);
                    intent.putExtra("match", true);
                    spielzeit= (System.currentTimeMillis()-startTime)/1000;

                    intent.putExtra("erster", s11.spielerName);
                    intent.putExtra("ersterschnitt", s11.durchschnitt);
                    intent.putExtra("ersterpfeile", s11.geworfenePfeile);
                    intent.putExtra("erster180", s11.anzahl180);
                    intent.putExtra("erster140", s11.anzahluber140);
                    intent.putExtra("erster100", s11.anzahluber100);
                    intent.putExtra("erster60", s11.anzahluber60);
                    intent.putExtra("erstercheckout", s11.checkoutmax);
                    intent.putExtra("ersterwurf", s11.besterWurf);
                    intent.putExtra("erstersets", s11.sets);
                    intent.putExtra("ersterlegs", s11.legswon);

                    intent.putExtra("zweiter", s22.spielerName);
                    intent.putExtra("zweiterschnitt", s22.durchschnitt);
                    intent.putExtra("zweiterpfeile", s22.geworfenePfeile);
                    intent.putExtra("zweiter180", s22.anzahl180);
                    intent.putExtra("zweiter140", s22.anzahluber140);
                    intent.putExtra("zweiter100", s22.anzahluber100);
                    intent.putExtra("zweiter60", s22.anzahluber60);
                    intent.putExtra("zweitercheckout", s22.checkoutmax);
                    intent.putExtra("zweiterwurf", s22.besterWurf);
                    intent.putExtra("zweitersets", s22.sets);
                    intent.putExtra("zweiterlegs", s22.legswon);
                    intent.putExtra("spielzeit",spielzeit);

                    // matchwon und lost speichern

                    MainActivity.spieler rdummy;
                    // position(index) von player finden

                    int i, z, y = -1;
                    z = MainActivity.allespieler.size();
                    for (i = 0; i < z; i++) {
                        if (MainActivity.allespieler.get(i).spielerName.equals(spieler1.spielerName))
                            y = i;
                    }
                    if (y == -1) {
                        Toast.makeText(getApplicationContext(), getResources().getString(R.string.fehlerbeims) + spieler1.spielerName + getResources().getString(R.string.namenichtg), Toast.LENGTH_LONG).show();
                        return;
                    }
                    rdummy = MainActivity.allespieler.get(y);
                    rdummy.matcheswon++;
                    MainActivity.allespieler.set(y, rdummy);

                    y = -1;
                    for (i = 0; i < z; i++) {
                        if (MainActivity.allespieler.get(i).spielerName.equals(spieler2.spielerName))
                            y = i;
                    }
                    if (y == -1) {
                        Toast.makeText(getApplicationContext(), getResources().getString(R.string.fehlerbeims) + spieler2.spielerName + getResources().getString(R.string.namenichtg), Toast.LENGTH_LONG).show();
                        return;
                    }
                    rdummy = MainActivity.allespieler.get(y);
                    rdummy.matcheslost++;
                    MainActivity.allespieler.set(y, rdummy);
                    MainActivity.speichern(this,suddendeath);

                    startActivity(intent);
                    finish();

                }
            } else setleganzeige(false, true);
        } else {
            spieler2.legs++;
            spieler2.legswon++;
            wurfstatistik(spieler2, true);
            spielerspeichern(spieler2, true);
            spielerspeichern(spieler1, false);
            // set oder leg grenze erreicht?
            if ((spieler2.legs >= legs) && (spieler1.legs < spieler2.legs)) {
                Toast.makeText(getApplicationContext(), rundenname + " " + getResources().getString(R.string.gewinnt_set) + " " + spieler2.legs + ":" + spieler1.legs, Toast.LENGTH_LONG).show();
                spieler2.sets++;
                setleganzeige(true, false);
                spieler1.legs = 0;
                spieler2.legs = 0;
                if ((spieler2.sets >= sets) && (spieler1.sets < spieler2.sets)) {
                    Toast.makeText(getApplicationContext(), rundenname + " " + getResources().getString(R.string.gewinnt_match) + " " + spieler2.sets + ":" + spieler1.sets, Toast.LENGTH_LONG).show();
                    spieler2.matcheswon++;
                    spieler1.matcheslost++;
                    //gewonnene_sets endgültig speichern und gewonnene_set_matches
                    //finish match! (intent to spielerende..)
                    MainActivity.spieler s11, s22;
                    if (spieler1.spielerName.equals(spieler3.spielerName)) {
                        zwischenspeichern(spieler1, spieler3);
                        zwischenspeichern(spieler2, spieler4);
                        s11 = spieler4;
                        s22 = spieler3;
                    }
                    //spieler1.spielerName=spieler4.spielerName und spieler2.spielerName=spieler3.SpielerName
                    else {
                        zwischenspeichern(spieler2, spieler3);
                        zwischenspeichern(spieler1, spieler4);
                        s11 = spieler3;
                        s22 = spieler4;
                    }
                    Intent intent = new Intent(matchcalc.this, spielende.class);
                    intent.putExtra("anzahl", spieleranzahl);
                    intent.putExtra("match", true);
                    spielzeit= (System.currentTimeMillis()-startTime)/1000;

                    intent.putExtra("erster", s11.spielerName);
                    intent.putExtra("ersterschnitt", s11.durchschnitt);
                    intent.putExtra("ersterpfeile", s11.geworfenePfeile);
                    intent.putExtra("erster180", s11.anzahl180);
                    intent.putExtra("erster140", s11.anzahluber140);
                    intent.putExtra("erster100", s11.anzahluber100);
                    intent.putExtra("erster60", s11.anzahluber60);
                    intent.putExtra("erstercheckout", s11.checkoutmax);
                    intent.putExtra("ersterwurf", s11.besterWurf);
                    intent.putExtra("erstersets", s11.sets);
                    intent.putExtra("ersterlegs", s11.legswon);


                    intent.putExtra("zweiter", s22.spielerName);
                    intent.putExtra("zweiterschnitt", s22.durchschnitt);
                    intent.putExtra("zweiterpfeile", s22.geworfenePfeile);
                    intent.putExtra("zweiter180", s22.anzahl180);
                    intent.putExtra("zweiter140", s22.anzahluber140);
                    intent.putExtra("zweiter100", s22.anzahluber100);
                    intent.putExtra("zweiter60", s22.anzahluber60);
                    intent.putExtra("zweitercheckout", s22.checkoutmax);
                    intent.putExtra("zweiterwurf", s22.besterWurf);
                    intent.putExtra("zweitersets", s22.sets);
                    intent.putExtra("zweiterlegs", s22.legswon);
                    intent.putExtra("spielzeit",spielzeit);

                    // matchwon und lost speichern

                    MainActivity.spieler rdummy;
                    // position(index) von player finden

                    int i, z, y = -1;
                    z = MainActivity.allespieler.size();
                    for (i = 0; i < z; i++) {
                        if (MainActivity.allespieler.get(i).spielerName.equals(spieler2.spielerName))
                            y = i;
                    }
                    if (y == -1) {
                        Toast.makeText(getApplicationContext(), getResources().getString(R.string.fehlerbeims) + spieler2.spielerName + getResources().getString(R.string.namenichtg), Toast.LENGTH_LONG).show();
                        return;
                    }
                    rdummy = MainActivity.allespieler.get(y);
                    rdummy.matcheswon++;
                    MainActivity.allespieler.set(y, rdummy);

                    y = -1;
                    for (i = 0; i < z; i++) {
                        if (MainActivity.allespieler.get(i).spielerName.equals(spieler1.spielerName))
                            y = i;
                    }
                    if (y == -1) {
                        Toast.makeText(getApplicationContext(), getResources().getString(R.string.fehlerbeims) + spieler1.spielerName + getResources().getString(R.string.namenichtg), Toast.LENGTH_LONG).show();
                        return;
                    }
                    rdummy = MainActivity.allespieler.get(y);
                    rdummy.matcheslost++;
                    MainActivity.allespieler.set(y, rdummy);
                    MainActivity.speichern(this,suddendeath);

                    startActivity(intent);
                    finish();


                }
            } else setleganzeige(false, true);
        }
        //match geht weiter
        //spielerwerte zwischenspeichern für endergebnis

        if (spieler1.spielerName.equals(spieler3.spielerName)) {
            zwischenspeichern(spieler1, spieler3);
            zwischenspeichern(spieler2, spieler4);
        }

        //spieler1.spielerName=spieler4.spielerName und spieler2.spielerName=spieler3.SpielerName
        else {
            zwischenspeichern(spieler2, spieler3);
            zwischenspeichern(spieler1, spieler4);
        }

        //und score&co. zurücksetzen für weitere legs/sets!
        String namesave = spieler1.spielerName;
        int legss = spieler1.legs;
        int setss = spieler1.sets;
        int legswon = spieler1.legswon;

        spieler1.durchschnitt = 0;
        spieler1.AnzahlSpiele = 0;
        spieler1.geworfenePfeile = 0;
        spieler1.anzahl180 = 0;
        spieler1.anzahluber140 = 0;
        spieler1.anzahluber100 = 0;
        spieler1.anzahluber60 = 0;
        spieler1.besterWurf = 0;
        spieler1.checkoutmax = 0;
        spieler1.spielerName = spieler2.spielerName;
        spieler1.sets = spieler2.sets;
        spieler1.legs = spieler2.legs;
        spieler1.score = maxPunkte;
        spieler1.legswon = spieler2.legswon;

        spieler2.durchschnitt = 0;
        spieler2.AnzahlSpiele = 0;
        spieler2.geworfenePfeile = 0;
        spieler2.anzahl180 = 0;
        spieler2.anzahluber140 = 0;
        spieler2.anzahluber100 = 0;
        spieler2.anzahluber60 = 0;
        spieler2.besterWurf = 0;
        spieler2.checkoutmax = 0;
        spieler2.spielerName = namesave;
        spieler2.legs = legss;
        spieler2.sets = setss;
        spieler2.score = maxPunkte;
        spieler2.legswon = legswon;

        score.setText(String.valueOf(maxPunkte));
        durchschnitt.setText("0");
        pfeile.setText("0");
        name.setText(spieler1.spielerName);
        vorschlagsetzen(maxPunkte);
        leganzeige.setText(String.valueOf(spieler1.legs));
        setanzeige.setText(String.valueOf(spieler1.sets));

        listenName1.setText(spieler2.spielerName);
        listenPunkte1.setText(maxPunkte + "  Ø: 0");
        listenvorschlag1.setText("");
        listenvorschlag1.setVisibility(View.GONE);
    }

    //sichert die leg ergebnisse für die matchendstatistik
    private void zwischenspeichern(MainActivity.spieler quelle, MainActivity.spieler ziel) {
        ziel.AnzahlSpiele += quelle.AnzahlSpiele;
        ziel.anzahl180 += quelle.anzahl180;
        ziel.anzahluber60 += quelle.anzahluber60;
        ziel.anzahluber100 += quelle.anzahluber100;
        ziel.anzahluber140 += quelle.anzahluber140;
        ziel.geworfenePfeile += quelle.geworfenePfeile;
        if (gespielte_legs > 1)
            ziel.durchschnitt = (((ziel.durchschnitt * (gespielte_legs - 1)) + quelle.durchschnitt) / gespielte_legs);
        else ziel.durchschnitt = quelle.durchschnitt;
        if (ziel.besterWurf < quelle.besterWurf) ziel.besterWurf = quelle.besterWurf;
        if (ziel.sets != quelle.sets) ziel.sets = quelle.sets;
        if (quelle.checkoutmax > ziel.checkoutmax) ziel.checkoutmax = quelle.checkoutmax;
        ziel.matcheslost = quelle.matcheslost;
        ziel.matcheswon = quelle.matcheswon;
        ziel.legswon = quelle.legswon;
    }



    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        if (MainActivity.themeauswahl && MainActivity.subdesignchoice) setTheme(R.style.AppThemeBlack);
        else if (MainActivity.themeauswahl) setTheme(R.style.AppThemeDark);
        else setTheme(R.style.Theme_AppCompat_Light_NoActionBar);
        setContentView(R.layout.activity_matchcalc);
        SharedPreferences settings = getSharedPreferences("Einstellungen", 0);
        ConstraintLayout main = findViewById(R.id.matchcalc);
        if (settings.contains("keepscreenongame")) main.setKeepScreenOn(settings.getBoolean("keepscreenongame",true));
        // spielmodus und co übernehmen
        Intent intent = getIntent();
        CharSequence spieler1n = intent.getCharSequenceExtra("spieler1");
        CharSequence spieler2n = intent.getCharSequenceExtra("spieler2");
        CharSequence spieler3n = intent.getCharSequenceExtra("spieler3");
        CharSequence spieler4n = intent.getCharSequenceExtra("spieler4");
        CharSequence spieler5n = intent.getCharSequenceExtra("spieler5");
        CharSequence spieler6n = intent.getCharSequenceExtra("spieler6");
        CharSequence spieler7n = intent.getCharSequenceExtra("spieler7");
        CharSequence spieler8n = intent.getCharSequenceExtra("spieler8");
        spieler1.spielerName = spieler1n.toString();
        spieler2.spielerName = spieler2n.toString();
        spieler3.spielerName = spieler3n.toString();
        spieler4.spielerName = spieler4n.toString();
        spieler5.spielerName = spieler5n.toString();
        spieler6.spielerName = spieler6n.toString();
        spieler7.spielerName = spieler7n.toString();
        spieler8.spielerName = spieler8n.toString();

        scoreeingabe = findViewById(R.id.scoreeingabe);
        score = findViewById(R.id.punktep1);
        v1 = findViewById(R.id.vorschlag1);
        v2 = findViewById(R.id.vorschlag2);
        v3 = findViewById(R.id.vorschlag3);
        name = findViewById(R.id.p1name);
        durchschnitt = findViewById(R.id.durchschnitt);
        pfeile = findViewById(R.id.pfeilegeworfen);
        listenName1 = findViewById(R.id.listeSpieler1);
        listenName2 = findViewById(R.id.listeSpieler2);
        listenName3 = findViewById(R.id.listeSpieler3);
        listenName4 = findViewById(R.id.listeSpieler4);
        listenName5 = findViewById(R.id.listeSpieler5);
        listenName6 = findViewById(R.id.listeSpieler6);
        listenName7 = findViewById(R.id.listeSpieler7);
        listenPunkte1 = findViewById(R.id.listeSpieler1SS);
        listenPunkte2 = findViewById(R.id.listeSpieler2SS);
        listenPunkte3 = findViewById(R.id.listeSpieler3SS);
        listenPunkte4 = findViewById(R.id.listeSpieler4SS);
        listenPunkte5 = findViewById(R.id.listeSpieler5SS);
        listenPunkte6 = findViewById(R.id.listeSpieler6SS);
        listenPunkte7 = findViewById(R.id.listeSpieler7SS);
        listenvorschlag1 = findViewById(R.id.listeSpieler1v);
        listenvorschlag2 = findViewById(R.id.listeSpieler2v);
        listenvorschlag3 = findViewById(R.id.listeSpieler3v);
        listenvorschlag4 = findViewById(R.id.listeSpieler4v);
        listenvorschlag5 = findViewById(R.id.listeSpieler5v);
        listenvorschlag6 = findViewById(R.id.listeSpieler6v);
        listenvorschlag7 = findViewById(R.id.listeSpieler7v);
        setanzeige = findViewById(R.id.setsgewonnen);
        leganzeige = findViewById(R.id.legsgewonnen);
        TextView setbeschriftung = findViewById(R.id.textView2);
        TextView legbeschriftung = findViewById(R.id.textView11);
        TextView suddendeathtext = findViewById(R.id.suddendeathtext);
        TextView suddendeathleft = findViewById(R.id.suddendeathroundsleft);
        listenvorschlag1.setVisibility(View.GONE);
        listenvorschlag2.setVisibility(View.GONE);
        listenvorschlag3.setVisibility(View.GONE);
        listenvorschlag4.setVisibility(View.GONE);
        listenvorschlag5.setVisibility(View.GONE);
        listenvorschlag6.setVisibility(View.GONE);
        listenvorschlag7.setVisibility(View.GONE);
        spieleranzahl = Integer.parseInt(intent.getStringExtra("spieleranzahl"));
        doubleout = intent.getBooleanExtra("doubleout", false);
        masterout = intent.getBooleanExtra("masterout", false);
        CharSequence spielmodus = intent.getCharSequenceExtra("spielmodus");
        maxPunkte = Integer.parseInt(spielmodus.toString());
        sets = intent.getIntExtra("sets", 0);
        legs = intent.getIntExtra("legs", 0);

        if (sets != 0) {  //set/leg match?
            matchgame = true;
            //speicherkopien für zwischenspeichern anlegen
            spieler3.spielerName = spieler1.spielerName;
            spieler4.spielerName = spieler2.spielerName;
            setanzeige.setVisibility(View.VISIBLE);
            leganzeige.setVisibility(View.VISIBLE);
            setbeschriftung.setVisibility(View.VISIBLE);
            legbeschriftung.setVisibility(View.VISIBLE);
            //falls "best of" gewählt ist reduziere die eingestellten sets und legs auf grob die hälfte
            if (!MainActivity.firstTo) {
                sets = (sets / 2) + 1;
                legs = (legs / 2) + 1;
            }

        } else {
            setanzeige.setVisibility(View.GONE);
            leganzeige.setVisibility(View.GONE);
            setbeschriftung.setVisibility(View.GONE);
            legbeschriftung.setVisibility(View.GONE);
        }

        score.setText(spielmodus);
        name.setText(spieler1n);
        vorschlagsetzen(maxPunkte);
        spieler1.score = maxPunkte;
        spieler2.score = maxPunkte;
        spieler3.score = maxPunkte;
        spieler4.score = maxPunkte;
        spieler5.score = maxPunkte;
        spieler6.score = maxPunkte;
        spieler7.score = maxPunkte;
        spieler8.score = maxPunkte;

        // initialisiere restliche spieler (in der anzeigeliste)
        switch (spieleranzahl) {
            case 1:
                listenName1.setVisibility(View.GONE);
                listenName2.setVisibility(View.GONE);
                listenName3.setVisibility(View.GONE);
                listenName4.setVisibility(View.GONE);
                listenName5.setVisibility(View.GONE);
                listenName6.setVisibility(View.GONE);
                listenName7.setVisibility(View.GONE);
                listenPunkte1.setVisibility(View.GONE);
                listenPunkte2.setVisibility(View.GONE);
                listenPunkte3.setVisibility(View.GONE);
                listenPunkte4.setVisibility(View.GONE);
                listenPunkte5.setVisibility(View.GONE);
                listenPunkte6.setVisibility(View.GONE);
                listenPunkte7.setVisibility(View.GONE);
                Guideline rechts = findViewById(R.id.rechtsoben);
                rechts.setGuidelinePercent(1);
                View senkrecht = findViewById(R.id.senkrecht);
                senkrecht.setVisibility(View.GONE);
                break;
            case 2:
                listenName1.setVisibility(View.VISIBLE);
                listenName1.setText(spieler2n);
                listenName2.setVisibility(View.GONE);
                listenName3.setVisibility(View.GONE);
                listenName4.setVisibility(View.GONE);
                listenName5.setVisibility(View.GONE);
                listenName6.setVisibility(View.GONE);
                listenName7.setVisibility(View.GONE);
                listenPunkte1.setVisibility(View.VISIBLE);
                listenPunkte1.setText(spielmodus + "  Ø: 0");
                listenPunkte2.setVisibility(View.GONE);
                listenPunkte3.setVisibility(View.GONE);
                listenPunkte4.setVisibility(View.GONE);
                listenPunkte5.setVisibility(View.GONE);
                listenPunkte6.setVisibility(View.GONE);
                listenPunkte7.setVisibility(View.GONE);
                break;
            case 3:
                listenName1.setVisibility(View.VISIBLE);
                listenName1.setText(spieler2n);
                listenName2.setVisibility(View.VISIBLE);
                listenName2.setText(spieler3n);
                listenName3.setVisibility(View.GONE);
                listenName4.setVisibility(View.GONE);
                listenName5.setVisibility(View.GONE);
                listenName6.setVisibility(View.GONE);
                listenName7.setVisibility(View.GONE);
                listenPunkte1.setVisibility(View.VISIBLE);
                listenPunkte1.setText(spielmodus + "  Ø: 0");
                listenPunkte2.setVisibility(View.VISIBLE);
                listenPunkte2.setText(spielmodus + "  Ø: 0");
                listenPunkte3.setVisibility(View.GONE);
                listenPunkte4.setVisibility(View.GONE);
                listenPunkte5.setVisibility(View.GONE);
                listenPunkte6.setVisibility(View.GONE);
                listenPunkte7.setVisibility(View.GONE);
                break;
            case 4:
                listenName1.setVisibility(View.VISIBLE);
                listenName1.setText(spieler2n);
                listenName2.setVisibility(View.VISIBLE);
                listenName2.setText(spieler3n);
                listenName3.setVisibility(View.VISIBLE);
                listenName3.setText(spieler4n);
                listenName4.setVisibility(View.GONE);
                listenName5.setVisibility(View.GONE);
                listenName6.setVisibility(View.GONE);
                listenName7.setVisibility(View.GONE);
                listenPunkte1.setVisibility(View.VISIBLE);
                listenPunkte1.setText(spielmodus + "  Ø: 0");
                listenPunkte2.setVisibility(View.VISIBLE);
                listenPunkte2.setText(spielmodus + "  Ø: 0");
                listenPunkte3.setVisibility(View.VISIBLE);
                listenPunkte3.setText(spielmodus + "  Ø: 0");
                listenPunkte4.setVisibility(View.GONE);
                listenPunkte5.setVisibility(View.GONE);
                listenPunkte6.setVisibility(View.GONE);
                listenPunkte7.setVisibility(View.GONE);
                break;
            case 5:
                listenName1.setVisibility(View.VISIBLE);
                listenName1.setText(spieler2n);
                listenName2.setVisibility(View.VISIBLE);
                listenName2.setText(spieler3n);
                listenName3.setVisibility(View.VISIBLE);
                listenName3.setText(spieler4n);
                listenName4.setVisibility(View.VISIBLE);
                listenName4.setText(spieler5n);
                listenName5.setVisibility(View.GONE);
                listenName6.setVisibility(View.GONE);
                listenName7.setVisibility(View.GONE);
                listenPunkte1.setVisibility(View.VISIBLE);
                listenPunkte1.setText(spielmodus + "  Ø: 0");
                listenPunkte2.setVisibility(View.VISIBLE);
                listenPunkte2.setText(spielmodus + "  Ø: 0");
                listenPunkte3.setVisibility(View.VISIBLE);
                listenPunkte3.setText(spielmodus + "  Ø: 0");
                listenPunkte4.setVisibility(View.VISIBLE);
                listenPunkte4.setText(spielmodus + "  Ø: 0");
                listenPunkte5.setVisibility(View.GONE);
                listenPunkte6.setVisibility(View.GONE);
                listenPunkte7.setVisibility(View.GONE);
                break;
            case 6:
                listenName1.setVisibility(View.VISIBLE);
                listenName1.setText(spieler2n);
                listenName2.setVisibility(View.VISIBLE);
                listenName2.setText(spieler3n);
                listenName3.setVisibility(View.VISIBLE);
                listenName3.setText(spieler4n);
                listenName4.setVisibility(View.VISIBLE);
                listenName4.setText(spieler5n);
                listenName5.setVisibility(View.VISIBLE);
                listenName5.setText(spieler6n);
                listenName6.setVisibility(View.GONE);
                listenName7.setVisibility(View.GONE);
                listenPunkte1.setVisibility(View.VISIBLE);
                listenPunkte1.setText(spielmodus + "  Ø: 0");
                listenPunkte2.setVisibility(View.VISIBLE);
                listenPunkte2.setText(spielmodus + "  Ø: 0");
                listenPunkte3.setVisibility(View.VISIBLE);
                listenPunkte3.setText(spielmodus + "  Ø: 0");
                listenPunkte4.setVisibility(View.VISIBLE);
                listenPunkte4.setText(spielmodus + "  Ø: 0");
                listenPunkte5.setVisibility(View.VISIBLE);
                listenPunkte5.setText(spielmodus + "  Ø: 0");
                listenPunkte6.setVisibility(View.GONE);
                listenPunkte7.setVisibility(View.GONE);
                break;
            case 7:
                listenName1.setVisibility(View.VISIBLE);
                listenName1.setText(spieler2n);
                listenName2.setVisibility(View.VISIBLE);
                listenName2.setText(spieler3n);
                listenName3.setVisibility(View.VISIBLE);
                listenName3.setText(spieler4n);
                listenName4.setVisibility(View.VISIBLE);
                listenName4.setText(spieler5n);
                listenName5.setVisibility(View.VISIBLE);
                listenName5.setText(spieler6n);
                listenName6.setVisibility(View.VISIBLE);
                listenName6.setText(spieler7n);
                listenName7.setVisibility(View.GONE);
                listenPunkte1.setVisibility(View.VISIBLE);
                listenPunkte1.setText(spielmodus + "  Ø: 0");
                listenPunkte2.setVisibility(View.VISIBLE);
                listenPunkte2.setText(spielmodus + "  Ø: 0");
                listenPunkte3.setVisibility(View.VISIBLE);
                listenPunkte3.setText(spielmodus + "  Ø: 0");
                listenPunkte4.setVisibility(View.VISIBLE);
                listenPunkte4.setText(spielmodus + "  Ø: 0");
                listenPunkte5.setVisibility(View.VISIBLE);
                listenPunkte5.setText(spielmodus + "  Ø: 0");
                listenPunkte6.setVisibility(View.VISIBLE);
                listenPunkte6.setText(spielmodus + "  Ø: 0");
                listenPunkte7.setVisibility(View.GONE);
                break;
            case 8:
                listenName1.setVisibility(View.VISIBLE);
                listenName1.setText(spieler2n);
                listenName2.setVisibility(View.VISIBLE);
                listenName2.setText(spieler3n);
                listenName3.setVisibility(View.VISIBLE);
                listenName3.setText(spieler4n);
                listenName4.setVisibility(View.VISIBLE);
                listenName4.setText(spieler5n);
                listenName5.setVisibility(View.VISIBLE);
                listenName5.setText(spieler6n);
                listenName6.setVisibility(View.VISIBLE);
                listenName6.setText(spieler7n);
                listenName7.setVisibility(View.VISIBLE);
                listenName7.setText(spieler8n);
                listenPunkte1.setVisibility(View.VISIBLE);
                listenPunkte1.setText(spielmodus + "  Ø: 0");
                listenPunkte2.setVisibility(View.VISIBLE);
                listenPunkte2.setText(spielmodus + "  Ø: 0");
                listenPunkte3.setVisibility(View.VISIBLE);
                listenPunkte3.setText(spielmodus + "  Ø: 0");
                listenPunkte4.setVisibility(View.VISIBLE);
                listenPunkte4.setText(spielmodus + "  Ø: 0");
                listenPunkte5.setVisibility(View.VISIBLE);
                listenPunkte5.setText(spielmodus + "  Ø: 0");
                listenPunkte6.setVisibility(View.VISIBLE);
                listenPunkte6.setText(spielmodus + "  Ø: 0");
                listenPunkte7.setVisibility(View.VISIBLE);
                listenPunkte7.setText(spielmodus + "  Ø: 0");
                break;
        }


        Button b1 = findViewById(R.id.b1);
        Button b2 = findViewById(R.id.b2);
        Button b3 = findViewById(R.id.b3);
        Button b4 = findViewById(R.id.b4);
        Button b5 = findViewById(R.id.b5);
        Button b6 = findViewById(R.id.b6);
        Button b7 = findViewById(R.id.b7);
        Button b8 = findViewById(R.id.b8);
        Button b9 = findViewById(R.id.b9);
        Button b0 = findViewById(R.id.b0);
        Button delete = findViewById(R.id.delete);
        Button enter = findViewById(R.id.daneben);
        Button bundo = findViewById(R.id.undo);
        TextView aufnahmetv = findViewById(R.id.aufnahmetv);
        b1.setOnClickListener(buttonclick);
        b2.setOnClickListener(buttonclick);
        b3.setOnClickListener(buttonclick);
        b4.setOnClickListener(buttonclick);
        b5.setOnClickListener(buttonclick);
        b6.setOnClickListener(buttonclick);
        b7.setOnClickListener(buttonclick);
        b8.setOnClickListener(buttonclick);
        b9.setOnClickListener(buttonclick);
        b0.setOnClickListener(buttonclick);

        enter.setOnClickListener(buttonclick);
        delete.setOnClickListener(buttonclick);
        bundo.setOnClickListener(undoclick);
        aufnahmetv.setOnClickListener(setleganzeigeclick);

        Spinner vorschlaegeauswahl = findViewById(R.id.vorschlagsspinner);
        vorschlaegeauswahl.setOnItemSelectedListener(vorschlagauswahlclick);
        v1.setOnClickListener(vorschlagsclick);
        v2.setOnClickListener(vorschlagsclick);
        v3.setOnClickListener(vorschlagsclick);


        formater.setMaximumFractionDigits(2);
        formater.setMaximumIntegerDigits(3);
        formater.setMinimumIntegerDigits(1);
        formater.setMinimumFractionDigits(0);
        if (settings.contains("changetime")) changetime = settings.getInt("changetime", 1500);

        TypedValue outValue = new TypedValue();
        matchcalc.this.getTheme().resolveAttribute(R.attr.colorButtonNormal, outValue, true);
        matchcalc.this.getTheme().resolveAttribute(R.attr.selectableItemBackground, outValue, true);
        if (settings.contains("suddendeath")) suddendeath = settings.getBoolean("suddendeath",false);
        int runden=0;
        if (settings.contains("sddarts")) runden = settings.getInt("sddarts",20);
        suddendeathdarts = runden*3;
        suddendeathleft.setText(String.valueOf(runden));
        if (suddendeath) {
            suddendeathtext.setVisibility(View.VISIBLE);
            suddendeathleft.setVisibility(View.VISIBLE);
        }
        startTime=System.currentTimeMillis();
        if (settings.contains("Checkoutzahl")) checkoutzahl = settings.getInt("Checkoutzahl", 0);

    }


    private void buttonfreeze(boolean freeze) {
        Button b1 = findViewById(R.id.b1);
        Button b2 = findViewById(R.id.b2);
        Button b3 = findViewById(R.id.b3);
        Button b4 = findViewById(R.id.b4);
        Button b5 = findViewById(R.id.b5);
        Button b6 = findViewById(R.id.b6);
        Button b7 = findViewById(R.id.b7);
        Button b8 = findViewById(R.id.b8);
        Button b9 = findViewById(R.id.b9);
        Button b0 = findViewById(R.id.b0);
        Button delete = findViewById(R.id.delete);
        Button enter = findViewById(R.id.daneben);
        Button bundo = findViewById(R.id.undo);
        TextView scoreeingabe = findViewById(R.id.scoreeingabe);

        freeze = !freeze;       //eine frage der logik ;-)

        b1.setEnabled(freeze);
        b2.setEnabled(freeze);
        b3.setEnabled(freeze);
        b4.setEnabled(freeze);
        b5.setEnabled(freeze);
        b6.setEnabled(freeze);
        b7.setEnabled(freeze);
        b8.setEnabled(freeze);
        b9.setEnabled(freeze);
        b0.setEnabled(freeze);
        enter.setEnabled(freeze);
        delete.setEnabled(freeze);
        bundo.setEnabled(freeze);
        if (freeze) scoreeingabe.setVisibility(View.VISIBLE);
        else scoreeingabe.setVisibility(View.INVISIBLE);
    }



    private void nextplayer_with_freeze() {
        buttonfreeze(true);
        final TextView aufnahmetv = findViewById(R.id.aufnahmetv);
        String score = String.valueOf(scoreeingabe.getText());
        aufnahmetv.setText(score);
        scoreeingabe.setText("0");
        aufnahmetv.setVisibility(View.VISIBLE);
        dc_modules.playAudio(getApplicationContext(), score);
        new Handler().postDelayed(new Runnable() {
            @Override
            public void run() {
                // in case the score is not clicked away
                if (aufnahmetv.getVisibility() == View.VISIBLE) {
                    aufnahmetv.setVisibility(View.INVISIBLE);
                    nextplayer();
                    buttonfreeze(false);
                }
            }
        }, changetime);
    }

    private void wurfstatistik(MainActivity.spieler player, boolean statistikerweitern) {
        Boolean busted=true;
        int aufnahme=0;
        if (!wuerfe.isEmpty()) {
            aufnahme = wuerfe.get(wuerfe.size() - 1).geworfenePunkte;
            busted = wuerfe.get(wuerfe.size() - 1).busted;
        }
        if (statistikerweitern) {
            //wenn nicht überworfen etc., dann übernimm die aufnahme in die statistik

            if (!busted) {
                if (aufnahme == 180) player.anzahl180++;
                else if (aufnahme >= 140) player.anzahluber140++;
                else if (aufnahme >= 100) player.anzahluber100++;
                else if (aufnahme >= 60) player.anzahluber60++;
                if (aufnahme >= player.besterWurf) {
                    player.zweitbesterWurf = player.besterWurf;
                    player.besterWurf = aufnahme;
                }
                if (letzterwurf && (aufnahme > player.checkoutmax) && !suddendeatherreicht()) {
                    player.checkoutmax = aufnahme;
                }
                letzterwurf = false;

            }
                //pfeile und durschnitt immer übernehmen, auch wenn score gleich bleibt, z.b. bei nullwurf
                player.score = Integer.parseInt(score.getText().toString());
                player.geworfenePfeile = Integer.parseInt(pfeile.getText().toString());
                player.durchschnitt = Float.valueOf(durchschnitt.getText().toString());

            }


        // undo! statistik evtl. von der letzten aufnahme bereinigen - wird nur bei xdart=2 bzw. 0-1 durch lastplayer() in undo() aufgerufen
        else {   //immer die letzten drei pfeile sind eine aufnahme, ausser es gab ein überworfen, dann gibts aber auch nichts zu bereinigen
            //pfeile und durschnitt immer übernehmen, auch wenn score gleich bleibt, z.b. bei nullwurf

            if (busted) {
                return;
            }

            if ((aufnahme == 180) && player.anzahl180 > 0) player.anzahl180--;
            else if ((aufnahme >= 140) && player.anzahluber140 > 0) player.anzahluber140--;
            else if ((aufnahme >= 100) && player.anzahluber100 > 0) player.anzahluber100--;
            else if ((aufnahme >= 60) && player.anzahluber60 > 0) player.anzahluber60--;

            if (aufnahme == player.besterWurf) {
                player.besterWurf = player.zweitbesterWurf;
            }

        }
    }

    private void nextplayer()        // setzt die anzeigen so, dass der nächste spieler dran ist
    {
        rundenname = name.getText().toString();
        TextView suddenleft = findViewById(R.id.suddendeathroundsleft);
        switch (spieleranzahl) {
            case 1: {
                // aktuelle anzeigewerte fungieren als speicher bis spielende
                wurfstatistik(spieler1, true);
                suddenleft.setText(String.valueOf(Integer.parseInt(suddenleft.getText().toString())-1));
                break;
            }
            case 2: {
                // anzeigewerte speichern
                listenPunkte1.setText(score.getText() + "  Ø: " + durchschnitt.getText());
                vorschlagsetzenliste(Integer.parseInt(score.getText().toString()), listenvorschlag1);
                if (rundenname.equals(spieler1.spielerName)) {
                    wurfstatistik(spieler1, true);
                    //liste aktualisieren
                    listenName1.setText(spieler1.spielerName);
                    //aktueller spieler aktualisieren
                    name.setText(spieler2.spielerName);
                    score.setText(String.valueOf(spieler2.score));
                    pfeile.setText(String.valueOf(spieler2.geworfenePfeile));
                    durchschnitt.setText(Float.toString(spieler2.durchschnitt));
                    if (matchgame) {
                        setanzeige.setText(String.valueOf(spieler2.sets));
                        leganzeige.setText(String.valueOf(spieler2.legs));
                    }
                } else if (rundenname.equals(spieler2.spielerName)) {
                    wurfstatistik(spieler2, true);
                    //liste aktualisieren
                    listenName1.setText(spieler2.spielerName);
                    //aktueller spieler aktualisieren
                    name.setText(spieler1.spielerName);
                    score.setText(String.valueOf(spieler1.score));
                    pfeile.setText(String.valueOf(spieler1.geworfenePfeile));
                    durchschnitt.setText(Float.toString(spieler1.durchschnitt));
                    if (matchgame) {
                        setanzeige.setText(String.valueOf(spieler1.sets));
                        leganzeige.setText(String.valueOf(spieler1.legs));
                    }
                    suddenleft.setText(String.valueOf(Integer.parseInt(suddenleft.getText().toString())-1));
                }
                break;
            }
            case 3: {
                if (!(listenvorschlag2.getText().equals(""))) {
                    listenvorschlag1.setText(listenvorschlag2.getText());
                    listenvorschlag1.setVisibility(View.VISIBLE);
                } else {
                    listenvorschlag1.setText("");
                    listenvorschlag1.setVisibility(View.GONE);
                }

                vorschlagsetzenliste(Integer.parseInt(score.getText().toString()), listenvorschlag2);

                if (rundenname.equals(spieler1.spielerName)) {
                    //aktueller spieler - daten speichern
                    wurfstatistik(spieler1, true);
                    //liste aktualisieren
                    listenName1.setText(spieler3.spielerName);
                    listenPunkte1.setText(spieler3.score + "  Ø: " + spieler3.durchschnitt);
                    listenName2.setText(spieler1.spielerName);
                    listenPunkte2.setText(spieler1.score + "  Ø: " + spieler1.durchschnitt);
                    //nächsten spieler auf aktuelle-anzeige setzen
                    name.setText(spieler2.spielerName);
                    score.setText(String.valueOf(spieler2.score));
                    pfeile.setText(String.valueOf(spieler2.geworfenePfeile));
                    durchschnitt.setText(Float.toString(spieler2.durchschnitt));
                } else if (rundenname.equals(spieler2.spielerName)) {
                    //aktueller spieler - daten speichern
                    wurfstatistik(spieler2, true);
                    //liste aktualisieren
                    listenName1.setText(spieler1.spielerName);
                    listenPunkte1.setText(spieler1.score + "  Ø: " + spieler1.durchschnitt);
                    listenName2.setText(spieler2.spielerName);
                    listenPunkte2.setText(spieler2.score + "  Ø: " + spieler2.durchschnitt);
                    //nächsten spieler auf aktuelle-anzeige setzen
                    name.setText(spieler3.spielerName);
                    score.setText(String.valueOf(spieler3.score));
                    pfeile.setText(String.valueOf(spieler3.geworfenePfeile));
                    durchschnitt.setText(Float.toString(spieler3.durchschnitt));
                } else if (rundenname.equals(spieler3.spielerName)) {
                    //aktueller spieler - daten speichern
                    wurfstatistik(spieler3, true);
                    //liste aktualisieren
                    listenName1.setText(spieler2.spielerName);
                    listenPunkte1.setText(spieler2.score + "  Ø: " + spieler2.durchschnitt);
                    listenName2.setText(spieler3.spielerName);
                    listenPunkte2.setText(spieler3.score + "  Ø: " + spieler3.durchschnitt);
                    //nächsten spieler auf aktuelle-anzeige setzen
                    name.setText(spieler1.spielerName);
                    score.setText(String.valueOf(spieler1.score));
                    pfeile.setText(String.valueOf(spieler1.geworfenePfeile));
                    durchschnitt.setText(Float.toString(spieler1.durchschnitt));
                    suddenleft.setText(String.valueOf(Integer.parseInt(suddenleft.getText().toString())-1));
                }
                break;
            }
            case 4: {
                if (!(listenvorschlag2.getText().equals(""))) {
                    listenvorschlag1.setText(listenvorschlag2.getText());
                    listenvorschlag1.setVisibility(View.VISIBLE);
                } else {
                    listenvorschlag1.setText("");
                    listenvorschlag1.setVisibility(View.GONE);
                }
                if (!(listenvorschlag3.getText().equals(""))) {
                    listenvorschlag2.setText(listenvorschlag3.getText());
                    listenvorschlag2.setVisibility(View.VISIBLE);
                } else {
                    listenvorschlag2.setText("");
                    listenvorschlag2.setVisibility(View.GONE);
                }

                vorschlagsetzenliste(Integer.parseInt(score.getText().toString()), listenvorschlag3);


                if (rundenname.equals(spieler1.spielerName)) {
                    //aktueller spieler - daten speichern
                    wurfstatistik(spieler1, true);
                    //liste aktualisieren
                    listenName1.setText(spieler3.spielerName);
                    listenPunkte1.setText(spieler3.score + "  Ø: " + spieler3.durchschnitt);
                    listenName2.setText(spieler4.spielerName);
                    listenPunkte2.setText(spieler4.score + "  Ø: " + spieler4.durchschnitt);
                    listenName3.setText(spieler1.spielerName);
                    listenPunkte3.setText(spieler1.score + "  Ø: " + spieler1.durchschnitt);
                    //nächsten spieler auf aktuelle-anzeige setzen
                    name.setText(spieler2.spielerName);
                    score.setText(String.valueOf(spieler2.score));
                    pfeile.setText(String.valueOf(spieler2.geworfenePfeile));
                    durchschnitt.setText(Float.toString(spieler2.durchschnitt));
                } else if (rundenname.equals(spieler2.spielerName)) {
                    //aktueller spieler - daten speichern
                    wurfstatistik(spieler2, true);
                    //liste aktualisieren
                    listenName1.setText(spieler4.spielerName);
                    listenPunkte1.setText(spieler4.score + "  Ø: " + spieler4.durchschnitt);
                    listenName2.setText(spieler1.spielerName);
                    listenPunkte2.setText(spieler1.score + "  Ø: " + spieler1.durchschnitt);
                    listenName3.setText(spieler2.spielerName);
                    listenPunkte3.setText(spieler2.score + "  Ø: " + spieler2.durchschnitt);
                    //nächsten spieler auf aktuelle-anzeige setzen
                    name.setText(spieler3.spielerName);
                    score.setText(String.valueOf(spieler3.score));
                    pfeile.setText(String.valueOf(spieler3.geworfenePfeile));
                    durchschnitt.setText(Float.toString(spieler3.durchschnitt));
                } else if (rundenname.equals(spieler3.spielerName)) {
                    //aktueller spieler - daten speichern
                    wurfstatistik(spieler3, true);
                    //liste aktualisieren
                    listenName1.setText(spieler1.spielerName);
                    listenPunkte1.setText(spieler1.score + "  Ø: " + spieler1.durchschnitt);
                    listenName2.setText(spieler2.spielerName);
                    listenPunkte2.setText(spieler2.score + "  Ø: " + spieler2.durchschnitt);
                    listenName3.setText(spieler3.spielerName);
                    listenPunkte3.setText(spieler3.score + "  Ø: " + spieler3.durchschnitt);
                    //nächsten spieler auf aktuelle-anzeige setzen
                    name.setText(spieler4.spielerName);
                    score.setText(String.valueOf(spieler4.score));
                    pfeile.setText(String.valueOf(spieler4.geworfenePfeile));
                    durchschnitt.setText(Float.toString(spieler4.durchschnitt));
                } else if (rundenname.equals(spieler4.spielerName)) {
                    //aktueller spieler - daten speichern
                    wurfstatistik(spieler4, true);
                    //liste aktualisieren
                    listenName1.setText(spieler2.spielerName);
                    listenPunkte1.setText(spieler2.score + "  Ø: " + spieler2.durchschnitt);
                    listenName2.setText(spieler3.spielerName);
                    listenPunkte2.setText(spieler3.score + "  Ø: " + spieler3.durchschnitt);
                    listenName3.setText(spieler4.spielerName);
                    listenPunkte3.setText(spieler4.score + "  Ø: " + spieler4.durchschnitt);
                    //nächsten spieler auf aktuelle-anzeige setzen
                    name.setText(spieler1.spielerName);
                    score.setText(String.valueOf(spieler1.score));
                    pfeile.setText(String.valueOf(spieler1.geworfenePfeile));
                    durchschnitt.setText(Float.toString(spieler1.durchschnitt));
                    suddenleft.setText(String.valueOf(Integer.parseInt(suddenleft.getText().toString())-1));
                }
                break;
            }
            case 5:
            {
                if (!(listenvorschlag2.getText().equals(""))) {
                    listenvorschlag1.setText(listenvorschlag2.getText());
                    listenvorschlag1.setVisibility(View.VISIBLE);
                } else {
                    listenvorschlag1.setText("");
                    listenvorschlag1.setVisibility(View.GONE);
                }
                if (!(listenvorschlag3.getText().equals(""))) {
                    listenvorschlag2.setText(listenvorschlag3.getText());
                    listenvorschlag2.setVisibility(View.VISIBLE);
                } else {
                    listenvorschlag2.setText("");
                    listenvorschlag2.setVisibility(View.GONE);
                }
                if (!(listenvorschlag4.getText().equals(""))) {
                    listenvorschlag3.setText(listenvorschlag4.getText());
                    listenvorschlag3.setVisibility(View.VISIBLE);
                } else {
                    listenvorschlag3.setText("");
                    listenvorschlag3.setVisibility(View.GONE);
                }

                vorschlagsetzenliste(Integer.parseInt(score.getText().toString()), listenvorschlag4);

                if (rundenname.equals(spieler1.spielerName)) {
                    //aktueller spieler - daten speichern
                    wurfstatistik(spieler1, true);
                    //liste aktualisieren
                    listenName1.setText(spieler3.spielerName);
                    listenPunkte1.setText(spieler3.score + "  Ø: " + spieler3.durchschnitt);
                    listenName2.setText(spieler4.spielerName);
                    listenPunkte2.setText(spieler4.score + "  Ø: " + spieler4.durchschnitt);
                    listenName3.setText(spieler5.spielerName);
                    listenPunkte3.setText(spieler5.score + "  Ø: " + spieler5.durchschnitt);
                    listenName4.setText(spieler1.spielerName);
                    listenPunkte4.setText(spieler1.score + "  Ø: " + spieler1.durchschnitt);
                    //nächsten spieler auf aktuelle-anzeige setzen
                    name.setText(spieler2.spielerName);
                    score.setText(String.valueOf(spieler2.score));
                    pfeile.setText(String.valueOf(spieler2.geworfenePfeile));
                    durchschnitt.setText(Float.toString(spieler2.durchschnitt));
                } else if (rundenname.equals(spieler2.spielerName)) {
                    //aktueller spieler - daten speichern
                    wurfstatistik(spieler2, true);
                    //liste aktualisieren
                    listenName1.setText(spieler4.spielerName);
                    listenPunkte1.setText(spieler4.score + "  Ø: " + spieler4.durchschnitt);
                    listenName2.setText(spieler5.spielerName);
                    listenPunkte2.setText(spieler5.score + "  Ø: " + spieler5.durchschnitt);
                    listenName3.setText(spieler1.spielerName);
                    listenPunkte3.setText(spieler1.score + "  Ø: " + spieler1.durchschnitt);
                    listenName4.setText(spieler2.spielerName);
                    listenPunkte4.setText(spieler2.score + "  Ø: " + spieler2.durchschnitt);
                    //nächsten spieler auf aktuelle-anzeige setzen
                    name.setText(spieler3.spielerName);
                    score.setText(String.valueOf(spieler3.score));
                    pfeile.setText(String.valueOf(spieler3.geworfenePfeile));
                    durchschnitt.setText(Float.toString(spieler3.durchschnitt));
                } else if (rundenname.equals(spieler3.spielerName)) {
                    //aktueller spieler - daten speichern
                    wurfstatistik(spieler3, true);
                    //liste aktualisieren
                    listenName1.setText(spieler5.spielerName);
                    listenPunkte1.setText(spieler5.score + "  Ø: " + spieler5.durchschnitt);
                    listenName2.setText(spieler1.spielerName);
                    listenPunkte2.setText(spieler1.score + "  Ø: " + spieler1.durchschnitt);
                    listenName3.setText(spieler2.spielerName);
                    listenPunkte3.setText(spieler2.score + "  Ø: " + spieler2.durchschnitt);
                    listenName4.setText(spieler3.spielerName);
                    listenPunkte4.setText(spieler3.score + "  Ø: " + spieler3.durchschnitt);
                    //nächsten spieler auf aktuelle-anzeige setzen
                    name.setText(spieler4.spielerName);
                    score.setText(String.valueOf(spieler4.score));
                    pfeile.setText(String.valueOf(spieler4.geworfenePfeile));
                    durchschnitt.setText(Float.toString(spieler4.durchschnitt));
                } else if (rundenname.equals(spieler4.spielerName)) {
                    //aktueller spieler - daten speichern
                    wurfstatistik(spieler4, true);
                    //liste aktualisieren
                    listenName1.setText(spieler1.spielerName);
                    listenPunkte1.setText(spieler1.score + "  Ø: " + spieler1.durchschnitt);
                    listenName2.setText(spieler2.spielerName);
                    listenPunkte2.setText(spieler2.score + "  Ø: " + spieler2.durchschnitt);
                    listenName3.setText(spieler3.spielerName);
                    listenPunkte3.setText(spieler3.score + "  Ø: " + spieler3.durchschnitt);
                    listenName4.setText(spieler4.spielerName);
                    listenPunkte4.setText(spieler4.score + "  Ø: " + spieler4.durchschnitt);
                    //nächsten spieler auf aktuelle-anzeige setzen
                    name.setText(spieler5.spielerName);
                    score.setText(String.valueOf(spieler5.score));
                    pfeile.setText(String.valueOf(spieler5.geworfenePfeile));
                    durchschnitt.setText(Float.toString(spieler5.durchschnitt));
                } else if (rundenname.equals(spieler5.spielerName)) {
                    //aktueller spieler - daten speichern
                    wurfstatistik(spieler5, true);
                    //liste aktualisieren
                    listenName1.setText(spieler2.spielerName);
                    listenPunkte1.setText(spieler2.score + "  Ø: " + spieler2.durchschnitt);
                    listenName2.setText(spieler3.spielerName);
                    listenPunkte2.setText(spieler3.score + "  Ø: " + spieler3.durchschnitt);
                    listenName3.setText(spieler4.spielerName);
                    listenPunkte3.setText(spieler4.score + "  Ø: " + spieler4.durchschnitt);
                    listenName4.setText(spieler5.spielerName);
                    listenPunkte4.setText(spieler5.score + "  Ø: " + spieler5.durchschnitt);
                    //nächsten spieler auf aktuelle-anzeige setzen
                    name.setText(spieler1.spielerName);
                    score.setText(String.valueOf(spieler1.score));
                    pfeile.setText(String.valueOf(spieler1.geworfenePfeile));
                    durchschnitt.setText(Float.toString(spieler1.durchschnitt));
                    suddenleft.setText(String.valueOf(Integer.parseInt(suddenleft.getText().toString())-1));
                }
                break;
            }
            case 6:
            {
                if (!(listenvorschlag2.getText().equals(""))) {
                    listenvorschlag1.setText(listenvorschlag2.getText());
                    listenvorschlag1.setVisibility(View.VISIBLE);
                } else {
                    listenvorschlag1.setText("");
                    listenvorschlag1.setVisibility(View.GONE);
                }
                if (!(listenvorschlag3.getText().equals(""))) {
                    listenvorschlag2.setText(listenvorschlag3.getText());
                    listenvorschlag2.setVisibility(View.VISIBLE);
                } else {
                    listenvorschlag2.setText("");
                    listenvorschlag2.setVisibility(View.GONE);
                }
                if (!(listenvorschlag4.getText().equals(""))) {
                    listenvorschlag3.setText(listenvorschlag4.getText());
                    listenvorschlag3.setVisibility(View.VISIBLE);
                } else {
                    listenvorschlag3.setText("");
                    listenvorschlag3.setVisibility(View.GONE);
                }
                if (!(listenvorschlag5.getText().equals(""))) {
                    listenvorschlag4.setText(listenvorschlag5.getText());
                    listenvorschlag4.setVisibility(View.VISIBLE);
                } else {
                    listenvorschlag4.setText("");
                    listenvorschlag4.setVisibility(View.GONE);
                }

                vorschlagsetzenliste(Integer.parseInt(score.getText().toString()), listenvorschlag5);

                if (rundenname.equals(spieler1.spielerName)) {
                    //aktueller spieler - daten speichern
                    wurfstatistik(spieler1, true);
                    //liste aktualisieren
                    listenName1.setText(spieler3.spielerName);
                    listenPunkte1.setText(spieler3.score + "  Ø: " + spieler3.durchschnitt);
                    listenName2.setText(spieler4.spielerName);
                    listenPunkte2.setText(spieler4.score + "  Ø: " + spieler4.durchschnitt);
                    listenName3.setText(spieler5.spielerName);
                    listenPunkte3.setText(spieler5.score + "  Ø: " + spieler5.durchschnitt);
                    listenName4.setText(spieler6.spielerName);
                    listenPunkte4.setText(spieler6.score + "  Ø: " + spieler6.durchschnitt);
                    listenName5.setText(spieler1.spielerName);
                    listenPunkte5.setText(spieler1.score + "  Ø: " + spieler1.durchschnitt);
                    //nächsten spieler auf aktuelle-anzeige setzen
                    name.setText(spieler2.spielerName);
                    score.setText(String.valueOf(spieler2.score));
                    pfeile.setText(String.valueOf(spieler2.geworfenePfeile));
                    durchschnitt.setText(Float.toString(spieler2.durchschnitt));
                } else if (rundenname.equals(spieler2.spielerName)) {
                    //aktueller spieler - daten speichern
                    wurfstatistik(spieler2, true);
                    //liste aktualisieren
                    listenName1.setText(spieler4.spielerName);
                    listenPunkte1.setText(spieler4.score + "  Ø: " + spieler4.durchschnitt);
                    listenName2.setText(spieler5.spielerName);
                    listenPunkte2.setText(spieler5.score + "  Ø: " + spieler5.durchschnitt);
                    listenName3.setText(spieler6.spielerName);
                    listenPunkte3.setText(spieler6.score + "  Ø: " + spieler6.durchschnitt);
                    listenName4.setText(spieler1.spielerName);
                    listenPunkte4.setText(spieler1.score + "  Ø: " + spieler1.durchschnitt);
                    listenName5.setText(spieler2.spielerName);
                    listenPunkte5.setText(spieler2.score + "  Ø: " + spieler2.durchschnitt);
                    //nächsten spieler auf aktuelle-anzeige setzen
                    name.setText(spieler3.spielerName);
                    score.setText(String.valueOf(spieler3.score));
                    pfeile.setText(String.valueOf(spieler3.geworfenePfeile));
                    durchschnitt.setText(Float.toString(spieler3.durchschnitt));
                } else if (rundenname.equals(spieler3.spielerName)) {
                    //aktueller spieler - daten speichern
                    wurfstatistik(spieler3, true);
                    //liste aktualisieren
                    listenName1.setText(spieler5.spielerName);
                    listenPunkte1.setText(spieler5.score + "  Ø: " + spieler5.durchschnitt);
                    listenName2.setText(spieler6.spielerName);
                    listenPunkte2.setText(spieler6.score + "  Ø: " + spieler6.durchschnitt);
                    listenName3.setText(spieler1.spielerName);
                    listenPunkte3.setText(spieler1.score + "  Ø: " + spieler1.durchschnitt);
                    listenName4.setText(spieler2.spielerName);
                    listenPunkte4.setText(spieler2.score + "  Ø: " + spieler2.durchschnitt);
                    listenName5.setText(spieler3.spielerName);
                    listenPunkte5.setText(spieler3.score + "  Ø: " + spieler3.durchschnitt);
                    //nächsten spieler auf aktuelle-anzeige setzen
                    name.setText(spieler4.spielerName);
                    score.setText(String.valueOf(spieler4.score));
                    pfeile.setText(String.valueOf(spieler4.geworfenePfeile));
                    durchschnitt.setText(Float.toString(spieler4.durchschnitt));
                } else if (rundenname.equals(spieler4.spielerName)) {
                    //aktueller spieler - daten speichern
                    wurfstatistik(spieler4, true);
                    //liste aktualisieren
                    listenName1.setText(spieler6.spielerName);
                    listenPunkte1.setText(spieler6.score + "  Ø: " + spieler6.durchschnitt);
                    listenName2.setText(spieler1.spielerName);
                    listenPunkte2.setText(spieler1.score + "  Ø: " + spieler1.durchschnitt);
                    listenName3.setText(spieler2.spielerName);
                    listenPunkte3.setText(spieler2.score + "  Ø: " + spieler2.durchschnitt);
                    listenName4.setText(spieler3.spielerName);
                    listenPunkte4.setText(spieler3.score + "  Ø: " + spieler3.durchschnitt);
                    listenName5.setText(spieler4.spielerName);
                    listenPunkte5.setText(spieler4.score + "  Ø: " + spieler4.durchschnitt);
                    //nächsten spieler auf aktuelle-anzeige setzen
                    name.setText(spieler5.spielerName);
                    score.setText(String.valueOf(spieler5.score));
                    pfeile.setText(String.valueOf(spieler5.geworfenePfeile));
                    durchschnitt.setText(Float.toString(spieler5.durchschnitt));
                } else if (rundenname.equals(spieler5.spielerName)) {
                    //aktueller spieler - daten speichern
                    wurfstatistik(spieler5, true);
                    //liste aktualisieren
                    listenName1.setText(spieler1.spielerName);
                    listenPunkte1.setText(spieler1.score + "  Ø: " + spieler1.durchschnitt);
                    listenName2.setText(spieler2.spielerName);
                    listenPunkte2.setText(spieler2.score + "  Ø: " + spieler2.durchschnitt);
                    listenName3.setText(spieler3.spielerName);
                    listenPunkte3.setText(spieler3.score + "  Ø: " + spieler3.durchschnitt);
                    listenName4.setText(spieler4.spielerName);
                    listenPunkte4.setText(spieler4.score + "  Ø: " + spieler4.durchschnitt);
                    listenName5.setText(spieler5.spielerName);
                    listenPunkte5.setText(spieler5.score + "  Ø: " + spieler5.durchschnitt);
                    //nächsten spieler auf aktuelle-anzeige setzen
                    name.setText(spieler6.spielerName);
                    score.setText(String.valueOf(spieler6.score));
                    pfeile.setText(String.valueOf(spieler6.geworfenePfeile));
                    durchschnitt.setText(Float.toString(spieler6.durchschnitt));
                }
                else if (rundenname.equals(spieler6.spielerName)) {
                    //aktueller spieler - daten speichern
                    wurfstatistik(spieler6, true);
                    //liste aktualisieren
                    listenName1.setText(spieler2.spielerName);
                    listenPunkte1.setText(spieler2.score + "  Ø: " + spieler2.durchschnitt);
                    listenName2.setText(spieler3.spielerName);
                    listenPunkte2.setText(spieler3.score + "  Ø: " + spieler3.durchschnitt);
                    listenName3.setText(spieler4.spielerName);
                    listenPunkte3.setText(spieler4.score + "  Ø: " + spieler4.durchschnitt);
                    listenName4.setText(spieler5.spielerName);
                    listenPunkte4.setText(spieler5.score + "  Ø: " + spieler5.durchschnitt);
                    listenName5.setText(spieler6.spielerName);
                    listenPunkte5.setText(spieler6.score + "  Ø: " + spieler6.durchschnitt);
                    //nächsten spieler auf aktuelle-anzeige setzen
                    name.setText(spieler1.spielerName);
                    score.setText(String.valueOf(spieler1.score));
                    pfeile.setText(String.valueOf(spieler1.geworfenePfeile));
                    durchschnitt.setText(Float.toString(spieler1.durchschnitt));
                    suddenleft.setText(String.valueOf(Integer.parseInt(suddenleft.getText().toString())-1));
                }
                break;
            }
            case 7:
            {
                if (!(listenvorschlag2.getText().equals(""))) {
                    listenvorschlag1.setText(listenvorschlag2.getText());
                    listenvorschlag1.setVisibility(View.VISIBLE);
                } else {
                    listenvorschlag1.setText("");
                    listenvorschlag1.setVisibility(View.GONE);
                }
                if (!(listenvorschlag3.getText().equals(""))) {
                    listenvorschlag2.setText(listenvorschlag3.getText());
                    listenvorschlag2.setVisibility(View.VISIBLE);
                } else {
                    listenvorschlag2.setText("");
                    listenvorschlag2.setVisibility(View.GONE);
                }
                if (!(listenvorschlag4.getText().equals(""))) {
                    listenvorschlag3.setText(listenvorschlag4.getText());
                    listenvorschlag3.setVisibility(View.VISIBLE);
                } else {
                    listenvorschlag3.setText("");
                    listenvorschlag3.setVisibility(View.GONE);
                }
                if (!(listenvorschlag5.getText().equals(""))) {
                    listenvorschlag4.setText(listenvorschlag5.getText());
                    listenvorschlag4.setVisibility(View.VISIBLE);
                } else {
                    listenvorschlag4.setText("");
                    listenvorschlag4.setVisibility(View.GONE);
                }
                if (!(listenvorschlag6.getText().equals(""))) {
                    listenvorschlag5.setText(listenvorschlag6.getText());
                    listenvorschlag5.setVisibility(View.VISIBLE);
                } else {
                    listenvorschlag5.setText("");
                    listenvorschlag5.setVisibility(View.GONE);
                }

                vorschlagsetzenliste(Integer.parseInt(score.getText().toString()), listenvorschlag6);

                if (rundenname.equals(spieler1.spielerName)) {
                    //aktueller spieler - daten speichern
                    wurfstatistik(spieler1, true);
                    //liste aktualisieren
                    listenName1.setText(spieler3.spielerName);
                    listenPunkte1.setText(spieler3.score + "  Ø: " + spieler3.durchschnitt);
                    listenName2.setText(spieler4.spielerName);
                    listenPunkte2.setText(spieler4.score + "  Ø: " + spieler4.durchschnitt);
                    listenName3.setText(spieler5.spielerName);
                    listenPunkte3.setText(spieler5.score + "  Ø: " + spieler5.durchschnitt);
                    listenName4.setText(spieler6.spielerName);
                    listenPunkte4.setText(spieler6.score + "  Ø: " + spieler6.durchschnitt);
                    listenName5.setText(spieler7.spielerName);
                    listenPunkte5.setText(spieler7.score + "  Ø: " + spieler7.durchschnitt);
                    listenName6.setText(spieler1.spielerName);
                    listenPunkte6.setText(spieler1.score + "  Ø: " + spieler1.durchschnitt);
                    //nächsten spieler auf aktuelle-anzeige setzen
                    name.setText(spieler2.spielerName);
                    score.setText(String.valueOf(spieler2.score));
                    pfeile.setText(String.valueOf(spieler2.geworfenePfeile));
                    durchschnitt.setText(Float.toString(spieler2.durchschnitt));
                } else if (rundenname.equals(spieler2.spielerName)) {
                    //aktueller spieler - daten speichern
                    wurfstatistik(spieler2, true);
                    //liste aktualisieren
                    listenName1.setText(spieler4.spielerName);
                    listenPunkte1.setText(spieler4.score + "  Ø: " + spieler4.durchschnitt);
                    listenName2.setText(spieler5.spielerName);
                    listenPunkte2.setText(spieler5.score + "  Ø: " + spieler5.durchschnitt);
                    listenName3.setText(spieler6.spielerName);
                    listenPunkte3.setText(spieler6.score + "  Ø: " + spieler6.durchschnitt);
                    listenName4.setText(spieler7.spielerName);
                    listenPunkte4.setText(spieler7.score + "  Ø: " + spieler7.durchschnitt);
                    listenName5.setText(spieler1.spielerName);
                    listenPunkte5.setText(spieler1.score + "  Ø: " + spieler1.durchschnitt);
                    listenName6.setText(spieler2.spielerName);
                    listenPunkte6.setText(spieler2.score + "  Ø: " + spieler2.durchschnitt);
                    //nächsten spieler auf aktuelle-anzeige setzen
                    name.setText(spieler3.spielerName);
                    score.setText(String.valueOf(spieler3.score));
                    pfeile.setText(String.valueOf(spieler3.geworfenePfeile));
                    durchschnitt.setText(Float.toString(spieler3.durchschnitt));
                } else if (rundenname.equals(spieler3.spielerName)) {
                    //aktueller spieler - daten speichern
                    wurfstatistik(spieler3, true);
                    //liste aktualisieren
                    listenName1.setText(spieler5.spielerName);
                    listenPunkte1.setText(spieler5.score + "  Ø: " + spieler5.durchschnitt);
                    listenName2.setText(spieler6.spielerName);
                    listenPunkte2.setText(spieler6.score + "  Ø: " + spieler6.durchschnitt);
                    listenName3.setText(spieler7.spielerName);
                    listenPunkte3.setText(spieler7.score + "  Ø: " + spieler7.durchschnitt);
                    listenName4.setText(spieler1.spielerName);
                    listenPunkte4.setText(spieler1.score + "  Ø: " + spieler1.durchschnitt);
                    listenName5.setText(spieler2.spielerName);
                    listenPunkte5.setText(spieler2.score + "  Ø: " + spieler2.durchschnitt);
                    listenName6.setText(spieler3.spielerName);
                    listenPunkte6.setText(spieler3.score + "  Ø: " + spieler3.durchschnitt);
                    //nächsten spieler auf aktuelle-anzeige setzen
                    name.setText(spieler4.spielerName);
                    score.setText(String.valueOf(spieler4.score));
                    pfeile.setText(String.valueOf(spieler4.geworfenePfeile));
                    durchschnitt.setText(Float.toString(spieler4.durchschnitt));
                } else if (rundenname.equals(spieler4.spielerName)) {
                    //aktueller spieler - daten speichern
                    wurfstatistik(spieler4, true);
                    //liste aktualisieren
                    listenName1.setText(spieler6.spielerName);
                    listenPunkte1.setText(spieler6.score + "  Ø: " + spieler6.durchschnitt);
                    listenName2.setText(spieler7.spielerName);
                    listenPunkte2.setText(spieler7.score + "  Ø: " + spieler7.durchschnitt);
                    listenName3.setText(spieler1.spielerName);
                    listenPunkte3.setText(spieler1.score + "  Ø: " + spieler1.durchschnitt);
                    listenName4.setText(spieler2.spielerName);
                    listenPunkte4.setText(spieler2.score + "  Ø: " + spieler2.durchschnitt);
                    listenName5.setText(spieler3.spielerName);
                    listenPunkte5.setText(spieler3.score + "  Ø: " + spieler3.durchschnitt);
                    listenName6.setText(spieler4.spielerName);
                    listenPunkte6.setText(spieler4.score + "  Ø: " + spieler4.durchschnitt);
                    //nächsten spieler auf aktuelle-anzeige setzen
                    name.setText(spieler5.spielerName);
                    score.setText(String.valueOf(spieler5.score));
                    pfeile.setText(String.valueOf(spieler5.geworfenePfeile));
                    durchschnitt.setText(Float.toString(spieler5.durchschnitt));
                } else if (rundenname.equals(spieler5.spielerName)) {
                    //aktueller spieler - daten speichern
                    wurfstatistik(spieler5, true);
                    //liste aktualisieren
                    listenName1.setText(spieler7.spielerName);
                    listenPunkte1.setText(spieler7.score + "  Ø: " + spieler7.durchschnitt);
                    listenName2.setText(spieler1.spielerName);
                    listenPunkte2.setText(spieler1.score + "  Ø: " + spieler1.durchschnitt);
                    listenName3.setText(spieler2.spielerName);
                    listenPunkte3.setText(spieler2.score + "  Ø: " + spieler2.durchschnitt);
                    listenName4.setText(spieler3.spielerName);
                    listenPunkte4.setText(spieler3.score + "  Ø: " + spieler3.durchschnitt);
                    listenName5.setText(spieler4.spielerName);
                    listenPunkte5.setText(spieler4.score + "  Ø: " + spieler4.durchschnitt);
                    listenName6.setText(spieler5.spielerName);
                    listenPunkte6.setText(spieler5.score + "  Ø: " + spieler5.durchschnitt);
                    //nächsten spieler auf aktuelle-anzeige setzen
                    name.setText(spieler6.spielerName);
                    score.setText(String.valueOf(spieler6.score));
                    pfeile.setText(String.valueOf(spieler6.geworfenePfeile));
                    durchschnitt.setText(Float.toString(spieler6.durchschnitt));
                }
                else if (rundenname.equals(spieler6.spielerName)) {
                    //aktueller spieler - daten speichern
                    wurfstatistik(spieler6, true);
                    //liste aktualisieren
                    listenName1.setText(spieler1.spielerName);
                    listenPunkte1.setText(spieler1.score + "  Ø: " + spieler1.durchschnitt);
                    listenName2.setText(spieler2.spielerName);
                    listenPunkte2.setText(spieler2.score + "  Ø: " + spieler2.durchschnitt);
                    listenName3.setText(spieler3.spielerName);
                    listenPunkte3.setText(spieler3.score + "  Ø: " + spieler3.durchschnitt);
                    listenName4.setText(spieler4.spielerName);
                    listenPunkte4.setText(spieler4.score + "  Ø: " + spieler4.durchschnitt);
                    listenName5.setText(spieler5.spielerName);
                    listenPunkte5.setText(spieler5.score + "  Ø: " + spieler5.durchschnitt);
                    listenName6.setText(spieler6.spielerName);
                    listenPunkte6.setText(spieler6.score + "  Ø: " + spieler6.durchschnitt);
                    //nächsten spieler auf aktuelle-anzeige setzen
                    name.setText(spieler7.spielerName);
                    score.setText(String.valueOf(spieler7.score));
                    pfeile.setText(String.valueOf(spieler7.geworfenePfeile));
                    durchschnitt.setText(Float.toString(spieler7.durchschnitt));
                }
                else if (rundenname.equals(spieler7.spielerName)) {
                    //aktueller spieler - daten speichern
                    wurfstatistik(spieler7, true);
                    //liste aktualisieren
                    listenName1.setText(spieler2.spielerName);
                    listenPunkte1.setText(spieler2.score + "  Ø: " + spieler2.durchschnitt);
                    listenName2.setText(spieler3.spielerName);
                    listenPunkte2.setText(spieler3.score + "  Ø: " + spieler3.durchschnitt);
                    listenName3.setText(spieler4.spielerName);
                    listenPunkte3.setText(spieler4.score + "  Ø: " + spieler4.durchschnitt);
                    listenName4.setText(spieler5.spielerName);
                    listenPunkte4.setText(spieler5.score + "  Ø: " + spieler5.durchschnitt);
                    listenName5.setText(spieler6.spielerName);
                    listenPunkte5.setText(spieler6.score + "  Ø: " + spieler6.durchschnitt);
                    listenName6.setText(spieler7.spielerName);
                    listenPunkte6.setText(spieler7.score + "  Ø: " + spieler7.durchschnitt);
                    //nächsten spieler auf aktuelle-anzeige setzen
                    name.setText(spieler1.spielerName);
                    score.setText(String.valueOf(spieler1.score));
                    pfeile.setText(String.valueOf(spieler1.geworfenePfeile));
                    durchschnitt.setText(Float.toString(spieler1.durchschnitt));
                    suddenleft.setText(String.valueOf(Integer.parseInt(suddenleft.getText().toString())-1));
                }
                break;
            }
            case 8: {
                if (!(listenvorschlag2.getText().equals(""))) {
                    listenvorschlag1.setText(listenvorschlag2.getText());
                    listenvorschlag1.setVisibility(View.VISIBLE);
                } else {
                    listenvorschlag1.setText("");
                    listenvorschlag1.setVisibility(View.GONE);
                }
                if (!(listenvorschlag3.getText().equals(""))) {
                    listenvorschlag2.setText(listenvorschlag3.getText());
                    listenvorschlag2.setVisibility(View.VISIBLE);
                } else {
                    listenvorschlag2.setText("");
                    listenvorschlag2.setVisibility(View.GONE);
                }
                if (!(listenvorschlag4.getText().equals(""))) {
                    listenvorschlag3.setText(listenvorschlag4.getText());
                    listenvorschlag3.setVisibility(View.VISIBLE);
                } else {
                    listenvorschlag3.setText("");
                    listenvorschlag3.setVisibility(View.GONE);
                }
                if (!(listenvorschlag5.getText().equals(""))) {
                    listenvorschlag4.setText(listenvorschlag5.getText());
                    listenvorschlag4.setVisibility(View.VISIBLE);
                } else {
                    listenvorschlag4.setText("");
                    listenvorschlag4.setVisibility(View.GONE);
                }
                if (!(listenvorschlag6.getText().equals(""))) {
                    listenvorschlag5.setText(listenvorschlag6.getText());
                    listenvorschlag5.setVisibility(View.VISIBLE);
                } else {
                    listenvorschlag5.setText("");
                    listenvorschlag5.setVisibility(View.GONE);
                }
                if (!(listenvorschlag7.getText().equals(""))) {
                    listenvorschlag6.setText(listenvorschlag7.getText());
                    listenvorschlag6.setVisibility(View.VISIBLE);
                } else {
                    listenvorschlag6.setText("");
                    listenvorschlag6.setVisibility(View.GONE);
                }

                vorschlagsetzenliste(Integer.parseInt(score.getText().toString()), listenvorschlag7);

                if (rundenname.equals(spieler1.spielerName)) {
                    //aktueller spieler - daten speichern
                    wurfstatistik(spieler1, true);
                    //liste aktualisieren
                    listenName1.setText(spieler3.spielerName);
                    listenPunkte1.setText(spieler3.score + "  Ø: " + spieler3.durchschnitt);
                    listenName2.setText(spieler4.spielerName);
                    listenPunkte2.setText(spieler4.score + "  Ø: " + spieler4.durchschnitt);
                    listenName3.setText(spieler5.spielerName);
                    listenPunkte3.setText(spieler5.score + "  Ø: " + spieler5.durchschnitt);
                    listenName4.setText(spieler6.spielerName);
                    listenPunkte4.setText(spieler6.score + "  Ø: " + spieler6.durchschnitt);
                    listenName5.setText(spieler7.spielerName);
                    listenPunkte5.setText(spieler7.score + "  Ø: " + spieler7.durchschnitt);
                    listenName6.setText(spieler8.spielerName);
                    listenPunkte6.setText(spieler8.score + "  Ø: " + spieler8.durchschnitt);
                    listenName7.setText(spieler1.spielerName);
                    listenPunkte7.setText(spieler1.score + "  Ø: " + spieler1.durchschnitt);
                    //nächsten spieler auf aktuelle-anzeige setzen
                    name.setText(spieler2.spielerName);
                    score.setText(String.valueOf(spieler2.score));
                    pfeile.setText(String.valueOf(spieler2.geworfenePfeile));
                    durchschnitt.setText(Float.toString(spieler2.durchschnitt));
                } else if (rundenname.equals(spieler2.spielerName)) {
                    //aktueller spieler - daten speichern
                    wurfstatistik(spieler2, true);
                    //liste aktualisieren
                    listenName1.setText(spieler4.spielerName);
                    listenPunkte1.setText(spieler4.score + "  Ø: " + spieler4.durchschnitt);
                    listenName2.setText(spieler5.spielerName);
                    listenPunkte2.setText(spieler5.score + "  Ø: " + spieler5.durchschnitt);
                    listenName3.setText(spieler6.spielerName);
                    listenPunkte3.setText(spieler6.score + "  Ø: " + spieler6.durchschnitt);
                    listenName4.setText(spieler7.spielerName);
                    listenPunkte4.setText(spieler7.score + "  Ø: " + spieler7.durchschnitt);
                    listenName5.setText(spieler8.spielerName);
                    listenPunkte5.setText(spieler8.score + "  Ø: " + spieler8.durchschnitt);
                    listenName6.setText(spieler1.spielerName);
                    listenPunkte6.setText(spieler1.score + "  Ø: " + spieler1.durchschnitt);
                    listenName7.setText(spieler2.spielerName);
                    listenPunkte7.setText(spieler2.score + "  Ø: " + spieler2.durchschnitt);
                    //nächsten spieler auf aktuelle-anzeige setzen
                    name.setText(spieler3.spielerName);
                    score.setText(String.valueOf(spieler3.score));
                    pfeile.setText(String.valueOf(spieler3.geworfenePfeile));
                    durchschnitt.setText(Float.toString(spieler3.durchschnitt));
                } else if (rundenname.equals(spieler3.spielerName)) {
                    //aktueller spieler - daten speichern
                    wurfstatistik(spieler3, true);
                    //liste aktualisieren
                    listenName1.setText(spieler5.spielerName);
                    listenPunkte1.setText(spieler5.score + "  Ø: " + spieler5.durchschnitt);
                    listenName2.setText(spieler6.spielerName);
                    listenPunkte2.setText(spieler6.score + "  Ø: " + spieler6.durchschnitt);
                    listenName3.setText(spieler7.spielerName);
                    listenPunkte3.setText(spieler7.score + "  Ø: " + spieler7.durchschnitt);
                    listenName4.setText(spieler8.spielerName);
                    listenPunkte4.setText(spieler8.score + "  Ø: " + spieler8.durchschnitt);
                    listenName5.setText(spieler1.spielerName);
                    listenPunkte5.setText(spieler1.score + "  Ø: " + spieler1.durchschnitt);
                    listenName6.setText(spieler2.spielerName);
                    listenPunkte6.setText(spieler2.score + "  Ø: " + spieler2.durchschnitt);
                    listenName7.setText(spieler3.spielerName);
                    listenPunkte7.setText(spieler3.score + "  Ø: " + spieler3.durchschnitt);
                    //nächsten spieler auf aktuelle-anzeige setzen
                    name.setText(spieler4.spielerName);
                    score.setText(String.valueOf(spieler4.score));
                    pfeile.setText(String.valueOf(spieler4.geworfenePfeile));
                    durchschnitt.setText(Float.toString(spieler4.durchschnitt));
                } else if (rundenname.equals(spieler4.spielerName)) {
                    //aktueller spieler - daten speichern
                    wurfstatistik(spieler4, true);
                    //liste aktualisieren
                    listenName1.setText(spieler6.spielerName);
                    listenPunkte1.setText(spieler6.score + "  Ø: " + spieler6.durchschnitt);
                    listenName2.setText(spieler7.spielerName);
                    listenPunkte2.setText(spieler7.score + "  Ø: " + spieler7.durchschnitt);
                    listenName3.setText(spieler8.spielerName);
                    listenPunkte3.setText(spieler8.score + "  Ø: " + spieler8.durchschnitt);
                    listenName4.setText(spieler1.spielerName);
                    listenPunkte4.setText(spieler1.score + "  Ø: " + spieler1.durchschnitt);
                    listenName5.setText(spieler2.spielerName);
                    listenPunkte5.setText(spieler2.score + "  Ø: " + spieler2.durchschnitt);
                    listenName6.setText(spieler3.spielerName);
                    listenPunkte6.setText(spieler3.score + "  Ø: " + spieler3.durchschnitt);
                    listenName7.setText(spieler4.spielerName);
                    listenPunkte7.setText(spieler4.score + "  Ø: " + spieler4.durchschnitt);
                    //nächsten spieler auf aktuelle-anzeige setzen
                    name.setText(spieler5.spielerName);
                    score.setText(String.valueOf(spieler5.score));
                    pfeile.setText(String.valueOf(spieler5.geworfenePfeile));
                    durchschnitt.setText(Float.toString(spieler5.durchschnitt));
                } else if (rundenname.equals(spieler5.spielerName)) {
                    //aktueller spieler - daten speichern
                    wurfstatistik(spieler5, true);
                    //liste aktualisieren
                    listenName1.setText(spieler7.spielerName);
                    listenPunkte1.setText(spieler7.score + "  Ø: " + spieler7.durchschnitt);
                    listenName2.setText(spieler8.spielerName);
                    listenPunkte2.setText(spieler8.score + "  Ø: " + spieler8.durchschnitt);
                    listenName3.setText(spieler1.spielerName);
                    listenPunkte3.setText(spieler1.score + "  Ø: " + spieler1.durchschnitt);
                    listenName4.setText(spieler2.spielerName);
                    listenPunkte4.setText(spieler2.score + "  Ø: " + spieler2.durchschnitt);
                    listenName5.setText(spieler3.spielerName);
                    listenPunkte5.setText(spieler3.score + "  Ø: " + spieler3.durchschnitt);
                    listenName6.setText(spieler4.spielerName);
                    listenPunkte6.setText(spieler4.score + "  Ø: " + spieler4.durchschnitt);
                    listenName7.setText(spieler5.spielerName);
                    listenPunkte7.setText(spieler5.score + "  Ø: " + spieler5.durchschnitt);
                    //nächsten spieler auf aktuelle-anzeige setzen
                    name.setText(spieler6.spielerName);
                    score.setText(String.valueOf(spieler6.score));
                    pfeile.setText(String.valueOf(spieler6.geworfenePfeile));
                    durchschnitt.setText(Float.toString(spieler6.durchschnitt));
                } else if (rundenname.equals(spieler6.spielerName)) {
                    //aktueller spieler - daten speichern
                    wurfstatistik(spieler6, true);
                    //liste aktualisieren
                    listenName1.setText(spieler8.spielerName);
                    listenPunkte1.setText(spieler8.score + "  Ø: " + spieler8.durchschnitt);
                    listenName2.setText(spieler1.spielerName);
                    listenPunkte2.setText(spieler1.score + "  Ø: " + spieler1.durchschnitt);
                    listenName3.setText(spieler2.spielerName);
                    listenPunkte3.setText(spieler2.score + "  Ø: " + spieler2.durchschnitt);
                    listenName4.setText(spieler3.spielerName);
                    listenPunkte4.setText(spieler3.score + "  Ø: " + spieler3.durchschnitt);
                    listenName5.setText(spieler4.spielerName);
                    listenPunkte5.setText(spieler4.score + "  Ø: " + spieler4.durchschnitt);
                    listenName6.setText(spieler5.spielerName);
                    listenPunkte6.setText(spieler5.score + "  Ø: " + spieler5.durchschnitt);
                    listenName7.setText(spieler6.spielerName);
                    listenPunkte7.setText(spieler6.score + "  Ø: " + spieler6.durchschnitt);
                    //nächsten spieler auf aktuelle-anzeige setzen
                    name.setText(spieler7.spielerName);
                    score.setText(String.valueOf(spieler7.score));
                    pfeile.setText(String.valueOf(spieler7.geworfenePfeile));
                    durchschnitt.setText(Float.toString(spieler7.durchschnitt));
                } else if (rundenname.equals(spieler7.spielerName)) {
                    //aktueller spieler - daten speichern
                    wurfstatistik(spieler7, true);
                    //liste aktualisieren
                    listenName1.setText(spieler1.spielerName);
                    listenPunkte1.setText(spieler1.score + "  Ø: " + spieler1.durchschnitt);
                    listenName2.setText(spieler2.spielerName);
                    listenPunkte2.setText(spieler2.score + "  Ø: " + spieler2.durchschnitt);
                    listenName3.setText(spieler3.spielerName);
                    listenPunkte3.setText(spieler3.score + "  Ø: " + spieler3.durchschnitt);
                    listenName4.setText(spieler4.spielerName);
                    listenPunkte4.setText(spieler4.score + "  Ø: " + spieler4.durchschnitt);
                    listenName5.setText(spieler5.spielerName);
                    listenPunkte5.setText(spieler5.score + "  Ø: " + spieler5.durchschnitt);
                    listenName6.setText(spieler6.spielerName);
                    listenPunkte6.setText(spieler6.score + "  Ø: " + spieler6.durchschnitt);
                    listenName7.setText(spieler7.spielerName);
                    listenPunkte7.setText(spieler7.score + "  Ø: " + spieler7.durchschnitt);
                    //nächsten spieler auf aktuelle-anzeige setzen
                    name.setText(spieler8.spielerName);
                    score.setText(String.valueOf(spieler8.score));
                    pfeile.setText(String.valueOf(spieler8.geworfenePfeile));
                    durchschnitt.setText(Float.toString(spieler8.durchschnitt));
                } else if (rundenname.equals(spieler8.spielerName)) {
                    //aktueller spieler - daten speichern
                    wurfstatistik(spieler8, true);
                    //liste aktualisieren
                    listenName1.setText(spieler2.spielerName);
                    listenPunkte1.setText(spieler2.score + "  Ø: " + spieler2.durchschnitt);
                    listenName2.setText(spieler3.spielerName);
                    listenPunkte2.setText(spieler3.score + "  Ø: " + spieler3.durchschnitt);
                    listenName3.setText(spieler4.spielerName);
                    listenPunkte3.setText(spieler4.score + "  Ø: " + spieler4.durchschnitt);
                    listenName4.setText(spieler5.spielerName);
                    listenPunkte4.setText(spieler5.score + "  Ø: " + spieler5.durchschnitt);
                    listenName5.setText(spieler6.spielerName);
                    listenPunkte5.setText(spieler6.score + "  Ø: " + spieler6.durchschnitt);
                    listenName6.setText(spieler7.spielerName);
                    listenPunkte6.setText(spieler7.score + "  Ø: " + spieler7.durchschnitt);
                    listenName7.setText(spieler8.spielerName);
                    listenPunkte7.setText(spieler8.score + "  Ø: " + spieler8.durchschnitt);
                    //nächsten spieler auf aktuelle-anzeige setzen
                    name.setText(spieler1.spielerName);
                    score.setText(String.valueOf(spieler1.score));
                    pfeile.setText(String.valueOf(spieler1.geworfenePfeile));
                    durchschnitt.setText(Float.toString(spieler1.durchschnitt));
                    suddenleft.setText(String.valueOf(Integer.parseInt(suddenleft.getText().toString())-1));
                }
                break;
            }
        }

        //vorschlag "berechnen" und geworfene Pfeilwerte zurücksetzen

        dummy2 = Integer.parseInt(score.getText().toString());
        vorschlagsetzen(dummy2);

    }

    private boolean dartthrown() {
        switch (spieleranzahl) {
            case 2:
                if (spieler1.geworfenePfeile != 0) return true;
                if (spieler2.geworfenePfeile != 0) return true;
                break;
            default:
                if (spieler1.geworfenePfeile != 0) return true;
                if (spieler2.geworfenePfeile != 0) return true;
                if (spieler3.geworfenePfeile != 0) return true;
                if (spieler4.geworfenePfeile != 0) return true;
                if (spieler5.geworfenePfeile != 0) return true;
                if (spieler6.geworfenePfeile != 0) return true;
                if (spieler7.geworfenePfeile != 0) return true;
                if (spieler8.geworfenePfeile != 0) return true;
        }
        return false;
    }

    private void lastplayer()    // setzt die anzeigen so, dass der letzte spieler wieder dran ist
    {
        rundenname = name.getText().toString();
        //nur ausführen wenn der letzte spieler schon wenigstens einmal geworfen hat.(pfeileanzahl)!!!
        if (suddendeath && rundenname.equals(spieler1.spielerName) && dartthrown()) {
            TextView suddenleft = findViewById(R.id.suddendeathroundsleft);
            suddenleft.setText(String.valueOf(Integer.parseInt(suddenleft.getText().toString()) + 1));
        }
        switch (spieleranzahl) {
            case 1: { // nothing to do, es gibt keinen anderen spieler
                wurfstatistik(spieler1, false);
                break;
            }
            case 2: {
                // anzeigewerte laden
                if (rundenname.equals(spieler1.spielerName)) {
                    if (spieler2.geworfenePfeile == 0) return;
                    //liste aktualisieren
                    listenName1.setText(spieler1.spielerName);
                    listenPunkte1.setText(spieler1.score + "  Ø: " + spieler1.durchschnitt);
                    dummy3 = spieler1.score;
                    //aktueller spieler aktualisieren
                    name.setText(spieler2.spielerName);
                    score.setText(String.valueOf(spieler2.score));
                    pfeile.setText(String.valueOf(spieler2.geworfenePfeile));
                    durchschnitt.setText(Float.toString(spieler2.durchschnitt));
                    wurfstatistik(spieler2, false);
                } else if (rundenname.equals(spieler2.spielerName)) {
                    if (spieler1.geworfenePfeile == 0) return;
                    //liste aktualisieren
                    listenName1.setText(spieler2.spielerName);
                    listenPunkte1.setText(spieler2.score + "  Ø: " + spieler2.durchschnitt);
                    dummy3 = spieler2.score;
                    //aktueller spieler aktualisieren
                    name.setText(spieler1.spielerName);
                    score.setText(String.valueOf(spieler1.score));
                    pfeile.setText(String.valueOf(spieler1.geworfenePfeile));
                    durchschnitt.setText(Float.toString(spieler1.durchschnitt));
                    wurfstatistik(spieler1, false);
                }
                vorschlagsetzenliste(dummy3, listenvorschlag1);
                break;
            }
            case 3: {
                if (!(listenvorschlag1.getText().equals(""))) {
                    listenvorschlag2.setText(listenvorschlag1.getText());
                    listenvorschlag2.setVisibility(View.VISIBLE);
                } else {
                    listenvorschlag2.setText("");
                    listenvorschlag2.setVisibility(View.GONE);
                }
                if (rundenname.equals(spieler1.spielerName)) {
                    if (spieler3.geworfenePfeile == 0) return;
                    //liste aktualisieren
                    listenName1.setText(spieler1.spielerName);
                    listenPunkte1.setText(spieler1.score + "  Ø: " + spieler1.durchschnitt);
                    listenName2.setText(spieler2.spielerName);
                    listenPunkte2.setText(spieler2.score + "  Ø: " + spieler2.durchschnitt);
                    dummy3 = spieler1.score;
                    //vorherigen spieler auf aktuelle-anzeige setzen
                    name.setText(spieler3.spielerName);
                    score.setText(String.valueOf(spieler3.score));
                    pfeile.setText(String.valueOf(spieler3.geworfenePfeile));
                    durchschnitt.setText(Float.toString(spieler3.durchschnitt));
                    wurfstatistik(spieler3, false);
                } else if (rundenname.equals(spieler2.spielerName)) {
                    if (spieler1.geworfenePfeile == 0) return;
                    //liste aktualisieren
                    listenName1.setText(spieler2.spielerName);
                    listenPunkte1.setText(spieler2.score + "  Ø: " + spieler2.durchschnitt);
                    listenName2.setText(spieler3.spielerName);
                    listenPunkte2.setText(spieler3.score + "  Ø: " + spieler3.durchschnitt);
                    dummy3 = spieler2.score;
                    //vorherigen spieler auf aktuelle-anzeige setzen
                    name.setText(spieler1.spielerName);
                    score.setText(String.valueOf(spieler1.score));
                    pfeile.setText(String.valueOf(spieler1.geworfenePfeile));
                    durchschnitt.setText(Float.toString(spieler1.durchschnitt));
                    wurfstatistik(spieler1, false);
                } else if (rundenname.equals(spieler3.spielerName)) {
                    if (spieler2.geworfenePfeile == 0) return;
                    //liste aktualisieren
                    listenName1.setText(spieler3.spielerName);
                    listenPunkte1.setText(spieler3.score + "  Ø: " + spieler3.durchschnitt);
                    listenName2.setText(spieler1.spielerName);
                    listenPunkte2.setText(spieler1.score + "  Ø: " + spieler1.durchschnitt);
                    dummy3 = spieler3.score;
                    //vorherigen spieler auf aktuelle-anzeige setzen
                    name.setText(spieler2.spielerName);
                    score.setText(String.valueOf(spieler2.score));
                    pfeile.setText(String.valueOf(spieler2.geworfenePfeile));
                    durchschnitt.setText(Float.toString(spieler2.durchschnitt));
                    wurfstatistik(spieler2, false);
                }
                vorschlagsetzenliste(dummy3, listenvorschlag1);
                break;
            }
            case 4: {
                if (!(listenvorschlag2.getText().equals(""))) {
                    listenvorschlag3.setText(listenvorschlag2.getText());
                    listenvorschlag3.setVisibility(View.VISIBLE);
                } else {
                    listenvorschlag3.setText("");
                    listenvorschlag3.setVisibility(View.GONE);
                }

                if (!(listenvorschlag1.getText().equals(""))) {
                    listenvorschlag2.setText(listenvorschlag1.getText());
                    listenvorschlag2.setVisibility(View.VISIBLE);
                } else {
                    listenvorschlag2.setText("");
                    listenvorschlag2.setVisibility(View.GONE);
                }
                if (rundenname.equals(spieler1.spielerName)) {
                    //liste aktualisieren
                    if (spieler4.geworfenePfeile == 0) return;
                    listenName1.setText(spieler1.spielerName);
                    listenPunkte1.setText(spieler1.score + "  Ø: " + spieler1.durchschnitt);
                    listenName2.setText(spieler2.spielerName);
                    listenPunkte2.setText(spieler2.score + "  Ø: " + spieler2.durchschnitt);
                    listenName3.setText(spieler3.spielerName);
                    listenPunkte3.setText(spieler3.score + "  Ø: " + spieler3.durchschnitt);
                    dummy3 = spieler1.score;
                    //vorherigen spieler auf aktuelle-anzeige setzen
                    name.setText(spieler4.spielerName);
                    score.setText(String.valueOf(spieler4.score));
                    pfeile.setText(String.valueOf(spieler4.geworfenePfeile));
                    durchschnitt.setText(Float.toString(spieler4.durchschnitt));
                    wurfstatistik(spieler4, false);
                } else if (rundenname.equals(spieler2.spielerName)) {
                    if (spieler1.geworfenePfeile == 0) return;
                    //liste aktualisieren
                    listenName1.setText(spieler2.spielerName);
                    listenPunkte1.setText(spieler2.score + "  Ø: " + spieler2.durchschnitt);
                    listenName2.setText(spieler3.spielerName);
                    listenPunkte2.setText(spieler3.score + "  Ø: " + spieler3.durchschnitt);
                    listenName3.setText(spieler4.spielerName);
                    listenPunkte3.setText(spieler4.score + "  Ø: " + spieler4.durchschnitt);
                    dummy3 = spieler2.score;
                    //vorherigen spieler auf aktuelle-anzeige setzen
                    name.setText(spieler1.spielerName);
                    score.setText(String.valueOf(spieler1.score));
                    pfeile.setText(String.valueOf(spieler1.geworfenePfeile));
                    durchschnitt.setText(Float.toString(spieler1.durchschnitt));
                    wurfstatistik(spieler1, false);
                } else if (rundenname.equals(spieler3.spielerName)) {
                    if (spieler2.geworfenePfeile == 0) return;
                    //liste aktualisieren
                    listenName1.setText(spieler3.spielerName);
                    listenPunkte1.setText(spieler3.score + "  Ø: " + spieler3.durchschnitt);
                    listenName2.setText(spieler4.spielerName);
                    listenPunkte2.setText(spieler4.score + "  Ø: " + spieler4.durchschnitt);
                    listenName3.setText(spieler1.spielerName);
                    listenPunkte3.setText(spieler1.score + "  Ø: " + spieler1.durchschnitt);
                    dummy3 = spieler3.score;
                    //vorherigen spieler auf aktuelle-anzeige setzen
                    name.setText(spieler2.spielerName);
                    score.setText(String.valueOf(spieler2.score));
                    pfeile.setText(String.valueOf(spieler2.geworfenePfeile));
                    durchschnitt.setText(Float.toString(spieler2.durchschnitt));
                    wurfstatistik(spieler2, false);
                } else if (rundenname.equals(spieler4.spielerName)) {
                    if (spieler3.geworfenePfeile == 0) return;
                    //liste aktualisieren
                    listenName1.setText(spieler4.spielerName);
                    listenPunkte1.setText(spieler4.score + "  Ø: " + spieler4.durchschnitt);
                    listenName2.setText(spieler1.spielerName);
                    listenPunkte2.setText(spieler1.score + "  Ø: " + spieler1.durchschnitt);
                    listenName3.setText(spieler2.spielerName);
                    listenPunkte3.setText(spieler2.score + "  Ø: " + spieler2.durchschnitt);
                    dummy3 = spieler4.score;
                    //nächsten spieler auf aktuelle-anzeige setzen
                    name.setText(spieler3.spielerName);
                    score.setText(String.valueOf(spieler3.score));
                    pfeile.setText(String.valueOf(spieler3.geworfenePfeile));
                    durchschnitt.setText(Float.toString(spieler3.durchschnitt));
                    wurfstatistik(spieler3, false);
                }
                vorschlagsetzenliste(dummy3, listenvorschlag1);
                break;
            }
            case 5:
            {
                if (!(listenvorschlag3.getText().equals(""))) {
                    listenvorschlag4.setText(listenvorschlag3.getText());
                    listenvorschlag4.setVisibility(View.VISIBLE);
                } else {
                    listenvorschlag4.setText("");
                    listenvorschlag4.setVisibility(View.GONE);
                }

                if (!(listenvorschlag2.getText().equals(""))) {
                    listenvorschlag3.setText(listenvorschlag2.getText());
                    listenvorschlag3.setVisibility(View.VISIBLE);
                } else {
                    listenvorschlag3.setText("");
                    listenvorschlag3.setVisibility(View.GONE);
                }

                if (!(listenvorschlag1.getText().equals(""))) {
                    listenvorschlag2.setText(listenvorschlag1.getText());
                    listenvorschlag2.setVisibility(View.VISIBLE);
                } else {
                    listenvorschlag2.setText("");
                    listenvorschlag2.setVisibility(View.GONE);
                }

                if (rundenname.equals(spieler1.spielerName)) {
                    //liste aktualisieren
                    if (spieler5.geworfenePfeile == 0) return;
                    listenName1.setText(spieler1.spielerName);
                    listenPunkte1.setText(spieler1.score + "  Ø: " + spieler1.durchschnitt);
                    listenName2.setText(spieler2.spielerName);
                    listenPunkte2.setText(spieler2.score + "  Ø: " + spieler2.durchschnitt);
                    listenName3.setText(spieler3.spielerName);
                    listenPunkte3.setText(spieler3.score + "  Ø: " + spieler3.durchschnitt);
                    listenName4.setText(spieler4.spielerName);
                    listenPunkte4.setText(spieler4.score + "  Ø: " + spieler4.durchschnitt);
                    dummy3 = spieler1.score;
                    //vorherigen spieler auf aktuelle-anzeige setzen
                    name.setText(spieler5.spielerName);
                    score.setText(String.valueOf(spieler5.score));
                    pfeile.setText(String.valueOf(spieler5.geworfenePfeile));
                    durchschnitt.setText(Float.toString(spieler5.durchschnitt));
                    wurfstatistik(spieler5, false);
                } else if (rundenname.equals(spieler2.spielerName)) {
                    if (spieler1.geworfenePfeile == 0) return;
                    //liste aktualisieren
                    listenName1.setText(spieler2.spielerName);
                    listenPunkte1.setText(spieler2.score + "  Ø: " + spieler2.durchschnitt);
                    listenName2.setText(spieler3.spielerName);
                    listenPunkte2.setText(spieler3.score + "  Ø: " + spieler3.durchschnitt);
                    listenName3.setText(spieler4.spielerName);
                    listenPunkte3.setText(spieler4.score + "  Ø: " + spieler4.durchschnitt);
                    listenName4.setText(spieler5.spielerName);
                    listenPunkte4.setText(spieler5.score + "  Ø: " + spieler5.durchschnitt);
                    dummy3 = spieler2.score;
                    //vorherigen spieler auf aktuelle-anzeige setzen
                    name.setText(spieler1.spielerName);
                    score.setText(String.valueOf(spieler1.score));
                    pfeile.setText(String.valueOf(spieler1.geworfenePfeile));
                    durchschnitt.setText(Float.toString(spieler1.durchschnitt));
                    wurfstatistik(spieler1, false);
                } else if (rundenname.equals(spieler3.spielerName)) {
                    if (spieler2.geworfenePfeile == 0) return;
                    //liste aktualisieren
                    listenName1.setText(spieler3.spielerName);
                    listenPunkte1.setText(spieler3.score + "  Ø: " + spieler3.durchschnitt);
                    listenName2.setText(spieler4.spielerName);
                    listenPunkte2.setText(spieler4.score + "  Ø: " + spieler4.durchschnitt);
                    listenName3.setText(spieler5.spielerName);
                    listenPunkte3.setText(spieler5.score + "  Ø: " + spieler5.durchschnitt);
                    listenName4.setText(spieler1.spielerName);
                    listenPunkte4.setText(spieler1.score + "  Ø: " + spieler1.durchschnitt);
                    dummy3 = spieler3.score;
                    //vorherigen spieler auf aktuelle-anzeige setzen
                    name.setText(spieler2.spielerName);
                    score.setText(String.valueOf(spieler2.score));
                    pfeile.setText(String.valueOf(spieler2.geworfenePfeile));
                    durchschnitt.setText(Float.toString(spieler2.durchschnitt));
                    wurfstatistik(spieler2, false);
                } else if (rundenname.equals(spieler4.spielerName)) {
                    if (spieler3.geworfenePfeile == 0) return;
                    //liste aktualisieren
                    listenName1.setText(spieler4.spielerName);
                    listenPunkte1.setText(spieler4.score + "  Ø: " + spieler4.durchschnitt);
                    listenName2.setText(spieler5.spielerName);
                    listenPunkte2.setText(spieler5.score + "  Ø: " + spieler5.durchschnitt);
                    listenName3.setText(spieler1.spielerName);
                    listenPunkte3.setText(spieler1.score + "  Ø: " + spieler1.durchschnitt);
                    listenName4.setText(spieler2.spielerName);
                    listenPunkte4.setText(spieler2.score + "  Ø: " + spieler2.durchschnitt);
                    dummy3 = spieler4.score;
                    //nächsten spieler auf aktuelle-anzeige setzen
                    name.setText(spieler3.spielerName);
                    score.setText(String.valueOf(spieler3.score));
                    pfeile.setText(String.valueOf(spieler3.geworfenePfeile));
                    durchschnitt.setText(Float.toString(spieler3.durchschnitt));
                    wurfstatistik(spieler3, false);
                }
                else if (rundenname.equals(spieler5.spielerName)) {
                    if (spieler4.geworfenePfeile == 0) return;
                    //liste aktualisieren
                    listenName1.setText(spieler5.spielerName);
                    listenPunkte1.setText(spieler5.score + "  Ø: " + spieler5.durchschnitt);
                    listenName2.setText(spieler1.spielerName);
                    listenPunkte2.setText(spieler1.score + "  Ø: " + spieler1.durchschnitt);
                    listenName3.setText(spieler2.spielerName);
                    listenPunkte3.setText(spieler2.score + "  Ø: " + spieler2.durchschnitt);
                    listenName4.setText(spieler3.spielerName);
                    listenPunkte4.setText(spieler3.score + "  Ø: " + spieler3.durchschnitt);
                    dummy3 = spieler5.score;
                    //nächsten spieler auf aktuelle-anzeige setzen
                    name.setText(spieler4.spielerName);
                    score.setText(String.valueOf(spieler4.score));
                    pfeile.setText(String.valueOf(spieler4.geworfenePfeile));
                    durchschnitt.setText(Float.toString(spieler4.durchschnitt));
                    wurfstatistik(spieler4, false);
                }
                vorschlagsetzenliste(dummy3, listenvorschlag1);
                break;
            }
            case 6:
            {
                if (!(listenvorschlag4.getText().equals(""))) {
                    listenvorschlag5.setText(listenvorschlag4.getText());
                    listenvorschlag5.setVisibility(View.VISIBLE);
                } else {
                    listenvorschlag5.setText("");
                    listenvorschlag5.setVisibility(View.GONE);
                }
                if (!(listenvorschlag3.getText().equals(""))) {
                    listenvorschlag4.setText(listenvorschlag3.getText());
                    listenvorschlag4.setVisibility(View.VISIBLE);
                } else {
                    listenvorschlag4.setText("");
                    listenvorschlag4.setVisibility(View.GONE);
                }

                if (!(listenvorschlag2.getText().equals(""))) {
                    listenvorschlag3.setText(listenvorschlag2.getText());
                    listenvorschlag3.setVisibility(View.VISIBLE);
                } else {
                    listenvorschlag3.setText("");
                    listenvorschlag3.setVisibility(View.GONE);
                }

                if (!(listenvorschlag1.getText().equals(""))) {
                    listenvorschlag2.setText(listenvorschlag1.getText());
                    listenvorschlag2.setVisibility(View.VISIBLE);
                } else {
                    listenvorschlag2.setText("");
                    listenvorschlag2.setVisibility(View.GONE);
                }

                if (rundenname.equals(spieler1.spielerName)) {
                    //liste aktualisieren
                    if (spieler6.geworfenePfeile == 0) return;
                    listenName1.setText(spieler1.spielerName);
                    listenPunkte1.setText(spieler1.score + "  Ø: " + spieler1.durchschnitt);
                    listenName2.setText(spieler2.spielerName);
                    listenPunkte2.setText(spieler2.score + "  Ø: " + spieler2.durchschnitt);
                    listenName3.setText(spieler3.spielerName);
                    listenPunkte3.setText(spieler3.score + "  Ø: " + spieler3.durchschnitt);
                    listenName4.setText(spieler4.spielerName);
                    listenPunkte4.setText(spieler4.score + "  Ø: " + spieler4.durchschnitt);
                    listenName5.setText(spieler5.spielerName);
                    listenPunkte5.setText(spieler5.score + "  Ø: " + spieler5.durchschnitt);
                    dummy3 = spieler1.score;
                    //vorherigen spieler auf aktuelle-anzeige setzen
                    name.setText(spieler6.spielerName);
                    score.setText(String.valueOf(spieler6.score));
                    pfeile.setText(String.valueOf(spieler6.geworfenePfeile));
                    durchschnitt.setText(Float.toString(spieler6.durchschnitt));
                    wurfstatistik(spieler6, false);
                } else if (rundenname.equals(spieler2.spielerName)) {
                    if (spieler1.geworfenePfeile == 0) return;
                    //liste aktualisieren
                    listenName1.setText(spieler2.spielerName);
                    listenPunkte1.setText(spieler2.score + "  Ø: " + spieler2.durchschnitt);
                    listenName2.setText(spieler3.spielerName);
                    listenPunkte2.setText(spieler3.score + "  Ø: " + spieler3.durchschnitt);
                    listenName3.setText(spieler4.spielerName);
                    listenPunkte3.setText(spieler4.score + "  Ø: " + spieler4.durchschnitt);
                    listenName4.setText(spieler5.spielerName);
                    listenPunkte4.setText(spieler5.score + "  Ø: " + spieler5.durchschnitt);
                    listenName5.setText(spieler6.spielerName);
                    listenPunkte5.setText(spieler6.score + "  Ø: " + spieler6.durchschnitt);
                    dummy3 = spieler2.score;
                    //vorherigen spieler auf aktuelle-anzeige setzen
                    name.setText(spieler1.spielerName);
                    score.setText(String.valueOf(spieler1.score));
                    pfeile.setText(String.valueOf(spieler1.geworfenePfeile));
                    durchschnitt.setText(Float.toString(spieler1.durchschnitt));
                    wurfstatistik(spieler1, false);
                } else if (rundenname.equals(spieler3.spielerName)) {
                    if (spieler2.geworfenePfeile == 0) return;
                    //liste aktualisieren
                    listenName1.setText(spieler3.spielerName);
                    listenPunkte1.setText(spieler3.score + "  Ø: " + spieler3.durchschnitt);
                    listenName2.setText(spieler4.spielerName);
                    listenPunkte2.setText(spieler4.score + "  Ø: " + spieler4.durchschnitt);
                    listenName3.setText(spieler5.spielerName);
                    listenPunkte3.setText(spieler5.score + "  Ø: " + spieler5.durchschnitt);
                    listenName4.setText(spieler6.spielerName);
                    listenPunkte4.setText(spieler6.score + "  Ø: " + spieler6.durchschnitt);
                    listenName5.setText(spieler1.spielerName);
                    listenPunkte5.setText(spieler1.score + "  Ø: " + spieler1.durchschnitt);
                    dummy3 = spieler3.score;
                    //vorherigen spieler auf aktuelle-anzeige setzen
                    name.setText(spieler2.spielerName);
                    score.setText(String.valueOf(spieler2.score));
                    pfeile.setText(String.valueOf(spieler2.geworfenePfeile));
                    durchschnitt.setText(Float.toString(spieler2.durchschnitt));
                    wurfstatistik(spieler2, false);
                } else if (rundenname.equals(spieler4.spielerName)) {
                    if (spieler3.geworfenePfeile == 0) return;
                    //liste aktualisieren
                    listenName1.setText(spieler4.spielerName);
                    listenPunkte1.setText(spieler4.score + "  Ø: " + spieler4.durchschnitt);
                    listenName2.setText(spieler5.spielerName);
                    listenPunkte2.setText(spieler5.score + "  Ø: " + spieler5.durchschnitt);
                    listenName3.setText(spieler6.spielerName);
                    listenPunkte3.setText(spieler6.score + "  Ø: " + spieler6.durchschnitt);
                    listenName4.setText(spieler1.spielerName);
                    listenPunkte4.setText(spieler1.score + "  Ø: " + spieler1.durchschnitt);
                    listenName5.setText(spieler2.spielerName);
                    listenPunkte5.setText(spieler2.score + "  Ø: " + spieler2.durchschnitt);
                    dummy3 = spieler4.score;
                    //nächsten spieler auf aktuelle-anzeige setzen
                    name.setText(spieler3.spielerName);
                    score.setText(String.valueOf(spieler3.score));
                    pfeile.setText(String.valueOf(spieler3.geworfenePfeile));
                    durchschnitt.setText(Float.toString(spieler3.durchschnitt));
                    wurfstatistik(spieler3, false);
                }
                else if (rundenname.equals(spieler5.spielerName)) {
                    if (spieler4.geworfenePfeile == 0) return;
                    //liste aktualisieren
                    listenName1.setText(spieler5.spielerName);
                    listenPunkte1.setText(spieler5.score + "  Ø: " + spieler5.durchschnitt);
                    listenName2.setText(spieler6.spielerName);
                    listenPunkte2.setText(spieler6.score + "  Ø: " + spieler6.durchschnitt);
                    listenName3.setText(spieler1.spielerName);
                    listenPunkte3.setText(spieler1.score + "  Ø: " + spieler1.durchschnitt);
                    listenName4.setText(spieler2.spielerName);
                    listenPunkte4.setText(spieler2.score + "  Ø: " + spieler2.durchschnitt);
                    listenName5.setText(spieler3.spielerName);
                    listenPunkte5.setText(spieler3.score + "  Ø: " + spieler3.durchschnitt);
                    dummy3 = spieler5.score;
                    //nächsten spieler auf aktuelle-anzeige setzen
                    name.setText(spieler4.spielerName);
                    score.setText(String.valueOf(spieler4.score));
                    pfeile.setText(String.valueOf(spieler4.geworfenePfeile));
                    durchschnitt.setText(Float.toString(spieler4.durchschnitt));
                    wurfstatistik(spieler4, false);
                }
                else if (rundenname.equals(spieler6.spielerName)) {
                    if (spieler5.geworfenePfeile == 0) return;
                    //liste aktualisieren
                    listenName1.setText(spieler6.spielerName);
                    listenPunkte1.setText(spieler6.score + "  Ø: " + spieler6.durchschnitt);
                    listenName2.setText(spieler1.spielerName);
                    listenPunkte2.setText(spieler1.score + "  Ø: " + spieler1.durchschnitt);
                    listenName3.setText(spieler2.spielerName);
                    listenPunkte3.setText(spieler2.score + "  Ø: " + spieler2.durchschnitt);
                    listenName4.setText(spieler3.spielerName);
                    listenPunkte4.setText(spieler3.score + "  Ø: " + spieler3.durchschnitt);
                    listenName5.setText(spieler4.spielerName);
                    listenPunkte5.setText(spieler4.score + "  Ø: " + spieler4.durchschnitt);
                    dummy3 = spieler6.score;
                    //nächsten spieler auf aktuelle-anzeige setzen
                    name.setText(spieler5.spielerName);
                    score.setText(String.valueOf(spieler5.score));
                    pfeile.setText(String.valueOf(spieler5.geworfenePfeile));
                    durchschnitt.setText(Float.toString(spieler5.durchschnitt));
                    wurfstatistik(spieler5, false);
                }
                vorschlagsetzenliste(dummy3, listenvorschlag1);
                break;
            }
            case 7:
            {
                if (!(listenvorschlag5.getText().equals(""))) {
                    listenvorschlag6.setText(listenvorschlag5.getText());
                    listenvorschlag6.setVisibility(View.VISIBLE);
                } else {
                    listenvorschlag6.setText("");
                    listenvorschlag6.setVisibility(View.GONE);
                }
                if (!(listenvorschlag4.getText().equals(""))) {
                    listenvorschlag5.setText(listenvorschlag4.getText());
                    listenvorschlag5.setVisibility(View.VISIBLE);
                } else {
                    listenvorschlag5.setText("");
                    listenvorschlag5.setVisibility(View.GONE);
                }
                if (!(listenvorschlag3.getText().equals(""))) {
                    listenvorschlag4.setText(listenvorschlag3.getText());
                    listenvorschlag4.setVisibility(View.VISIBLE);
                } else {
                    listenvorschlag4.setText("");
                    listenvorschlag4.setVisibility(View.GONE);
                }

                if (!(listenvorschlag2.getText().equals(""))) {
                    listenvorschlag3.setText(listenvorschlag2.getText());
                    listenvorschlag3.setVisibility(View.VISIBLE);
                } else {
                    listenvorschlag3.setText("");
                    listenvorschlag3.setVisibility(View.GONE);
                }

                if (!(listenvorschlag1.getText().equals(""))) {
                    listenvorschlag2.setText(listenvorschlag1.getText());
                    listenvorschlag2.setVisibility(View.VISIBLE);
                } else {
                    listenvorschlag2.setText("");
                    listenvorschlag2.setVisibility(View.GONE);
                }

                if (rundenname.equals(spieler1.spielerName)) {
                    //liste aktualisieren
                    if (spieler7.geworfenePfeile == 0) return;
                    listenName1.setText(spieler1.spielerName);
                    listenPunkte1.setText(spieler1.score + "  Ø: " + spieler1.durchschnitt);
                    listenName2.setText(spieler2.spielerName);
                    listenPunkte2.setText(spieler2.score + "  Ø: " + spieler2.durchschnitt);
                    listenName3.setText(spieler3.spielerName);
                    listenPunkte3.setText(spieler3.score + "  Ø: " + spieler3.durchschnitt);
                    listenName4.setText(spieler4.spielerName);
                    listenPunkte4.setText(spieler4.score + "  Ø: " + spieler4.durchschnitt);
                    listenName5.setText(spieler5.spielerName);
                    listenPunkte5.setText(spieler5.score + "  Ø: " + spieler5.durchschnitt);
                    listenName6.setText(spieler6.spielerName);
                    listenPunkte6.setText(spieler6.score + "  Ø: " + spieler6.durchschnitt);
                    dummy3 = spieler1.score;
                    //vorherigen spieler auf aktuelle-anzeige setzen
                    name.setText(spieler7.spielerName);
                    score.setText(String.valueOf(spieler7.score));
                    pfeile.setText(String.valueOf(spieler7.geworfenePfeile));
                    durchschnitt.setText(Float.toString(spieler7.durchschnitt));
                    wurfstatistik(spieler7, false);
                } else if (rundenname.equals(spieler2.spielerName)) {
                    if (spieler1.geworfenePfeile == 0) return;
                    //liste aktualisieren
                    listenName1.setText(spieler2.spielerName);
                    listenPunkte1.setText(spieler2.score + "  Ø: " + spieler2.durchschnitt);
                    listenName2.setText(spieler3.spielerName);
                    listenPunkte2.setText(spieler3.score + "  Ø: " + spieler3.durchschnitt);
                    listenName3.setText(spieler4.spielerName);
                    listenPunkte3.setText(spieler4.score + "  Ø: " + spieler4.durchschnitt);
                    listenName4.setText(spieler5.spielerName);
                    listenPunkte4.setText(spieler5.score + "  Ø: " + spieler5.durchschnitt);
                    listenName5.setText(spieler6.spielerName);
                    listenPunkte5.setText(spieler6.score + "  Ø: " + spieler6.durchschnitt);
                    listenName6.setText(spieler7.spielerName);
                    listenPunkte6.setText(spieler7.score + "  Ø: " + spieler7.durchschnitt);
                    dummy3 = spieler2.score;
                    //vorherigen spieler auf aktuelle-anzeige setzen
                    name.setText(spieler1.spielerName);
                    score.setText(String.valueOf(spieler1.score));
                    pfeile.setText(String.valueOf(spieler1.geworfenePfeile));
                    durchschnitt.setText(Float.toString(spieler1.durchschnitt));
                    wurfstatistik(spieler1, false);
                } else if (rundenname.equals(spieler3.spielerName)) {
                    if (spieler2.geworfenePfeile == 0) return;
                    //liste aktualisieren
                    listenName1.setText(spieler3.spielerName);
                    listenPunkte1.setText(spieler3.score + "  Ø: " + spieler3.durchschnitt);
                    listenName2.setText(spieler4.spielerName);
                    listenPunkte2.setText(spieler4.score + "  Ø: " + spieler4.durchschnitt);
                    listenName3.setText(spieler5.spielerName);
                    listenPunkte3.setText(spieler5.score + "  Ø: " + spieler5.durchschnitt);
                    listenName4.setText(spieler6.spielerName);
                    listenPunkte4.setText(spieler6.score + "  Ø: " + spieler6.durchschnitt);
                    listenName5.setText(spieler7.spielerName);
                    listenPunkte5.setText(spieler7.score + "  Ø: " + spieler7.durchschnitt);
                    listenName6.setText(spieler1.spielerName);
                    listenPunkte6.setText(spieler1.score + "  Ø: " + spieler1.durchschnitt);
                    dummy3 = spieler3.score;
                    //vorherigen spieler auf aktuelle-anzeige setzen
                    name.setText(spieler2.spielerName);
                    score.setText(String.valueOf(spieler2.score));
                    pfeile.setText(String.valueOf(spieler2.geworfenePfeile));
                    durchschnitt.setText(Float.toString(spieler2.durchschnitt));
                    wurfstatistik(spieler2, false);
                } else if (rundenname.equals(spieler4.spielerName)) {
                    if (spieler3.geworfenePfeile == 0) return;
                    //liste aktualisieren
                    listenName1.setText(spieler4.spielerName);
                    listenPunkte1.setText(spieler4.score + "  Ø: " + spieler4.durchschnitt);
                    listenName2.setText(spieler5.spielerName);
                    listenPunkte2.setText(spieler5.score + "  Ø: " + spieler5.durchschnitt);
                    listenName3.setText(spieler6.spielerName);
                    listenPunkte3.setText(spieler6.score + "  Ø: " + spieler6.durchschnitt);
                    listenName4.setText(spieler7.spielerName);
                    listenPunkte4.setText(spieler7.score + "  Ø: " + spieler7.durchschnitt);
                    listenName5.setText(spieler1.spielerName);
                    listenPunkte5.setText(spieler1.score + "  Ø: " + spieler1.durchschnitt);
                    listenName6.setText(spieler2.spielerName);
                    listenPunkte6.setText(spieler2.score + "  Ø: " + spieler2.durchschnitt);
                    dummy3 = spieler4.score;
                    //nächsten spieler auf aktuelle-anzeige setzen
                    name.setText(spieler3.spielerName);
                    score.setText(String.valueOf(spieler3.score));
                    pfeile.setText(String.valueOf(spieler3.geworfenePfeile));
                    durchschnitt.setText(Float.toString(spieler3.durchschnitt));
                    wurfstatistik(spieler3, false);
                }
                else if (rundenname.equals(spieler5.spielerName)) {
                    if (spieler4.geworfenePfeile == 0) return;
                    //liste aktualisieren
                    listenName1.setText(spieler5.spielerName);
                    listenPunkte1.setText(spieler5.score + "  Ø: " + spieler5.durchschnitt);
                    listenName2.setText(spieler6.spielerName);
                    listenPunkte2.setText(spieler6.score + "  Ø: " + spieler6.durchschnitt);
                    listenName3.setText(spieler7.spielerName);
                    listenPunkte3.setText(spieler7.score + "  Ø: " + spieler7.durchschnitt);
                    listenName4.setText(spieler1.spielerName);
                    listenPunkte4.setText(spieler1.score + "  Ø: " + spieler1.durchschnitt);
                    listenName5.setText(spieler2.spielerName);
                    listenPunkte5.setText(spieler2.score + "  Ø: " + spieler2.durchschnitt);
                    listenName6.setText(spieler3.spielerName);
                    listenPunkte6.setText(spieler3.score + "  Ø: " + spieler3.durchschnitt);
                    dummy3 = spieler5.score;
                    //nächsten spieler auf aktuelle-anzeige setzen
                    name.setText(spieler4.spielerName);
                    score.setText(String.valueOf(spieler4.score));
                    pfeile.setText(String.valueOf(spieler4.geworfenePfeile));
                    durchschnitt.setText(Float.toString(spieler4.durchschnitt));
                    wurfstatistik(spieler4, false);
                }
                else if (rundenname.equals(spieler6.spielerName)) {
                    if (spieler5.geworfenePfeile == 0) return;
                    //liste aktualisieren
                    listenName1.setText(spieler6.spielerName);
                    listenPunkte1.setText(spieler6.score + "  Ø: " + spieler6.durchschnitt);
                    listenName2.setText(spieler7.spielerName);
                    listenPunkte2.setText(spieler7.score + "  Ø: " + spieler7.durchschnitt);
                    listenName3.setText(spieler1.spielerName);
                    listenPunkte3.setText(spieler1.score + "  Ø: " + spieler1.durchschnitt);
                    listenName4.setText(spieler2.spielerName);
                    listenPunkte4.setText(spieler2.score + "  Ø: " + spieler2.durchschnitt);
                    listenName5.setText(spieler3.spielerName);
                    listenPunkte5.setText(spieler3.score + "  Ø: " + spieler3.durchschnitt);
                    listenName6.setText(spieler4.spielerName);
                    listenPunkte6.setText(spieler4.score + "  Ø: " + spieler4.durchschnitt);
                    dummy3 = spieler6.score;
                    //nächsten spieler auf aktuelle-anzeige setzen
                    name.setText(spieler5.spielerName);
                    score.setText(String.valueOf(spieler5.score));
                    pfeile.setText(String.valueOf(spieler5.geworfenePfeile));
                    durchschnitt.setText(Float.toString(spieler5.durchschnitt));
                    wurfstatistik(spieler5, false);
                }
                else if (rundenname.equals(spieler7.spielerName)) {
                    if (spieler6.geworfenePfeile == 0) return;
                    //liste aktualisieren
                    listenName1.setText(spieler7.spielerName);
                    listenPunkte1.setText(spieler7.score + "  Ø: " + spieler7.durchschnitt);
                    listenName2.setText(spieler1.spielerName);
                    listenPunkte2.setText(spieler1.score + "  Ø: " + spieler1.durchschnitt);
                    listenName3.setText(spieler2.spielerName);
                    listenPunkte3.setText(spieler2.score + "  Ø: " + spieler2.durchschnitt);
                    listenName4.setText(spieler3.spielerName);
                    listenPunkte4.setText(spieler3.score + "  Ø: " + spieler3.durchschnitt);
                    listenName5.setText(spieler4.spielerName);
                    listenPunkte5.setText(spieler4.score + "  Ø: " + spieler4.durchschnitt);
                    listenName6.setText(spieler5.spielerName);
                    listenPunkte6.setText(spieler5.score + "  Ø: " + spieler5.durchschnitt);
                    dummy3 = spieler7.score;
                    //nächsten spieler auf aktuelle-anzeige setzen
                    name.setText(spieler6.spielerName);
                    score.setText(String.valueOf(spieler6.score));
                    pfeile.setText(String.valueOf(spieler6.geworfenePfeile));
                    durchschnitt.setText(Float.toString(spieler6.durchschnitt));
                    wurfstatistik(spieler6, false);
                }
                vorschlagsetzenliste(dummy3, listenvorschlag1);
                break;
            }
            case 8:
            {
                if (!(listenvorschlag6.getText().equals(""))) {
                    listenvorschlag7.setText(listenvorschlag6.getText());
                    listenvorschlag7.setVisibility(View.VISIBLE);
                } else {
                    listenvorschlag7.setText("");
                    listenvorschlag7.setVisibility(View.GONE);
                }
                if (!(listenvorschlag5.getText().equals(""))) {
                    listenvorschlag6.setText(listenvorschlag5.getText());
                    listenvorschlag6.setVisibility(View.VISIBLE);
                } else {
                    listenvorschlag6.setText("");
                    listenvorschlag6.setVisibility(View.GONE);
                }
                if (!(listenvorschlag4.getText().equals(""))) {
                    listenvorschlag5.setText(listenvorschlag4.getText());
                    listenvorschlag5.setVisibility(View.VISIBLE);
                } else {
                    listenvorschlag5.setText("");
                    listenvorschlag5.setVisibility(View.GONE);
                }
                if (!(listenvorschlag3.getText().equals(""))) {
                    listenvorschlag4.setText(listenvorschlag3.getText());
                    listenvorschlag4.setVisibility(View.VISIBLE);
                } else {
                    listenvorschlag4.setText("");
                    listenvorschlag4.setVisibility(View.GONE);
                }

                if (!(listenvorschlag2.getText().equals(""))) {
                    listenvorschlag3.setText(listenvorschlag2.getText());
                    listenvorschlag3.setVisibility(View.VISIBLE);
                } else {
                    listenvorschlag3.setText("");
                    listenvorschlag3.setVisibility(View.GONE);
                }

                if (!(listenvorschlag1.getText().equals(""))) {
                    listenvorschlag2.setText(listenvorschlag1.getText());
                    listenvorschlag2.setVisibility(View.VISIBLE);
                } else {
                    listenvorschlag2.setText("");
                    listenvorschlag2.setVisibility(View.GONE);
                }

                if (rundenname.equals(spieler1.spielerName)) {
                    //liste aktualisieren
                    if (spieler8.geworfenePfeile == 0) return;
                    listenName1.setText(spieler1.spielerName);
                    listenPunkte1.setText(spieler1.score + "  Ø: " + spieler1.durchschnitt);
                    listenName2.setText(spieler2.spielerName);
                    listenPunkte2.setText(spieler2.score + "  Ø: " + spieler2.durchschnitt);
                    listenName3.setText(spieler3.spielerName);
                    listenPunkte3.setText(spieler3.score + "  Ø: " + spieler3.durchschnitt);
                    listenName4.setText(spieler4.spielerName);
                    listenPunkte4.setText(spieler4.score + "  Ø: " + spieler4.durchschnitt);
                    listenName5.setText(spieler5.spielerName);
                    listenPunkte5.setText(spieler5.score + "  Ø: " + spieler5.durchschnitt);
                    listenName6.setText(spieler6.spielerName);
                    listenPunkte6.setText(spieler6.score + "  Ø: " + spieler6.durchschnitt);
                    listenName7.setText(spieler7.spielerName);
                    listenPunkte7.setText(spieler7.score + "  Ø: " + spieler7.durchschnitt);
                    dummy3 = spieler1.score;
                    //vorherigen spieler auf aktuelle-anzeige setzen
                    name.setText(spieler8.spielerName);
                    score.setText(String.valueOf(spieler8.score));
                    pfeile.setText(String.valueOf(spieler8.geworfenePfeile));
                    durchschnitt.setText(Float.toString(spieler8.durchschnitt));
                    wurfstatistik(spieler8, false);
                } else if (rundenname.equals(spieler2.spielerName)) {
                    if (spieler1.geworfenePfeile == 0) return;
                    //liste aktualisieren
                    listenName1.setText(spieler2.spielerName);
                    listenPunkte1.setText(spieler2.score + "  Ø: " + spieler2.durchschnitt);
                    listenName2.setText(spieler3.spielerName);
                    listenPunkte2.setText(spieler3.score + "  Ø: " + spieler3.durchschnitt);
                    listenName3.setText(spieler4.spielerName);
                    listenPunkte3.setText(spieler4.score + "  Ø: " + spieler4.durchschnitt);
                    listenName4.setText(spieler5.spielerName);
                    listenPunkte4.setText(spieler5.score + "  Ø: " + spieler5.durchschnitt);
                    listenName5.setText(spieler6.spielerName);
                    listenPunkte5.setText(spieler6.score + "  Ø: " + spieler6.durchschnitt);
                    listenName6.setText(spieler7.spielerName);
                    listenPunkte6.setText(spieler7.score + "  Ø: " + spieler7.durchschnitt);
                    listenName7.setText(spieler8.spielerName);
                    listenPunkte7.setText(spieler8.score + "  Ø: " + spieler8.durchschnitt);
                    dummy3 = spieler2.score;
                    //vorherigen spieler auf aktuelle-anzeige setzen
                    name.setText(spieler1.spielerName);
                    score.setText(String.valueOf(spieler1.score));
                    pfeile.setText(String.valueOf(spieler1.geworfenePfeile));
                    durchschnitt.setText(Float.toString(spieler1.durchschnitt));
                    wurfstatistik(spieler1, false);
                } else if (rundenname.equals(spieler3.spielerName)) {
                    if (spieler2.geworfenePfeile == 0) return;
                    //liste aktualisieren
                    listenName1.setText(spieler3.spielerName);
                    listenPunkte1.setText(spieler3.score + "  Ø: " + spieler3.durchschnitt);
                    listenName2.setText(spieler4.spielerName);
                    listenPunkte2.setText(spieler4.score + "  Ø: " + spieler4.durchschnitt);
                    listenName3.setText(spieler5.spielerName);
                    listenPunkte3.setText(spieler5.score + "  Ø: " + spieler5.durchschnitt);
                    listenName4.setText(spieler6.spielerName);
                    listenPunkte4.setText(spieler6.score + "  Ø: " + spieler6.durchschnitt);
                    listenName5.setText(spieler7.spielerName);
                    listenPunkte5.setText(spieler7.score + "  Ø: " + spieler7.durchschnitt);
                    listenName6.setText(spieler8.spielerName);
                    listenPunkte6.setText(spieler8.score + "  Ø: " + spieler8.durchschnitt);
                    listenName7.setText(spieler1.spielerName);
                    listenPunkte7.setText(spieler1.score + "  Ø: " + spieler1.durchschnitt);
                    dummy3 = spieler3.score;
                    //vorherigen spieler auf aktuelle-anzeige setzen
                    name.setText(spieler2.spielerName);
                    score.setText(String.valueOf(spieler2.score));
                    pfeile.setText(String.valueOf(spieler2.geworfenePfeile));
                    durchschnitt.setText(Float.toString(spieler2.durchschnitt));
                    wurfstatistik(spieler2, false);
                } else if (rundenname.equals(spieler4.spielerName)) {
                    if (spieler3.geworfenePfeile == 0) return;
                    //liste aktualisieren
                    listenName1.setText(spieler4.spielerName);
                    listenPunkte1.setText(spieler4.score + "  Ø: " + spieler4.durchschnitt);
                    listenName2.setText(spieler5.spielerName);
                    listenPunkte2.setText(spieler5.score + "  Ø: " + spieler5.durchschnitt);
                    listenName3.setText(spieler6.spielerName);
                    listenPunkte3.setText(spieler6.score + "  Ø: " + spieler6.durchschnitt);
                    listenName4.setText(spieler7.spielerName);
                    listenPunkte4.setText(spieler7.score + "  Ø: " + spieler7.durchschnitt);
                    listenName5.setText(spieler8.spielerName);
                    listenPunkte5.setText(spieler8.score + "  Ø: " + spieler8.durchschnitt);
                    listenName6.setText(spieler1.spielerName);
                    listenPunkte6.setText(spieler1.score + "  Ø: " + spieler1.durchschnitt);
                    listenName7.setText(spieler2.spielerName);
                    listenPunkte7.setText(spieler2.score + "  Ø: " + spieler2.durchschnitt);
                    dummy3 = spieler4.score;
                    //nächsten spieler auf aktuelle-anzeige setzen
                    name.setText(spieler3.spielerName);
                    score.setText(String.valueOf(spieler3.score));
                    pfeile.setText(String.valueOf(spieler3.geworfenePfeile));
                    durchschnitt.setText(Float.toString(spieler3.durchschnitt));
                    wurfstatistik(spieler3, false);
                }
                else if (rundenname.equals(spieler5.spielerName)) {
                    if (spieler4.geworfenePfeile == 0) return;
                    //liste aktualisieren
                    listenName1.setText(spieler5.spielerName);
                    listenPunkte1.setText(spieler5.score + "  Ø: " + spieler5.durchschnitt);
                    listenName2.setText(spieler6.spielerName);
                    listenPunkte2.setText(spieler6.score + "  Ø: " + spieler6.durchschnitt);
                    listenName3.setText(spieler7.spielerName);
                    listenPunkte3.setText(spieler7.score + "  Ø: " + spieler7.durchschnitt);
                    listenName4.setText(spieler8.spielerName);
                    listenPunkte4.setText(spieler8.score + "  Ø: " + spieler8.durchschnitt);
                    listenName5.setText(spieler1.spielerName);
                    listenPunkte5.setText(spieler1.score + "  Ø: " + spieler1.durchschnitt);
                    listenName6.setText(spieler2.spielerName);
                    listenPunkte6.setText(spieler2.score + "  Ø: " + spieler2.durchschnitt);
                    listenName7.setText(spieler3.spielerName);
                    listenPunkte7.setText(spieler3.score + "  Ø: " + spieler3.durchschnitt);
                    dummy3 = spieler5.score;
                    //nächsten spieler auf aktuelle-anzeige setzen
                    name.setText(spieler4.spielerName);
                    score.setText(String.valueOf(spieler4.score));
                    pfeile.setText(String.valueOf(spieler4.geworfenePfeile));
                    durchschnitt.setText(Float.toString(spieler4.durchschnitt));
                    wurfstatistik(spieler4, false);
                }
                else if (rundenname.equals(spieler6.spielerName)) {
                    if (spieler5.geworfenePfeile == 0) return;
                    //liste aktualisieren
                    listenName1.setText(spieler6.spielerName);
                    listenPunkte1.setText(spieler6.score + "  Ø: " + spieler6.durchschnitt);
                    listenName2.setText(spieler7.spielerName);
                    listenPunkte2.setText(spieler7.score + "  Ø: " + spieler7.durchschnitt);
                    listenName3.setText(spieler8.spielerName);
                    listenPunkte3.setText(spieler8.score + "  Ø: " + spieler8.durchschnitt);
                    listenName4.setText(spieler1.spielerName);
                    listenPunkte4.setText(spieler1.score + "  Ø: " + spieler1.durchschnitt);
                    listenName5.setText(spieler2.spielerName);
                    listenPunkte5.setText(spieler2.score + "  Ø: " + spieler2.durchschnitt);
                    listenName6.setText(spieler3.spielerName);
                    listenPunkte6.setText(spieler3.score + "  Ø: " + spieler3.durchschnitt);
                    listenName7.setText(spieler4.spielerName);
                    listenPunkte7.setText(spieler4.score + "  Ø: " + spieler4.durchschnitt);
                    dummy3 = spieler6.score;
                    //nächsten spieler auf aktuelle-anzeige setzen
                    name.setText(spieler5.spielerName);
                    score.setText(String.valueOf(spieler5.score));
                    pfeile.setText(String.valueOf(spieler5.geworfenePfeile));
                    durchschnitt.setText(Float.toString(spieler5.durchschnitt));
                    wurfstatistik(spieler5, false);
                }
                else if (rundenname.equals(spieler7.spielerName)) {
                    if (spieler6.geworfenePfeile == 0) return;
                    //liste aktualisieren
                    listenName1.setText(spieler7.spielerName);
                    listenPunkte1.setText(spieler7.score + "  Ø: " + spieler7.durchschnitt);
                    listenName2.setText(spieler8.spielerName);
                    listenPunkte2.setText(spieler8.score + "  Ø: " + spieler8.durchschnitt);
                    listenName3.setText(spieler1.spielerName);
                    listenPunkte3.setText(spieler1.score + "  Ø: " + spieler1.durchschnitt);
                    listenName4.setText(spieler2.spielerName);
                    listenPunkte4.setText(spieler2.score + "  Ø: " + spieler2.durchschnitt);
                    listenName5.setText(spieler3.spielerName);
                    listenPunkte5.setText(spieler3.score + "  Ø: " + spieler3.durchschnitt);
                    listenName6.setText(spieler4.spielerName);
                    listenPunkte6.setText(spieler4.score + "  Ø: " + spieler4.durchschnitt);
                    listenName7.setText(spieler5.spielerName);
                    listenPunkte7.setText(spieler5.score + "  Ø: " + spieler5.durchschnitt);
                    dummy3 = spieler7.score;
                    //nächsten spieler auf aktuelle-anzeige setzen
                    name.setText(spieler6.spielerName);
                    score.setText(String.valueOf(spieler6.score));
                    pfeile.setText(String.valueOf(spieler6.geworfenePfeile));
                    durchschnitt.setText(Float.toString(spieler6.durchschnitt));
                    wurfstatistik(spieler6, false);
                }
                else if (rundenname.equals(spieler8.spielerName)) {
                    if (spieler7.geworfenePfeile == 0) return;
                    //liste aktualisieren
                    listenName1.setText(spieler8.spielerName);
                    listenPunkte1.setText(spieler8.score + "  Ø: " + spieler8.durchschnitt);
                    listenName2.setText(spieler1.spielerName);
                    listenPunkte2.setText(spieler1.score + "  Ø: " + spieler1.durchschnitt);
                    listenName3.setText(spieler2.spielerName);
                    listenPunkte3.setText(spieler2.score + "  Ø: " + spieler2.durchschnitt);
                    listenName4.setText(spieler3.spielerName);
                    listenPunkte4.setText(spieler3.score + "  Ø: " + spieler3.durchschnitt);
                    listenName5.setText(spieler4.spielerName);
                    listenPunkte5.setText(spieler4.score + "  Ø: " + spieler4.durchschnitt);
                    listenName6.setText(spieler5.spielerName);
                    listenPunkte6.setText(spieler5.score + "  Ø: " + spieler5.durchschnitt);
                    listenName7.setText(spieler6.spielerName);
                    listenPunkte7.setText(spieler6.score + "  Ø: " + spieler6.durchschnitt);
                    dummy3 = spieler8.score;
                    //nächsten spieler auf aktuelle-anzeige setzen
                    name.setText(spieler7.spielerName);
                    score.setText(String.valueOf(spieler7.score));
                    pfeile.setText(String.valueOf(spieler7.geworfenePfeile));
                    durchschnitt.setText(Float.toString(spieler7.durchschnitt));
                    wurfstatistik(spieler7, false);
                }
                vorschlagsetzenliste(dummy3, listenvorschlag1);
                break;
            }

        }

        //vorschlag "berechnen" und geworfene Pfeilwerte zurücksetzen

        dummy2 = Integer.parseInt(score.getText().toString());
        vorschlagsetzen(dummy2);
        // >entfernt< evtl. anzeigen anpassen mit speicherwerten
    }

    private void spielerspeichern(MainActivity.spieler player, boolean winner) {
        MainActivity.spieler rdummy;
        // position(index) von player finden
        int i, z, y = -1;
        z = MainActivity.allespieler.size();
        for (i = 0; i < z; i++) {
            if (MainActivity.allespieler.get(i).spielerName.equals(player.spielerName)) y = i;
        }
        if (y == -1) {
            Toast.makeText(getApplicationContext(), getResources().getString(R.string.fehlerbeims) + player.spielerName + getResources().getString(R.string.namenichtg), Toast.LENGTH_LONG).show();
            return;
        }
        rdummy = MainActivity.allespieler.get(y);
        rdummy.AnzahlSpiele++;
        if (spieleranzahl == 1) rdummy.AnzahlEinzelspiele++;
        rdummy.geworfenePfeile += player.geworfenePfeile;
        if (rdummy.AnzahlSpiele > 1)   //division durch 0 vermeiden bei der ersten eintragung
            rdummy.durchschnitt = (((rdummy.durchschnitt * (rdummy.AnzahlSpiele - 1)) + player.durchschnitt) / rdummy.AnzahlSpiele);
        else
            rdummy.durchschnitt = player.durchschnitt;
        rdummy.anzahl180 += player.anzahl180;
        rdummy.anzahluber60 += player.anzahluber60;
        rdummy.anzahluber100 += player.anzahluber100;
        rdummy.anzahluber140 += player.anzahluber140;
        if (rdummy.besterWurf < player.besterWurf) rdummy.besterWurf = player.besterWurf;
        if (winner && (spieleranzahl > 1)) rdummy.anzahlSiege++;
        if (rdummy.checkoutmax < player.checkoutmax) rdummy.checkoutmax = player.checkoutmax;
        rdummy.matcheslost += player.matcheslost;
        rdummy.matcheswon += player.matcheswon;
        MainActivity.allespieler.set(y, rdummy);
    }

    private void spielerwertespeichern() {

        rundenname = name.getText().toString();
        switch (spieleranzahl) {
            case 1: {
                // aktuelle anzeigewerte zwischenspeichern
                wurfstatistik(spieler1, true);
                spielerspeichern(spieler1, false);
                break;
            }
            case 2: {
                // anzeigewerte speichern
                if (rundenname.equals(spieler1.spielerName)) {
                    // aktuelle anzeigewerte zwischenspeichern
                    wurfstatistik(spieler1, true);
                    spielerspeichern(spieler1, true);
                    spielerspeichern(spieler2, false);


                } else if (rundenname.equals(spieler2.spielerName)) {
                    wurfstatistik(spieler2, true);
                    spielerspeichern(spieler2, true);
                    spielerspeichern(spieler1, false);
                }
                break;
            }
            case 3: {
                if (rundenname.equals(spieler1.spielerName)) {
                    wurfstatistik(spieler1, true);
                    spielerspeichern(spieler1, true);
                    spielerspeichern(spieler2, false);
                    spielerspeichern(spieler3, false);
                } else if (rundenname.equals(spieler2.spielerName)) {
                    wurfstatistik(spieler2, true);
                    spielerspeichern(spieler1, false);
                    spielerspeichern(spieler2, true);
                    spielerspeichern(spieler3, false);
                } else if (rundenname.equals(spieler3.spielerName)) {
                    wurfstatistik(spieler3, true);
                    spielerspeichern(spieler1, false);
                    spielerspeichern(spieler2, false);
                    spielerspeichern(spieler3, true);
                }
                break;
            }
            case 4: {
                if (rundenname.equals(spieler1.spielerName)) {
                    wurfstatistik(spieler1, true);
                    spielerspeichern(spieler1, true);
                    spielerspeichern(spieler2, false);
                    spielerspeichern(spieler3, false);
                    spielerspeichern(spieler4, false);
                } else if (rundenname.equals(spieler2.spielerName)) {
                    wurfstatistik(spieler2, true);
                    spielerspeichern(spieler1, false);
                    spielerspeichern(spieler2, true);
                    spielerspeichern(spieler3, false);
                    spielerspeichern(spieler4, false);
                } else if (rundenname.equals(spieler3.spielerName)) {
                    wurfstatistik(spieler3, true);
                    spielerspeichern(spieler1, false);
                    spielerspeichern(spieler2, false);
                    spielerspeichern(spieler3, true);
                    spielerspeichern(spieler4, false);
                } else if (rundenname.equals(spieler4.spielerName)) {
                    wurfstatistik(spieler4, true);
                    spielerspeichern(spieler1, false);
                    spielerspeichern(spieler2, false);
                    spielerspeichern(spieler3, false);
                    spielerspeichern(spieler4, true);
                }
                break;
            }
            case 5: {
                if (rundenname.equals(spieler1.spielerName)) {
                    wurfstatistik(spieler1, true);
                    spielerspeichern(spieler1, true);
                    spielerspeichern(spieler2, false);
                    spielerspeichern(spieler3, false);
                    spielerspeichern(spieler4, false);
                    spielerspeichern(spieler5, false);
                } else if (rundenname.equals(spieler2.spielerName)) {
                    wurfstatistik(spieler2, true);
                    spielerspeichern(spieler1, false);
                    spielerspeichern(spieler2, true);
                    spielerspeichern(spieler3, false);
                    spielerspeichern(spieler4, false);
                    spielerspeichern(spieler5, false);
                } else if (rundenname.equals(spieler3.spielerName)) {
                    wurfstatistik(spieler3, true);
                    spielerspeichern(spieler1, false);
                    spielerspeichern(spieler2, false);
                    spielerspeichern(spieler3, true);
                    spielerspeichern(spieler4, false);
                    spielerspeichern(spieler5, false);
                } else if (rundenname.equals(spieler4.spielerName)) {
                    wurfstatistik(spieler4, true);
                    spielerspeichern(spieler1, false);
                    spielerspeichern(spieler2, false);
                    spielerspeichern(spieler3, false);
                    spielerspeichern(spieler4, true);
                    spielerspeichern(spieler5, false);
                } else if (rundenname.equals(spieler5.spielerName)) {
                    wurfstatistik(spieler5, true);
                    spielerspeichern(spieler1, false);
                    spielerspeichern(spieler2, false);
                    spielerspeichern(spieler3, false);
                    spielerspeichern(spieler4, false);
                    spielerspeichern(spieler5, true);
                }
                break;
            }
            case 6: {
                if (rundenname.equals(spieler1.spielerName)) {
                    wurfstatistik(spieler1, true);
                    spielerspeichern(spieler1, true);
                    spielerspeichern(spieler2, false);
                    spielerspeichern(spieler3, false);
                    spielerspeichern(spieler4, false);
                    spielerspeichern(spieler5, false);
                    spielerspeichern(spieler6, false);
                } else if (rundenname.equals(spieler2.spielerName)) {
                    wurfstatistik(spieler2, true);
                    spielerspeichern(spieler1, false);
                    spielerspeichern(spieler2, true);
                    spielerspeichern(spieler3, false);
                    spielerspeichern(spieler4, false);
                    spielerspeichern(spieler5, false);
                    spielerspeichern(spieler6, false);
                } else if (rundenname.equals(spieler3.spielerName)) {
                    wurfstatistik(spieler3, true);
                    spielerspeichern(spieler1, false);
                    spielerspeichern(spieler2, false);
                    spielerspeichern(spieler3, true);
                    spielerspeichern(spieler4, false);
                    spielerspeichern(spieler5, false);
                    spielerspeichern(spieler6, false);
                } else if (rundenname.equals(spieler4.spielerName)) {
                    wurfstatistik(spieler4, true);
                    spielerspeichern(spieler1, false);
                    spielerspeichern(spieler2, false);
                    spielerspeichern(spieler3, false);
                    spielerspeichern(spieler4, true);
                    spielerspeichern(spieler5, false);
                    spielerspeichern(spieler6, false);
                } else if (rundenname.equals(spieler5.spielerName)) {
                    wurfstatistik(spieler5, true);
                    spielerspeichern(spieler1, false);
                    spielerspeichern(spieler2, false);
                    spielerspeichern(spieler3, false);
                    spielerspeichern(spieler4, false);
                    spielerspeichern(spieler5, true);
                    spielerspeichern(spieler6, false);
                } else if (rundenname.equals(spieler6.spielerName)) {
                    wurfstatistik(spieler6, true);
                    spielerspeichern(spieler1, false);
                    spielerspeichern(spieler2, false);
                    spielerspeichern(spieler3, false);
                    spielerspeichern(spieler4, false);
                    spielerspeichern(spieler5, false);
                    spielerspeichern(spieler6, true);
                }
                break;
            }
            case 7: {
                if (rundenname.equals(spieler1.spielerName)) {
                    wurfstatistik(spieler1, true);
                    spielerspeichern(spieler1, true);
                    spielerspeichern(spieler2, false);
                    spielerspeichern(spieler3, false);
                    spielerspeichern(spieler4, false);
                    spielerspeichern(spieler5, false);
                    spielerspeichern(spieler6, false);
                    spielerspeichern(spieler7, false);
                } else if (rundenname.equals(spieler2.spielerName)) {
                    wurfstatistik(spieler2, true);
                    spielerspeichern(spieler1, false);
                    spielerspeichern(spieler2, true);
                    spielerspeichern(spieler3, false);
                    spielerspeichern(spieler4, false);
                    spielerspeichern(spieler5, false);
                    spielerspeichern(spieler6, false);
                    spielerspeichern(spieler7, false);
                } else if (rundenname.equals(spieler3.spielerName)) {
                    wurfstatistik(spieler3, true);
                    spielerspeichern(spieler1, false);
                    spielerspeichern(spieler2, false);
                    spielerspeichern(spieler3, true);
                    spielerspeichern(spieler4, false);
                    spielerspeichern(spieler5, false);
                    spielerspeichern(spieler6, false);
                    spielerspeichern(spieler7, false);
                } else if (rundenname.equals(spieler4.spielerName)) {
                    wurfstatistik(spieler4, true);
                    spielerspeichern(spieler1, false);
                    spielerspeichern(spieler2, false);
                    spielerspeichern(spieler3, false);
                    spielerspeichern(spieler4, true);
                    spielerspeichern(spieler5, false);
                    spielerspeichern(spieler6, false);
                    spielerspeichern(spieler7, false);
                } else if (rundenname.equals(spieler5.spielerName)) {
                    wurfstatistik(spieler5, true);
                    spielerspeichern(spieler1, false);
                    spielerspeichern(spieler2, false);
                    spielerspeichern(spieler3, false);
                    spielerspeichern(spieler4, false);
                    spielerspeichern(spieler5, true);
                    spielerspeichern(spieler6, false);
                    spielerspeichern(spieler7, false);
                } else if (rundenname.equals(spieler6.spielerName)) {
                    wurfstatistik(spieler6, true);
                    spielerspeichern(spieler1, false);
                    spielerspeichern(spieler2, false);
                    spielerspeichern(spieler3, false);
                    spielerspeichern(spieler4, false);
                    spielerspeichern(spieler5, false);
                    spielerspeichern(spieler6, true);
                    spielerspeichern(spieler7, false);
                } else if (rundenname.equals(spieler7.spielerName)) {
                    wurfstatistik(spieler7, true);
                    spielerspeichern(spieler1, false);
                    spielerspeichern(spieler2, false);
                    spielerspeichern(spieler3, false);
                    spielerspeichern(spieler4, false);
                    spielerspeichern(spieler5, false);
                    spielerspeichern(spieler6, false);
                    spielerspeichern(spieler7, true);
                }
                break;
            }
            case 8: {
                if (rundenname.equals(spieler1.spielerName)) {
                    wurfstatistik(spieler1, true);
                    spielerspeichern(spieler1, true);
                    spielerspeichern(spieler2, false);
                    spielerspeichern(spieler3, false);
                    spielerspeichern(spieler4, false);
                    spielerspeichern(spieler5, false);
                    spielerspeichern(spieler6, false);
                    spielerspeichern(spieler7, false);
                    spielerspeichern(spieler8, false);
                } else if (rundenname.equals(spieler2.spielerName)) {
                    wurfstatistik(spieler2, true);
                    spielerspeichern(spieler1, false);
                    spielerspeichern(spieler2, true);
                    spielerspeichern(spieler3, false);
                    spielerspeichern(spieler4, false);
                    spielerspeichern(spieler5, false);
                    spielerspeichern(spieler6, false);
                    spielerspeichern(spieler7, false);
                    spielerspeichern(spieler8, false);
                } else if (rundenname.equals(spieler3.spielerName)) {
                    wurfstatistik(spieler3, true);
                    spielerspeichern(spieler1, false);
                    spielerspeichern(spieler2, false);
                    spielerspeichern(spieler3, true);
                    spielerspeichern(spieler4, false);
                    spielerspeichern(spieler5, false);
                    spielerspeichern(spieler6, false);
                    spielerspeichern(spieler7, false);
                    spielerspeichern(spieler8, false);
                } else if (rundenname.equals(spieler4.spielerName)) {
                    wurfstatistik(spieler4, true);
                    spielerspeichern(spieler1, false);
                    spielerspeichern(spieler2, false);
                    spielerspeichern(spieler3, false);
                    spielerspeichern(spieler4, true);
                    spielerspeichern(spieler5, false);
                    spielerspeichern(spieler6, false);
                    spielerspeichern(spieler7, false);
                    spielerspeichern(spieler8, false);
                } else if (rundenname.equals(spieler5.spielerName)) {
                    wurfstatistik(spieler5, true);
                    spielerspeichern(spieler1, false);
                    spielerspeichern(spieler2, false);
                    spielerspeichern(spieler3, false);
                    spielerspeichern(spieler4, false);
                    spielerspeichern(spieler5, true);
                    spielerspeichern(spieler6, false);
                    spielerspeichern(spieler7, false);
                    spielerspeichern(spieler8, false);
                } else if (rundenname.equals(spieler6.spielerName)) {
                    wurfstatistik(spieler6, true);
                    spielerspeichern(spieler1, false);
                    spielerspeichern(spieler2, false);
                    spielerspeichern(spieler3, false);
                    spielerspeichern(spieler4, false);
                    spielerspeichern(spieler5, false);
                    spielerspeichern(spieler6, true);
                    spielerspeichern(spieler7, false);
                    spielerspeichern(spieler8, false);
                } else if (rundenname.equals(spieler7.spielerName)) {
                    wurfstatistik(spieler7, true);
                    spielerspeichern(spieler1, false);
                    spielerspeichern(spieler2, false);
                    spielerspeichern(spieler3, false);
                    spielerspeichern(spieler4, false);
                    spielerspeichern(spieler5, false);
                    spielerspeichern(spieler6, false);
                    spielerspeichern(spieler7, true);
                    spielerspeichern(spieler8, false);
                } else if (rundenname.equals(spieler8.spielerName)) {
                    wurfstatistik(spieler8, true);
                    spielerspeichern(spieler1, false);
                    spielerspeichern(spieler2, false);
                    spielerspeichern(spieler3, false);
                    spielerspeichern(spieler4, false);
                    spielerspeichern(spieler5, false);
                    spielerspeichern(spieler6, false);
                    spielerspeichern(spieler7, false);
                    spielerspeichern(spieler8, true);
                }
                break;
            }
        }
        //Änderungen in Datei speichern
        MainActivity.speichern(this,suddendeath);
    }

       public void onBackPressed() {

        AlertDialog alertDialog = new AlertDialog.Builder(matchcalc.this).create();
        alertDialog.setTitle(getResources().getString(R.string.achtung));
        alertDialog.setMessage(getResources().getString(R.string.willstduverlassen));
        alertDialog.setButton(AlertDialog.BUTTON_POSITIVE, getResources().getString(R.string.jaichw),
                new DialogInterface.OnClickListener() {
                    public void onClick(DialogInterface dialog, int which) {
                        dialog.dismiss();
                        finish();
                    }
                });
        alertDialog.setButton(AlertDialog.BUTTON_NEGATIVE, getResources().getString(R.string.zuruck), new DialogInterface.OnClickListener() {
            @Override
            public void onClick(DialogInterface dialog, int which) {
                dialog.dismiss();

            }
        });
        alertDialog.show();
    }


    private void vorschlagsetzen(int mydummy) {
        int dt=1;
        if (doubleout) dt=2;
        if (masterout) dt=3;
        ArrayList<String> berechneteVorschlaege = vorschlaege(mydummy,checkoutzahl,dt);
        ArrayAdapter vorschlaegefuerspinner = new ArrayAdapter<>(
                matchcalc.this,
                R.layout.match_spinner_item_head, berechneteVorschlaege);
        vorschlaegefuerspinner.setDropDownViewResource(R.layout.support_simple_spinner_dropdown_item);
        Spinner vorschlagsliste = findViewById(R.id.vorschlagsspinner);
        vorschlagsliste.setVisibility(View.VISIBLE);
        vorschlaegefuerspinner.notifyDataSetChanged();
        vorschlagsliste.setAdapter(vorschlaegefuerspinner);


        String vorschlagswahl="...";
        // auswahl des "besten" vorschlages

        // if checkout favorite is selected an still possible, select first in list
        if (checkoutzahl!=0 && mydummy >= dt*checkoutzahl && berechneteVorschlaege.size() > 1) {
            vorschlagswahl = berechneteVorschlaege.get(1);
        }
        else if (berechneteVorschlaege.size() > 1) {
            int kleinsterVorschlag=20;
            for (String aktuell:berechneteVorschlaege) {
                if (aktuell.length() < kleinsterVorschlag)
                    kleinsterVorschlag = aktuell.length();
            }

            vorschlagswahl = berechneteVorschlaege.get(berechneteVorschlaege.size()-1);
            boolean changed=false;
            for (int i=berechneteVorschlaege.size()-1; i>=1;i--) {
                if (berechneteVorschlaege.get(i).length() == vorschlagswahl.length()
                        && berechneteVorschlaege.get(i).charAt(0) != 'D'
                        && berechneteVorschlaege.get(i).charAt(0) != 'T') {
                    vorschlagswahl = berechneteVorschlaege.get(i);
                    changed=true;
                }
                if (berechneteVorschlaege.get(i).length() < vorschlagswahl.length()) {
                    vorschlagswahl = berechneteVorschlaege.get(i);
                    changed=true;
                }
            }

            if (!changed && kleinsterVorschlag != vorschlagswahl.length()) {
                vorschlagswahl="...";
                Random index = new Random();
                while (vorschlagswahl.equals("..."))
                    vorschlagswahl = berechneteVorschlaege.get(index.nextInt(berechneteVorschlaege.size()));
            }

        }

        // gewählten Vorschlagsstring aufteilen und den entsprechenden Textviews zuweisen
        if (!vorschlagswahl.equals("...")) {
            String[] vorschlage = vorschlagswahl.split(" ");
            vorschlagsliste.setVisibility(View.VISIBLE);
            switch (vorschlage.length) {
                case 3:
                    v3.setText(vorschlage[2]+" )");
                    v2.setText(vorschlage[1]);
                    v1.setText("( "+vorschlage[0]);
                    v1.setVisibility(View.VISIBLE);
                    v2.setVisibility(View.VISIBLE);
                    v3.setVisibility(View.VISIBLE);
                    break;
                case 2:
                    v3.setVisibility(View.GONE);
                    v1.setVisibility(View.VISIBLE);
                    v2.setVisibility(View.VISIBLE);
                    v2.setText(vorschlage[1]+" )");
                    v1.setText("( "+vorschlage[0]);
                    break;
                case 1:
                    v3.setVisibility(View.GONE);
                    v2.setVisibility(View.GONE);
                    v1.setVisibility(View.VISIBLE);
                    v1.setText("( "+vorschlage[0]+" )");
                    break;
                case 0:
                    v3.setVisibility(View.INVISIBLE);
                    v2.setVisibility(View.INVISIBLE);
                    v1.setVisibility(View.INVISIBLE);
                    vorschlagsliste.setVisibility(View.INVISIBLE);
                    break;
            }
        }
        else {
            v3.setVisibility(View.INVISIBLE);
            v2.setVisibility(View.INVISIBLE);
            v1.setVisibility(View.INVISIBLE);
            vorschlagsliste.setVisibility(View.INVISIBLE);
        }

    }



    private void vorschlagsetzenliste(int mydummy, TextView vorschlag) {
        int dt=1;
        if (doubleout) dt=2;
        if (masterout) dt=3;
        ArrayList <String> berechneteVorschlaege = vorschlaege(mydummy,checkoutzahl,dt);
        String vorschlagswahl="";
        if (berechneteVorschlaege.size() > 1) {
            int kleinsterVorschlag=20;
            for (String aktuell:berechneteVorschlaege) {
                if (aktuell.length() < kleinsterVorschlag)
                    kleinsterVorschlag = aktuell.length();
            }

            vorschlagswahl = berechneteVorschlaege.get(berechneteVorschlaege.size()-1);
            boolean changed=false;
            for (int i=berechneteVorschlaege.size()-1; i>=1;i--) {
                if (berechneteVorschlaege.get(i).length() == vorschlagswahl.length()
                        && !berechneteVorschlaege.get(i).substring(0,1).equals("D")
                        && !berechneteVorschlaege.get(i).substring(0,1).equals("T") ) {
                    vorschlagswahl = berechneteVorschlaege.get(i);
                    changed=true;
                }
                if (berechneteVorschlaege.get(i).length() < vorschlagswahl.length()) {
                    vorschlagswahl = berechneteVorschlaege.get(i);
                    changed=true;
                }
            }

            if (!changed && kleinsterVorschlag != vorschlagswahl.length()) {
                vorschlagswahl="...";
                Random index = new Random();
                while (vorschlagswahl.equals("..."))
                    vorschlagswahl = berechneteVorschlaege.get(index.nextInt(berechneteVorschlaege.size()));
            }

        }
        vorschlag.setText("( "+vorschlagswahl+" )");

        if (vorschlagswahl.isEmpty()) {
            vorschlag.setVisibility(View.GONE);
            vorschlag.setText("");
        }
        else
            vorschlag.setVisibility(View.VISIBLE);
    }


    private boolean suddendeatherreicht() {
        if (!suddendeath) return false;
        switch (spieleranzahl) {
            case 8:
                if (!((spieler8.geworfenePfeile>=suddendeathdarts) && (spieler8.geworfenePfeile==spieler7.geworfenePfeile)
                        && (spieler8.geworfenePfeile==spieler6.geworfenePfeile) && (spieler8.geworfenePfeile==spieler5.geworfenePfeile) && (spieler8.geworfenePfeile==spieler4.geworfenePfeile)
                        && (spieler8.geworfenePfeile==spieler3.geworfenePfeile) && (spieler8.geworfenePfeile==spieler2.geworfenePfeile) && (spieler8.geworfenePfeile==spieler1.geworfenePfeile) ))
                    return false;
                break;
            case 7:
                if (!((spieler7.geworfenePfeile>=suddendeathdarts) && (spieler7.geworfenePfeile==spieler6.geworfenePfeile)
                        && (spieler7.geworfenePfeile==spieler5.geworfenePfeile) && (spieler7.geworfenePfeile==spieler4.geworfenePfeile) && (spieler7.geworfenePfeile==spieler3.geworfenePfeile)
                        && (spieler7.geworfenePfeile==spieler2.geworfenePfeile) && (spieler7.geworfenePfeile==spieler1.geworfenePfeile)  ))
                    return false;
                break;
            case 6:
                if (!((spieler6.geworfenePfeile>=suddendeathdarts) && (spieler6.geworfenePfeile==spieler5.geworfenePfeile)
                        && (spieler6.geworfenePfeile==spieler4.geworfenePfeile) && (spieler6.geworfenePfeile==spieler3.geworfenePfeile) && (spieler6.geworfenePfeile==spieler2.geworfenePfeile)
                        && (spieler6.geworfenePfeile==spieler1.geworfenePfeile)  ))
                    return false;
                break;
            case 5:
                if (!((spieler5.geworfenePfeile>=suddendeathdarts) && (spieler5.geworfenePfeile==spieler4.geworfenePfeile)
                        && (spieler5.geworfenePfeile==spieler3.geworfenePfeile) && (spieler5.geworfenePfeile==spieler2.geworfenePfeile) && (spieler5.geworfenePfeile==spieler1.geworfenePfeile) ))
                    return false;
                break;
            case 4:
                if (!((spieler4.geworfenePfeile>=suddendeathdarts) && (spieler4.geworfenePfeile==spieler3.geworfenePfeile)
                        && (spieler4.geworfenePfeile==spieler2.geworfenePfeile) && (spieler4.geworfenePfeile==spieler1.geworfenePfeile)))
                    return false;
                break;
            case 3:
                if (!((spieler3.geworfenePfeile>=suddendeathdarts) && (spieler3.geworfenePfeile==spieler2.geworfenePfeile)
                        && (spieler3.geworfenePfeile==spieler1.geworfenePfeile)))
                    return false;
                break;
            case 2:
                if (!((spieler2.geworfenePfeile>=suddendeathdarts) && (spieler2.geworfenePfeile==spieler1.geworfenePfeile)))
                    return false;
                break;
            case 1:
                if (!(spieler1.geworfenePfeile>=suddendeathdarts))
                    return false;
                break;
        }
        return true;
    }


    // Vorschläge für Checkoutwege berechnen und sortieren
    private ArrayList<String> vorschlaege(int rest, int lieblingsfinish, int DoubleoutOderTripleout) {
        return dc_modules.vorschlaege(rest, lieblingsfinish, DoubleoutOderTripleout);
    }

    private final AdapterView.OnItemSelectedListener vorschlagauswahlclick = new AdapterView.OnItemSelectedListener() {
        @Override
        public void onItemSelected(AdapterView<?> adapterView, View view, int i, long l) {

            Spinner vorschlaegeliste = findViewById(R.id.vorschlagsspinner);
            String vorschlagswahl = vorschlaegeliste.getSelectedItem().toString();
            int pos=vorschlaegeliste.getSelectedItemPosition();
            vorschlaegeliste.setSelection(0);
            TextView v1 = findViewById(R.id.vorschlag1);
            TextView v2 = findViewById(R.id.vorschlag2);
            TextView v3 = findViewById(R.id.vorschlag3);
            // gewählten Vorschlagsstring aufteilen und den entsprechenden Textviews zuweisen

            if (pos != 0) {
                String[] vorschlage = vorschlagswahl.split(" ");
                switch (vorschlage.length) {
                    case 3:
                        v3.setText(vorschlage[2]+" )");
                        v2.setText(vorschlage[1]);
                        v1.setText("( "+vorschlage[0]);
                        v1.setVisibility(View.VISIBLE);
                        v2.setVisibility(View.VISIBLE);
                        v3.setVisibility(View.VISIBLE);
                        break;
                    case 2:
                        v3.setVisibility(View.GONE);
                        v1.setVisibility(View.VISIBLE);
                        v2.setVisibility(View.VISIBLE);
                        v2.setText(vorschlage[1]+" )");
                        v1.setText("( "+vorschlage[0]);
                        break;
                    case 1:
                        v3.setVisibility(View.GONE);
                        v2.setVisibility(View.GONE);
                        v1.setVisibility(View.VISIBLE);
                        v1.setText("( "+vorschlage[0]+" )");
                        break;
                    case 0:
                        v3.setVisibility(View.INVISIBLE);
                        v2.setVisibility(View.INVISIBLE);
                        v1.setVisibility(View.INVISIBLE);
                        break;
                }
            }

        }

        @Override
        public void onNothingSelected(AdapterView<?> adapterView) {

        }
    };

    private final View.OnClickListener vorschlagsclick = new View.OnClickListener() {
        @Override
        public void onClick(View view) {
            Spinner vorschlagsspinner = findViewById(R.id.vorschlagsspinner);
            vorschlagsspinner.performClick();
        }
    };



}
