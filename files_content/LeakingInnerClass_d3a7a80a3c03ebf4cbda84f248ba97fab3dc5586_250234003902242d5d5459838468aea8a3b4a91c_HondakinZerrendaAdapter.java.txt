package com.gaika.bilketa.adapters;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;

import android.content.Context;
import android.graphics.Typeface;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ArrayAdapter;
import android.widget.Filter;
import android.widget.Filterable;
import android.widget.TextView;

import com.gaika.bilketa.model.DataBaseObject;
import com.gaika.bilketa.model.HondakinMota;
import com.gaika.bilketa.model.Hondakina;
import com.gaika.bilketa.utils.Settings;
import com.gaika.bilketa.R;

public class HondakinZerrendaAdapter extends ArrayAdapter<Hondakina> implements Filterable
{
	protected Context _context;
	protected ArrayList<Hondakina> _items;
	protected int _layout;
	private HondakinFilter _filter;
    private final Object mLock = new Object();
	
	public HondakinZerrendaAdapter(Context context, ArrayList<Hondakina> arrayList)
    {
		this(context, R.layout.hondakin_zerrenda_item, arrayList);
    }
    
    public HondakinZerrendaAdapter(Context context, int layout, ArrayList<Hondakina> items)
    {
        super(context, layout, items);
        
        _context = context;
        Comparator<DataBaseObject> comperator = new Comparator<DataBaseObject>()
		{
			public int compare(DataBaseObject object1, DataBaseObject object2) {
				return object1.getBistaratzekoIzena().compareToIgnoreCase(object2.getBistaratzekoIzena());
			}
		};
		
		Collections.sort(items, comperator);
        
        _items = new ArrayList<Hondakina>(items);
        _layout = layout;
    }
    
    @Override
    public View getView(int position, View convertView, ViewGroup parent)
    {
    	if (convertView == null)
        {
            LayoutInflater vi = (LayoutInflater)_context.getSystemService(Context.LAYOUT_INFLATER_SERVICE);
            convertView = vi.inflate(_layout, null);
        }

    	//Hondakina dbo = (Hondakina)_filteredItems.get(position);
    	Hondakina dbo = (Hondakina)getItem(position);
    	
    	View colorView = convertView.findViewById(R.id.view_hondakinKolorea);

    	ArrayList<HondakinMota> motak = dbo.getMotak();
		int colorID;
		
		if(motak.size() > 1)
			colorID = R.color.neutroa;
		else
		{
			colorID	= _context.getResources().getIdentifier(motak.get(0).getIzena(), "color", _context.getPackageName());
    	
	    	if(colorID == 0)
	    		colorID = R.color.neutroa;
		}
    	
		if(colorView != null)
    	{
			if(colorID != R.color.neutroa)
			{
				colorView.setVisibility(View.VISIBLE);
				colorView.setBackgroundColor(_context.getResources().getColor(colorID));
			}
			else
				colorView.setVisibility(View.INVISIBLE);
    	}
		
        TextView txt = (TextView)convertView.findViewById(R.id.txt_hondakinIzena);
        if(txt != null)
        {
        	txt.setTypeface(Typeface.createFromAsset(_context.getAssets(), Settings.FONT_URL));
        	txt.setText(dbo.getBistaratzekoIzena());
        }
        
        return convertView;
    }

	public int getPositionByID(int aukeraID)
	{
		for (int i = 0; i < _items.size(); i++)
		{
			if(_items.get(i).getID() == aukeraID)
				return i;
		}
		
		return -1;
	}
	
	public Filter getFilter()
	{
        if (_filter == null)
        {
        	_filter = new HondakinFilter();
        }
        
        return _filter;
    }

    private class HondakinFilter extends Filter
    {
        @SuppressWarnings({ "rawtypes", "unchecked" })
        @Override
        protected FilterResults performFiltering(CharSequence prefix)
        {            
            FilterResults results = new FilterResults();

            if (prefix == null || prefix.length() == 0)
            {
                synchronized (mLock)
                {
                    results.values = _items;
                    results.count = _items.size();
                }
            }
            else
            {
                synchronized(mLock)
                {
                	Hondakina zaborra;
                    final ArrayList filteredItems = new ArrayList();
                	for (int i = 0; i < _items.size(); i++)
                	{
                		zaborra = _items.get(i);
                		
                		if(zaborra.getBistaratzekoIzena().toLowerCase().indexOf(prefix.toString().toLowerCase()) != -1)
                			filteredItems.add(zaborra);
            		}
                	
                    results.values = filteredItems;
                    results.count = filteredItems.size();
                }//end synchronized
            }

            return results;
        }


        @SuppressWarnings("unchecked")
        protected void publishResults(CharSequence prefix, FilterResults results)
        {
        	synchronized(mLock)
            {
            	final ArrayList<Hondakina> localItems = (ArrayList<Hondakina>) results.values;
                clear();
                for (Hondakina gi : localItems)
                {
                    add(gi);
                }
                notifyDataSetChanged();
            }//end synchronized
        }
    }
}
