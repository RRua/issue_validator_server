// Inefficient: Reads state value directly in composition
@Composable
fun ProgressIndicator(progress: State<Float>) {
    CircularProgressIndicator(progress = progress.value)
}

----

// Efficient: Uses derivedStateOf to minimize recompositions
@Composable
fun ProgressIndicator(progress: State<Float>) {
    val derivedProgress by remember { derivedStateOf { progress.value } }
    CircularProgressIndicator(progress = derivedProgress)
}
