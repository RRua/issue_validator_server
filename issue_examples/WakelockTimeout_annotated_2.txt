// Inefficient: This code is inefficient because it acquires a wakelock without a timeout, potentially causing battery drain if not released properly.
public abstract class WakelockTest extends Context {
    public PowerManager.WakeLock createWakelock() {
        PowerManager manager = (PowerManager) getSystemService(POWER_SERVICE);
        PowerManager.WakeLock wakeLock = manager.newWakeLock(PARTIAL_WAKE_LOCK, "Test");
        wakeLock.acquire();
        return wakeLock;
    }
}

-----

// Efficient: This code is efficient because it acquires a wakelock with a specified timeout, preventing potential battery drain by automatically releasing the lock after the timeout period.
public abstract class WakelockTest extends Context {
    public PowerManager.WakeLock createWakelock(long timeout) {
        PowerManager manager = (PowerManager) getSystemService(POWER_SERVICE);
        PowerManager.WakeLock wakeLock = manager.newWakeLock(PARTIAL_WAKE_LOCK, "Test");
        wakeLock.acquire(timeout);
        return wakeLock;
    }
}
