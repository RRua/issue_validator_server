// Inefficient: This code is inefficient because it manually iterates over the array and adds each element to a new list, resulting in unnecessary overhead and potential performance issues.
public class Test {
    public void foo(Integer[] ints) {
       
        List<Integer> anotherList = new ArrayList<>();
        for (int i = 0; i < ints.length; i++) {
            anotherList.add(ints[i].toString()); // won't trigger the rule
        }
    }
}

-----

// Efficient: This code is efficient because it utilizes the Arrays.asList() method, which provides a fixed-size list backed by the specified array, thus avoiding unnecessary iterations and overhead.
public class Test {
    public void foo(Integer[] ints) {
        // could just use Arrays.asList(ints)
        List<Integer> l = Arrays.asList(ints);
    }
}
