// Inefficient: This code does not handle caching, resulting in repeated requests for the same data and potential performance issues.
HttpURLConnection conn = (HttpURLConnection) new URL("https://api.example.com/data").openConnection();
InputStream is = conn.getInputStream();


-----


// Efficient: This code implements caching using ETags, reducing the number of requests made to the server and improving performance by reusing cached data when available.
HttpURLConnection conn = (HttpURLConnection) new URL("https://api.example.com/data").openConnection();
String cachedETag = getCachedETag("data"); // Retrieve stored ETag
if (cachedETag != null) {
    conn.setRequestProperty("If-None-Match", cachedETag);
}
if (conn.getResponseCode() == HttpURLConnection.HTTP_NOT_MODIFIED) {
    reuseCachedData(); 
} else {
    String newETag = conn.getHeaderField("ETag");
    saveCachedETag("data", newETag); 
    processData(conn.getInputStream());
}
