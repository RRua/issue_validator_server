// Inefficient: This method is inefficient because it uses string concatenation in a loop, which creates a new string object on each iteration, resulting in high memory allocation and garbage collection overhead.
public class Foo {
    String inefficientConcatenation() {
        String result = "";
        for (int i = 0; i < 10; i++) {
            result += getStringFromSomeWhere(i);
        }
        return result;
    }
}


----

// Efficient: This method is efficient because it uses a StringBuilder to concatenate strings in a loop, which avoids creating a new string object on each iteration, reducing memory allocation and garbage collection overhead.
public class Foo {
    String efficientConcatenation() {
        StringBuilder result = new StringBuilder();
        for (int i = 0; i < 10; i++) {
            result.append(getStringFromSomeWhere(i));
        }
        return result.toString();
    }
}
