// Inefficient: This code is not efficient because it doesn't handle potential exceptions and doesn't close the FileInputStream, which can lead to resource leaks.
FileInputStream fis = new FileInputStream(file);
byte[] data = new byte[fis.available()];
fis.read(data);


----

// Efficient: This code is efficient because it uses a try-with-resources statement, ensuring that the FileInputStream is properly closed after use, regardless of whether an exception is thrown or not.
try (FileInputStream fis = new FileInputStream(file)) {
    byte[] data = new byte[fis.available()];
    fis.read(data);
}
