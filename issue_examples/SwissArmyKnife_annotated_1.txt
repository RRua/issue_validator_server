// Inefficient: This interface forces implementing classes to provide implementations for all methods, even if they are not used, potentially leading to unnecessary code and tight coupling.
public interface MultiFunctionDevice extends Printer, Scanner, FaxMachine {
    void print();
    void scan();
    void fax();
}

public class OfficeMachine implements MultiFunctionDevice {
    // Forced to implement all methods, even if unused
}


----

// Efficient: By defining separate interfaces for each functionality, implementing classes can choose to implement only the methods that are relevant to their purpose, promoting loose coupling and code reuse.
// Refactored Interfaces
public interface Printer { void print(); }
public interface Scanner { void scan(); }
public interface FaxMachine { void fax(); }

public class BasicPrinter implements Printer { /* ... */ }
public class AdvancedMachine implements Printer, Scanner { /* ... */ }
